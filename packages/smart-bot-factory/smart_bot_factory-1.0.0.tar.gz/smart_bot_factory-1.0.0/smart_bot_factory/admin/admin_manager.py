import logging
from typing import Dict, List, Set

from aiogram.types import User

logger = logging.getLogger(__name__)


class AdminManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–æ—Ç–∞"""

    def __init__(self, config, supabase_client):
        self.config = config
        self.supabase = supabase_client
        self.admin_ids: Set[int] = set(config.ADMIN_TELEGRAM_IDS)
        self.admin_modes: Dict[int, bool] = {}  # admin_id -> is_in_admin_mode

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω–æ–≤: {len(self.admin_ids)} –∞–¥–º–∏–Ω–æ–≤")

    async def sync_admins_from_config(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        if not self.admin_ids:
            logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return

        try:
            for admin_id in self.admin_ids:
                await self.supabase.sync_admin(
                    {
                        "telegram_id": admin_id,
                        "username": None,  # –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                        "first_name": None,
                        "last_name": None,
                    }
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if admin_id not in self.admin_modes:
                    self.admin_modes[admin_id] = True

            logger.info(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω—ã: {self.admin_ids}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
            raise

    async def update_admin_info(self, user: User):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥–º–∏–Ω–µ"""
        if not self.is_admin(user.id):
            return

        try:
            await self.supabase.sync_admin(
                {
                    "telegram_id": user.id,
                    "username": user.username,
                    "first_name": user.first_name,
                    "last_name": user.last_name,
                }
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞ {user.id}: {e}")

    def is_admin(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        return telegram_id in self.admin_ids

    def is_in_admin_mode(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.is_admin(telegram_id):
            return False
        return self.admin_modes.get(telegram_id, True)

    def toggle_admin_mode(self, telegram_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
        if not self.is_admin(telegram_id):
            return False

        current_mode = self.admin_modes.get(telegram_id, True)
        new_mode = not current_mode
        self.admin_modes[telegram_id] = new_mode

        logger.info(
            f"–ê–¥–º–∏–Ω {telegram_id} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –≤ —Ä–µ–∂–∏–º: {'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if new_mode else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
        )
        return new_mode

    def set_admin_mode(self, telegram_id: int, is_admin_mode: bool):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∞"""
        if not self.is_admin(telegram_id):
            return

        self.admin_modes[telegram_id] = is_admin_mode
        logger.info(
            f"–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∞ {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {'–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin_mode else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
        )

    async def get_active_admins(self) -> List[int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –≤ —Ä–µ–∂–∏–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        return [
            admin_id for admin_id in self.admin_ids if self.is_in_admin_mode(admin_id)
        ]

    def get_admin_mode_text(self, telegram_id: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞"""
        if not self.is_admin(telegram_id):
            return "–ù–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

        if self.is_in_admin_mode(telegram_id):
            return "üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        else:
            return "üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"

    def format_admin_status(self, telegram_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.is_admin(telegram_id):
            return ""

        mode = "üëë –ê–î–ú–ò–ù" if self.is_in_admin_mode(telegram_id) else "üë§ –ü–û–õ–¨–ó"
        return f"[{mode}]"

    async def notify_admins(self, message: str, exclude_admin: int = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥–º–∏–Ω–∞–º"""
        from ..handlers.handlers import get_global_var
        bot = get_global_var("bot")

        active_admins = await self.get_active_admins()

        if exclude_admin:
            active_admins = [aid for aid in active_admins if aid != exclude_admin]

        sent_count = 0
        for admin_id in active_admins:
            try:
                await bot.send_message(admin_id, message, parse_mode="Markdown")
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∞–¥–º–∏–Ω–∞–º")
        return sent_count

    def get_stats(self) -> Dict[str, any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–¥–º–∏–Ω–∞–º"""
        total_admins = len(self.admin_ids)
        active_admins = len(
            [aid for aid in self.admin_ids if self.is_in_admin_mode(aid)]
        )

        return {
            "total_admins": total_admins,
            "active_admins": active_admins,
            "admin_ids": list(self.admin_ids),
            "modes": dict(self.admin_modes),
        }
