import asyncio
import json
import logging
from datetime import datetime
from pathlib import Path

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import (FSInputFile, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)
from aiogram.utils.media_group import MediaGroupBuilder

from ..core.decorators import (execute_global_handler_from_event,
                               execute_scheduled_task_from_event)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
def get_global_var(var_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ –º–æ–¥—É–ª—è bot_utils"""
    import sys

    current_module = sys.modules[__name__]
    return getattr(current_module, var_name, None)


logger = logging.getLogger(__name__)


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—â–∏—Ö –∫–æ–º–∞–Ω–¥
utils_router = Router()


def setup_utils_handlers(dp):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—Ç–∏–ª–∏—Ç"""
    dp.include_router(utils_router)


def parse_ai_response(ai_response: str) -> tuple[str, dict]:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ –∫–æ–Ω—Ü–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
    try:
        # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é, –≥–¥–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è JSON —Å "—ç—Ç–∞–ø"
        last_etap_pos = ai_response.rfind('"—ç—Ç–∞–ø"')
        if last_etap_pos == -1:
            logger.debug("JSON –±–µ–∑ –∫–ª—é—á–∞ '—ç—Ç–∞–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ai_response, {}

        # –ò—â–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –ø–µ—Ä–µ–¥ "—ç—Ç–∞–ø"
        json_start = -1
        for i in range(last_etap_pos, -1, -1):
            if ai_response[i] == "{":
                json_start = i
                break

        if json_start == -1:
            logger.debug("–û—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –ø–µ—Ä–µ–¥ '—ç—Ç–∞–ø' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ai_response, {}

        # –¢–µ–ø–µ—Ä—å –Ω–∞–π–¥–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
        brace_count = 0
        json_end = -1

        for i in range(json_start, len(ai_response)):
            char = ai_response[i]
            if char == "{":
                brace_count += 1
            elif char == "}":
                brace_count -= 1
                if brace_count == 0:
                    json_end = i
                    break

        if json_end == -1:
            logger.debug("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return ai_response, {}

        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        json_str = ai_response[json_start : json_end + 1]
        response_text = ai_response[:json_start].strip()

        # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ response_text –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –ë–ï–ó JSON
        if not response_text:
            logger.debug(
                "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ JSON —á–∞—Å—Ç–∏"
            )
            # –ë–µ—Ä–µ–º –≤—Å–µ –∫—Ä–æ–º–µ JSON —á–∞—Å—Ç–∏
            remaining_text = ai_response[json_end + 1 :].strip()
            if remaining_text:
                response_text = remaining_text
            else:
                # –ï—Å–ª–∏ –∏ –ø–æ—Å–ª–µ JSON –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –æ—Ç–≤–µ—Ç –±—ã–ª —Ç–æ–ª—å–∫–æ JSON
                response_text = "–û—Ç–≤–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π."
                logger.warning("–û—Ç–≤–µ—Ç –ò–ò —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")

        try:
            metadata = json.loads(json_str)
            logger.debug(f"JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {metadata}")
            return response_text, metadata
        except json.JSONDecodeError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            logger.debug(f"JSON —Å—Ç—Ä–æ–∫–∞: {json_str}")
            return parse_ai_response_method2(ai_response)

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –ò–ò: {e}")
        return parse_ai_response_method2(ai_response)


def parse_ai_response_method2(ai_response: str) -> tuple[str, dict]:
    """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON - –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–µ—Å—Ç–∞–º)"""
    try:
        logger.debug("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")

        lines = ai_response.strip().split("\n")

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "—ç—Ç–∞–ø"
        etap_line = -1
        for i, line in enumerate(lines):
            if '"—ç—Ç–∞–ø"' in line:
                etap_line = i
                break

        if etap_line == -1:
            return ai_response, {}

        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON (—Å—Ç—Ä–æ–∫—É —Å { –ø–µ—Ä–µ–¥ —ç—Ç–∞–ø)
        json_start_line = -1
        for i in range(etap_line, -1, -1):
            if lines[i].strip().startswith("{"):
                json_start_line = i
                break

        if json_start_line == -1:
            return ai_response, {}

        # –ò—â–µ–º –∫–æ–Ω–µ—Ü JSON (–±–∞–ª–∞–Ω—Å–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏)
        brace_count = 0
        json_end_line = -1

        for i in range(json_start_line, len(lines)):
            line = lines[i]
            for char in line:
                if char == "{":
                    brace_count += 1
                elif char == "}":
                    brace_count -= 1
                    if brace_count == 0:
                        json_end_line = i
                        break
            if json_end_line != -1:
                break

        if json_end_line == -1:
            return ai_response, {}

        # –°–æ–±–∏—Ä–∞–µ–º JSON
        json_lines = lines[json_start_line : json_end_line + 1]
        json_str = "\n".join(json_lines)

        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_lines = lines[:json_start_line]
        response_text = "\n".join(response_lines).strip()

        try:
            metadata = json.loads(json_str)
            logger.debug(f"JSON —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {metadata}")
            return response_text, metadata
        except json.JSONDecodeError as e:
            logger.warning(f"–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥: –æ—à–∏–±–∫–∞ JSON: {e}")
            return ai_response, {}

    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {e}")
        return ai_response, {}


async def process_events(session_id: str, events: list, user_id: int) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò

    Returns:
        bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò, False –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ
    """

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    custom_processor = get_global_var("custom_event_processor")

    if custom_processor:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        logger.info(
            f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π: {custom_processor.__name__}"
        )
        await custom_processor(session_id, events, user_id)
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    supabase_client = get_global_var("supabase_client")

    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
    should_send_ai_response = True

    for event in events:
        try:
            event_type = event.get("—Ç–∏–ø", "")
            event_info = event.get("–∏–Ω—Ñ–æ", "")

            if not event_type:
                logger.warning(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –±–µ–∑ —Ç–∏–ø–∞: {event}")
                continue

            logger.info("\nüîî –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è:")
            logger.info(f"   üìù –¢–∏–ø: {event_type}")
            logger.info(f"   üìÑ –î–∞–Ω–Ω—ã–µ: {event_info}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–æ–±—ã—Ç–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            event_id = None
            should_notify = False

            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä
                from ..core.decorators import (_event_handlers,
                                               _global_handlers,
                                               _scheduled_tasks,
                                               get_router_manager)

                # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏–ª–∏ fallback –∫ —Å—Ç–∞—Ä—ã–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º
                router_manager = get_router_manager()
                if router_manager:
                    event_handlers = router_manager.get_event_handlers()
                    scheduled_tasks = router_manager.get_scheduled_tasks()
                    global_handlers = router_manager.get_global_handlers()
                    logger.debug(
                        f"üîç RouterManager –Ω–∞–π–¥–µ–Ω: {len(event_handlers)} —Å–æ–±—ã—Ç–∏–π, {len(scheduled_tasks)} –∑–∞–¥–∞—á, {len(global_handlers)} –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"
                    )
                    logger.debug(
                        f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ scheduled_tasks: {list(scheduled_tasks.keys())}"
                    )
                else:
                    event_handlers = _event_handlers
                    scheduled_tasks = _scheduled_tasks
                    global_handlers = _global_handlers
                    logger.warning(
                        "‚ö†Ô∏è RouterManager –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã"
                    )
                    logger.debug(
                        f"üîç –°—Ç–∞—Ä—ã–µ scheduled_tasks: {list(scheduled_tasks.keys())}"
                    )

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ scheduled task
                handler_info = None
                handler_type = None
                
                if event_type in event_handlers:
                    handler_info = event_handlers.get(event_type, {})
                    handler_type = "event"
                elif event_type in scheduled_tasks:
                    handler_info = scheduled_tasks.get(event_type, {})
                    handler_type = "task"
                
                if handler_info:
                    from ..core.decorators import execute_event_handler

                    once_only = handler_info.get("once_only", True)
                    send_ai_response_flag = handler_info.get("send_ai_response", True)
                    should_notify = handler_info.get("notify", False)  # –ü–æ–ª—É—á–∞–µ–º notify –∏–∑ handler_info

                    logger.info(
                        f"   üîç {handler_type.title()} '{event_type}': once_only={once_only}, send_ai_response={send_ai_response_flag}, notify={should_notify}"
                    )

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ send_ai_response –ò–ó –î–ï–ö–û–†–ê–¢–û–†–ê
                    if not send_ai_response_flag:
                        should_send_ai_response = False
                        logger.warning(
                            f"   üîáüîáüîá {handler_type.upper()} '{event_type}' –ó–ê–ü–†–ï–¢–ò–õ –û–¢–ü–†–ê–í–ö–£ –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ò–ò (send_ai_response=False) üîáüîáüîá"
                        )

                    # –ï—Å–ª–∏ once_only=True - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î –Ω–∞–ª–∏—á–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
                    if once_only:
                        check_query = (
                            supabase_client.client.table("scheduled_events")
                            .select("id, status, session_id")
                            .eq("event_type", event_type)
                            .eq("user_id", user_id)
                            .eq("status", "completed")
                        )

                        # –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ session_id - –ø—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        # if session_id:
                        #     check_query = check_query.eq('session_id', session_id)

                        # üÜï –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                        if supabase_client.bot_id:
                            check_query = check_query.eq(
                                "bot_id", supabase_client.bot_id
                            )

                        existing = check_query.execute()

                        logger.info(
                            f"   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î: –Ω–∞–π–¥–µ–Ω–æ {len(existing.data) if existing.data else 0} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π '{event_type}' –¥–ª—è user_id={user_id}"
                        )

                        if existing.data:
                            logger.info(
                                f"   üîÑ –°–æ–±—ã—Ç–∏–µ '{event_type}' —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (once_only=True)"
                            )
                            logger.info(f"   üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {existing.data}")
                            continue

                    # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
                    logger.info(
                        f"   üéØ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ–º {handler_type}: '{event_type}'"
                    )

                    try:
                        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        if handler_type == "event":
                            result = await execute_event_handler(
                                event_type, user_id, event_info
                            )
                        elif handler_type == "task":
                            result = await execute_scheduled_task_from_event(
                                user_id, event_type, event_info, session_id
                            )
                        else:
                            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞: {handler_type}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è 'info' –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
                        import json

                        info_dashboard_json = None
                        if isinstance(result, dict) and "info" in result:
                            info_dashboard_json = json.dumps(
                                result["info"], ensure_ascii=False
                            )
                            logger.info(
                                f"   üìä –î–∞—à–±–æ—Ä–¥ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã: {result['info'].get('title', 'N/A')}"
                            )

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –£–ñ–ï —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º completed (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
                        event_record = {
                            "event_type": event_type,
                            "event_category": "user_event",
                            "user_id": user_id,
                            "event_data": event_info,
                            "scheduled_at": None,
                            "status": "completed",  # –°—Ä–∞–∑—É completed!
                            "session_id": session_id,
                            "executed_at": __import__("datetime")
                            .datetime.now(__import__("datetime").timezone.utc)
                            .isoformat(),
                            "result_data": (
                                __import__("json").dumps(result, ensure_ascii=False)
                                if result
                                else None
                            ),
                            "info_dashboard": info_dashboard_json,  # –î–æ–±–∞–≤–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ 'info'
                        }

                        # üÜï –î–æ–±–∞–≤–ª—è–µ–º bot_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                        if supabase_client.bot_id:
                            event_record["bot_id"] = supabase_client.bot_id

                        response = (
                            supabase_client.client.table("scheduled_events")
                            .insert(event_record)
                            .execute()
                        )
                        event_id = response.data[0]["id"]

                        # should_notify —É–∂–µ –ø–æ–ª—É—á–µ–Ω –∏–∑ handler_info –≤—ã—à–µ
                        logger.info(
                            f"   ‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫ completed"
                        )

                    except Exception as e:
                        logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {e}")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
                        event_record = {
                            "event_type": event_type,
                            "event_category": "user_event",
                            "user_id": user_id,
                            "event_data": event_info,
                            "scheduled_at": None,
                            "status": "failed",
                            "session_id": session_id,
                            "last_error": str(e),
                        }

                        # üÜï –î–æ–±–∞–≤–ª—è–µ–º bot_id –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                        if supabase_client.bot_id:
                            event_record["bot_id"] = supabase_client.bot_id

                        try:
                            supabase_client.client.table("scheduled_events").insert(
                                event_record
                            ).execute()
                            logger.info(f"   üíæ –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
                        except Exception as db_error:
                            logger.error(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—à–∏–±–∫—É –≤ –ë–î: {db_error}")
                        
                        continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ–±—ã—Ç–∏—é –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏

                # –ï—Å–ª–∏ –Ω–µ user_event, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
                elif event_type in scheduled_tasks:
                    try:
                        # –î–æ—Å—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                        task_info = scheduled_tasks.get(event_type, {})
                        send_ai_response_flag = task_info.get("send_ai_response", True)

                        logger.info(
                            f"   ‚è∞ –ü–ª–∞–Ω–∏—Ä—É–µ–º scheduled_task: '{event_type}', send_ai_response={send_ai_response_flag}"
                        )

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ send_ai_response –ò–ó –î–ï–ö–û–†–ê–¢–û–†–ê
                        if not send_ai_response_flag:
                            should_send_ai_response = False
                            logger.warning(
                                f"   üîáüîáüîá –ó–ê–î–ê–ß–ê '{event_type}' –ó–ê–ü–†–ï–¢–ò–õ–ê –û–¢–ü–†–ê–í–ö–£ –°–û–û–ë–©–ï–ù–ò–Ø –û–¢ –ò–ò (send_ai_response=False) üîáüîáüîá"
                            )

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É - –≤—Ä–µ–º—è –±–µ—Ä–µ—Ç—Å—è –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
                        result = await execute_scheduled_task_from_event(
                            user_id, event_type, event_info, session_id
                        )
                        event_id = result.get("event_id", "unknown")
                        should_notify = result.get("notify", False)
                        logger.info(f"   üíæ –ó–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞: {event_id}")

                    except Exception as e:
                        if "once_only=True" in str(e):
                            logger.info(
                                f"   üîÑ –ó–∞–¥–∞—á–∞ '{event_type}' —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                            )
                            continue
                        else:
                            logger.error(
                                f"   ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è scheduled_task '{event_type}': {e}"
                            )
                            continue

                # –ï—Å–ª–∏ –Ω–µ scheduled_task, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
                elif event_type in global_handlers:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É - –≤—Ä–µ–º—è –±–µ—Ä–µ—Ç—Å—è –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
                        logger.info(
                            f"   üåç –ü–ª–∞–Ω–∏—Ä—É–µ–º global_handler: '{event_type}' —Å –¥–∞–Ω–Ω—ã–º–∏: '{event_info}'"
                        )
                        result = await execute_global_handler_from_event(
                            event_type, event_info
                        )
                        event_id = result.get("event_id", "unknown")
                        should_notify = result.get("notify", False)
                        logger.info(
                            f"   üíæ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {event_id}"
                        )

                    except Exception as e:
                        if "once_only=True" in str(e):
                            logger.info(
                                f"   üîÑ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ '{event_type}' —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
                            )
                            continue
                        else:
                            logger.error(
                                f"   ‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è global_handler '{event_type}': {e}"
                            )
                            continue

                else:
                    logger.warning(
                        f"   ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '{event_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
                    )
                    logger.debug("   üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:")
                    logger.debug(
                        f"      - event_handlers: {list(event_handlers.keys())}"
                    )
                    logger.debug(
                        f"      - scheduled_tasks: {list(scheduled_tasks.keys())}"
                    )
                    logger.debug(
                        f"      - global_handlers: {list(global_handlers.keys())}"
                    )

            except ValueError as e:
                logger.warning(f"   ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫/–∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {e}")
            except Exception as e:
                logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ/–∑–∞–¥–∞—á–µ: {e}")
                logger.exception("   –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º notify_time –¥–ª—è scheduled_task
            if handler_type == "task":
                notify_time = handler_info.get("notify_time", "after")
                # –î–ª—è 'before' —É–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                if notify_time == "before" and should_notify:
                    await notify_admins_about_event(user_id, event)
                    logger.info("   ‚úÖ –ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã (notify_time=before)")
                elif notify_time == "after":
                    logger.info("   ‚è≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (notify_time=after)")
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —É–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ä–∞–∑—É
                if should_notify:
                    await notify_admins_about_event(user_id, event)
                    logger.info("   ‚úÖ –ê–¥–º–∏–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã")
                else:
                    logger.info(f"   üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è '{event_type}'")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è {event}: {e}")
            logger.exception("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–ª–∞–≥, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ò–ò
    logger.warning(
        f"üîäüîäüîä –ò–¢–û–ì–û–í–´–ô –§–õ–ê–ì send_ai_response: {should_send_ai_response} üîäüîäüîä"
    )
    return should_send_ai_response


async def notify_admins_about_event(user_id: int, event: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ —Å–æ–±—ã—Ç–∏–∏ —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    supabase_client = get_global_var("supabase_client")
    admin_manager = get_global_var("admin_manager")
    bot = get_global_var("bot")

    event_type = event.get("—Ç–∏–ø", "")
    event_info = event.get("–∏–Ω—Ñ–æ", "")

    if not event_type:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è username
    try:
        user_response = (
            supabase_client.client.table("sales_users")
            .select("first_name", "last_name", "username")
            .eq("telegram_id", user_id)
            .execute()
        )

        user_info = user_response.data[0] if user_response.data else {}

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ ID)
        name_parts = []
        if user_info.get("first_name"):
            name_parts.append(user_info["first_name"])
        if user_info.get("last_name"):
            name_parts.append(user_info["last_name"])

        user_name = " ".join(name_parts) if name_parts else "–ë–µ–∑ –∏–º–µ–Ω–∏"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ú ID
        if user_info.get("username"):
            user_display = f"{user_name} (@{user_info['username']})"
        else:
            user_display = user_name

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user_id}: {e}")
        user_display = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    emoji_map = {"—Ç–µ–ª–µ—Ñ–æ–Ω": "üì±", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "üí¨", "–ø–æ–∫—É–ø–∫–∞": "üí∞", "–æ—Ç–∫–∞–∑": "‚ùå"}

    emoji = emoji_map.get(event_type, "üîî")

    # üÜï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: ID –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    notification = f"""
{emoji} {event_type.upper()}!
üë§ {user_display}
üÜî ID: {user_id}
üìù {event_info}
üïê {datetime.now().strftime('%H:%M')}
"""

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üí¨ –ß–∞—Ç", callback_data=f"admin_chat_{user_id}"
                ),
                InlineKeyboardButton(
                    text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data=f"admin_history_{user_id}"
                ),
            ]
        ]
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
        active_admins = await admin_manager.get_active_admins()
        for admin_id in active_admins:
            try:
                await bot.send_message(
                    admin_id, notification.strip(), reply_markup=keyboard
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º: {e}")


async def send_message(
    message: Message,
    text: str,
    files_list: list = [],
    directories_list: list = [],
    **kwargs,
):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π parse_mode"""
    config = get_global_var("config")

    logger.info("üì§ send_message –≤—ã–∑–≤–∞–Ω–∞:")
    logger.info(f"   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}")
    logger.info(f"   üìù –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
    logger.info(f"   üêõ Debug —Ä–µ–∂–∏–º: {config.DEBUG_MODE}")

    try:
        parse_mode = (
            config.MESSAGE_PARSE_MODE if config.MESSAGE_PARSE_MODE != "None" else None
        )
        logger.info(f"   üîß Parse mode: {parse_mode}")

        # –ü–æ–ª—É—á–∞–µ–º user_id –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º supabase_client
        user_id = message.from_user.id
        supabase_client = get_global_var("supabase_client")

        # –¢–µ–∫—Å—Ç —É–∂–µ –≥–æ—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        final_text = text

        # –†–∞–±–æ—Ç–∞–µ–º —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏ –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏
        logger.info(f"   üì¶ –ü–µ—Ä–µ–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_list}")
        logger.info(f"   üìÇ –ü–µ—Ä–µ–¥–∞–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {directories_list}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        sent_files = await supabase_client.get_sent_files(user_id)
        sent_directories = await supabase_client.get_sent_directories(user_id)

        logger.info(f"   üìã –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent_files}")
        logger.info(f"   üìã –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {sent_directories}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å
        actual_files_list = [f for f in files_list if f not in sent_files]
        actual_directories_list = [
            d for d in directories_list if str(d) not in sent_directories
        ]

        logger.info(f"   üÜï –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤: {actual_files_list}")
        logger.info(f"   üÜï –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤: {actual_directories_list}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
        if not final_text or not final_text.strip():
            logger.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: final_text –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏!")
            logger.error(f"   –ò—Å—Ö–æ–¥–Ω—ã–π text: '{text[:200]}...'")
            final_text = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

        logger.info(f"üì± –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(final_text)} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   üì¶ –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {actual_files_list}")
        logger.info(f"   üìÇ –ö–∞—Ç–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {actual_directories_list}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        if actual_files_list or actual_directories_list:
            # –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ–¥–∏–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            def get_media_type(file_path: str) -> str:
                ext = Path(file_path).suffix.lower()
                if ext in {".jpg", ".jpeg", ".png"}:
                    return "photo"
                elif ext in {".mp4", ".mov"}:
                    return "video"
                else:
                    return "document"

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
            video_files = []  # –¥–ª—è –≤–∏–¥–µ–æ
            photo_files = []  # –¥–ª—è —Ñ–æ—Ç–æ
            document_files = []  # –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

            # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            def process_file(file_path: Path, source: str = ""):
                if file_path.is_file():
                    media_type = get_media_type(str(file_path))
                    if media_type == "video":
                        video_files.append(file_path)
                        logger.info(
                            f"   üé• –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–∏–¥–µ–æ{f' –∏–∑ {source}' if source else ''}: {file_path.name}"
                        )
                    elif media_type == "photo":
                        photo_files.append(file_path)
                        logger.info(
                            f"   üì∏ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ{f' –∏–∑ {source}' if source else ''}: {file_path.name}"
                        )
                    else:
                        document_files.append(file_path)
                        logger.info(
                            f"   üìÑ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç{f' –∏–∑ {source}' if source else ''}: {file_path.name}"
                        )
                else:
                    logger.warning(f"   ‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ —Ñ–∞–π–ª—ã
            for file_name in actual_files_list:
                try:
                    process_file(Path(f"files/{file_name}"))
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_name}: {e}")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
            for dir_name in actual_directories_list:
                dir_name = Path(dir_name)
                try:
                    if dir_name.is_dir():
                        for file_path in dir_name.iterdir():
                            try:
                                process_file(file_path, dir_name)
                            except Exception as e:
                                logger.error(
                                    f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}"
                                )
                    else:
                        logger.warning(f"   ‚ö†Ô∏è –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {dir_name}")
                except Exception as e:
                    logger.error(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ {dir_name}: {e}")

            # –°–ø–∏—Å–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            sent_files_to_save = []
            sent_dirs_to_save = []

            # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if video_files:
                video_group = MediaGroupBuilder()
                for file_path in video_files:
                    video_group.add_video(media=FSInputFile(str(file_path)))

                videos = video_group.build()
                if videos:
                    await message.answer_media_group(media=videos)
                    logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(videos)} –≤–∏–¥–µ–æ")

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if photo_files:
                photo_group = MediaGroupBuilder()
                for file_path in photo_files:
                    photo_group.add_photo(media=FSInputFile(str(file_path)))

                photos = photo_group.build()
                if photos:
                    await message.answer_media_group(media=photos)
                    logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(photos)} —Ñ–æ—Ç–æ")

            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            result = await message.answer(final_text, parse_mode=parse_mode)
            logger.info("   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")

            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if document_files:
                doc_group = MediaGroupBuilder()
                for file_path in document_files:
                    doc_group.add_document(media=FSInputFile(str(file_path)))

                docs = doc_group.build()
                if docs:
                    await message.answer_media_group(media=docs)
                    logger.info(f"   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

            # 5. –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
            # –ï—Å–ª–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –∏–∑ actual_files_list - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
            if video_files or photo_files or document_files:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä—è–º—ã–µ —Ñ–∞–π–ª—ã –∏–∑ actual_files_list (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã)
                sent_files_to_save.extend(actual_files_list)
                logger.info(
                    f"   üìù –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª—ã: {actual_files_list}"
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ –∏–∑ actual_directories_list (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –∏–∑ –Ω–∏—Ö)
                sent_dirs_to_save.extend([str(d) for d in actual_directories_list])
                logger.info(
                    f"   üìù –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∏: {actual_directories_list}"
                )

            # 6. –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ë–î
            if sent_files_to_save or sent_dirs_to_save:
                try:
                    if sent_files_to_save:
                        logger.info(f"   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ –ë–î: {sent_files_to_save}")
                        await supabase_client.add_sent_files(
                            user_id, sent_files_to_save
                        )
                    if sent_dirs_to_save:
                        logger.info(
                            f"   üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏ –≤ –ë–î: {sent_dirs_to_save}"
                        )
                        await supabase_client.add_sent_directories(
                            user_id, sent_dirs_to_save
                        )
                    logger.info(
                        "   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö –≤ –ë–î"
                    )
                except Exception as e:
                    logger.error(
                        f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö –≤ –ë–î: {e}"
                    )
            else:
                logger.info("   ‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")

            return result
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            logger.warning("   ‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç")
            result = await message.answer(final_text, parse_mode=parse_mode, **kwargs)
            return result

    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –±–æ—Ç–∞
        if "Forbidden: bot was blocked by the user" in str(e):
            logger.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return None
        elif "TelegramForbiddenError" in str(type(e).__name__):
            logger.warning(f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            return None

        logger.error(f"‚ùå –û–®–ò–ë–ö–ê –≤ send_message: {e}")
        logger.exception("–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏ send_message:")

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            fallback_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            result = await message.answer(fallback_text)
            logger.info("‚úÖ –ó–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return result
        except Exception as e2:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–¥–µ—Å—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞
            if "Forbidden: bot was blocked by the user" in str(e2):
                logger.warning(
                    f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (fallback)"
                )
                return None
            elif "TelegramForbiddenError" in str(type(e2).__name__):
                logger.warning(
                    f"üö´ –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (fallback)"
                )
                return None

            logger.error(f"‚ùå –î–∞–∂–µ –∑–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å: {e2}")
            raise


async def cleanup_expired_conversations():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    conversation_manager = get_global_var("conversation_manager")

    while True:
        try:
            await asyncio.sleep(300)  # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await conversation_manager.cleanup_expired_conversations()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")


# üÜï –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞


async def get_welcome_file_path() -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –∏–∑ –ø–∞–ø–∫–∏ WELCOME_FILE_DIR –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞.

    –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫: configs/<bot_id>/.env (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è WELCOME_FILE_DIR)
    –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø—É—Å–∫–∞–ª–∫–æ–π –Ω–∞ configs/<bot_id>.

    Returns:
        str | None: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    config = get_global_var("config")
    try:
        folder_value = config.WELCOME_FILE_DIR
        if not folder_value:
            return None

        folder = Path(folder_value)
        if not folder.exists():
            logger.info(
                f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_value}"
            )
            return None

        if not folder.is_dir():
            logger.info(f"–ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π: {folder_value}")
            return None

        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π PDF —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for path in folder.iterdir():
            if path.is_file() and path.suffix.lower() == ".pdf":
                return str(path)

        logger.info(f"PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {folder_value}")
        return None

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return None


async def get_welcome_msg_path() -> str | None:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É welcome_file_msg.txt –∏–∑ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è PDF —Ñ–∞–π–ª.

    Returns:
        str | None: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–¥–ø–∏—Å—å—é –∏–ª–∏ None, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    try:
        pdf_path = await get_welcome_file_path()
        if not pdf_path:
            return None

        msg_path = str(Path(pdf_path).parent / "welcome_file_msg.txt")
        if not Path(msg_path).is_file():
            logger.info(f"–§–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {msg_path}")
            return None

        return msg_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return None


async def send_welcome_file(message: Message) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é –∏–∑ —Ñ–∞–π–ª–∞ welcome_file_msg.txt.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å—å.

    Returns:
         str: —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏
    """
    try:
        config = get_global_var("config")

        file_path = await get_welcome_file_path()
        if not file_path:
            return ""

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–¥–ø–∏—Å—å—é –∏ —á–∏—Ç–∞–µ–º –µ–≥–æ
        caption = ""
        msg_path = await get_welcome_msg_path()
        if msg_path:
            try:
                with open(msg_path, "r", encoding="utf-8") as f:
                    caption = f.read().strip()
                    logger.info(f"–ü–æ–¥–ø–∏—Å—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: {msg_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–∏ {msg_path}: {e}")

        parse_mode = config.MESSAGE_PARSE_MODE
        document = FSInputFile(file_path)

        await message.answer_document(
            document=document, caption=caption, parse_mode=parse_mode
        )

        logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {file_path}")
        return caption
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        return ""


# –û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã


@utils_router.message(Command("help"))
async def help_handler(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞"""
    admin_manager = get_global_var("admin_manager")
    prompt_loader = get_global_var("prompt_loader")

    try:
        # –†–∞–∑–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if admin_manager.is_admin(message.from_user.id):
            if admin_manager.is_in_admin_mode(message.from_user.id):
                help_text = """
üëë **–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/—Å—Ç–∞—Ç` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ—Ä–æ–Ω–∫–∏ –∏ —Å–æ–±—ã—Ç–∏–π
‚Ä¢ `/–∏—Å—Ç–æ—Ä–∏—è <user_id>` - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ `/—á–∞—Ç <user_id>` - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
‚Ä¢ `/—á–∞—Ç—ã` - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
‚Ä¢ `/—Å—Ç–æ–ø` - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥
‚Ä¢ `/–∞–¥–º–∏–Ω` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∞–¥–º–∏–Ω—É –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è
‚Ä¢ –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ –æ—Ç –±–æ—Ç–∞
‚Ä¢ –î–∏–∞–ª–æ–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
"""
                await message.answer(help_text, parse_mode="Markdown")
                return

        # –û–±—ã—á–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        help_text = await prompt_loader.load_help_message()
        await send_message(message, help_text)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–∫–∏: {e}")
        # Fallback —Å–ø—Ä–∞–≤–∫–∞
        await send_message(
            message,
            "ü§ñ –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.",
        )


@utils_router.message(Command("status"))
async def status_handler(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
    openai_client = get_global_var("openai_client")
    prompt_loader = get_global_var("prompt_loader")
    admin_manager = get_global_var("admin_manager")
    config = get_global_var("config")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI
        openai_status = await openai_client.check_api_health()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç—ã
        prompts_status = await prompt_loader.validate_prompts()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if admin_manager.is_admin(message.from_user.id):
            admin_stats = admin_manager.get_stats()

            status_message = f"""
üîß **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

OpenAI API: {'‚úÖ' if openai_status else '‚ùå'}
–ü—Ä–æ–º–ø—Ç—ã: {'‚úÖ ' + str(sum(prompts_status.values())) + '/' + str(len(prompts_status)) + ' –∑–∞–≥—Ä—É–∂–µ–Ω–æ' if any(prompts_status.values()) else '‚ùå'}
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ)

üëë **–ê–¥–º–∏–Ω—ã:** {admin_stats['active_admins']}/{admin_stats['total_admins']} –∞–∫—Ç–∏–≤–Ω—ã
üêõ **–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏:** {'–í–∫–ª—é—á–µ–Ω' if config.DEBUG_MODE else '–í—ã–∫–ª—é—á–µ–Ω'}

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
            """
        else:
            status_message = f"""
üîß **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

OpenAI API: {'‚úÖ' if openai_status else '‚ùå'}
–ü—Ä–æ–º–ø—Ç—ã: {'‚úÖ ' + str(sum(prompts_status.values())) + '/' + str(len(prompts_status)) + ' –∑–∞–≥—Ä—É–∂–µ–Ω–æ' if any(prompts_status.values()) else '‚ùå'}
–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚úÖ (—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ)

–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!
            """

        await send_message(message, status_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await send_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")


def parse_utm_from_start_param(start_param: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç UTM-–º–µ—Ç–∫–∏ –∏ —Å–µ–≥–º–µ–Ω—Ç –∏–∑ start –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ source-vk_campaign-summer2025_seg-premium

    Args:
        start_param: —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ 'source-vk_campaign-summer2025_seg-premium' –∏–ª–∏ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞

    Returns:
        dict: {'utm_source': 'vk', 'utm_campaign': 'summer2025', 'segment': 'premium'}

    Examples:
        >>> parse_utm_from_start_param('source-vk_campaign-summer2025_seg-premium')
        {'utm_source': 'vk', 'utm_campaign': 'summer2025', 'segment': 'premium'}

        >>> parse_utm_from_start_param('https://t.me/bot?start=source-vk_campaign-summer2025_seg-vip')
        {'utm_source': 'vk', 'utm_campaign': 'summer2025', 'segment': 'vip'}
    """
    import re
    from urllib.parse import unquote

    utm_data = {}

    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º start –ø–∞—Ä–∞–º–µ—Ç—Ä
        if "t.me/" in start_param or "https://" in start_param:
            match = re.search(r"[?&]start=([^&]+)", start_param)
            if match:
                start_param = unquote(match.group(1))
            else:
                return {}

        # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: source-vk_campaign-summer2025_seg-premium
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–∞–∫ –∏ –æ–¥–∏–Ω–æ—á–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ seg-prem)
        if "-" in start_param:
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ _ (–µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –ø–∞—Ä–∞–º–µ—Ç—Ä
            parts = start_param.split("_") if "_" in start_param else [start_param]

            for part in parts:
                if "-" in part:
                    key, value = part.split("-", 1)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º source/medium/campaign/content/term –≤ utm_*
                    if key in ["source", "medium", "campaign", "content", "term"]:
                        key = "utm_" + key
                        utm_data[key] = value
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º seg –∫–∞–∫ segment
                    elif key == "seg":
                        utm_data["segment"] = value

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ UTM –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

    return utm_data
