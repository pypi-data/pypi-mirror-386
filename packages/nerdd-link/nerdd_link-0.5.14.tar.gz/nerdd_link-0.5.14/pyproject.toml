[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nerdd-link"
version = "0.5.14"
description = "Run a NERDD module as a service"
readme = "README.md"
license = "BSD-3-Clause"
license-files = ["LICENSE"]
authors = [{ name = "Steffen Hirte", email = "steffen.hirte@univie.ac.at" }]
maintainers = [{ name = "Steffen Hirte", email = "steffen.hirte@univie.ac.at" }]
dependencies = [
    "nerdd-module>=0.3.44",
    "pandas>=1.2.1",
    "pyyaml~=6.0",
    "filetype~=1.2.0",
    "rich-click>=1.7.1",
    "stringcase~=1.2.0",
    "numpy",
    "simplejson>=3",
    "pydantic>=2",
    # TODO: move dependencies to extras
    "aiokafka>=0.12.0",
    # for old Python versions
    "importlib-metadata>=4.6; python_version<'3.10'",
    "typing_extensions>=4.0.1; python_version<'3.8'",
]
keywords = ["science", "research", "development", "nerdd"]
classifiers = [
    # audience
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    # programming language
    "Programming Language :: Python",
    # topics
    "Topic :: Software Development",
    "Topic :: Scientific/Engineering",
    # operating systems
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Operating System :: MacOS",
    # python versions
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
dev = ["mypy", "ruff==0.8.0", "pre-commit>=2"]
test = [
    "pytest",
    "pytest-sugar",
    "pytest-cov",
    "pytest-asyncio~=0.21.1",
    "pytest-bdd==7.3.0",
    "pytest-mock",
    "pytest-watcher",
    "hypothesis",
    "hypothesis-rdkit",
]
docs = ["mkdocs", "mkdocs-material", "mkdocstrings"]

[project.urls]
Repository = "https://github.com/molinfo-vienna/nerdd-link"

[project.scripts]
nerdd_init = "nerdd_link.cli:initialize_system"
nerdd_job_server = "nerdd_link.cli:run_job_server"
nerdd_prediction_server = "nerdd_link.cli:run_prediction_server"
nerdd_serialization_server = "nerdd_link.cli:run_serialization_server"

#
# TOOLS
#
[tool.setuptools.packages.find]
where = ["."]
include = ["nerdd_link*"]

[tool.setuptools.package-data]
nerdd_link = ["py.typed"]

[tool.pytest.ini_options]
log_cli = 1
log_cli_level = "INFO"
addopts = "-x --cov-report term --cov=nerdd_link"

[tool.pytest-watcher]
patterns = ["*.py", "*.feature", "pyproject.toml"]

[tool.ruff]
line-length = 100
extend-exclude = ["tests", "nerdd_link/tests"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "T20", # no print statements
]
ignore = [
    "F403", # I often use 'from .submodule import *' in __init__.py files
    "C408", # I prefer dict(a=5) over {'a': 5}
]

[tool.mypy]
# type stubs of packages lacking types are in the "typings" directory
mypy_path = "typings"
plugins = ["pydantic.mypy"]
disallow_untyped_defs = true
# no_implicit_optional = True
# check_untyped_defs = True
# show_error_codes = True

[[tool.mypy.overrides]]
module = ["rdkit.*"]
follow_imports = "skip"
follow_imports_for_stubs = true

[[tool.mypy.overrides]]
module = ["nerdd_link.tests.*", "tests.*"]
ignore_errors = true

[[tool.mypy.overrides]]
module = ["aiokafka.*"]
ignore_missing_imports = true

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
upload_to_vcs_release = true
