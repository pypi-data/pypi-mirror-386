[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
name = "framework3"
version = "1.0.21"  # Esto será reemplazado dinámicamente
description = "A flexible framework for machine learning pipelines"
authors = ["Manuel Couto Pintos <manuel.couto.pintos@usc.es>"]
license = "AGPL-3.0-or-later"
readme = "README.md"
packages = [{include = "framework3"}]
keywords = [
    "machine learning",
    "framework",
    "pipeline",
    "ML",
    "AI",
    "data science",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]

[tool.poetry.dependencies]
python = "^3.11"
typeguard = "4.4.1"
multimethod = "1.12"
pyspark = "3.5.3"
fastapi = "0.115.5"
pandas = "2.2.3"
torch = "2.5.1"
scipy = "1.13.1"
rich = "13.9.4"
boto3 = "1.35.73"
scikit-learn = "1.5.2"
cloudpickle = "3.1.0"
tqdm = "4.67.1"
nltk = "3.9.1"
transformers = "4.51.1"
gensim = "4.3.3"
wandb = "0.19.9"
optuna = "4.2.1"
sentence-transformers = "4.0.2"
dill = "0.3.9"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.4"
pytest-cov = "^6.0.0"
ruff = "^0.8.1"
pytest-mock = "^3.14.0"
moto = "^5.0.22"
poetry-dynamic-versioning = "^0.21.1"
ipykernel = "^6.29.5"

[tool.poetry-dynamic-versioning]
enable = false
style = "pep440"  # Asegura que el formato sea compatible con PyPI (ej. 1.2.3)

[tool.poetry.urls]
Homepage = "https://github.com/manucouto1/framework3"
Documentation = "https://manucouto1.github.io/framework3/"
Repository = "https://github.com/manucouto1/framework3.git"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.mypy]
enable_incomplete_feature = ["Unpack"]
