[build-system]
requires = ["setuptools>=70.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vibego"
version = "0.2.20"
description = "vibego CLI：用于初始化与管理 Telegram Master Bot 的工具"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Hypha" }
]
license = "LicenseRef-Proprietary"
dependencies = [
    "aiogram>=3.0.0,<4.0.0",
    "aiohttp-socks>=0.10.0",
    "aiosqlite>=0.19.0",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Operating System :: MacOS",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "Environment :: Console"
]

[project.scripts]
vibego = "vibego_cli.main:main"

[tool.setuptools]
include-package-data = true
py-modules = ["bot", "master", "logging_setup", "project_repository"]

[tool.setuptools.packages.find]
include = ["vibego_cli", "tasks", "scripts"]

[tool.setuptools.package-data]
"vibego_cli" = ["data/*.txt"]
"scripts" = ["*.sh", "models/*.sh"]

[tool.bumpversion]
current_version = "0.2.20"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
search = "{current_version}"
replace = "{new_version}"
regex = false
ignore_missing_version = false
tag = true
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
allow_dirty = false
commit = true
message = "chore: bump version {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "vibego_cli/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'
