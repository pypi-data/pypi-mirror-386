[tool.poetry]
name = "nautobot_app_livedata"
description = "Provides a live view of network data within Nautobot."
version = "v2.4.9"
authors = ["Josef Fuchs <josef.fuchs@j-fuchs.at>"]
license = "Apache-2.0"
homepage = "https://github.com/jifox/nautobot-app-livedata.git"
repository = "https://github.com/jifox/nautobot-app-livedata.git"
documentation = "https://nautobot-app-livedata.readthedocs.io/en/latest/"
readme = "README.md"
keywords = ["nautobot", "nautobot-app", "nautobot-plugin"]
classifiers = [
    "Intended Audience :: Developers",
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
packages = [
    { include = "nautobot_app_livedata" },
]
include = [
    # Rendered documentation - Poetry by default would exclude these files as they are in .gitignore
    "nautobot_app_livedata/static/nautobot_app_livedata/docs/**/*",
]

[tool.poetry.dependencies]
python = ">=3.9.2,<3.13"
# Used for local development
nautobot = "~2.4.15"
to-json-schema = "*"
jsonschema = "^4.7.0"
nautobot-plugin-nornir = "~2.2.0"
h11 = "^0.16.0"

[tool.poetry.group.dev.dependencies]
# Tool for debugging Django
django-debug-toolbar = "~5.2.0"
# Random data generation
factory-boy = "~3.3.3"
# Factory Boy dependency for test data
faker = "^37.11.0"
# Alternative to Make, CLI based on `tasks.py`
invoke = "~2.2.1"
# YAML parsing for docker compose config in tasks.py
PyYAML = "*"
# Colorization and autoformatting of CLI output, used for Invoke tasks
rich = "~14.2.0"
# Change log management and generation
towncrier = "~24.8.0"
# Watch files for celery and mkdocs reload
watchdog = "~6.0.0"
# IPython for enhanced shell
ipython = "*"
# TOML parsing
toml = "*"
# Rendering of markdown files to HTML
Markdown = "~3.8"
# Documentation generation support
griffe = "~1.14.0"
# Environment variables support
python-dotenv = "^1.1.0"
# Debugging support
debugpy = "^1.8.14"

[tool.poetry.group.docs.dependencies]
# Rendering docs to HTML
mkdocs = "~1.6.1"
# Embedding YAML files into Markdown documents as tables
markdown-data-tables = "~1.0.0"
# Render custom markdown for version added/changed/remove notes
markdown-version-annotations = "~1.0.1"
# Automatically generate some files as part of mkdocs build
mkdocs-gen-files = "~0.5.0"
# Image lightboxing in mkdocs
mkdocs-glightbox = "^0.4.0"
# Allow Markdown files to include other files
mkdocs-include-markdown-plugin = "~7.2.0"
# Use Jinja2 templating in docs
mkdocs-macros-plugin = "~1.3.7"
# Material for mkdocs theme
mkdocs-material = "~9.6.16"
# Handle docs redirections
mkdocs-redirects = "~1.2.2"
# Automatically handle index pages for docs sections
mkdocs-section-index = "~0.3.10"
# Automatic documentation from sources, for MkDocs
mkdocstrings = "~0.30.0"
# Python-specific extension to mkdocstrings
mkdocstrings-python = "~1.16.12"

[tool.poetry.group.linting.dependencies]
# Code static analysis
pylint = "~3.3.4"
# Pylint extensions for Django
pylint-django = "~2.6.1"
# Python implementation of markdownlint
pymarkdownlnt = "~0.9.28"
# Combination linter and code formatter
ruff = "~0.14.0"
# YAML linting
yamllint = "~1.37.1"
# Django template indenter
djhtml = "~3.0.6"
# Django template linter
djlint = "^1.34.0"

[tool.poetry.group.testing.dependencies]
# Test code coverage measurement - pinned to <=6.4.0 to resolve https://github.com/nedbat/coveragepy/issues/1420
coverage = "<=6.4.0"

[tool.pylint.master]
# load-plugins = "pylint_django, pylint_nautobot"
load-plugins = "pylint_django"
py-version = "3.9"
ignore = ".venv"
ignore-paths = [
    ".*third_party.*",
    "nautobot/extras/tests/git_data/02-invalid-files/",
    "nautobot_app_livedata/tests/*"
]
jobs = 0

[tool.poetry.extras]
all = []


[tool.pylint.basic]
# No docstrings required yet for private functions, or for test_* functions, or for inner Meta classes.
no-docstring-rgx="^(_|test_|Meta$)"
# Don't complain about "pk" as a variable name
good-names = """_,i,j,k,pk"""

[tool.pylint.messages_control]
disable = """,
    line-too-long
"""

[tool.pylint.miscellaneous]
# Don't flag TODO as a failure, let us commit with things that still need to be done in the code
notes = """,
    FIXME,
    XXX,
    TODO,
    """

[tool.pylint.typecheck]
# Regex patterns describing dynamically defined attributes that cause false reports for "no-member" checker
generated-members = [
    ".*Factory\\..*",
    ".*FactoryOptions\\..*",
    ".*FilterSet\\._meta",
    ".*FilterSet\\.base_filters",
    ".*FilterSet\\.declared_filters",
    ".*Job\\.request",
    ".*LazyAttribute\\..*",  # factory attributes
    ".*Maybe\\..*",  # factory attributes
    ".*Serializer\\.Meta",
    ".*Table\\._meta",
    ".*Table\\.base_columns",
    ".*Table\\.context",
]
extension-pkg-allow-list = [
    "nh3",
]
# @patch changes the signature of a function it's applied to; don't raise "no-value-for-parameter" here
signature-mutators = ["unittest.mock.patch"]

[tool.pymarkdown]
extensions.front-matter.enabled = true  # needed for mkdocs-macros compatibility
plugins.code-block-style.enabled = false  # inconsistency between "code" blocks and "admonition" blocks is expected
plugins.line-length.enabled = false  # we don't wrap markdown to 80 characters
plugins.list-anchored-indent.enabled = true
plugins.proper-names.names = "Celery,Django,Nautobot,Nornir,Pylint,PyMarkdown,Python,REST API"
plugins.proper-names.code_blocks = false  # don't check proper nouns inside ```code blocks```
plugins.proper-names.code_spans = false  # don't check proper nouns inside `code spans`
plugins.ul-indent.enabled = false  # doesn't work well with MkDocs expectations, use list-anchored-indent instead

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "DJ",  # flake8-django
    "E",  # pycodestyle
    "F",  # pyflakes
    "I",  # isort
    "PIE",  # flake8-pie
    "PLE",  # pylint errors
    "RUF",  # ruff itself
    "S",  # flake8-bandit
    "W",  # pycodestyle
]
ignore = [
    # warning: `one-blank-line-before-class` (D203) and `no-blank-line-before-class` (D211) are incompatible.
    "D203", # 1 blank line required before class docstring

    # D212 is enabled by default in google convention, and complains if we have a docstring like:
    # """
    # My docstring is on the line after the opening quotes instead of on the same line as them.
    # """
    # We've discussed and concluded that we consider this to be a valid style choice.
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line

    # Produces a lot of issues in the current codebase.
    "D401", # First line of docstring should be in imperative mood
    "D407", # Missing dashed underline after section
    "D416", # Section name ends in colon
    "PIE808",  # unnecessary-range-start
    "RUF012",  # mutable-class-default - see https://github.com/astral-sh/ruff/issues/5243
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-local-folder = ["example_app"]
order-by-type = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"nautobot_app_livedata/migrations/*" = [
    "D",
]
"nautobot_app_livedata/tests/*" = [
    "D",
    "S"
]

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.towncrier]
package = "nautobot_app_livedata"
directory = "changes"
filename = "docs/admin/release_notes/version_X_Y.md"
template = "development/towncrier_template.j2"
start_string = "<!-- towncrier release notes start -->"
issue_format = "[#{issue}](https://github.com/jifox/nautobot-app-livedata/issues/{issue})"
environment = { DJANGO_SETTINGS_MODULE = "development.nautobot_config" }

[[tool.towncrier.type]]
directory = "breaking"
name = "Breaking Changes"
showcontent = true

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true

[[tool.towncrier.type]]
directory = "dependencies"
name = "Dependencies"
showcontent = true

[[tool.towncrier.type]]
directory = "documentation"
name = "Documentation"
showcontent = true

[[tool.towncrier.type]]
directory = "housekeeping"
name = "Housekeeping"
showcontent = true

[tool.yamllint]
exclude = [
    ".git/logs/**",
    ".git/refs/**",
]
