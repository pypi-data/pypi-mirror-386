# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
from . import transaction_pb2 as services_dot_transaction__pb2
from . import transaction_response_pb2 as services_dot_transaction__response__pb2
GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services/util_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UtilServiceStub(object):
    """*
    The Utility Service provides a pseudo-random number generator.

    The single gRPC call defined for this service simply reports a single
    pseudo-random number in the transaction record. That value may either
    be a 32-bit integer within a requested range, or a 384-bit byte array.

    ### Block Stream Effects
    The requested value is reported exclusively in a `UtilPrngOutput` message.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.prng = channel.unary_unary(
                '/proto.UtilService/prng',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.atomicBatch = channel.unary_unary(
                '/proto.UtilService/atomicBatch',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)


class UtilServiceServicer(object):
    """*
    The Utility Service provides a pseudo-random number generator.

    The single gRPC call defined for this service simply reports a single
    pseudo-random number in the transaction record. That value may either
    be a 32-bit integer within a requested range, or a 384-bit byte array.

    ### Block Stream Effects
    The requested value is reported exclusively in a `UtilPrngOutput` message.
    """

    def prng(self, request, context):
        """*
        Generate a pseudo-random value.
        <p>
        The request body MUST be a
        [UtilPrngTransactionBody](#proto.UtilPrngTransactionBody)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def atomicBatch(self, request, context):
        """*
        Execute a batch of transactions atomically.
        <p>
        All transactions in the batch will be executed in order, and if any
        transaction fails, the entire batch will fail.
        // TODO: Add more details about the batch transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UtilServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'prng': grpc.unary_unary_rpc_method_handler(
                    servicer.prng,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'atomicBatch': grpc.unary_unary_rpc_method_handler(
                    servicer.atomicBatch,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.UtilService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.UtilService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UtilService(object):
    """*
    The Utility Service provides a pseudo-random number generator.

    The single gRPC call defined for this service simply reports a single
    pseudo-random number in the transaction record. That value may either
    be a 32-bit integer within a requested range, or a 384-bit byte array.

    ### Block Stream Effects
    The requested value is reported exclusively in a `UtilPrngOutput` message.
    """

    @staticmethod
    def prng(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.UtilService/prng',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def atomicBatch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.UtilService/atomicBatch',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
