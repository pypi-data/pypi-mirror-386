# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
from . import query_pb2 as services_dot_query__pb2
from . import response_pb2 as services_dot_response__pb2
from . import transaction_pb2 as services_dot_transaction__pb2
from . import transaction_response_pb2 as services_dot_transaction__response__pb2
GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services/consensus_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ConsensusServiceStub(object):
    """*
    The Hedera Consensus Service (HCS) provides the ability for a Hashgraph to
    provide aBFT consensus as to the order and validity of messages submitted to
    a *topic*, as well as a *consensus timestamp* for those messages.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createTopic = channel.unary_unary(
                '/proto.ConsensusService/createTopic',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.updateTopic = channel.unary_unary(
                '/proto.ConsensusService/updateTopic',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.deleteTopic = channel.unary_unary(
                '/proto.ConsensusService/deleteTopic',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.submitMessage = channel.unary_unary(
                '/proto.ConsensusService/submitMessage',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.getTopicInfo = channel.unary_unary(
                '/proto.ConsensusService/getTopicInfo',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)


class ConsensusServiceServicer(object):
    """*
    The Hedera Consensus Service (HCS) provides the ability for a Hashgraph to
    provide aBFT consensus as to the order and validity of messages submitted to
    a *topic*, as well as a *consensus timestamp* for those messages.

    """

    def createTopic(self, request, context):
        """*
        Create an HCS topic.
        <p>
        On success, the resulting TransactionReceipt SHALL contain the newly
        created TopicId.<br/>
        If the `adminKey` is set on the topic, this transaction MUST be signed
        by that key.<br/>
        If the `adminKey` is _not_ set on the topic, this transaction MUST NOT
        set an `autoRenewAccount`. The new topic will be immutable and must be
        renewed manually.<br/>
        If the `autoRenewAccount` is set on the topic, this transaction MUST be
        signed by that account.<br/>
        <p>
        The request body MUST be a
        [ConsensusCreateTopicTransactionBody](#proto.ConsensusCreateTopicTransactionBody)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTopic(self, request, context):
        """*
        Update an HCS topic.
        <p>
        If the `adminKey` is not set on the topic, this transaction MUST extend
        the `expirationTime` and MUST NOT modify any other field.<br/>
        If the `adminKey` is set on the topic, this transaction MUST be signed
        by that key.<br/>
        If this transaction sets a new `adminKey`, this transaction MUST be
        signed by <strong>_both_</strong> keys, the pre-update `adminKey` and
        the post-update `adminKey`.<br/>
        If this transaction sets a new, non-null, `autoRenewAccount`, the newly
        set account MUST sign this transaction.<br/>
        <p>
        The request body MUST be a
        [ConsensusUpdateTopicTransactionBody](#proto.ConsensusUpdateTopicTransactionBody)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteTopic(self, request, context):
        """*
        Delete an HCS topic.
        <p>
        If this transaction succeeds, all subsequent transactions referencing
        the deleted topic SHALL fail.<br/>
        The `adminKey` MUST be set on the topic and this transaction MUST be
        signed by that key.<br/>
        If the `adminKey` is not set on the topic, this transaction SHALL fail
        with a response code of `UNAUTHORIZED`. A topic without an `adminKey`
        cannot be deleted, but MAY expire.<br/>
        <p>
        The request body MUST be a
        [ConsensusDeleteTopicTransactionBody](#proto.ConsensusDeleteTopicTransactionBody)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def submitMessage(self, request, context):
        """*
        Submit a message to an HCS topic.
        <p>
        Valid and authorized messages on valid topics will be ordered by the
        consensus service, published in the block stream, and available to all
        subscribers on this topic via the mirror nodes.<br/>
        If this transaction succeeds the resulting TransactionReceipt SHALL
        contain the latest topicSequenceNumber and topicRunningHash for the
        topic.<br/>
        If the topic has a `submitKey` then that key MUST sign this
        transaction.<br/>
        <p>
        The request body MUST be a
        [ConsensusSubmitMessageTransactionBody](#proto.ConsensusSubmitMessageTransactionBody)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTopicInfo(self, request, context):
        """*
        Retrieve the latest state of a topic. This method is unrestricted and
        allowed on any topic by any payer account.
        <p>
        The request body MUST be a
        [ConsensusGetTopicInfoQuery](#proto.ConsensusGetTopicInfoQuery)<br/>
        The response body SHALL be a
        [ConsensusGetTopicInfoResponse](#proto.ConsensusGetTopicInfoResponse)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConsensusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.createTopic,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'updateTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTopic,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'deleteTopic': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteTopic,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'submitMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.submitMessage,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'getTopicInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getTopicInfo,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.ConsensusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.ConsensusService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ConsensusService(object):
    """*
    The Hedera Consensus Service (HCS) provides the ability for a Hashgraph to
    provide aBFT consensus as to the order and validity of messages submitted to
    a *topic*, as well as a *consensus timestamp* for those messages.

    """

    @staticmethod
    def createTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ConsensusService/createTopic',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ConsensusService/updateTopic',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ConsensusService/deleteTopic',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def submitMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ConsensusService/submitMessage',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTopicInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.ConsensusService/getTopicInfo',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
