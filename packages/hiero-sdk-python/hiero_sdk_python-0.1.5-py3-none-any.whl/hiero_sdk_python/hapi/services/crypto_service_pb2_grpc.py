# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
from . import query_pb2 as services_dot_query__pb2
from . import response_pb2 as services_dot_response__pb2
from . import transaction_pb2 as services_dot_transaction__pb2
from . import transaction_response_pb2 as services_dot_transaction__response__pb2
GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services/crypto_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CryptoServiceStub(object):
    """*
    Transactions and queries for the Hedera Crypto Service.
    The following queries are permanently removed.
    getStakersByAccountID, getFastTransactionRecord
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createAccount = channel.unary_unary(
                '/proto.CryptoService/createAccount',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.updateAccount = channel.unary_unary(
                '/proto.CryptoService/updateAccount',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.cryptoTransfer = channel.unary_unary(
                '/proto.CryptoService/cryptoTransfer',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.cryptoDelete = channel.unary_unary(
                '/proto.CryptoService/cryptoDelete',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.approveAllowances = channel.unary_unary(
                '/proto.CryptoService/approveAllowances',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.deleteAllowances = channel.unary_unary(
                '/proto.CryptoService/deleteAllowances',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.addLiveHash = channel.unary_unary(
                '/proto.CryptoService/addLiveHash',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.deleteLiveHash = channel.unary_unary(
                '/proto.CryptoService/deleteLiveHash',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.getLiveHash = channel.unary_unary(
                '/proto.CryptoService/getLiveHash',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.getAccountRecords = channel.unary_unary(
                '/proto.CryptoService/getAccountRecords',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.cryptoGetBalance = channel.unary_unary(
                '/proto.CryptoService/cryptoGetBalance',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.getAccountInfo = channel.unary_unary(
                '/proto.CryptoService/getAccountInfo',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.getTransactionReceipts = channel.unary_unary(
                '/proto.CryptoService/getTransactionReceipts',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.getTxRecordByTxID = channel.unary_unary(
                '/proto.CryptoService/getTxRecordByTxID',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)


class CryptoServiceServicer(object):
    """*
    Transactions and queries for the Hedera Crypto Service.
    The following queries are permanently removed.
    getStakersByAccountID, getFastTransactionRecord
    """

    def createAccount(self, request, context):
        """*
        Create a new account by submitting the transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateAccount(self, request, context):
        """*
        Update an account by submitting the transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cryptoTransfer(self, request, context):
        """*
        Initiate a transfer by submitting the transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cryptoDelete(self, request, context):
        """*
        Delete an account by submitting the transaction
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def approveAllowances(self, request, context):
        """*
        Add one or more approved allowances for spenders to transfer the paying
        account's hbar or tokens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteAllowances(self, request, context):
        """*
        Delete one or more of the specific approved NFT serial numbers on an
        owner account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addLiveHash(self, request, context):
        """*
        Add a livehash
        <blockquote>Important<blockquote>
        This transaction is obsolete, not supported, and SHALL fail with a
        pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteLiveHash(self, request, context):
        """*
        Delete a livehash
        <blockquote>Important<blockquote>
        This transaction is obsolete, not supported, and SHALL fail with a
        pre-check result of `NOT_SUPPORTED`.</blockquote></blockquote>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLiveHash(self, request, context):
        """*
        Retrieve a livehash for an account
        <blockquote>Important<blockquote>
        This query is obsolete, not supported, and SHALL fail with a pre-check
        result of `NOT_SUPPORTED`.</blockquote></blockquote>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAccountRecords(self, request, context):
        """*
        Return all transactions in the last 180s of consensus time for which
        the given account was the effective payer **and** network property
        `ledger.keepRecordsInState` was `true`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cryptoGetBalance(self, request, context):
        """*
        Retrieve the balance of an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAccountInfo(self, request, context):
        """*
        Retrieve the metadata of an account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTransactionReceipts(self, request, context):
        """*
        Retrieve the latest receipt for a transaction that is either awaiting
        consensus, or reached consensus in the last 180 seconds
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTxRecordByTxID(self, request, context):
        """*
        Retrieve the record of a transaction that is either awaiting consensus,
        or reached consensus in the last 180 seconds
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CryptoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.createAccount,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'updateAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.updateAccount,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'cryptoTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.cryptoTransfer,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'cryptoDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.cryptoDelete,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'approveAllowances': grpc.unary_unary_rpc_method_handler(
                    servicer.approveAllowances,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'deleteAllowances': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteAllowances,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'addLiveHash': grpc.unary_unary_rpc_method_handler(
                    servicer.addLiveHash,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'deleteLiveHash': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteLiveHash,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'getLiveHash': grpc.unary_unary_rpc_method_handler(
                    servicer.getLiveHash,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'getAccountRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.getAccountRecords,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'cryptoGetBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.cryptoGetBalance,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'getAccountInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getAccountInfo,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'getTransactionReceipts': grpc.unary_unary_rpc_method_handler(
                    servicer.getTransactionReceipts,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'getTxRecordByTxID': grpc.unary_unary_rpc_method_handler(
                    servicer.getTxRecordByTxID,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.CryptoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.CryptoService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CryptoService(object):
    """*
    Transactions and queries for the Hedera Crypto Service.
    The following queries are permanently removed.
    getStakersByAccountID, getFastTransactionRecord
    """

    @staticmethod
    def createAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/createAccount',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/updateAccount',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cryptoTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/cryptoTransfer',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cryptoDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/cryptoDelete',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def approveAllowances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/approveAllowances',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteAllowances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/deleteAllowances',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def addLiveHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/addLiveHash',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteLiveHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/deleteLiveHash',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLiveHash(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/getLiveHash',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAccountRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/getAccountRecords',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cryptoGetBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/cryptoGetBalance',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getAccountInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/getAccountInfo',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTransactionReceipts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/getTransactionReceipts',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTxRecordByTxID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.CryptoService/getTxRecordByTxID',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
