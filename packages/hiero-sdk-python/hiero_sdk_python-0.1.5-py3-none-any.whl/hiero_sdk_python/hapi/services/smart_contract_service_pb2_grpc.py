# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
from . import query_pb2 as services_dot_query__pb2
from . import response_pb2 as services_dot_response__pb2
from . import transaction_pb2 as services_dot_transaction__pb2
from . import transaction_response_pb2 as services_dot_transaction__response__pb2
GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services/smart_contract_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SmartContractServiceStub(object):
    """*
    The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
    compatible environment to create, store, manage, and execute smart contract
    calls. Smart Contracts implement useful and often highly complex
    interactions between individuals, systems, and the distributed ledger.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createContract = channel.unary_unary(
                '/proto.SmartContractService/createContract',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.updateContract = channel.unary_unary(
                '/proto.SmartContractService/updateContract',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.contractCallMethod = channel.unary_unary(
                '/proto.SmartContractService/contractCallMethod',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.contractCallLocalMethod = channel.unary_unary(
                '/proto.SmartContractService/contractCallLocalMethod',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.getContractInfo = channel.unary_unary(
                '/proto.SmartContractService/getContractInfo',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.ContractGetBytecode = channel.unary_unary(
                '/proto.SmartContractService/ContractGetBytecode',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.getBySolidityID = channel.unary_unary(
                '/proto.SmartContractService/getBySolidityID',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.getTxRecordByContractID = channel.unary_unary(
                '/proto.SmartContractService/getTxRecordByContractID',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.deleteContract = channel.unary_unary(
                '/proto.SmartContractService/deleteContract',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.systemDelete = channel.unary_unary(
                '/proto.SmartContractService/systemDelete',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.systemUndelete = channel.unary_unary(
                '/proto.SmartContractService/systemUndelete',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.callEthereum = channel.unary_unary(
                '/proto.SmartContractService/callEthereum',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.lambdaSStore = channel.unary_unary(
                '/proto.SmartContractService/lambdaSStore',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)


class SmartContractServiceServicer(object):
    """*
    The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
    compatible environment to create, store, manage, and execute smart contract
    calls. Smart Contracts implement useful and often highly complex
    interactions between individuals, systems, and the distributed ledger.
    """

    def createContract(self, request, context):
        """*
        Create a new smart contract.
        <p>
        If this transaction succeeds, the `ContractID` for the new smart
        contract SHALL be set in the transaction receipt.<br/>
        The contract is defined by the initial bytecode (or `initcode`).
        The `initcode` SHALL be provided either in a previously created file,
        or in the transaction body itself for very small contracts.<br/>
        As part of contract creation, the constructor defined for the new
        smart contract SHALL run with the parameters provided in
        the `constructorParameters` field.<br/>
        The gas to "power" that constructor MUST be provided via the `gas`
        field, and SHALL be charged to the payer for this transaction.<br/>
        If the contract _constructor_ stores information, it is charged gas for
        that storage. There is a separate fee in HBAR to maintain that storage
        until the expiration, and that fee SHALL be added to this transaction
        as part of the _transaction fee_, rather than gas.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateContract(self, request, context):
        """*
        Modify a smart contract.<br/>
        Any change other than updating the expiration time requires that the
        contract be modifiable (has a valid `adminKey`) and that the
        transaction be signed by the `adminKey`
        <p>
        Fields _not set_ on the request SHALL NOT be modified.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def contractCallMethod(self, request, context):
        """*
        Call a function of a given smart contract, providing function parameter
        inputs as needed.
        <p>
        Resource ("gas") charges SHALL include all relevant fees incurred by
        the contract execution, including any storage required.<br/>
        The total transaction fee SHALL incorporate all of the "gas" actually
        consumed as well as the standard fees for transaction handling,
        data transfers, signature verification, etc...
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def contractCallLocalMethod(self, request, context):
        """*
        Call a query function of a given smart contract, providing
        function parameter inputs as needed.<br/>
        This is performed locally on the particular node that the client is
        communicating with. Executing the call locally is faster and less
        costly, but imposes certain restrictions.
        <p>
        The call MUST NOT change the state of the contract instance. This also
        precludes any expenditure or transfer of HBAR or other tokens.<br/>
        The call SHALL NOT have a separate consensus timestamp.<br/>
        The call SHALL NOT generate a record nor a receipt.<br/>
        The response SHALL contain the output returned by the function call.<br/>
        <p>
        This is generally useful for calling accessor functions which read
        (query) state without changes or side effects. Any contract call that
        would use the `STATICCALL` opcode MAY be called via contract call local
        with performance and cost benefits.
        <p>
        Unlike a ContractCall transaction, the node SHALL always consume the
        _entire_ amount of offered "gas" in determining the fee for this query,
        so accurate gas estimation is important.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getContractInfo(self, request, context):
        """*
        A standard query to obtain detailed information for a smart contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ContractGetBytecode(self, request, context):
        """*
        A standard query to read the current bytecode for a smart contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBySolidityID(self, request, context):
        """*
        A standard query to obtain account and contract identifiers for a smart
        contract, given the Solidity identifier for that contract.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTxRecordByContractID(self, request, context):
        """*
        <blockquote>This query is no longer supported.</blockquote>
        This query always returned an empty record list.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteContract(self, request, context):
        """*
        Delete a smart contract, and transfer any remaining HBAR balance
        to a designated account.
        <p>
        If this call succeeds then all subsequent calls to that smart
        contract SHALL fail.<br/>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def systemDelete(self, request, context):
        """*
        Delete a smart contract, as a system-initiated deletion, this
        SHALL NOT transfer balances.
        <blockquote>
        This call is an administrative function of the Hedera network, and
        SHALL require network administration authorization.<br/>
        This transaction MUST be signed by one of the network administration
        accounts (typically `0.0.2` through `0.0.59`, as defined in the
        `api-permission.properties` file).
        </blockquote>
        If this call succeeds then all subsequent calls to that smart
        contract SHALL fail.<br/>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def systemUndelete(self, request, context):
        """*
        Un-Delete a smart contract, returning it (mostly) to its state
        prior to deletion.
        <p>
        The contract to be restored MUST have been deleted via `systemDelete`.
        If the contract was deleted via `deleteContract`, it
        SHALL NOT be recoverable.
        <blockquote>
        This call is an administrative function of the Hedera network, and
        SHALL require network administration authorization.<br/>
        This transaction MUST be signed by one of the network administration
        accounts (typically `0.0.2` through `0.0.59`, as defined in the
        `api-permission.properties` file).
        </blockquote>
        If this call succeeds then subsequent calls to that smart
        contract MAY succeed.<br/>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def callEthereum(self, request, context):
        """*
        Make an Ethereum transaction "call" with all data in Ethereum formats,
        including the contract alias.
        <p>
        Call data MAY be in the transaction, or stored within a "File".<br/>
        The caller MAY offer additional gas above what is offered in the call
        data, but MAY be charged up to 80% of that value if the amount required
        is less than this "floor" amount.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def lambdaSStore(self, request, context):
        """*
        Update zero or more slots of a lambda.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SmartContractServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createContract': grpc.unary_unary_rpc_method_handler(
                    servicer.createContract,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'updateContract': grpc.unary_unary_rpc_method_handler(
                    servicer.updateContract,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'contractCallMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.contractCallMethod,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'contractCallLocalMethod': grpc.unary_unary_rpc_method_handler(
                    servicer.contractCallLocalMethod,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'getContractInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getContractInfo,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'ContractGetBytecode': grpc.unary_unary_rpc_method_handler(
                    servicer.ContractGetBytecode,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'getBySolidityID': grpc.unary_unary_rpc_method_handler(
                    servicer.getBySolidityID,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'getTxRecordByContractID': grpc.unary_unary_rpc_method_handler(
                    servicer.getTxRecordByContractID,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'deleteContract': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteContract,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'systemDelete': grpc.unary_unary_rpc_method_handler(
                    servicer.systemDelete,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'systemUndelete': grpc.unary_unary_rpc_method_handler(
                    servicer.systemUndelete,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'callEthereum': grpc.unary_unary_rpc_method_handler(
                    servicer.callEthereum,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'lambdaSStore': grpc.unary_unary_rpc_method_handler(
                    servicer.lambdaSStore,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.SmartContractService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.SmartContractService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SmartContractService(object):
    """*
    The Hedera Smart Contract Service (HSCS) provides an interface to an EVM
    compatible environment to create, store, manage, and execute smart contract
    calls. Smart Contracts implement useful and often highly complex
    interactions between individuals, systems, and the distributed ledger.
    """

    @staticmethod
    def createContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/createContract',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/updateContract',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def contractCallMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/contractCallMethod',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def contractCallLocalMethod(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/contractCallLocalMethod',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getContractInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/getContractInfo',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ContractGetBytecode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/ContractGetBytecode',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getBySolidityID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/getBySolidityID',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTxRecordByContractID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/getTxRecordByContractID',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteContract(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/deleteContract',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def systemDelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/systemDelete',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def systemUndelete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/systemUndelete',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def callEthereum(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/callEthereum',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def lambdaSStore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.SmartContractService/lambdaSStore',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
