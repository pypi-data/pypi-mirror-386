# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings
from . import query_pb2 as services_dot_query__pb2
from . import response_pb2 as services_dot_response__pb2
from . import transaction_pb2 as services_dot_transaction__pb2
from . import transaction_response_pb2 as services_dot_transaction__response__pb2
GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services/token_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TokenServiceStub(object):
    """*
    Transactions and queries for the Token Service
    The following queries are permanently removed
    getAccountNftInfos, getTokenNftInfos
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createToken = channel.unary_unary(
                '/proto.TokenService/createToken',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.updateToken = channel.unary_unary(
                '/proto.TokenService/updateToken',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.mintToken = channel.unary_unary(
                '/proto.TokenService/mintToken',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.burnToken = channel.unary_unary(
                '/proto.TokenService/burnToken',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.deleteToken = channel.unary_unary(
                '/proto.TokenService/deleteToken',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.wipeTokenAccount = channel.unary_unary(
                '/proto.TokenService/wipeTokenAccount',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.freezeTokenAccount = channel.unary_unary(
                '/proto.TokenService/freezeTokenAccount',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.unfreezeTokenAccount = channel.unary_unary(
                '/proto.TokenService/unfreezeTokenAccount',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.grantKycToTokenAccount = channel.unary_unary(
                '/proto.TokenService/grantKycToTokenAccount',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.revokeKycFromTokenAccount = channel.unary_unary(
                '/proto.TokenService/revokeKycFromTokenAccount',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.associateTokens = channel.unary_unary(
                '/proto.TokenService/associateTokens',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.dissociateTokens = channel.unary_unary(
                '/proto.TokenService/dissociateTokens',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.updateTokenFeeSchedule = channel.unary_unary(
                '/proto.TokenService/updateTokenFeeSchedule',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.getTokenInfo = channel.unary_unary(
                '/proto.TokenService/getTokenInfo',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.getTokenNftInfo = channel.unary_unary(
                '/proto.TokenService/getTokenNftInfo',
                request_serializer=services_dot_query__pb2.Query.SerializeToString,
                response_deserializer=services_dot_response__pb2.Response.FromString,
                _registered_method=True)
        self.pauseToken = channel.unary_unary(
                '/proto.TokenService/pauseToken',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.unpauseToken = channel.unary_unary(
                '/proto.TokenService/unpauseToken',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.updateNfts = channel.unary_unary(
                '/proto.TokenService/updateNfts',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.rejectToken = channel.unary_unary(
                '/proto.TokenService/rejectToken',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.airdropTokens = channel.unary_unary(
                '/proto.TokenService/airdropTokens',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.cancelAirdrop = channel.unary_unary(
                '/proto.TokenService/cancelAirdrop',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)
        self.claimAirdrop = channel.unary_unary(
                '/proto.TokenService/claimAirdrop',
                request_serializer=services_dot_transaction__pb2.Transaction.SerializeToString,
                response_deserializer=services_dot_transaction__response__pb2.TransactionResponse.FromString,
                _registered_method=True)


class TokenServiceServicer(object):
    """*
    Transactions and queries for the Token Service
    The following queries are permanently removed
    getAccountNftInfos, getTokenNftInfos
    """

    def createToken(self, request, context):
        """*
        Create a new token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateToken(self, request, context):
        """*
        Update a token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mintToken(self, request, context):
        """*
        Mint one or more tokens to the treasury account.
        <p>
        This MAY specify a quantity of fungible/common tokens or
        a list of specific non-fungible/unique tokes, but
        MUST NOT specify both.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def burnToken(self, request, context):
        """*
        Burn one or more tokens from the treasury account.
        <p>
        This MAY specify a quantity of fungible/common tokens or
        a list of specific non-fungible/unique tokes, but
        MUST NOT specify both.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteToken(self, request, context):
        """*
        Delete a token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def wipeTokenAccount(self, request, context):
        """*
        Wipe one or more tokens from an identified Account.
        <p>
        This MAY specify a quantity of fungible/common tokens or
        a list of specific non-fungible/unique tokes, but
        MUST NOT specify both.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def freezeTokenAccount(self, request, context):
        """*
        Freeze the transfer of tokens to or from an identified Account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unfreezeTokenAccount(self, request, context):
        """*
        Unfreeze the transfer of tokens to or from an identified Account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def grantKycToTokenAccount(self, request, context):
        """*
        Assert that KYC requirements are met for a specific account with
        respect to a specific token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def revokeKycFromTokenAccount(self, request, context):
        """*
        Assert that KYC requirements are _not_ met for a specific account with
        respect to a specific token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def associateTokens(self, request, context):
        """*
        Associate one or more tokens to an account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def dissociateTokens(self, request, context):
        """*
        Dissociate one or more tokens from an account.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateTokenFeeSchedule(self, request, context):
        """*
        Update the custom fee schedule for a token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTokenInfo(self, request, context):
        """*
        Retrieve the detail characteristics for a token.
        <p>
        This query SHALL return information for the token type as a whole.<br/>
        This query SHALL NOT return information for individual tokens.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTokenNftInfo(self, request, context):
        """*
        Retrieve the metadata for a specific non-fungible/unique token.<br/>
        The NFT to query is identified by token identifier and serial number.
        <p>
        This query SHALL return token metadata and, if an allowance is defined,
        the designated "spender" account for the queried NFT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pauseToken(self, request, context):
        """*
        Pause a token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unpauseToken(self, request, context):
        """*
        Unpause (resume) a token.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateNfts(self, request, context):
        """*
        Update multiple non-fungible/unique tokens (NFTs) in a collection.<br/>
        The NFTs are identified by token identifier and one or more
        serial numbers.
        <p>
        This transaction SHALL update NFT metadata only.<br/>
        This transaction MUST be signed by the token `metadata_key`.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rejectToken(self, request, context):
        """*
        Reject one or more tokens.
        <p>
        This transaction SHALL transfer the full balance of one or more tokens
        from the requesting account to the treasury for each token.<br/>
        This transfer SHALL NOT charge any custom fee or royalty defined for
        the token(s) to be rejected.<br/>
        ### Effects on success
        <ul>
        <li>If the rejected token is fungible/common, the requesting account
        SHALL have a balance of 0 for the rejected token.<br/>
        The treasury balance SHALL increase by the amount that the
        requesting account decreased.</li>
        <li>If the rejected token is non-fungible/unique the requesting
        account SHALL NOT hold the specific serialized token that
        is rejected.<br/>
        The treasury account SHALL hold each specific serialized token
        that was rejected.</li>
        </li>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def airdropTokens(self, request, context):
        """*
        Airdrop one or more tokens to one or more accounts.
        <p>
        This transaction SHALL distribute tokens from the balance of one or
        more sending account(s) to the balance of one or more
        recipient accounts.<br/>
        Accounts SHALL receive the tokens in one of four ways.
        <ul>
        <li>An account already associated to the token to be distributed
        SHALL receive the airdropped tokens immediately to the
        recipient account balance.</li>
        <li>An account with available automatic association slots SHALL
        be automatically associated to the token, and SHALL
        immediately receive the airdropped tokens to the recipient
        account balance.</li>
        <li>An account with "receiver signature required" set SHALL have
        a "Pending Airdrop" created and MUST claim that airdrop with
        a `claimAirdrop` transaction.</li>
        <li>An account with no available automatic association slots SHALL
        have a "Pending Airdrop" created and MUST claim that airdrop
        with a `claimAirdrop` transaction. </li>
        </ul>
        Any airdrop that completes immediately SHALL be irreversible.<br/>
        Any airdrop that results in a "Pending Airdrop" MAY be canceled via
        a `cancelAirdrop` transaction.<br/>
        All transfer fees (including custom fees and royalties), as well as
        the rent cost for the first auto-renewal period for any
        automatic-association slot occupied by the airdropped tokens,
        SHALL be charged to the account submitting this transaction.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def cancelAirdrop(self, request, context):
        """*
        Cancel one or more pending airdrops.
        <p>
        This transaction MUST be signed by _each_ account *sending* an
        airdrop to be canceled.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def claimAirdrop(self, request, context):
        """*
        Claim one or more pending airdrops.
        <p>
        This transaction MUST be signed by _each_ account **receiving**
        an airdrop to be claimed.<br>
        If a "Sender" lacks sufficient balance to fulfill the airdrop at
        the time the claim is made, that claim SHALL fail.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TokenServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createToken': grpc.unary_unary_rpc_method_handler(
                    servicer.createToken,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'updateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.updateToken,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'mintToken': grpc.unary_unary_rpc_method_handler(
                    servicer.mintToken,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'burnToken': grpc.unary_unary_rpc_method_handler(
                    servicer.burnToken,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'deleteToken': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteToken,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'wipeTokenAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.wipeTokenAccount,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'freezeTokenAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.freezeTokenAccount,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'unfreezeTokenAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.unfreezeTokenAccount,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'grantKycToTokenAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.grantKycToTokenAccount,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'revokeKycFromTokenAccount': grpc.unary_unary_rpc_method_handler(
                    servicer.revokeKycFromTokenAccount,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'associateTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.associateTokens,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'dissociateTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.dissociateTokens,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'updateTokenFeeSchedule': grpc.unary_unary_rpc_method_handler(
                    servicer.updateTokenFeeSchedule,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'getTokenInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getTokenInfo,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'getTokenNftInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getTokenNftInfo,
                    request_deserializer=services_dot_query__pb2.Query.FromString,
                    response_serializer=services_dot_response__pb2.Response.SerializeToString,
            ),
            'pauseToken': grpc.unary_unary_rpc_method_handler(
                    servicer.pauseToken,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'unpauseToken': grpc.unary_unary_rpc_method_handler(
                    servicer.unpauseToken,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'updateNfts': grpc.unary_unary_rpc_method_handler(
                    servicer.updateNfts,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'rejectToken': grpc.unary_unary_rpc_method_handler(
                    servicer.rejectToken,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'airdropTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.airdropTokens,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'cancelAirdrop': grpc.unary_unary_rpc_method_handler(
                    servicer.cancelAirdrop,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
            'claimAirdrop': grpc.unary_unary_rpc_method_handler(
                    servicer.claimAirdrop,
                    request_deserializer=services_dot_transaction__pb2.Transaction.FromString,
                    response_serializer=services_dot_transaction__response__pb2.TransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.TokenService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.TokenService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TokenService(object):
    """*
    Transactions and queries for the Token Service
    The following queries are permanently removed
    getAccountNftInfos, getTokenNftInfos
    """

    @staticmethod
    def createToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/createToken',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/updateToken',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def mintToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/mintToken',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def burnToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/burnToken',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/deleteToken',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def wipeTokenAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/wipeTokenAccount',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def freezeTokenAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/freezeTokenAccount',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unfreezeTokenAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/unfreezeTokenAccount',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def grantKycToTokenAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/grantKycToTokenAccount',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def revokeKycFromTokenAccount(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/revokeKycFromTokenAccount',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def associateTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/associateTokens',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def dissociateTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/dissociateTokens',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateTokenFeeSchedule(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/updateTokenFeeSchedule',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTokenInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/getTokenInfo',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getTokenNftInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/getTokenNftInfo',
            services_dot_query__pb2.Query.SerializeToString,
            services_dot_response__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def pauseToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/pauseToken',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unpauseToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/unpauseToken',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateNfts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/updateNfts',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def rejectToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/rejectToken',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def airdropTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/airdropTokens',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def cancelAirdrop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/cancelAirdrop',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def claimAirdrop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TokenService/claimAirdrop',
            services_dot_transaction__pb2.Transaction.SerializeToString,
            services_dot_transaction__response__pb2.TransactionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
