[build-system]
requires = ["hatchling", "tomli"]
build-backend = "hatchling.build"

[project]
name = "langgraph-agent-toolkit"
version = "0.7.22"
description = "Full toolkit for running an AI agent service built with LangGraph, FastAPI and Streamlit"
readme = "README.md"
authors = [{ name = "Roman Kryvokhyzha", email = "kriwohizha@gmail.com" }, { name = "Joshua Carroll", email = "carroll.joshk@gmail.com" }]
keywords = ["langgraph", "agents", "fastapi", "streamlit", "litellm", "blueprint"]
license = "mit"
classifiers = [
    "Development Status :: 4 - Beta",
#    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Framework :: FastAPI",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

requires-python = ">=3.11,<3.14"

dependencies = [
    "rootutils >= 1.0.7",
    "duckduckgo-search >= 7.3.0",
    "ddgs >= 9.5.0",
    "fastapi ~= 0.116.1",
    "grpcio >= 1.68.0",
    "httpx ~= 0.28.1",
    "jiter ~= 0.10.0",
    "langchain-core ~= 0.3.60",
    "langchain-community ~= 0.3.24",
    "langgraph ~= 0.6.2",
    "langgraph-cli[inmem] >= 0.2.10,< 0.4.0",
    "langgraph-checkpoint-sqlite ~= 2.0.7",
    # "langgraph-checkpoint-postgres (~=2.0.21, !=2.0.22)",
    "langgraph-checkpoint-postgres <= 2.0.21",
    "langgraph-supervisor ~= 0.0.21",
    "numpy ~= 1.26.4; python_version <= '3.12'",
    "numpy >= 2.0.0,< 2.4.0; python_version >= '3.13'",
    "onnxruntime >= 1.20.0,< 1.23.0",
    "pandas >= 2.2.3,< 2.4.0",
    "psycopg[binary,pool] ~= 3.2.4",
    "pyarrow >= 19.0.1",
    "pydantic ~= 2.11.1",
    "pydantic-settings >= 2.9.1,< 2.11.0",
    "pyowm ~= 3.3.0",
    "python-dotenv ~= 1.1.0",
    "setuptools >= 75.6.0",
    "streamlit >= 1.45, < 1.48",
    "watchdog ~= 6.0.0",
    "joblib >= 1.4.2",
    "uvicorn ~= 0.35.0",
    "loguru ~= 0.7.3",
    "fire ~= 0.7.0",
    "multidict > 6.3.2",
    "Jinja2 ~= 3.1.6",
]

[dependency-groups]
dev = [
    "pre-commit",
    "pytest",
    "pytest-cov",
    "pytest-env",
    "pytest-asyncio",
    "ruff",
    "sphinx",
    "sphinx-pyproject",
]

# Group for the minimal dependencies to run just the client and Streamlit app.
# These are also installed in the default dependencies.
# To install run: `uv sync --frozen --only-group client`
client = [
    "httpx ~= 0.28.1",
    "pydantic ~= 2.11.1",
    "python-dotenv ~= 1.1.0",
    "streamlit >= 1.45,< 1.48",
    "watchdog ~= 6.0.0",
]

[project.optional-dependencies]

# Service runner backends
aws-backend = [
    "mangum ~= 0.19.0",
]

azure-backend = [
    "azure-functions ~= 1.23.0",
]

gunicorn-backend = [
    "gunicorn ~= 23.0.0",
    "uvicorn[standard] ~= 0.35.0",
]

uvicorn-backend = [
    "uvicorn ~= 0.35.0",
]

all-backends = [
    "mangum ~= 0.19.0",
    "azure-functions ~= 1.23.0", 
    "gunicorn ~= 23.0.0",
    "uvicorn ~= 0.35.0",
]

# Different LLM providers
aws = [
    "langchain-aws ~= 0.2.22",
]

anthropic = [
    "langchain-anthropic ~= 0.3.12",
]

google-vertexai = [
    "langchain-google-vertexai ~= 2.0.21",
]

google-genai = [
    "langchain-google-genai ~= 2.1.4",
]

ollama = [
    "langchain-ollama ~= 0.3.2",
]

groq = [
    "langchain-groq ~= 0.3.2",
]

deepseek = [
    "langchain-deepseek ~= 0.1.3",
]

openai = [
    "langchain-openai ~= 0.3.16",
]

all-llms = [
    "langchain-aws ~= 0.2.22",
    "langchain-anthropic ~= 0.3.12",
    "langchain-google-vertexai ~= 2.0.21",
    "langchain-google-genai ~= 2.1.4",
    "langchain-ollama ~= 0.3.2",
    "langchain-groq ~= 0.3.2",
    "langchain-deepseek ~= 0.1.3",
    "langchain-openai ~= 0.3.16",
]

# Observability tools and platforms
langfuse = [
    "langfuse >= 2.60.3,< 2.70.0",
 ]

 langsmith = [
    "langsmith >= 0.3.31,< 0.5.0",
 ]

 all-observability = [
    "langfuse >= 2.60.3,< 2.70.0",
    "langsmith >= 0.3.31,< 0.5.0",
 ]

[project.urls]
documentation = "https://kryvokhyzha.github.io/langgraph-agent-toolkit"
repository = "https://github.com/kryvokhyzha/langgraph-agent-toolkit"
"PyPI" = "https://pypi.org/project/langgraph-agent-toolkit"

[tool.hatch.build.targets.wheel]
packages = ["langgraph_agent_toolkit"]

[tool.ruff]
line-length = 120
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "D"]  # all rules can be found here: https://beta.ruff.rs/docs/rules/
ignore=[
    "E203",         # space before : (needed for how black formats slicing)
    "E731",         # do not assign a lambda expression, use a def
    "E741",         # do not use variables named 'l', 'O', or 'I'
    "F403",         # unable to detect undefined names
    "F401",         # imported but unused
    "D100",         # missing docstring in public module
    "D101",         # missing docstring in public class
    "D102",         # missing docstring in public method
    "D103",         # missing docstring in public function
    "D104",         # missing docstring in public package
    "D105",         # missing docstring in magic method
    "D107",         # missing docstring in `__init__`
    "D203",         # incorrect-blank-line-before-class
    "D213",         # multi-line-summary-second-line
]
exclude=[
    ".git",
    "__pycache__",
    ".ruff_cache",
    ".github",
    "build",
    "dist",
]

[tool.ruff.lint.per-file-ignores]
"scripts/python/*"=["E402"]
"langgraph_agent_toolkit/run_agent.py"=["E402"]
"langgraph_agent_toolkit/service/factory.py"=["F821"]

[tool.ruff.lint.isort]
lines-after-imports = 2

[tool.nbqa.config]
ruff = "pyproject.toml"

[tool.nbqa.addopts]
ruff = ["--extend-ignore=E402"]

[tool.nbqa.mutate]
ruff = 1

[tool.pytest.ini_options]
pythonpath = ["langgraph_agent_toolkit", "."]
asyncio_default_fixture_loop_scope = "function"

[tool.pytest_env]
OPENAI_API_KEY = "sk-xxxxx-fake-openai-key"