[tool.poetry]
name = "valid8r"
version = "0.5.1"
description = "Clean, flexible input validation for Python applications"
authors = ["Mike Lane <mikelane@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://valid8r.readthedocs.io/"
repository = "https://github.com/mikelane/valid8r"
documentation = "https://valid8r.readthedocs.io/"
keywords = ["validation", "input", "cli", "maybe-monad", "parsing", "functional-programming"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Typing :: Typed",
]
packages = [{include = "valid8r"}]
include = [{ path = "valid8r/py.typed", format = "wheel" }]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
email-validator = "^2.3.0"
pydantic = ">=2.0"
pydantic-core = "^2.27.0"
# No external dependencies for core functionality
uuid-utils = "^0.11.0"

[tool.poetry.group.dev.dependencies]
fastapi = "^0.119.0"
httpx = "^0.28.1"
livereload = "^2.7.1"
mypy = "^1.17.1"
pre-commit = "^4.3.0"
python-semantic-release = "^9.21.1"
uvicorn = "^0.37.0"

[tool.poetry.group.lint.dependencies]
isort = "^6.0.1"
ruff = "^0.12.8"

[tool.poetry.group.docs.dependencies]
myst-parser = "^4.0.1"
sphinx = "^8.2.3"
sphinx-autoapi = "^3.6.0"
sphinx-autodoc-typehints = "^3.2.0"
sphinx-copybutton = "^0.5.2"
sphinx-rtd-theme = "^3.0.2"


[tool.poetry.group.test.dependencies]
behave = "^1.3.0"
coverage = "^7.10.2"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-mock = "^3.14.1"
pytest-sugar = "^1.0.0"
tox = "^4.28.4"

[tool.poetry.scripts]
docs-build = "scripts.docs:build"
docs-serve = "scripts.docs:serve"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["it_*.py", "test_*.py"]
python_functions = ["it_*"]
python_classes = ["Describe[A-Z]*"]
addopts = ["-s", "-ra", "-q", "-vv"]


[tool.isort]
line_length = 120
profile = "black"
multi_line_output = 3
force_grid_wrap = 2
include_trailing_comma = true
use_parentheses = true
ensure_newline_before_comments = true

known_first_party = ["valid8r"]

[tool.ruff]
line-length = 120

src = ["valid8r", "tests"]

include = ["*.py"]

exclude = [".git", ".venv", "__pycache__", "build", "dist"]

target-version = "py311"

respect-gitignore = true

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "COM812", # Ignore missing trailing commas (conflicts with ruff format)
    "D203", # Don't require 1 blank line before class docstring
    "D213", # Don't require multiline docstring to start at the second line
    "EM101", # Allow raw strings as error messages
    "ISC001", # Ignore implicitly concatenated strings (conflicts with ruff format)
    "PLR0911", # I don't agree that there could be too many return statements.
    "T201", # This module needs to print, so don't prevent it
    "TRY003", # Don't be so strict about the length of exception messages or whatever this is
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"test_*.py" = [
    "D100", # Don't require module docstrings
    "D101", # Don't require class docstrings
    "D102", # Don't require method docstrings
    "FBT001", # Allow tests to use boolean arguments
    "PLR2004", # Don't prevent magic values in tests
    "S101", # Don't prevent asserts
]
"tests/*" = [
    "D100", # Don't require module docstrings in tests
    "D101", # Don't require class docstrings in tests
    "D102", # Don't require method docstrings in tests
    "D103", # Don't require function docstrings in tests
    "D104", # Don't require init docstrings in tests
    "PGH003", # Allow tests to casually ignore mypy complaints about incorrect types
    "PLC0415", # Allow imports inside test functions
    "PLR0913", # Allow tests to have as many arguments as we want
]
"tests/bdd/steps/*" = [
    "S101", # Allow asserts in behave tests
]
"tests/_utils/check_coverage.py" = ["T201"] # allow print function in the scripts
"scripts/*" = ["T201"] # allow print function in the scripts
"smoke_test.py" = ["S101"] # allow asserts in smoke test
"conftest.py" = ["D100"] # Don't require module docstrings in conftest
"__init__.py" = ["F401"] # allow unused imports in __init__.py
"valid8r/core/parsers.py" = [
    "C901", # Allow complex functions in parsers
    "D413", # Allow missing blank line after last docstring section
    "FBT001", # Allow boolean positional arguments
    "FBT002", # Allow boolean default arguments
    "PLR2004", # Allow magic values for network constants
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]
known-first-party = ["valid8r"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"
docstring-quotes = "double"


[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [
  "pytest",
  "pytest.*",
  "pytest_mock",
  "pytest_mock.*",
  "behave",
  "behave.*",
  "sphinx",
  "sphinx.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
  "tests.*",
  "docs.*",
]
ignore_errors = true

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
branch = "main"
build_command = "pip install poetry && poetry build"
dist_path = "dist/"
upload_to_release = true
upload_to_pypi = true
remove_dist = false
major_on_zero = false
tag_format = "v{version}"
commit_parser = "angular"
logging_use_named_masks = false

[tool.semantic_release.branches.main]
match = "main"
prerelease = false

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = []
mode = "init"
# GitHub auto-generates release notes via .github/release.yml
# CHANGELOG.md is maintained but not used for GitHub releases

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "refactor", "revert", "style", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
