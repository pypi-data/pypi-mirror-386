"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.queries_pb2 import (
    AggregateQueryErrorsRequest,
    AggregateQueryErrorsResponse,
    GetMetaQueryByNameRequest,
    GetMetaQueryByNameResponse,
    GetMetaQueryRequest,
    GetMetaQueryResponse,
    GetQueryErrorsChartRequest,
    GetQueryErrorsChartResponse,
    GetQueryPerformanceSummaryRequest,
    GetQueryPerformanceSummaryResponse,
    GetQueryPlanRequest,
    GetQueryPlanResponse,
    ListArchivedMetaQueriesRequest,
    ListArchivedMetaQueriesResponse,
    ListLatestMetaQueriesRequest,
    ListLatestMetaQueriesResponse,
    ListMetaQueriesByIdsRequest,
    ListMetaQueriesByIdsResponse,
    ListMetaQueriesForFeatureRequest,
    ListMetaQueriesForFeatureResponse,
    ListMetaQueriesForResolverRequest,
    ListMetaQueriesForResolverResponse,
    ListMetaQueriesRequest,
    ListMetaQueriesResponse,
    ListMetaQueryRunsRequest,
    ListMetaQueryRunsResponse,
    ListMetaQueryVersionsRequest,
    ListMetaQueryVersionsResponse,
    ListQueryErrorsRequest,
    ListQueryErrorsResponse,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)

class QueriesServiceStub:
    def __init__(self, channel: Channel) -> None: ...
    GetQueryPerformanceSummary: UnaryUnaryMultiCallable[
        GetQueryPerformanceSummaryRequest,
        GetQueryPerformanceSummaryResponse,
    ]
    ListQueryErrors: UnaryUnaryMultiCallable[
        ListQueryErrorsRequest,
        ListQueryErrorsResponse,
    ]
    GetQueryErrorsChart: UnaryUnaryMultiCallable[
        GetQueryErrorsChartRequest,
        GetQueryErrorsChartResponse,
    ]
    GetQueryPlan: UnaryUnaryMultiCallable[
        GetQueryPlanRequest,
        GetQueryPlanResponse,
    ]
    AggregateQueryErrors: UnaryUnaryMultiCallable[
        AggregateQueryErrorsRequest,
        AggregateQueryErrorsResponse,
    ]
    ListMetaQueryRuns: UnaryUnaryMultiCallable[
        ListMetaQueryRunsRequest,
        ListMetaQueryRunsResponse,
    ]
    ListMetaQueries: UnaryUnaryMultiCallable[
        ListMetaQueriesRequest,
        ListMetaQueriesResponse,
    ]
    ListLatestMetaQueries: UnaryUnaryMultiCallable[
        ListLatestMetaQueriesRequest,
        ListLatestMetaQueriesResponse,
    ]
    GetMetaQuery: UnaryUnaryMultiCallable[
        GetMetaQueryRequest,
        GetMetaQueryResponse,
    ]
    GetMetaQueryByName: UnaryUnaryMultiCallable[
        GetMetaQueryByNameRequest,
        GetMetaQueryByNameResponse,
    ]
    ListMetaQueriesByIds: UnaryUnaryMultiCallable[
        ListMetaQueriesByIdsRequest,
        ListMetaQueriesByIdsResponse,
    ]
    ListArchivedMetaQueries: UnaryUnaryMultiCallable[
        ListArchivedMetaQueriesRequest,
        ListArchivedMetaQueriesResponse,
    ]
    ListMetaQueriesForResolver: UnaryUnaryMultiCallable[
        ListMetaQueriesForResolverRequest,
        ListMetaQueriesForResolverResponse,
    ]
    ListMetaQueriesForFeature: UnaryUnaryMultiCallable[
        ListMetaQueriesForFeatureRequest,
        ListMetaQueriesForFeatureResponse,
    ]
    ListMetaQueryVersions: UnaryUnaryMultiCallable[
        ListMetaQueryVersionsRequest,
        ListMetaQueryVersionsResponse,
    ]

class QueriesServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def GetQueryPerformanceSummary(
        self,
        request: GetQueryPerformanceSummaryRequest,
        context: ServicerContext,
    ) -> GetQueryPerformanceSummaryResponse: ...
    @abstractmethod
    def ListQueryErrors(
        self,
        request: ListQueryErrorsRequest,
        context: ServicerContext,
    ) -> ListQueryErrorsResponse: ...
    @abstractmethod
    def GetQueryErrorsChart(
        self,
        request: GetQueryErrorsChartRequest,
        context: ServicerContext,
    ) -> GetQueryErrorsChartResponse: ...
    @abstractmethod
    def GetQueryPlan(
        self,
        request: GetQueryPlanRequest,
        context: ServicerContext,
    ) -> GetQueryPlanResponse: ...
    @abstractmethod
    def AggregateQueryErrors(
        self,
        request: AggregateQueryErrorsRequest,
        context: ServicerContext,
    ) -> AggregateQueryErrorsResponse: ...
    @abstractmethod
    def ListMetaQueryRuns(
        self,
        request: ListMetaQueryRunsRequest,
        context: ServicerContext,
    ) -> ListMetaQueryRunsResponse: ...
    @abstractmethod
    def ListMetaQueries(
        self,
        request: ListMetaQueriesRequest,
        context: ServicerContext,
    ) -> ListMetaQueriesResponse: ...
    @abstractmethod
    def ListLatestMetaQueries(
        self,
        request: ListLatestMetaQueriesRequest,
        context: ServicerContext,
    ) -> ListLatestMetaQueriesResponse: ...
    @abstractmethod
    def GetMetaQuery(
        self,
        request: GetMetaQueryRequest,
        context: ServicerContext,
    ) -> GetMetaQueryResponse: ...
    @abstractmethod
    def GetMetaQueryByName(
        self,
        request: GetMetaQueryByNameRequest,
        context: ServicerContext,
    ) -> GetMetaQueryByNameResponse: ...
    @abstractmethod
    def ListMetaQueriesByIds(
        self,
        request: ListMetaQueriesByIdsRequest,
        context: ServicerContext,
    ) -> ListMetaQueriesByIdsResponse: ...
    @abstractmethod
    def ListArchivedMetaQueries(
        self,
        request: ListArchivedMetaQueriesRequest,
        context: ServicerContext,
    ) -> ListArchivedMetaQueriesResponse: ...
    @abstractmethod
    def ListMetaQueriesForResolver(
        self,
        request: ListMetaQueriesForResolverRequest,
        context: ServicerContext,
    ) -> ListMetaQueriesForResolverResponse: ...
    @abstractmethod
    def ListMetaQueriesForFeature(
        self,
        request: ListMetaQueriesForFeatureRequest,
        context: ServicerContext,
    ) -> ListMetaQueriesForFeatureResponse: ...
    @abstractmethod
    def ListMetaQueryVersions(
        self,
        request: ListMetaQueryVersionsRequest,
        context: ServicerContext,
    ) -> ListMetaQueryVersionsResponse: ...

def add_QueriesServiceServicer_to_server(servicer: QueriesServiceServicer, server: Server) -> None: ...
