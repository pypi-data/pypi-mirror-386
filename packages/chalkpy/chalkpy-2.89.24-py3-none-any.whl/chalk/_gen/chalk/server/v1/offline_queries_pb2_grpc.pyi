"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.offline_queries_pb2 import (
    CreateModelTrainingJobRequest,
    CreateModelTrainingJobResponse,
    CreateOfflineQueryJobRequest,
    CreateOfflineQueryJobResponse,
    GetOfflineQueryRequest,
    GetOfflineQueryResponse,
    ListOfflineQueriesRequest,
    ListOfflineQueriesResponse,
)
from chalk._gen.chalk.server.v1.performance_summary_pb2 import (
    ListOfflineQueryShardPerformanceSummariesRequest,
    ListOfflineQueryShardPerformanceSummariesResponse,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)

class OfflineQueryMetadataServiceStub:
    def __init__(self, channel: Channel) -> None: ...
    ListOfflineQueries: UnaryUnaryMultiCallable[
        ListOfflineQueriesRequest,
        ListOfflineQueriesResponse,
    ]
    GetOfflineQuery: UnaryUnaryMultiCallable[
        GetOfflineQueryRequest,
        GetOfflineQueryResponse,
    ]
    ListOfflineQueryShardPerformanceSummaries: UnaryUnaryMultiCallable[
        ListOfflineQueryShardPerformanceSummariesRequest,
        ListOfflineQueryShardPerformanceSummariesResponse,
    ]
    """ rpc GetOfflineQueryShards(GetOfflineQueryShardsRequest) returns (GetOfflineQueryShardsResponse) {
       option(chalk.auth.v1.permission) = PERMISSION_DEPLOY_READ;
       option idempotency_level = NO_SIDE_EFFECTS;
     }
    """
    CreateOfflineQueryJob: UnaryUnaryMultiCallable[
        CreateOfflineQueryJobRequest,
        CreateOfflineQueryJobResponse,
    ]
    CreateModelTrainingJob: UnaryUnaryMultiCallable[
        CreateModelTrainingJobRequest,
        CreateModelTrainingJobResponse,
    ]

class OfflineQueryMetadataServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def ListOfflineQueries(
        self,
        request: ListOfflineQueriesRequest,
        context: ServicerContext,
    ) -> ListOfflineQueriesResponse: ...
    @abstractmethod
    def GetOfflineQuery(
        self,
        request: GetOfflineQueryRequest,
        context: ServicerContext,
    ) -> GetOfflineQueryResponse: ...
    @abstractmethod
    def ListOfflineQueryShardPerformanceSummaries(
        self,
        request: ListOfflineQueryShardPerformanceSummariesRequest,
        context: ServicerContext,
    ) -> ListOfflineQueryShardPerformanceSummariesResponse:
        """rpc GetOfflineQueryShards(GetOfflineQueryShardsRequest) returns (GetOfflineQueryShardsResponse) {
          option(chalk.auth.v1.permission) = PERMISSION_DEPLOY_READ;
          option idempotency_level = NO_SIDE_EFFECTS;
        }
        """
    @abstractmethod
    def CreateOfflineQueryJob(
        self,
        request: CreateOfflineQueryJobRequest,
        context: ServicerContext,
    ) -> CreateOfflineQueryJobResponse: ...
    @abstractmethod
    def CreateModelTrainingJob(
        self,
        request: CreateModelTrainingJobRequest,
        context: ServicerContext,
    ) -> CreateModelTrainingJobResponse: ...

def add_OfflineQueryMetadataServiceServicer_to_server(
    servicer: OfflineQueryMetadataServiceServicer, server: Server
) -> None: ...
