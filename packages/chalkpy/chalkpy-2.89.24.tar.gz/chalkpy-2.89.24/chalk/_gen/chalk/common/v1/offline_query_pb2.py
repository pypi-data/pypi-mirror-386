# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chalk/common/v1/offline_query.proto
# Protobuf Python Version: 4.25.3
"""Generated protocol buffer code."""

from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from chalk._gen.chalk.common.v1 import chalk_error_pb2 as chalk_dot_common_dot_v1_dot_chalk__error__pb2
from chalk._gen.chalk.common.v1 import online_query_pb2 as chalk_dot_common_dot_v1_dot_online__query__pb2
from chalk._gen.chalk.expression.v1 import expression_pb2 as chalk_dot_expression_dot_v1_dot_expression__pb2
from chalk._gen.chalk.graph.v1 import graph_pb2 as chalk_dot_graph_dot_v1_dot_graph__pb2
from google.protobuf import struct_pb2 as google_dot_protobuf_dot_struct__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n#chalk/common/v1/offline_query.proto\x12\x0f\x63halk.common.v1\x1a!chalk/common/v1/chalk_error.proto\x1a"chalk/common/v1/online_query.proto\x1a$chalk/expression/v1/expression.proto\x1a\x1a\x63halk/graph/v1/graph.proto\x1a\x1cgoogle/protobuf/struct.proto"\xdc\x01\n\x1dOfflineQueryRecomputeFeatures\x12 \n\x0b\x61ll_or_none\x18\x01 \x01(\x08H\x00R\tallOrNone\x12_\n\x0c\x66\x65\x61ture_list\x18\x02 \x01(\x0b\x32:.chalk.common.v1.OfflineQueryRecomputeFeatures.FeatureListH\x00R\x0b\x66\x65\x61tureList\x1a\x30\n\x0b\x46\x65\x61tureList\x12!\n\x0c\x66\x65\x61ture_list\x18\x01 \x03(\tR\x0b\x66\x65\x61tureListB\x06\n\x04impl"\x80\x01\n\x13OfflineQueryExplain\x12\x18\n\x06truthy\x18\x01 \x01(\x08H\x00R\x06truthy\x12?\n\x04only\x18\x02 \x01(\x0b\x32).chalk.common.v1.OfflineQueryExplain.OnlyH\x00R\x04only\x1a\x06\n\x04OnlyB\x06\n\x04impl"a\n\x11OfflineQueryInput\x12\x18\n\x07\x63olumns\x18\x01 \x03(\tR\x07\x63olumns\x12\x32\n\x06values\x18\x02 \x03(\x0b\x32\x1a.google.protobuf.ListValueR\x06values"V\n\x18OfflineQueryInputSharded\x12:\n\x06inputs\x18\x01 \x03(\x0b\x32".chalk.common.v1.OfflineQueryInputR\x06inputs"_\n%OfflineQueryShardedParquetUploadInput\x12\x1c\n\tfilenames\x18\x01 \x03(\tR\tfilenames\x12\x18\n\x07version\x18\x02 \x01(\x05R\x07version"\xba\x03\n\x12OfflineQueryInputs\x12\'\n\x0e\x66\x65\x61ther_inputs\x18\x01 \x01(\x0cH\x00R\rfeatherInputs\x12K\n\tno_inputs\x18\x02 \x01(\x0b\x32,.chalk.common.v1.OfflineQueryInputs.NoInputsH\x00R\x08noInputs\x12I\n\rsingle_inputs\x18\x03 \x01(\x0b\x32".chalk.common.v1.OfflineQueryInputH\x00R\x0csingleInputs\x12R\n\x0esharded_inputs\x18\x04 \x01(\x0b\x32).chalk.common.v1.OfflineQueryInputShardedH\x00R\rshardedInputs\x12{\n\x1dsharded_parquet_upload_inputs\x18\x05 \x01(\x0b\x32\x36.chalk.common.v1.OfflineQueryShardedParquetUploadInputH\x00R\x1ashardedParquetUploadInputs\x1a\n\n\x08NoInputsB\x06\n\x04impl"\xf7\x0f\n\x13OfflineQueryRequest\x12;\n\x06inputs\x18\x01 \x01(\x0b\x32#.chalk.common.v1.OfflineQueryInputsR\x06inputs\x12\x18\n\x07outputs\x18\x02 \x03(\tR\x07outputs\x12)\n\x10required_outputs\x18\x03 \x03(\tR\x0frequiredOutputs\x12-\n\x12\x64\x65stination_format\x18\x04 \x01(\tR\x11\x64\x65stinationFormat\x12\x1b\n\x06\x62ranch\x18\x05 \x01(\tH\x00R\x06\x62ranch\x88\x01\x01\x12&\n\x0c\x64\x61taset_name\x18\x06 \x01(\tH\x01R\x0b\x64\x61tasetName\x88\x01\x01\x12]\n\x12recompute_features\x18\x07 \x01(\x0b\x32..chalk.common.v1.OfflineQueryRecomputeFeaturesR\x11recomputeFeatures\x12*\n\x11store_plan_stages\x18\x08 \x01(\x08R\x0fstorePlanStages\x12>\n\x07\x66ilters\x18\x0b \x03(\x0b\x32$.chalk.expression.v1.LogicalExprNodeR\x07\x66ilters\x12+\n\x0fspine_sql_query\x18\x0c \x01(\tH\x02R\rspineSqlQuery\x88\x01\x01\x12$\n\x0bmax_samples\x18\x65 \x01(\x05H\x03R\nmaxSamples\x88\x01\x01\x12\x30\n\x12max_cache_age_secs\x18\x66 \x01(\x05H\x04R\x0fmaxCacheAgeSecs\x88\x01\x01\x12\x42\n\x07\x65xplain\x18g \x01(\x0b\x32$.chalk.common.v1.OfflineQueryExplainB\x02\x18\x01R\x07\x65xplain\x12;\n\x08\x65xplain2\x18j \x01(\x0b\x32\x1f.chalk.common.v1.ExplainOptionsR\x08\x65xplain2\x12\x12\n\x04tags\x18h \x03(\tR\x04tags\x12*\n\x0e\x63orrelation_id\x18i \x01(\tH\x05R\rcorrelationId\x88\x01\x01\x12\x34\n\x16required_resolver_tags\x18k \x03(\tR\x14requiredResolverTags\x12;\n\x17observed_at_lower_bound\x18\xc9\x01 \x01(\tH\x06R\x14observedAtLowerBound\x88\x01\x01\x12;\n\x17observed_at_upper_bound\x18\xca\x01 \x01(\tH\x07R\x14observedAtUpperBound\x88\x01\x01\x12\x62\n\x0fplanner_options\x18\xcb\x01 \x03(\x0b\x32\x38.chalk.common.v1.OfflineQueryRequest.PlannerOptionsEntryR\x0eplannerOptions\x12\'\n\x0cstore_online\x18\xcc\x01 \x01(\x08H\x08R\x0bstoreOnline\x88\x01\x01\x12)\n\rstore_offline\x18\xcd\x01 \x01(\x08H\tR\x0cstoreOffline\x88\x01\x01\x12:\n\x16use_multiple_computers\x18\xce\x01 \x01(\x08H\nR\x14useMultipleComputers\x88\x01\x01\x12#\n\nnum_shards\x18\xcf\x01 \x01(\x05H\x0bR\tnumShards\x88\x01\x01\x12%\n\x0bnum_workers\x18\xd0\x01 \x01(\x05H\x0cR\nnumWorkers\x88\x01\x01\x12\\\n\rquery_context\x18\xd1\x01 \x03(\x0b\x32\x36.chalk.common.v1.OfflineQueryRequest.QueryContextEntryR\x0cqueryContext\x12G\n\roverlay_graph\x18\xd2\x01 \x01(\x0b\x32\x1c.chalk.graph.v1.OverlayGraphH\rR\x0coverlayGraph\x88\x01\x01\x12#\n\nquery_name\x18\xd3\x01 \x01(\tH\x0eR\tqueryName\x88\x01\x01\x12\x32\n\x12query_name_version\x18\xd4\x01 \x01(\tH\x0fR\x10queryNameVersion\x88\x01\x01\x1aY\n\x13PlannerOptionsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12,\n\x05value\x18\x02 \x01(\x0b\x32\x16.google.protobuf.ValueR\x05value:\x02\x38\x01\x1aW\n\x11QueryContextEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12,\n\x05value\x18\x02 \x01(\x0b\x32\x16.google.protobuf.ValueR\x05value:\x02\x38\x01\x42\t\n\x07_branchB\x0f\n\r_dataset_nameB\x12\n\x10_spine_sql_queryB\x0e\n\x0c_max_samplesB\x15\n\x13_max_cache_age_secsB\x11\n\x0f_correlation_idB\x1a\n\x18_observed_at_lower_boundB\x1a\n\x18_observed_at_upper_boundB\x0f\n\r_store_onlineB\x10\n\x0e_store_offlineB\x19\n\x17_use_multiple_computersB\r\n\x0b_num_shardsB\x0e\n\x0c_num_workersB\x10\n\x0e_overlay_graphB\r\n\x0b_query_nameB\x15\n\x13_query_name_version"\xce\x01\n\x12\x43olumnMetadataList\x12N\n\x08metadata\x18\x01 \x03(\x0b\x32\x32.chalk.common.v1.ColumnMetadataList.ColumnMetadataR\x08metadata\x1ah\n\x0e\x43olumnMetadata\x12\x1f\n\x0b\x66\x65\x61ture_fqn\x18\x01 \x01(\tR\nfeatureFqn\x12\x1f\n\x0b\x63olumn_name\x18\x02 \x01(\tR\ncolumnName\x12\x14\n\x05\x64type\x18\x03 \x01(\tR\x05\x64type"\xf0\x01\n\x1aGetOfflineQueryJobResponse\x12\x1f\n\x0bis_finished\x18\x01 \x01(\x08R\nisFinished\x12\x18\n\x07version\x18\x02 \x01(\x05R\x07version\x12\x12\n\x04urls\x18\x03 \x03(\tR\x04urls\x12\x33\n\x06\x65rrors\x18\x04 \x03(\x0b\x32\x1b.chalk.common.v1.ChalkErrorR\x06\x65rrors\x12\x42\n\x07\x63olumns\x18\x05 \x01(\x0b\x32#.chalk.common.v1.ColumnMetadataListH\x00R\x07\x63olumns\x88\x01\x01\x42\n\n\x08_columnsB\x86\x01\n\x13\x63om.chalk.common.v1B\x11OfflineQueryProtoP\x01\xa2\x02\x03\x43\x43X\xaa\x02\x0f\x43halk.Common.V1\xca\x02\x0f\x43halk\\Common\\V1\xe2\x02\x1b\x43halk\\Common\\V1\\GPBMetadata\xea\x02\x11\x43halk::Common::V1b\x06proto3'
)

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, "chalk.common.v1.offline_query_pb2", _globals)
if _descriptor._USE_C_DESCRIPTORS == False:
    _globals["DESCRIPTOR"]._options = None
    _globals[
        "DESCRIPTOR"
    ]._serialized_options = b"\n\023com.chalk.common.v1B\021OfflineQueryProtoP\001\242\002\003CCX\252\002\017Chalk.Common.V1\312\002\017Chalk\\Common\\V1\342\002\033Chalk\\Common\\V1\\GPBMetadata\352\002\021Chalk::Common::V1"
    _globals["_OFFLINEQUERYREQUEST_PLANNEROPTIONSENTRY"]._options = None
    _globals["_OFFLINEQUERYREQUEST_PLANNEROPTIONSENTRY"]._serialized_options = b"8\001"
    _globals["_OFFLINEQUERYREQUEST_QUERYCONTEXTENTRY"]._options = None
    _globals["_OFFLINEQUERYREQUEST_QUERYCONTEXTENTRY"]._serialized_options = b"8\001"
    _globals["_OFFLINEQUERYREQUEST"].fields_by_name["explain"]._options = None
    _globals["_OFFLINEQUERYREQUEST"].fields_by_name["explain"]._serialized_options = b"\030\001"
    _globals["_OFFLINEQUERYRECOMPUTEFEATURES"]._serialized_start = 224
    _globals["_OFFLINEQUERYRECOMPUTEFEATURES"]._serialized_end = 444
    _globals["_OFFLINEQUERYRECOMPUTEFEATURES_FEATURELIST"]._serialized_start = 388
    _globals["_OFFLINEQUERYRECOMPUTEFEATURES_FEATURELIST"]._serialized_end = 436
    _globals["_OFFLINEQUERYEXPLAIN"]._serialized_start = 447
    _globals["_OFFLINEQUERYEXPLAIN"]._serialized_end = 575
    _globals["_OFFLINEQUERYEXPLAIN_ONLY"]._serialized_start = 561
    _globals["_OFFLINEQUERYEXPLAIN_ONLY"]._serialized_end = 567
    _globals["_OFFLINEQUERYINPUT"]._serialized_start = 577
    _globals["_OFFLINEQUERYINPUT"]._serialized_end = 674
    _globals["_OFFLINEQUERYINPUTSHARDED"]._serialized_start = 676
    _globals["_OFFLINEQUERYINPUTSHARDED"]._serialized_end = 762
    _globals["_OFFLINEQUERYSHARDEDPARQUETUPLOADINPUT"]._serialized_start = 764
    _globals["_OFFLINEQUERYSHARDEDPARQUETUPLOADINPUT"]._serialized_end = 859
    _globals["_OFFLINEQUERYINPUTS"]._serialized_start = 862
    _globals["_OFFLINEQUERYINPUTS"]._serialized_end = 1304
    _globals["_OFFLINEQUERYINPUTS_NOINPUTS"]._serialized_start = 1286
    _globals["_OFFLINEQUERYINPUTS_NOINPUTS"]._serialized_end = 1296
    _globals["_OFFLINEQUERYREQUEST"]._serialized_start = 1307
    _globals["_OFFLINEQUERYREQUEST"]._serialized_end = 3346
    _globals["_OFFLINEQUERYREQUEST_PLANNEROPTIONSENTRY"]._serialized_start = 2857
    _globals["_OFFLINEQUERYREQUEST_PLANNEROPTIONSENTRY"]._serialized_end = 2946
    _globals["_OFFLINEQUERYREQUEST_QUERYCONTEXTENTRY"]._serialized_start = 2948
    _globals["_OFFLINEQUERYREQUEST_QUERYCONTEXTENTRY"]._serialized_end = 3035
    _globals["_COLUMNMETADATALIST"]._serialized_start = 3349
    _globals["_COLUMNMETADATALIST"]._serialized_end = 3555
    _globals["_COLUMNMETADATALIST_COLUMNMETADATA"]._serialized_start = 3451
    _globals["_COLUMNMETADATALIST_COLUMNMETADATA"]._serialized_end = 3555
    _globals["_GETOFFLINEQUERYJOBRESPONSE"]._serialized_start = 3558
    _globals["_GETOFFLINEQUERYJOBRESPONSE"]._serialized_end = 3798
# @@protoc_insertion_point(module_scope)
