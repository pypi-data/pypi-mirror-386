# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from chalk._gen.chalk.server.v1 import flag_pb2 as chalk_dot_server_dot_v1_dot_flag__pb2


class FeatureFlagServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFeatureFlags = channel.unary_unary(
            "/chalk.server.v1.FeatureFlagService/GetFeatureFlags",
            request_serializer=chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagsRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagsResponse.FromString,
        )
        self.GetFeatureFlag = channel.unary_unary(
            "/chalk.server.v1.FeatureFlagService/GetFeatureFlag",
            request_serializer=chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagResponse.FromString,
        )
        self.SetFeatureFlag = channel.unary_unary(
            "/chalk.server.v1.FeatureFlagService/SetFeatureFlag",
            request_serializer=chalk_dot_server_dot_v1_dot_flag__pb2.SetFeatureFlagRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_flag__pb2.SetFeatureFlagResponse.FromString,
        )


class FeatureFlagServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFeatureFlags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetFeatureFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetFeatureFlag(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_FeatureFlagServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetFeatureFlags": grpc.unary_unary_rpc_method_handler(
            servicer.GetFeatureFlags,
            request_deserializer=chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagsRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagsResponse.SerializeToString,
        ),
        "GetFeatureFlag": grpc.unary_unary_rpc_method_handler(
            servicer.GetFeatureFlag,
            request_deserializer=chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagResponse.SerializeToString,
        ),
        "SetFeatureFlag": grpc.unary_unary_rpc_method_handler(
            servicer.SetFeatureFlag,
            request_deserializer=chalk_dot_server_dot_v1_dot_flag__pb2.SetFeatureFlagRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_flag__pb2.SetFeatureFlagResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("chalk.server.v1.FeatureFlagService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class FeatureFlagService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFeatureFlags(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.FeatureFlagService/GetFeatureFlags",
            chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagsRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetFeatureFlag(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.FeatureFlagService/GetFeatureFlag",
            chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_flag__pb2.GetFeatureFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetFeatureFlag(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.FeatureFlagService/SetFeatureFlag",
            chalk_dot_server_dot_v1_dot_flag__pb2.SetFeatureFlagRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_flag__pb2.SetFeatureFlagResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
