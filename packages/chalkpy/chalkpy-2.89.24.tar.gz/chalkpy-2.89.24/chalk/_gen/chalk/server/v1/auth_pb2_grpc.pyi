"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.auth_pb2 import (
    CheckTeamInvitesRequest,
    CheckTeamInvitesResponse,
    CreateSessionRequest,
    CreateSessionResponse,
    CreateUserRequest,
    CreateUserResponse,
    CreateVerificationTokenRequest,
    CreateVerificationTokenResponse,
    DeleteSessionRequest,
    DeleteSessionResponse,
    GetSessionAndUserRequest,
    GetSessionAndUserResponse,
    GetTokenRequest,
    GetTokenResponse,
    GetUserByAccountRequest,
    GetUserByAccountResponse,
    GetUserByEmailRequest,
    GetUserByEmailResponse,
    GetUserByIdRequest,
    GetUserByIdResponse,
    LinkAccountRequest,
    LinkAccountResponse,
    UpdateLinkSessionRequest,
    UpdateLinkSessionResponse,
    UpdateSessionRequest,
    UpdateSessionResponse,
    UpdateUserRequest,
    UpdateUserResponse,
    UpsertUserByEmailRequest,
    UpsertUserByEmailResponse,
    UseVerificationTokenRequest,
    UseVerificationTokenResponse,
)
from chalk._gen.chalk.server.v1.link_pb2 import (
    CreateLinkSessionRequest,
    CreateLinkSessionResponse,
    GetLinkSessionRequest,
    GetLinkSessionResponse,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)

class AuthServiceStub:
    def __init__(self, channel: Channel) -> None: ...
    GetToken: UnaryUnaryMultiCallable[
        GetTokenRequest,
        GetTokenResponse,
    ]
    CreateLinkSession: UnaryUnaryMultiCallable[
        CreateLinkSessionRequest,
        CreateLinkSessionResponse,
    ]
    GetLinkSession: UnaryUnaryMultiCallable[
        GetLinkSessionRequest,
        GetLinkSessionResponse,
    ]
    UpdateLinkSession: UnaryUnaryMultiCallable[
        UpdateLinkSessionRequest,
        UpdateLinkSessionResponse,
    ]
    CheckTeamInvites: UnaryUnaryMultiCallable[
        CheckTeamInvitesRequest,
        CheckTeamInvitesResponse,
    ]
    """NextAuth Adapter RPCs"""
    CreateUser: UnaryUnaryMultiCallable[
        CreateUserRequest,
        CreateUserResponse,
    ]
    GetUserById: UnaryUnaryMultiCallable[
        GetUserByIdRequest,
        GetUserByIdResponse,
    ]
    GetUserByEmail: UnaryUnaryMultiCallable[
        GetUserByEmailRequest,
        GetUserByEmailResponse,
    ]
    GetUserByAccount: UnaryUnaryMultiCallable[
        GetUserByAccountRequest,
        GetUserByAccountResponse,
    ]
    UpdateUser: UnaryUnaryMultiCallable[
        UpdateUserRequest,
        UpdateUserResponse,
    ]
    LinkAccount: UnaryUnaryMultiCallable[
        LinkAccountRequest,
        LinkAccountResponse,
    ]
    CreateSession: UnaryUnaryMultiCallable[
        CreateSessionRequest,
        CreateSessionResponse,
    ]
    GetSessionAndUser: UnaryUnaryMultiCallable[
        GetSessionAndUserRequest,
        GetSessionAndUserResponse,
    ]
    UpdateSession: UnaryUnaryMultiCallable[
        UpdateSessionRequest,
        UpdateSessionResponse,
    ]
    DeleteSession: UnaryUnaryMultiCallable[
        DeleteSessionRequest,
        DeleteSessionResponse,
    ]
    CreateVerificationToken: UnaryUnaryMultiCallable[
        CreateVerificationTokenRequest,
        CreateVerificationTokenResponse,
    ]
    UseVerificationToken: UnaryUnaryMultiCallable[
        UseVerificationTokenRequest,
        UseVerificationTokenResponse,
    ]
    UpsertUserByEmail: UnaryUnaryMultiCallable[
        UpsertUserByEmailRequest,
        UpsertUserByEmailResponse,
    ]

class AuthServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def GetToken(
        self,
        request: GetTokenRequest,
        context: ServicerContext,
    ) -> GetTokenResponse: ...
    @abstractmethod
    def CreateLinkSession(
        self,
        request: CreateLinkSessionRequest,
        context: ServicerContext,
    ) -> CreateLinkSessionResponse: ...
    @abstractmethod
    def GetLinkSession(
        self,
        request: GetLinkSessionRequest,
        context: ServicerContext,
    ) -> GetLinkSessionResponse: ...
    @abstractmethod
    def UpdateLinkSession(
        self,
        request: UpdateLinkSessionRequest,
        context: ServicerContext,
    ) -> UpdateLinkSessionResponse: ...
    @abstractmethod
    def CheckTeamInvites(
        self,
        request: CheckTeamInvitesRequest,
        context: ServicerContext,
    ) -> CheckTeamInvitesResponse:
        """NextAuth Adapter RPCs"""
    @abstractmethod
    def CreateUser(
        self,
        request: CreateUserRequest,
        context: ServicerContext,
    ) -> CreateUserResponse: ...
    @abstractmethod
    def GetUserById(
        self,
        request: GetUserByIdRequest,
        context: ServicerContext,
    ) -> GetUserByIdResponse: ...
    @abstractmethod
    def GetUserByEmail(
        self,
        request: GetUserByEmailRequest,
        context: ServicerContext,
    ) -> GetUserByEmailResponse: ...
    @abstractmethod
    def GetUserByAccount(
        self,
        request: GetUserByAccountRequest,
        context: ServicerContext,
    ) -> GetUserByAccountResponse: ...
    @abstractmethod
    def UpdateUser(
        self,
        request: UpdateUserRequest,
        context: ServicerContext,
    ) -> UpdateUserResponse: ...
    @abstractmethod
    def LinkAccount(
        self,
        request: LinkAccountRequest,
        context: ServicerContext,
    ) -> LinkAccountResponse: ...
    @abstractmethod
    def CreateSession(
        self,
        request: CreateSessionRequest,
        context: ServicerContext,
    ) -> CreateSessionResponse: ...
    @abstractmethod
    def GetSessionAndUser(
        self,
        request: GetSessionAndUserRequest,
        context: ServicerContext,
    ) -> GetSessionAndUserResponse: ...
    @abstractmethod
    def UpdateSession(
        self,
        request: UpdateSessionRequest,
        context: ServicerContext,
    ) -> UpdateSessionResponse: ...
    @abstractmethod
    def DeleteSession(
        self,
        request: DeleteSessionRequest,
        context: ServicerContext,
    ) -> DeleteSessionResponse: ...
    @abstractmethod
    def CreateVerificationToken(
        self,
        request: CreateVerificationTokenRequest,
        context: ServicerContext,
    ) -> CreateVerificationTokenResponse: ...
    @abstractmethod
    def UseVerificationToken(
        self,
        request: UseVerificationTokenRequest,
        context: ServicerContext,
    ) -> UseVerificationTokenResponse: ...
    @abstractmethod
    def UpsertUserByEmail(
        self,
        request: UpsertUserByEmailRequest,
        context: ServicerContext,
    ) -> UpsertUserByEmailResponse: ...

def add_AuthServiceServicer_to_server(servicer: AuthServiceServicer, server: Server) -> None: ...
