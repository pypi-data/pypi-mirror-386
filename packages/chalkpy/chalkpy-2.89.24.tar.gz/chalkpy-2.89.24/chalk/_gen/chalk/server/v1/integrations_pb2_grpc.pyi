"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

from abc import (
    ABCMeta,
    abstractmethod,
)
from chalk._gen.chalk.server.v1.integrations_pb2 import (
    DeleteIntegrationRequest,
    DeleteIntegrationResponse,
    GetIntegrationRequest,
    GetIntegrationResponse,
    GetIntegrationValueRequest,
    GetIntegrationValueResponse,
    InsertIntegrationRequest,
    InsertIntegrationResponse,
    ListIntegrationsAndSecretsRequest,
    ListIntegrationsAndSecretsResponse,
    ListIntegrationsRequest,
    ListIntegrationsResponse,
    TestIntegrationRequest,
    TestIntegrationResponse,
    UpdateIntegrationRequest,
    UpdateIntegrationResponse,
)
from grpc import (
    Channel,
    Server,
    ServicerContext,
    UnaryUnaryMultiCallable,
)

class IntegrationsServiceStub:
    def __init__(self, channel: Channel) -> None: ...
    ListIntegrations: UnaryUnaryMultiCallable[
        ListIntegrationsRequest,
        ListIntegrationsResponse,
    ]
    ListIntegrationsAndSecrets: UnaryUnaryMultiCallable[
        ListIntegrationsAndSecretsRequest,
        ListIntegrationsAndSecretsResponse,
    ]
    GetIntegrationValue: UnaryUnaryMultiCallable[
        GetIntegrationValueRequest,
        GetIntegrationValueResponse,
    ]
    GetIntegration: UnaryUnaryMultiCallable[
        GetIntegrationRequest,
        GetIntegrationResponse,
    ]
    InsertIntegration: UnaryUnaryMultiCallable[
        InsertIntegrationRequest,
        InsertIntegrationResponse,
    ]
    UpdateIntegration: UnaryUnaryMultiCallable[
        UpdateIntegrationRequest,
        UpdateIntegrationResponse,
    ]
    DeleteIntegration: UnaryUnaryMultiCallable[
        DeleteIntegrationRequest,
        DeleteIntegrationResponse,
    ]
    TestIntegration: UnaryUnaryMultiCallable[
        TestIntegrationRequest,
        TestIntegrationResponse,
    ]

class IntegrationsServiceServicer(metaclass=ABCMeta):
    @abstractmethod
    def ListIntegrations(
        self,
        request: ListIntegrationsRequest,
        context: ServicerContext,
    ) -> ListIntegrationsResponse: ...
    @abstractmethod
    def ListIntegrationsAndSecrets(
        self,
        request: ListIntegrationsAndSecretsRequest,
        context: ServicerContext,
    ) -> ListIntegrationsAndSecretsResponse: ...
    @abstractmethod
    def GetIntegrationValue(
        self,
        request: GetIntegrationValueRequest,
        context: ServicerContext,
    ) -> GetIntegrationValueResponse: ...
    @abstractmethod
    def GetIntegration(
        self,
        request: GetIntegrationRequest,
        context: ServicerContext,
    ) -> GetIntegrationResponse: ...
    @abstractmethod
    def InsertIntegration(
        self,
        request: InsertIntegrationRequest,
        context: ServicerContext,
    ) -> InsertIntegrationResponse: ...
    @abstractmethod
    def UpdateIntegration(
        self,
        request: UpdateIntegrationRequest,
        context: ServicerContext,
    ) -> UpdateIntegrationResponse: ...
    @abstractmethod
    def DeleteIntegration(
        self,
        request: DeleteIntegrationRequest,
        context: ServicerContext,
    ) -> DeleteIntegrationResponse: ...
    @abstractmethod
    def TestIntegration(
        self,
        request: TestIntegrationRequest,
        context: ServicerContext,
    ) -> TestIntegrationResponse: ...

def add_IntegrationsServiceServicer_to_server(servicer: IntegrationsServiceServicer, server: Server) -> None: ...
