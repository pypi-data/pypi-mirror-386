# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc

from chalk._gen.chalk.server.v1 import trace_pb2 as chalk_dot_server_dot_v1_dot_trace__pb2


class TraceServiceStub(object):
    """TraceService provides methods for retrieving trace data"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTrace = channel.unary_unary(
            "/chalk.server.v1.TraceService/GetTrace",
            request_serializer=chalk_dot_server_dot_v1_dot_trace__pb2.GetTraceRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_trace__pb2.GetTraceResponse.FromString,
        )
        self.ListTrace = channel.unary_unary(
            "/chalk.server.v1.TraceService/ListTrace",
            request_serializer=chalk_dot_server_dot_v1_dot_trace__pb2.ListTraceRequest.SerializeToString,
            response_deserializer=chalk_dot_server_dot_v1_dot_trace__pb2.ListTraceResponse.FromString,
        )


class TraceServiceServicer(object):
    """TraceService provides methods for retrieving trace data"""

    def GetTrace(self, request, context):
        """GetTrace retrieves a trace, optionally by operation ID"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListTrace(self, request, context):
        """ListTrace retrieves a list of traces with optional filtering"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TraceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetTrace": grpc.unary_unary_rpc_method_handler(
            servicer.GetTrace,
            request_deserializer=chalk_dot_server_dot_v1_dot_trace__pb2.GetTraceRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_trace__pb2.GetTraceResponse.SerializeToString,
        ),
        "ListTrace": grpc.unary_unary_rpc_method_handler(
            servicer.ListTrace,
            request_deserializer=chalk_dot_server_dot_v1_dot_trace__pb2.ListTraceRequest.FromString,
            response_serializer=chalk_dot_server_dot_v1_dot_trace__pb2.ListTraceResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("chalk.server.v1.TraceService", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class TraceService(object):
    """TraceService provides methods for retrieving trace data"""

    @staticmethod
    def GetTrace(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.TraceService/GetTrace",
            chalk_dot_server_dot_v1_dot_trace__pb2.GetTraceRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_trace__pb2.GetTraceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListTrace(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/chalk.server.v1.TraceService/ListTrace",
            chalk_dot_server_dot_v1_dot_trace__pb2.ListTraceRequest.SerializeToString,
            chalk_dot_server_dot_v1_dot_trace__pb2.ListTraceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
