# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/discovery/v3/ads.proto, envoy/service/discovery/v3/discovery.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AdsDummy",
    "AggregatedDiscoveryServiceAsyncStub",
    "AggregatedDiscoveryServiceBase",
    "AggregatedDiscoveryServiceSyncStub",
    "DeltaDiscoveryRequest",
    "DeltaDiscoveryResponse",
    "DiscoveryRequest",
    "DiscoveryResponse",
    "DynamicParameterConstraints",
    "DynamicParameterConstraintsConstraintList",
    "DynamicParameterConstraintsSingleConstraint",
    "DynamicParameterConstraintsSingleConstraintExists",
    "Resource",
    "ResourceCacheControl",
    "ResourceError",
    "ResourceLocator",
    "ResourceName",
)

import datetime
import typing
from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
import pydantic
from betterproto2 import grpclib as betterproto2_grpclib
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AdsDummy(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
    services: https://github.com/google/protobuf/issues/4221
    """

    pass


default_message_pool.register_message(
    "envoy.service.discovery.v3", "AdsDummy", AdsDummy
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DeltaDiscoveryRequest(betterproto2.Message):
    """
    DeltaDiscoveryRequest and DeltaDiscoveryResponse are used in a new gRPC
    endpoint for Delta xDS.

    With Delta xDS, the DeltaDiscoveryResponses do not need to include a full
    snapshot of the tracked resources. Instead, DeltaDiscoveryResponses are a
    diff to the state of a xDS client.
    In Delta XDS there are per-resource versions, which allow tracking state at
    the resource granularity.
    An xDS Delta session is always in the context of a gRPC bidirectional
    stream. This allows the xDS server to keep track of the state of xDS clients
    connected to it.

    In Delta xDS the nonce field is required and used to pair
    ``DeltaDiscoveryResponse`` to a ``DeltaDiscoveryRequest`` ACK or NACK.
    Optionally, a response message level ``system_version_info`` is present for
    debugging purposes only.

    ``DeltaDiscoveryRequest`` plays two independent roles. Any ``DeltaDiscoveryRequest``
    can be either or both of:

    * Informing the server of what resources the client has gained/lost interest in
      (using ``resource_names_subscribe`` and ``resource_names_unsubscribe``), or
    * (N)ACKing an earlier resource update from the server (using ``response_nonce``,
      with presence of ``error_detail`` making it a NACK).

    Additionally, the first message (for a given ``type_url``) of a reconnected gRPC stream
    has a third role: informing the server of the resources (and their versions)
    that the client already possesses, using the ``initial_resource_versions`` field.

    As with state-of-the-world, when multiple resource types are multiplexed (ADS),
    all requests/acknowledgments/updates are logically walled off by ``type_url``:
    a Cluster ACK exists in a completely separate world from a prior Route NACK.
    In particular, ``initial_resource_versions`` being sent at the "start" of every
    gRPC stream actually entails a message for each ``type_url``, each with its own
    ``initial_resource_versions``.
    [#next-free-field: 10]
    """

    node: "___config__core__v3__.Node | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The node making the request.
    """

    type_url: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Type of the resource that is being requested, e.g.
    ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This does not need to be set if
    resources are only referenced via ``xds_resource_subscribe`` and
    ``xds_resources_unsubscribe``.
    """

    resource_names_subscribe: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    DeltaDiscoveryRequests allow the client to add or remove individual
    resources to the set of tracked resources in the context of a stream.
    All resource names in the ``resource_names_subscribe`` list are added to the
    set of tracked resources and all resource names in the ``resource_names_unsubscribe``
    list are removed from the set of tracked resources.

    *Unlike* state-of-the-world xDS, an empty ``resource_names_subscribe`` or
    ``resource_names_unsubscribe`` list simply means that no resources are to be
    added or removed to the resource list.
    *Like* state-of-the-world xDS, the server must send updates for all tracked
    resources, but can also send updates for resources the client has not subscribed to.

    .. note::
      The server must respond with all resources listed in ``resource_names_subscribe``,
      even if it believes the client has the most recent version of them. The reason:
      the client may have dropped them, but then regained interest before it had a chance
      to send the unsubscribe message. See DeltaSubscriptionStateTest.RemoveThenAdd.

    These two fields can be set in any ``DeltaDiscoveryRequest``, including ACKs
    and ``initial_resource_versions``.

    A list of Resource names to add to the list of tracked resources.
    """

    resource_names_unsubscribe: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )
    """
    A list of Resource names to remove from the list of tracked resources.
    """

    resource_locators_subscribe: "list[ResourceLocator]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    [#not-implemented-hide:]
    Alternative to ``resource_names_subscribe`` field that allows specifying dynamic parameters
    along with each resource name.

    .. note::
      It is legal for a request to have some resources listed
      in ``resource_names_subscribe`` and others in ``resource_locators_subscribe``.
    """

    resource_locators_unsubscribe: "list[ResourceLocator]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    [#not-implemented-hide:]
    Alternative to ``resource_names_unsubscribe`` field that allows specifying dynamic parameters
    along with each resource name.

    .. note::
      It is legal for a request to have some resources listed
      in ``resource_names_unsubscribe`` and others in ``resource_locators_unsubscribe``.
    """

    initial_resource_versions: "dict[str, str]" = betterproto2.field(
        5,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    Informs the server of the versions of the resources the xDS client knows of, to enable the
    client to continue the same logical xDS session even in the face of gRPC stream reconnection.
    It will not be populated:

    * In the very first stream of a session, since the client will not yet have any resources.
    * In any message after the first in a stream (for a given ``type_url``), since the server will
      already be correctly tracking the client's state.

    (In ADS, the first message ``of each type_url`` of a reconnected stream populates this map.)
    The map's keys are names of xDS resources known to the xDS client.
    The map's values are opaque resource versions.
    """

    response_nonce: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    When the ``DeltaDiscoveryRequest`` is a ACK or NACK message in response
    to a previous ``DeltaDiscoveryResponse``, the ``response_nonce`` must be the
    nonce in the ``DeltaDiscoveryResponse``.
    Otherwise (unlike in ``DiscoveryRequest``) ``response_nonce`` must be omitted.
    """

    error_detail: "____google__rpc__.Status | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This is populated when the previous :ref:`DiscoveryResponse <envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse>`
    failed to update configuration. The ``message`` field in ``error_details``
    provides the Envoy internal exception related to the failure.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "DeltaDiscoveryRequest", DeltaDiscoveryRequest
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DeltaDiscoveryResponse(betterproto2.Message):
    """
    [#next-free-field: 10]
    """

    system_version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The version of the response data (used for debugging).
    """

    resources: "list[Resource]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The response resources. These are typed resources, whose types must match
    the ``type_url`` field.
    """

    type_url: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    field id 3 IS available!

    Type URL for resources. Identifies the xDS API when muxing over ADS.
    Must be consistent with the ``type_url`` in the Any within 'resources' if 'resources' is non-empty.
    """

    removed_resources: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        6, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Resource names of resources that have been deleted and to be removed from the xDS Client.
    Removed resources for missing resources can be ignored.
    """

    removed_resource_names: "list[ResourceName]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Alternative to ``removed_resources`` that allows specifying which variant of
    a resource is being removed. This variant must be used for any resource
    for which dynamic parameter constraints were sent to the client.
    """

    nonce: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    The nonce provides a way for ``DeltaDiscoveryRequests`` to uniquely
    reference a ``DeltaDiscoveryResponse`` when (N)ACKing. The nonce is required.
    """

    control_plane: "___config__core__v3__.ControlPlane | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    [#not-implemented-hide:]
    The control plane instance that sent the response.
    """

    resource_errors: "list[ResourceError]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    [#not-implemented-hide:]
    Errors associated with specific resources.

    .. note::
      A resource in this field with a status of NOT_FOUND should be treated the same as
      a resource listed in the ``removed_resources`` or ``removed_resource_names`` fields.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "DeltaDiscoveryResponse", DeltaDiscoveryResponse
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DiscoveryRequest(betterproto2.Message):
    """
    A DiscoveryRequest requests a set of versioned resources of the same type for
    a given Envoy node on some API.
    [#next-free-field: 8]
    """

    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The ``version_info`` provided in the request messages will be the ``version_info``
    received with the most recent successfully processed response or empty on
    the first request. It is expected that no new request is sent after a
    response is received until the Envoy instance is ready to ACK/NACK the new
    configuration. ACK/NACK takes place by returning the new API config version
    as applied or the previous API config version respectively. Each ``type_url``
    (see below) has an independent version associated with it.
    """

    node: "___config__core__v3__.Node | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The node making the request.
    """

    resource_names: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    List of resources to subscribe to, e.g. list of cluster names or a route
    configuration name. If this is empty, all resources for the API are
    returned. LDS/CDS may have empty ``resource_names``, which will cause all
    resources for the Envoy instance to be returned. The LDS and CDS responses
    will then imply a number of resources that need to be fetched via EDS/RDS,
    which will be explicitly enumerated in ``resource_names``.
    """

    resource_locators: "list[ResourceLocator]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    [#not-implemented-hide:]
    Alternative to ``resource_names`` field that allows specifying dynamic
    parameters along with each resource name. Clients that populate this
    field must be able to handle responses from the server where resources
    are wrapped in a Resource message.

    .. note::
      It is legal for a request to have some resources listed
      in ``resource_names`` and others in ``resource_locators``.
    """

    type_url: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    Type of the resource that is being requested, e.g.
    ``type.googleapis.com/envoy.api.v2.ClusterLoadAssignment``. This is implicit
    in requests made via singleton xDS APIs such as CDS, LDS, etc. but is
    required for ADS.
    """

    response_nonce: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    nonce corresponding to ``DiscoveryResponse`` being ACK/NACKed. See above
    discussion on ``version_info`` and the ``DiscoveryResponse`` nonce comment. This
    may be empty only if:

    * This is a non-persistent-stream xDS such as HTTP, or
    * The client has not yet accepted an update in this xDS stream (unlike
      delta, where it is populated only for new explicit ACKs).
    """

    error_detail: "____google__rpc__.Status | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This is populated when the previous :ref:`DiscoveryResponse <envoy_v3_api_msg_service.discovery.v3.DiscoveryResponse>`
    failed to update configuration. The ``message`` field in ``error_details`` provides the Envoy
    internal exception related to the failure. It is only intended for consumption during manual
    debugging, the string provided is not guaranteed to be stable across Envoy versions.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "DiscoveryRequest", DiscoveryRequest
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DiscoveryResponse(betterproto2.Message):
    """
    [#next-free-field: 8]
    """

    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The version of the response data.
    """

    resources: "list[____google__protobuf__.Any]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The response resources. These resources are typed and depend on the API being called.
    """

    canary: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    [#not-implemented-hide:]
    Canary is used to support two Envoy command line flags:

    * ``--terminate-on-canary-transition-failure``. When set, Envoy is able to
      terminate if it detects that configuration is stuck at canary. Consider
      this example sequence of updates:

      * Management server applies a canary config successfully.
      * Management server rolls back to a production config.
      * Envoy rejects the new production config.

      Since there is no sensible way to continue receiving configuration
      updates, Envoy will then terminate and apply production config from a
      clean slate.

    * ``--dry-run-canary``. When set, a canary response will never be applied, only
      validated via a dry run.
    """

    type_url: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    Type URL for resources. Identifies the xDS API when muxing over ADS.
    Must be consistent with the ``type_url`` in the 'resources' repeated Any (if non-empty).
    """

    nonce: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    For gRPC based subscriptions, the nonce provides a way to explicitly ack a
    specific ``DiscoveryResponse`` in a following ``DiscoveryRequest``. Additional
    messages may have been sent by Envoy to the management server for the
    previous version on the stream prior to this ``DiscoveryResponse``, that were
    unprocessed at response send time. The nonce allows the management server
    to ignore any further ``DiscoveryRequests`` for the previous version until a
    ``DiscoveryRequest`` bearing the nonce. The nonce is optional and is not
    required for non-stream based xDS implementations.
    """

    control_plane: "___config__core__v3__.ControlPlane | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The control plane instance that sent the response.
    """

    resource_errors: "list[ResourceError]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    [#not-implemented-hide:]
    Errors associated with specific resources. Clients are expected to
    remember the most recent error for a given resource across responses;
    the error condition is not considered to be cleared until a response is
    received that contains the resource in the 'resources' field.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "DiscoveryResponse", DiscoveryResponse
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DynamicParameterConstraints(betterproto2.Message):
    """
    A set of dynamic parameter constraints associated with a variant of an individual xDS resource.
    These constraints determine whether the resource matches a subscription based on the set of
    dynamic parameters in the subscription, as specified in the
    :ref:`ResourceLocator.dynamic_parameters <envoy_v3_api_field_service.discovery.v3.ResourceLocator.dynamic_parameters>`
    field. This allows xDS implementations (clients, servers, and caching proxies) to determine
    which variant of a resource is appropriate for a given client.

    Oneofs:
        - type:
    """

    constraint: "DynamicParameterConstraintsSingleConstraint | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True, group="type")
    )
    """
    A single constraint to evaluate.
    """

    or_constraints: "DynamicParameterConstraintsConstraintList | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="type")
    )
    """
    A list of constraints that match if any one constraint in the list
    matches.
    """

    and_constraints: "DynamicParameterConstraintsConstraintList | None" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True, group="type")
    )
    """
    A list of constraints that must all match.
    """

    not_constraints: "DynamicParameterConstraints | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )
    """
    The inverse (NOT) of a set of constraints.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.service.discovery.v3",
    "DynamicParameterConstraints",
    DynamicParameterConstraints,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DynamicParameterConstraintsConstraintList(betterproto2.Message):
    constraints: "list[DynamicParameterConstraints]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "envoy.service.discovery.v3",
    "DynamicParameterConstraints.ConstraintList",
    DynamicParameterConstraintsConstraintList,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DynamicParameterConstraintsSingleConstraint(betterproto2.Message):
    """
    A single constraint for a given key.

    Oneofs:
        - constraint_type:
    """

    key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The key to match against.
    """

    value: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="constraint_type"
    )
    """
    Matches this exact value.
    """

    exists: "DynamicParameterConstraintsSingleConstraintExists | None" = (
        betterproto2.field(
            3, betterproto2.TYPE_MESSAGE, optional=True, group="constraint_type"
        )
    )
    """
    Key is present (matches any value except for the key being absent).
    This allows setting a default constraint for clients that do
    not send a key at all, while there may be other clients that need
    special configuration based on that key.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.service.discovery.v3",
    "DynamicParameterConstraints.SingleConstraint",
    DynamicParameterConstraintsSingleConstraint,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DynamicParameterConstraintsSingleConstraintExists(betterproto2.Message):
    pass


default_message_pool.register_message(
    "envoy.service.discovery.v3",
    "DynamicParameterConstraints.SingleConstraint.Exists",
    DynamicParameterConstraintsSingleConstraintExists,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Resource(betterproto2.Message):
    """
    [#next-free-field: 10]
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    The resource's name, to distinguish it from others of the same type of resource.
    Only one of ``name`` or ``resource_name`` may be set.
    """

    resource_name: "ResourceName | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Alternative to the ``name`` field, to be used when the server supports
    multiple variants of the named resource that are differentiated by
    dynamic parameter constraints.
    Only one of ``name`` or ``resource_name`` may be set.
    """

    aliases: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )
    """
    The aliases are a list of other names that this resource can go by.
    """

    version: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The resource level version. It allows xDS to track the state of individual
    resources.
    """

    resource: "____google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The resource being tracked.
    """

    ttl: "datetime.timedelta | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Time-to-live value for the resource. For each resource, a timer is started. The timer is
    reset each time the resource is received with a new TTL. If the resource is received with
    no TTL set, the timer is removed for the resource. Upon expiration of the timer, the
    configuration for the resource will be removed.

    The TTL can be refreshed or changed by sending a response that doesn't change the resource
    version. In this case the ``resource`` field does not need to be populated, which allows for
    light-weight "heartbeat" updates to keep a resource with a TTL alive.

    The TTL feature is meant to support configurations that should be removed in the event of
    a management server failure. For example, the feature may be used for fault injection
    testing where the fault injection should be terminated in the event that Envoy loses contact
    with the management server.
    """

    cache_control: "ResourceCacheControl | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Cache control properties for the resource.
    [#not-implemented-hide:]
    """

    metadata: "___config__core__v3__.Metadata | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The Metadata field can be used to provide additional information for the resource.
    E.g. the trace data for debugging.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "Resource", Resource
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ResourceCacheControl(betterproto2.Message):
    """
    Cache control properties for the resource.
    [#not-implemented-hide:]
    """

    do_not_cache: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    If true, xDS proxies may not cache this resource.

    .. note::
      This does not apply to clients other than xDS proxies, which must cache resources
      for their own use, regardless of the value of this field.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "Resource.CacheControl", ResourceCacheControl
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ResourceError(betterproto2.Message):
    """
    [#not-implemented-hide:]
    An error associated with a specific resource name, returned to the
    client by the server.
    """

    resource_name: "ResourceName | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The name of the resource.
    """

    error_detail: "____google__rpc__.Status | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The error reported for the resource.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "ResourceError", ResourceError
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ResourceLocator(betterproto2.Message):
    """
    [#protodoc-title: Common discovery API components]

    Specifies a resource to be subscribed to.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The resource name to subscribe to.
    """

    dynamic_parameters: "dict[str, str]" = betterproto2.field(
        2,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    A set of dynamic parameters used to match against the dynamic parameter
    constraints on the resource. This allows clients to select between
    multiple variants of the same resource.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "ResourceLocator", ResourceLocator
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ResourceName(betterproto2.Message):
    """
    Specifies a concrete resource name.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name of the resource.
    """

    dynamic_parameter_constraints: "DynamicParameterConstraints | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Dynamic parameter constraints associated with this resource. To be used by client-side caches
    (including xDS proxies) when matching subscribed resource locators.
    """


default_message_pool.register_message(
    "envoy.service.discovery.v3", "ResourceName", ResourceName
)


class AggregatedDiscoveryServiceSyncStub:
    """
    [#protodoc-title: Aggregated Discovery Service (ADS)]

    Discovery services for endpoints, clusters, routes,
    and listeners are retained in the package `envoy.api.v2` for backwards
    compatibility with existing management servers. New development in discovery
    services should proceed in the package `envoy.service.discovery.v2`.

    See https://github.com/envoyproxy/envoy-api#apis for a description of the role of
    ADS and how it is intended to be used by a management server. ADS requests
    have the same structure as their singleton xDS counterparts, but can
    multiplex many resource types on a single stream. The type_url in the
    DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
    the multiplexed singleton APIs at the Envoy instance and management server.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_aggregated_resources(
        self, messages: "Iterable[DiscoveryRequest]"
    ) -> "Iterator[DiscoveryResponse]":
        """
        This is a gRPC-only API.
        """

        yield from self._channel.stream_stream(
            "/envoy.service.discovery.v3.AggregatedDiscoveryService/StreamAggregatedResources",
            DiscoveryRequest.SerializeToString,
            DiscoveryResponse.FromString,
        )(iter(messages))

    def delta_aggregated_resources(
        self, messages: "Iterable[DeltaDiscoveryRequest]"
    ) -> "Iterator[DeltaDiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.discovery.v3.AggregatedDiscoveryService/DeltaAggregatedResources",
            DeltaDiscoveryRequest.SerializeToString,
            DeltaDiscoveryResponse.FromString,
        )(iter(messages))


class AggregatedDiscoveryServiceAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: Aggregated Discovery Service (ADS)]

    Discovery services for endpoints, clusters, routes,
    and listeners are retained in the package `envoy.api.v2` for backwards
    compatibility with existing management servers. New development in discovery
    services should proceed in the package `envoy.service.discovery.v2`.

    See https://github.com/envoyproxy/envoy-api#apis for a description of the role of
    ADS and how it is intended to be used by a management server. ADS requests
    have the same structure as their singleton xDS counterparts, but can
    multiplex many resource types on a single stream. The type_url in the
    DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
    the multiplexed singleton APIs at the Envoy instance and management server.
    """

    async def stream_aggregated_resources(
        self,
        messages: "AsyncIterable[DiscoveryRequest] | Iterable[DiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[DiscoveryResponse]":
        """
        This is a gRPC-only API.
        """

        async for response in self._stream_stream(
            "/envoy.service.discovery.v3.AggregatedDiscoveryService/StreamAggregatedResources",
            messages,
            DiscoveryRequest,
            DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def delta_aggregated_resources(
        self,
        messages: "AsyncIterable[DeltaDiscoveryRequest] | Iterable[DeltaDiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[DeltaDiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.discovery.v3.AggregatedDiscoveryService/DeltaAggregatedResources",
            messages,
            DeltaDiscoveryRequest,
            DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


from .....google import protobuf as ____google__protobuf__
from .....google import rpc as ____google__rpc__
from ....config.core import v3 as ___config__core__v3__


class AggregatedDiscoveryServiceBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: Aggregated Discovery Service (ADS)]

    Discovery services for endpoints, clusters, routes,
    and listeners are retained in the package `envoy.api.v2` for backwards
    compatibility with existing management servers. New development in discovery
    services should proceed in the package `envoy.service.discovery.v2`.

    See https://github.com/envoyproxy/envoy-api#apis for a description of the role of
    ADS and how it is intended to be used by a management server. ADS requests
    have the same structure as their singleton xDS counterparts, but can
    multiplex many resource types on a single stream. The type_url in the
    DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
    the multiplexed singleton APIs at the Envoy instance and management server.
    """

    async def stream_aggregated_resources(
        self, messages: "AsyncIterator[DiscoveryRequest]"
    ) -> "AsyncIterator[DiscoveryResponse]":
        """
        This is a gRPC-only API.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield DiscoveryResponse()

    async def delta_aggregated_resources(
        self, messages: "AsyncIterator[DeltaDiscoveryRequest]"
    ) -> "AsyncIterator[DeltaDiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield DeltaDiscoveryResponse()

    async def __rpc_stream_aggregated_resources(
        self, stream: "grpclib.server.Stream[DiscoveryRequest, DiscoveryResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.stream_aggregated_resources,
            stream,
            request,
        )

    async def __rpc_delta_aggregated_resources(
        self,
        stream: "grpclib.server.Stream[DeltaDiscoveryRequest, DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_aggregated_resources,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.discovery.v3.AggregatedDiscoveryService/StreamAggregatedResources": grpclib.const.Handler(
                self.__rpc_stream_aggregated_resources,
                grpclib.const.Cardinality.STREAM_STREAM,
                DiscoveryRequest,
                DiscoveryResponse,
            ),
            "/envoy.service.discovery.v3.AggregatedDiscoveryService/DeltaAggregatedResources": grpclib.const.Handler(
                self.__rpc_delta_aggregated_resources,
                grpclib.const.Cardinality.STREAM_STREAM,
                DeltaDiscoveryRequest,
                DeltaDiscoveryResponse,
            ),
        }
