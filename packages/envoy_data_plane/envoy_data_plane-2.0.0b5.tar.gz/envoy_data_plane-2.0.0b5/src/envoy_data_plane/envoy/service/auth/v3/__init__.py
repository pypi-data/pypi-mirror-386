# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/auth/v3/attribute_context.proto, envoy/service/auth/v3/external_auth.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AttributeContext",
    "AttributeContextHttpRequest",
    "AttributeContextPeer",
    "AttributeContextRequest",
    "AttributeContextTlsSession",
    "AuthorizationAsyncStub",
    "AuthorizationBase",
    "AuthorizationSyncStub",
    "CheckRequest",
    "CheckResponse",
    "DeniedHttpResponse",
    "OkHttpResponse",
)

import datetime
import typing
import warnings
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
import pydantic
from betterproto2 import grpclib as betterproto2_grpclib
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AttributeContext(betterproto2.Message):
    """
    [#protodoc-title: Attribute context]

    See :ref:`network filter configuration overview <config_network_filters_ext_authz>`
    and :ref:`HTTP filter configuration overview <config_http_filters_ext_authz>`.

    An attribute is a piece of metadata that describes an activity on a network.
    For example, the size of an HTTP request, or the status code of an HTTP response.

    Each attribute has a type and a name, which is logically defined as a proto message field
    of the ``AttributeContext``. The ``AttributeContext`` is a collection of individual attributes
    supported by Envoy authorization system.
    [#comment: The following items are left out of this proto
    Request.Auth field for JWTs
    Request.Api for api management
    Origin peer that originated the request
    Caching Protocol
    request_context return values to inject back into the filter chain
    peer.claims -- from X.509 extensions
    Configuration
    - field mask to send
    - which return values from request_context are copied back
    - which return values are copied into request_headers]
    [#next-free-field: 14]
    """

    source: "AttributeContextPeer | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The source of a network activity, such as starting a TCP connection.
    In a multi hop network activity, the source represents the sender of the
    last hop.
    """

    destination: "AttributeContextPeer | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The destination of a network activity, such as accepting a TCP connection.
    In a multi hop network activity, the destination represents the receiver of
    the last hop.
    """

    request: "AttributeContextRequest | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Represents a network request, such as an HTTP request.
    """

    context_extensions: "dict[str, str]" = betterproto2.field(
        10,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    This is analogous to http_request.headers, however these contents will not be sent to the
    upstream server. Context_extensions provide an extension mechanism for sending additional
    information to the auth server without modifying the proto definition. It maps to the
    internal opaque context in the filter chain.
    """

    metadata_context: "___config__core__v3__.Metadata | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Dynamic metadata associated with the request.
    """

    route_metadata_context: "___config__core__v3__.Metadata | None" = (
        betterproto2.field(13, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Metadata associated with the selected route.
    """

    tls_session: "AttributeContextTlsSession | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    TLS session details of the underlying connection.
    This is not populated by default and will be populated only if the ext_authz filter has
    been specifically configured to include this information.
    For HTTP ext_authz, that requires :ref:`include_tls_session <config_http_filters_ext_authz>`
    to be set to true.
    For network ext_authz, that requires :ref:`include_tls_session <config_network_filters_ext_authz>`
    to be set to true.
    """


default_message_pool.register_message(
    "envoy.service.auth.v3", "AttributeContext", AttributeContext
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AttributeContextHttpRequest(betterproto2.Message):
    """
    This message defines attributes for an HTTP request.
    HTTP/1.x, HTTP/2, gRPC are all considered as HTTP requests.
    [#next-free-field: 14]
    """

    id: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The unique ID for a request, which can be propagated to downstream
    systems. The ID should have low probability of collision
    within a single day for a specific service.
    For HTTP requests, it should be X-Request-ID or equivalent.
    """

    method: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The HTTP request method, such as ``GET``, ``POST``.
    """

    headers: "dict[str, str]" = betterproto2.field(
        3,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    The HTTP request headers. If multiple headers share the same key, they
    must be merged according to the HTTP spec. All header keys must be
    lower-cased, because HTTP header keys are case-insensitive.
    Header value is encoded as UTF-8 string. Non-UTF-8 characters will be replaced by "!".
    This field will not be set if
    :ref:`encode_raw_headers <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
    is set to true.
    """

    header_map: "___config__core__v3__.HeaderMap | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A list of the raw HTTP request headers. This is used instead of
    :ref:`headers <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.headers>` when
    :ref:`encode_raw_headers <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
    is set to true.

    Note that this is not actually a map type. ``header_map`` contains a single repeated field
    ``headers``.

    Here, only the ``key`` and ``raw_value`` fields will be populated for each HeaderValue, and
    that is only when
    :ref:`encode_raw_headers <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.encode_raw_headers>`
    is set to true.

    Also, unlike the
    :ref:`headers <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.headers>`
    field, headers with the same key are not combined into a single comma separated header.
    """

    path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    The request target, as it appears in the first line of the HTTP request. This includes
    the URL path and query-string. No decoding is performed.
    """

    host: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    The HTTP request ``Host`` or ``:authority`` header value.
    """

    scheme: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    The HTTP URL scheme, such as ``http`` and ``https``.
    """

    query: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        7, betterproto2.TYPE_STRING
    )
    """
    This field is always empty, and exists for compatibility reasons. The HTTP URL query is
    included in ``path`` field.
    """

    fragment: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        8, betterproto2.TYPE_STRING
    )
    """
    This field is always empty, and exists for compatibility reasons. The URL fragment is
    not submitted as part of HTTP requests; it is unknowable.
    """

    size: "typing.Annotated[int, pydantic.Field(ge=-2**63, le=2**63 - 1)]" = (
        betterproto2.field(9, betterproto2.TYPE_INT64)
    )
    """
    The HTTP request size in bytes. If unknown, it must be -1.
    """

    protocol: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )
    """
    The network protocol used with the request, such as "HTTP/1.0", "HTTP/1.1", or "HTTP/2".

    See :repo:`headers.h:ProtocolStrings <source/common/http/headers.h>` for a list of all
    possible values.
    """

    body: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )
    """
    The HTTP request body.
    """

    raw_body: "bytes" = betterproto2.field(12, betterproto2.TYPE_BYTES)
    """
    The HTTP request body in bytes. This is used instead of
    :ref:`body <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.body>` when
    :ref:`pack_as_bytes <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.BufferSettings.pack_as_bytes>`
    is set to true.
    """


default_message_pool.register_message(
    "envoy.service.auth.v3", "AttributeContext.HttpRequest", AttributeContextHttpRequest
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AttributeContextPeer(betterproto2.Message):
    """
    This message defines attributes for a node that handles a network request.
    The node can be either a service or an application that sends, forwards,
    or receives the request. Service peers should fill in the ``service``,
    ``principal``, and ``labels`` as appropriate.
    [#next-free-field: 6]
    """

    address: "___config__core__v3__.Address | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The address of the peer, this is typically the IP address.
    It can also be UDS path, or others.
    """

    service: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The canonical service name of the peer.
    It should be set to :ref:`the HTTP x-envoy-downstream-service-cluster
    <config_http_conn_man_headers_downstream-service-cluster>`
    If a more trusted source of the service name is available through mTLS/secure naming, it
    should be used.
    """

    labels: "dict[str, str]" = betterproto2.field(
        3,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    The labels associated with the peer.
    These could be pod labels for Kubernetes or tags for VMs.
    The source of the labels could be an X.509 certificate or other configuration.
    """

    principal: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    The authenticated identity of this peer.
    For example, the identity associated with the workload such as a service account.
    If an X.509 certificate is used to assert the identity this field should be sourced from
    ``URI Subject Alternative Names``, ``DNS Subject Alternate Names`` or ``Subject`` in that order.
    The primary identity should be the principal. The principal format is issuer specific.

    Examples:

    - SPIFFE format is ``spiffe://trust-domain/path``.
    - Google account format is ``https://accounts.google.com/{userid}``.
    """

    certificate: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    The X.509 certificate used to authenticate the identify of this peer.
    When present, the certificate contents are encoded in URL and PEM format.
    """


default_message_pool.register_message(
    "envoy.service.auth.v3", "AttributeContext.Peer", AttributeContextPeer
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AttributeContextRequest(betterproto2.Message):
    """
    Represents a network request, such as an HTTP request.
    """

    time: "datetime.datetime | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the proxy receives the first byte of the request.
    """

    http: "AttributeContextHttpRequest | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Represents an HTTP request or an HTTP-like request.
    """


default_message_pool.register_message(
    "envoy.service.auth.v3", "AttributeContext.Request", AttributeContextRequest
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AttributeContextTlsSession(betterproto2.Message):
    """
    This message defines attributes for the underlying TLS session.
    """

    sni: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    SNI used for TLS session.
    """


default_message_pool.register_message(
    "envoy.service.auth.v3", "AttributeContext.TLSSession", AttributeContextTlsSession
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CheckRequest(betterproto2.Message):
    attributes: "AttributeContext | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The request attributes.
    """


default_message_pool.register_message(
    "envoy.service.auth.v3", "CheckRequest", CheckRequest
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CheckResponse(betterproto2.Message):
    """
    Intended for gRPC and Network Authorization servers ``only``.

    Oneofs:
        - http_response: An message that contains HTTP response attributes. This message is
            used when the authorization service needs to send custom responses to the
            downstream client or, to modify/add request headers being dispatched to the upstream.
    """

    status: "____google__rpc__.Status | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Status ``OK`` allows the request. Any other status indicates the request should be denied, and
    for HTTP filter, if not overridden by :ref:`denied HTTP response status <envoy_v3_api_field_service.auth.v3.DeniedHttpResponse.status>`
    Envoy sends ``403 Forbidden`` HTTP status code by default.
    """

    denied_response: "DeniedHttpResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="http_response"
    )
    """
    Supplies http attributes for a denied response.
    """

    ok_response: "OkHttpResponse | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="http_response"
    )
    """
    Supplies http attributes for an ok response.
    """

    dynamic_metadata: "____google__protobuf__.Struct | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional response metadata that will be emitted as dynamic metadata to be consumed by the next
    filter. This metadata lives in a namespace specified by the canonical name of extension filter
    that requires it:

    - :ref:`envoy.filters.http.ext_authz <config_http_filters_ext_authz_dynamic_metadata>` for HTTP filter.
    - :ref:`envoy.filters.network.ext_authz <config_network_filters_ext_authz_dynamic_metadata>` for network filter.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.service.auth.v3", "CheckResponse", CheckResponse
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DeniedHttpResponse(betterproto2.Message):
    """
    HTTP attributes for a denied response.
    """

    status: "___type__v3__.HttpStatus | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This field allows the authorization service to send an HTTP response status code to the
    downstream client. If not set, Envoy sends ``403 Forbidden`` HTTP status code by default.
    """

    headers: "list[___config__core__v3__.HeaderValueOption]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    This field allows the authorization service to send HTTP response headers
    to the downstream client. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
    false when used in this message.
    """

    body: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    This field allows the authorization service to send a response body data
    to the downstream client.
    """


default_message_pool.register_message(
    "envoy.service.auth.v3", "DeniedHttpResponse", DeniedHttpResponse
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class OkHttpResponse(betterproto2.Message):
    """
    HTTP attributes for an OK response.
    [#next-free-field: 9]
    """

    headers: "list[___config__core__v3__.HeaderValueOption]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    HTTP entity headers in addition to the original request headers. This allows the authorization
    service to append, to add or to override headers from the original request before
    dispatching it to the upstream. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>` defaults to
    false when used in this message. By setting the ``append`` field to ``true``,
    the filter will append the correspondent header value to the matched request header.
    By leaving ``append`` as false, the filter will either add a new header, or override an existing
    one if there is a match.
    """

    headers_to_remove: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )
    """
    HTTP entity headers to remove from the original request before dispatching
    it to the upstream. This allows the authorization service to act on auth
    related headers (like ``Authorization``), process them, and consume them.
    Under this model, the upstream will either receive the request (if it's
    authorized) or not receive it (if it's not), but will not see headers
    containing authorization credentials.

    Pseudo headers (such as ``:authority``, ``:method``, ``:path`` etc), as well as
    the header ``Host``, may not be removed as that would make the request
    malformed. If mentioned in ``headers_to_remove`` these special headers will
    be ignored.

    When using the HTTP service this must instead be set by the HTTP
    authorization service as a comma separated list like so:
    ``x-envoy-auth-headers-to-remove: one-auth-header, another-auth-header``.
    """

    dynamic_metadata: "____google__protobuf__.Struct | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This field has been deprecated in favor of :ref:`CheckResponse.dynamic_metadata
    <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`. Until it is removed,
    setting this field overrides :ref:`CheckResponse.dynamic_metadata
    <envoy_v3_api_field_service.auth.v3.CheckResponse.dynamic_metadata>`.
    """

    response_headers_to_add: "list[___config__core__v3__.HeaderValueOption]" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    This field allows the authorization service to send HTTP response headers
    to the downstream client on success. Note that the :ref:`append field in HeaderValueOption <envoy_v3_api_field_config.core.v3.HeaderValueOption.append>`
    defaults to false when used in this message.
    """

    query_parameters_to_set: "list[___config__core__v3__.QueryParameter]" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    This field allows the authorization service to set (and overwrite) query
    string parameters on the original request before it is sent upstream.
    """

    query_parameters_to_remove: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )
    """
    This field allows the authorization service to specify which query parameters
    should be removed from the original request before it is sent upstream. Each
    element in this list is a case-sensitive query parameter name to be removed.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("dynamic_metadata"):
            warnings.warn(
                "OkHttpResponse.dynamic_metadata is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.service.auth.v3", "OkHttpResponse", OkHttpResponse
)


class AuthorizationSyncStub:
    """
    [#protodoc-title: Authorization service]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def check(self, message: "CheckRequest") -> "CheckResponse":
        """
        Performs authorization check based on the attributes associated with the
        incoming request, and returns status `OK` or not `OK`.
        """

        return self._channel.unary_unary(
            "/envoy.service.auth.v3.Authorization/Check",
            CheckRequest.SerializeToString,
            CheckResponse.FromString,
        )(message)


class AuthorizationAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: Authorization service]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """

    async def check(
        self,
        message: "CheckRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "CheckResponse":
        """
        Performs authorization check based on the attributes associated with the
        incoming request, and returns status `OK` or not `OK`.
        """

        return await self._unary_unary(
            "/envoy.service.auth.v3.Authorization/Check",
            message,
            CheckResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from .....google import protobuf as ____google__protobuf__
from .....google import rpc as ____google__rpc__
from ....config.core import v3 as ___config__core__v3__
from ....type import v3 as ___type__v3__


class AuthorizationBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: Authorization service]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """

    async def check(self, message: "CheckRequest") -> "CheckResponse":
        """
        Performs authorization check based on the attributes associated with the
        incoming request, and returns status `OK` or not `OK`.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_check(
        self, stream: "grpclib.server.Stream[CheckRequest, CheckResponse]"
    ) -> None:
        request = await stream.recv_message()
        assert request is not None
        response = await self.check(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.auth.v3.Authorization/Check": grpclib.const.Handler(
                self.__rpc_check,
                grpclib.const.Cardinality.UNARY_UNARY,
                CheckRequest,
                CheckResponse,
            ),
        }
