# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/csrf/v2/csrf.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("CsrfPolicy",)


import betterproto2
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CsrfPolicy(betterproto2.Message):
    """
    [#protodoc-title: CSRF]
    Cross-Site Request Forgery :ref:`configuration overview <config_http_filters_csrf>`.
    [#extension: envoy.filters.http.csrf]

    CSRF filter config.
    """

    filter_enabled: "_____api__v2__core__.RuntimeFractionalPercent | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies the % of requests for which the CSRF filter is enabled.

    If :ref:`runtime_key <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,
    Envoy will lookup the runtime key to get the percentage of requests to filter.

    .. note::

      This field defaults to 100/:ref:`HUNDRED
      <envoy_api_enum_type.FractionalPercent.DenominatorType>`.
    """

    shadow_enabled: "_____api__v2__core__.RuntimeFractionalPercent | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies that CSRF policies will be evaluated and tracked, but not enforced.

    This is intended to be used when ``filter_enabled`` is off and will be ignored otherwise.

    If :ref:`runtime_key <envoy_api_field_core.RuntimeFractionalPercent.runtime_key>` is specified,
    Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
    and track the request's *Origin* and *Destination* to determine if it's valid, but will not
    enforce any policies.
    """

    additional_origins: "list[_____type__matcher__.StringMatcher]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Specifies additional source origins that will be allowed in addition to
    the destination origin.

    More information on how this can be configured via runtime can be found
    :ref:`here <csrf-configuration>`.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.csrf.v2", "CsrfPolicy", CsrfPolicy
)


from ......api.v2 import core as _____api__v2__core__
from ......type import matcher as _____type__matcher__
