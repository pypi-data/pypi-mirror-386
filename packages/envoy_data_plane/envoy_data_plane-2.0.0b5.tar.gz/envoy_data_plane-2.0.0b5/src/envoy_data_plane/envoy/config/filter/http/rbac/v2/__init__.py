# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/rbac/v2/rbac.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Rbac",
    "RbacPerRoute",
)


import betterproto2
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Rbac(betterproto2.Message):
    """
    [#protodoc-title: RBAC]
    Role-Based Access Control :ref:`configuration overview <config_http_filters_rbac>`.
    [#extension: envoy.filters.http.rbac]

    RBAC filter config.
    """

    rules: "____rbac__v2__.Rbac | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specify the RBAC rules to be applied globally.
    If absent, no enforcing RBAC policy will be applied.
    """

    shadow_rules: "____rbac__v2__.Rbac | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Shadow rules are not enforced by the filter (i.e., returning a 403)
    but will emit stats and logs and can be used for rule testing.
    If absent, no shadow RBAC policy will be applied.
    """


default_message_pool.register_message("envoy.config.filter.http.rbac.v2", "RBAC", Rbac)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RbacPerRoute(betterproto2.Message):
    rbac: "Rbac | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Override the global configuration of the filter with this new config.
    If absent, the global RBAC policy will be disabled for this route.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.rbac.v2", "RBACPerRoute", RbacPerRoute
)


from .....rbac import v2 as ____rbac__v2__
