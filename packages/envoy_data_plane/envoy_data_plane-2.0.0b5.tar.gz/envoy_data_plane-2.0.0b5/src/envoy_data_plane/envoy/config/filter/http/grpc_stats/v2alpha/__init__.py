# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/grpc_stats/v2alpha/config.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "FilterConfig",
    "FilterObject",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FilterConfig(betterproto2.Message):
    """
    [#protodoc-title: gRPC statistics] gRPC statistics filter
    :ref:`configuration overview <config_http_filters_grpc_stats>`.
    [#extension: envoy.filters.http.grpc_stats]

    gRPC statistics filter configuration

    Oneofs:
        - per_method_stat_specifier:
    """

    emit_filter_state: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    If true, the filter maintains a filter state object with the request and response message
    counts.
    """

    individual_method_stats_allowlist: "_____api__v2__core__.GrpcMethodList | None" = (
        betterproto2.field(
            2,
            betterproto2.TYPE_MESSAGE,
            optional=True,
            group="per_method_stat_specifier",
        )
    )
    """
    If set, specifies an allowlist of service/methods that will have individual stats
    emitted for them. Any call that does not match the allowlist will be counted
    in a stat with no method specifier: `cluster.<name>.grpc.*`.
    """

    stats_for_all_methods: "bool | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
        group="per_method_stat_specifier",
    )
    """
    If set to true, emit stats for all service/method names.

    If set to false, emit stats for all service/message types to the same stats without including
    the service/method in the name, with prefix `cluster.<name>.grpc`. This can be useful if
    service/method granularity is not needed, or if each cluster only receives a single method.

    .. attention::
      This option is only safe if all clients are trusted. If this option is enabled
      with untrusted clients, the clients could cause unbounded growth in the number of stats in
      Envoy, using unbounded memory and potentially slowing down stats pipelines.

    .. attention::
      If neither `individual_method_stats_allowlist` nor `stats_for_all_methods` is set, the
      behavior will default to `stats_for_all_methods=false`.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.config.filter.http.grpc_stats.v2alpha", "FilterConfig", FilterConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FilterObject(betterproto2.Message):
    """
    gRPC statistics filter state object in protobuf form.
    """

    request_message_count: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        1, betterproto2.TYPE_UINT64
    )
    """
    Count of request messages in the request stream.
    """

    response_message_count: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        2, betterproto2.TYPE_UINT64
    )
    """
    Count of response messages in the response stream.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.grpc_stats.v2alpha", "FilterObject", FilterObject
)


from .......google import protobuf as ______google__protobuf__
from ......api.v2 import core as _____api__v2__core__
