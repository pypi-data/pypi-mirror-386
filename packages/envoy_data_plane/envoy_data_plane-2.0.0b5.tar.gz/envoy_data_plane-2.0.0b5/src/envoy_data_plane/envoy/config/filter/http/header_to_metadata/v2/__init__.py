# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/header_to_metadata/v2/header_to_metadata.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Config",
    "ConfigKeyValuePair",
    "ConfigRule",
    "ConfigValueEncode",
    "ConfigValueType",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ConfigValueEncode(betterproto2.Enum):
    """
    ValueEncode defines the encoding algorithm.
    """

    NONE = 0
    """
    The value is not encoded.
    """

    BASE64 = 1
    """
    The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.
    Note: this is mostly used for STRING and PROTOBUF_VALUE to escape the
    non-ASCII characters in the header.
    """


class ConfigValueType(betterproto2.Enum):
    STRING = 0

    NUMBER = 1

    PROTOBUF_VALUE = 2
    """
    The value is a serialized `protobuf.Value
    <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Config(betterproto2.Message):
    """
    [#protodoc-title: Header-To-Metadata Filter]

    The configuration for transforming headers into metadata. This is useful
    for matching load balancer subsets, logging, etc.

    Header to Metadata :ref:`configuration overview <config_http_filters_header_to_metadata>`.
    [#extension: envoy.filters.http.header_to_metadata]
    """

    request_rules: "list[ConfigRule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to requests.
    """

    response_rules: "list[ConfigRule]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to responses.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.header_to_metadata.v2", "Config", Config
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ConfigKeyValuePair(betterproto2.Message):
    """
    [#next-free-field: 6]
    """

    metadata_namespace: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The namespace — if this is empty, the filter's namespace will be used.
    """

    key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The key to use within the namespace.
    """

    value: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    The value to pair with the given key.

    When used for a `on_header_present` case, if value is non-empty it'll be used
    instead of the header value. If both are empty, no metadata is added.

    When used for a `on_header_missing` case, a non-empty value must be provided
    otherwise no metadata is added.
    """

    type: "ConfigValueType" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: ConfigValueType(0)
    )
    """
    The value's type — defaults to string.
    """

    encode: "ConfigValueEncode" = betterproto2.field(
        5, betterproto2.TYPE_ENUM, default_factory=lambda: ConfigValueEncode(0)
    )
    """
    How is the value encoded, default is NONE (not encoded).
    The value will be decoded accordingly before storing to metadata.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.header_to_metadata.v2",
    "Config.KeyValuePair",
    ConfigKeyValuePair,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ConfigRule(betterproto2.Message):
    """
    A Rule defines what metadata to apply when a header is present or missing.
    """

    header: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The header that triggers this rule — required.
    """

    on_header_present: "ConfigKeyValuePair | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If the header is present, apply this metadata KeyValuePair.

    If the value in the KeyValuePair is non-empty, it'll be used instead
    of the header value.
    """

    on_header_missing: "ConfigKeyValuePair | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If the header is not present, apply this metadata KeyValuePair.

    The value in the KeyValuePair must be set, since it'll be used in lieu
    of the missing header value.
    """

    remove: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    Whether or not to remove the header after a rule is applied.

    This prevents headers from leaking.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.header_to_metadata.v2", "Config.Rule", ConfigRule
)
