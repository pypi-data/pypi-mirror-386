# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/cache/v2alpha/cache.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CacheConfig",
    "CacheConfigKeyCreatorParams",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CacheConfig(betterproto2.Message):
    """
    [#protodoc-title: HTTP Cache Filter]
    [#extension: envoy.filters.http.cache]
    """

    typed_config: "______google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Config specific to the cache storage implementation.
    """

    allowed_vary_headers: "list[_____type__matcher__.StringMatcher]" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    List of matching rules that defines allowed *Vary* headers.

    The *vary* response header holds a list of header names that affect the
    contents of a response, as described by
    https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.

    During insertion, *allowed_vary_headers* acts as a allowlist: if a
    response's *vary* header mentions any header names that aren't matched by any rules in
    *allowed_vary_headers*, that response will not be cached.

    During lookup, *allowed_vary_headers* controls what request headers will be
    sent to the cache storage implementation.
    """

    key_creator_params: "CacheConfigKeyCreatorParams | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    [#not-implemented-hide:]
    <TODO(toddmgreer) implement key customization>

    Modifies cache key creation by restricting which parts of the URL are included.
    """

    max_body_bytes: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(4, betterproto2.TYPE_UINT32)
    )
    """
    [#not-implemented-hide:]
    <TODO(toddmgreer) implement size limit>

    Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache
    storage implementation may have its own limit beyond which it will reject insertions).
    """


default_message_pool.register_message(
    "envoy.config.filter.http.cache.v2alpha", "CacheConfig", CacheConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CacheConfigKeyCreatorParams(betterproto2.Message):
    """
    [#not-implemented-hide:]
    Modifies cache key creation by restricting which parts of the URL are included.
    """

    exclude_scheme: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    If true, exclude the URL scheme from the cache key. Set to true if your origins always
    produce the same response for http and https requests.
    """

    exclude_host: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, exclude the host from the cache key. Set to true if your origins' responses don't
    ever depend on host.
    """

    query_parameters_included: "list[_____api__v2__route__.QueryParameterMatcher]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    If *query_parameters_included* is nonempty, only query parameters matched
    by one or more of its matchers are included in the cache key. Any other
    query params will not affect cache lookup.
    """

    query_parameters_excluded: "list[_____api__v2__route__.QueryParameterMatcher]" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    If *query_parameters_excluded* is nonempty, query parameters matched by one
    or more of its matchers are excluded from the cache key (even if also
    matched by *query_parameters_included*), and will not affect cache lookup.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.cache.v2alpha",
    "CacheConfig.KeyCreatorParams",
    CacheConfigKeyCreatorParams,
)


from .......google import protobuf as ______google__protobuf__
from ......api.v2 import route as _____api__v2__route__
from ......type import matcher as _____type__matcher__
