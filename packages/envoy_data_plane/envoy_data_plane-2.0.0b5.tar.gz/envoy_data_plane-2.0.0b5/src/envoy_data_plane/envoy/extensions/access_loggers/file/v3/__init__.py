# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/access_loggers/file/v3/file.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("FileAccessLog",)

import typing
import warnings

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FileAccessLog(betterproto2.Message):
    """
    [#protodoc-title: File access log]
    [#extension: envoy.access_loggers.file]

    Custom configuration for an :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`
    that writes log entries directly to a file. Configures the built-in ``envoy.access_loggers.file``
    AccessLog.
    [#next-free-field: 6]

    Oneofs:
        - access_log_format:
    """

    path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    A path to a local file to which to write the access log entries.
    """

    format: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="access_log_format"
    )
    """
    Access log :ref:`format string<config_access_log_format_strings>`.
    Envoy supports :ref:`custom access log formats <config_access_log_format>` as well as a
    :ref:`default format <config_access_log_default_format>`.
    This field is deprecated.
    Please use :ref:`log_format <envoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format>`.
    """

    json_format: "_____google__protobuf__.Struct | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="access_log_format"
    )
    """
    Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. All values
    are rendered as strings.
    This field is deprecated.
    Please use :ref:`log_format <envoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format>`.
    """

    typed_json_format: "_____google__protobuf__.Struct | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="access_log_format"
    )
    """
    Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. Values are
    rendered as strings, numbers, or boolean values as appropriate. Nested JSON objects may
    be produced by some command operators (e.g.FILTER_STATE or DYNAMIC_METADATA). See the
    documentation for a specific command operator for details.
    This field is deprecated.
    Please use :ref:`log_format <envoy_v3_api_field_extensions.access_loggers.file.v3.FileAccessLog.log_format>`.
    """

    log_format: "____config__core__v3__.SubstitutionFormatString | None" = (
        betterproto2.field(
            5, betterproto2.TYPE_MESSAGE, optional=True, group="access_log_format"
        )
    )
    """
    Configuration to form access log data and format.
    If not specified, use :ref:`default format <config_access_log_default_format>`.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("format"):
            warnings.warn("FileAccessLog.format is deprecated", DeprecationWarning)
        if self.is_set("json_format"):
            warnings.warn("FileAccessLog.json_format is deprecated", DeprecationWarning)
        if self.is_set("typed_json_format"):
            warnings.warn(
                "FileAccessLog.typed_json_format is deprecated", DeprecationWarning
            )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.access_loggers.file.v3", "FileAccessLog", FileAccessLog
)


from ......google import protobuf as _____google__protobuf__
from .....config.core import v3 as ____config__core__v3__
