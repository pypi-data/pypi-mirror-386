# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/grpc_service/call_credentials/sts_service/v3/sts_service_credentials.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("StsServiceCredentials",)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class StsServiceCredentials(betterproto2.Message):
    """
    [#protodoc-title: gRPC STS Credentials]

    Security token service configuration that allows Google gRPC to
    fetch security token from an OAuth 2.0 authorization server.
    See https://tools.ietf.org/html/draft-ietf-oauth-token-exchange-16 and
    https://github.com/grpc/grpc/pull/19587.
    [#not-implemented-hide:]
    [#next-free-field: 10]
    """

    token_exchange_service_uri: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    URI of the token exchange service that handles token exchange requests.
    [#comment:TODO(asraa): Add URI validation when implemented. Tracked by
    https://github.com/bufbuild/protoc-gen-validate/issues/303]
    """

    resource: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Location of the target service or resource where the client
    intends to use the requested security token.
    """

    audience: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Logical name of the target service where the client intends to
    use the requested security token.
    """

    scope: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    The desired scope of the requested security token in the
    context of the service or resource where the token will be used.
    """

    requested_token_type: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    Type of the requested security token.
    """

    subject_token_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    The path of subject token, a security token that represents the
    identity of the party on behalf of whom the request is being made.
    """

    subject_token_type: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        7, betterproto2.TYPE_STRING
    )
    """
    Type of the subject token.
    """

    actor_token_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        8, betterproto2.TYPE_STRING
    )
    """
    The path of actor token, a security token that represents the identity
    of the acting party. The acting party is authorized to use the
    requested security token and act on behalf of the subject.
    """

    actor_token_type: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        9, betterproto2.TYPE_STRING
    )
    """
    Type of the actor token.
    """


default_message_pool.register_message(
    "envoy.extensions.grpc_service.call_credentials.sts_service.v3",
    "StsServiceCredentials",
    StsServiceCredentials,
)
