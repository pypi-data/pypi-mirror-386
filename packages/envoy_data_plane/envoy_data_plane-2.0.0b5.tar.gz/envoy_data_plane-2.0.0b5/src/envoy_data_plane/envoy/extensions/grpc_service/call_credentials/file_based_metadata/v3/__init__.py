# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/grpc_service/call_credentials/file_based_metadata/v3/file_based_metadata_credentials.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("FileBasedMetadataCallCredentials",)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FileBasedMetadataCallCredentials(betterproto2.Message):
    """
    [#protodoc-title: File-Based Metadata Call Credentials]

    [#not-implemented-hide:]
    """

    secret_data: "_____config__core__v3__.DataSource | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Location or inline data of secret to use for authentication of the Google gRPC connection
    this secret will be attached to a header of the gRPC connection
    """

    header_key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Metadata header key to use for sending the secret data
    if no header key is set, "authorization" header will be used
    """

    header_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Prefix to prepend to the secret in the metadata header
    if no prefix is set, the default is to use no prefix
    """


default_message_pool.register_message(
    "envoy.extensions.grpc_service.call_credentials.file_based_metadata.v3",
    "FileBasedMetadataCallCredentials",
    FileBasedMetadataCallCredentials,
)


from ......config.core import v3 as _____config__core__v3__
