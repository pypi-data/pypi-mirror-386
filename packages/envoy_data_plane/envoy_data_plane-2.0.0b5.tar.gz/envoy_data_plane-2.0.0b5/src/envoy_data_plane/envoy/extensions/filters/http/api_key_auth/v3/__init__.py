# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/api_key_auth/v3/api_key_auth.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ApiKeyAuth",
    "ApiKeyAuthPerRoute",
    "Credential",
    "Forwarding",
    "KeySource",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ApiKeyAuth(betterproto2.Message):
    """
    [#protodoc-title: APIKey Auth]
    APIKey Auth :ref:`configuration overview <config_http_filters_api_key_auth>`.
    [#extension: envoy.filters.http.api_key_auth]

    API Key HTTP authentication.

    For example, the following configuration configures the filter to authenticate the clients using
    the API key from the header ``X-API-KEY``. And only the clients with the key ``real-key`` are
    considered as authenticated. The client information is configured to be forwarded
    in the header ``x-client-id``.

    .. code-block:: yaml

       credentials:
       - key: real-key
         client: user
       key_sources:
        - header: "X-API-KEY"
       forwarding:
         header: "x-client-id"
         hide_credentials: false
    """

    credentials: "list[Credential]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The credentials that are used to authenticate the clients.
    """

    key_sources: "list[KeySource]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The key sources to fetch the key from the coming request.
    """

    forwarding: "Forwarding | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional configuration to control what information should be propagated to upstream services.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.api_key_auth.v3", "ApiKeyAuth", ApiKeyAuth
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ApiKeyAuthPerRoute(betterproto2.Message):
    """
    API key auth configuration of per route or per virtual host or per route configuration.
    """

    credentials: "list[Credential]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The credentials that are used to authenticate the clients. If this field is non-empty, then the
    credentials in the filter level configuration will be ignored and the credentials in this
    configuration will be used.
    """

    key_sources: "list[KeySource]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The key sources to fetch the key from the coming request. If this field is non-empty, then the
    key sources in the filter level configuration will be ignored and the key sources in this
    configuration will be used.
    """

    allowed_clients: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    A list of clients that are allowed to access the route or vhost. The clients listed here
    should be subset of the clients listed in the ``credentials`` to provide authorization control
    after the authentication is successful. If the list is empty, then all authenticated clients
    are allowed. This provides very limited but simple authorization. If more complex authorization
    is required, then use the :ref:`HTTP RBAC filter <config_http_filters_rbac>` instead.

    .. note::
      Setting this field and ``credentials`` at the same configuration entry is not an error but
      also makes no much sense because they provide similar functionality. Please only use
      one of them at same configuration entry except for the case that you want to share the same
      credentials list across multiple routes but still use different allowed clients for each
      route.
    """

    forwarding: "Forwarding | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional configuration to control what information should be propagated to upstream services.
    If this field is non-empty, then the forwarding information in the filter level configuration
    will be ignored and the forwarding in this configuration will be used.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.api_key_auth.v3",
    "ApiKeyAuthPerRoute",
    ApiKeyAuthPerRoute,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Credential(betterproto2.Message):
    """
    Single credential entry that contains the API key and the related client id.
    """

    key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The value of the unique API key.
    """

    client: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The unique id or identity that used to identify the client or consumer.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.api_key_auth.v3", "Credential", Credential
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Forwarding(betterproto2.Message):
    header: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The header name in which to store the client information. If this field is non-empty,
    the client string associated with the matched credential will be injected into
    the request before forwarding upstream.
    """

    hide_credentials: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, remove the API key from the request before forwarding upstream.

    This applies to all configured key sources: ``header``, ``query``, and ``cookie``.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.api_key_auth.v3", "Forwarding", Forwarding
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class KeySource(betterproto2.Message):
    header: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The header name to fetch the key. If multiple header values are present, the first one will be
    used. If the header value starts with 'Bearer ', this prefix will be stripped to get the
    key value.

    If set, takes precedence over ``query`` and ``cookie``.
    """

    query: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The query parameter name to fetch the key. If multiple query values are present, the first one
    will be used.

    The field will be used if ``header`` is not set. If set, takes precedence over ``cookie``.
    """

    cookie: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    The cookie name to fetch the key.

    The field will be used if the ``header`` and ``query`` are not set.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.api_key_auth.v3", "KeySource", KeySource
)
