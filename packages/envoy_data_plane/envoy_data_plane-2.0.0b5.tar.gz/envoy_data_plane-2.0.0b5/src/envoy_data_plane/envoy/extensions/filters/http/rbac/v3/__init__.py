# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/rbac/v3/rbac.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Rbac",
    "RbacPerRoute",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Rbac(betterproto2.Message):
    """
    [#protodoc-title: RBAC]
    Role-Based Access Control :ref:`configuration overview <config_http_filters_rbac>`.
    [#extension: envoy.filters.http.rbac]

    RBAC filter config.
    [#next-free-field: 8]
    """

    rules: "_____config__rbac__v3__.Rbac | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The primary RBAC policy which will be applied globally, to all the incoming requests.

    * If absent, no RBAC enforcement occurs.
    * If set but empty, all requests are denied.

    .. note::

      When both ``rules`` and ``matcher`` are configured, ``rules`` will be ignored.
    """

    rules_stat_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    If specified, rules will emit stats with the given prefix.
    This is useful for distinguishing metrics when multiple RBAC filters are configured.
    """

    matcher: "______xds__type__matcher__v3__.Matcher | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Match tree for evaluating RBAC actions on incoming requests. Requests not matching any matcher will be denied.

    * If absent, no RBAC enforcement occurs.
    * If set but empty, all requests are denied.
    """

    shadow_rules: "_____config__rbac__v3__.Rbac | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Shadow policy for testing RBAC rules without enforcing them. These rules generate stats and logs but do not deny
    requests. If absent, no shadow RBAC policy will be applied.

    .. note::

      When both ``shadow_rules`` and ``shadow_matcher`` are configured, ``shadow_rules`` will be ignored.
    """

    shadow_matcher: "______xds__type__matcher__v3__.Matcher | None" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If absent, no shadow matcher will be applied.
    Match tree for testing RBAC rules through stats and logs without enforcing them.
    If absent, no shadow matching occurs.
    """

    shadow_rules_stat_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    If specified, shadow rules will emit stats with the given prefix.
    This is useful for distinguishing metrics when multiple RBAC filters use shadow rules.
    """

    track_per_rule_stats: "bool" = betterproto2.field(7, betterproto2.TYPE_BOOL)
    """
    If ``track_per_rule_stats`` is ``true``, counters will be published for each rule and shadow rule.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.rbac.v3", "RBAC", Rbac
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RbacPerRoute(betterproto2.Message):
    rbac: "Rbac | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Per-route specific RBAC configuration that overrides the global RBAC configuration.
    If absent, RBAC policy will be disabled for this route.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.rbac.v3", "RBACPerRoute", RbacPerRoute
)


from .......xds.type.matcher import v3 as ______xds__type__matcher__v3__
from ......config.rbac import v3 as _____config__rbac__v3__
