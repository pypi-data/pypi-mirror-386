# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/router/cluster_specifiers/matcher/v3/matcher.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ClusterAction",
    "MatcherClusterSpecifier",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClusterAction(betterproto2.Message):
    """
    [#protodoc-title: Matcher Based Cluster Specifier]
    [#extension: envoy.router.cluster_specifier_plugin.matcher]
    """

    cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Indicates the upstream cluster to which the request should be routed
    to.
    """


default_message_pool.register_message(
    "envoy.extensions.router.cluster_specifiers.matcher.v3",
    "ClusterAction",
    ClusterAction,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class MatcherClusterSpecifier(betterproto2.Message):
    cluster_matcher: "______xds__type__matcher__v3__.Matcher | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The matcher for cluster selection after the route has been selected. This is used when the
    route has multiple clusters (like multiple clusters for different users) and the matcher
    is used to select the cluster to use for the request.

    The match tree to use for grouping incoming requests into buckets.

    Example:

    .. validated-code-block:: yaml
      :type-name: xds.type.matcher.v3.Matcher

      matcher_list:
        matchers:
        - predicate:
            single_predicate:
              input:
                typed_config:
                  '@type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
                  header_name: env
              value_match:
                exact: staging
          on_match:
            action:
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction
                cluster: "staging-cluster"

        - predicate:
            single_predicate:
              input:
                typed_config:
                  '@type': type.googleapis.com/envoy.type.matcher.v3.HttpRequestHeaderMatchInput
                  header_name: env
              value_match:
                exact: prod
          on_match:
            action:
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction
                cluster: "prod-cluster"

      # Catch-all with a default cluster.
      on_no_match:
        action:
          typed_config:
            '@type': type.googleapis.com/envoy.extensions.router.cluster_specifiers.matcher.v3.ClusterAction
            cluster: "default-cluster"
    """


default_message_pool.register_message(
    "envoy.extensions.router.cluster_specifiers.matcher.v3",
    "MatcherClusterSpecifier",
    MatcherClusterSpecifier,
)


from .......xds.type.matcher import v3 as ______xds__type__matcher__v3__
