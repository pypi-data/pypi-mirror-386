# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/header_mutation/v3/header_mutation.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "HeaderMutation",
    "HeaderMutationPerRoute",
    "Mutations",
)


import betterproto2
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HeaderMutation(betterproto2.Message):
    """
    Configuration for the header mutation filter. The mutation rules in the filter configuration will
    always be applied first and then the per-route mutation rules, if both are specified.
    """

    mutations: "Mutations | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    most_specific_header_mutations_wins: "bool" = betterproto2.field(
        2, betterproto2.TYPE_BOOL
    )
    """
    If per route HeaderMutationPerRoute config is configured at multiple route levels, header mutations
    at all specified levels are evaluated. By default, the order is from most specific (i.e. route entry level)
    to least specific (i.e. route configuration level). Later header mutations may override earlier mutations.

    This order can be reversed by setting this field to true. In other words, most specific level mutation
    is evaluated last.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.header_mutation.v3", "HeaderMutation", HeaderMutation
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HeaderMutationPerRoute(betterproto2.Message):
    """
    Per route configuration for the header mutation filter.
    """

    mutations: "Mutations | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "envoy.extensions.filters.http.header_mutation.v3",
    "HeaderMutationPerRoute",
    HeaderMutationPerRoute,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Mutations(betterproto2.Message):
    """
    [#protodoc-title: Header mutation filter configuration]
    Mutate HTTP headers and trailers in requests and responses.
    [#extension: envoy.filters.http.header_mutation]

    [#next-free-field: 6]
    """

    request_mutations: "list[_____config__common__mutation_rules__v3__.HeaderMutation]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The request mutations are applied before the request is forwarded to the upstream cluster.
    """

    query_parameter_mutations: "list[_____config__core__v3__.KeyValueMutation]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    The ``path`` header query parameter mutations are applied after ``request_mutations`` and before the request
    is forwarded to the next filter in the filter chain.
    """

    response_mutations: "list[_____config__common__mutation_rules__v3__.HeaderMutation]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The response mutations are applied before the response is sent to the downstream client.
    """

    response_trailers_mutations: "list[_____config__common__mutation_rules__v3__.HeaderMutation]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The response trailer mutations are applied before the response is sent to the downstream client.
    """

    request_trailers_mutations: "list[_____config__common__mutation_rules__v3__.HeaderMutation]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The request trailer mutations are applied before the request is sent to the upstream cluster.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.header_mutation.v3", "Mutations", Mutations
)


from ......config.common.mutation_rules import (
    v3 as _____config__common__mutation_rules__v3__,
)
from ......config.core import v3 as _____config__core__v3__
