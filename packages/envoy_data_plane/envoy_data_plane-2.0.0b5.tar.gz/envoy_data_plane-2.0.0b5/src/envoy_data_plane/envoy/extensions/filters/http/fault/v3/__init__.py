# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/fault/v3/fault.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "FaultAbort",
    "FaultAbortHeaderAbort",
    "HttpFault",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FaultAbort(betterproto2.Message):
    """
    [#protodoc-title: Fault Injection]
    Fault Injection :ref:`configuration overview <config_http_filters_fault_injection>`.
    [#extension: envoy.filters.http.fault]

    [#next-free-field: 6]

    Oneofs:
        - error_type:
    """

    http_status: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)] | None" = (
        betterproto2.field(
            2, betterproto2.TYPE_UINT32, optional=True, group="error_type"
        )
    )
    """
    HTTP status code to use to abort the HTTP request.
    """

    grpc_status: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)] | None" = (
        betterproto2.field(
            5, betterproto2.TYPE_UINT32, optional=True, group="error_type"
        )
    )
    """
    gRPC status code to use to abort the gRPC request.
    """

    header_abort: "FaultAbortHeaderAbort | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="error_type"
    )
    """
    Fault aborts are controlled via an HTTP header (if applicable).
    """

    percentage: "_____type__v3__.FractionalPercent | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The percentage of requests/operations/connections that will be aborted with the error code
    provided.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.filters.http.fault.v3", "FaultAbort", FaultAbort
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FaultAbortHeaderAbort(betterproto2.Message):
    """
    Fault aborts are controlled via an HTTP header (if applicable). See the
    :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
    more information.
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.filters.http.fault.v3",
    "FaultAbort.HeaderAbort",
    FaultAbortHeaderAbort,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HttpFault(betterproto2.Message):
    """
    [#next-free-field: 17]
    """

    delay: "___common__fault__v3__.FaultDelay | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If specified, the filter will inject delays based on the values in the
    object.
    """

    abort: "FaultAbort | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If specified, the filter will abort requests based on the values in
    the object. At least ``abort`` or ``delay`` must be specified.
    """

    upstream_cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Specifies the name of the (destination) upstream cluster that the
    filter should match on. Fault injection will be restricted to requests
    bound to the specific upstream cluster.
    """

    headers: "list[_____config__route__v3__.HeaderMatcher]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Specifies a set of headers that the filter should match on. The fault
    injection filter can be applied selectively to requests that match a set of
    headers specified in the fault filter config. The chances of actual fault
    injection further depend on the value of the :ref:`percentage
    <envoy_v3_api_field_extensions.filters.http.fault.v3.FaultAbort.percentage>` field.
    The filter will check the request's headers against all the specified
    headers in the filter config. A match will happen if all the headers in the
    config are present in the request with the same values (or based on
    presence if the ``value`` field is not in the config).
    """

    downstream_nodes: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Faults are injected for the specified list of downstream hosts. If this
    setting is not set, faults are injected for all downstream nodes.
    Downstream node name is taken from :ref:`the HTTP
    x-envoy-downstream-service-node
    <config_http_conn_man_headers_downstream-service-node>` header and compared
    against downstream_nodes list.
    """

    max_active_faults: "int | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    The maximum number of faults that can be active at a single time via the configured fault
    filter. Note that because this setting can be overridden at the route level, it's possible
    for the number of active faults to be greater than this value (if injected via a different
    route). If not specified, defaults to unlimited. This setting can be overridden via
    ``runtime <config_http_filters_fault_injection_runtime>`` and any faults that are not injected
    due to overflow will be indicated via the ``faults_overflow
    <config_http_filters_fault_injection_stats>`` stat.

    .. attention::
      Like other :ref:`circuit breakers <arch_overview_circuit_break>` in Envoy, this is a fuzzy
      limit. It's possible for the number of active faults to rise slightly above the configured
      amount due to the implementation details.
    """

    response_rate_limit: "___common__fault__v3__.FaultRateLimit | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The response rate limit to be applied to the response body of the stream. When configured,
    the percentage can be overridden by the :ref:`fault.http.rate_limit.response_percent
    <config_http_filters_fault_injection_runtime>` runtime key.

    .. attention::
     This is a per-stream limit versus a connection level limit. This means that concurrent streams
     will each get an independent limit.
    """

    delay_percent_runtime: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        8, betterproto2.TYPE_STRING
    )
    """
    The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
    runtime. The default is: fault.http.delay.fixed_delay_percent
    """

    abort_percent_runtime: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        9, betterproto2.TYPE_STRING
    )
    """
    The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
    runtime. The default is: fault.http.abort.abort_percent
    """

    delay_duration_runtime: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )
    """
    The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
    runtime. The default is: fault.http.delay.fixed_duration_ms
    """

    abort_http_status_runtime: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )
    """
    The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
    runtime. The default is: fault.http.abort.http_status
    """

    max_active_faults_runtime: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        12, betterproto2.TYPE_STRING
    )
    """
    The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
    runtime. The default is: fault.http.max_active_faults
    """

    response_rate_limit_percent_runtime: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        13, betterproto2.TYPE_STRING
    )
    """
    The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
    runtime. The default is: fault.http.rate_limit.response_percent
    """

    abort_grpc_status_runtime: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        14, betterproto2.TYPE_STRING
    )
    """
    The runtime key to override the :ref:`default <config_http_filters_fault_injection_runtime>`
    runtime. The default is: fault.http.abort.grpc_status
    """

    disable_downstream_cluster_stats: "bool" = betterproto2.field(
        15, betterproto2.TYPE_BOOL
    )
    """
    To control whether stats storage is allocated dynamically for each downstream server.
    If set to true, "x-envoy-downstream-service-cluster" field of header will be ignored by this filter.
    If set to false, dynamic stats storage will be allocated for the downstream cluster name.
    Default value is false.
    """

    filter_metadata: "______google__protobuf__.Struct | None" = betterproto2.field(
        16, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    When an abort or delay fault is executed, the metadata struct provided here will be added to the
    request's dynamic metadata under the namespace corresponding to the name of the fault filter.
    This data can be logged as part of Access Logs using the :ref:`command operator
    <config_access_log_command_operators>` %DYNAMIC_METADATA(NAMESPACE)%, where NAMESPACE is the name of
    the fault filter.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.fault.v3", "HTTPFault", HttpFault
)


from .......google import protobuf as ______google__protobuf__
from ......config.route import v3 as _____config__route__v3__
from ......type import v3 as _____type__v3__
from ....common.fault import v3 as ___common__fault__v3__
