# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/access_loggers/grpc/v3/als.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CommonGrpcAccessLogConfig",
    "HttpGrpcAccessLogConfig",
    "TcpGrpcAccessLogConfig",
)

import datetime
import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CommonGrpcAccessLogConfig(betterproto2.Message):
    """
    Common configuration for gRPC access logs.
    [#next-free-field: 9]
    """

    log_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The friendly name of the access log to be returned in :ref:`StreamAccessLogsMessage.Identifier
    <envoy_v3_api_msg_service.accesslog.v3.StreamAccessLogsMessage.Identifier>`. This allows the
    access log server to differentiate between different access logs coming from the same Envoy.
    """

    grpc_service: "____config__core__v3__.GrpcService | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The gRPC service for the access log service.
    """

    transport_api_version: "____config__core__v3__.ApiVersion" = betterproto2.field(
        6,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ____config__core__v3__.ApiVersion(0),
    )
    """
    API version for access logs service transport protocol. This describes the access logs service
    gRPC endpoint and version of messages used on the wire.
    """

    buffer_flush_interval: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval for flushing access logs to the gRPC stream. Logger will flush requests every time
    this interval is elapsed, or when batch size limit is hit, whichever comes first. Defaults to
    1 second.
    """

    buffer_size_bytes: "int | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Soft size limit in bytes for access log entries buffer. Logger will buffer requests until
    this limit it hit, or every time flush interval is elapsed, whichever comes first. Setting it
    to zero effectively disables the batching. Defaults to 16384.
    """

    filter_state_objects_to_log: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Additional filter state objects to log in :ref:`filter_state_objects
    <envoy_v3_api_field_data.accesslog.v3.AccessLogCommon.filter_state_objects>`.
    Logger will call ``FilterState::Object::serializeAsProto`` to serialize the filter state object.
    """

    grpc_stream_retry_policy: "____config__core__v3__.RetryPolicy | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Sets the retry policy when the establishment of a gRPC stream fails.
    If the stream succeeds at least once in establishing itself,
    no retry will be performed no matter what gRPC status is received.
    Note that only :ref:`num_retries <envoy_v3_api_field_config.core.v3.RetryPolicy.num_retries>`
    will be used in this configuration. This feature is used only when you are using
    :ref:`Envoy gRPC client <envoy_v3_api_field_config.core.v3.GrpcService.envoy_grpc>`.
    """

    custom_tags: "list[____type__tracing__v3__.CustomTag]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of custom tags with unique tag name to create tags for the logs.
    """


default_message_pool.register_message(
    "envoy.extensions.access_loggers.grpc.v3",
    "CommonGrpcAccessLogConfig",
    CommonGrpcAccessLogConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HttpGrpcAccessLogConfig(betterproto2.Message):
    """
    [#protodoc-title: gRPC Access Log Service (ALS)]

    Configuration for the built-in ``envoy.access_loggers.http_grpc``
    :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`. This configuration will
    populate :ref:`StreamAccessLogsMessage.http_logs
    <envoy_v3_api_field_service.accesslog.v3.StreamAccessLogsMessage.http_logs>`.
    [#extension: envoy.access_loggers.http_grpc]
    """

    common_config: "CommonGrpcAccessLogConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    additional_request_headers_to_log: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Additional request headers to log in :ref:`HTTPRequestProperties.request_headers
    <envoy_v3_api_field_data.accesslog.v3.HTTPRequestProperties.request_headers>`.
    """

    additional_response_headers_to_log: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Additional response headers to log in :ref:`HTTPResponseProperties.response_headers
    <envoy_v3_api_field_data.accesslog.v3.HTTPResponseProperties.response_headers>`.
    """

    additional_response_trailers_to_log: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Additional response trailers to log in :ref:`HTTPResponseProperties.response_trailers
    <envoy_v3_api_field_data.accesslog.v3.HTTPResponseProperties.response_trailers>`.
    """


default_message_pool.register_message(
    "envoy.extensions.access_loggers.grpc.v3",
    "HttpGrpcAccessLogConfig",
    HttpGrpcAccessLogConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class TcpGrpcAccessLogConfig(betterproto2.Message):
    """
    Configuration for the built-in ``envoy.access_loggers.tcp_grpc`` type. This configuration will
    populate ``StreamAccessLogsMessage.tcp_logs``.
    [#extension: envoy.access_loggers.tcp_grpc]
    """

    common_config: "CommonGrpcAccessLogConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "envoy.extensions.access_loggers.grpc.v3",
    "TcpGrpcAccessLogConfig",
    TcpGrpcAccessLogConfig,
)


from ......google import protobuf as _____google__protobuf__
from .....config.core import v3 as ____config__core__v3__
from .....type.tracing import v3 as ____type__tracing__v3__
