# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/rate_limit_descriptors/expr/v3/expr.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Descriptor",)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from google.protobuf.descriptor import Descriptor

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Descriptor(betterproto2.Message):
    """
    [#protodoc-title: Rate limit descriptor expression]
    [#extension: envoy.rate_limit_descriptors.expr]

    The following descriptor entry is appended with a value computed
    from a symbolic Common Expression Language expression.
    See :ref:`attributes <arch_overview_attributes>` for the set of
    available attributes.

    .. code-block:: cpp

      ("<descriptor_key>", "<expression_value>")

    Oneofs:
        - expr_specifier:
    """

    descriptor_key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The key to use in the descriptor entry.
    """

    skip_if_error: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If set to true, Envoy skips the descriptor if the expression evaluates to an error.
    By default, the rate limit is not applied when an expression produces an error.
    """

    text: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True, group="expr_specifier"
    )
    """
    Expression in a text form, e.g. "connection.requested_server_name".
    """

    parsed: "_____google__api__expr__v1alpha1__.Expr | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="expr_specifier"
    )
    """
    Parsed expression in AST form.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.rate_limit_descriptors.expr.v3", "Descriptor", Descriptor
)


from ......google.api.expr import v1alpha1 as _____google__api__expr__v1alpha1__
