# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/lua/v3/lua.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Lua",
    "LuaPerRoute",
)

import typing
import warnings

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Lua(betterproto2.Message):
    """
    [#protodoc-title: Lua]
    Lua :ref:`configuration overview <config_http_filters_lua>`.
    [#extension: envoy.filters.http.lua]

    [#next-free-field: 6]
    """

    inline_code: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The Lua code that Envoy will execute. This can be a very small script that
    further loads code from disk if desired. Note that if JSON configuration is used, the code must
    be properly escaped. YAML configuration may be easier to read since YAML supports multi-line
    strings so complex scripts can be easily expressed inline in the configuration.

    This field is deprecated. Please use
    :ref:`default_source_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code>`.
    Only one of :ref:`inline_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.inline_code>`
    or :ref:`default_source_code <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.default_source_code>`
    can be set for the Lua filter.
    """

    source_codes: "dict[str, _____config__core__v3__.DataSource]" = betterproto2.field(
        2,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE
        ),
    )
    """
    Map of named Lua source codes that can be referenced in :ref:`LuaPerRoute
    <envoy_v3_api_msg_extensions.filters.http.lua.v3.LuaPerRoute>`. The Lua source codes can be
    loaded from inline string or local files.

    Example:

    .. code-block:: yaml

      source_codes:
        hello.lua:
          inline_string: |
            function envoy_on_response(response_handle)
              -- Do something.
            end
        world.lua:
          filename: /etc/lua/world.lua
    """

    default_source_code: "_____config__core__v3__.DataSource | None" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The default Lua code that Envoy will execute. If no per route config is provided
    for the request, this Lua code will be applied.
    """

    stat_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    Optional additional prefix to use when emitting statistics. By default
    metrics are emitted in *.lua.* namespace. If multiple lua filters are
    configured in a filter chain, the stats from each filter instance can
    be emitted using custom stat prefix to distinguish emitted
    statistics. For example:

    .. code-block:: yaml

      http_filters:
        - name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            stat_prefix: foo_script # This emits lua.foo_script.errors etc.
        - name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            stat_prefix: bar_script # This emits lua.bar_script.errors etc.
    """

    clear_route_cache: "bool | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    If set to true, the Lua filter will clear the route cache automatically if the request
    headers are modified by the Lua script. If set to false, the Lua filter will not clear the
    route cache automatically.
    Default is true for backward compatibility.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("inline_code"):
            warnings.warn("Lua.inline_code is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.extensions.filters.http.lua.v3", "Lua", Lua
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LuaPerRoute(betterproto2.Message):
    """


    Oneofs:
        - override:
    """

    disabled: "bool | None" = betterproto2.field(
        1, betterproto2.TYPE_BOOL, optional=True, group="override"
    )
    """
    Disable the Lua filter for this particular vhost or route. If disabled is specified in
    multiple per-filter-configs, the most specific one will be used.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="override"
    )
    """
    A name of a Lua source code stored in
    :ref:`Lua.source_codes <envoy_v3_api_field_extensions.filters.http.lua.v3.Lua.source_codes>`.
    """

    source_code: "_____config__core__v3__.DataSource | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="override"
    )
    """
    A configured per-route Lua source code that can be served by RDS or provided inline.
    """

    filter_context: "______google__protobuf__.Struct | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional filter context for Lua script. This could be used to pass configuration
    to Lua script. The Lua script can access the filter context using ``handle:filterContext()``.
    For example:

    .. code-block:: lua

      function envoy_on_request(request_handle)
        local filter_context = request_handle:filterContext()
        local filter_context_value = filter_context["key"]
        -- Do something with filter_context_value.
      end
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.filters.http.lua.v3", "LuaPerRoute", LuaPerRoute
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
