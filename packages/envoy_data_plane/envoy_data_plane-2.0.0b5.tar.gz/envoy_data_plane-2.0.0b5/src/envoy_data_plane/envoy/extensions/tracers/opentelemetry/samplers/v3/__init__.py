# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/tracers/opentelemetry/samplers/v3/always_on_sampler.proto, envoy/extensions/tracers/opentelemetry/samplers/v3/cel_sampler.proto, envoy/extensions/tracers/opentelemetry/samplers/v3/dynatrace_sampler.proto, envoy/extensions/tracers/opentelemetry/samplers/v3/parent_based_sampler.proto, envoy/extensions/tracers/opentelemetry/samplers/v3/trace_id_ratio_based_sampler.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AlwaysOnSamplerConfig",
    "CelSamplerConfig",
    "DynatraceSamplerConfig",
    "ParentBasedSamplerConfig",
    "TraceIdRatioBasedSamplerConfig",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AlwaysOnSamplerConfig(betterproto2.Message):
    """
    [#protodoc-title: Always On Sampler config]
    Configuration for the "AlwaysOn" Sampler extension.
    The sampler follows the "AlwaysOn" implementation from the OpenTelemetry
    SDK specification.

    See:
    `AlwaysOn sampler specification <https://opentelemetry.io/docs/specs/otel/trace/sdk/#alwayson>`_
    [#extension: envoy.tracers.opentelemetry.samplers.always_on]
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.tracers.opentelemetry.samplers.v3",
    "AlwaysOnSamplerConfig",
    AlwaysOnSamplerConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CelSamplerConfig(betterproto2.Message):
    """
    [#protodoc-title: "CEL" Sampler config]
    Configuration for the "CEL" Sampler extension.

    [#extension: envoy.tracers.opentelemetry.samplers.cel]
    """

    expression: "______xds__type__v3__.CelExpression | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Expression that, when evaluated, will be used to make sample decision.
    """


default_message_pool.register_message(
    "envoy.extensions.tracers.opentelemetry.samplers.v3",
    "CELSamplerConfig",
    CelSamplerConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DynatraceSamplerConfig(betterproto2.Message):
    """
    [#protodoc-title: Dynatrace Sampler config]

    Configuration for the Dynatrace Sampler extension.
    [#extension: envoy.tracers.opentelemetry.samplers.dynatrace]
    """

    tenant: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The Dynatrace tenant.

    The value can be obtained from the Envoy deployment page in Dynatrace.
    """

    cluster_id: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = (
        betterproto2.field(2, betterproto2.TYPE_INT32)
    )
    """
    The id of the Dynatrace cluster id.

    The value can be obtained from the Envoy deployment page in Dynatrace.
    """

    http_service: "_____config__core__v3__.HttpService | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The HTTP service to fetch the sampler configuration from the Dynatrace API (root spans per minute). For example:

    .. code-block:: yaml

       http_service:
         http_uri:
           cluster: dynatrace
           uri: <tenant>.dev.dynatracelabs.com/api/v2/samplingConfiguration
           timeout: 10s
         request_headers_to_add:
         - header:
             key : "authorization"
             value: "Api-Token dt..."
    """

    root_spans_per_minute: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        4, betterproto2.TYPE_UINT32
    )
    """
    Default number of root spans per minute, used when the value can't be obtained from the Dynatrace API.

    A default value of ``1000`` is used when:

    - ``root_spans_per_minute`` is unset
    - ``root_spans_per_minute`` is set to 0
    """


default_message_pool.register_message(
    "envoy.extensions.tracers.opentelemetry.samplers.v3",
    "DynatraceSamplerConfig",
    DynatraceSamplerConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ParentBasedSamplerConfig(betterproto2.Message):
    """
    [#protodoc-title: Parent Based Sampler config]
    Configuration for the "ParentBased" Sampler extension.
    The sampler follows the "ParentBased" implementation from the OpenTelemetry
    SDK specification.

    See:
    `ParentBased sampler specification <https://opentelemetry.io/docs/specs/otel/trace/sdk/#parentbased>`_
    [#extension: envoy.tracers.opentelemetry.samplers.parent_based]
    """

    wrapped_sampler: "_____config__core__v3__.TypedExtensionConfig | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies the sampler to be used by this sampler.
    The configured sampler will be used if the parent trace ID is not passed to Envoy

    required
    [#extension-category: envoy.tracers.opentelemetry.samplers]
    """


default_message_pool.register_message(
    "envoy.extensions.tracers.opentelemetry.samplers.v3",
    "ParentBasedSamplerConfig",
    ParentBasedSamplerConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class TraceIdRatioBasedSamplerConfig(betterproto2.Message):
    """
    [#protodoc-title: Trace Id Ratio Based Sampler config]
    Configuration for the "TraceIdRatioBased" Sampler extension.
    The sampler follows the "TraceIdRatioBased" implementation from the OpenTelemetry
    SDK specification.

    See:
    `TraceIdRatioBased sampler specification <https://opentelemetry.io/docs/specs/otel/trace/sdk/#traceidratiobased>`_
    [#extension: envoy.tracers.opentelemetry.samplers.trace_id_ratio_based]
    """

    sampling_percentage: "_____type__v3__.FractionalPercent | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If the given trace_id falls into a given percentage of all possible
    trace_id values, ShouldSample will return RECORD_AND_SAMPLE.
    required
    [#extension-category: envoy.tracers.opentelemetry.samplers]
    """


default_message_pool.register_message(
    "envoy.extensions.tracers.opentelemetry.samplers.v3",
    "TraceIdRatioBasedSamplerConfig",
    TraceIdRatioBasedSamplerConfig,
)


from .......xds.type import v3 as ______xds__type__v3__
from ......config.core import v3 as _____config__core__v3__
from ......type import v3 as _____type__v3__
