# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/router/v3/router.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Router",
    "RouterUpstreamAccessLogOptions",
)

import datetime
import typing
import warnings

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Router(betterproto2.Message):
    """
    [#protodoc-title: Router]
    Router :ref:`configuration overview <config_http_filters_router>`.
    [#extension: envoy.filters.http.router]

    [#next-free-field: 10]
    """

    dynamic_stats: "bool | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Whether the router generates dynamic cluster statistics. Defaults to
    true. Can be disabled in high performance scenarios.
    """

    start_child_span: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Whether to start a child span for egress routed calls. This can be
    useful in scenarios where other filters (auth, ratelimit, etc.) make
    outbound calls and have child spans rooted at the same ingress
    parent. Defaults to false.

    .. attention::
      This field is deprecated by the
      :ref:`spawn_upstream_span <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.spawn_upstream_span>`.
      Please use that ``spawn_upstream_span`` field to control the span creation.
    """

    upstream_log: "list[_____config__accesslog__v3__.AccessLog]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Configuration for HTTP upstream logs emitted by the router. Upstream logs
    are configured in the same way as access logs, but each log entry represents
    an upstream request. Presuming retries are configured, multiple upstream
    requests may be made for each downstream (inbound) request.
    """

    upstream_log_options: "RouterUpstreamAccessLogOptions | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional upstream access log options.
    """

    suppress_envoy_headers: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    Do not add any additional ``x-envoy-`` headers to requests or responses. This
    only affects the :ref:`router filter generated x-envoy- headers
    <config_http_filters_router_headers_set>`, other Envoy filters and the HTTP
    connection manager may continue to set ``x-envoy-`` headers.
    """

    strict_check_headers: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Specifies a list of HTTP headers to strictly validate. Envoy will reject a
    request and respond with HTTP status 400 if the request contains an invalid
    value for any of the headers listed in this field. Strict header checking
    is only supported for the following headers:

    Value must be a ','-delimited list (i.e. no spaces) of supported retry
    policy values:

    * :ref:`config_http_filters_router_x-envoy-retry-grpc-on`
    * :ref:`config_http_filters_router_x-envoy-retry-on`

    Value must be an integer:

    * :ref:`config_http_filters_router_x-envoy-max-retries`
    * :ref:`config_http_filters_router_x-envoy-upstream-rq-timeout-ms`
    * :ref:`config_http_filters_router_x-envoy-upstream-rq-per-try-timeout-ms`
    """

    respect_expected_rq_timeout: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    If not set, ingress Envoy will ignore
    :ref:`config_http_filters_router_x-envoy-expected-rq-timeout-ms` header, populated by egress
    Envoy, when deriving timeout for upstream cluster.
    """

    suppress_grpc_request_failure_code_stats: "bool" = betterproto2.field(
        7, betterproto2.TYPE_BOOL
    )
    """
    If set, Envoy will avoid incrementing HTTP failure code stats
    on gRPC requests. This includes the individual status code value
    (e.g. upstream_rq_504) and group stats (e.g. upstream_rq_5xx).
    This field is useful if interested in relying only on the gRPC
    stats filter to define success and failure metrics for gRPC requests
    as not all failed gRPC requests charge HTTP status code metrics. See
    :ref:`gRPC stats filter<config_http_filters_grpc_stats>` documentation
    for more details.
    """

    upstream_http_filters: "list[___network__http_connection_manager__v3__.HttpFilter]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Optional HTTP filters for the upstream HTTP filter chain.

    .. note::
      Upstream HTTP filters are currently in alpha.

    These filters will be applied for all requests that pass through the router.
    They will also be applied to shadowed requests.
    Upstream HTTP filters cannot change route or cluster.
    Upstream HTTP filters specified on the cluster will override these filters.

    If using upstream HTTP filters, please be aware that local errors sent by
    upstream HTTP filters will not trigger retries, and local errors sent by
    upstream HTTP filters will count as a final response if hedging is configured.
    [#extension-category: envoy.filters.http.upstream]
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("start_child_span"):
            warnings.warn("Router.start_child_span is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.extensions.filters.http.router.v3", "Router", Router
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RouterUpstreamAccessLogOptions(betterproto2.Message):
    flush_upstream_log_on_upstream_stream: "bool" = betterproto2.field(
        1, betterproto2.TYPE_BOOL
    )
    """
    If set to true, an upstream access log will be recorded when an upstream stream is
    associated to an http request. Note: Each HTTP request received for an already established
    connection will result in an upstream access log record. This includes, for example,
    consecutive HTTP requests over the same connection or a request that is retried.
    In case a retry is applied, an upstream access log will be recorded for each retry.
    """

    upstream_log_flush_interval: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    The interval to flush the upstream access logs. By default, the router will flush an upstream
    access log on stream close, when the HTTP request is complete. If this field is set, the router
    will flush access logs periodically at the specified interval. This is especially useful in the
    case of long-lived requests, such as CONNECT and Websockets.
    The interval must be at least 1 millisecond.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.router.v3",
    "Router.UpstreamAccessLogOptions",
    RouterUpstreamAccessLogOptions,
)


from .......google import protobuf as ______google__protobuf__
from ......config.accesslog import v3 as _____config__accesslog__v3__
from ....network.http_connection_manager import (
    v3 as ___network__http_connection_manager__v3__,
)
