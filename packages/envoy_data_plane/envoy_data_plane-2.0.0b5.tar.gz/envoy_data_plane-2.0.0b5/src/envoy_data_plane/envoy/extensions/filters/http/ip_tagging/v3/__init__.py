# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/ip_tagging/v3/ip_tagging.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "IpTagging",
    "IpTaggingIpTag",
    "IpTaggingIpTagHeader",
    "IpTaggingIpTagHeaderHeaderAction",
    "IpTaggingRequestType",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class IpTaggingIpTagHeaderHeaderAction(betterproto2.Enum):
    """
    Describes how to apply the tags to the headers.
    """

    SANITIZE = 0
    """
    (DEFAULT) The header specified in :ref:`ip_tag_header <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.ip_tag_header>`
    will be dropped, before the tags are applied. The incoming header will be "sanitized" regardless of whether the request is internal or external.

    Note that the header will be visible unsanitized to any filters that are invoked before the ip-tag-header filter, unless it has an *x-envoy* prefix.
    """

    APPEND_IF_EXISTS_OR_ADD = 1
    """
    Tags will be appended to the header specified in
    :ref:`ip_tag_header <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.ip_tag_header>`.

    Please note that this could cause the header to retain values set by the http client regardless of whether the request is internal or external.
    """


class IpTaggingRequestType(betterproto2.Enum):
    """
    The type of requests the filter should apply to. The supported types
    are internal, external or both. The
    :ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
    used to determine if a request is internal and will result in
    :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
    being set. The filter defaults to both, and it will apply to all request types.
    """

    BOTH = 0
    """
    Both external and internal requests will be tagged. This is the default value.
    """

    INTERNAL = 1
    """
    Only internal requests will be tagged.
    """

    EXTERNAL = 2
    """
    Only external requests will be tagged.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class IpTagging(betterproto2.Message):
    """
    [#protodoc-title: IP tagging]
    IP tagging :ref:`configuration overview <config_http_filters_ip_tagging>`.
    [#extension: envoy.filters.http.ip_tagging]

    [#next-free-field: 6]
    """

    request_type: "IpTaggingRequestType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: IpTaggingRequestType(0)
    )
    """
    The type of request the filter should apply to.
    """

    ip_tags: "list[IpTaggingIpTag]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
    Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
    The set of IP tags for the filter.
    """

    ip_tag_header: "IpTaggingIpTagHeader | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specify to which header the tags will be written.

    If left unspecified, the tags will be appended to the ``x-envoy-ip-tags`` header.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ip_tagging.v3", "IPTagging", IpTagging
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class IpTaggingIpTag(betterproto2.Message):
    """
    Supplies the IP tag name and the IP address subnets.
    """

    ip_tag_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Specifies the IP tag name to apply.
    """

    ip_list: "list[_____config__core__v3__.CidrRange]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of IP address subnets that will be tagged with
    ip_tag_name. Both IPv4 and IPv6 are supported.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ip_tagging.v3", "IPTagging.IPTag", IpTaggingIpTag
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class IpTaggingIpTagHeader(betterproto2.Message):
    """
    Specify to which header the tags will be written.
    """

    header: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Header to use for ip-tagging.

    This header will be sanitized based on the config in
    :ref:`action <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.IpTagHeader.action>`
    rather than the defaults for x-envoy prefixed headers.
    """

    action: "IpTaggingIpTagHeaderHeaderAction" = betterproto2.field(
        2,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: IpTaggingIpTagHeaderHeaderAction(0),
    )
    """
    Control if the :ref:`header <envoy_v3_api_field_extensions.filters.http.ip_tagging.v3.IPTagging.IpTagHeader.header>`
    will be sanitized, or be appended to.

    Default: *SANITIZE*.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ip_tagging.v3",
    "IPTagging.IpTagHeader",
    IpTaggingIpTagHeader,
)


from ......config.core import v3 as _____config__core__v3__
