# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/health_checkers/redis/v3/redis.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Redis",)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Redis(betterproto2.Message):
    """
    [#protodoc-title: Redis]
    Redis health checker :ref:`configuration overview <config_health_checkers_redis>`.
    [#extension: envoy.health_checkers.redis]
    """

    key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    If set, optionally perform ``EXISTS <key>`` instead of ``PING``. A return value
    from Redis of 0 (does not exist) is considered a passing healthcheck. A return value other
    than 0 is considered a failure. This allows the user to mark a Redis instance for maintenance
    by setting the specified key to any value and waiting for traffic to drain.
    """

    aws_iam: "___filters__network__redis_proxy__v3__.AwsIam | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Use AWS IAM for health checker authentication
    """


default_message_pool.register_message(
    "envoy.extensions.health_checkers.redis.v3", "Redis", Redis
)


from ....filters.network.redis_proxy import v3 as ___filters__network__redis_proxy__v3__
