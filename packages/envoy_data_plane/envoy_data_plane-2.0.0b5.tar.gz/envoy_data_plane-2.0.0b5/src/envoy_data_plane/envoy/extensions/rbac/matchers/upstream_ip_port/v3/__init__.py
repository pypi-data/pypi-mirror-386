# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/rbac/matchers/upstream_ip_port/v3/upstream_ip_port_matcher.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("UpstreamIpPortMatcher",)


import betterproto2
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class UpstreamIpPortMatcher(betterproto2.Message):
    """
    [#protodoc-title: RBAC upstream IP and port matcher plugin]
    [#extension: envoy.rbac.matchers.upstream_ip_port]

    This is configuration for matching upstream ip and port.
    Note that although both fields are optional, at least one of IP or port must be supplied. If only
    one is supplied the other is a wildcard match.
    This matcher requires a filter in the chain to have saved the upstream address in the
    filter state before the matcher is executed by RBAC filter. The state should be saved with key
    ``envoy.stream.upstream_address`` (See
    :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
    Also, See :repo:`proxy_filter.cc<source/extensions/filters/http/dynamic_forward_proxy/proxy_filter.cc>`
    for an example of a filter which populates the FilterState.
    """

    upstream_ip: "_____config__core__v3__.CidrRange | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A CIDR block that will be used to match the upstream IP.
    Both Ipv4 and Ipv6 ranges can be matched.
    """

    upstream_port_range: "_____type__v3__.Int64Range | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A port range that will be used to match the upstream port.
    """


default_message_pool.register_message(
    "envoy.extensions.rbac.matchers.upstream_ip_port.v3",
    "UpstreamIpPortMatcher",
    UpstreamIpPortMatcher,
)


from ......config.core import v3 as _____config__core__v3__
from ......type import v3 as _____type__v3__
