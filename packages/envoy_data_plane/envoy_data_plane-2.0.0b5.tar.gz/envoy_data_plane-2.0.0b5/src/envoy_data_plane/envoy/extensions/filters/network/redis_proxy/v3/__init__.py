# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/redis_proxy/v3/redis_proxy.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AwsIam",
    "RedisExternalAuthProvider",
    "RedisProtocolOptions",
    "RedisProxy",
    "RedisProxyConnPoolSettings",
    "RedisProxyConnPoolSettingsReadPolicy",
    "RedisProxyConnectionRateLimit",
    "RedisProxyPrefixRoutes",
    "RedisProxyPrefixRoutesRoute",
    "RedisProxyPrefixRoutesRouteReadCommandPolicy",
    "RedisProxyPrefixRoutesRouteRequestMirrorPolicy",
    "RedisProxyRedisFault",
    "RedisProxyRedisFaultRedisFaultType",
)

import datetime
import typing
import warnings

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class RedisProxyConnPoolSettingsReadPolicy(betterproto2.Enum):
    """
    ReadPolicy controls how Envoy routes read commands to Redis nodes. This is currently
    supported for Redis Cluster. All ReadPolicy settings except MASTER may return stale data
    because replication is asynchronous and requires some delay. You need to ensure that your
    application can tolerate stale data.
    """

    MASTER = 0
    """
    Default mode. Read from the current primary node.
    """

    PREFER_MASTER = 1
    """
    Read from the primary, but if it is unavailable, read from replica nodes.
    """

    REPLICA = 2
    """
    Read from replica nodes. If multiple replica nodes are present within a shard, a random
    node is selected. Healthy nodes have precedent over unhealthy nodes.
    """

    PREFER_REPLICA = 3
    """
    Read from the replica nodes (similar to REPLICA), but if all replicas are unavailable (not
    present or unhealthy), read from the primary.
    """

    ANY = 4
    """
    Read from any node of the cluster. A random node is selected among the primary and
    replicas, healthy nodes have precedent over unhealthy nodes.
    """


class RedisProxyRedisFaultRedisFaultType(betterproto2.Enum):
    DELAY = 0
    """
    Delays requests. This is the base fault; other faults can have delays added.
    """

    ERROR = 1
    """
    Returns errors on requests.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AwsIam(betterproto2.Message):
    """
    [#next-free-field: 6]
    """

    credential_provider: "____common__aws__v3__.AwsCredentialProvider | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    An AwsCredentialProvider, allowing the use of a specific credential provider chain or specific provider settings
    """

    cache_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The name of the cache, used when generating the authentication token.
    """

    service_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    The optional service name to be used in AWS IAM authentication. If not provided, the service name will be set to ``elasticache``. For Amazon MemoryDB
    the service name should be set to ``memorydb``.
    """

    region: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    The optional AWS region that your cache is located in. If not provided, the region will be deduced using the region provider chain
    as described in :ref:`config_http_filters_aws_request_signing_region`.
    """

    expiration_time: "datetime.timedelta | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Number of seconds before the IAM authentication token will expire. If not set, defaults to 60s (1 minute). Maximum of 900s (15 minutes)
    Expiration of the current authentication token will automatically trigger generation of a new token.
    As envoy will automatically continue to generate new tokens as required, there is no substantial benefit to using a long expiration value here.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3", "AwsIam", AwsIam
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisExternalAuthProvider(betterproto2.Message):
    """
    RedisExternalAuthProvider specifies a gRPC service that can be used to authenticate Redis clients.
    This service will be called every time an AUTH command is received from a client.
    If the service returns an error, authentication is considered failed.
    If the service returns a success, the client is considered authenticated.
    The service can also return an expiration timestamp, which will be used to disable any further
    commands from the client after it passes, unless a new AUTH command is received and the
    external auth service returns a new expiration timestamp.
    """

    grpc_service: "_____config__core__v3__.GrpcService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    External auth gRPC service configuration.
    It will be called every time an AUTH command is received from a client.
    """

    enable_auth_expiration: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If set to true, the filter will expect an expiration timestamp in the response from the external
    auth service. This timestamp will be used to disable any further commands from the client after
    the expiration time, unless a new AUTH command is received and the external auth service returns
    a new expiration timestamp.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisExternalAuthProvider",
    RedisExternalAuthProvider,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProtocolOptions(betterproto2.Message):
    """
    RedisProtocolOptions specifies Redis upstream protocol options. This object is used in
    :ref:`typed_extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`,
    keyed by the name ``envoy.filters.network.redis_proxy``.
    """

    auth_password: "_____config__core__v3__.DataSource | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Upstream server password as defined by the ``requirepass`` directive
    `<https://redis.io/topics/config>`_ in the server's configuration file.
    If ``aws_iam`` is set, this field is ignored.
    """

    auth_username: "_____config__core__v3__.DataSource | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Upstream server username as defined by the ``user`` directive
    `<https://redis.io/topics/acl>`_ in the server's configuration file.
    If ``aws_iam``` is set, this field will be used as the authenticating user for redis IAM authentication.
    See ``Create a new IAM-enabled user`` under `Setup <https://docs.aws.amazon.com/AmazonElastiCache/latest/dg/auth-iam.html#auth-iam-setup>`_ for more details.
    """

    aws_iam: "AwsIam | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The cluster level configuration for AWS IAM authentication
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisProtocolOptions",
    RedisProtocolOptions,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxy(betterproto2.Message):
    """
    [#protodoc-title: Redis Proxy]
    Redis Proxy :ref:`configuration overview <config_network_filters_redis_proxy>`.
    [#extension: envoy.filters.network.redis_proxy]

    [#next-free-field: 12]
    """

    stat_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The prefix to use when emitting :ref:`statistics <config_network_filters_redis_proxy_stats>`.
    """

    settings: "RedisProxyConnPoolSettings | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Network settings for the connection pool to the upstream clusters.
    """

    latency_in_micros: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    Indicates that latency stat should be computed in microseconds. By default it is computed in
    milliseconds. This does not apply to upstream command stats currently.
    """

    prefix_routes: "RedisProxyPrefixRoutes | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    List of **unique** prefixes used to separate keys from different workloads to different
    clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
    cluster can be used to forward commands when there is no match. Time complexity of the
    lookups are in O(min(longest key prefix, key length)).

    Example:

    .. code-block:: yaml

       prefix_routes:
         routes:
           - prefix: "ab"
             cluster: "cluster_a"
           - prefix: "abc"
             cluster: "cluster_b"

    When using the above routes, the following prefixes would be sent to:

    * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
    * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
    * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
      route<envoy_v3_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.PrefixRoutes.catch_all_route>`
      would have retrieved the key from that cluster instead.

    See the :ref:`configuration section
    <arch_overview_redis_configuration>` of the architecture overview for recommendations on
    configuring the backing clusters.
    """

    downstream_auth_password: "_____config__core__v3__.DataSource | None" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
    AUTH command <https://redis.io/commands/auth>`_ with this password before enabling any other
    command. If an AUTH command's password matches this password, an "OK" response will be returned
    to the client. If the AUTH command password does not match this password, then an "ERR invalid
    password" error will be returned. If any other command is received before AUTH when this
    password is set, then a "NOAUTH Authentication required." error response will be sent to the
    client. If an AUTH command is received when the password is not set, then an "ERR Client sent
    AUTH, but no password is set" error will be returned.

    .. attention::
      This field is deprecated. Use :ref:`downstream_auth_passwords
      <envoy_v3_api_field_extensions.filters.network.redis_proxy.v3.RedisProxy.downstream_auth_passwords>`.
    """

    downstream_auth_passwords: "list[_____config__core__v3__.DataSource]" = (
        betterproto2.field(9, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
    AUTH command <https://redis.io/commands/auth>`_ with one of these passwords before enabling any other
    command. If an AUTH command's password matches one of these passwords, an "OK" response will be returned
    to the client. If the AUTH command password does not match, then an "ERR invalid
    password" error will be returned. If any other command is received before AUTH when the
    password(s) are set, then a "NOAUTH Authentication required." error response will be sent to the
    client. If an AUTH command is received when the password is not set, then an "ERR Client sent
    AUTH, but no password is set" error will be returned.
    """

    faults: "list[RedisProxyRedisFault]" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of faults to inject. Faults currently come in two flavors:
    - Delay, which delays a request.
    - Error, which responds to a request with an error. Errors can also have delays attached.

    Example:

    .. code-block:: yaml

       faults:
       - fault_type: ERROR
         fault_enabled:
           default_value:
             numerator: 10
             denominator: HUNDRED
           runtime_key: "bogus_key"
           commands:
           - GET
         - fault_type: DELAY
           fault_enabled:
             default_value:
               numerator: 10
               denominator: HUNDRED
             runtime_key: "bogus_key"
           delay: 2s

    See the :ref:`fault injection section
    <config_network_filters_redis_proxy_fault_injection>` for more information on how to configure this.
    """

    downstream_auth_username: "_____config__core__v3__.DataSource | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If a username is provided an ACL style AUTH command will be required with a username and password.
    Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
    AUTH command <https://redis.io/commands/auth>`_ with this username and the ``downstream_auth_password``
    before enabling any other command. If an AUTH command's username and password matches this username
    and the ``downstream_auth_password`` , an "OK" response will be returned to the client. If the AUTH
    command username or password does not match this username or the ``downstream_auth_password``, then an
    "WRONGPASS invalid username-password pair" error will be returned. If any other command is received before AUTH when this
    password is set, then a "NOAUTH Authentication required." error response will be sent to the
    client. If an AUTH command is received when the password is not set, then an "ERR Client sent
    AUTH, but no ACL is set" error will be returned.
    """

    external_auth_provider: "RedisExternalAuthProvider | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    External authentication configuration. If set, instead of validating username and password against ``downstream_auth_username`` and ``downstream_auth_password``,
    the filter will call an external gRPC service to authenticate the client.
    A typical usage of this feature is for situations where the password is a one-time token that needs to be validated against a remote service, like a sidecar.
    Expiration is also supported, which will disable any further commands from the client after the expiration time, unless a new AUTH command is received and the external auth service returns a new expiration time.
    If the external auth service returns an error, authentication is considered failed.
    If this setting is set together with ``downstream_auth_username`` and ``downstream_auth_password``, the external auth service will be source of truth, but those fields will still be used for downstream authentication to the cluster.
    The API is defined by :ref:`RedisProxyExternalAuthRequest <envoy_v3_api_msg_service.redis_auth.v3.RedisProxyExternalAuthRequest>`.
    """

    custom_commands: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        11, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Optional configure redis custom commands for the proxy, eg -> ["my_custom_cmd1", "my_custom_cmd2"]

    .. note::
      The is to support redis's feature wherein new commands can be added using redis' modules api:
      https://redis.io/docs/latest/develop/reference/modules/
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("downstream_auth_password"):
            warnings.warn(
                "RedisProxy.downstream_auth_password is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3", "RedisProxy", RedisProxy
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyConnectionRateLimit(betterproto2.Message):
    """
    Configuration to limit reconnection rate to redis server to protect redis server
    from client reconnection storm.
    """

    connection_rate_limit_per_sec: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        1, betterproto2.TYPE_UINT32
    )
    """
    Reconnection rate per sec. Rate limiting is implemented with TokenBucket.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisProxy.ConnectionRateLimit",
    RedisProxyConnectionRateLimit,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyConnPoolSettings(betterproto2.Message):
    """
    Redis connection pool settings.
    [#next-free-field: 11]
    """

    op_timeout: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Per-operation timeout in milliseconds. The timer starts when the first
    command of a pipeline is written to the backend connection. Each response received from Redis
    resets the timer since it signifies that the next command is being processed by the backend.
    The only exception to this behavior is when a connection to a backend is not yet established.
    In that case, the connect timeout on the cluster will govern the timeout until the connection
    is ready.
    """

    enable_hashtagging: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
    forwarded to the same upstream. The hash key used for determining the upstream in a
    consistent hash ring configuration will be computed from the hash tagged key instead of the
    whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
    implementation <https://redis.io/topics/cluster-spec#keys-hash-tags>`_.

    Examples:

    * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
    * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
    """

    enable_redirection: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Accept `moved and ask redirection
    <https://redis.io/topics/cluster-spec#redirection-and-resharding>`_ errors from upstream
    redis servers, and retry commands to the specified target server. The target server does not
    need to be known to the cluster manager. If the command cannot be redirected, then the
    original error is passed downstream unchanged. By default, this support is not enabled.
    """

    dns_cache_config: "____common__dynamic_forward_proxy__v3__.DnsCacheConfig | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If ``enable_redirection`` is set to true this option configures the DNS cache that the
    connection pool will use to resolve hostnames that are returned with MOVED and ASK responses.
    If no configuration is provided, DNS lookups will not be performed (and thus the MOVED/ASK errors
    will be propagated verbatim to the user).
    """

    max_buffer_size_before_flush: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        4, betterproto2.TYPE_UINT32
    )
    """
    Maximum size of encoded request buffer before flush is triggered and encoded requests
    are sent upstream. If this is unset, the buffer flushes whenever it receives data
    and performs no batching.
    This feature makes it possible for multiple clients to send requests to Envoy and have
    them batched- for example if one is running several worker processes, each with its own
    Redis connection. There is no benefit to using this with a single downstream process.
    Recommended size (if enabled) is 1024 bytes.
    """

    buffer_flush_timeout: "datetime.timedelta | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    The encoded request buffer is flushed N milliseconds after the first request has been
    encoded, unless the buffer size has already exceeded ``max_buffer_size_before_flush``.
    If ``max_buffer_size_before_flush`` is not set, this flush timer is not used. Otherwise,
    the timer should be set according to the number of clients, overall request rate and
    desired maximum latency for a single command. For example, if there are many requests
    being batched together at a high rate, the buffer will likely be filled before the timer
    fires. Alternatively, if the request rate is lower the buffer will not be filled as often
    before the timer fires.
    If ``max_buffer_size_before_flush`` is set, but ``buffer_flush_timeout`` is not, the latter
    defaults to 3ms.
    """

    max_upstream_unknown_connections: "int | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    ``max_upstream_unknown_connections`` controls how many upstream connections to unknown hosts
    can be created at any given time by any given worker thread (see ``enable_redirection`` for
    more details). If the host is unknown and a connection cannot be created due to enforcing
    this limit, then redirection will fail and the original redirection error will be passed
    downstream unchanged. This limit defaults to 100.
    """

    enable_command_stats: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
    count. These commands are measured in microseconds.
    """

    read_policy: "RedisProxyConnPoolSettingsReadPolicy" = betterproto2.field(
        7,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: RedisProxyConnPoolSettingsReadPolicy(0),
    )
    """
    Read policy. The default is to read from the primary.
    """

    connection_rate_limit: "RedisProxyConnectionRateLimit | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Ops or connection timeout triggers reconnection to redis server which could result in reconnection
    storm to busy redis server. This config is a protection to rate limit reconnection rate.
    If not set, there will be no rate limiting on the reconnection.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisProxy.ConnPoolSettings",
    RedisProxyConnPoolSettings,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyPrefixRoutes(betterproto2.Message):
    routes: "list[RedisProxyPrefixRoutesRoute]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of prefix routes.
    """

    case_insensitive: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Indicates that prefix matching should be case insensitive.
    """

    catch_all_route: "RedisProxyPrefixRoutesRoute | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional catch-all route to forward commands that doesn't match any of the routes. The
    catch-all route becomes required when no routes are specified.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisProxy.PrefixRoutes",
    RedisProxyPrefixRoutes,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyPrefixRoutesRoute(betterproto2.Message):
    """
    [#next-free-field: 7]
    """

    prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    String prefix that must match the beginning of the keys. Envoy will always favor the
    longest match.
    """

    remove_prefix: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Indicates if the prefix needs to be removed from the key when forwarded.
    """

    cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Upstream cluster to forward the command to.
    """

    request_mirror_policy: "list[RedisProxyPrefixRoutesRouteRequestMirrorPolicy]" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Indicates that the route has a request mirroring policy.
    """

    key_formatter: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    Indicates how redis key should be formatted. To substitute redis key into the formatting
    expression, use %KEY% as a string replacement command.
    """

    read_command_policy: "RedisProxyPrefixRoutesRouteReadCommandPolicy | None" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Indicates that the route has a read command policy
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisProxy.PrefixRoutes.Route",
    RedisProxyPrefixRoutesRoute,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyPrefixRoutesRouteReadCommandPolicy(betterproto2.Message):
    """
    ReadCommandPolicy specifies that Envoy should route read commands to another cluster.
    """

    cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisProxy.PrefixRoutes.Route.ReadCommandPolicy",
    RedisProxyPrefixRoutesRouteReadCommandPolicy,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyPrefixRoutesRouteRequestMirrorPolicy(betterproto2.Message):
    """
    The router is capable of shadowing traffic from one cluster to another. The current
    implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
    respond before returning the response from the primary cluster. All normal statistics are
    collected for the shadow cluster making this feature useful for testing.
    """

    cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Specifies the cluster that requests will be mirrored to. The cluster must
    exist in the cluster manager configuration.
    """

    runtime_fraction: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If not specified or the runtime key is not present, all requests to the target cluster
    will be mirrored.

    If specified, Envoy will lookup the runtime key to get the percentage of requests to the
    mirror.
    """

    exclude_read_commands: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Set this to TRUE to only mirror write commands, this is effectively replicating the
    writes in a "fire and forget" manner.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy",
    RedisProxyPrefixRoutesRouteRequestMirrorPolicy,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyRedisFault(betterproto2.Message):
    """
    RedisFault defines faults used for fault injection.
    """

    fault_type: "RedisProxyRedisFaultRedisFaultType" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: RedisProxyRedisFaultRedisFaultType(0),
    )
    """
    Fault type.
    """

    fault_enabled: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Percentage of requests fault applies to.
    """

    delay: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Delay for all faults. If not set, defaults to zero
    """

    commands: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Commands fault is restricted to, if any. If not set, fault applies to all commands
    other than auth and ping (due to special handling of those commands in Envoy).
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.redis_proxy.v3",
    "RedisProxy.RedisFault",
    RedisProxyRedisFault,
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
from .....common.aws import v3 as ____common__aws__v3__
from .....common.dynamic_forward_proxy import (
    v3 as ____common__dynamic_forward_proxy__v3__,
)
