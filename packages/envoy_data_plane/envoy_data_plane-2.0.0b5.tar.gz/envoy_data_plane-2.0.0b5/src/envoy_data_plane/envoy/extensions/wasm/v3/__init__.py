# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/wasm/v3/wasm.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CapabilityRestrictionConfig",
    "EnvironmentVariables",
    "FailurePolicy",
    "PluginConfig",
    "ReloadConfig",
    "SanitizationConfig",
    "VmConfig",
    "WasmService",
)

import typing
import warnings

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class FailurePolicy(betterproto2.Enum):
    """
    [#protodoc-title: Wasm]
    [#extension: envoy.bootstrap.wasm]

    If there is a fatal error on the VM (e.g. exception, ``abort()``), then the policy will be applied.
    """

    UNSPECIFIED = 0
    """
    No policy is specified. The default policy will be used. The default policy is ``FAIL_CLOSED``.
    """

    FAIL_RELOAD = 1
    """
    New plugin instance will be created for the new request if the VM is failed. Note this will only
    be applied to the following failures:

    * ``proxy_wasm::FailState::RuntimeError``

    This will fallback to the ``FAIL_CLOSED`` for all other failures.
    """

    FAIL_CLOSED = 2
    """
    All plugins associated with the VM will return an HTTP 503 error.
    """

    FAIL_OPEN = 3
    """
    All plugins associated with the VM will be ignored and the filter chain will continue. This
    makes sense when the plugin is optional.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CapabilityRestrictionConfig(betterproto2.Message):
    """
    Configuration for restricting Proxy-Wasm capabilities available to modules.
    """

    allowed_capabilities: "dict[str, SanitizationConfig]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE
        ),
    )
    """
    The Proxy-Wasm capabilities which will be allowed. Capabilities are mapped by
    name. The ``SanitizationConfig`` which each capability maps to is currently unimplemented and ignored,
    and so should be left empty.

    The capability names are given in the
    `Proxy-Wasm ABI <https://github.com/proxy-wasm/spec/tree/master/abi-versions/vNEXT>`_.
    Additionally, the following WASI capabilities from
    `this list <https://github.com/WebAssembly/WASI/blob/master/phases/snapshot/docs.md#modules>`_
    are implemented and can be allowed:
    ``fd_write``, ``fd_read``, ``fd_seek``, ``fd_close``, ``fd_fdstat_get``, ``environ_get``, ``environ_sizes_get``,
    ``args_get``, ``args_sizes_get``, ``proc_exit``, ``clock_time_get``, ``random_get``.
    """


default_message_pool.register_message(
    "envoy.extensions.wasm.v3",
    "CapabilityRestrictionConfig",
    CapabilityRestrictionConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class EnvironmentVariables(betterproto2.Message):
    host_env_keys: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    The keys of *Envoy's* environment variables exposed to this VM. In other words, if a key exists in Envoy's environment
    variables, then that key-value pair will be injected. Note that if a key does not exist, it will be ignored.
    """

    key_values: "dict[str, str]" = betterproto2.field(
        2,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    Explicitly given key-value pairs to be injected to this VM in the form of "KEY=VALUE".
    """


default_message_pool.register_message(
    "envoy.extensions.wasm.v3", "EnvironmentVariables", EnvironmentVariables
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class PluginConfig(betterproto2.Message):
    """
    Base Configuration for Wasm Plugins e.g. filters and services.
    [#next-free-field: 10]

    Oneofs:
        - vm: Configuration for finding or starting VM.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    A unique name for a filters/services in a VM for use in identifying the filter/service if
    multiple filters/services are handled by the same ``vm_id`` and ``root_id`` and for
    logging/debugging.
    """

    root_id: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    A unique ID for a set of filters/services in a VM which will share a RootContext and Contexts
    if applicable (e.g. an Wasm HttpFilter and an Wasm AccessLog). If left blank, all
    filters/services with a blank root_id with the same ``vm_id`` will share Context(s).
    """

    vm_config: "VmConfig | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="vm"
    )
    """
    TODO: add referential VM configurations.
    """

    configuration: "____google__protobuf__.Any | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Filter/service configuration used to configure or reconfigure a plugin
    (``proxy_on_configure``).
    ``google.protobuf.Struct`` is serialized as JSON before
    passing it to the plugin. ``google.protobuf.BytesValue`` and
    ``google.protobuf.StringValue`` are passed directly without the wrapper.
    """

    fail_open: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    If there is a fatal error on the VM (e.g. exception, ``abort()``, ``on_start`` or ``on_configure`` return false),
    then all plugins associated with the VM will either fail closed (by default), e.g. by returning an HTTP 503 error,
    or fail open (if 'fail_open' is set to true) by bypassing the filter.

    .. note::
      When ``on_start`` or ``on_configure`` return ``false`` during xDS updates the xDS configuration will be rejected and when ``on_start`` or ``on_configure`` return ``false`` on
      initial startup the proxy will not start.

    This field is deprecated in favor of the ``failure_policy`` field.
    """

    failure_policy: "FailurePolicy" = betterproto2.field(
        7, betterproto2.TYPE_ENUM, default_factory=lambda: FailurePolicy(0)
    )
    """
    The failure policy for the plugin.
    """

    reload_config: "ReloadConfig | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Reload configuration. This is only applied when ``failure_policy`` is set to ``FAIL_RELOAD``.
    """

    capability_restriction_config: "CapabilityRestrictionConfig | None" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration for restricting Proxy-Wasm capabilities available to modules.
    """

    allow_on_headers_stop_iteration: "bool | None" = betterproto2.field(
        9,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Whether or not to allow plugin onRequestHeaders and onResponseHeaders callbacks to return
    FilterHeadersStatus::StopIteration.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("fail_open"):
            warnings.warn("PluginConfig.fail_open is deprecated", DeprecationWarning)

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.wasm.v3", "PluginConfig", PluginConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ReloadConfig(betterproto2.Message):
    backoff: "___config__core__v3__.BackoffStrategy | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Backoff strategy for the VM failure reload. If not specified, the default 1s base interval
    will be applied.
    """


default_message_pool.register_message(
    "envoy.extensions.wasm.v3", "ReloadConfig", ReloadConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SanitizationConfig(betterproto2.Message):
    """
    Configuration for sanitization of inputs to an allowed capability.

    .. note::
      This is currently unimplemented.
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.wasm.v3", "SanitizationConfig", SanitizationConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class VmConfig(betterproto2.Message):
    """
    Configuration for a Wasm VM.
    [#next-free-field: 8]
    """

    vm_id: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    An ID which will be used along with a hash of the wasm code (or the name of the registered Null
    VM plugin) to determine which VM will be used for the plugin. All plugins which use the same
    ``vm_id`` and code will use the same VM. May be left blank. Sharing a VM between plugins can
    reduce memory utilization and make sharing of data easier which may have security implications.
    [#comment: TODO: add ref for details.]
    """

    runtime: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The Wasm runtime type, defaults to the first available Wasm engine used at Envoy build-time.
    The priority to search for the available engine is: v8 -> wasmtime -> wamr.
    Available Wasm runtime types are registered as extensions. The following runtimes are included
    in Envoy code base:

    .. _extension_envoy.wasm.runtime.null:

    **envoy.wasm.runtime.null**: Null sandbox, the Wasm module must be compiled and linked into the
    Envoy binary. The registered name is given in the ``code`` field as ``inline_string``.

    .. _extension_envoy.wasm.runtime.v8:

    **envoy.wasm.runtime.v8**: `V8 <https://v8.dev/>`_-based WebAssembly runtime.

    .. _extension_envoy.wasm.runtime.wamr:

    **envoy.wasm.runtime.wamr**: `WAMR <https://github.com/bytecodealliance/wasm-micro-runtime/>`_-based WebAssembly runtime.
    This runtime is not enabled in the official build.

    .. _extension_envoy.wasm.runtime.wasmtime:

    **envoy.wasm.runtime.wasmtime**: `Wasmtime <https://wasmtime.dev/>`_-based WebAssembly runtime.
    This runtime is not enabled in the official build.

    [#extension-category: envoy.wasm.runtime]
    """

    code: "___config__core__v3__.AsyncDataSource | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The Wasm code that Envoy will execute.
    """

    configuration: "____google__protobuf__.Any | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The Wasm configuration used in initialization of a new VM
    (``proxy_on_start``). ``google.protobuf.Struct`` is serialized as JSON before
    passing it to the plugin. ``google.protobuf.BytesValue`` and
    ``google.protobuf.StringValue`` are passed directly without the wrapper.
    """

    allow_precompiled: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    Allow the wasm file to include pre-compiled code on VMs which support it.

    .. warning::
      This should only be enabled for trusted sources as the precompiled code is not
      verified.
    """

    nack_on_code_cache_miss: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    If true and the code needs to be remotely fetched and it is not in the cache then NACK the configuration
    update and do a background fetch to fill the cache, otherwise fetch the code asynchronously and enter
    warming state.
    """

    environment_variables: "EnvironmentVariables | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specifies environment variables to be injected to this VM which will be available through
    WASI's ``environ_get`` and ``environ_get_sizes`` system calls. Note that these functions
    are generally called implicitly by your language's standard library. Therefore, you do not
    need to call them directly. You can access environment variables in the same way you would
    on native platforms.

    .. warning::
      Envoy rejects the configuration if there's conflict of key space.
    """


default_message_pool.register_message("envoy.extensions.wasm.v3", "VmConfig", VmConfig)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class WasmService(betterproto2.Message):
    """
    WasmService is configured as a built-in ``envoy.wasm_service`` :ref:`WasmService
    <config_wasm_service>` This opaque configuration will be used to create a Wasm Service.
    """

    config: "PluginConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    General plugin configuration.
    """

    singleton: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, create a single VM rather than creating one VM per worker. Such a singleton can
    not be used with filters.
    """


default_message_pool.register_message(
    "envoy.extensions.wasm.v3", "WasmService", WasmService
)


from .....google import protobuf as ____google__protobuf__
from ....config.core import v3 as ___config__core__v3__
