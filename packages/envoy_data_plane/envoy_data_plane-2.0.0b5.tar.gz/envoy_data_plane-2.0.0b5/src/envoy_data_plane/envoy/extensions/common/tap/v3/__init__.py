# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/common/tap/v3/common.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AdminConfig",
    "CommonExtensionConfig",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AdminConfig(betterproto2.Message):
    """
    Configuration for the admin handler. See :ref:`here <config_http_filters_tap_admin_handler>` for
    more information.
    """

    config_id: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Opaque configuration ID. When requests are made to the admin handler, the passed opaque ID is
    matched to the configured filter opaque ID to determine which filter to configure.
    """


default_message_pool.register_message(
    "envoy.extensions.common.tap.v3", "AdminConfig", AdminConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CommonExtensionConfig(betterproto2.Message):
    """
    [#protodoc-title: Common tap extension configuration]

    Common configuration for all tap extensions.

    Oneofs:
        - config_type:
    """

    admin_config: "AdminConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )
    """
    If specified, the tap filter will be configured via an admin handler.
    """

    static_config: "____config__tap__v3__.TapConfig | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )
    """
    If specified, the tap filter will be configured via a static configuration that cannot be
    changed.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.common.tap.v3", "CommonExtensionConfig", CommonExtensionConfig
)


from .....config.tap import v3 as ____config__tap__v3__
