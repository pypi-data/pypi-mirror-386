# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/outlier_detection_monitors/consecutive_errors/v3/consecutive_errors.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("ConsecutiveErrors",)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ConsecutiveErrors(betterproto2.Message):
    """
    Monitor which counts consecutive errors.
    If number of consecutive errors exceeds the threshold, monitor will report that the host
    is unhealthy.
    [#not-implemented-hide:]
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Monitor name.
    """

    threshold: "int | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    The number of consecutive errors before ejection occurs.
    """

    enforcing: "int | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    The % chance that a host is actually ejected. Defaults to 100.
    """

    error_buckets: "__common__v3__.ErrorBuckets | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Error buckets.
    """


default_message_pool.register_message(
    "envoy.extensions.outlier_detection_monitors.consecutive_errors.v3",
    "ConsecutiveErrors",
    ConsecutiveErrors,
)


from ......google import protobuf as _____google__protobuf__
from ...common import v3 as __common__v3__
