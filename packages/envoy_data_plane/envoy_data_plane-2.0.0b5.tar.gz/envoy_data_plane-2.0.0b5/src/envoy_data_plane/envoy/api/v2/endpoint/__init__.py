# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/api/v2/endpoint/endpoint.proto, envoy/api/v2/endpoint/endpoint_components.proto, envoy/api/v2/endpoint/load_report.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ClusterStats",
    "ClusterStatsDroppedRequests",
    "Endpoint",
    "EndpointHealthCheckConfig",
    "EndpointLoadMetricStats",
    "LbEndpoint",
    "LocalityLbEndpoints",
    "UpstreamEndpointStats",
    "UpstreamLocalityStats",
)

import datetime
import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClusterStats(betterproto2.Message):
    """
    Per cluster load stats. Envoy reports these stats a management server in a
    :ref:`LoadStatsRequest<envoy_api_msg_service.load_stats.v2.LoadStatsRequest>`
    [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
    Next ID: 7
    [#next-free-field: 7]
    """

    cluster_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name of the cluster.
    """

    cluster_service_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    The eds_cluster_config service_name of the cluster.
    It's possible that two clusters send the same service_name to EDS,
    in that case, the management server is supposed to do aggregation on the load reports.
    """

    upstream_locality_stats: "list[UpstreamLocalityStats]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Need at least one.
    """

    total_dropped_requests: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        3, betterproto2.TYPE_UINT64
    )
    """
    Cluster-level stats such as total_successful_requests may be computed by
    summing upstream_locality_stats. In addition, below there are additional
    cluster-wide stats.

    The total number of dropped requests. This covers requests
    deliberately dropped by the drop_overload policy and circuit breaking.
    """

    dropped_requests: "list[ClusterStatsDroppedRequests]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Information about deliberately dropped requests for each category specified
    in the DropOverload policy.
    """

    load_report_interval: "datetime.timedelta | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Period over which the actual load report occurred. This will be guaranteed to include every
    request reported. Due to system load and delays between the *LoadStatsRequest* sent from Envoy
    and the *LoadStatsResponse* message sent from the management server, this may be longer than
    the requested load reporting interval in the *LoadStatsResponse*.
    """


default_message_pool.register_message(
    "envoy.api.v2.endpoint", "ClusterStats", ClusterStats
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClusterStatsDroppedRequests(betterproto2.Message):
    category: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Identifier for the policy specifying the drop.
    """

    dropped_count: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(2, betterproto2.TYPE_UINT64)
    )
    """
    Total number of deliberately dropped requests for the category.
    """


default_message_pool.register_message(
    "envoy.api.v2.endpoint", "ClusterStats.DroppedRequests", ClusterStatsDroppedRequests
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Endpoint(betterproto2.Message):
    """
    [#protodoc-title: Endpoints]

    Upstream host identifier.
    """

    address: "_core__.Address | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The upstream host address.

    .. attention::

      The form of host address depends on the given cluster type. For STATIC or EDS,
      it is expected to be a direct IP address (or something resolvable by the
      specified :ref:`resolver <envoy_api_field_core.SocketAddress.resolver_name>`
      in the Address). For LOGICAL or STRICT DNS, it is expected to be hostname,
      and will be resolved via DNS.
    """

    health_check_config: "EndpointHealthCheckConfig | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The optional health check configuration is used as configuration for the
    health checker to contact the health checked host.

    .. attention::

      This takes into effect only for upstream clusters with
      :ref:`active health checking <arch_overview_health_checking>` enabled.
    """

    hostname: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    The hostname associated with this endpoint. This hostname is not used for routing or address
    resolution. If provided, it will be associated with the endpoint, and can be used for features
    that require a hostname, like
    :ref:`auto_host_rewrite <envoy_api_field_route.RouteAction.auto_host_rewrite>`.
    """


default_message_pool.register_message("envoy.api.v2.endpoint", "Endpoint", Endpoint)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class EndpointHealthCheckConfig(betterproto2.Message):
    """
    The optional health check configuration.
    """

    port_value: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(1, betterproto2.TYPE_UINT32)
    )
    """
    Optional alternative health check port value.

    By default the health check address port of an upstream host is the same
    as the host's serving address port. This provides an alternative health
    check port. Setting this with a non-zero value allows an upstream host
    to have different health check address port.
    """

    hostname: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    By default, the host header for L7 health checks is controlled by cluster level configuration
    (see: :ref:`host <envoy_api_field_core.HealthCheck.HttpHealthCheck.host>` and
    :ref:`authority <envoy_api_field_core.HealthCheck.GrpcHealthCheck.authority>`). Setting this
    to a non-empty value allows overriding the cluster level configuration for a specific
    endpoint.
    """


default_message_pool.register_message(
    "envoy.api.v2.endpoint", "Endpoint.HealthCheckConfig", EndpointHealthCheckConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class EndpointLoadMetricStats(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
    """

    metric_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Name of the metric; may be empty.
    """

    num_requests_finished_with_metric: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        2, betterproto2.TYPE_UINT64
    )
    """
    Number of calls that finished and included this metric.
    """

    total_metric_value: "float" = betterproto2.field(3, betterproto2.TYPE_DOUBLE)
    """
    Sum of metric values across all calls that finished with this metric for
    load_reporting_interval.
    """


default_message_pool.register_message(
    "envoy.api.v2.endpoint", "EndpointLoadMetricStats", EndpointLoadMetricStats
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LbEndpoint(betterproto2.Message):
    """
    An Endpoint that Envoy can route traffic to.
    [#next-free-field: 6]

    Oneofs:
        - host_identifier: Upstream host identifier or a named reference.
    """

    endpoint: "Endpoint | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="host_identifier"
    )

    endpoint_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        5, betterproto2.TYPE_STRING, optional=True, group="host_identifier"
    )
    """
    [#not-implemented-hide:]
    """

    health_status: "_core__.HealthStatus" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: _core__.HealthStatus(0)
    )
    """
    Optional health status when known and supplied by EDS server.
    """

    metadata: "_core__.Metadata | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The endpoint metadata specifies values that may be used by the load
    balancer to select endpoints in a cluster for a given request. The filter
    name should be specified as *envoy.lb*. An example boolean key-value pair
    is *canary*, providing the optional canary status of the upstream host.
    This may be matched against in a route's
    :ref:`RouteAction <envoy_api_msg_route.RouteAction>` metadata_match field
    to subset the endpoints considered in cluster load balancing.
    """

    load_balancing_weight: "int | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    The optional load balancing weight of the upstream host; at least 1.
    Envoy uses the load balancing weight in some of the built in load
    balancers. The load balancing weight for an endpoint is divided by the sum
    of the weights of all endpoints in the endpoint's locality to produce a
    percentage of traffic for the endpoint. This percentage is then further
    weighted by the endpoint's locality's load balancing weight from
    LocalityLbEndpoints. If unspecified, each host is presumed to have equal
    weight in a locality. The sum of the weights of all endpoints in the
    endpoint's locality must not exceed uint32_t maximal value (4294967295).
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message("envoy.api.v2.endpoint", "LbEndpoint", LbEndpoint)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LocalityLbEndpoints(betterproto2.Message):
    """
    A group of endpoints belonging to a Locality.
    One can have multiple LocalityLbEndpoints for a locality, but this is
    generally only done if the different groups need to have different load
    balancing weights or different priorities.
    [#next-free-field: 7]
    """

    locality: "_core__.Locality | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Identifies location of where the upstream hosts run.
    """

    lb_endpoints: "list[LbEndpoint]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The group of endpoints belonging to the locality specified.
    """

    load_balancing_weight: "int | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Optional: Per priority/region/zone/sub_zone weight; at least 1. The load
    balancing weight for a locality is divided by the sum of the weights of all
    localities  at the same priority level to produce the effective percentage
    of traffic for the locality. The sum of the weights of all localities at
    the same priority level must not exceed uint32_t maximal value (4294967295).

    Locality weights are only considered when :ref:`locality weighted load
    balancing <arch_overview_load_balancing_locality_weighted_lb>` is
    configured. These weights are ignored otherwise. If no weights are
    specified when locality weighted load balancing is enabled, the locality is
    assigned no load.
    """

    priority: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(5, betterproto2.TYPE_UINT32)
    )
    """
    Optional: the priority for this LocalityLbEndpoints. If unspecified this will
    default to the highest priority (0).

    Under usual circumstances, Envoy will only select endpoints for the highest
    priority (0). In the event all endpoints for a particular priority are
    unavailable/unhealthy, Envoy will fail over to selecting endpoints for the
    next highest priority group.

    Priorities should range from 0 (highest) to N (lowest) without skipping.
    """

    proximity: "int | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Optional: Per locality proximity value which indicates how close this
    locality is from the source locality. This value only provides ordering
    information (lower the value, closer it is to the source locality).
    This will be consumed by load balancing schemes that need proximity order
    to determine where to route the requests.
    [#not-implemented-hide:]
    """


default_message_pool.register_message(
    "envoy.api.v2.endpoint", "LocalityLbEndpoints", LocalityLbEndpoints
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class UpstreamEndpointStats(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
    [#next-free-field: 8]
    """

    address: "_core__.Address | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Upstream host address.
    """

    metadata: "____google__protobuf__.Struct | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Opaque and implementation dependent metadata of the
    endpoint. Envoy will pass this directly to the management server.
    """

    total_successful_requests: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        2, betterproto2.TYPE_UINT64
    )
    """
    The total number of requests successfully completed by the endpoints in the
    locality. These include non-5xx responses for HTTP, where errors
    originate at the client and the endpoint responded successfully. For gRPC,
    the grpc-status values are those not covered by total_error_requests below.
    """

    total_requests_in_progress: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        3, betterproto2.TYPE_UINT64
    )
    """
    The total number of unfinished requests for this endpoint.
    """

    total_error_requests: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        4, betterproto2.TYPE_UINT64
    )
    """
    The total number of requests that failed due to errors at the endpoint.
    For HTTP these are responses with 5xx status codes and for gRPC the
    grpc-status values:

      - DeadlineExceeded
      - Unimplemented
      - Internal
      - Unavailable
      - Unknown
      - DataLoss
    """

    total_issued_requests: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        7, betterproto2.TYPE_UINT64
    )
    """
    The total number of requests that were issued to this endpoint
    since the last report. A single TCP connection, HTTP or gRPC
    request or stream is counted as one request.
    """

    load_metric_stats: "list[EndpointLoadMetricStats]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Stats for multi-dimensional load balancing.
    """


default_message_pool.register_message(
    "envoy.api.v2.endpoint", "UpstreamEndpointStats", UpstreamEndpointStats
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class UpstreamLocalityStats(betterproto2.Message):
    """
    These are stats Envoy reports to GLB every so often. Report frequency is
    defined by
    :ref:`LoadStatsResponse.load_reporting_interval<envoy_api_field_service.load_stats.v2.LoadStatsResponse.load_reporting_interval>`.
    Stats per upstream region/zone and optionally per subzone.
    [#not-implemented-hide:] Not configuration. TBD how to doc proto APIs.
    [#next-free-field: 9]
    """

    locality: "_core__.Locality | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Name of zone, region and optionally endpoint group these metrics were
    collected from. Zone and region names could be empty if unknown.
    """

    total_successful_requests: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        2, betterproto2.TYPE_UINT64
    )
    """
    The total number of requests successfully completed by the endpoints in the
    locality.
    """

    total_requests_in_progress: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        3, betterproto2.TYPE_UINT64
    )
    """
    The total number of unfinished requests
    """

    total_error_requests: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        4, betterproto2.TYPE_UINT64
    )
    """
    The total number of requests that failed due to errors at the endpoint,
    aggregated over all endpoints in the locality.
    """

    total_issued_requests: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        8, betterproto2.TYPE_UINT64
    )
    """
    The total number of requests that were issued by this Envoy since
    the last report. This information is aggregated over all the
    upstream endpoints in the locality.
    """

    load_metric_stats: "list[EndpointLoadMetricStats]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Stats for multi-dimensional load balancing.
    """

    upstream_endpoint_stats: "list[UpstreamEndpointStats]" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Endpoint granularity stats information for this locality. This information
    is populated if the Server requests it by setting
    :ref:`LoadStatsResponse.report_endpoint_granularity<envoy_api_field_service.load_stats.v2.LoadStatsResponse.report_endpoint_granularity>`.
    """

    priority: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(6, betterproto2.TYPE_UINT32)
    )
    """
    [#not-implemented-hide:] The priority of the endpoint group these metrics
    were collected from.
    """


default_message_pool.register_message(
    "envoy.api.v2.endpoint", "UpstreamLocalityStats", UpstreamLocalityStats
)


from .....google import protobuf as ____google__protobuf__
from .. import core as _core__
