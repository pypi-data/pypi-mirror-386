# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/api/v2/ratelimit/ratelimit.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "RateLimitDescriptor",
    "RateLimitDescriptorEntry",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RateLimitDescriptor(betterproto2.Message):
    """
    [#protodoc-title: Common rate limit components]

    A RateLimitDescriptor is a list of hierarchical entries that are used by the service to
    determine the final rate limit key and overall allowed limit. Here are some examples of how
    they might be used for the domain "envoy".

    .. code-block:: cpp

      ["authenticated": "false"], ["remote_address": "10.0.0.1"]

    What it does: Limits all unauthenticated traffic for the IP address 10.0.0.1. The
    configuration supplies a default limit for the *remote_address* key. If there is a desire to
    raise the limit for 10.0.0.1 or block it entirely it can be specified directly in the
    configuration.

    .. code-block:: cpp

      ["authenticated": "false"], ["path": "/foo/bar"]

    What it does: Limits all unauthenticated traffic globally for a specific path (or prefix if
    configured that way in the service).

    .. code-block:: cpp

      ["authenticated": "false"], ["path": "/foo/bar"], ["remote_address": "10.0.0.1"]

    What it does: Limits unauthenticated traffic to a specific path for a specific IP address.
    Like (1) we can raise/block specific IP addresses if we want with an override configuration.

    .. code-block:: cpp

      ["authenticated": "true"], ["client_id": "foo"]

    What it does: Limits all traffic for an authenticated client "foo"

    .. code-block:: cpp

      ["authenticated": "true"], ["client_id": "foo"], ["path": "/foo/bar"]

    What it does: Limits traffic to a specific path for an authenticated client "foo"

    The idea behind the API is that (1)/(2)/(3) and (4)/(5) can be sent in 1 request if desired.
    This enables building complex application scenarios with a generic backend.
    """

    entries: "list[RateLimitDescriptorEntry]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Descriptor entries.
    """


default_message_pool.register_message(
    "envoy.api.v2.ratelimit", "RateLimitDescriptor", RateLimitDescriptor
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RateLimitDescriptorEntry(betterproto2.Message):
    key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Descriptor key.
    """

    value: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Descriptor value.
    """


default_message_pool.register_message(
    "envoy.api.v2.ratelimit", "RateLimitDescriptor.Entry", RateLimitDescriptorEntry
)
