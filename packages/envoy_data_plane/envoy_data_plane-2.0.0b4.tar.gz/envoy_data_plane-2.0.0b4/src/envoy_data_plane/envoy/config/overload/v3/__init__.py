# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/overload/v3/overload.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "BufferFactoryConfig",
    "LoadShedPoint",
    "OverloadAction",
    "OverloadManager",
    "ResourceMonitor",
    "ScaleTimersOverloadActionConfig",
    "ScaleTimersOverloadActionConfigScaleTimer",
    "ScaleTimersOverloadActionConfigTimerType",
    "ScaledTrigger",
    "ThresholdTrigger",
    "Trigger",
)

import datetime
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ScaleTimersOverloadActionConfigTimerType(betterproto2.Enum):
    UNSPECIFIED = 0
    """
    Unsupported value; users must explicitly specify the timer they want scaled.
    """

    HTTP_DOWNSTREAM_CONNECTION_IDLE = 1
    """
    Adjusts the idle timer for downstream HTTP connections that takes effect when there are no active streams.
    This affects the value of :ref:`HttpConnectionManager.common_http_protocol_options.idle_timeout
    <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.idle_timeout>`
    """

    HTTP_DOWNSTREAM_STREAM_IDLE = 2
    """
    Adjusts the idle timer for HTTP streams initiated by downstream clients.
    This affects the value of :ref:`RouteAction.idle_timeout <envoy_v3_api_field_config.route.v3.RouteAction.idle_timeout>` and
    :ref:`HttpConnectionManager.stream_idle_timeout
    <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_idle_timeout>`
    """

    TRANSPORT_SOCKET_CONNECT = 3
    """
    Adjusts the timer for how long downstream clients have to finish transport-level negotiations
    before the connection is closed.
    This affects the value of
    :ref:`FilterChain.transport_socket_connect_timeout <envoy_v3_api_field_config.listener.v3.FilterChain.transport_socket_connect_timeout>`.
    """

    HTTP_DOWNSTREAM_CONNECTION_MAX = 4
    """
    Adjusts the max connection duration timer for downstream HTTP connections.
    This affects the value of
    :ref:`HttpConnectionManager.common_http_protocol_options.max_connection_duration
    <envoy_v3_api_field_config.core.v3.HttpProtocolOptions.max_connection_duration>`.
    """

    HTTP_DOWNSTREAM_STREAM_FLUSH = 5
    """
    Adjusts the timeout for the downstream codec to flush an ended stream.
    This affects the value of :ref:`RouteAction.flush_timeout
    <envoy_v3_api_field_config.route.v3.RouteAction.flush_timeout>` and
    :ref:`HttpConnectionManager.stream_flush_timeout
    <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.stream_flush_timeout>`
    """


@dataclass(eq=False, repr=False)
class BufferFactoryConfig(betterproto2.Message):
    """
    Configuration for which accounts the WatermarkBuffer Factories should
    track.
    """

    minimum_account_to_track_power_of_two: "int" = betterproto2.field(
        1, betterproto2.TYPE_UINT32
    )
    """
    The minimum power of two at which Envoy starts tracking an account.

    Envoy has 8 power of two buckets starting with the provided exponent below.
    Concretely the 1st bucket contains accounts for streams that use
    [2^minimum_account_to_track_power_of_two,
    2^(minimum_account_to_track_power_of_two + 1)) bytes.
    With the 8th bucket tracking accounts
    >= 128 * 2^minimum_account_to_track_power_of_two.

    The maximum value is 56, since we're using uint64_t for bytes counting,
    and that's the last value that would use the 8 buckets. In practice,
    we don't expect the proxy to be holding 2^56 bytes.

    If omitted, Envoy should not do any tracking.
    """


default_message_pool.register_message(
    "envoy.config.overload.v3", "BufferFactoryConfig", BufferFactoryConfig
)


@dataclass(eq=False, repr=False)
class LoadShedPoint(betterproto2.Message):
    """
    A point within the connection or request lifecycle that provides context on
    whether to shed load at that given stage for the current entity at the
    point.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    This is just a well-known string for the LoadShedPoint.
    Deployment specific LoadShedPoints e.g. within a custom extension should
    be prefixed by the company / deployment name to avoid colliding with any
    open source LoadShedPoints.
    """

    triggers: "list[Trigger]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A set of triggers for this LoadShedPoint. The LoadShedPoint will use the
    the maximum state of all triggers, which can be scalar values between 0 and
    1 or saturated. A LoadShedPoint can only have one trigger for a given
    resource e.g. :ref:`Trigger.name
    <envoy_v3_api_field_config.overload.v3.Trigger.name>` must be unique in
    this list.
    """


default_message_pool.register_message(
    "envoy.config.overload.v3", "LoadShedPoint", LoadShedPoint
)


@dataclass(eq=False, repr=False)
class OverloadAction(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the overload action. This is just a well-known string that
    listeners can use for registering callbacks.
    Valid known overload actions include:
    - envoy.overload_actions.stop_accepting_requests
    - envoy.overload_actions.disable_http_keepalive
    - envoy.overload_actions.stop_accepting_connections
    - envoy.overload_actions.reject_incoming_connections
    - envoy.overload_actions.shrink_heap
    - envoy.overload_actions.reduce_timeouts
    - envoy.overload_actions.reset_high_memory_stream
    """

    triggers: "list[Trigger]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A set of triggers for this action. The state of the action is the maximum
    state of all triggers, which can be scalar values between 0 and 1 or
    saturated. Listeners are notified when the overload action changes state.
    An overload manager action can only have one trigger for a given resource
    e.g. :ref:`Trigger.name
    <envoy_v3_api_field_config.overload.v3.Trigger.name>` must be unique
    in this list.
    """

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for the action being instantiated if applicable.
    """


default_message_pool.register_message(
    "envoy.config.overload.v3", "OverloadAction", OverloadAction
)


@dataclass(eq=False, repr=False)
class OverloadManager(betterproto2.Message):
    """
    [#next-free-field: 6]
    """

    refresh_interval: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    The interval for refreshing resource usage.
    """

    resource_monitors: "list[ResourceMonitor]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set of resources to monitor.
    """

    actions: "list[OverloadAction]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set of overload actions.
    """

    loadshed_points: "list[LoadShedPoint]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set of load shed points.
    """

    buffer_factory_config: "BufferFactoryConfig | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for buffer factory.
    """


default_message_pool.register_message(
    "envoy.config.overload.v3", "OverloadManager", OverloadManager
)


@dataclass(eq=False, repr=False)
class ResourceMonitor(betterproto2.Message):
    """
    [#protodoc-title: Overload Manager]

    The Overload Manager provides an extensible framework to protect Envoy instances
    from overload of various resources (memory, cpu, file descriptors, etc).
    It monitors a configurable set of resources and notifies registered listeners
    when triggers related to those resources fire.

    Oneofs:
        - config_type: Configuration for the resource monitor being instantiated.
            [#extension-category: envoy.resource_monitors]
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the resource monitor to instantiate. Must match a registered
    resource monitor type.
    See the :ref:`extensions listed in typed_config below <extension_category_envoy.resource_monitors>` for the default list of available resource monitor.
    """

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )


default_message_pool.register_message(
    "envoy.config.overload.v3", "ResourceMonitor", ResourceMonitor
)


@dataclass(eq=False, repr=False)
class ScaledTrigger(betterproto2.Message):
    scaling_threshold: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)
    """
    If the resource pressure is greater than this value, the trigger will be in the
    :ref:`scaling <arch_overview_overload_manager-triggers-state>` state with value
    ``(pressure - scaling_threshold) / (saturation_threshold - scaling_threshold)``.
    """

    saturation_threshold: "float" = betterproto2.field(2, betterproto2.TYPE_DOUBLE)
    """
    If the resource pressure is greater than this value, the trigger will enter saturation.
    """


default_message_pool.register_message(
    "envoy.config.overload.v3", "ScaledTrigger", ScaledTrigger
)


@dataclass(eq=False, repr=False)
class ScaleTimersOverloadActionConfig(betterproto2.Message):
    """
    Typed configuration for the "envoy.overload_actions.reduce_timeouts" action. See
    :ref:`the docs <config_overload_manager_reducing_timeouts>` for an example of how to configure
    the action with different timeouts and minimum values.
    """

    timer_scale_factors: "list[ScaleTimersOverloadActionConfigScaleTimer]" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    A set of timer scaling rules to be applied.
    """


default_message_pool.register_message(
    "envoy.config.overload.v3",
    "ScaleTimersOverloadActionConfig",
    ScaleTimersOverloadActionConfig,
)


@dataclass(eq=False, repr=False)
class ScaleTimersOverloadActionConfigScaleTimer(betterproto2.Message):
    """


    Oneofs:
        - overload_adjust:
    """

    timer: "ScaleTimersOverloadActionConfigTimerType" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ScaleTimersOverloadActionConfigTimerType(0),
    )
    """
    The type of timer this minimum applies to.
    """

    min_timeout: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
        group="overload_adjust",
    )
    """
    Sets the minimum duration as an absolute value.
    """

    min_scale: "___type__v3__.Percent | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="overload_adjust"
    )
    """
    Sets the minimum duration as a percentage of the maximum value.
    """


default_message_pool.register_message(
    "envoy.config.overload.v3",
    "ScaleTimersOverloadActionConfig.ScaleTimer",
    ScaleTimersOverloadActionConfigScaleTimer,
)


@dataclass(eq=False, repr=False)
class ThresholdTrigger(betterproto2.Message):
    value: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)
    """
    If the resource pressure is greater than or equal to this value, the trigger
    will enter saturation.
    """


default_message_pool.register_message(
    "envoy.config.overload.v3", "ThresholdTrigger", ThresholdTrigger
)


@dataclass(eq=False, repr=False)
class Trigger(betterproto2.Message):
    """


    Oneofs:
        - trigger_oneof:
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the resource this is a trigger for.
    """

    threshold: "ThresholdTrigger | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="trigger_oneof"
    )

    scaled: "ScaledTrigger | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="trigger_oneof"
    )


default_message_pool.register_message("envoy.config.overload.v3", "Trigger", Trigger)


from .....google import protobuf as ____google__protobuf__
from ....type import v3 as ___type__v3__
