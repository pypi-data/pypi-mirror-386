# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/fault/v2/fault.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "FaultDelay",
    "FaultDelayFaultDelayType",
    "FaultDelayHeaderDelay",
    "FaultRateLimit",
    "FaultRateLimitFixedLimit",
    "FaultRateLimitHeaderLimit",
)

import datetime
import warnings
from dataclasses import dataclass

import betterproto2

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class FaultDelayFaultDelayType(betterproto2.Enum):
    FIXED = 0
    """
    Unused and deprecated.
    """


@dataclass(eq=False, repr=False)
class FaultDelay(betterproto2.Message):
    """
    [#protodoc-title: Common fault injection types]

    Delay specification is used to inject latency into the
    HTTP/gRPC/Mongo/Redis operation or delay proxying of TCP connections.
    [#next-free-field: 6]

    Oneofs:
        - fault_delay_secifier:
    """

    type: "FaultDelayFaultDelayType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: FaultDelayFaultDelayType(0)
    )
    """
    Unused and deprecated. Will be removed in the next release.
    """

    fixed_delay: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.Duration,
        optional=True,
        group="fault_delay_secifier",
    )
    """
    Add a fixed delay before forwarding the operation upstream. See
    https://developers.google.com/protocol-buffers/docs/proto3#json for
    the JSON/YAML Duration mapping. For HTTP/Mongo/Redis, the specified
    delay will be injected before a new request/operation. For TCP
    connections, the proxying of the connection upstream will be delayed
    for the specified period. This is required if type is FIXED.
    """

    header_delay: "FaultDelayHeaderDelay | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="fault_delay_secifier"
    )
    """
    Fault delays are controlled via an HTTP header (if applicable).
    """

    percentage: "____type__.FractionalPercent | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The percentage of operations/connections/requests on which the delay will be injected.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("type"):
            warnings.warn("FaultDelay.type is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.config.filter.fault.v2", "FaultDelay", FaultDelay
)


@dataclass(eq=False, repr=False)
class FaultDelayHeaderDelay(betterproto2.Message):
    """
    Fault delays are controlled via an HTTP header (if applicable). See the
    :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
    more information.
    """

    pass


default_message_pool.register_message(
    "envoy.config.filter.fault.v2", "FaultDelay.HeaderDelay", FaultDelayHeaderDelay
)


@dataclass(eq=False, repr=False)
class FaultRateLimit(betterproto2.Message):
    """
    Describes a rate limit to be applied.

    Oneofs:
        - limit_type:
    """

    fixed_limit: "FaultRateLimitFixedLimit | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="limit_type"
    )
    """
    A fixed rate limit.
    """

    header_limit: "FaultRateLimitHeaderLimit | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="limit_type"
    )
    """
    Rate limits are controlled via an HTTP header (if applicable).
    """

    percentage: "____type__.FractionalPercent | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The percentage of operations/connections/requests on which the rate limit will be injected.
    """


default_message_pool.register_message(
    "envoy.config.filter.fault.v2", "FaultRateLimit", FaultRateLimit
)


@dataclass(eq=False, repr=False)
class FaultRateLimitFixedLimit(betterproto2.Message):
    """
    Describes a fixed/constant rate limit.
    """

    limit_kbps: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    The limit supplied in KiB/s.
    """


default_message_pool.register_message(
    "envoy.config.filter.fault.v2",
    "FaultRateLimit.FixedLimit",
    FaultRateLimitFixedLimit,
)


@dataclass(eq=False, repr=False)
class FaultRateLimitHeaderLimit(betterproto2.Message):
    """
    Rate limits are controlled via an HTTP header (if applicable). See the
    :ref:`HTTP fault filter <config_http_filters_fault_injection_http_header>` documentation for
    more information.
    """

    pass


default_message_pool.register_message(
    "envoy.config.filter.fault.v2",
    "FaultRateLimit.HeaderLimit",
    FaultRateLimitHeaderLimit,
)


from ......google import protobuf as _____google__protobuf__
from ..... import type as ____type__
