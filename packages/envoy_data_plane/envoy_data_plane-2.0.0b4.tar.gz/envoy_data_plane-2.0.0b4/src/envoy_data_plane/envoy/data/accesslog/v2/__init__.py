# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/data/accesslog/v2/accesslog.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AccessLogCommon",
    "ConnectionProperties",
    "HttpAccessLogEntry",
    "HttpAccessLogEntryHttpVersion",
    "HttpRequestProperties",
    "HttpResponseProperties",
    "ResponseFlags",
    "ResponseFlagsUnauthorized",
    "ResponseFlagsUnauthorizedReason",
    "TcpAccessLogEntry",
    "TlsProperties",
    "TlsPropertiesCertificateProperties",
    "TlsPropertiesCertificatePropertiesSubjectAltName",
    "TlsPropertiesTlsVersion",
)

import datetime
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class HttpAccessLogEntryHttpVersion(betterproto2.Enum):
    """
    HTTP version
    """

    PROTOCOL_UNSPECIFIED = 0

    HTTP10 = 1

    HTTP11 = 2

    HTTP2 = 3

    HTTP3 = 4


class ResponseFlagsUnauthorizedReason(betterproto2.Enum):
    """
    Reasons why the request was unauthorized
    """

    REASON_UNSPECIFIED = 0

    EXTERNAL_SERVICE = 1
    """
    The request was denied by the external authorization service.
    """


class TlsPropertiesTlsVersion(betterproto2.Enum):
    VERSION_UNSPECIFIED = 0

    TLSv1 = 1

    TLSv1_1 = 2

    TLSv1_2 = 3

    TLSv1_3 = 4


@dataclass(eq=False, repr=False)
class AccessLogCommon(betterproto2.Message):
    """
    Defines fields that are shared by all Envoy access logs.
    [#next-free-field: 22]
    """

    sample_rate: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)
    """
    [#not-implemented-hide:]
    This field indicates the rate at which this log entry was sampled.
    Valid range is (0.0, 1.0].
    """

    downstream_remote_address: "___api__v2__core__.Address | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This field is the remote/origin address on which the request from the user was received.
    Note: This may not be the physical peer. E.g, if the remote address is inferred from for
    example the x-forwarder-for header, proxy protocol, etc.
    """

    downstream_local_address: "___api__v2__core__.Address | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This field is the local/destination address on which the request from the user was received.
    """

    tls_properties: "TlsProperties | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If the connection is secure,S this field will contain TLS properties.
    """

    start_time: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The time that Envoy started servicing this request. This is effectively the time that the first
    downstream byte is received.
    """

    time_to_last_rx_byte: "datetime.timedelta | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval between the first downstream byte received and the last
    downstream byte received (i.e. time it takes to receive a request).
    """

    time_to_first_upstream_tx_byte: "datetime.timedelta | None" = betterproto2.field(
        7,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval between the first downstream byte received and the first upstream byte sent. There may
    by considerable delta between *time_to_last_rx_byte* and this value due to filters.
    Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
    not accounting for kernel socket buffer time, etc.
    """

    time_to_last_upstream_tx_byte: "datetime.timedelta | None" = betterproto2.field(
        8,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval between the first downstream byte received and the last upstream byte sent. There may
    by considerable delta between *time_to_last_rx_byte* and this value due to filters.
    Additionally, the same caveats apply as documented in *time_to_last_downstream_tx_byte* about
    not accounting for kernel socket buffer time, etc.
    """

    time_to_first_upstream_rx_byte: "datetime.timedelta | None" = betterproto2.field(
        9,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval between the first downstream byte received and the first upstream
    byte received (i.e. time it takes to start receiving a response).
    """

    time_to_last_upstream_rx_byte: "datetime.timedelta | None" = betterproto2.field(
        10,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval between the first downstream byte received and the last upstream
    byte received (i.e. time it takes to receive a complete response).
    """

    time_to_first_downstream_tx_byte: "datetime.timedelta | None" = betterproto2.field(
        11,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval between the first downstream byte received and the first downstream byte sent.
    There may be a considerable delta between the *time_to_first_upstream_rx_byte* and this field
    due to filters. Additionally, the same caveats apply as documented in
    *time_to_last_downstream_tx_byte* about not accounting for kernel socket buffer time, etc.
    """

    time_to_last_downstream_tx_byte: "datetime.timedelta | None" = betterproto2.field(
        12,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval between the first downstream byte received and the last downstream byte sent.
    Depending on protocol, buffering, windowing, filters, etc. there may be a considerable delta
    between *time_to_last_upstream_rx_byte* and this field. Note also that this is an approximate
    time. In the current implementation it does not include kernel socket buffer time. In the
    current implementation it also does not include send window buffering inside the HTTP/2 codec.
    In the future it is likely that work will be done to make this duration more accurate.
    """

    upstream_remote_address: "___api__v2__core__.Address | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The upstream remote/destination address that handles this exchange. This does not include
    retries.
    """

    upstream_local_address: "___api__v2__core__.Address | None" = betterproto2.field(
        14, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The upstream local/origin address that handles this exchange. This does not include retries.
    """

    upstream_cluster: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)
    """
    The upstream cluster that *upstream_remote_address* belongs to.
    """

    response_flags: "ResponseFlags | None" = betterproto2.field(
        16, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Flags indicating occurrences during request/response processing.
    """

    metadata: "___api__v2__core__.Metadata | None" = betterproto2.field(
        17, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    All metadata encountered during request processing, including endpoint
    selection.

    This can be used to associate IDs attached to the various configurations
    used to process this request with the access log entry. For example, a
    route created from a higher level forwarding rule with some ID can place
    that ID in this field and cross reference later. It can also be used to
    determine if a canary endpoint was used or not.
    """

    upstream_transport_failure_reason: "str" = betterproto2.field(
        18, betterproto2.TYPE_STRING
    )
    """
    If upstream connection failed due to transport socket (e.g. TLS handshake), provides the
    failure reason from the transport socket. The format of this field depends on the configured
    upstream transport socket. Common TLS failures are in
    :ref:`TLS trouble shooting <arch_overview_ssl_trouble_shooting>`.
    """

    route_name: "str" = betterproto2.field(19, betterproto2.TYPE_STRING)
    """
    The name of the route
    """

    downstream_direct_remote_address: "___api__v2__core__.Address | None" = (
        betterproto2.field(20, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    This field is the downstream direct remote address on which the request from the user was
    received. Note: This is always the physical peer, even if the remote address is inferred from
    for example the x-forwarder-for header, proxy protocol, etc.
    """

    filter_state_objects: "dict[str, ____google__protobuf__.Any]" = betterproto2.field(
        21,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE
        ),
    )
    """
    Map of filter state in stream info that have been configured to be logged. If the filter
    state serialized to any message other than `google.protobuf.Any` it will be packed into
    `google.protobuf.Any`.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "AccessLogCommon", AccessLogCommon
)


@dataclass(eq=False, repr=False)
class ConnectionProperties(betterproto2.Message):
    """
    Defines fields for a connection
    """

    received_bytes: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    Number of bytes received from downstream.
    """

    sent_bytes: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    Number of bytes sent to downstream.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "ConnectionProperties", ConnectionProperties
)


@dataclass(eq=False, repr=False)
class HttpAccessLogEntry(betterproto2.Message):
    common_properties: "AccessLogCommon | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Common properties shared by all Envoy access logs.
    """

    protocol_version: "HttpAccessLogEntryHttpVersion" = betterproto2.field(
        2,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: HttpAccessLogEntryHttpVersion(0),
    )

    request: "HttpRequestProperties | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Description of the incoming HTTP request.
    """

    response: "HttpResponseProperties | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Description of the outgoing HTTP response.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "HTTPAccessLogEntry", HttpAccessLogEntry
)


@dataclass(eq=False, repr=False)
class HttpRequestProperties(betterproto2.Message):
    """
    [#next-free-field: 14]
    """

    request_method: "___api__v2__core__.RequestMethod" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ___api__v2__core__.RequestMethod(0),
    )
    """
    The request method (RFC 7231/2616).
    """

    scheme: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The scheme portion of the incoming request URI.
    """

    authority: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    HTTP/2 ``:authority`` or HTTP/1.1 ``Host`` header value.
    """

    port: "int | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    The port of the incoming request URI
    (unused currently, as port is composed onto authority).
    """

    path: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    The path portion from the incoming request URI.
    """

    user_agent: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    Value of the ``User-Agent`` request header.
    """

    referer: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    Value of the ``Referer`` request header.
    """

    forwarded_for: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    Value of the ``X-Forwarded-For`` request header.
    """

    request_id: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)
    """
    Value of the ``X-Request-Id`` request header

    This header is used by Envoy to uniquely identify a request.
    It will be generated for all external requests and internal requests that
    do not already have a request ID.
    """

    original_path: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)
    """
    Value of the ``X-Envoy-Original-Path`` request header.
    """

    request_headers_bytes: "int" = betterproto2.field(11, betterproto2.TYPE_UINT64)
    """
    Size of the HTTP request headers in bytes.

    This value is captured from the OSI layer 7 perspective, i.e. it does not
    include overhead from framing or encoding at other networking layers.
    """

    request_body_bytes: "int" = betterproto2.field(12, betterproto2.TYPE_UINT64)
    """
    Size of the HTTP request body in bytes.

    This value is captured from the OSI layer 7 perspective, i.e. it does not
    include overhead from framing or encoding at other networking layers.
    """

    request_headers: "dict[str, str]" = betterproto2.field(
        13,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    Map of additional headers that have been configured to be logged.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "HTTPRequestProperties", HttpRequestProperties
)


@dataclass(eq=False, repr=False)
class HttpResponseProperties(betterproto2.Message):
    """
    [#next-free-field: 7]
    """

    response_code: "int | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    The HTTP response code returned by Envoy.
    """

    response_headers_bytes: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    Size of the HTTP response headers in bytes.

    This value is captured from the OSI layer 7 perspective, i.e. it does not
    include overhead from framing or encoding at other networking layers.
    """

    response_body_bytes: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    Size of the HTTP response body in bytes.

    This value is captured from the OSI layer 7 perspective, i.e. it does not
    include overhead from framing or encoding at other networking layers.
    """

    response_headers: "dict[str, str]" = betterproto2.field(
        4,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    Map of additional headers configured to be logged.
    """

    response_trailers: "dict[str, str]" = betterproto2.field(
        5,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    Map of trailers configured to be logged.
    """

    response_code_details: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The HTTP response code details.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "HTTPResponseProperties", HttpResponseProperties
)


@dataclass(eq=False, repr=False)
class ResponseFlags(betterproto2.Message):
    """
    Flags indicating occurrences during request/response processing.
    [#next-free-field: 20]
    """

    failed_local_healthcheck: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    Indicates local server healthcheck failed.
    """

    no_healthy_upstream: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Indicates there was no healthy upstream.
    """

    upstream_request_timeout: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Indicates an there was an upstream request timeout.
    """

    local_reset: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    Indicates local codec level reset was sent on the stream.
    """

    upstream_remote_reset: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    Indicates remote codec level reset was received on the stream.
    """

    upstream_connection_failure: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    Indicates there was a local reset by a connection pool due to an initial connection failure.
    """

    upstream_connection_termination: "bool" = betterproto2.field(
        7, betterproto2.TYPE_BOOL
    )
    """
    Indicates the stream was reset due to an upstream connection termination.
    """

    upstream_overflow: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    Indicates the stream was reset because of a resource overflow.
    """

    no_route_found: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    Indicates no route was found for the request.
    """

    delay_injected: "bool" = betterproto2.field(10, betterproto2.TYPE_BOOL)
    """
    Indicates that the request was delayed before proxying.
    """

    fault_injected: "bool" = betterproto2.field(11, betterproto2.TYPE_BOOL)
    """
    Indicates that the request was aborted with an injected error code.
    """

    rate_limited: "bool" = betterproto2.field(12, betterproto2.TYPE_BOOL)
    """
    Indicates that the request was rate-limited locally.
    """

    unauthorized_details: "ResponseFlagsUnauthorized | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Indicates if the request was deemed unauthorized and the reason for it.
    """

    rate_limit_service_error: "bool" = betterproto2.field(14, betterproto2.TYPE_BOOL)
    """
    Indicates that the request was rejected because there was an error in rate limit service.
    """

    downstream_connection_termination: "bool" = betterproto2.field(
        15, betterproto2.TYPE_BOOL
    )
    """
    Indicates the stream was reset due to a downstream connection termination.
    """

    upstream_retry_limit_exceeded: "bool" = betterproto2.field(
        16, betterproto2.TYPE_BOOL
    )
    """
    Indicates that the upstream retry limit was exceeded, resulting in a downstream error.
    """

    stream_idle_timeout: "bool" = betterproto2.field(17, betterproto2.TYPE_BOOL)
    """
    Indicates that the stream idle timeout was hit, resulting in a downstream 408.
    """

    invalid_envoy_request_headers: "bool" = betterproto2.field(
        18, betterproto2.TYPE_BOOL
    )
    """
    Indicates that the request was rejected because an envoy request header failed strict
    validation.
    """

    downstream_protocol_error: "bool" = betterproto2.field(19, betterproto2.TYPE_BOOL)
    """
    Indicates there was an HTTP protocol error on the downstream request.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "ResponseFlags", ResponseFlags
)


@dataclass(eq=False, repr=False)
class ResponseFlagsUnauthorized(betterproto2.Message):
    reason: "ResponseFlagsUnauthorizedReason" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ResponseFlagsUnauthorizedReason(0),
    )


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "ResponseFlags.Unauthorized", ResponseFlagsUnauthorized
)


@dataclass(eq=False, repr=False)
class TcpAccessLogEntry(betterproto2.Message):
    """
    [#protodoc-title: gRPC access logs]
    Envoy access logs describe incoming interaction with Envoy over a fixed
    period of time, and typically cover a single request/response exchange,
    (e.g. HTTP), stream (e.g. over HTTP/gRPC), or proxied connection (e.g. TCP).
    Access logs contain fields defined in protocol-specific protobuf messages.

    Except where explicitly declared otherwise, all fields describe
    *downstream* interaction between Envoy and a connected client.
    Fields describing *upstream* interaction will explicitly include ``upstream``
    in their name.
    """

    common_properties: "AccessLogCommon | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Common properties shared by all Envoy access logs.
    """

    connection_properties: "ConnectionProperties | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Properties of the TCP connection.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "TCPAccessLogEntry", TcpAccessLogEntry
)


@dataclass(eq=False, repr=False)
class TlsProperties(betterproto2.Message):
    """
    Properties of a negotiated TLS connection.
    [#next-free-field: 7]
    """

    tls_version: "TlsPropertiesTlsVersion" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: TlsPropertiesTlsVersion(0)
    )
    """
    Version of TLS that was negotiated.
    """

    tls_cipher_suite: "int | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    TLS cipher suite negotiated during handshake. The value is a
    four-digit hex code defined by the IANA TLS Cipher Suite Registry
    (e.g. ``009C`` for ``TLS_RSA_WITH_AES_128_GCM_SHA256``).

    Here it is expressed as an integer.
    """

    tls_sni_hostname: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    SNI hostname from handshake.
    """

    local_certificate_properties: "TlsPropertiesCertificateProperties | None" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Properties of the local certificate used to negotiate TLS.
    """

    peer_certificate_properties: "TlsPropertiesCertificateProperties | None" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Properties of the peer certificate used to negotiate TLS.
    """

    tls_session_id: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    The TLS session ID.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2", "TLSProperties", TlsProperties
)


@dataclass(eq=False, repr=False)
class TlsPropertiesCertificateProperties(betterproto2.Message):
    subject_alt_name: "list[TlsPropertiesCertificatePropertiesSubjectAltName]" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    SANs present in the certificate.
    """

    subject: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The subject field of the certificate.
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2",
    "TLSProperties.CertificateProperties",
    TlsPropertiesCertificateProperties,
)


@dataclass(eq=False, repr=False)
class TlsPropertiesCertificatePropertiesSubjectAltName(betterproto2.Message):
    """


    Oneofs:
        - san:
    """

    uri: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="san"
    )

    dns: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="san"
    )
    """
    [#not-implemented-hide:]
    """


default_message_pool.register_message(
    "envoy.data.accesslog.v2",
    "TLSProperties.CertificateProperties.SubjectAltName",
    TlsPropertiesCertificatePropertiesSubjectAltName,
)


from .....google import protobuf as ____google__protobuf__
from ....api.v2 import core as ___api__v2__core__
