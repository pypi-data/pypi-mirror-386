# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/endpoint/v3/eds.proto, envoy/service/endpoint/v3/leds.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "EdsDummy",
    "EndpointDiscoveryServiceAsyncStub",
    "EndpointDiscoveryServiceBase",
    "EndpointDiscoveryServiceSyncStub",
    "LedsDummy",
    "LocalityEndpointDiscoveryServiceAsyncStub",
    "LocalityEndpointDiscoveryServiceBase",
    "LocalityEndpointDiscoveryServiceSyncStub",
)

from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2 import grpclib as betterproto2_grpclib

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class EdsDummy(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
    services: https://github.com/google/protobuf/issues/4221 and protoxform to upgrade the file.
    """

    pass


default_message_pool.register_message("envoy.service.endpoint.v3", "EdsDummy", EdsDummy)


@dataclass(eq=False, repr=False)
class LedsDummy(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
    services: https://github.com/google/protobuf/issues/4221 and protoxform to upgrade the file.
    """

    pass


default_message_pool.register_message(
    "envoy.service.endpoint.v3", "LedsDummy", LedsDummy
)


class EndpointDiscoveryServiceSyncStub:
    """
    [#protodoc-title: EDS]
    Endpoint discovery :ref:`architecture overview <arch_overview_service_discovery_types_eds>`
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_endpoints(
        self, messages: "Iterable[__discovery__v3__.DiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DiscoveryResponse]":
        """
        The resource_names field in DiscoveryRequest specifies a list of clusters
        to subscribe to updates for.
        """

        yield from self._channel.stream_stream(
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/StreamEndpoints",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(iter(messages))

    def delta_endpoints(
        self, messages: "Iterable[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DeltaDiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/DeltaEndpoints",
            __discovery__v3__.DeltaDiscoveryRequest.SerializeToString,
            __discovery__v3__.DeltaDiscoveryResponse.FromString,
        )(iter(messages))

    def fetch_endpoints(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        return self._channel.unary_unary(
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/FetchEndpoints",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(message)


class EndpointDiscoveryServiceAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: EDS]
    Endpoint discovery :ref:`architecture overview <arch_overview_service_discovery_types_eds>`
    """

    async def stream_endpoints(
        self,
        messages: "AsyncIterable[__discovery__v3__.DiscoveryRequest] | Iterable[__discovery__v3__.DiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        """
        The resource_names field in DiscoveryRequest specifies a list of clusters
        to subscribe to updates for.
        """

        async for response in self._stream_stream(
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/StreamEndpoints",
            messages,
            __discovery__v3__.DiscoveryRequest,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def delta_endpoints(
        self,
        messages: "AsyncIterable[__discovery__v3__.DeltaDiscoveryRequest] | Iterable[__discovery__v3__.DeltaDiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/DeltaEndpoints",
            messages,
            __discovery__v3__.DeltaDiscoveryRequest,
            __discovery__v3__.DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def fetch_endpoints(
        self,
        message: "__discovery__v3__.DiscoveryRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "__discovery__v3__.DiscoveryResponse":
        return await self._unary_unary(
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/FetchEndpoints",
            message,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class LocalityEndpointDiscoveryServiceSyncStub:
    """
    [#not-implemented-hide:]
    [#protodoc-title: LEDS]
    Locality-Endpoint discovery
    [#comment:TODO(adisuissa): Link to unified matching docs:
    :ref:`architecture overview<arch_overview_service_discovery_types_leds>`]
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def delta_locality_endpoints(
        self, messages: "Iterable[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DeltaDiscoveryResponse]":
        """
        State-of-the-World (DiscoveryRequest) and REST are not supported.

        The resource_names_subscribe resource_names_unsubscribe fields in DeltaDiscoveryRequest
        specify a list of glob collections to subscribe to updates for.
        """

        yield from self._channel.stream_stream(
            "/envoy.service.endpoint.v3.LocalityEndpointDiscoveryService/DeltaLocalityEndpoints",
            __discovery__v3__.DeltaDiscoveryRequest.SerializeToString,
            __discovery__v3__.DeltaDiscoveryResponse.FromString,
        )(iter(messages))


class LocalityEndpointDiscoveryServiceAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#not-implemented-hide:]
    [#protodoc-title: LEDS]
    Locality-Endpoint discovery
    [#comment:TODO(adisuissa): Link to unified matching docs:
    :ref:`architecture overview<arch_overview_service_discovery_types_leds>`]
    """

    async def delta_locality_endpoints(
        self,
        messages: "AsyncIterable[__discovery__v3__.DeltaDiscoveryRequest] | Iterable[__discovery__v3__.DeltaDiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        """
        State-of-the-World (DiscoveryRequest) and REST are not supported.

        The resource_names_subscribe resource_names_unsubscribe fields in DeltaDiscoveryRequest
        specify a list of glob collections to subscribe to updates for.
        """

        async for response in self._stream_stream(
            "/envoy.service.endpoint.v3.LocalityEndpointDiscoveryService/DeltaLocalityEndpoints",
            messages,
            __discovery__v3__.DeltaDiscoveryRequest,
            __discovery__v3__.DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


from ...discovery import v3 as __discovery__v3__


class EndpointDiscoveryServiceBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: EDS]
    Endpoint discovery :ref:`architecture overview <arch_overview_service_discovery_types_eds>`
    """

    async def stream_endpoints(
        self, messages: "AsyncIterator[__discovery__v3__.DiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        """
        The resource_names field in DiscoveryRequest specifies a list of clusters
        to subscribe to updates for.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DiscoveryResponse()

    async def delta_endpoints(
        self, messages: "AsyncIterator[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DeltaDiscoveryResponse()

    async def fetch_endpoints(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_endpoints(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.stream_endpoints,
            stream,
            request,
        )

    async def __rpc_delta_endpoints(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DeltaDiscoveryRequest, __discovery__v3__.DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_endpoints,
            stream,
            request,
        )

    async def __rpc_fetch_endpoints(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        assert request is not None
        response = await self.fetch_endpoints(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/StreamEndpoints": grpclib.const.Handler(
                self.__rpc_stream_endpoints,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/DeltaEndpoints": grpclib.const.Handler(
                self.__rpc_delta_endpoints,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DeltaDiscoveryRequest,
                __discovery__v3__.DeltaDiscoveryResponse,
            ),
            "/envoy.service.endpoint.v3.EndpointDiscoveryService/FetchEndpoints": grpclib.const.Handler(
                self.__rpc_fetch_endpoints,
                grpclib.const.Cardinality.UNARY_UNARY,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
        }


class LocalityEndpointDiscoveryServiceBase(betterproto2_grpclib.ServiceBase):
    """
    [#not-implemented-hide:]
    [#protodoc-title: LEDS]
    Locality-Endpoint discovery
    [#comment:TODO(adisuissa): Link to unified matching docs:
    :ref:`architecture overview<arch_overview_service_discovery_types_leds>`]
    """

    async def delta_locality_endpoints(
        self, messages: "AsyncIterator[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        """
        State-of-the-World (DiscoveryRequest) and REST are not supported.

        The resource_names_subscribe resource_names_unsubscribe fields in DeltaDiscoveryRequest
        specify a list of glob collections to subscribe to updates for.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DeltaDiscoveryResponse()

    async def __rpc_delta_locality_endpoints(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DeltaDiscoveryRequest, __discovery__v3__.DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_locality_endpoints,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.endpoint.v3.LocalityEndpointDiscoveryService/DeltaLocalityEndpoints": grpclib.const.Handler(
                self.__rpc_delta_locality_endpoints,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DeltaDiscoveryRequest,
                __discovery__v3__.DeltaDiscoveryResponse,
            ),
        }
