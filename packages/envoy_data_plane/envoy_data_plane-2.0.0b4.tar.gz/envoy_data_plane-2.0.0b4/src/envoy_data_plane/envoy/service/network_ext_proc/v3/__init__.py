# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/network_ext_proc/v3/network_external_processor.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Data",
    "NetworkExternalProcessorAsyncStub",
    "NetworkExternalProcessorBase",
    "NetworkExternalProcessorSyncStub",
    "ProcessingRequest",
    "ProcessingResponse",
    "ProcessingResponseConnectionStatus",
    "ProcessingResponseDataProcessedStatus",
)

from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2 import grpclib as betterproto2_grpclib

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ProcessingResponseConnectionStatus(betterproto2.Enum):
    """
    ConnectionStatus determines what happens to the connection after processing.
    """

    CONTINUE = 0
    """
    Continue normal processing of the connection.
    This is the default behavior and allows traffic to flow normally.
    """

    CLOSE = 1
    """
    Close the connection with normal TCP FIN.
    This allows for clean connection termination with a normal close sequence.
    Any buffered data will be sent before closing.
    """

    CLOSE_RST = 2
    """
    Immediately reset the connection with TCP RST.
    This forcibly terminates the connection without a clean shutdown,
    discarding any buffered data. Use this for security-critical situations
    or when immediate termination is required.
    """


class ProcessingResponseDataProcessedStatus(betterproto2.Enum):
    """
    DataProcessedStatus indicates whether the data was modified by the external processor.
    """

    UNKNOWN = 0
    """
    The data processed status is unknown.
    """

    UNMODIFIED = 1
    """
    The data remains unchanged. Envoy will use the original data.
    This is useful when the processor only wants to inspect but not modify the traffic.
    """

    MODIFIED = 2
    """
    The data has been modified. Envoy will use the modified data provided in the response.
    This allows the processor to transform the network traffic as needed.
    """


@dataclass(eq=False, repr=False)
class Data(betterproto2.Message):
    """
    The payload data from network layer
    """

    data: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    The raw payload data
    """

    end_of_stream: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Indicates whether this is the last data frame in the current direction.
    The external processor should still respond to this message even
    if there is no more data expected in this direction.
    """


default_message_pool.register_message("envoy.service.network_ext_proc.v3", "Data", Data)


@dataclass(eq=False, repr=False)
class ProcessingRequest(betterproto2.Message):
    """
    ProcessingRequest contains data sent from Envoy to the external processing server.
    Each request contains either read data (from client) or write data (to client)
    along with optional metadata.
    """

    read_data: "Data | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    ReadData contains the network data intercepted in the request path (client to server).
    This is sent to the external processor when data arrives from the downstream client.
    If this is set, write_data should not be set.
    """

    write_data: "Data | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    WriteData contains the network data intercepted in the response path (server to client).
    This is sent to the external processor when data arrives from the upstream server.
    If this is set, read_data should not be set.
    """

    metadata: "___config__core__v3__.Metadata | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional metadata associated with the request.
    This can include connection properties, filter configuration, and any other
    contextual information that might be useful for processing decisions.

    The metadata is not automatically propagated from request to response.
    The external processor must include any needed metadata in its response.
    """


default_message_pool.register_message(
    "envoy.service.network_ext_proc.v3", "ProcessingRequest", ProcessingRequest
)


@dataclass(eq=False, repr=False)
class ProcessingResponse(betterproto2.Message):
    """
    ProcessingResponse contains the response from the external processing server to Envoy.
    Each response corresponds to a ProcessingRequest and indicates how the network
    traffic should be handled.
    [#next-free-field: 6]
    """

    read_data: "Data | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The processed ReadData containing potentially modified data for the request path.
    This should be sent in response to a ProcessingRequest with read_data, and the
    previous data in ProcessingRequest will be replaced by the new data in Envoy's data plane.
    If this is set, write_data should not be set.
    """

    write_data: "Data | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The processed WriteData containing potentially modified data for the response path.
    This should be sent in response to a ProcessingRequest with write_data, and the
    previous data in ProcessingRequest will be replaced by the new data in Envoy's data plane.
    If this is set, read_data should not be set.
    """

    data_processing_status: "ProcessingResponseDataProcessedStatus" = (
        betterproto2.field(
            3,
            betterproto2.TYPE_ENUM,
            default_factory=lambda: ProcessingResponseDataProcessedStatus(0),
        )
    )
    """
    Indicates whether the data was modified or not.
    This is mandatory and tells Envoy whether to use the original or modified data.
    """

    connection_status: "ProcessingResponseConnectionStatus" = betterproto2.field(
        4,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ProcessingResponseConnectionStatus(0),
    )
    """
    Optional: Determines the connection behavior after processing.
    If not specified, CONTINUE is assumed, and the connection proceeds normally.
    Use CLOSE or CLOSE_RST to terminate the connection based on processing results.
    """

    dynamic_metadata: "____google__protobuf__.Struct | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional metadata associated with the request.
    This can include connection properties, filter configuration, and any other
    contextual information that might be useful for processing decisions.

    The metadata is not automatically propagated from request to response.
    The external processor must include any needed metadata in its response.
    """


default_message_pool.register_message(
    "envoy.service.network_ext_proc.v3", "ProcessingResponse", ProcessingResponse
)


class NetworkExternalProcessorSyncStub:
    """
    [#protodoc-title: Network External Processing Service]

    The Network External Processing filter allows an external service to dynamically
    interact with and modify L4 network traffic passing through Envoy. Unlike the
    HTTP External Processing filter, this service operates at the TCP/UDP level,
    providing access to raw network data.

    The filter communicates with an external gRPC service that can:

    1. Inspect network traffic in both directions (client->server and server->client)
    2. Modify the payload data
    3. Control connection lifecycle (continue, close gracefully, or reset)

    Use cases include:

    1. Custom protocol inspection and modification
    2. Advanced traffic manipulation
    3. Security scanning and filtering
    4. Dynamic connection management

    The service uses a bidirectional gRPC stream, maintaining state throughout
    the connection lifetime while allowing asynchronous processing.

    NetworkExternalProcessor service defines the contract between Envoy and
    external processing servers for L4 network traffic.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def process(
        self, messages: "Iterable[ProcessingRequest]"
    ) -> "Iterator[ProcessingResponse]":
        """
        Process establishes a bidirectional stream between Envoy and the external
        processing server. Envoy sends ProcessingRequests containing network data
        and the server responds with ProcessingResponses containing processing
        decisions and potentially modified data.

        The server should handle processing timeout properly to avoid blocking
        network traffic for extended periods. Any uncaught exceptions will
        be treated as errors and will terminate the stream.

        Implementation note: The server should process requests in the order
        they are received to maintain proper sequencing of network traffic.
        """

        yield from self._channel.stream_stream(
            "/envoy.service.network_ext_proc.v3.NetworkExternalProcessor/Process",
            ProcessingRequest.SerializeToString,
            ProcessingResponse.FromString,
        )(iter(messages))


class NetworkExternalProcessorAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: Network External Processing Service]

    The Network External Processing filter allows an external service to dynamically
    interact with and modify L4 network traffic passing through Envoy. Unlike the
    HTTP External Processing filter, this service operates at the TCP/UDP level,
    providing access to raw network data.

    The filter communicates with an external gRPC service that can:

    1. Inspect network traffic in both directions (client->server and server->client)
    2. Modify the payload data
    3. Control connection lifecycle (continue, close gracefully, or reset)

    Use cases include:

    1. Custom protocol inspection and modification
    2. Advanced traffic manipulation
    3. Security scanning and filtering
    4. Dynamic connection management

    The service uses a bidirectional gRPC stream, maintaining state throughout
    the connection lifetime while allowing asynchronous processing.

    NetworkExternalProcessor service defines the contract between Envoy and
    external processing servers for L4 network traffic.
    """

    async def process(
        self,
        messages: "AsyncIterable[ProcessingRequest] | Iterable[ProcessingRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[ProcessingResponse]":
        """
        Process establishes a bidirectional stream between Envoy and the external
        processing server. Envoy sends ProcessingRequests containing network data
        and the server responds with ProcessingResponses containing processing
        decisions and potentially modified data.

        The server should handle processing timeout properly to avoid blocking
        network traffic for extended periods. Any uncaught exceptions will
        be treated as errors and will terminate the stream.

        Implementation note: The server should process requests in the order
        they are received to maintain proper sequencing of network traffic.
        """

        async for response in self._stream_stream(
            "/envoy.service.network_ext_proc.v3.NetworkExternalProcessor/Process",
            messages,
            ProcessingRequest,
            ProcessingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


from .....google import protobuf as ____google__protobuf__
from ....config.core import v3 as ___config__core__v3__


class NetworkExternalProcessorBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: Network External Processing Service]

    The Network External Processing filter allows an external service to dynamically
    interact with and modify L4 network traffic passing through Envoy. Unlike the
    HTTP External Processing filter, this service operates at the TCP/UDP level,
    providing access to raw network data.

    The filter communicates with an external gRPC service that can:

    1. Inspect network traffic in both directions (client->server and server->client)
    2. Modify the payload data
    3. Control connection lifecycle (continue, close gracefully, or reset)

    Use cases include:

    1. Custom protocol inspection and modification
    2. Advanced traffic manipulation
    3. Security scanning and filtering
    4. Dynamic connection management

    The service uses a bidirectional gRPC stream, maintaining state throughout
    the connection lifetime while allowing asynchronous processing.

    NetworkExternalProcessor service defines the contract between Envoy and
    external processing servers for L4 network traffic.
    """

    async def process(
        self, messages: "AsyncIterator[ProcessingRequest]"
    ) -> "AsyncIterator[ProcessingResponse]":
        """
        Process establishes a bidirectional stream between Envoy and the external
        processing server. Envoy sends ProcessingRequests containing network data
        and the server responds with ProcessingResponses containing processing
        decisions and potentially modified data.

        The server should handle processing timeout properly to avoid blocking
        network traffic for extended periods. Any uncaught exceptions will
        be treated as errors and will terminate the stream.

        Implementation note: The server should process requests in the order
        they are received to maintain proper sequencing of network traffic.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ProcessingResponse()

    async def __rpc_process(
        self, stream: "grpclib.server.Stream[ProcessingRequest, ProcessingResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.process,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.network_ext_proc.v3.NetworkExternalProcessor/Process": grpclib.const.Handler(
                self.__rpc_process,
                grpclib.const.Cardinality.STREAM_STREAM,
                ProcessingRequest,
                ProcessingResponse,
            ),
        }
