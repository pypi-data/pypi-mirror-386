# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/composite/v3/composite.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Composite",
    "DynamicConfig",
    "ExecuteFilterAction",
    "FilterChainConfiguration",
)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Composite(betterproto2.Message):
    """
    [#protodoc-title: Composite]
    Composite Filter :ref:`configuration overview <config_http_filters_composite>`.
    [#extension: envoy.filters.http.composite]

    :ref:`Composite filter <config_http_filters_composite>` config. The composite filter config
    allows delegating filter handling to another filter as determined by matching on the request
    headers. This makes it possible to use different filters or filter configurations based on the
    incoming request.

    This is intended to be used with
    :ref:`ExtensionWithMatcher <envoy_v3_api_msg_extensions.common.matching.v3.ExtensionWithMatcher>`
    where a match tree is specified that indicates (via
    :ref:`ExecuteFilterAction <envoy_v3_api_msg_extensions.filters.http.composite.v3.ExecuteFilterAction>`)
    which filter configuration to create and delegate to.
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.filters.http.composite.v3", "Composite", Composite
)


@dataclass(eq=False, repr=False)
class DynamicConfig(betterproto2.Message):
    """
    Configuration for an extension configuration discovery service with name.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the extension configuration. It also serves as a resource name in ExtensionConfigDS.
    The resource type in the ``DiscoveryRequest`` will be :ref:`TypedExtensionConfig
    <envoy_v3_api_msg_config.core.v3.TypedExtensionConfig>`.
    """

    config_discovery: "_____config__core__v3__.ExtensionConfigSource | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration source specifier for an extension configuration discovery
    service. In case of a failure and without the default configuration,
    500(Internal Server Error) will be returned.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.composite.v3", "DynamicConfig", DynamicConfig
)


@dataclass(eq=False, repr=False)
class ExecuteFilterAction(betterproto2.Message):
    """
    Composite match action (see :ref:`matching docs <arch_overview_matching_api>` for more info on match actions).
    This specifies the filter configuration of the filter that the composite filter should delegate filter interactions to.
    """

    typed_config: "_____config__core__v3__.TypedExtensionConfig | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Filter specific configuration which depends on the filter being
    instantiated. See the supported filters for further documentation.
    Only one of ``typed_config`` or ``dynamic_config`` can be set.
    Ignored if ``filter_chain`` is set.
    [#extension-category: envoy.filters.http]
    """

    dynamic_config: "DynamicConfig | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Dynamic configuration of filter obtained via extension configuration discovery service.
    Only one of ``typed_config`` or ``dynamic_config`` can be set.
    Ignored if ``filter_chain`` is set.
    """

    filter_chain: "FilterChainConfiguration | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    An inlined list of filter configurations. The specified filters will be executed in order.
    [#not-implemented-hide:]
    """

    sample_percent: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Probability of the action execution. If not specified, this is 100%.
    This allows sampling behavior for the configured actions.
    For example, if
    :ref:`default_value <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.default_value>`
    under the ``sample_percent`` is configured with 30%, a dice roll with that
    probability is done. The underline action will only be executed if the
    dice roll returns positive. Otherwise, the action is skipped.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.composite.v3",
    "ExecuteFilterAction",
    ExecuteFilterAction,
)


@dataclass(eq=False, repr=False)
class FilterChainConfiguration(betterproto2.Message):
    """
    A list of filter configurations to be called in order. Note that this can be used as the type
    inside of an ECDS :ref:`TypedExtensionConfig
    <envoy_v3_api_msg_config.core.v3.TypedExtensionConfig>` extension, which allows a chain of
    filters to be configured dynamically. In that case, the types of all filters in the chain must
    be present in the :ref:`ExtensionConfigSource.type_urls
    <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.type_urls>` field.
    """

    typed_config: "list[_____config__core__v3__.TypedExtensionConfig]" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    )


default_message_pool.register_message(
    "envoy.extensions.filters.http.composite.v3",
    "FilterChainConfiguration",
    FilterChainConfiguration,
)


from ......config.core import v3 as _____config__core__v3__
