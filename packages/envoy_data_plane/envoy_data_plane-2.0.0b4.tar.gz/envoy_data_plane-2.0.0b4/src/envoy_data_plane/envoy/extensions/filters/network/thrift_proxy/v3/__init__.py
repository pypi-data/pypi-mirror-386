# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/thrift_proxy/v3/route.proto, envoy/extensions/filters/network/thrift_proxy/v3/thrift_proxy.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ProtocolType",
    "Route",
    "RouteAction",
    "RouteActionRequestMirrorPolicy",
    "RouteConfiguration",
    "RouteMatch",
    "ThriftFilter",
    "ThriftProtocolOptions",
    "ThriftProxy",
    "TransportType",
    "Trds",
    "WeightedCluster",
    "WeightedClusterClusterWeight",
)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ProtocolType(betterproto2.Enum):
    """
    Thrift Protocol types supported by Envoy.
    """

    AUTO_PROTOCOL = 0
    """
    For downstream connections, the Thrift proxy will attempt to determine which protocol to use.
    Note that the older, non-strict (or lax) binary protocol is not included in automatic protocol
    detection. For upstream connections, the Thrift proxy will use the same protocol as the
    downstream connection.
    """

    BINARY = 1
    """
    The Thrift proxy will use the Thrift binary protocol.
    """

    LAX_BINARY = 2
    """
    The Thrift proxy will use Thrift non-strict binary protocol.
    """

    COMPACT = 3
    """
    The Thrift proxy will use the Thrift compact protocol.
    """

    TWITTER = 4
    """
    The Thrift proxy will use the Thrift "Twitter" protocol implemented by the finagle library.
    """


class TransportType(betterproto2.Enum):
    """
    [#protodoc-title: Thrift Proxy]
    Thrift Proxy :ref:`configuration overview <config_network_filters_thrift_proxy>`.
    [#extension: envoy.filters.network.thrift_proxy]

    Thrift transport types supported by Envoy.
    """

    AUTO_TRANSPORT = 0
    """
    For downstream connections, the Thrift proxy will attempt to determine which transport to use.
    For upstream connections, the Thrift proxy will use same transport as the downstream
    connection.
    """

    FRAMED = 1
    """
    The Thrift proxy will use the Thrift framed transport.
    """

    UNFRAMED = 2
    """
    The Thrift proxy will use the Thrift unframed transport.
    """

    HEADER = 3
    """
    The Thrift proxy will assume the client is using the Thrift header transport.
    """


@dataclass(eq=False, repr=False)
class Route(betterproto2.Message):
    match: "RouteMatch | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Route matching parameters.
    """

    route: "RouteAction | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Route request to some upstream cluster.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3", "Route", Route
)


@dataclass(eq=False, repr=False)
class RouteAction(betterproto2.Message):
    """
    [#next-free-field: 8]

    Oneofs:
        - cluster_specifier:
    """

    cluster: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="cluster_specifier"
    )
    """
    Indicates a single upstream cluster to which the request should be routed
    to.
    """

    weighted_clusters: "WeightedCluster | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="cluster_specifier"
    )
    """
    Multiple upstream clusters can be specified for a given route. The
    request is routed to one of the upstream clusters based on weights
    assigned to each cluster.
    """

    cluster_header: "str | None" = betterproto2.field(
        6, betterproto2.TYPE_STRING, optional=True, group="cluster_specifier"
    )
    """
    Envoy will determine the cluster to route to by reading the value of the
    Thrift header named by cluster_header from the request headers. If the
    header is not found or the referenced cluster does not exist Envoy will
    respond with an unknown method exception or an internal error exception,
    respectively.
    """

    metadata_match: "_____config__core__v3__.Metadata | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
    the upstream cluster with metadata matching what is set in this field will be considered.
    Note that this will be merged with what's provided in :ref:`WeightedCluster.metadata_match
    <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.WeightedCluster.ClusterWeight.metadata_match>`,
    with values there taking precedence. Keys and values should be provided under the "envoy.lb"
    metadata key.
    """

    rate_limits: "list[_____config__route__v3__.RateLimit]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Specifies a set of rate limit configurations that could be applied to the route.
    N.B. Thrift service or method name matching can be achieved by specifying a RequestHeaders
    action with the header name ":method-name".
    """

    strip_service_name: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    Strip the service prefix from the method name, if there's a prefix. For
    example, the method call Service:method would end up being just method.
    """

    request_mirror_policies: "list[RouteActionRequestMirrorPolicy]" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Indicates that the route has request mirroring policies.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3", "RouteAction", RouteAction
)


@dataclass(eq=False, repr=False)
class RouteActionRequestMirrorPolicy(betterproto2.Message):
    """
    The router is capable of shadowing traffic from one cluster to another. The current
    implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
    respond before returning the response from the primary cluster. All normal statistics are
    collected for the shadow cluster making this feature useful for testing.

    .. note::

      Shadowing will not be triggered if the primary cluster does not exist.
    """

    cluster: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Specifies the cluster that requests will be mirrored to. The cluster must
    exist in the cluster manager configuration when the route configuration is loaded.
    If it disappears at runtime, the shadow request will silently be ignored.
    """

    runtime_fraction: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If not specified, all requests to the target cluster will be mirrored.

    For some fraction N/D, a random number in the range [0,D) is selected. If the
    number is <= the value of the numerator N, or if the key is not present, the default
    value, the request will be mirrored.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3",
    "RouteAction.RequestMirrorPolicy",
    RouteActionRequestMirrorPolicy,
)


@dataclass(eq=False, repr=False)
class RouteConfiguration(betterproto2.Message):
    """
    [#protodoc-title: Thrift Proxy Route Configuration]
    Thrift Proxy :ref:`configuration overview <config_network_filters_thrift_proxy>`.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the route configuration. This name is used in asynchronous route discovery.
    For example, it might match
    :ref:`route_config_name
    <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.Trds.route_config_name>` in
    :ref:`envoy_v3_api_msg_extensions.filters.network.thrift_proxy.v3.Trds`.
    """

    routes: "list[Route]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of routes that will be matched, in order, against incoming requests. The first route
    that matches will be used.
    """

    validate_clusters: "bool | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    An optional boolean that specifies whether the clusters that the route
    table refers to will be validated by the cluster manager. If set to true
    and a route refers to a non-existent cluster, the route table will not
    load. If set to false and a route refers to a non-existent cluster, the
    route table will load and the router filter will return a INTERNAL_ERROR
    if the route is selected at runtime. This setting defaults to true if the route table
    is statically defined via the :ref:`route_config
    <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.ThriftProxy.route_config>`
    option. This setting default to false if the route table is loaded dynamically via the
    :ref:`trds
    <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.ThriftProxy.trds>`
    option. Users may wish to override the default behavior in certain cases (for example when
    using CDS with a static route table).
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3",
    "RouteConfiguration",
    RouteConfiguration,
)


@dataclass(eq=False, repr=False)
class RouteMatch(betterproto2.Message):
    """


    Oneofs:
        - match_specifier:
    """

    method_name: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="match_specifier"
    )
    """
    If specified, the route must exactly match the request method name. As a special case, an
    empty string matches any request method name.
    """

    service_name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="match_specifier"
    )
    """
    If specified, the route must have the service name as the request method name prefix. As a
    special case, an empty string matches any service name. Only relevant when service
    multiplexing.
    """

    invert: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Inverts whatever matching is done in the :ref:`method_name
    <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.RouteMatch.method_name>` or
    :ref:`service_name
    <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.RouteMatch.service_name>` fields.
    Cannot be combined with wildcard matching as that would result in routes never being matched.

    .. note::

      This does not invert matching done as part of the :ref:`headers field
      <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.RouteMatch.headers>` field. To
      invert header matching, see :ref:`invert_match
      <envoy_v3_api_field_config.route.v3.HeaderMatcher.invert_match>`.
    """

    headers: "list[_____config__route__v3__.HeaderMatcher]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Specifies a set of headers that the route should match on. The router will check the request’s
    headers against all the specified headers in the route config. A match will happen if all the
    headers in the route are present in the request with the same values (or based on presence if
    the value field is not in the config). Note that this only applies for Thrift transports and/or
    protocols that support headers.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3", "RouteMatch", RouteMatch
)


@dataclass(eq=False, repr=False)
class ThriftFilter(betterproto2.Message):
    """
    ThriftFilter configures a Thrift filter.

    Oneofs:
        - config_type: Filter specific configuration which depends on the filter being instantiated. See the supported
            filters for further documentation.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the filter to instantiate. The name must match a supported
    filter. The built-in filters are:

    [#comment:TODO(zuercher): Auto generate the following list]
    * :ref:`envoy.filters.thrift.router <config_thrift_filters_router>`
    * :ref:`envoy.filters.thrift.rate_limit <config_thrift_filters_rate_limit>`
    """

    typed_config: "______google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3", "ThriftFilter", ThriftFilter
)


@dataclass(eq=False, repr=False)
class ThriftProtocolOptions(betterproto2.Message):
    """
    ThriftProtocolOptions specifies Thrift upstream protocol options. This object is used in
    in
    :ref:`typed_extension_protocol_options<envoy_v3_api_field_config.cluster.v3.Cluster.typed_extension_protocol_options>`,
    keyed by the name ``envoy.filters.network.thrift_proxy``.
    """

    transport: "TransportType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: TransportType(0)
    )
    """
    Supplies the type of transport that the Thrift proxy should use for upstream connections.
    Selecting
    :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`,
    which is the default, causes the proxy to use the same transport as the downstream connection.
    """

    protocol: "ProtocolType" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: ProtocolType(0)
    )
    """
    Supplies the type of protocol that the Thrift proxy should use for upstream connections.
    Selecting
    :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`,
    which is the default, causes the proxy to use the same protocol as the downstream connection.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3",
    "ThriftProtocolOptions",
    ThriftProtocolOptions,
)


@dataclass(eq=False, repr=False)
class ThriftProxy(betterproto2.Message):
    """
    [#next-free-field: 11]
    """

    transport: "TransportType" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: TransportType(0)
    )
    """
    Supplies the type of transport that the Thrift proxy should use. Defaults to
    :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`.
    """

    protocol: "ProtocolType" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ProtocolType(0)
    )
    """
    Supplies the type of protocol that the Thrift proxy should use. Defaults to
    :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`.
    """

    stat_prefix: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The human readable prefix to use when emitting statistics.
    """

    route_config: "RouteConfiguration | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The route table for the connection manager is static and is specified in this property.
    It is invalid to define both ``route_config`` and ``trds``.
    """

    trds: "Trds | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Use xDS to fetch the route configuration. It is invalid to define both ``route_config`` and ``trds``.
    """

    thrift_filters: "list[ThriftFilter]" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of individual Thrift filters that make up the filter chain for requests made to the
    Thrift proxy. Order matters as the filters are processed sequentially. For backwards
    compatibility, if no thrift_filters are specified, a default Thrift router filter
    (``envoy.filters.thrift.router``) is used.
    [#extension-category: envoy.thrift_proxy.filters]
    """

    payload_passthrough: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    If set to true, Envoy will try to skip decode data after metadata in the Thrift message.
    This mode will only work if the upstream and downstream protocols are the same and the transports
    are Framed or Header, and the protocol is not Twitter. Otherwise Envoy will
    fallback to decode the data.
    """

    max_requests_per_connection: "int | None" = betterproto2.field(
        7,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Optional maximum requests for a single downstream connection. If not specified, there is no limit.
    """

    access_log: "list[_____config__accesslog__v3__.AccessLog]" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Configuration for :ref:`access logs <arch_overview_access_logs>`
    emitted by Thrift proxy.
    """

    header_keys_preserve_case: "bool" = betterproto2.field(10, betterproto2.TYPE_BOOL)
    """
    If set to true, Envoy will preserve the case of Thrift header keys instead of serializing them to
    lower case as per the default behavior. Note that NUL, CR and LF characters will also be preserved
    as mandated by the Thrift spec.

    More info: https://github.com/apache/thrift/commit/e165fa3c85d00cb984f4d9635ed60909a1266ce1.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3", "ThriftProxy", ThriftProxy
)


@dataclass(eq=False, repr=False)
class Trds(betterproto2.Message):
    config_source: "_____config__core__v3__.ConfigSource | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration source specifier.
    In case of ``api_config_source`` only aggregated ``api_type`` is supported.
    """

    route_config_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name of the route configuration. This allows to use different route
    configurations. Tells which route configuration should be fetched from the configuration source.
    Leave unspecified is also valid and means the unnamed route configuration.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3", "Trds", Trds
)


@dataclass(eq=False, repr=False)
class WeightedCluster(betterproto2.Message):
    """
    Allows for specification of multiple upstream clusters along with weights that indicate the
    percentage of traffic to be forwarded to each cluster. The router selects an upstream cluster
    based on these weights.
    """

    clusters: "list[WeightedClusterClusterWeight]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Specifies one or more upstream clusters associated with the route.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3",
    "WeightedCluster",
    WeightedCluster,
)


@dataclass(eq=False, repr=False)
class WeightedClusterClusterWeight(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Name of the upstream cluster.
    """

    weight: "int | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    When a request matches the route, the choice of an upstream cluster is determined by its
    weight. The sum of weights across all entries in the clusters array determines the total
    weight.
    """

    metadata_match: "_____config__core__v3__.Metadata | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional endpoint metadata match criteria used by the subset load balancer. Only endpoints in
    the upstream cluster with metadata matching what is set in this field, combined with what's
    provided in :ref:`RouteAction's metadata_match
    <envoy_v3_api_field_extensions.filters.network.thrift_proxy.v3.RouteAction.metadata_match>`,
    will be considered. Values here will take precedence. Keys and values should be provided
    under the "envoy.lb" metadata key.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.v3",
    "WeightedCluster.ClusterWeight",
    WeightedClusterClusterWeight,
)


from .......google import protobuf as ______google__protobuf__
from ......config.accesslog import v3 as _____config__accesslog__v3__
from ......config.core import v3 as _____config__core__v3__
from ......config.route import v3 as _____config__route__v3__
