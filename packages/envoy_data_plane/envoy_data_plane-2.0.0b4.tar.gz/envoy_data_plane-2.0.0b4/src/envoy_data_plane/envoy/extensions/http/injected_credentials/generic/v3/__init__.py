# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/http/injected_credentials/generic/v3/generic.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Generic",)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Generic(betterproto2.Message):
    """
    [#protodoc-title: Generic Credential]
    [#extension: envoy.http.injected_credentials.generic]

    Generic extension can be used to inject HTTP Basic Auth, Bearer Token, or any arbitrary credential
    into the proxied requests.
    The credential will be injected into the specified HTTP request header.
    Refer to [RFC 6750: The OAuth 2.0 Authorization Framework: Bearer Token Usage](https://www.rfc-editor.org/rfc/rfc6750) for details.
    """

    credential: "____transport_sockets__tls__v3__.SdsSecretConfig | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The SDS configuration for the credential that will be injected to the specified HTTP request header.
    It must be a generic secret.
    """

    header: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The header that will be injected to the HTTP request with the provided credential.
    If not set, filter will default to: ``Authorization``
    """


default_message_pool.register_message(
    "envoy.extensions.http.injected_credentials.generic.v3", "Generic", Generic
)


from .....transport_sockets.tls import v3 as ____transport_sockets__tls__v3__
