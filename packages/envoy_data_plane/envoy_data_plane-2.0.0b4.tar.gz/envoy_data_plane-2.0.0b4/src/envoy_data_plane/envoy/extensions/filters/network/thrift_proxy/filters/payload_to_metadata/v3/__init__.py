# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/thrift_proxy/filters/payload_to_metadata/v3/payload_to_metadata.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "PayloadToMetadata",
    "PayloadToMetadataFieldSelector",
    "PayloadToMetadataKeyValuePair",
    "PayloadToMetadataRule",
    "PayloadToMetadataValueType",
)

from dataclasses import dataclass

import betterproto2

from .........message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class PayloadToMetadataValueType(betterproto2.Enum):
    STRING = 0

    NUMBER = 1


@dataclass(eq=False, repr=False)
class PayloadToMetadata(betterproto2.Message):
    """
    [#protodoc-title: Payload-To-Metadata Filter]

    The configuration for transforming payloads into metadata. This is useful
    for matching load balancer subsets, logging, etc.

    Payload to Metadata :ref:`configuration overview <config_thrift_filters_payload_to_metadata>`.
    [#extension: envoy.filters.thrift.payload_to_metadata]
    """

    request_rules: "list[PayloadToMetadataRule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to requests.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3",
    "PayloadToMetadata",
    PayloadToMetadata,
)


@dataclass(eq=False, repr=False)
class PayloadToMetadataFieldSelector(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    field name to log
    """

    id: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    field id to match
    """

    child: "PayloadToMetadataFieldSelector | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    next node of the field selector
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3",
    "PayloadToMetadata.FieldSelector",
    PayloadToMetadataFieldSelector,
)


@dataclass(eq=False, repr=False)
class PayloadToMetadataKeyValuePair(betterproto2.Message):
    """
    [#next-free-field: 6]

    Oneofs:
        - value_type:
    """

    metadata_namespace: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The namespace — if this is empty, the filter's namespace will be used.
    """

    key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The key to use within the namespace.
    """

    value: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True, group="value_type"
    )
    """
    The value to pair with the given key.

    When used for on_present case, if value is non-empty it'll be used instead
    of the field value. If both are empty, the field value is used as-is.

    When used for on_missing case, a non-empty value must be provided.
    """

    regex_value_rewrite: "_______type__matcher__v3__.RegexMatchAndSubstitute | None" = (
        betterproto2.field(
            4, betterproto2.TYPE_MESSAGE, optional=True, group="value_type"
        )
    )
    """
    If present, the header's value will be matched and substituted with this.
    If there is no match or substitution, the field value is used as-is.

    This is only used for on_present.
    """

    type: "PayloadToMetadataValueType" = betterproto2.field(
        5, betterproto2.TYPE_ENUM, default_factory=lambda: PayloadToMetadataValueType(0)
    )
    """
    The value's type — defaults to string.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3",
    "PayloadToMetadata.KeyValuePair",
    PayloadToMetadataKeyValuePair,
)


@dataclass(eq=False, repr=False)
class PayloadToMetadataRule(betterproto2.Message):
    """
    A Rule defines what metadata to apply when a field is present or missing.
    [#next-free-field: 6]

    Oneofs:
        - match_specifier:
    """

    method_name: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="match_specifier"
    )
    """
    If specified, the route must exactly match the request method name. As a special case,
    an empty string matches any request method name.
    """

    service_name: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="match_specifier"
    )
    """
    If specified, the route must have the service name as the request method name prefix.
    As a special case, an empty string matches any service name. Only relevant when service
    multiplexing.
    """

    field_selector: "PayloadToMetadataFieldSelector | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specifies that a match will be performed on the value of a field.
    """

    on_present: "PayloadToMetadataKeyValuePair | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If the field is present, apply this metadata KeyValuePair.
    """

    on_missing: "PayloadToMetadataKeyValuePair | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If the field is missing, apply this metadata KeyValuePair.

    The value in the KeyValuePair must be set, since it'll be used in lieu
    of the missing field value.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3",
    "PayloadToMetadata.Rule",
    PayloadToMetadataRule,
)


from ........type.matcher import v3 as _______type__matcher__v3__
