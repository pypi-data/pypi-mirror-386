# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/rbac/principals/mtls_authenticated/v3/mtls_authenticated.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Config",)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Config(betterproto2.Message):
    """
    [#protodoc-title: RBAC MTls Authenticated Principal]
    [#extension: envoy.rbac.principals.mtls_authenticated]

    Authentication attributes for a downstream mTLS connection. All modes require that a peer certificate
    was presented and validated using the ValidationContext in the DownstreamTlsContext configuration.

    If neither field is set, a configuration loading error will be generated. This is so that
    not validating SANs requires an affirmative configuration to disable, to prevent accidentally
    not configuring SAN validation.

    If ``any_validated_client_certificate`` is set in addition to ``san_matcher`` or a future field
    which specifies additional validation, the other field always takes precedence over
    ``any_validated_client_certificate`` and all specified validation is performed.
    """

    san_matcher: "____transport_sockets__tls__v3__.SubjectAltNameMatcher | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies a SAN that must be present in the validated peer certificate.
    """

    any_validated_client_certificate: "bool" = betterproto2.field(
        2, betterproto2.TYPE_BOOL
    )
    """
    Only require that the peer certificate is present and valid.
    """


default_message_pool.register_message(
    "envoy.extensions.rbac.principals.mtls_authenticated.v3", "Config", Config
)


from .....transport_sockets.tls import v3 as ____transport_sockets__tls__v3__
