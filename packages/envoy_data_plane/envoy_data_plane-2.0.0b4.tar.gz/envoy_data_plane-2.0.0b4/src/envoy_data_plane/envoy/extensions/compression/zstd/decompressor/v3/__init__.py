# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/compression/zstd/decompressor/v3/zstd.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Zstd",)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Zstd(betterproto2.Message):
    """
    [#protodoc-title: Zstd Decompressor]
    [#extension: envoy.compression.zstd.decompressor]
    """

    dictionaries: "list[_____config__core__v3__.DataSource]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Dictionaries for decompression. Zstd offers dictionary compression, which greatly improves
    efficiency on small files and messages. It is necessary to ensure that the dictionary used for
    decompression is the same as the compression dictionary. Multiple dictionaries can be set, and the
    dictionary will be automatically selected for decompression according to the dictionary ID in the
    source content.
    Please refer to `zstd manual <https://github.com/facebook/zstd/blob/dev/programs/zstd.1.md#dictionary-builder>`_
    to train specific dictionaries for decompression.
    """

    chunk_size: "int | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Value for decompressor's next output buffer. If not set, defaults to 4096.
    """


default_message_pool.register_message(
    "envoy.extensions.compression.zstd.decompressor.v3", "Zstd", Zstd
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
