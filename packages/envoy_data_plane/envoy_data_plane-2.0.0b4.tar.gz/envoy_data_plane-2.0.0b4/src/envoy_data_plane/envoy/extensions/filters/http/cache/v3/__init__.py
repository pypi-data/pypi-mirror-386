# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/cache/v3/cache.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CacheConfig",
    "CacheConfigKeyCreatorParams",
)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class CacheConfig(betterproto2.Message):
    """
    [#protodoc-title: HTTP Cache Filter]

    [#extension: envoy.filters.http.cache]
    [#next-free-field: 7]
    """

    typed_config: "______google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Config specific to the cache storage implementation. Required unless ``disabled``
    is true.
    [#extension-category: envoy.http.cache]
    """

    disabled: "bool | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    When true, the cache filter is a no-op filter.

    Possible use-cases for this include:
    - Turning a filter on and off with :ref:`ECDS <envoy_v3_api_file_envoy/service/extension/v3/config_discovery.proto>`.
    [#comment: once route-specific overrides are implemented, they are the more likely use-case.]
    """

    allowed_vary_headers: "list[_____type__matcher__v3__.StringMatcher]" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    List of matching rules that defines allowed ``Vary`` headers.

    The ``vary`` response header holds a list of header names that affect the
    contents of a response, as described by
    https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.

    During insertion, ``allowed_vary_headers`` acts as a allowlist: if a
    response's ``vary`` header mentions any header names that aren't matched by any rules in
    ``allowed_vary_headers``, that response will not be cached.

    During lookup, ``allowed_vary_headers`` controls what request headers will be
    sent to the cache storage implementation.
    """

    key_creator_params: "CacheConfigKeyCreatorParams | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    [#not-implemented-hide:]
    <TODO(toddmgreer) implement key customization>

    Modifies cache key creation by restricting which parts of the URL are included.
    """

    max_body_bytes: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)
    """
    [#not-implemented-hide:]
    <TODO(toddmgreer) implement size limit>

    Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache
    storage implementation may have its own limit beyond which it will reject insertions).
    """

    ignore_request_cache_control_header: "bool" = betterproto2.field(
        6, betterproto2.TYPE_BOOL
    )
    """
    By default, a ``cache-control: no-cache`` or ``pragma: no-cache`` header in the request
    causes the cache to validate with its upstream even if the lookup is a hit. Setting this
    to true will ignore these headers.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.cache.v3", "CacheConfig", CacheConfig
)


@dataclass(eq=False, repr=False)
class CacheConfigKeyCreatorParams(betterproto2.Message):
    """
    [#not-implemented-hide:]
    Modifies cache key creation by restricting which parts of the URL are included.
    """

    exclude_scheme: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    If true, exclude the URL scheme from the cache key. Set to true if your origins always
    produce the same response for http and https requests.
    """

    exclude_host: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, exclude the host from the cache key. Set to true if your origins' responses don't
    ever depend on host.
    """

    query_parameters_included: "list[_____config__route__v3__.QueryParameterMatcher]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    If ``query_parameters_included`` is nonempty, only query parameters matched
    by one or more of its matchers are included in the cache key. Any other
    query params will not affect cache lookup.
    """

    query_parameters_excluded: "list[_____config__route__v3__.QueryParameterMatcher]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    If ``query_parameters_excluded`` is nonempty, query parameters matched by one
    or more of its matchers are excluded from the cache key (even if also
    matched by ``query_parameters_included``), and will not affect cache lookup.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.cache.v3",
    "CacheConfig.KeyCreatorParams",
    CacheConfigKeyCreatorParams,
)


from .......google import protobuf as ______google__protobuf__
from ......config.route import v3 as _____config__route__v3__
from ......type.matcher import v3 as _____type__matcher__v3__
