# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/type/matcher/metadata.proto, envoy/type/matcher/node.proto, envoy/type/matcher/number.proto, envoy/type/matcher/path.proto, envoy/type/matcher/regex.proto, envoy/type/matcher/string.proto, envoy/type/matcher/struct.proto, envoy/type/matcher/value.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "DoubleMatcher",
    "ListMatcher",
    "ListStringMatcher",
    "MetadataMatcher",
    "MetadataMatcherPathSegment",
    "NodeMatcher",
    "PathMatcher",
    "RegexMatchAndSubstitute",
    "RegexMatcher",
    "RegexMatcherGoogleRe2",
    "StringMatcher",
    "StructMatcher",
    "StructMatcherPathSegment",
    "ValueMatcher",
    "ValueMatcherNullMatch",
)

import warnings
from dataclasses import dataclass

import betterproto2

from ....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class DoubleMatcher(betterproto2.Message):
    """
    [#protodoc-title: Number matcher]

    Specifies the way to match a double value.

    Oneofs:
        - match_pattern:
    """

    range: "__type__.DoubleRange | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="match_pattern"
    )
    """
    If specified, the input double value must be in the range specified here.
    Note: The range is using half-open interval semantics [start, end).
    """

    exact: "float | None" = betterproto2.field(
        2, betterproto2.TYPE_DOUBLE, optional=True, group="match_pattern"
    )
    """
    If specified, the input double value must be equal to the value specified here.
    """


default_message_pool.register_message(
    "envoy.type.matcher", "DoubleMatcher", DoubleMatcher
)


@dataclass(eq=False, repr=False)
class ListMatcher(betterproto2.Message):
    """
    Specifies the way to match a list value.

    Oneofs:
        - match_pattern:
    """

    one_of: "ValueMatcher | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="match_pattern"
    )
    """
    If specified, at least one of the values in the list must match the value specified.
    """


default_message_pool.register_message("envoy.type.matcher", "ListMatcher", ListMatcher)


@dataclass(eq=False, repr=False)
class ListStringMatcher(betterproto2.Message):
    """
    Specifies a list of ways to match a string.
    """

    patterns: "list[StringMatcher]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "envoy.type.matcher", "ListStringMatcher", ListStringMatcher
)


@dataclass(eq=False, repr=False)
class MetadataMatcher(betterproto2.Message):
    """
    [#protodoc-title: Metadata matcher]

    MetadataMatcher provides a general interface to check if a given value is matched in
    :ref:`Metadata <envoy_api_msg_core.Metadata>`. It uses `filter` and `path` to retrieve the value
    from the Metadata and then check if it's matched to the specified value.

    For example, for the following Metadata:

    .. code-block:: yaml

       filter_metadata:
         envoy.filters.http.rbac:
           fields:
             a:
               struct_value:
                 fields:
                   b:
                     struct_value:
                       fields:
                         c:
                           string_value: pro
                   t:
                     list_value:
                       values:
                         - string_value: m
                         - string_value: n

    The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value "pro"
    from the Metadata which is matched to the specified prefix match.

    .. code-block:: yaml

       filter: envoy.filters.http.rbac
       path:
       - key: a
       - key: b
       - key: c
       value:
         string_match:
           prefix: pr

    The following MetadataMatcher is matched as the code will match one of the string values in the
    list at the path [a, t].

    .. code-block:: yaml

       filter: envoy.filters.http.rbac
       path:
       - key: a
       - key: t
       value:
         list_match:
           one_of:
             string_match:
               exact: m

    An example use of MetadataMatcher is specifying additional metadata in envoy.filters.http.rbac to
    enforce access control based on dynamic metadata in a request. See :ref:`Permission
    <envoy_api_msg_config.rbac.v2.Permission>` and :ref:`Principal
    <envoy_api_msg_config.rbac.v2.Principal>`.

    [#next-major-version: MetadataMatcher should use StructMatcher]
    """

    filter: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The filter name to retrieve the Struct from the Metadata.
    """

    path: "list[MetadataMatcherPathSegment]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The path to retrieve the Value from the Struct.
    """

    value: "ValueMatcher | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The MetadataMatcher is matched if the value retrieved by path is matched to this value.
    """


default_message_pool.register_message(
    "envoy.type.matcher", "MetadataMatcher", MetadataMatcher
)


@dataclass(eq=False, repr=False)
class MetadataMatcherPathSegment(betterproto2.Message):
    """
    Specifies the segment in a path to retrieve value from Metadata.
    Note: Currently it's not supported to retrieve a value from a list in Metadata. This means that
    if the segment key refers to a list, it has to be the last segment in a path.

    Oneofs:
        - segment:
    """

    key: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="segment"
    )
    """
    If specified, use the key to retrieve the value in a Struct.
    """


default_message_pool.register_message(
    "envoy.type.matcher", "MetadataMatcher.PathSegment", MetadataMatcherPathSegment
)


@dataclass(eq=False, repr=False)
class NodeMatcher(betterproto2.Message):
    """
    [#protodoc-title: Node matcher]

    Specifies the way to match a Node.
    The match follows AND semantics.
    """

    node_id: "StringMatcher | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specifies match criteria on the node id.
    """

    node_metadatas: "list[StructMatcher]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Specifies match criteria on the node metadata.
    """


default_message_pool.register_message("envoy.type.matcher", "NodeMatcher", NodeMatcher)


@dataclass(eq=False, repr=False)
class PathMatcher(betterproto2.Message):
    """
    [#protodoc-title: Path matcher]

    Specifies the way to match a path on HTTP request.

    Oneofs:
        - rule:
    """

    path: "StringMatcher | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="rule"
    )
    """
    The `path` must match the URL path portion of the :path header. The query and fragment
    string (if present) are removed in the URL path portion.
    For example, the path */data* will match the *:path* header */data#fragment?param=value*.
    """


default_message_pool.register_message("envoy.type.matcher", "PathMatcher", PathMatcher)


@dataclass(eq=False, repr=False)
class RegexMatchAndSubstitute(betterproto2.Message):
    """
    Describes how to match a string and then produce a new string using a regular
    expression and a substitution string.
    """

    pattern: "RegexMatcher | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The regular expression used to find portions of a string (hereafter called
    the "subject string") that should be replaced. When a new string is
    produced during the substitution operation, the new string is initially
    the same as the subject string, but then all matches in the subject string
    are replaced by the substitution string. If replacing all matches isn't
    desired, regular expression anchors can be used to ensure a single match,
    so as to replace just one occurrence of a pattern. Capture groups can be
    used in the pattern to extract portions of the subject string, and then
    referenced in the substitution string.
    """

    substitution: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The string that should be substituted into matching portions of the
    subject string during a substitution operation to produce a new string.
    Capture groups in the pattern can be referenced in the substitution
    string. Note, however, that the syntax for referring to capture groups is
    defined by the chosen regular expression engine. Google's `RE2
    <https://github.com/google/re2>`_ regular expression engine uses a
    backslash followed by the capture group number to denote a numbered
    capture group. E.g., ``\\1`` refers to capture group 1, and ``\\2`` refers
    to capture group 2.
    """


default_message_pool.register_message(
    "envoy.type.matcher", "RegexMatchAndSubstitute", RegexMatchAndSubstitute
)


@dataclass(eq=False, repr=False)
class RegexMatcher(betterproto2.Message):
    """
    [#protodoc-title: Regex matcher]

    A regex matcher designed for safety when used with untrusted input.

    Oneofs:
        - engine_type:
    """

    google_re2: "RegexMatcherGoogleRe2 | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="engine_type"
    )
    """
    Google's RE2 regex engine.
    """

    regex: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The regex match string. The string must be supported by the configured engine.
    """


default_message_pool.register_message(
    "envoy.type.matcher", "RegexMatcher", RegexMatcher
)


@dataclass(eq=False, repr=False)
class RegexMatcherGoogleRe2(betterproto2.Message):
    """
    Google's `RE2 <https://github.com/google/re2>`_ regex engine. The regex string must adhere to
    the documented `syntax <https://github.com/google/re2/wiki/Syntax>`_. The engine is designed
    to complete execution in linear time as well as limit the amount of memory used.

    Envoy supports program size checking via runtime. The runtime keys ``re2.max_program_size.error_level``
    and ``re2.max_program_size.warn_level`` can be set to integers as the maximum program size or
    complexity that a compiled regex can have before an exception is thrown or a warning is
    logged, respectively. ``re2.max_program_size.error_level`` defaults to 100, and
    ``re2.max_program_size.warn_level`` has no default if unset (will not check/log a warning).

    Envoy emits two stats for tracking the program size of regexes: the histogram `re2.program_size`,
    which records the program size, and the counter `re2.exceeded_warn_level`, which is incremented
    each time the program size exceeds the warn level threshold.
    """

    max_program_size: "int | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    This field controls the RE2 "program size" which is a rough estimate of how complex a
    compiled regex is to evaluate. A regex that has a program size greater than the configured
    value will fail to compile. In this case, the configured max program size can be increased
    or the regex can be simplified. If not specified, the default is 100.

    This field is deprecated; regexp validation should be performed on the management server
    instead of being done by each individual client.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("max_program_size"):
            warnings.warn(
                "RegexMatcherGoogleRe2.max_program_size is deprecated",
                DeprecationWarning,
            )


default_message_pool.register_message(
    "envoy.type.matcher", "RegexMatcher.GoogleRE2", RegexMatcherGoogleRe2
)


@dataclass(eq=False, repr=False)
class StringMatcher(betterproto2.Message):
    """
    [#protodoc-title: String matcher]

    Specifies the way to match a string.
    [#next-free-field: 7]

    Oneofs:
        - match_pattern:
    """

    exact: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="match_pattern"
    )
    """
    The input string must match exactly the string specified here.

    Examples:

    * *abc* only matches the value *abc*.
    """

    prefix: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="match_pattern"
    )
    """
    The input string must have the prefix specified here.
    Note: empty prefix is not allowed, please use regex instead.

    Examples:

    * *abc* matches the value *abc.xyz*
    """

    suffix: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True, group="match_pattern"
    )
    """
    The input string must have the suffix specified here.
    Note: empty prefix is not allowed, please use regex instead.

    Examples:

    * *abc* matches the value *xyz.abc*
    """

    regex: "str | None" = betterproto2.field(
        4, betterproto2.TYPE_STRING, optional=True, group="match_pattern"
    )
    """
    The input string must match the regular expression specified here.
    The regex grammar is defined `here
    <https://en.cppreference.com/w/cpp/regex/ecmascript>`_.

    Examples:

    * The regex ``\\d{3}`` matches the value *123*
    * The regex ``\\d{3}`` does not match the value *1234*
    * The regex ``\\d{3}`` does not match the value *123.456*

    .. attention::
      This field has been deprecated in favor of `safe_regex` as it is not safe for use with
      untrusted input in all cases.
    """

    safe_regex: "RegexMatcher | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="match_pattern"
    )
    """
    The input string must match the regular expression specified here.
    """

    ignore_case: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no
    effect for the safe_regex match.
    For example, the matcher *data* will match both input string *Data* and *data* if set to true.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("regex"):
            warnings.warn("StringMatcher.regex is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.type.matcher", "StringMatcher", StringMatcher
)


@dataclass(eq=False, repr=False)
class StructMatcher(betterproto2.Message):
    """
    [#protodoc-title: Struct matcher]

    StructMatcher provides a general interface to check if a given value is matched in
    google.protobuf.Struct. It uses `path` to retrieve the value
    from the struct and then check if it's matched to the specified value.

    For example, for the following Struct:

    .. code-block:: yaml

           fields:
             a:
               struct_value:
                 fields:
                   b:
                     struct_value:
                       fields:
                         c:
                           string_value: pro
                   t:
                     list_value:
                       values:
                         - string_value: m
                         - string_value: n

    The following MetadataMatcher is matched as the path [a, b, c] will retrieve a string value "pro"
    from the Metadata which is matched to the specified prefix match.

    .. code-block:: yaml

       path:
       - key: a
       - key: b
       - key: c
       value:
         string_match:
           prefix: pr

    The following StructMatcher is matched as the code will match one of the string values in the
    list at the path [a, t].

    .. code-block:: yaml

       path:
       - key: a
       - key: t
       value:
         list_match:
           one_of:
             string_match:
               exact: m

    An example use of StructMatcher is to match metadata in envoy.v*.core.Node.
    """

    path: "list[StructMatcherPathSegment]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The path to retrieve the Value from the Struct.
    """

    value: "ValueMatcher | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The StructMatcher is matched if the value retrieved by path is matched to this value.
    """


default_message_pool.register_message(
    "envoy.type.matcher", "StructMatcher", StructMatcher
)


@dataclass(eq=False, repr=False)
class StructMatcherPathSegment(betterproto2.Message):
    """
    Specifies the segment in a path to retrieve value from Struct.

    Oneofs:
        - segment:
    """

    key: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="segment"
    )
    """
    If specified, use the key to retrieve the value in a Struct.
    """


default_message_pool.register_message(
    "envoy.type.matcher", "StructMatcher.PathSegment", StructMatcherPathSegment
)


@dataclass(eq=False, repr=False)
class ValueMatcher(betterproto2.Message):
    """
    [#protodoc-title: Value matcher]

    Specifies the way to match a Protobuf::Value. Primitive values and ListValue are supported.
    StructValue is not supported and is always not matched.
    [#next-free-field: 7]

    Oneofs:
        - match_pattern: Specifies how to match a value.
    """

    null_match: "ValueMatcherNullMatch | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="match_pattern"
    )
    """
    If specified, a match occurs if and only if the target value is a NullValue.
    """

    double_match: "DoubleMatcher | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="match_pattern"
    )
    """
    If specified, a match occurs if and only if the target value is a double value and is
    matched to this field.
    """

    string_match: "StringMatcher | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="match_pattern"
    )
    """
    If specified, a match occurs if and only if the target value is a string value and is
    matched to this field.
    """

    bool_match: "bool | None" = betterproto2.field(
        4, betterproto2.TYPE_BOOL, optional=True, group="match_pattern"
    )
    """
    If specified, a match occurs if and only if the target value is a bool value and is equal
    to this field.
    """

    present_match: "bool | None" = betterproto2.field(
        5, betterproto2.TYPE_BOOL, optional=True, group="match_pattern"
    )
    """
    If specified, value match will be performed based on whether the path is referring to a
    valid primitive value in the metadata. If the path is referring to a non-primitive value,
    the result is always not matched.
    """

    list_match: "ListMatcher | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="match_pattern"
    )
    """
    If specified, a match occurs if and only if the target value is a list value and
    is matched to this field.
    """


default_message_pool.register_message(
    "envoy.type.matcher", "ValueMatcher", ValueMatcher
)


@dataclass(eq=False, repr=False)
class ValueMatcherNullMatch(betterproto2.Message):
    """
    NullMatch is an empty message to specify a null value.
    """

    pass


default_message_pool.register_message(
    "envoy.type.matcher", "ValueMatcher.NullMatch", ValueMatcherNullMatch
)


from ....google import protobuf as ___google__protobuf__
from ... import type as __type__
