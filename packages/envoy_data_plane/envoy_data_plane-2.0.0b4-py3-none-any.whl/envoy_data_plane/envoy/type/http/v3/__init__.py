# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/type/http/v3/cookie.proto, envoy/type/http/v3/path_transformation.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Cookie",
    "CookieAttribute",
    "PathTransformation",
    "PathTransformationOperation",
    "PathTransformationOperationMergeSlashes",
    "PathTransformationOperationNormalizePathRfc3986",
)

import datetime
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Cookie(betterproto2.Message):
    """
    [#protodoc-title: HTTP cookie API]

    Cookie defines an API for obtaining or generating HTTP cookie.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name that will be used to obtain cookie value from downstream HTTP request or generate
    new cookie for downstream.
    """

    ttl: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Duration of cookie. This will be used to set the expiry time of a new cookie when it is
    generated. Set this to 0s to use a session cookie and disable cookie expiration.
    """

    path: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Path of cookie. This will be used to set the path of a new cookie when it is generated.
    If no path is specified here, no path will be set for the cookie.
    """

    attributes: "list[CookieAttribute]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Additional attributes for the cookie. They will be used when generating a new cookie.
    """


default_message_pool.register_message("envoy.type.http.v3", "Cookie", Cookie)


@dataclass(eq=False, repr=False)
class CookieAttribute(betterproto2.Message):
    """
    CookieAttribute defines an API for adding additional attributes for a HTTP cookie.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the cookie attribute.
    """

    value: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The optional value of the cookie attribute.
    """


default_message_pool.register_message(
    "envoy.type.http.v3", "CookieAttribute", CookieAttribute
)


@dataclass(eq=False, repr=False)
class PathTransformation(betterproto2.Message):
    """
    [#protodoc-title: Path Transformations API]

    PathTransformation defines an API to apply a sequence of operations that can be used to alter
    text before it is used for matching or routing. Multiple actions can be applied in the same
    Transformation, forming a sequential pipeline. The transformations will be performed in the order
    that they appear.

    This API is a work in progress.
    """

    operations: "list[PathTransformationOperation]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of operations to apply. Transformations will be performed in the order that they appear.
    """


default_message_pool.register_message(
    "envoy.type.http.v3", "PathTransformation", PathTransformation
)


@dataclass(eq=False, repr=False)
class PathTransformationOperation(betterproto2.Message):
    """
    A type of operation to alter text.

    Oneofs:
        - operation_specifier:
    """

    normalize_path_rfc_3986: "PathTransformationOperationNormalizePathRfc3986 | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="operation_specifier"
    )
    """
    Enable path normalization per RFC 3986.
    """

    merge_slashes: "PathTransformationOperationMergeSlashes | None" = (
        betterproto2.field(
            3, betterproto2.TYPE_MESSAGE, optional=True, group="operation_specifier"
        )
    )
    """
    Enable merging adjacent slashes.
    """


default_message_pool.register_message(
    "envoy.type.http.v3", "PathTransformation.Operation", PathTransformationOperation
)


@dataclass(eq=False, repr=False)
class PathTransformationOperationMergeSlashes(betterproto2.Message):
    """
    Determines if adjacent slashes are merged into one. A common use case is for a request path
    header. Using this option in ``:ref: PathNormalizationOptions
    <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.PathNormalizationOptions>``
    will allow incoming requests with path ``//dir///file`` to match against route with ``prefix``
    match set to ``/dir``. When using for header transformations, note that slash merging is not
    part of `HTTP spec <https://tools.ietf.org/html/rfc3986>`_ and is provided for convenience.
    """

    pass


default_message_pool.register_message(
    "envoy.type.http.v3",
    "PathTransformation.Operation.MergeSlashes",
    PathTransformationOperationMergeSlashes,
)


@dataclass(eq=False, repr=False)
class PathTransformationOperationNormalizePathRfc3986(betterproto2.Message):
    """
    Should text be normalized according to RFC 3986? This typically is used for path headers
    before any processing of requests by HTTP filters or routing. This applies percent-encoded
    normalization and path segment normalization. Fails on characters disallowed in URLs
    (e.g. NULLs). See `Normalization and Comparison
    <https://tools.ietf.org/html/rfc3986#section-6>`_ for details of normalization. Note that
    this options does not perform `case normalization
    <https://tools.ietf.org/html/rfc3986#section-6.2.2.1>`_
    """

    pass


default_message_pool.register_message(
    "envoy.type.http.v3",
    "PathTransformation.Operation.NormalizePathRFC3986",
    PathTransformationOperationNormalizePathRfc3986,
)


from .....google import protobuf as ____google__protobuf__
