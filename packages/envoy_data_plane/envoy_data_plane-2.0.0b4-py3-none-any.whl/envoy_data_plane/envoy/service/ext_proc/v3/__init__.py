# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/ext_proc/v3/external_processor.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "BodyMutation",
    "BodyResponse",
    "CommonResponse",
    "CommonResponseResponseStatus",
    "ExternalProcessorAsyncStub",
    "ExternalProcessorBase",
    "ExternalProcessorSyncStub",
    "GrpcStatus",
    "HeaderMutation",
    "HeadersResponse",
    "HttpBody",
    "HttpHeaders",
    "HttpTrailers",
    "ImmediateResponse",
    "ProcessingRequest",
    "ProcessingResponse",
    "ProtocolConfiguration",
    "StreamedBodyResponse",
    "TrailersResponse",
)

import datetime
import warnings
from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2 import grpclib as betterproto2_grpclib

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class CommonResponseResponseStatus(betterproto2.Enum):
    """
    The status of the response.
    """

    CONTINUE = 0
    """
    Apply the mutation instructions in this message to the
    request or response, and then continue processing the filter
    stream as normal. This is the default.
    """

    CONTINUE_AND_REPLACE = 1
    """
    Apply the specified header mutation, replace the body with the body
    specified in the body mutation (if present), and do not send any
    further messages for this request or response even if the processing
    mode is configured to do so.

    When used in response to a request_headers or response_headers message,
    this status makes it possible to either completely replace the body
    while discarding the original body, or to add a body to a message that
    formerly did not have one.

    In other words, this response makes it possible to turn an HTTP GET
    into a POST, PUT, or PATCH.
    """


@dataclass(eq=False, repr=False)
class BodyMutation(betterproto2.Message):
    """
    This message specifies the body mutation the server sends to the data plane.

    Oneofs:
        - mutation: The type of mutation for the body.
    """

    body: "bytes | None" = betterproto2.field(
        1, betterproto2.TYPE_BYTES, optional=True, group="mutation"
    )
    """
    The entire body to replace.
    Should only be used when the corresponding ``BodySendMode`` in the
    :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
    is not set to ``FULL_DUPLEX_STREAMED``.
    """

    clear_body: "bool | None" = betterproto2.field(
        2, betterproto2.TYPE_BOOL, optional=True, group="mutation"
    )
    """
    Clear the corresponding body chunk.
    Should only be used when the corresponding ``BodySendMode`` in the
    :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
    is not set to ``FULL_DUPLEX_STREAMED``.
    Clear the corresponding body chunk.
    """

    streamed_response: "StreamedBodyResponse | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="mutation"
    )
    """
    Must be used when the corresponding ``BodySendMode`` in the
    :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
    is set to ``FULL_DUPLEX_STREAMED``.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "BodyMutation", BodyMutation
)


@dataclass(eq=False, repr=False)
class BodyResponse(betterproto2.Message):
    """
    This message is sent by the external server to the data plane after ``HttpBody`` was
    sent to it.
    """

    response: "CommonResponse | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Details the modifications (if any) to be made by the data plane to the current
    request/response.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "BodyResponse", BodyResponse
)


@dataclass(eq=False, repr=False)
class CommonResponse(betterproto2.Message):
    """
    This message contains common fields between header and body responses.
    [#next-free-field: 6]
    """

    status: "CommonResponseResponseStatus" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: CommonResponseResponseStatus(0),
    )
    """
    If set, provide additional direction on how the data plane should
    handle the rest of the HTTP filter chain.
    """

    header_mutation: "HeaderMutation | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Instructions on how to manipulate the headers. When responding to an
    HttpBody request, header mutations will only take effect if
    the current processing mode for the body is BUFFERED.
    """

    body_mutation: "BodyMutation | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Replace the body of the last message sent to the remote server on this
    stream. If responding to an HttpBody request, simply replace or clear
    the body chunk that was sent with that request. Body mutations may take
    effect in response either to ``header`` or ``body`` messages. When it is
    in response to ``header`` messages, it only take effect if the
    :ref:`status <envoy_v3_api_field_service.ext_proc.v3.CommonResponse.status>`
    is set to CONTINUE_AND_REPLACE.
    """

    trailers: "___config__core__v3__.HeaderMap | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    [#not-implemented-hide:]
    Add new trailers to the message. This may be used when responding to either a
    HttpHeaders or HttpBody message, but only if this message is returned
    along with the CONTINUE_AND_REPLACE status.
    The header value is encoded in the
    :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
    """

    clear_route_cache: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    Clear the route cache for the current client request. This is necessary
    if the remote server modified headers that are used to calculate the route.
    This field is ignored in the response direction. This field is also ignored
    if the data plane ext_proc filter is in the upstream filter chain.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "CommonResponse", CommonResponse
)


@dataclass(eq=False, repr=False)
class GrpcStatus(betterproto2.Message):
    """
    This message specifies a gRPC status for an ImmediateResponse message.
    """

    status: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    The actual gRPC status.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "GrpcStatus", GrpcStatus
)


@dataclass(eq=False, repr=False)
class HeaderMutation(betterproto2.Message):
    """
    Change HTTP headers or trailers by appending, replacing, or removing
    headers.
    """

    set_headers: "list[___config__core__v3__.HeaderValueOption]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Add or replace HTTP headers. Attempts to set the value of
    any ``x-envoy`` header, and attempts to set the ``:method``,
    ``:authority``, ``:scheme``, or ``host`` headers will be ignored.
    The header value is encoded in the
    :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
    """

    remove_headers: "list[str]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Remove these HTTP headers. Attempts to remove system headers --
    any header starting with ``:``, plus ``host`` -- will be ignored.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "HeaderMutation", HeaderMutation
)


@dataclass(eq=False, repr=False)
class HeadersResponse(betterproto2.Message):
    """
    The following are messages that may be sent back by the server.

    This message is sent by the external server to the data plane after ``HttpHeaders`` was
    sent to it.
    """

    response: "CommonResponse | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Details the modifications (if any) to be made by the data plane to the current
    request/response.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "HeadersResponse", HeadersResponse
)


@dataclass(eq=False, repr=False)
class HttpBody(betterproto2.Message):
    """
    This message is sent to the external server when the HTTP request and
    response bodies are received.
    """

    body: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    The contents of the body in the HTTP request/response. Note that in
    streaming mode multiple ``HttpBody`` messages may be sent.
    """

    end_of_stream: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If ``true``, this will be the last ``HttpBody`` message that will be sent and no
    trailers will be sent for the current request/response.
    """


default_message_pool.register_message("envoy.service.ext_proc.v3", "HttpBody", HttpBody)


@dataclass(eq=False, repr=False)
class HttpHeaders(betterproto2.Message):
    """
    The following are messages that are sent to the server.

    This message is sent to the external server when the HTTP request and responses
    are first received.
    """

    headers: "___config__core__v3__.HeaderMap | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The HTTP request headers. All header keys will be
    lower-cased, because HTTP header keys are case-insensitive.
    The header value is encoded in the
    :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
    """

    attributes: "dict[str, ____google__protobuf__.Struct]" = betterproto2.field(
        2,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE
        ),
    )
    """
    [#not-implemented-hide:]
    This field is deprecated and not implemented. Attributes will be sent in
    the  top-level :ref:`attributes <envoy_v3_api_field_service.ext_proc.v3.ProcessingRequest.attributes`
    field.
    """

    end_of_stream: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    If ``true``, then there is no message body associated with this
    request or response.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("attributes"):
            warnings.warn("HttpHeaders.attributes is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "HttpHeaders", HttpHeaders
)


@dataclass(eq=False, repr=False)
class HttpTrailers(betterproto2.Message):
    """
    This message is sent to the external server when the HTTP request and
    response trailers are received.
    """

    trailers: "___config__core__v3__.HeaderMap | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The header value is encoded in the
    :ref:`raw_value <envoy_v3_api_field_config.core.v3.HeaderValue.raw_value>` field.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "HttpTrailers", HttpTrailers
)


@dataclass(eq=False, repr=False)
class ImmediateResponse(betterproto2.Message):
    """
    This message causes the filter to attempt to create a locally
    generated response, send it  downstream, stop processing
    additional filters, and ignore any additional messages received
    from the remote server for this request or response. If a response
    has already started, then  this will either ship the reply directly
    to the downstream codec, or reset the stream.
    [#next-free-field: 6]
    """

    status: "___type__v3__.HttpStatus | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The response code to return.
    """

    headers: "HeaderMutation | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Apply changes to the default headers, which will include content-type.
    """

    body: "bytes" = betterproto2.field(3, betterproto2.TYPE_BYTES)
    """
    The message body to return with the response which is sent using the
    text/plain content type, or encoded in the grpc-message header.
    """

    grpc_status: "GrpcStatus | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If set, then include a gRPC status trailer.
    """

    details: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    A string detailing why this local reply was sent, which may be included
    in log and debug output (e.g. this populates the %RESPONSE_CODE_DETAILS%
    command operator field for use in access logging).
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "ImmediateResponse", ImmediateResponse
)


@dataclass(eq=False, repr=False)
class ProcessingRequest(betterproto2.Message):
    """
    This represents the different types of messages that the data plane can send
    to an external processing server.
    [#next-free-field: 12]

    Oneofs:
        - request: Each request message will include one of the following sub-messages. Which
            ones are set for a particular HTTP request/response depend on the
            processing mode.
    """

    request_headers: "HttpHeaders | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="request"
    )
    """
    Information about the HTTP request headers, as well as peer info and additional
    properties. Unless ``observability_mode`` is ``true``, the server must send back a
    HeaderResponse message, an ImmediateResponse message, or close the stream.
    """

    response_headers: "HttpHeaders | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="request"
    )
    """
    Information about the HTTP response headers, as well as peer info and additional
    properties. Unless ``observability_mode`` is ``true``, the server must send back a
    HeaderResponse message or close the stream.
    """

    request_body: "HttpBody | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="request"
    )
    """
    A chunk of the HTTP request body. Unless ``observability_mode`` is true, the server must send back
    a BodyResponse message, an ImmediateResponse message, or close the stream.
    """

    response_body: "HttpBody | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="request"
    )
    """
    A chunk of the HTTP response body. Unless ``observability_mode`` is ``true``, the server must send back
    a BodyResponse message or close the stream.
    """

    request_trailers: "HttpTrailers | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="request"
    )
    """
    The HTTP trailers for the request path. Unless ``observability_mode`` is ``true``, the server
    must send back a TrailerResponse message or close the stream.

    This message is only sent if the trailers processing mode is set to ``SEND`` and
    the original downstream request has trailers.
    """

    response_trailers: "HttpTrailers | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True, group="request"
    )
    """
    The HTTP trailers for the response path. Unless ``observability_mode`` is ``true``, the server
    must send back a TrailerResponse message or close the stream.

    This message is only sent if the trailers processing mode is set to ``SEND`` and
    the original upstream response has trailers.
    """

    metadata_context: "___config__core__v3__.Metadata | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Dynamic metadata associated with the request.
    """

    attributes: "dict[str, ____google__protobuf__.Struct]" = betterproto2.field(
        9,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE
        ),
    )
    """
    The values of properties selected by the ``request_attributes``
    or ``response_attributes`` list in the configuration. Each entry
    in the list is populated from the standard
    :ref:`attributes <arch_overview_attributes>` supported in the data plane.
    """

    observability_mode: "bool" = betterproto2.field(10, betterproto2.TYPE_BOOL)
    """
    Specify whether the filter that sent this request is running in :ref:`observability_mode
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.observability_mode>`
    and defaults to false.

    * A value of ``false`` indicates that the server must respond
      to this message by either sending back a matching ProcessingResponse message,
      or by closing the stream.
    * A value of ``true`` indicates that the server should not respond to this message, as any
      responses will be ignored. However, it may still close the stream to indicate that no more messages
      are needed.
    """

    protocol_config: "ProtocolConfiguration | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specify the filter protocol configurations to be sent to the server.
    ``protocol_config`` is only encoded in the first ``ProcessingRequest`` message from the client to the server.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "ProcessingRequest", ProcessingRequest
)


@dataclass(eq=False, repr=False)
class ProcessingResponse(betterproto2.Message):
    """
    This represents the different types of messages the server may send back to the data plane
    when the ``observability_mode`` field in the received ProcessingRequest is set to false.

    * If the corresponding ``BodySendMode`` in the
      :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
      is not set to ``FULL_DUPLEX_STREAMED``, then for every received ProcessingRequest,
      the server must send back exactly one ProcessingResponse message.
    * If it is set to ``FULL_DUPLEX_STREAMED``, the server must follow the API defined
      for this mode to send the ProcessingResponse messages.
    [#next-free-field: 11]

    Oneofs:
        - response: The response type that is sent by the server.
    """

    request_headers: "HeadersResponse | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="response"
    )
    """
    The server must send back this message in response to a message with the
    ``request_headers`` field set.
    """

    response_headers: "HeadersResponse | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="response"
    )
    """
    The server must send back this message in response to a message with the
    ``response_headers`` field set.
    """

    request_body: "BodyResponse | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="response"
    )
    """
    The server must send back this message in response to a message with
    the ``request_body`` field set.
    """

    response_body: "BodyResponse | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="response"
    )
    """
    The server must send back this message in response to a message with
    the ``response_body`` field set.
    """

    request_trailers: "TrailersResponse | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="response"
    )
    """
    The server must send back this message in response to a message with
    the ``request_trailers`` field set.
    """

    response_trailers: "TrailersResponse | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="response"
    )
    """
    The server must send back this message in response to a message with
    the ``response_trailers`` field set.
    """

    immediate_response: "ImmediateResponse | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True, group="response"
    )
    """
    If specified, attempt to create a locally generated response, send it
    downstream, and stop processing additional filters and ignore any
    additional messages received from the remote server for this request or
    response. If a response has already started -- for example, if this
    message is sent response to a ``response_body`` message -- then
    this will either ship the reply directly to the downstream codec,
    or reset the stream.
    """

    dynamic_metadata: "____google__protobuf__.Struct | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional metadata that will be emitted as dynamic metadata to be consumed by
    following filters. This metadata will be placed in the namespace(s) specified by the top-level
    field name(s) of the struct.
    """

    mode_override: "___extensions__filters__http__ext_proc__v3__.ProcessingMode | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Override how parts of the HTTP request and response are processed
    for the duration of this particular request/response only. Servers
    may use this to intelligently control how requests are processed
    based on the headers and other metadata that they see.
    This field is only applicable when servers responding to the header requests.
    If it is set in the response to the body or trailer requests, it will be ignored by the data plane.
    It is also ignored by the data plane when the ext_proc filter config
    :ref:`allow_mode_override
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.allow_mode_override>`
    is set to false, or
    :ref:`send_body_without_waiting_for_header_response
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.send_body_without_waiting_for_header_response>`
    is set to true.
    """

    override_message_timeout: "datetime.timedelta | None" = betterproto2.field(
        10,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    When ext_proc server receives a request message, in case it needs more
    time to process the message, it sends back a ProcessingResponse message
    with a new timeout value. When the data plane receives this response
    message, it ignores other fields in the response, just stop the original
    timer, which has the timeout value specified in
    :ref:`message_timeout
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.message_timeout>`
    and start a new timer with this ``override_message_timeout`` value and keep the
    data plane ext_proc filter state machine intact.
    Has to be >= 1ms and <=
    :ref:`max_message_timeout <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.max_message_timeout>`
    Such message can be sent at most once in a particular data plane ext_proc filter processing state.
    To enable this API, one has to set ``max_message_timeout`` to a number >= 1ms.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "ProcessingResponse", ProcessingResponse
)


@dataclass(eq=False, repr=False)
class ProtocolConfiguration(betterproto2.Message):
    """
    This message specifies the filter protocol configurations which will be sent to the ext_proc
    server in a :ref:`ProcessingRequest <envoy_v3_api_msg_service.ext_proc.v3.ProcessingRequest>`.
    If the server does not support these protocol configurations, it may choose to close the gRPC stream.
    If the server supports these protocol configurations, it should respond based on the API specifications.
    """

    request_body_mode: "___extensions__filters__http__ext_proc__v3__.ProcessingModeBodySendMode" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ___extensions__filters__http__ext_proc__v3__.ProcessingModeBodySendMode(
            0
        ),
    )
    """
    Specify the filter configuration :ref:`request_body_mode
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ProcessingMode.request_body_mode>`
    """

    response_body_mode: "___extensions__filters__http__ext_proc__v3__.ProcessingModeBodySendMode" = betterproto2.field(
        2,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ___extensions__filters__http__ext_proc__v3__.ProcessingModeBodySendMode(
            0
        ),
    )
    """
    Specify the filter configuration :ref:`response_body_mode
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ProcessingMode.response_body_mode>`
    """

    send_body_without_waiting_for_header_response: "bool" = betterproto2.field(
        3, betterproto2.TYPE_BOOL
    )
    """
    Specify the filter configuration :ref:`send_body_without_waiting_for_header_response
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.send_body_without_waiting_for_header_response>`
    If the client is waiting for a header response from the server, setting ``true`` means the client will send body to the server
    as they arrive. Setting ``false`` means the client will buffer the arrived data and not send it to the server immediately.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "ProtocolConfiguration", ProtocolConfiguration
)


@dataclass(eq=False, repr=False)
class StreamedBodyResponse(betterproto2.Message):
    """
    The body response message corresponding to FULL_DUPLEX_STREAMED body mode.
    """

    body: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    The body response chunk that will be passed to the upstream/downstream by the data plane.
    """

    end_of_stream: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    The server sets this flag to true if it has received a body request with
    :ref:`end_of_stream <envoy_v3_api_field_service.ext_proc.v3.HttpBody.end_of_stream>` set to true,
    and this is the last chunk of body responses.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "StreamedBodyResponse", StreamedBodyResponse
)


@dataclass(eq=False, repr=False)
class TrailersResponse(betterproto2.Message):
    """
    This message is sent by the external server to the data plane after ``HttpTrailers`` was
    sent to it.
    """

    header_mutation: "HeaderMutation | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Details the modifications (if any) to be made by the data plane to the current
    request/response trailers.
    """


default_message_pool.register_message(
    "envoy.service.ext_proc.v3", "TrailersResponse", TrailersResponse
)


class ExternalProcessorSyncStub:
    """
    [#protodoc-title: External processing service]

    A service that can access and modify HTTP requests and responses
    as part of a filter chain.
    The overall external processing protocol works like this:

    1. The data plane sends to the service information about the HTTP request.
    2. The service sends back a ProcessingResponse message that directs
       the data plane to either stop processing, continue without it, or send
       it the next chunk of the message body.
    3. If so requested, the data plane sends the server the message body in
       chunks, or the entire body at once. In either case, the server may send
       back a ProcessingResponse for each message it receives, or wait for
       a certain amount of body chunks received before streaming back the
       ProcessingResponse messages.
    4. If so requested, the data plane sends the server the HTTP trailers,
       and the server sends back a ProcessingResponse.
    5. At this point, request processing is done, and we pick up again
       at step 1 when the data plane receives a response from the upstream
       server.
    6. At any point above, if the server closes the gRPC stream cleanly,
       then the data plane proceeds without consulting the server.
    7. At any point above, if the server closes the gRPC stream with an error,
       then the data plane returns a 500 error to the client, unless the filter
       was configured to ignore errors.

    In other words, the process is a request/response conversation, but
    using a gRPC stream to make it easier for the server to
    maintain state.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def process(
        self, messages: "Iterable[ProcessingRequest]"
    ) -> "Iterator[ProcessingResponse]":
        """
        This begins the bidirectional stream that the data plane will use to
        give the server control over what the filter does. The actual
        protocol is described by the ProcessingRequest and ProcessingResponse
        messages below.
        """

        yield from self._channel.stream_stream(
            "/envoy.service.ext_proc.v3.ExternalProcessor/Process",
            ProcessingRequest.SerializeToString,
            ProcessingResponse.FromString,
        )(iter(messages))


class ExternalProcessorAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: External processing service]

    A service that can access and modify HTTP requests and responses
    as part of a filter chain.
    The overall external processing protocol works like this:

    1. The data plane sends to the service information about the HTTP request.
    2. The service sends back a ProcessingResponse message that directs
       the data plane to either stop processing, continue without it, or send
       it the next chunk of the message body.
    3. If so requested, the data plane sends the server the message body in
       chunks, or the entire body at once. In either case, the server may send
       back a ProcessingResponse for each message it receives, or wait for
       a certain amount of body chunks received before streaming back the
       ProcessingResponse messages.
    4. If so requested, the data plane sends the server the HTTP trailers,
       and the server sends back a ProcessingResponse.
    5. At this point, request processing is done, and we pick up again
       at step 1 when the data plane receives a response from the upstream
       server.
    6. At any point above, if the server closes the gRPC stream cleanly,
       then the data plane proceeds without consulting the server.
    7. At any point above, if the server closes the gRPC stream with an error,
       then the data plane returns a 500 error to the client, unless the filter
       was configured to ignore errors.

    In other words, the process is a request/response conversation, but
    using a gRPC stream to make it easier for the server to
    maintain state.
    """

    async def process(
        self,
        messages: "AsyncIterable[ProcessingRequest] | Iterable[ProcessingRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[ProcessingResponse]":
        """
        This begins the bidirectional stream that the data plane will use to
        give the server control over what the filter does. The actual
        protocol is described by the ProcessingRequest and ProcessingResponse
        messages below.
        """

        async for response in self._stream_stream(
            "/envoy.service.ext_proc.v3.ExternalProcessor/Process",
            messages,
            ProcessingRequest,
            ProcessingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


from .....google import protobuf as ____google__protobuf__
from ....config.core import v3 as ___config__core__v3__
from ....extensions.filters.http.ext_proc import (
    v3 as ___extensions__filters__http__ext_proc__v3__,
)
from ....type import v3 as ___type__v3__


class ExternalProcessorBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: External processing service]

    A service that can access and modify HTTP requests and responses
    as part of a filter chain.
    The overall external processing protocol works like this:

    1. The data plane sends to the service information about the HTTP request.
    2. The service sends back a ProcessingResponse message that directs
       the data plane to either stop processing, continue without it, or send
       it the next chunk of the message body.
    3. If so requested, the data plane sends the server the message body in
       chunks, or the entire body at once. In either case, the server may send
       back a ProcessingResponse for each message it receives, or wait for
       a certain amount of body chunks received before streaming back the
       ProcessingResponse messages.
    4. If so requested, the data plane sends the server the HTTP trailers,
       and the server sends back a ProcessingResponse.
    5. At this point, request processing is done, and we pick up again
       at step 1 when the data plane receives a response from the upstream
       server.
    6. At any point above, if the server closes the gRPC stream cleanly,
       then the data plane proceeds without consulting the server.
    7. At any point above, if the server closes the gRPC stream with an error,
       then the data plane returns a 500 error to the client, unless the filter
       was configured to ignore errors.

    In other words, the process is a request/response conversation, but
    using a gRPC stream to make it easier for the server to
    maintain state.
    """

    async def process(
        self, messages: "AsyncIterator[ProcessingRequest]"
    ) -> "AsyncIterator[ProcessingResponse]":
        """
        This begins the bidirectional stream that the data plane will use to
        give the server control over what the filter does. The actual
        protocol is described by the ProcessingRequest and ProcessingResponse
        messages below.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ProcessingResponse()

    async def __rpc_process(
        self, stream: "grpclib.server.Stream[ProcessingRequest, ProcessingResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.process,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.ext_proc.v3.ExternalProcessor/Process": grpclib.const.Handler(
                self.__rpc_process,
                grpclib.const.Cardinality.STREAM_STREAM,
                ProcessingRequest,
                ProcessingResponse,
            ),
        }
