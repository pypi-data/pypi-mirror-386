# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/listener/v3/lds.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "LdsDummy",
    "ListenerDiscoveryServiceAsyncStub",
    "ListenerDiscoveryServiceBase",
    "ListenerDiscoveryServiceSyncStub",
)

from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2 import grpclib as betterproto2_grpclib

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class LdsDummy(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
    services: https://github.com/google/protobuf/issues/4221 and protoxform to upgrade the file.
    """

    pass


default_message_pool.register_message("envoy.service.listener.v3", "LdsDummy", LdsDummy)


class ListenerDiscoveryServiceSyncStub:
    """
    [#protodoc-title: Listener]
    Listener :ref:`configuration overview <config_listeners>`

    The Envoy instance initiates an RPC at startup to discover a list of
    listeners. Updates are delivered via streaming from the LDS server and
    consist of a complete update of all listeners. Existing connections will be
    allowed to drain from listeners that are no longer present.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def delta_listeners(
        self, messages: "Iterable[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DeltaDiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.listener.v3.ListenerDiscoveryService/DeltaListeners",
            __discovery__v3__.DeltaDiscoveryRequest.SerializeToString,
            __discovery__v3__.DeltaDiscoveryResponse.FromString,
        )(iter(messages))

    def stream_listeners(
        self, messages: "Iterable[__discovery__v3__.DiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.listener.v3.ListenerDiscoveryService/StreamListeners",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(iter(messages))

    def fetch_listeners(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        return self._channel.unary_unary(
            "/envoy.service.listener.v3.ListenerDiscoveryService/FetchListeners",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(message)


class ListenerDiscoveryServiceAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: Listener]
    Listener :ref:`configuration overview <config_listeners>`

    The Envoy instance initiates an RPC at startup to discover a list of
    listeners. Updates are delivered via streaming from the LDS server and
    consist of a complete update of all listeners. Existing connections will be
    allowed to drain from listeners that are no longer present.
    """

    async def delta_listeners(
        self,
        messages: "AsyncIterable[__discovery__v3__.DeltaDiscoveryRequest] | Iterable[__discovery__v3__.DeltaDiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.listener.v3.ListenerDiscoveryService/DeltaListeners",
            messages,
            __discovery__v3__.DeltaDiscoveryRequest,
            __discovery__v3__.DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def stream_listeners(
        self,
        messages: "AsyncIterable[__discovery__v3__.DiscoveryRequest] | Iterable[__discovery__v3__.DiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.listener.v3.ListenerDiscoveryService/StreamListeners",
            messages,
            __discovery__v3__.DiscoveryRequest,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def fetch_listeners(
        self,
        message: "__discovery__v3__.DiscoveryRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "__discovery__v3__.DiscoveryResponse":
        return await self._unary_unary(
            "/envoy.service.listener.v3.ListenerDiscoveryService/FetchListeners",
            message,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...discovery import v3 as __discovery__v3__


class ListenerDiscoveryServiceBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: Listener]
    Listener :ref:`configuration overview <config_listeners>`

    The Envoy instance initiates an RPC at startup to discover a list of
    listeners. Updates are delivered via streaming from the LDS server and
    consist of a complete update of all listeners. Existing connections will be
    allowed to drain from listeners that are no longer present.
    """

    async def delta_listeners(
        self, messages: "AsyncIterator[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DeltaDiscoveryResponse()

    async def stream_listeners(
        self, messages: "AsyncIterator[__discovery__v3__.DiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DiscoveryResponse()

    async def fetch_listeners(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_delta_listeners(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DeltaDiscoveryRequest, __discovery__v3__.DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_listeners,
            stream,
            request,
        )

    async def __rpc_stream_listeners(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.stream_listeners,
            stream,
            request,
        )

    async def __rpc_fetch_listeners(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        assert request is not None
        response = await self.fetch_listeners(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.listener.v3.ListenerDiscoveryService/DeltaListeners": grpclib.const.Handler(
                self.__rpc_delta_listeners,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DeltaDiscoveryRequest,
                __discovery__v3__.DeltaDiscoveryResponse,
            ),
            "/envoy.service.listener.v3.ListenerDiscoveryService/StreamListeners": grpclib.const.Handler(
                self.__rpc_stream_listeners,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
            "/envoy.service.listener.v3.ListenerDiscoveryService/FetchListeners": grpclib.const.Handler(
                self.__rpc_fetch_listeners,
                grpclib.const.Cardinality.UNARY_UNARY,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
        }
