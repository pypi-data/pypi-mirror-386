# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/redis_auth/v3/redis_external_auth.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "RedisProxyExternalAuthAsyncStub",
    "RedisProxyExternalAuthBase",
    "RedisProxyExternalAuthRequest",
    "RedisProxyExternalAuthResponse",
    "RedisProxyExternalAuthSyncStub",
)

import datetime
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2 import grpclib as betterproto2_grpclib

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class RedisProxyExternalAuthRequest(betterproto2.Message):
    username: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Username, if applicable. Otherwise, empty.
    """

    password: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Password sent with the AUTH command.
    """


default_message_pool.register_message(
    "envoy.service.redis_auth.v3",
    "RedisProxyExternalAuthRequest",
    RedisProxyExternalAuthRequest,
)


@dataclass(eq=False, repr=False)
class RedisProxyExternalAuthResponse(betterproto2.Message):
    status: "____google__rpc__.Status | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Status of the authentication check.
    """

    expiration: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Optional expiration time for the authentication.
    If set, the authentication will be valid until this time.
    If not set, the authentication will be valid indefinitely.
    """

    message: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional message to be sent back to the client.
    """


default_message_pool.register_message(
    "envoy.service.redis_auth.v3",
    "RedisProxyExternalAuthResponse",
    RedisProxyExternalAuthResponse,
)


class RedisProxyExternalAuthSyncStub:
    """
    [#protodoc-title: Redis external authentication service]

    The messages used by the redis_proxy filter when performing external authentication.

    A generic interface for performing external password authentication on incoming AUTH commands.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def authenticate(
        self, message: "RedisProxyExternalAuthRequest"
    ) -> "RedisProxyExternalAuthResponse":
        """
        Performs authentication check based on the data sent with the AUTH request.
        Returns either an OK status or an error status.
        """

        return self._channel.unary_unary(
            "/envoy.service.redis_auth.v3.RedisProxyExternalAuth/Authenticate",
            RedisProxyExternalAuthRequest.SerializeToString,
            RedisProxyExternalAuthResponse.FromString,
        )(message)


class RedisProxyExternalAuthAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: Redis external authentication service]

    The messages used by the redis_proxy filter when performing external authentication.

    A generic interface for performing external password authentication on incoming AUTH commands.
    """

    async def authenticate(
        self,
        message: "RedisProxyExternalAuthRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RedisProxyExternalAuthResponse":
        """
        Performs authentication check based on the data sent with the AUTH request.
        Returns either an OK status or an error status.
        """

        return await self._unary_unary(
            "/envoy.service.redis_auth.v3.RedisProxyExternalAuth/Authenticate",
            message,
            RedisProxyExternalAuthResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from .....google import protobuf as ____google__protobuf__
from .....google import rpc as ____google__rpc__


class RedisProxyExternalAuthBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: Redis external authentication service]

    The messages used by the redis_proxy filter when performing external authentication.

    A generic interface for performing external password authentication on incoming AUTH commands.
    """

    async def authenticate(
        self, message: "RedisProxyExternalAuthRequest"
    ) -> "RedisProxyExternalAuthResponse":
        """
        Performs authentication check based on the data sent with the AUTH request.
        Returns either an OK status or an error status.
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_authenticate(
        self,
        stream: "grpclib.server.Stream[RedisProxyExternalAuthRequest, RedisProxyExternalAuthResponse]",
    ) -> None:
        request = await stream.recv_message()
        assert request is not None
        response = await self.authenticate(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.redis_auth.v3.RedisProxyExternalAuth/Authenticate": grpclib.const.Handler(
                self.__rpc_authenticate,
                grpclib.const.Cardinality.UNARY_UNARY,
                RedisProxyExternalAuthRequest,
                RedisProxyExternalAuthResponse,
            ),
        }
