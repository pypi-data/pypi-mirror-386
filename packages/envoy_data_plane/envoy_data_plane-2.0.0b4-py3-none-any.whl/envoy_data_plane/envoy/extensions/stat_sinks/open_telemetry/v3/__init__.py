# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/stat_sinks/open_telemetry/v3/open_telemetry.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "SinkConfig",
    "SinkConfigConversionAction",
)

from dataclasses import dataclass

import betterproto2

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class SinkConfig(betterproto2.Message):
    """
    [#protodoc-title: Open Telemetry Stats Sink]
    Stats configuration proto schema for ``envoy.stat_sinks.open_telemetry`` sink.
    [#extension: envoy.stat_sinks.open_telemetry]

    [#next-free-field: 9]

    Oneofs:
        - protocol_specifier:
    """

    grpc_service: "____config__core__v3__.GrpcService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="protocol_specifier"
    )
    """
    The upstream gRPC cluster that implements the OTLP/gRPC collector.
    """

    resource_detectors: "list[____config__core__v3__.TypedExtensionConfig]" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Attributes to be associated with the resource in the OTLP message.
    [#extension-category: envoy.tracers.opentelemetry.resource_detectors]
    """

    report_counters_as_deltas: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If set to true, counters will be emitted as deltas, and the OTLP message will have
    ``AGGREGATION_TEMPORALITY_DELTA`` set as AggregationTemporality.
    """

    report_histograms_as_deltas: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    If set to true, histograms will be emitted as deltas, and the OTLP message will have
    ``AGGREGATION_TEMPORALITY_DELTA`` set as AggregationTemporality.
    """

    emit_tags_as_attributes: "bool | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.BoolValue,
        optional=True,
    )
    """
    If set to true, metrics will have their tags emitted as OTLP attributes, which may
    contain values used by the tag extractor or additional tags added during stats creation.
    Otherwise, no attributes will be associated with the export message. Default value is true.
    """

    use_tag_extracted_name: "bool | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.BoolValue,
        optional=True,
    )
    """
    If set to true, metric names will be represented as the tag extracted name instead
    of the full metric name. Default value is true.
    """

    prefix: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    If set, emitted stats names will be prepended with a prefix, so full stat name will be
    <prefix>.<stats_name>. For example, if the stat name is "foo.bar" and prefix is
    "pre", the full stat name will be "pre.foo.bar". If this field is not set, there is no
    prefix added. According to the example, the full stat name will remain "foo.bar".
    """

    custom_metric_conversions: "_____xds__type__matcher__v3__.Matcher | None" = (
        betterproto2.field(8, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The custom conversion from a stat to a metric. Currently, the only supported input is
    ``envoy.extensions.matching.common_inputs.stats.v3.StatFullNameMatchInput`` and the only support action is
    ``envoy.extensions.stat_sinks.open_telemetry.v3.SinkConfig.ConversionAction``.
    """


default_message_pool.register_message(
    "envoy.extensions.stat_sinks.open_telemetry.v3", "SinkConfig", SinkConfig
)


@dataclass(eq=False, repr=False)
class SinkConfigConversionAction(betterproto2.Message):
    """
    ConversionAction is used to convert a stat to a metric. If a stat matches,
    the metric_name and static_metric_labels will be
    used to create the metric. This can be used to rename a
    stat, add static labels, and aggregate multiple stats into a single metric.
    """

    metric_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The metric name to use for the stat.
    """

    static_metric_labels: "list[_____opentelemetry__proto__common__v1__.KeyValue]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Static metric labels to use for the metric.
    """


default_message_pool.register_message(
    "envoy.extensions.stat_sinks.open_telemetry.v3",
    "SinkConfig.ConversionAction",
    SinkConfigConversionAction,
)


from ......google import protobuf as _____google__protobuf__
from ......opentelemetry.proto.common import (
    v1 as _____opentelemetry__proto__common__v1__,
)
from ......xds.type.matcher import v3 as _____xds__type__matcher__v3__
from .....config.core import v3 as ____config__core__v3__
