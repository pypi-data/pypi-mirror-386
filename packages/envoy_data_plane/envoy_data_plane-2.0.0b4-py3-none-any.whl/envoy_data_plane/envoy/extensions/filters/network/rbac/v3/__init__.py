# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/rbac/v3/rbac.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Rbac", "RbacEnforcementType")

import datetime
from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class RbacEnforcementType(betterproto2.Enum):
    ONE_TIME_ON_FIRST_BYTE = 0
    """
    Apply RBAC policies when the first byte of data arrives on the connection.
    """

    CONTINUOUS = 1
    """
    Continuously apply RBAC policies as data arrives. Use this mode when
    using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
    etc. when the protocol decoders emit dynamic metadata such as the
    resources being accessed and the operations on the resources.
    """


@dataclass(eq=False, repr=False)
class Rbac(betterproto2.Message):
    """
    [#protodoc-title: RBAC]
    Role-Based Access Control :ref:`configuration overview <config_network_filters_rbac>`.
    [#extension: envoy.filters.network.rbac]

    RBAC network filter config.

    Header should not be used in rules/shadow_rules in RBAC network filter as
    this information is only available in :ref:`RBAC http filter <config_http_filters_rbac>`.
    [#next-free-field: 9]
    """

    rules: "_____config__rbac__v3__.Rbac | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specify the RBAC rules to be applied globally.
    If absent, no enforcing RBAC policy will be applied.
    If present and empty, DENY.
    If both rules and matcher are configured, rules will be ignored.
    """

    matcher: "______xds__type__matcher__v3__.Matcher | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The match tree to use when resolving RBAC action for incoming connections. Connections do
    not match any matcher will be denied.
    If absent, no enforcing RBAC matcher will be applied.
    If present and empty, deny all connections.
    """

    shadow_rules: "_____config__rbac__v3__.Rbac | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Shadow rules are not enforced by the filter but will emit stats and logs
    and can be used for rule testing.
    If absent, no shadow RBAC policy will be applied.
    If both shadow rules and shadow matcher are configured, shadow rules will be ignored.
    """

    shadow_matcher: "______xds__type__matcher__v3__.Matcher | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The match tree to use for emitting stats and logs which can be used for rule testing for
    incoming connections.
    If absent, no shadow matcher will be applied.
    """

    shadow_rules_stat_prefix: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    If specified, shadow rules will emit stats with the given prefix.
    This is useful to distinguish the stat when there are more than 1 RBAC filter configured with
    shadow rules.
    """

    stat_prefix: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The prefix to use when emitting statistics.
    """

    enforcement_type: "RbacEnforcementType" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: RbacEnforcementType(0)
    )
    """
    RBAC enforcement strategy. By default RBAC will be enforced only once
    when the first byte of data arrives from the downstream. When used in
    conjunction with filters that emit dynamic metadata after decoding
    every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
    CONTINUOUS to enforce RBAC policies on every message boundary.
    """

    delay_deny: "datetime.timedelta | None" = betterproto2.field(
        8,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Delay the specified duration before closing the connection when the policy evaluation
    result is ``DENY``. If this is not present, the connection will be closed immediately.
    This is useful to provide a better protection for Envoy against clients that retries
    aggressively when the connection is rejected by the RBAC filter.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.rbac.v3", "RBAC", Rbac
)


from .......google import protobuf as ______google__protobuf__
from .......xds.type.matcher import v3 as ______xds__type__matcher__v3__
from ......config.rbac import v3 as _____config__rbac__v3__
