# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/header_to_metadata/v3/header_to_metadata.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Config",
    "ConfigKeyValuePair",
    "ConfigRule",
    "ConfigValueEncode",
    "ConfigValueType",
)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ConfigValueEncode(betterproto2.Enum):
    """
    Specifies the encoding scheme for the value.
    """

    NONE = 0
    """
    No encoding is applied.
    """

    BASE64 = 1
    """
    The value is encoded in `Base64 <https://tools.ietf.org/html/rfc4648#section-4>`_.

    .. note::

      This is mostly used for ``STRING`` and ``PROTOBUF_VALUE`` to escape the
      non-ASCII characters in the header.
    """


class ConfigValueType(betterproto2.Enum):
    """
    Specifies the value type to use in metadata.
    """

    STRING = 0

    NUMBER = 1

    PROTOBUF_VALUE = 2
    """
    The value is a serialized `protobuf.Value
    <https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/struct.proto#L62>`_.
    """


@dataclass(eq=False, repr=False)
class Config(betterproto2.Message):
    """
    [#protodoc-title: Header-To-Metadata Filter]

    The configuration for transforming headers into metadata. This is useful
    for matching load balancer subsets, logging, etc.

    Header to Metadata :ref:`configuration overview <config_http_filters_header_to_metadata>`.
    [#extension: envoy.filters.http.header_to_metadata]
    """

    request_rules: "list[ConfigRule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to requests.
    """

    response_rules: "list[ConfigRule]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to responses.
    """

    stat_prefix: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional prefix to use when emitting filter statistics. When configured,
    statistics are emitted with the prefix ``http_filter_name.<stat_prefix>``.

    This emits statistics such as:

    - ``http_filter_name.my_header_converter.rules_processed``
    - ``http_filter_name.my_header_converter.metadata_added``

    If not configured, no statistics are emitted.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.header_to_metadata.v3", "Config", Config
)


@dataclass(eq=False, repr=False)
class ConfigKeyValuePair(betterproto2.Message):
    """
    [#next-free-field: 7]
    """

    metadata_namespace: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The namespace — if this is empty, the filter's namespace will be used.
    """

    key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The key to use within the namespace.
    """

    value: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The value to pair with the given key.

    When used for a
    :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present>`
    case, if value is non-empty it'll be used instead of the header value. If both are empty, no metadata is added.

    When used for a :ref:`on_header_missing <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_missing>`
    case, a non-empty value must be provided otherwise no metadata is added.
    """

    regex_value_rewrite: "_____type__matcher__v3__.RegexMatchAndSubstitute | None" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If present, the header's value will be matched and substituted with this. If there is no match or substitution, the header value
    is used as-is.

    This is only used for :ref:`on_header_present <envoy_v3_api_field_extensions.filters.http.header_to_metadata.v3.Config.Rule.on_header_present>`.

    .. note::

      If the ``value`` field is non-empty this field should be empty.
    """

    type: "ConfigValueType" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: ConfigValueType(0)
    )
    """
    The value's type — defaults to string.
    """

    encode: "ConfigValueEncode" = betterproto2.field(
        5, betterproto2.TYPE_ENUM, default_factory=lambda: ConfigValueEncode(0)
    )
    """
    How is the value encoded, default is NONE (not encoded).
    The value will be decoded accordingly before storing to metadata.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.header_to_metadata.v3",
    "Config.KeyValuePair",
    ConfigKeyValuePair,
)


@dataclass(eq=False, repr=False)
class ConfigRule(betterproto2.Message):
    """
    A Rule defines what metadata to apply when a header is present or missing.
    [#next-free-field: 6]
    """

    header: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Specifies that a match will be performed on the value of a header or a cookie.

    The header to be extracted.
    """

    cookie: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    The cookie to be extracted.
    """

    on_header_present: "ConfigKeyValuePair | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If the header or cookie is present, apply this metadata ``KeyValuePair``.

    If the value in the ``KeyValuePair`` is non-empty, it'll be used instead
    of the header or cookie value.
    """

    on_header_missing: "ConfigKeyValuePair | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If the header or cookie is not present, apply this metadata ``KeyValuePair``.

    The value in the ``KeyValuePair`` must be set, since it'll be used in lieu
    of the missing header or cookie value.
    """

    remove: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    Whether or not to remove the header after a rule is applied.

    This prevents headers from leaking.
    This field is not supported in case of a cookie.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.header_to_metadata.v3", "Config.Rule", ConfigRule
)


from ......type.matcher import v3 as _____type__matcher__v3__
