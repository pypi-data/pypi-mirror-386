# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/cache_v2/v3/cache.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CacheV2Config",
    "CacheV2ConfigKeyCreatorParams",
)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class CacheV2Config(betterproto2.Message):
    """
    [#protodoc-title: HTTP Cache Filter V2]

    [#extension: envoy.filters.http.cache_v2]
    [#next-free-field: 8]
    """

    typed_config: "______google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Config specific to the cache storage implementation. Required unless ``disabled``
    is true.
    [#extension-category: envoy.http.cache_v2]
    """

    disabled: "bool | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    When true, the cache filter is a no-op filter.

    Possible use-cases for this include:
    - Turning a filter on and off with :ref:`ECDS <envoy_v3_api_file_envoy/service/extension/v3/config_discovery.proto>`.
    [#comment: once route-specific overrides are implemented, they are the more likely use-case.]
    """

    allowed_vary_headers: "list[_____type__matcher__v3__.StringMatcher]" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    [#not-implemented-hide:]
    List of matching rules that defines allowed ``Vary`` headers.

    The ``vary`` response header holds a list of header names that affect the
    contents of a response, as described by
    https://httpwg.org/specs/rfc7234.html#caching.negotiated.responses.

    During insertion, ``allowed_vary_headers`` acts as a allowlist: if a
    response's ``vary`` header mentions any header names that aren't matched by any rules in
    ``allowed_vary_headers``, that response will not be cached.

    During lookup, ``allowed_vary_headers`` controls what request headers will be
    sent to the cache storage implementation.
    """

    key_creator_params: "CacheV2ConfigKeyCreatorParams | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    [#not-implemented-hide:]
    <TODO(toddmgreer) implement key customization>

    Modifies cache key creation by restricting which parts of the URL are included.
    """

    max_body_bytes: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)
    """
    [#not-implemented-hide:]
    <TODO(toddmgreer) implement size limit>

    Max body size the cache filter will insert into a cache. 0 means unlimited (though the cache
    storage implementation may have its own limit beyond which it will reject insertions).
    """

    ignore_request_cache_control_header: "bool" = betterproto2.field(
        6, betterproto2.TYPE_BOOL
    )
    """
    By default, a ``cache-control: no-cache`` or ``pragma: no-cache`` header in the request
    causes the cache to validate with its upstream even if the lookup is a hit. Setting this
    to true will ignore these headers.
    """

    override_upstream_cluster: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    If this is set, requests sent upstream to populate the cache will go to the
    specified cluster rather than the cluster selected by the vhost and route.

    If you have actions to be taken by the router filter - either
    ``upstream_http_filters`` or one of the ``RouteConfiguration`` actions such as
    ``response_headers_to_add`` - then the cache's side-channel going directly to the
    routed cluster will bypass these actions. You can set ``override_upstream_cluster``
    to an internal listener which duplicates the relevant ``RouteConfiguration``, to
    replicate the desired behavior on the side-channel upstream request issued by the
    cache.

    This is a workaround for implementation constraints which it is hoped will at some
    point become unnecessary, then unsupported and this field will be removed.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.cache_v2.v3", "CacheV2Config", CacheV2Config
)


@dataclass(eq=False, repr=False)
class CacheV2ConfigKeyCreatorParams(betterproto2.Message):
    """
    [#not-implemented-hide:]
    Modifies cache key creation by restricting which parts of the URL are included.
    """

    exclude_scheme: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    If true, exclude the URL scheme from the cache key. Set to true if your origins always
    produce the same response for http and https requests.
    """

    exclude_host: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If true, exclude the host from the cache key. Set to true if your origins' responses don't
    ever depend on host.
    """

    query_parameters_included: "list[_____config__route__v3__.QueryParameterMatcher]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    If ``query_parameters_included`` is nonempty, only query parameters matched
    by one or more of its matchers are included in the cache key. Any other
    query params will not affect cache lookup.
    """

    query_parameters_excluded: "list[_____config__route__v3__.QueryParameterMatcher]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    If ``query_parameters_excluded`` is nonempty, query parameters matched by one
    or more of its matchers are excluded from the cache key (even if also
    matched by ``query_parameters_included``), and will not affect cache lookup.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.cache_v2.v3",
    "CacheV2Config.KeyCreatorParams",
    CacheV2ConfigKeyCreatorParams,
)


from .......google import protobuf as ______google__protobuf__
from ......config.route import v3 as _____config__route__v3__
from ......type.matcher import v3 as _____type__matcher__v3__
