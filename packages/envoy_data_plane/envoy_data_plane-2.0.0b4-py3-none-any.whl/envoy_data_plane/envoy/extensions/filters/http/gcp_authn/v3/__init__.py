# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/gcp_authn/v3/gcp_authn.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Audience",
    "GcpAuthnFilterConfig",
    "TokenCacheConfig",
    "TokenHeader",
)

import datetime
import warnings
from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Audience(betterproto2.Message):
    """
    Audience is the URL of the receiving service that performs token authentication.
    It will be provided to the filter through cluster's typed_filter_metadata.
    """

    url: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message(
    "envoy.extensions.filters.http.gcp_authn.v3", "Audience", Audience
)


@dataclass(eq=False, repr=False)
class GcpAuthnFilterConfig(betterproto2.Message):
    """
    [#protodoc-title: GCP authentication]
    GCP authentication :ref:`configuration overview <config_http_filters_gcp_authn>`.
    [#extension: envoy.filters.http.gcp_authn]

    Filter configuration.
    [#next-free-field: 7]
    """

    http_uri: "_____config__core__v3__.HttpUri | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The HTTP URI to fetch tokens from GCE Metadata Server(https://cloud.google.com/compute/docs/metadata/overview).
    The URL format is "http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=[AUDIENCE]"

    This field is deprecated because it does not match the API surface provided by the google auth libraries.
    Control planes should not attempt to override the metadata server URI.
    The cluster and timeout can be configured using the ``cluster`` and ``timeout`` fields instead.
    For backward compatibility, the cluster and timeout configured in this field will be used
    if the new ``cluster`` and ``timeout`` fields are not set.
    """

    retry_policy: "_____config__core__v3__.RetryPolicy | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Retry policy for fetching tokens.
    Not supported by all data planes.
    """

    cache_config: "TokenCacheConfig | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Token cache configuration. This field is optional.
    """

    token_header: "TokenHeader | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Request header location to extract the token. By default (i.e. if this field is not specified), the token
    is extracted to the Authorization HTTP header, in the format "Authorization: Bearer <token>".
    Not supported by all data planes.
    """

    cluster: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Cluster to send traffic to the GCE metadata server. Not supported
    by all data planes; a data plane may instead have its own mechanism
    for contacting the metadata server.
    """

    timeout: "datetime.timedelta | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Timeout for fetching the tokens from the GCE metadata server.
    Not supported by all data planes.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("http_uri"):
            warnings.warn(
                "GcpAuthnFilterConfig.http_uri is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.extensions.filters.http.gcp_authn.v3",
    "GcpAuthnFilterConfig",
    GcpAuthnFilterConfig,
)


@dataclass(eq=False, repr=False)
class TokenCacheConfig(betterproto2.Message):
    """
    Token Cache configuration.
    """

    cache_size: "int | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt64Value,
        optional=True,
    )
    """
    The number of cache entries. The maximum number of entries is INT64_MAX as it is constrained by underlying cache implementation.
    Default value 0 (i.e., proto3 defaults) disables the cache by default. Other default values will enable the cache.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.gcp_authn.v3", "TokenCacheConfig", TokenCacheConfig
)


@dataclass(eq=False, repr=False)
class TokenHeader(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The HTTP header's name.
    """

    value_prefix: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The header's prefix. The format is "value_prefix<token>"
    For example, for "Authorization: Bearer <token>", value_prefix="Bearer " with a space at the
    end.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.gcp_authn.v3", "TokenHeader", TokenHeader
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
