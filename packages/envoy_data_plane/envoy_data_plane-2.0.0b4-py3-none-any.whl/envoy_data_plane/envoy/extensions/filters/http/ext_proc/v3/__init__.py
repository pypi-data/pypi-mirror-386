# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/ext_proc/v3/ext_proc.proto, envoy/extensions/filters/http/ext_proc/v3/processing_mode.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ExtProcHttpService",
    "ExtProcOverrides",
    "ExtProcPerRoute",
    "ExternalProcessor",
    "ExternalProcessorRouteCacheAction",
    "HeaderForwardingRules",
    "MetadataOptions",
    "MetadataOptionsMetadataNamespaces",
    "ProcessingMode",
    "ProcessingModeBodySendMode",
    "ProcessingModeHeaderSendMode",
)

import datetime
import warnings
from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ExternalProcessorRouteCacheAction(betterproto2.Enum):
    """
    Describes the route cache action to be taken when an external processor response
    is received in response to request headers.
    """

    DEFAULT = 0
    """
    The default behavior is to clear the route cache only when the
    :ref:`clear_route_cache <envoy_v3_api_field_service.ext_proc.v3.CommonResponse.clear_route_cache>`
    field is set in an external processor response.
    """

    CLEAR = 1
    """
    Always clear the route cache irrespective of the ``clear_route_cache`` bit in
    the external processor response.
    """

    RETAIN = 2
    """
    Do not clear the route cache irrespective of the ``clear_route_cache`` bit in
    the external processor response. Setting to ``RETAIN`` is equivalent to setting the
    :ref:`disable_clear_route_cache <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.disable_clear_route_cache>`
    to true.
    """


class ProcessingModeBodySendMode(betterproto2.Enum):
    """
    Control how the request and response bodies are handled
    When body mutation by external processor is enabled, ext_proc filter will always remove
    the content length header in four cases below because content length can not be guaranteed
    to be set correctly:
    1) STREAMED BodySendMode: header processing completes before body mutation comes back.
    2) BUFFERED_PARTIAL BodySendMode: body is buffered and could be injected in different phases.
    3) BUFFERED BodySendMode + SKIP HeaderSendMode: header processing (e.g., update content-length) is skipped.
    4) FULL_DUPLEX_STREAMED BodySendMode: header processing completes before body mutation comes back.

    In Envoy's http1 codec implementation, removing content length will enable chunked transfer
    encoding whenever feasible. The recipient (either client or server) must be able
    to parse and decode the chunked transfer coding.
    (see `details in RFC9112 <https://tools.ietf.org/html/rfc9112#section-7.1>`_).

    In BUFFERED BodySendMode + SEND HeaderSendMode, content length header is allowed but it is
    external processor's responsibility to set the content length correctly matched to the length
    of mutated body. If they don't match, the corresponding body mutation will be rejected and
    local reply will be sent with an error message.
    """

    NONE = 0
    """
    Do not send the body at all. This is the default.
    """

    STREAMED = 1
    """
    Stream the body to the server in pieces as they are seen.
    """

    BUFFERED = 2
    """
    Buffer the message body in memory and send the entire body at once.
    If the body exceeds the configured buffer limit, then the
    downstream system will receive an error.
    """

    BUFFERED_PARTIAL = 3
    """
    Buffer the message body in memory and send the entire body in one
    chunk. If the body exceeds the configured buffer limit, then the body contents
    up to the buffer limit will be sent.
    """

    FULL_DUPLEX_STREAMED = 4
    """
    The ext_proc client (the data plane) streams the body to the server in pieces as they arrive.

    1) The server may choose to buffer any number chunks of data before processing them.
    After it finishes buffering, the server processes the buffered data. Then it splits the processed
    data into any number of chunks, and streams them back to the ext_proc client one by one.
    The server may continuously do so until the complete body is processed.
    The individual response chunk size is recommended to be no greater than 64K bytes, or
    :ref:`max_receive_message_length <envoy_v3_api_field_config.core.v3.GrpcService.EnvoyGrpc.max_receive_message_length>`
    if EnvoyGrpc is used.

    2) The server may also choose to buffer the entire message, including the headers (if header mode is
    ``SEND``), the entire body, and the trailers (if present), before sending back any response.
    The server response has to maintain the headers-body-trailers ordering.

    3) Note that the server might also choose not to buffer data. That is, upon receiving a
    body request, it could process the data and send back a body response immediately.

    In this body mode:
    * The corresponding trailer mode has to be set to ``SEND``.
    * The client will send body and trailers (if present) to the server as they arrive.
      Sending the trailers (if present) is to inform the server the complete body arrives.
      In case there are no trailers, then the client will set
      :ref:`end_of_stream <envoy_v3_api_field_service.ext_proc.v3.HttpBody.end_of_stream>`
      to true as part of the last body chunk request to notify the server that no other data is to be sent.
    * The server needs to send
      :ref:`StreamedBodyResponse <envoy_v3_api_msg_service.ext_proc.v3.StreamedBodyResponse>`
      to the client in the body response.
    * The client will stream the body chunks in the responses from the server to the upstream/downstream as they arrive.
    """


class ProcessingModeHeaderSendMode(betterproto2.Enum):
    """
    Control how headers and trailers are handled
    """

    DEFAULT = 0
    """
    When used to configure the ext_proc filter :ref:`processing_mode
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`,
    the default HeaderSendMode depends on which part of the message is being processed. By
    default, request and response headers are sent, while trailers are skipped.

    When used in :ref:`mode_override
    <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>` or
    :ref:`allowed_override_modes
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.allowed_override_modes>`,
    a value of DEFAULT indicates that there is no change from the behavior that is configured for
    the filter in :ref:`processing_mode
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`.
    """

    SEND = 1
    """
    Send the header or trailer.
    """

    SKIP = 2
    """
    Do not send the header or trailer.
    """


@dataclass(eq=False, repr=False)
class ExternalProcessor(betterproto2.Message):
    """
    [#protodoc-title: External Processing Filter]
    External Processing Filter
    [#extension: envoy.filters.http.ext_proc]

    The External Processing filter allows an external service to act on HTTP traffic in a flexible way.

    The filter communicates with an external gRPC service called an "external processor"
    that can do a variety of things with the request and response:

    * Access and modify the HTTP headers on the request, response, or both.
    * Access and modify the HTTP request and response bodies.
    * Access and modify the dynamic stream metadata.
    * Immediately send an HTTP response downstream and terminate other processing.

    The filter communicates with the server using a gRPC bidirectional stream. After the initial
    request, the external server is in control over what additional data is sent to it
    and how it should be processed.

    By implementing the protocol specified by the stream, the external server can choose:

    * Whether it receives the response message at all.
    * Whether it receives the message body at all, in separate chunks, or as a single buffer.
    * To modify request or response trailers if they already exist.

    The filter supports up to six different processing steps. Each is represented by
    a gRPC stream message that is sent to the external processor. For each message, the
    processor must send a matching response.

    * Request headers: Contains the headers from the original HTTP request.
    * Request body: If the body is present, the behavior depends on the
      body send mode. In ``BUFFERED`` or ``BUFFERED_PARTIAL`` mode, the body is sent to the external
      processor in a single message. In ``STREAMED`` or ``FULL_DUPLEX_STREAMED`` mode, the body will
      be split across multiple messages sent to the external processor. In ``NONE`` mode, the body
      will not be sent to the external processor.
    * Request trailers: Delivered if they are present and if the trailer mode is set
      to ``SEND``.
    * Response headers: Contains the headers from the HTTP response. Keep in mind
      that if the upstream system sends them before processing the request body that
      this message may arrive before the complete body.
    * Response body: Sent according to the processing mode like the request body.
    * Response trailers: Delivered according to the processing mode like the
      request trailers.

    By default, the processor sends only the request and response headers messages.
    This may be changed to include any of the six steps by changing the ``processing_mode``
    setting of the filter configuration, or by setting the ``mode_override`` of any response
    from the external processor. The latter is only enabled if ``allow_mode_override`` is
    set to true. This way, a processor may, for example, use information
    in the request header to determine whether the message body must be examined, or whether
    the data plane should simply stream it straight through.

    All of this together allows a server to process the filter traffic in fairly
    sophisticated ways. For example:

    * A server may choose to examine all or part of the HTTP message bodies depending
      on the content of the headers.
    * A server may choose to immediately reject some messages based on their HTTP
      headers (or other dynamic metadata) and more carefully examine others.

    The protocol itself is based on a bidirectional gRPC stream. The data plane will send the server
    :ref:`ProcessingRequest <envoy_v3_api_msg_service.ext_proc.v3.ProcessingRequest>`
    messages, and the server must reply with
    :ref:`ProcessingResponse <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>`.

    Stats about each gRPC call are recorded in a :ref:`dynamic filter state
    <arch_overview_advanced_filter_state_sharing>` object in a namespace matching the filter
    name.

    [#next-free-field: 26]
    """

    grpc_service: "_____config__core__v3__.GrpcService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for the gRPC service that the filter will communicate with.
    Only one of ``grpc_service`` or ``http_service`` can be set.
    It is required that one of them must be set.
    """

    http_service: "ExtProcHttpService | None" = betterproto2.field(
        20, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for the HTTP service that the filter will communicate with.
    Only one of ``http_service`` or
    :ref:`grpc_service <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.grpc_service>`
    can be set. It is required that one of them must be set.

    If ``http_service`` is set, the
    :ref:`processing_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
    cannot be configured to send any body or trailers. i.e., ``http_service`` only supports
    sending request or response headers to the side stream server.

    With this configuration, the data plane behavior is:

    1. The headers are first put in a proto message
    :ref:`ProcessingRequest <envoy_v3_api_msg_service.ext_proc.v3.ProcessingRequest>`.

    2. This proto message is then transcoded into a JSON text.

    3. The data plane then sends an HTTP POST message with content-type as "application/json",
    and this JSON text as body to the side stream server.

    After the side-stream receives this HTTP request message, it is expected to do as follows:

    1. It converts the body, which is a JSON string, into a ``ProcessingRequest``
    proto message to examine and mutate the headers.

    2. It then sets the mutated headers into a new proto message
    :ref:`ProcessingResponse <envoy_v3_api_msg_service.ext_proc.v3.ProcessingResponse>`.

    3. It converts the ``ProcessingResponse`` proto message into a JSON text.

    4. It then sends an HTTP response back to the data plane with status code as ``"200"``,
    ``content-type`` as ``"application/json"`` and sets the JSON text as the body.
    """

    failure_mode_allow: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    By default, if in the following cases:

    1. The gRPC stream cannot be established.

    2. The gRPC stream is closed prematurely with an error.

    3. The external processing timeouts.

    4. The ext_proc server sends back spurious response messages.

    The filter will fail and a local reply with error code
    504(for timeout case) or 500(for all other cases), will be sent to the downstream.

    However, with this parameter set to true and if the above cases happen, the processing
    continues without error.
    """

    processing_mode: "ProcessingMode | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specifies default options for how HTTP headers, trailers, and bodies are
    sent. See ``ProcessingMode`` for details.
    """

    request_attributes: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )
    """
    The data plane provides a number of :ref:`attributes <arch_overview_attributes>`
    for expressive policies. Each attribute name provided in this field will be
    matched against that list and populated in the
    :ref:`ProcessingRequest.attributes <envoy_v3_api_field_service.ext_proc.v3.ProcessingRequest.attributes>` field.
    See the :ref:`attribute documentation <arch_overview_request_attributes>`
    for the list of supported attributes and their types.
    """

    response_attributes: "list[str]" = betterproto2.field(
        6, betterproto2.TYPE_STRING, repeated=True
    )
    """
    The data plane provides a number of :ref:`attributes <arch_overview_attributes>`
    for expressive policies. Each attribute name provided in this field will be
    matched against that list and populated in the
    :ref:`ProcessingRequest.attributes <envoy_v3_api_field_service.ext_proc.v3.ProcessingRequest.attributes>` field.
    See the :ref:`attribute documentation <arch_overview_attributes>`
    for the list of supported attributes and their types.
    """

    message_timeout: "datetime.timedelta | None" = betterproto2.field(
        7,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Specifies the timeout for each individual message sent on the stream.
    Whenever the data plane sends a message on the stream that requires a
    response, it will reset this timer, and will stop processing and return
    an error (subject to the processing mode) if the timer expires before a
    matching response is received. There is no timeout when the filter is
    running in observability mode or when the body send mode is
    ``FULL_DUPLEX_STREAMED``. Zero is a valid config which means the timer
    will be triggered immediately. If not configured, default is 200
    milliseconds.
    """

    stat_prefix: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    Optional additional prefix to use when emitting statistics. This allows to distinguish
    emitted statistics between configured ``ext_proc`` filters in an HTTP filter chain.
    """

    mutation_rules: "_____config__common__mutation_rules__v3__.HeaderMutationRules | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Rules that determine what modifications an external processing server may
    make to message headers. If not set, all headers may be modified except
    for "host", ":authority", ":scheme", ":method", and headers that start
    with the header prefix set via
    :ref:`header_prefix <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.header_prefix>`
    (which is usually "x-envoy").
    Note that changing headers such as "host" or ":authority" may not in itself
    change the data plane's routing decision, as routes can be cached. To also force the
    route to be recomputed, set the
    :ref:`clear_route_cache <envoy_v3_api_field_service.ext_proc.v3.CommonResponse.clear_route_cache>`
    field to true in the same response.
    """

    max_message_timeout: "datetime.timedelta | None" = betterproto2.field(
        10,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Specify the upper bound of
    :ref:`override_message_timeout <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.override_message_timeout>`
    If not specified, by default it is 0, which will effectively disable the ``override_message_timeout`` API.
    """

    forward_rules: "HeaderForwardingRules | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Allow headers matching the ``forward_rules`` to be forwarded to the external processing server.
    If not set, all headers are forwarded to the external processing server.
    """

    filter_metadata: "______google__protobuf__.Struct | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional metadata to be added to the filter state for logging purposes. The metadata
    will be added to StreamInfo's filter state under the namespace corresponding to the
    ext_proc filter name.
    """

    allow_mode_override: "bool" = betterproto2.field(14, betterproto2.TYPE_BOOL)
    """
    If ``allow_mode_override`` is set to true, the filter config :ref:`processing_mode
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
    can be overridden by the response message from the external processing server
    :ref:`mode_override <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>`.
    If not set, ``mode_override`` API in the response message will be ignored.
    Mode override is not supported if the body send mode is ``FULL_DUPLEX_STREAMED``.
    """

    disable_immediate_response: "bool" = betterproto2.field(15, betterproto2.TYPE_BOOL)
    """
    If set to true, ignore the
    :ref:`immediate_response <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.immediate_response>`
    message in an external processor response. In such case, no local reply will be sent.
    Instead, the stream to the external processor will be closed. There will be no
    more external processing for this stream from now on.
    """

    metadata_options: "MetadataOptions | None" = betterproto2.field(
        16, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Options related to the sending and receiving of dynamic metadata.
    """

    observability_mode: "bool" = betterproto2.field(17, betterproto2.TYPE_BOOL)
    """
    If true, send each part of the HTTP request or response specified by ``ProcessingMode``
    without pausing on filter chain iteration. It is "Send and Go" mode that can be used
    by external processor to observe the request's data and status. In this mode:

    1. Only ``STREAMED`` and ``NONE`` body processing modes are supported; for any other body
    processing mode, the body will not be sent.

    2. External processor should not send back processing response, as any responses will be ignored.
    This also means that
    :ref:`message_timeout <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.message_timeout>`
    restriction doesn't apply to this mode.

    3. External processor may still close the stream to indicate that no more messages are needed.

    .. warning::

       Flow control is a necessary mechanism to prevent the fast sender (either downstream client or upstream server)
       from overwhelming the external processor when its processing speed is slower.
       This protective measure is being explored and developed but has not been ready yet, so please use your own
       discretion when enabling this feature.
       This work is currently tracked under https://github.com/envoyproxy/envoy/issues/33319.
    """

    disable_clear_route_cache: "bool" = betterproto2.field(11, betterproto2.TYPE_BOOL)
    """
    Prevents clearing the route-cache when the
    :ref:`clear_route_cache <envoy_v3_api_field_service.ext_proc.v3.CommonResponse.clear_route_cache>`
    field is set in an external processor response.
    Only one of ``disable_clear_route_cache`` or ``route_cache_action`` can be set.
    It is recommended to set ``route_cache_action`` which supersedes ``disable_clear_route_cache``.
    """

    route_cache_action: "ExternalProcessorRouteCacheAction" = betterproto2.field(
        18,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ExternalProcessorRouteCacheAction(0),
    )
    """
    Specifies the action to be taken when an external processor response is
    received in response to request headers. It is recommended to set this field rather than set
    :ref:`disable_clear_route_cache <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.disable_clear_route_cache>`.
    Only one of ``disable_clear_route_cache`` or ``route_cache_action`` can be set.
    """

    deferred_close_timeout: "datetime.timedelta | None" = betterproto2.field(
        19,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Specifies the deferred closure timeout for gRPC stream that connects to external processor. Currently, the deferred stream closure
    is only used in :ref:`observability_mode <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.observability_mode>`.
    In observability mode, gRPC streams may be held open to the external processor longer than the lifetime of the regular client to
    backend stream lifetime. In this case, the data plane will eventually timeout the external processor stream according to this time limit.
    The default value is 5000 milliseconds (5 seconds) if not specified.
    """

    send_body_without_waiting_for_header_response: "bool" = betterproto2.field(
        21, betterproto2.TYPE_BOOL
    )
    """
    Send body to the side stream server once it arrives without waiting for the header response from that server.
    It only works for ``STREAMED`` body processing mode. For any other body
    processing modes, it is ignored.
    The server has two options upon receiving a header request:

    1. Instant Response: send the header response as soon as the header request is received.

    2. Delayed Response: wait for the body before sending any response.

    In all scenarios, the header-body ordering must always be maintained.

    If enabled the data plane will ignore the
    :ref:`mode_override <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>`
    value that the server sends in the header response. This is because the data plane may have already
    sent the body to the server, prior to processing the header response.
    """

    allowed_override_modes: "list[ProcessingMode]" = betterproto2.field(
        22, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    When :ref:`allow_mode_override
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.allow_mode_override>` is enabled and
    ``allowed_override_modes`` is configured, the filter config :ref:`processing_mode
    <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_mode>`
    can only be overridden by the response message from the external processing server iff the
    :ref:`mode_override <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>` is allowed by
    the ``allowed_override_modes`` allow-list below.
    Since ``request_header_mode`` is not applicable in any way, it's ignored in comparison.
    """

    processing_request_modifier: "_____config__core__v3__.TypedExtensionConfig | None" = betterproto2.field(
        25, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Decorator to introduce custom logic that runs after the ``ProcessingRequest`` is constructed, but
    before it is sent to the External Processor. The ``ProcessingRequest`` may be modified.

    .. note::
      Processing request modifiers are currently in alpha.

    [#extension-category: envoy.http.ext_proc.processing_request_modifiers]
    """

    on_processing_response: "_____config__core__v3__.TypedExtensionConfig | None" = (
        betterproto2.field(23, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Decorator to introduce custom logic that runs after a message received from
    the External Processor is processed, but before continuing filter chain iteration.

    .. note::
      Response processors are currently in alpha.

    [#extension-category: envoy.http.ext_proc.response_processors]
    """

    status_on_error: "_____type__v3__.HttpStatus | None" = betterproto2.field(
        24, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Sets the HTTP status code that is returned to the client when the external processing server returns
    an error, fails to respond, or cannot be reached.

    The default status is ``HTTP 500 Internal Server Error``.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_proc.v3", "ExternalProcessor", ExternalProcessor
)


@dataclass(eq=False, repr=False)
class ExtProcHttpService(betterproto2.Message):
    """
    ExtProcHttpService is used for HTTP communication between the filter and the external processing service.
    """

    http_service: "_____config__core__v3__.HttpService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Sets the HTTP service which the external processing requests must be sent to.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_proc.v3",
    "ExtProcHttpService",
    ExtProcHttpService,
)


@dataclass(eq=False, repr=False)
class ExtProcOverrides(betterproto2.Message):
    """
    Overrides that may be set on a per-route basis
    [#next-free-field: 10]
    """

    processing_mode: "ProcessingMode | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Set a different processing mode for this route than the default.
    """

    async_mode: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    [#not-implemented-hide:]
    Set a different asynchronous processing option than the default.
    Deprecated and not implemented.
    """

    request_attributes: "list[str]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    [#not-implemented-hide:]
    Set different optional attributes than the default setting of the
    ``request_attributes`` field.
    """

    response_attributes: "list[str]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )
    """
    [#not-implemented-hide:]
    Set different optional properties than the default setting of the
    ``response_attributes`` field.
    """

    grpc_service: "_____config__core__v3__.GrpcService | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Set a different gRPC service for this route than the default.
    """

    metadata_options: "MetadataOptions | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Options related to the sending and receiving of dynamic metadata.
    Lists of forwarding and receiving namespaces will be overridden in their entirety,
    meaning the most-specific config that specifies this override will be the final
    config used. It is the prerogative of the control plane to ensure this
    most-specific config contains the correct final overrides.
    """

    grpc_initial_metadata: "list[_____config__core__v3__.HeaderValue]" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Additional metadata to include into streams initiated to the ``ext_proc`` gRPC
    service. This can be used for scenarios in which additional ad hoc
    authorization headers (e.g. ``x-foo-bar: baz-key``) are to be injected or
    when a route needs to partially override inherited metadata.
    """

    failure_mode_allow: "bool | None" = betterproto2.field(
        8,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    If true, the filter will not fail closed if the gRPC stream is prematurely closed
    or could not be opened. This field is the per-route override of
    :ref:`failure_mode_allow <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.failure_mode_allow>`.
    """

    processing_request_modifier: "_____config__core__v3__.TypedExtensionConfig | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Decorator to introduce custom logic that runs after the ``ProcessingRequest`` is constructed, but
    before it is sent to the External Processor. The ``ProcessingRequest`` may be modified.
    This is a per-route override of
    :ref:`processing_request_modifier <envoy_v3_api_field_extensions.filters.http.ext_proc.v3.ExternalProcessor.processing_request_modifier>`.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("async_mode"):
            warnings.warn(
                "ExtProcOverrides.async_mode is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_proc.v3", "ExtProcOverrides", ExtProcOverrides
)


@dataclass(eq=False, repr=False)
class ExtProcPerRoute(betterproto2.Message):
    """
    Extra settings that may be added to per-route configuration for a
    virtual host or cluster.

    Oneofs:
        - override:
    """

    disabled: "bool | None" = betterproto2.field(
        1, betterproto2.TYPE_BOOL, optional=True, group="override"
    )
    """
    Disable the filter for this particular vhost or route.
    If disabled is specified in multiple per-filter-configs, the most specific one will be used.
    """

    overrides: "ExtProcOverrides | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="override"
    )
    """
    Override aspects of the configuration for this route. A set of
    overrides in a more specific configuration will override a "disabled"
    flag set in a less-specific one.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_proc.v3", "ExtProcPerRoute", ExtProcPerRoute
)


@dataclass(eq=False, repr=False)
class HeaderForwardingRules(betterproto2.Message):
    """
    The HeaderForwardingRules structure specifies what headers are
    allowed to be forwarded to the external processing server.

    This works as below:

      1. If neither ``allowed_headers`` nor ``disallowed_headers`` is set, all headers are forwarded.
      2. If both ``allowed_headers`` and ``disallowed_headers`` are set, only headers in the
         ``allowed_headers`` but not in the ``disallowed_headers`` are forwarded.
      3. If ``allowed_headers`` is set, and ``disallowed_headers`` is not set, only headers in
         the ``allowed_headers`` are forwarded.
      4. If ``disallowed_headers`` is set, and ``allowed_headers`` is not set, all headers except
         headers in the ``disallowed_headers`` are forwarded.
    """

    allowed_headers: "_____type__matcher__v3__.ListStringMatcher | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If set, specifically allow any header in this list to be forwarded to the external
    processing server. This can be overridden by the below ``disallowed_headers``.
    """

    disallowed_headers: "_____type__matcher__v3__.ListStringMatcher | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If set, specifically disallow any header in this list to be forwarded to the external
    processing server. This overrides the above ``allowed_headers`` if a header matches both.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_proc.v3",
    "HeaderForwardingRules",
    HeaderForwardingRules,
)


@dataclass(eq=False, repr=False)
class MetadataOptions(betterproto2.Message):
    """
    The MetadataOptions structure defines options for the sending and receiving of
    dynamic metadata. Specifically, which namespaces to send to the server, whether
    metadata returned by the server may be written, and how that metadata may be written.
    """

    forwarding_namespaces: "MetadataOptionsMetadataNamespaces | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Describes which typed or untyped dynamic metadata namespaces to forward to
    the external processing server.
    """

    receiving_namespaces: "MetadataOptionsMetadataNamespaces | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Describes which typed or untyped dynamic metadata namespaces to accept from
    the external processing server. Set to empty or leave unset to disallow writing
    any received dynamic metadata. Receiving of typed metadata is not supported.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_proc.v3", "MetadataOptions", MetadataOptions
)


@dataclass(eq=False, repr=False)
class MetadataOptionsMetadataNamespaces(betterproto2.Message):
    untyped: "list[str]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Specifies a list of metadata namespaces whose values, if present,
    will be passed to the ``ext_proc`` service as an opaque ``protobuf::Struct``.
    """

    typed: "list[str]" = betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)
    """
    Specifies a list of metadata namespaces whose values, if present,
    will be passed to the ``ext_proc`` service as a ``protobuf::Any``. This allows
    envoy and the external processing server to share the protobuf message
    definition for safe parsing.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_proc.v3",
    "MetadataOptions.MetadataNamespaces",
    MetadataOptionsMetadataNamespaces,
)


@dataclass(eq=False, repr=False)
class ProcessingMode(betterproto2.Message):
    """
    [#protodoc-title: External Processing Filter]
    External Processing Filter Processing Mode
    [#extension: envoy.filters.http.ext_proc]

    This configuration describes which parts of an HTTP request and
    response are sent to a remote server and how they are delivered.

    [#next-free-field: 7]
    """

    request_header_mode: "ProcessingModeHeaderSendMode" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ProcessingModeHeaderSendMode(0),
    )
    """
    How to handle the request header. Default is "SEND".
    Note this field is ignored in :ref:`mode_override
    <envoy_v3_api_field_service.ext_proc.v3.ProcessingResponse.mode_override>`, since mode
    overrides can only affect messages exchanged after the request header is processed.
    """

    response_header_mode: "ProcessingModeHeaderSendMode" = betterproto2.field(
        2,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ProcessingModeHeaderSendMode(0),
    )
    """
    How to handle the response header. Default is "SEND".
    """

    request_body_mode: "ProcessingModeBodySendMode" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, default_factory=lambda: ProcessingModeBodySendMode(0)
    )
    """
    How to handle the request body. Default is "NONE".
    """

    response_body_mode: "ProcessingModeBodySendMode" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: ProcessingModeBodySendMode(0)
    )
    """
    How do handle the response body. Default is "NONE".
    """

    request_trailer_mode: "ProcessingModeHeaderSendMode" = betterproto2.field(
        5,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ProcessingModeHeaderSendMode(0),
    )
    """
    How to handle the request trailers. Default is "SKIP".
    """

    response_trailer_mode: "ProcessingModeHeaderSendMode" = betterproto2.field(
        6,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ProcessingModeHeaderSendMode(0),
    )
    """
    How to handle the response trailers. Default is "SKIP".
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_proc.v3", "ProcessingMode", ProcessingMode
)


from .......google import protobuf as ______google__protobuf__
from ......config.common.mutation_rules import (
    v3 as _____config__common__mutation_rules__v3__,
)
from ......config.core import v3 as _____config__core__v3__
from ......type import v3 as _____type__v3__
from ......type.matcher import v3 as _____type__matcher__v3__
