# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/cors/v3/cors.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Cors",
    "CorsPolicy",
)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class Cors(betterproto2.Message):
    """
    [#protodoc-title: Cors]
    CORS Filter :ref:`configuration overview <config_http_filters_cors>`.
    [#extension: envoy.filters.http.cors]

    Cors filter config. Set this in
    :ref:`http_filters <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.http_filters>`
    to enable the CORS filter.

    Please note that the :ref:`CorsPolicy <envoy_v3_api_msg_extensions.filters.http.cors.v3.CorsPolicy>`
    must be configured in the ``RouteConfiguration`` as ``typed_per_filter_config`` at some level to make the filter work.
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.filters.http.cors.v3", "Cors", Cors
)


@dataclass(eq=False, repr=False)
class CorsPolicy(betterproto2.Message):
    """
    Per route configuration for the CORS filter. This configuration should be configured in the ``RouteConfiguration`` as ``typed_per_filter_config`` at some level to
    make the filter work.
    [#next-free-field: 11]
    """

    allow_origin_string_match: "list[_____type__matcher__v3__.StringMatcher]" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Specifies string patterns that match allowed origins. An origin is allowed if any of the
    string matchers match.
    """

    allow_methods: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Specifies the content for the ``access-control-allow-methods`` header.
    """

    allow_headers: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Specifies the content for the ``access-control-allow-headers`` header.
    """

    expose_headers: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Specifies the content for the ``access-control-expose-headers`` header.
    """

    max_age: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Specifies the content for the ``access-control-max-age`` header.
    """

    allow_credentials: "bool | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Specifies whether the resource allows credentials.
    """

    filter_enabled: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies the % of requests for which the CORS filter is enabled.

    If neither ``filter_enabled``, nor ``shadow_enabled`` are specified, the CORS
    filter will be enabled for 100% of the requests.

    If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is
    specified, Envoy will lookup the runtime key to get the percentage of requests to filter.
    """

    shadow_enabled: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(8, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies the % of requests for which the CORS policies will be evaluated and tracked, but not
    enforced.

    This field is intended to be used when ``filter_enabled`` is off. That field have to explicitly disable
    the filter in order for this setting to take effect.

    If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
    Envoy will lookup the runtime key to get the percentage of requests for which it will evaluate
    and track the request's ``Origin`` to determine if it's valid but will not enforce any policies.
    """

    allow_private_network_access: "bool | None" = betterproto2.field(
        9,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Specify whether allow requests whose target server's IP address is more private than that from
    which the request initiator was fetched.

    More details refer to https://developer.chrome.com/blog/private-network-access-preflight.
    """

    forward_not_matching_preflights: "bool | None" = betterproto2.field(
        10,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Specifies if preflight requests not matching the configured allowed origin should be forwarded
    to the upstream. Default is true.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.cors.v3", "CorsPolicy", CorsPolicy
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
from ......type.matcher import v3 as _____type__matcher__v3__
