# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/ratelimit/v3/rate_limit.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "RateLimit",
    "RateLimitPerRoute",
    "RateLimitPerRouteOverrideOptions",
    "RateLimitPerRouteVhRateLimitsOptions",
    "RateLimitXRateLimitHeadersRfcVersion",
)

import datetime
from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class RateLimitXRateLimitHeadersRfcVersion(betterproto2.Enum):
    """
    Defines the version of the standard to use for X-RateLimit headers.

    [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.XRateLimitHeadersRFCVersion instead.]
    """

    OFF = 0
    """
    X-RateLimit headers disabled.
    """

    DRAFT_VERSION_03 = 1
    """
    Use `draft RFC Version 03 <https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html>`_.
    """


class RateLimitPerRouteOverrideOptions(betterproto2.Enum):
    """
    The override option determines how the filter handles the cases where there is an override config at a more specific level than this one (from least to most specific: virtual host, route, cluster weight).
    [#not-implemented-hide:]
    """

    DEFAULT = 0
    """
    Client-defined default, typically OVERRIDE_POLICY. If VhRateLimitsOptions is set, that will be used instead.
    """

    OVERRIDE_POLICY = 1
    """
    If there is an override config at a more specific level, use that instead of this one.
    """

    INCLUDE_POLICY = 2
    """
    If there is an override config at a more specific level, use data from both.
    """

    IGNORE_POLICY = 3
    """
    If there is an override config at a more specific level, ignore it and use only this one.
    """


class RateLimitPerRouteVhRateLimitsOptions(betterproto2.Enum):
    """
    [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.VhRateLimitsOptions instead.]
    """

    OVERRIDE = 0
    """
    Use the virtual host rate limits unless the route has a rate limit policy.
    """

    INCLUDE = 1
    """
    Use the virtual host rate limits even if the route has a rate limit policy.
    """

    IGNORE = 2
    """
    Ignore the virtual host rate limits even if the route does not have a rate limit policy.
    """


@dataclass(eq=False, repr=False)
class RateLimit(betterproto2.Message):
    """
    [#protodoc-title: Rate limit]
    Rate limit :ref:`configuration overview <config_http_filters_rate_limit>`.
    [#extension: envoy.filters.http.ratelimit]

    [#next-free-field: 18]
    """

    domain: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The rate limit domain to use when calling the rate limit service.
    """

    stage: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    Specifies the rate limit configurations to be applied with the same
    stage number. If not set, the default stage number is 0.

    .. note::

     The filter supports a range of 0 - 10 inclusively for stage numbers.
    """

    request_type: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    The type of requests the filter should apply to. The supported
    types are ``internal``, ``external`` or ``both``. A request is considered internal if
    :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>` is set to true. If
    :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>` is not set or false, a
    request is considered external. The filter defaults to ``both``, and it will apply to all request
    types.
    """

    timeout: "datetime.timedelta | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    The timeout in milliseconds for the rate limit service RPC. If not
    set, this defaults to 20ms.
    """

    failure_mode_deny: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    The filter's behaviour in case the rate limiting service does
    not respond back. When it is set to true, Envoy will not allow traffic in case of
    communication failure between rate limiting service and the proxy.
    """

    rate_limited_as_resource_exhausted: "bool" = betterproto2.field(
        6, betterproto2.TYPE_BOOL
    )
    """
    Specifies whether a ``RESOURCE_EXHAUSTED`` gRPC code must be returned instead
    of the default ``UNAVAILABLE`` gRPC code for a rate limited gRPC call. The
    HTTP code will be 200 for a gRPC response.
    """

    rate_limit_service: "_____config__ratelimit__v3__.RateLimitServiceConfig | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration for an external rate limit service provider. If not
    specified, any calls to the rate limit service will immediately return
    success.
    """

    enable_x_ratelimit_headers: "RateLimitXRateLimitHeadersRfcVersion" = (
        betterproto2.field(
            8,
            betterproto2.TYPE_ENUM,
            default_factory=lambda: RateLimitXRateLimitHeadersRfcVersion(0),
        )
    )
    """
    Defines the standard version to use for X-RateLimit headers emitted by the filter:

    * ``X-RateLimit-Limit`` - indicates the request-quota associated to the
      client in the current time-window followed by the description of the
      quota policy. The values are returned by the rate limiting service in
      :ref:`current_limit<envoy_v3_api_field_service.ratelimit.v3.RateLimitResponse.DescriptorStatus.current_limit>`
      field. Example: ``10, 10;w=1;name="per-ip", 1000;w=3600``.
    * ``X-RateLimit-Remaining`` - indicates the remaining requests in the
      current time-window. The values are returned by the rate limiting service
      in :ref:`limit_remaining<envoy_v3_api_field_service.ratelimit.v3.RateLimitResponse.DescriptorStatus.limit_remaining>`
      field.
    * ``X-RateLimit-Reset`` - indicates the number of seconds until reset of
      the current time-window. The values are returned by the rate limiting service
      in :ref:`duration_until_reset<envoy_v3_api_field_service.ratelimit.v3.RateLimitResponse.DescriptorStatus.duration_until_reset>`
      field.

    In case rate limiting policy specifies more than one time window, the values
    above represent the window that is closest to reaching its limit.

    For more information about the headers specification see selected version of
    the `draft RFC <https://tools.ietf.org/id/draft-polli-ratelimit-headers-03.html>`_.

    Disabled by default.

    [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.XRateLimitHeadersRFCVersion instead.]
    """

    disable_x_envoy_ratelimited_header: "bool" = betterproto2.field(
        9, betterproto2.TYPE_BOOL
    )
    """
    Disables emitting the :ref:`x-envoy-ratelimited<config_http_filters_router_x-envoy-ratelimited>` header
    in case of rate limiting (i.e. 429 responses).
    Having this header not present potentially makes the request retriable.
    """

    rate_limited_status: "_____type__v3__.HttpStatus | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This field allows for a custom HTTP response status code to the downstream client when
    the request has been rate limited.
    Defaults to 429 (TooManyRequests).

    .. note::
      If this is set to < 400, 429 will be used instead.
    """

    response_headers_to_add: "list[_____config__core__v3__.HeaderValueOption]" = (
        betterproto2.field(11, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Specifies a list of HTTP headers that should be added to each response for requests that
    have been rate limited.
    """

    status_on_error: "_____type__v3__.HttpStatus | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Sets the HTTP status that is returned to the client when the ratelimit server returns an error
    or cannot be reached. The default status is 500.
    """

    stat_prefix: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)
    """
    Optional additional prefix to use when emitting statistics. This allows to distinguish
    emitted statistics between configured ``ratelimit`` filters in an HTTP filter chain.
    """

    filter_enabled: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(14, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If set, this will enable -- but not necessarily enforce -- the rate limit for the given
    fraction of requests.

    If not set then ``ratelimit.http_filter_enabled`` runtime key will be used to determine
    the fraction of requests to enforce rate limits on. And the default percentage of the
    runtime key is 100% for backwards compatibility.
    """

    filter_enforced: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(15, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If set, this will enforce the rate limit decisions for the given fraction of requests.

    Note: this only applies to the fraction of enabled requests.

    If not set then ``ratelimit.http_filter_enforcing`` runtime key will be used to determine
    the fraction of requests to enforce rate limits on. And the default percentage of the
    runtime key is 100% for backwards compatibility.
    """

    failure_mode_deny_percent: "_____config__core__v3__.RuntimeFractionalPercent | None" = betterproto2.field(
        16, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If set, this will override the failure_mode_deny parameter with a runtime fraction.
    If the runtime key is not specified, the value of failure_mode_deny will be used.

    Example:

    .. code-block:: yaml

      failure_mode_deny: true
      failure_mode_deny_percent:
        default_value:
          numerator: 50
          denominator: HUNDRED
        runtime_key: ratelimit.failure_mode_deny_percent

    This means that when the rate limit service is unavailable, 50% of requests will be denied
    (fail closed) and 50% will be allowed (fail open).
    """

    rate_limits: "list[_____config__route__v3__.RateLimit]" = betterproto2.field(
        17, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Rate limit configuration that is used to generate a list of descriptor entries based on
    the request context. The generated entries will be sent to the rate limit service.
    If this is set, then
    :ref:`VirtualHost.rate_limits<envoy_v3_api_field_config.route.v3.VirtualHost.rate_limits>` or
    :ref:`RouteAction.rate_limits<envoy_v3_api_field_config.route.v3.RouteAction.rate_limits>` fields
    will be ignored. However, :ref:`RateLimitPerRoute.rate_limits<envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimitPerRoute.rate_limits>`
    will take precedence over this field.

    .. note::
      Not all configuration fields of
      :ref:`rate limit config <envoy_v3_api_msg_config.route.v3.RateLimit>` is supported at here.
      Following fields are not supported:

      1. :ref:`rate limit stage <envoy_v3_api_field_config.route.v3.RateLimit.stage>`.
      2. :ref:`dynamic metadata <envoy_v3_api_field_config.route.v3.RateLimit.Action.dynamic_metadata>`.
      3. :ref:`disable_key <envoy_v3_api_field_config.route.v3.RateLimit.disable_key>`.
      4. :ref:`override limit <envoy_v3_api_field_config.route.v3.RateLimit.limit>`.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3", "RateLimit", RateLimit
)


@dataclass(eq=False, repr=False)
class RateLimitPerRoute(betterproto2.Message):
    vh_rate_limits: "RateLimitPerRouteVhRateLimitsOptions" = betterproto2.field(
        1,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: RateLimitPerRouteVhRateLimitsOptions(0),
    )
    """
    Specifies if the rate limit filter should include the virtual host rate limits.
    [#next-major-version: unify with local ratelimit, should use common.ratelimit.v3.VhRateLimitsOptions instead.]
    """

    override_option: "RateLimitPerRouteOverrideOptions" = betterproto2.field(
        2,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: RateLimitPerRouteOverrideOptions(0),
    )
    """
    Specifies if the rate limit filter should include the lower levels (route level, virtual host level or cluster weight level) rate limits override options.
    [#not-implemented-hide:]
    """

    rate_limits: "list[_____config__route__v3__.RateLimit]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Rate limit configuration that is used to generate a list of descriptor entries based on
    the request context. The generated entries will be used to find one or multiple matched rate
    limit rule from the ``descriptors``.
    If this is set, then
    :ref:`VirtualHost.rate_limits<envoy_v3_api_field_config.route.v3.VirtualHost.rate_limits>`,
    :ref:`RouteAction.rate_limits<envoy_v3_api_field_config.route.v3.RouteAction.rate_limits>` and
    :ref:`RateLimit.rate_limits<envoy_v3_api_field_extensions.filters.http.ratelimit.v3.RateLimit.rate_limits>` fields
    will be ignored.

    .. note::
      Not all configuration fields of
      :ref:`rate limit config <envoy_v3_api_msg_config.route.v3.RateLimit>` is supported at here.
      Following fields are not supported:

      1. :ref:`rate limit stage <envoy_v3_api_field_config.route.v3.RateLimit.stage>`.
      2. :ref:`dynamic metadata <envoy_v3_api_field_config.route.v3.RateLimit.Action.dynamic_metadata>`.
      3. :ref:`disable_key <envoy_v3_api_field_config.route.v3.RateLimit.disable_key>`.
      4. :ref:`override limit <envoy_v3_api_field_config.route.v3.RateLimit.limit>`.
    """

    domain: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Overrides the domain. If not set, uses the filter-level domain instead.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ratelimit.v3", "RateLimitPerRoute", RateLimitPerRoute
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
from ......config.ratelimit import v3 as _____config__ratelimit__v3__
from ......config.route import v3 as _____config__route__v3__
from ......type import v3 as _____type__v3__
