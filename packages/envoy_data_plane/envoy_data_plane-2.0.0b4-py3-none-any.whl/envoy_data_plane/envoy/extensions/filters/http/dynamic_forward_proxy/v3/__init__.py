# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/dynamic_forward_proxy/v3/dynamic_forward_proxy.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "FilterConfig",
    "PerRouteConfig",
    "SubClusterConfig",
)

import datetime
from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class FilterConfig(betterproto2.Message):
    """
    [#protodoc-title: Dynamic forward proxy]

    Configuration for the dynamic forward proxy HTTP filter. See the :ref:`architecture overview
    <arch_overview_http_dynamic_forward_proxy>` for more information.
    [#extension: envoy.filters.http.dynamic_forward_proxy]

    Oneofs:
        - implementation_specifier:
    """

    dns_cache_config: "____common__dynamic_forward_proxy__v3__.DnsCacheConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="implementation_specifier"
    )
    """
    The DNS cache configuration that the filter will attach to. Note this configuration must
    match that of associated :ref:`dynamic forward proxy cluster configuration
    <envoy_v3_api_field_extensions.clusters.dynamic_forward_proxy.v3.ClusterConfig.dns_cache_config>`.
    """

    sub_cluster_config: "SubClusterConfig | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="implementation_specifier"
    )
    """
    The configuration that the filter will use, when the related dynamic forward proxy cluster enabled
    sub clusters.
    """

    save_upstream_address: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    When this flag is set, the filter will add the resolved upstream address in the filter
    state. The state should be saved with key
    ``envoy.stream.upstream_address`` (See
    :repo:`upstream_address.h<source/common/stream_info/upstream_address.h>`).
    """

    allow_dynamic_host_from_filter_state: "bool" = betterproto2.field(
        4, betterproto2.TYPE_BOOL
    )
    """
    When this flag is set, the filter will check for the ``envoy.upstream.dynamic_host``
    and/or ``envoy.upstream.dynamic_port`` filter state values before using the HTTP
    Host header for DNS resolution. This provides consistency with the
    :ref:`SNI dynamic forward proxy <envoy_v3_api_msg_extensions.filters.network.sni_dynamic_forward_proxy.v3.FilterConfig>` and
    :ref:`UDP dynamic forward proxy <envoy_v3_api_msg_extensions.filters.udp.udp_proxy.session.dynamic_forward_proxy.v3.FilterConfig>`
    filters behavior when enabled.

    If the flag is not set (default), the filter will use the HTTP Host header
    for DNS resolution, maintaining backward compatibility.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.dynamic_forward_proxy.v3",
    "FilterConfig",
    FilterConfig,
)


@dataclass(eq=False, repr=False)
class PerRouteConfig(betterproto2.Message):
    """
    Per route Configuration for the dynamic forward proxy HTTP filter.

    Oneofs:
        - host_rewrite_specifier:
    """

    host_rewrite_literal: "str | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="host_rewrite_specifier"
    )
    """
    Indicates that before DNS lookup, the host header will be swapped with
    this value. If not set or empty, the original host header value
    will be used and no rewrite will happen.

    .. note::

      This rewrite affects both DNS lookup and host header forwarding. However, this option shouldn't be used with
      :ref:`HCM host rewrite header <envoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite>` given that
      the value set here would be used for DNS lookups whereas the value set in the HCM would be used for host
      header forwarding which might not be the desired outcome.
    """

    host_rewrite_header: "str | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="host_rewrite_specifier"
    )
    """
    Indicates that before DNS lookup, the host header will be swapped with
    the value of this header. If not set or empty, the original host header
    value will be used and no rewrite will happen.

    .. note::

      This rewrite affects both DNS lookup and host header forwarding. However, this option shouldn't be used with
      :ref:`HCM host rewrite header <envoy_v3_api_field_config.route.v3.RouteAction.auto_host_rewrite>` given that
      the value set here would be used for DNS lookups whereas the value set in the HCM would be used for host
      header forwarding which might not be the desired outcome.

    .. note::

      If the header appears multiple times only the first value is used.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.dynamic_forward_proxy.v3",
    "PerRouteConfig",
    PerRouteConfig,
)


@dataclass(eq=False, repr=False)
class SubClusterConfig(betterproto2.Message):
    cluster_init_timeout: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    The timeout used for sub cluster initialization. Defaults to **5s** if not set.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.dynamic_forward_proxy.v3",
    "SubClusterConfig",
    SubClusterConfig,
)


from .......google import protobuf as ______google__protobuf__
from .....common.dynamic_forward_proxy import (
    v3 as ____common__dynamic_forward_proxy__v3__,
)
