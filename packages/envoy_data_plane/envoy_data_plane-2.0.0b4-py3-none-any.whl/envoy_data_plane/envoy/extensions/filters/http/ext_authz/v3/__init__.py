# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/ext_authz/v3/ext_authz.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AuthorizationRequest",
    "AuthorizationResponse",
    "BufferSettings",
    "CheckSettings",
    "ExtAuthz",
    "ExtAuthzPerRoute",
    "HttpService",
)

import warnings
from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class AuthorizationRequest(betterproto2.Message):
    allowed_headers: "_____type__matcher__v3__.ListStringMatcher | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Authorization request includes the client request headers that have a corresponding match
    in the :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>`.
    This field has been deprecated in favor of :ref:`allowed_headers
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.allowed_headers>`.

    .. note::

      In addition to the user's supplied matchers, ``Host``, ``Method``, ``Path``,
      ``Content-Length``, and ``Authorization`` are **automatically included** in the list.

    .. note::

      By default, the ``Content-Length`` header is set to ``0`` and the request to the authorization
      service has no message body. However, the authorization request *may* include the buffered
      client request body (controlled by :ref:`with_request_body
      <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.with_request_body>`
      setting); hence the value of its ``Content-Length`` reflects the size of its payload.
    """

    headers_to_add: "list[_____config__core__v3__.HeaderValue]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Sets a list of headers that will be included in the request to the authorization service. Note that
    client request headers with the same key will be overridden.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("allowed_headers"):
            warnings.warn(
                "AuthorizationRequest.allowed_headers is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_authz.v3",
    "AuthorizationRequest",
    AuthorizationRequest,
)


@dataclass(eq=False, repr=False)
class AuthorizationResponse(betterproto2.Message):
    """
    [#next-free-field: 6]
    """

    allowed_upstream_headers: "_____type__matcher__v3__.ListStringMatcher | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    When this :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>` is set, authorization
    response headers that have a correspondent match will be added to the original client request.
    Note that coexistent headers will be overridden.
    """

    allowed_upstream_headers_to_append: "_____type__matcher__v3__.ListStringMatcher | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    When this :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>` is set, authorization
    response headers that have a correspondent match will be added to the original client request.
    Note that coexistent headers will be appended.
    """

    allowed_client_headers: "_____type__matcher__v3__.ListStringMatcher | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    When this :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>` is set, authorization
    response headers that have a correspondent match will be added to the client's response. Note
    that when this list is *not* set, all the authorization response headers, except ``Authority
    (Host)`` will be in the response to the client. When a header is included in this list, ``Path``,
    ``Status``, ``Content-Length``, ``WWWAuthenticate`` and ``Location`` are automatically added.
    """

    allowed_client_headers_on_success: "_____type__matcher__v3__.ListStringMatcher | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    When this :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>` is set, authorization
    response headers that have a correspondent match will be added to the client's response when
    the authorization response itself is successful, i.e. not failed or denied. When this list is
    *not* set, no additional headers will be added to the client's response on success.
    """

    dynamic_metadata_from_headers: "_____type__matcher__v3__.ListStringMatcher | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    When this :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>` is set, authorization
    response headers that have a correspondent match will be emitted as dynamic metadata to be consumed
    by the next filter. This metadata lives in a namespace specified by the canonical name of extension filter
    that requires it:

    - :ref:`envoy.filters.http.ext_authz <config_http_filters_ext_authz_dynamic_metadata>` for HTTP filter.
    - :ref:`envoy.filters.network.ext_authz <config_network_filters_ext_authz_dynamic_metadata>` for network filter.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_authz.v3",
    "AuthorizationResponse",
    AuthorizationResponse,
)


@dataclass(eq=False, repr=False)
class BufferSettings(betterproto2.Message):
    """
    Configuration for buffering the request data.
    """

    max_request_bytes: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    Sets the maximum size of a message body that the filter will hold in memory. Envoy will return
    ``HTTP 413`` and will *not* initiate the authorization process when the buffer reaches the size
    set in this field. Note that this setting will have precedence over :ref:`failure_mode_allow
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.failure_mode_allow>`.
    """

    allow_partial_message: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    When this field is ``true``, Envoy will buffer the message until ``max_request_bytes`` is reached.
    The authorization request will be dispatched and no 413 HTTP error will be returned by the
    filter.
    """

    pack_as_bytes: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    If ``true``, the body sent to the external authorization service is set as raw bytes and populates
    :ref:`raw_body<envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.raw_body>`
    in the HTTP request attribute context. Otherwise, :ref:`body
    <envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.body>` will be populated
    with a UTF-8 string request body.

    This field only affects configurations using a :ref:`grpc_service
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.grpc_service>`. In configurations that use
    an :ref:`http_service <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.http_service>`, this
    has no effect.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_authz.v3", "BufferSettings", BufferSettings
)


@dataclass(eq=False, repr=False)
class CheckSettings(betterproto2.Message):
    """
    Extra settings for the check request.
    [#next-free-field: 6]

    Oneofs:
        - service_override: Override the external authorization service for this route.
            This allows different routes to use different external authorization service backends
            and service types (gRPC or HTTP). If specified, this overrides the filter-level service
            configuration regardless of the original service type.
    """

    context_extensions: "dict[str, str]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )
    """
    Context extensions to set on the CheckRequest's
    :ref:`AttributeContext.context_extensions<envoy_v3_api_field_service.auth.v3.AttributeContext.context_extensions>`

    You can use this to provide extra context for the external authorization server on specific
    virtual hosts/routes. For example, adding a context extension on the virtual host level can
    give the ext-authz server information on what virtual host is used without needing to parse the
    host header. If CheckSettings is specified in multiple per-filter-configs, they will be merged
    in order, and the result will be used.

    Merge semantics for this field are such that keys from more specific configs override.

    .. note::
      These settings are only applied to a filter configured with a
      :ref:`grpc_service<envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.grpc_service>`.
    """

    disable_request_body_buffering: "bool" = betterproto2.field(
        2, betterproto2.TYPE_BOOL
    )
    """
    When set to ``true``, disable the configured :ref:`with_request_body
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.with_request_body>` for a specific route.

    Only one of ``disable_request_body_buffering`` and
    :ref:`with_request_body <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.CheckSettings.with_request_body>`
    may be specified.
    """

    with_request_body: "BufferSettings | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Enable or override request body buffering, which is configured using the
    :ref:`with_request_body <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.with_request_body>`
    option for a specific route.

    Only one of ``with_request_body`` and
    :ref:`disable_request_body_buffering <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.CheckSettings.disable_request_body_buffering>`
    may be specified.
    """

    grpc_service: "_____config__core__v3__.GrpcService | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="service_override"
    )
    """
    Override with a gRPC service configuration.
    """

    http_service: "HttpService | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="service_override"
    )
    """
    Override with an HTTP service configuration.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_authz.v3", "CheckSettings", CheckSettings
)


@dataclass(eq=False, repr=False)
class ExtAuthz(betterproto2.Message):
    """
    [#protodoc-title: External Authorization]
    External Authorization :ref:`configuration overview <config_http_filters_ext_authz>`.
    [#extension: envoy.filters.http.ext_authz]

    [#next-free-field: 31]

    Oneofs:
        - services: External authorization service configuration.
    """

    grpc_service: "_____config__core__v3__.GrpcService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="services"
    )
    """
    gRPC service configuration (default timeout: 200ms).
    """

    http_service: "HttpService | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="services"
    )
    """
    HTTP service configuration (default timeout: 200ms).
    """

    transport_api_version: "_____config__core__v3__.ApiVersion" = betterproto2.field(
        12,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: _____config__core__v3__.ApiVersion(0),
    )
    """
    API version for ext_authz transport protocol. This describes the ext_authz gRPC endpoint and
    version of messages used on the wire.
    """

    failure_mode_allow: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Changes the filter's behavior on errors:

    #. When set to ``true``, the filter will ``accept`` the client request even if communication with
       the authorization service has failed, or if the authorization service has returned an HTTP 5xx
       error.

    #. When set to ``false``, the filter will ``reject`` client requests and return ``Forbidden``
       if communication with the authorization service has failed, or if the authorization service
       has returned an HTTP 5xx error.

    Errors can always be tracked in the :ref:`stats <config_http_filters_ext_authz_stats>`.
    """

    failure_mode_allow_header_add: "bool" = betterproto2.field(
        19, betterproto2.TYPE_BOOL
    )
    """
    When ``failure_mode_allow`` and ``failure_mode_allow_header_add`` are both set to ``true``,
    ``x-envoy-auth-failure-mode-allowed: true`` will be added to request headers if the communication
    with the authorization service has failed, or if the authorization service has returned a
    HTTP 5xx error.
    """

    with_request_body: "BufferSettings | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Enables the filter to buffer the client request body and send it within the authorization request.
    The ``x-envoy-auth-partial-body: false|true`` metadata header will be added to the authorization
    request indicating whether the body data is partial.
    """

    clear_route_cache: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    Clears the route cache in order to allow the external authorization service to correctly affect
    routing decisions. The filter clears all cached routes when:

    #. The field is set to ``true``.

    #. The status returned from the authorization service is an HTTP 200 or gRPC 0.

    #. At least one ``authorization response header`` is added to the client request, or is used to
       alter another client request header.
    """

    status_on_error: "_____type__v3__.HttpStatus | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Sets the HTTP status that is returned to the client when the authorization server returns an error
    or cannot be reached. The default status is HTTP 403 Forbidden.
    """

    validate_mutations: "bool" = betterproto2.field(24, betterproto2.TYPE_BOOL)
    """
    When this is set to ``true``, the filter will check the :ref:`ext_authz response
    <envoy_v3_api_msg_service.auth.v3.CheckResponse>` for invalid header and
    query parameter mutations. If the side stream response is invalid, it will send a local reply
    to the downstream request with status HTTP 500 Internal Server Error.

    .. note::
      Both ``headers_to_remove`` and ``query_parameters_to_remove`` are validated, but invalid elements in
      those fields should not affect any headers and thus will not cause the filter to send a local reply.

    When set to ``false``, any invalid mutations will be visible to the rest of Envoy and may cause
    unexpected behavior.

    If you are using ext_authz with an untrusted ext_authz server, you should set this to ``true``.
    """

    metadata_context_namespaces: "list[str]" = betterproto2.field(
        8, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Specifies a list of metadata namespaces whose values, if present, will be passed to the
    ext_authz service. The :ref:`filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.filter_metadata>`
    is passed as an opaque ``protobuf::Struct``.

    .. note::
      This field applies exclusively to the gRPC ext_authz service and has no effect on the HTTP service.

    For example, if the ``jwt_authn`` filter is used and :ref:`payload_in_metadata
    <envoy_v3_api_field_extensions.filters.http.jwt_authn.v3.JwtProvider.payload_in_metadata>` is set,
    then the following will pass the jwt payload to the authorization server.

    .. code-block:: yaml

       metadata_context_namespaces:
       - envoy.filters.http.jwt_authn
    """

    typed_metadata_context_namespaces: "list[str]" = betterproto2.field(
        16, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Specifies a list of metadata namespaces whose values, if present, will be passed to the
    ext_authz service. :ref:`typed_filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata>`
    is passed as a ``protobuf::Any``.

    .. note::
      This field applies exclusively to the gRPC ext_authz service and has no effect on the HTTP service.

    This works similarly to ``metadata_context_namespaces`` but allows Envoy and the ext_authz server to share
    the protobuf message definition in order to perform safe parsing.
    """

    route_metadata_context_namespaces: "list[str]" = betterproto2.field(
        21, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Specifies a list of route metadata namespaces whose values, if present, will be passed to the
    ext_authz service at :ref:`route_metadata_context <envoy_v3_api_field_service.auth.v3.AttributeContext.route_metadata_context>` in
    :ref:`CheckRequest <envoy_v3_api_field_service.auth.v3.CheckRequest.attributes>`.
    :ref:`filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.filter_metadata>` is passed as an opaque ``protobuf::Struct``.
    """

    route_typed_metadata_context_namespaces: "list[str]" = betterproto2.field(
        22, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Specifies a list of route metadata namespaces whose values, if present, will be passed to the
    ext_authz service at :ref:`route_metadata_context <envoy_v3_api_field_service.auth.v3.AttributeContext.route_metadata_context>` in
    :ref:`CheckRequest <envoy_v3_api_field_service.auth.v3.CheckRequest.attributes>`.
    :ref:`typed_filter_metadata <envoy_v3_api_field_config.core.v3.Metadata.typed_filter_metadata>` is passed as a ``protobuf::Any``.
    """

    filter_enabled: "_____config__core__v3__.RuntimeFractionalPercent | None" = (
        betterproto2.field(9, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies if the filter is enabled.

    If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFractionalPercent.runtime_key>` is specified,
    Envoy will lookup the runtime key to get the percentage of requests to filter.

    If this field is not specified, the filter will be enabled for all requests.
    """

    filter_enabled_metadata: "_____type__matcher__v3__.MetadataMatcher | None" = (
        betterproto2.field(14, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies if the filter is enabled with metadata matcher.
    If this field is not specified, the filter will be enabled for all requests.
    """

    deny_at_disable: "_____config__core__v3__.RuntimeFeatureFlag | None" = (
        betterproto2.field(11, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Specifies whether to deny the requests when the filter is disabled.
    If :ref:`runtime_key <envoy_v3_api_field_config.core.v3.RuntimeFeatureFlag.runtime_key>` is specified,
    Envoy will lookup the runtime key to determine whether to deny requests for filter-protected paths
    when the filter is disabled. If the filter is disabled in ``typed_per_filter_config`` for the path,
    requests will not be denied.

    If this field is not specified, all requests will be allowed when disabled.

    If a request is denied due to this setting, the response code in :ref:`status_on_error
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.status_on_error>` will
    be returned.
    """

    include_peer_certificate: "bool" = betterproto2.field(10, betterproto2.TYPE_BOOL)
    """
    Specifies if the peer certificate is sent to the external service.

    When this field is ``true``, Envoy will include the peer X.509 certificate, if available, in the
    :ref:`certificate<envoy_v3_api_field_service.auth.v3.AttributeContext.Peer.certificate>`.
    """

    stat_prefix: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)
    """
    Optional additional prefix to use when emitting statistics. This allows distinguishing
    emitted statistics between configured ``ext_authz`` filters in an HTTP filter chain. For example:

    .. code-block:: yaml

      http_filters:
        - name: envoy.filters.http.ext_authz
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
            stat_prefix: waf # This emits ext_authz.waf.ok, ext_authz.waf.denied, etc.
        - name: envoy.filters.http.ext_authz
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ext_authz.v3.ExtAuthz
            stat_prefix: blocker # This emits ext_authz.blocker.ok, ext_authz.blocker.denied, etc.
    """

    bootstrap_metadata_labels_key: "str" = betterproto2.field(
        15, betterproto2.TYPE_STRING
    )
    """
    Optional labels that will be passed to :ref:`labels<envoy_v3_api_field_service.auth.v3.AttributeContext.Peer.labels>` in
    :ref:`destination<envoy_v3_api_field_service.auth.v3.AttributeContext.destination>`.
    The labels will be read from :ref:`metadata<envoy_v3_api_msg_config.core.v3.Node>` with the specified key.
    """

    allowed_headers: "_____type__matcher__v3__.ListStringMatcher | None" = (
        betterproto2.field(17, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Check request to authorization server will include the client request headers that have a correspondent match
    in the :ref:`list <envoy_v3_api_msg_type.matcher.v3.ListStringMatcher>`. If this option isn't specified, then
    all client request headers are included in the check request to a gRPC authorization server, whereas no client request headers
    (besides the ones allowed by default - see note below) are included in the check request to an HTTP authorization server.
    This inconsistency between gRPC and HTTP servers is to maintain backwards compatibility with legacy behavior.

    .. note::

     For requests to an HTTP authorization server: in addition to the user's supplied matchers, ``Host``, ``Method``, ``Path``,
     ``Content-Length``, and ``Authorization`` are **additionally included** in the list.

    .. note::

     For requests to an HTTP authorization server: the value of ``Content-Length`` will be set to ``0`` and the request to the
     authorization server will not have a message body. However, the check request can include the buffered
     client request body (controlled by :ref:`with_request_body
     <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.ExtAuthz.with_request_body>` setting);
     consequently, the value of ``Content-Length`` in the authorization request reflects the size of its payload.

    .. note::

     This can be overridden by the field ``disallowed_headers`` below. That is, if a header
     matches for both ``allowed_headers`` and ``disallowed_headers``, the header will NOT be sent.
    """

    disallowed_headers: "_____type__matcher__v3__.ListStringMatcher | None" = (
        betterproto2.field(25, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If set, specifically disallow any header in this list to be forwarded to the external
    authentication server. This overrides the above ``allowed_headers`` if a header matches both.
    """

    include_tls_session: "bool" = betterproto2.field(18, betterproto2.TYPE_BOOL)
    """
    Specifies if the TLS session level details like SNI are sent to the external service.

    When this field is ``true``, Envoy will include the SNI name used for TLSClientHello, if available, in the
    :ref:`tls_session<envoy_v3_api_field_service.auth.v3.AttributeContext.tls_session>`.
    """

    charge_cluster_response_stats: "bool | None" = betterproto2.field(
        20,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Whether to increment cluster statistics (e.g. cluster.<cluster_name>.upstream_rq_*) on authorization failure.
    Defaults to ``true``.
    """

    encode_raw_headers: "bool" = betterproto2.field(23, betterproto2.TYPE_BOOL)
    """
    Whether to encode the raw headers (i.e., unsanitized values and unconcatenated multi-line headers)
    in the authorization request. Works with both HTTP and gRPC clients.

    When this is set to ``true``, header values are not sanitized. Headers with the same key will also
    not be combined into a single, comma-separated header.
    Requests to gRPC services will populate the field
    :ref:`header_map<envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.header_map>`.
    Requests to HTTP services will be constructed with the unsanitized header values and preserved
    multi-line headers with the same key.

    If this field is set to ``false``, header values will be sanitized, with any non-UTF-8-compliant
    bytes replaced with ``'!'``. Headers with the same key will have their values concatenated into a
    single comma-separated header value.
    Requests to gRPC services will populate the field
    :ref:`headers<envoy_v3_api_field_service.auth.v3.AttributeContext.HttpRequest.headers>`.
    Requests to HTTP services will have their header values sanitized and will not preserve
    multi-line headers with the same key.

    It is recommended to set this to ``true`` unless you rely on the previous behavior.

    It is set to ``false`` by default for backwards compatibility.
    """

    decoder_header_mutation_rules: "_____config__common__mutation_rules__v3__.HeaderMutationRules | None" = betterproto2.field(
        26, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Rules for what modifications an ext_authz server may make to the request headers before
    continuing decoding / forwarding upstream.

    If set to anything, enables header mutation checking against configured rules. Note that
    :ref:`HeaderMutationRules <envoy_v3_api_msg_config.common.mutation_rules.v3.HeaderMutationRules>`
    has defaults that change ext_authz behavior. Also note that if this field is set to anything,
    ext_authz can no longer append to :-prefixed headers.

    If empty, header mutation rule checking is completely disabled.

    Regardless of what is configured here, ext_authz cannot remove :-prefixed headers.

    This field and ``validate_mutations`` have different use cases. ``validate_mutations`` enables
    correctness checks for all header / query parameter mutations (e.g. for invalid characters).
    This field allows the filter to reject mutations to specific headers.
    """

    enable_dynamic_metadata_ingestion: "bool | None" = betterproto2.field(
        27,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Enable or disable ingestion of dynamic metadata from the ext_authz service.

    If ``false``, the filter will ignore dynamic metadata injected by the ext_authz service. If the
    ext_authz service tries injecting dynamic metadata, the filter will log, increment the
    ``ignored_dynamic_metadata`` stat, then continue handling the response.

    If ``true``, the filter will ingest dynamic metadata entries as normal.

    If unset, defaults to ``true``.
    """

    filter_metadata: "______google__protobuf__.Struct | None" = betterproto2.field(
        28, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Additional metadata to be added to the filter state for logging purposes. The metadata will be
    added to StreamInfo's filter state under the namespace corresponding to the ext_authz filter
    name.
    """

    emit_filter_state_stats: "bool" = betterproto2.field(29, betterproto2.TYPE_BOOL)
    """
    When set to ``true``, the filter will emit per-stream stats for access logging. The filter state
    key will be the same as the filter name.

    If using Envoy gRPC, emits latency, bytes sent / received, upstream info, and upstream cluster
    info. If not using Envoy gRPC, emits only latency. Note that stats are ONLY added to filter
    state if a check request is actually made to an ext_authz service.

    If this is ``false`` the filter will not emit stats, but filter_metadata will still be respected if
    it has a value.

    Field ``latency_us`` is exposed for CEL and logging when using gRPC or HTTP service.
    Fields ``bytesSent`` and ``bytesReceived`` are exposed for CEL and logging only when using gRPC service.
    """

    max_denied_response_body_bytes: "int" = betterproto2.field(
        30, betterproto2.TYPE_UINT32
    )
    """
    Sets the maximum size (in bytes) of the response body that the filter will send downstream
    when a request is denied by the external authorization service.

    If the authorization server returns a response body larger than this configured limit,
    the body will be truncated to ``max_denied_response_body_bytes`` before being sent to the
    downstream client.

    If this field is not set or is set to 0, no truncation will occur, and the entire
    denied response body will be forwarded.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_authz.v3", "ExtAuthz", ExtAuthz
)


@dataclass(eq=False, repr=False)
class ExtAuthzPerRoute(betterproto2.Message):
    """
    Extra settings on a per virtualhost/route/weighted-cluster level.

    Oneofs:
        - override:
    """

    disabled: "bool | None" = betterproto2.field(
        1, betterproto2.TYPE_BOOL, optional=True, group="override"
    )
    """
    Disable the ext auth filter for this particular vhost or route.
    If disabled is specified in multiple per-filter-configs, the most specific one will be used.
    If the filter is disabled by default and this is set to ``false``, the filter will be enabled
    for this vhost or route.
    """

    check_settings: "CheckSettings | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="override"
    )
    """
    Check request settings for this route.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_authz.v3", "ExtAuthzPerRoute", ExtAuthzPerRoute
)


@dataclass(eq=False, repr=False)
class HttpService(betterproto2.Message):
    """
    HttpService is used for raw HTTP communication between the filter and the authorization service.
    When configured, the filter will parse the client request and use these attributes to call the
    authorization server. Depending on the response, the filter may reject or accept the client
    request. Note that in any of these events, metadata can be added, removed or overridden by the
    filter:

    On authorization request, a list of allowed request headers may be supplied. See
    :ref:`allowed_headers
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationRequest.allowed_headers>`
    for details. Additional headers metadata may be added to the authorization request. See
    :ref:`headers_to_add
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationRequest.headers_to_add>` for
    details.

    On authorization response status ``HTTP 200 OK``, the filter will allow traffic to the upstream and
    additional headers metadata may be added to the original client request. See
    :ref:`allowed_upstream_headers
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationResponse.allowed_upstream_headers>`
    for details. Additionally, the filter may add additional headers to the client's response. See
    :ref:`allowed_client_headers_on_success
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationResponse.allowed_client_headers_on_success>`
    for details.

    On other authorization response statuses, the filter will not allow traffic. Additional headers
    metadata as well as body may be added to the client's response. See :ref:`allowed_client_headers
    <envoy_v3_api_field_extensions.filters.http.ext_authz.v3.AuthorizationResponse.allowed_client_headers>`
    for details.
    [#next-free-field: 10]
    """

    server_uri: "_____config__core__v3__.HttpUri | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Sets the HTTP server URI which the authorization requests must be sent to.
    """

    path_prefix: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Sets a prefix to the value of authorization request header ``Path``.
    """

    authorization_request: "AuthorizationRequest | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Settings used for controlling authorization request metadata.
    """

    authorization_response: "AuthorizationResponse | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Settings used for controlling authorization response metadata.
    """

    retry_policy: "_____config__core__v3__.RetryPolicy | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional retry policy for requests to the authorization server.
    If not set, no retries will be performed.

    .. note::
      When this field is set, the ``ext_authz`` filter will buffer the request body for retry purposes.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.ext_authz.v3", "HttpService", HttpService
)


from .......google import protobuf as ______google__protobuf__
from ......config.common.mutation_rules import (
    v3 as _____config__common__mutation_rules__v3__,
)
from ......config.core import v3 as _____config__core__v3__
from ......type import v3 as _____type__v3__
from ......type.matcher import v3 as _____type__matcher__v3__
