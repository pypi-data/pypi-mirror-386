# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/thrift_to_metadata/v3/thrift_to_metadata.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Field",
    "FieldSelector",
    "KeyValuePair",
    "Rule",
    "ThriftToMetadata",
    "ThriftToMetadataPerRoute",
)

from dataclasses import dataclass

import betterproto2

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class Field(betterproto2.Enum):
    """
    [#protodoc-title: Thrift-To-Metadata Filter]

    The Thrift to Metadata filter serves for thrift over HTTP traffic, expecting serialized
    Thrift request and response bodies in the HTTP payload. It extracts *thrift metadata* from the
    HTTP body and put them into the *filter metadata*. This is useful for matching load balancer
    subsets, logging, etc.

    Thrift to Metadata :ref:`configuration overview <config_http_filters_thrift_to_metadata>`.
    [#extension: envoy.filters.http.thrift_to_metadata]
    """

    METHOD_NAME = 0
    """
    The Thrift method name, string value.
    """

    PROTOCOL = 1
    """
    The Thrift protocol name, string value. Values are "binary", "binary/non-strict", and "compact", with "(auto)" suffix if
    :ref:`protocol <envoy_v3_api_field_extensions.filters.http.thrift_to_metadata.v3.ThriftToMetadata.protocol>`
    is set to :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`
    """

    TRANSPORT = 2
    """
    The Thrift transport name, string value. Values are "framed", "header", and "unframed", with "(auto)" suffix if
    :ref:`transport <envoy_v3_api_field_extensions.filters.http.thrift_to_metadata.v3.ThriftToMetadata.transport>`
    is set to :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`
    """

    HEADER_FLAGS = 3
    """
    The Thrift message type, singed 16-bit integer value.
    """

    SEQUENCE_ID = 4
    """
    The Thrift sequence ID, singed 32-bit integer value.
    """

    MESSAGE_TYPE = 5
    """
    The Thrift message type, string value. Values in request are "call" and "oneway", and in response are "reply" and "exception".
    """

    REPLY_TYPE = 6
    """
    The Thrift reply type, string value. This is only valid for response rules. Values are "success" and "error".
    """


@dataclass(eq=False, repr=False)
class FieldSelector(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    field name to log
    """

    id: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    field id to match
    """

    child: "FieldSelector | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    next node of the field selector
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.thrift_to_metadata.v3",
    "FieldSelector",
    FieldSelector,
)


@dataclass(eq=False, repr=False)
class KeyValuePair(betterproto2.Message):
    metadata_namespace: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The namespace â€” if this is empty, the filter's namespace will be used.
    """

    key: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The key to use within the namespace.
    """

    value: "______google__protobuf__.Value | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    When used for on_present case, if value is non-empty it'll be used instead
    of the field value.

    When used for on_missing case, a non-empty value must be provided.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.thrift_to_metadata.v3", "KeyValuePair", KeyValuePair
)


@dataclass(eq=False, repr=False)
class Rule(betterproto2.Message):
    """
    [#next-free-field: 6]
    """

    field: "Field" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: Field(0)
    )
    """
    The field to match on.
    :ref:`field_selector<envoy_v3_api_field_extensions.filters.http.thrift_to_metadata.v3.Rule.field_selector>`
    takes precedence if both are set.
    """

    field_selector: "FieldSelector | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specifies that a match will be performed on the value of a field in the thrift body.
    If set, the whole http body will be buffered to extract the field value, which
    may have performance implications.

    It's a thrift over http version of
    :ref:`field_selector<envoy_v3_api_field_extensions.filters.network.thrift_proxy.filters.payload_to_metadata.v3.PayloadToMetadata.Rule.field_selector>`.

    See also `payload-to-metadata <https://www.envoyproxy.io/docs/envoy/latest/configuration/other_protocols/thrift_filters/payload_to_metadata_filter>`_
    for more reference.

    Example:

    .. code-block:: yaml

       method_name: foo
       field_selector:
         name: info
         id: 2
         child:
           name: version
           id: 1

    The above yaml will match on value of ``info.version`` in the below thrift schema as input of
    :ref:`on_present<envoy_v3_api_field_extensions.filters.http.thrift_to_metadata.v3.Rule.on_present>` or
    :ref:`on_missing<envoy_v3_api_field_extensions.filters.http.thrift_to_metadata.v3.Rule.on_missing>`
    while we are processing ``foo`` method. This rule won't be applied to ``bar`` method.

    .. code-block:: thrift

       struct Info {
         1: required string version;
       }
       service Server {
         bool foo(1: i32 id, 2: Info info);
         bool bar(1: i32 id, 2: Info info);
       }
    """

    method_name: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    If specified, :ref:`field_selector<envoy_v3_api_field_extensions.filters.http.thrift_to_metadata.v3.Rule.field_selector>`
    will be used to extract the field value *only* on the thrift message with method name.
    """

    on_present: "KeyValuePair | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The key-value pair to set in the *filter metadata* if the field is present
    in *thrift metadata*.

    If the value in the KeyValuePair is non-empty, it'll be used instead
    of field value.
    """

    on_missing: "KeyValuePair | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The key-value pair to set in the *filter metadata* if the field is missing
    in *thrift metadata*.

    The value in the KeyValuePair must be set, since it'll be used in lieu
    of the missing field value.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.thrift_to_metadata.v3", "Rule", Rule
)


@dataclass(eq=False, repr=False)
class ThriftToMetadata(betterproto2.Message):
    """
    The configuration for transforming thrift metadata into filter metadata.

    [#next-free-field: 7]
    """

    request_rules: "list[Rule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to http request body to extract thrift metadata.
    """

    response_rules: "list[Rule]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to http response body to extract thrift metadata.
    """

    transport: "___network__thrift_proxy__v3__.TransportType" = betterproto2.field(
        3,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ___network__thrift_proxy__v3__.TransportType(0),
    )
    """
    Supplies the type of transport that the Thrift proxy should use. Defaults to
    :ref:`AUTO_TRANSPORT<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.TransportType.AUTO_TRANSPORT>`.
    """

    protocol: "___network__thrift_proxy__v3__.ProtocolType" = betterproto2.field(
        4,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ___network__thrift_proxy__v3__.ProtocolType(0),
    )
    """
    Supplies the type of protocol that the Thrift proxy should use. Defaults to
    :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`.
    Note that :ref:`LAX_BINARY<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.LAX_BINARY>`
    is not distinguished by :ref:`AUTO_PROTOCOL<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.AUTO_PROTOCOL>`,
    which is the same with :ref:`thrift_proxy network filter <envoy_v3_api_msg_extensions.filters.network.thrift_proxy.v3.ThriftProxy>`.
    Note that :ref:`TWITTER<envoy_v3_api_enum_value_extensions.filters.network.thrift_proxy.v3.ProtocolType.TWITTER>` is
    not supported due to deprecation in envoy.
    """

    allow_content_types: "list[str]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Allowed content-type for thrift payload to filter metadata transformation.
    Default to ``{"application/x-thrift"}``.

    Set ``allow_empty_content_type`` if empty/missing content-type header
    is allowed.
    """

    allow_empty_content_type: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    Allowed empty content-type for thrift payload to filter metadata transformation.
    Default to false.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.thrift_to_metadata.v3",
    "ThriftToMetadata",
    ThriftToMetadata,
)


@dataclass(eq=False, repr=False)
class ThriftToMetadataPerRoute(betterproto2.Message):
    """
    Thrift to metadata configuration on a per-route basis, which overrides the global configuration for
    request rules and responses rules.
    """

    request_rules: "list[Rule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to http request body to extract thrift metadata.
    """

    response_rules: "list[Rule]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to http response body to extract thrift metadata.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.thrift_to_metadata.v3",
    "ThriftToMetadataPerRoute",
    ThriftToMetadataPerRoute,
)


from .......google import protobuf as ______google__protobuf__
from ....network.thrift_proxy import v3 as ___network__thrift_proxy__v3__
