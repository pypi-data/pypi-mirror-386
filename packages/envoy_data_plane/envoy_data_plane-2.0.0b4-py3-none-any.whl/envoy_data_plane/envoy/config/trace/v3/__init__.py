# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/trace/v3/datadog.proto, envoy/config/trace/v3/dynamic_ot.proto, envoy/config/trace/v3/http_tracer.proto, envoy/config/trace/v3/lightstep.proto, envoy/config/trace/v3/opentelemetry.proto, envoy/config/trace/v3/service.proto, envoy/config/trace/v3/skywalking.proto, envoy/config/trace/v3/trace.proto, envoy/config/trace/v3/xray.proto, envoy/config/trace/v3/zipkin.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ClientConfig",
    "DatadogConfig",
    "DatadogRemoteConfig",
    "DynamicOtConfig",
    "LightstepConfig",
    "LightstepConfigPropagationMode",
    "OpenTelemetryConfig",
    "SkyWalkingConfig",
    "TraceServiceConfig",
    "Tracing",
    "TracingHttp",
    "XRayConfig",
    "XRayConfigSegmentFields",
    "ZipkinConfig",
    "ZipkinConfigCollectorEndpointVersion",
    "ZipkinConfigTraceContextOption",
)

import datetime
import warnings
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class LightstepConfigPropagationMode(betterproto2.Enum):
    """
    Available propagation modes
    """

    ENVOY = 0
    """
    Propagate trace context in the single header x-ot-span-context.
    """

    LIGHTSTEP = 1
    """
    Propagate trace context using LightStep's native format.
    """

    B3 = 2
    """
    Propagate trace context using the b3 format.
    """

    TRACE_CONTEXT = 3
    """
    Propagation trace context using the w3 trace-context standard.
    """


class ZipkinConfigCollectorEndpointVersion(betterproto2.Enum):
    """
    Available Zipkin collector endpoint versions.
    """

    DEPRECATED_AND_UNAVAILABLE_DO_NOT_USE = 0
    """
    Zipkin API v1, JSON over HTTP.
    [#comment: The default implementation of Zipkin client before this field is added was only v1
    and the way user configure this was by not explicitly specifying the version. Consequently,
    before this is added, the corresponding Zipkin collector expected to receive v1 payload.
    Hence the motivation of adding HTTP_JSON_V1 as the default is to avoid a breaking change when
    user upgrading Envoy with this change. Furthermore, we also immediately deprecate this field,
    since in Zipkin realm this v1 version is considered to be not preferable anymore.]
    """

    HTTP_JSON = 1
    """
    Zipkin API v2, JSON over HTTP.
    """

    HTTP_PROTO = 2
    """
    Zipkin API v2, protobuf over HTTP.
    """

    GRPC = 3
    """
    [#not-implemented-hide:]
    """


class ZipkinConfigTraceContextOption(betterproto2.Enum):
    """
    Available trace context options for handling different trace header formats.
    """

    USE_B3 = 0
    """
    Use B3 headers only (default behavior).
    """

    USE_B3_WITH_W3C_PROPAGATION = 1
    """
    Enable B3 and W3C dual header support:
    - For downstream: Extract from B3 headers first, fallback to W3C traceparent if B3 is unavailable.
    - For upstream: Inject both B3 and W3C traceparent headers.
    When this option is NOT set, only B3 headers are used for both extraction and injection.
    """


@dataclass(eq=False, repr=False)
class ClientConfig(betterproto2.Message):
    """
    Client config for SkyWalking tracer.

    Oneofs:
        - backend_token_specifier: Authentication token config for SkyWalking. SkyWalking can use token authentication to secure
            that monitoring application data can be trusted. In current version, Token is considered as a
            simple string.
            [#comment:TODO(wbpcode): Get backend token through the SDS API.]
    """

    service_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Service name for SkyWalking tracer. If this field is empty, then local service cluster name
    that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
    message's :ref:`cluster <envoy_v3_api_field_config.core.v3.Node.cluster>` field or command line
    option :option:`--service-cluster` will be used. If both this field and local service cluster
    name are empty, ``EnvoyProxy`` is used as the service name by default.
    """

    instance_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    Service instance name for SkyWalking tracer. If this field is empty, then local service node
    that configured by :ref:`Bootstrap node <envoy_v3_api_field_config.bootstrap.v3.Bootstrap.node>`
    message's :ref:`id <envoy_v3_api_field_config.core.v3.Node.id>` field or command line  option
    :option:`--service-node` will be used. If both this field and local service node are empty,
    ``EnvoyProxy`` is used as the instance name by default.
    """

    backend_token: "str | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True, group="backend_token_specifier"
    )
    """
    Inline authentication token string.
    """

    max_cache_size: "int | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Envoy caches the segment in memory when the SkyWalking backend service is temporarily unavailable.
    This field specifies the maximum number of segments that can be cached. If not specified, the
    default is 1024.
    """


default_message_pool.register_message(
    "envoy.config.trace.v3", "ClientConfig", ClientConfig
)


@dataclass(eq=False, repr=False)
class DatadogConfig(betterproto2.Message):
    """
    Configuration for the Datadog tracer.
    [#extension: envoy.tracers.datadog]
    """

    collector_cluster: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The cluster to use for submitting traces to the Datadog agent.
    """

    service_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name used for the service when traces are generated by envoy.
    """

    collector_hostname: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)
    """
    Optional hostname to use when sending spans to the collector_cluster. Useful for collectors
    that require a specific hostname. Defaults to :ref:`collector_cluster <envoy_v3_api_field_config.trace.v3.DatadogConfig.collector_cluster>` above.
    """

    remote_config: "DatadogRemoteConfig | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Enables and configures remote configuration.
    Remote Configuration allows to configure the tracer from Datadog's user interface.
    This feature can drastically increase the number of connections to the Datadog Agent.
    Each tracer regularly polls for configuration updates, and the number of tracers is the product
    of the number of listeners and worker threads.
    """


default_message_pool.register_message(
    "envoy.config.trace.v3", "DatadogConfig", DatadogConfig
)


@dataclass(eq=False, repr=False)
class DatadogRemoteConfig(betterproto2.Message):
    """
    [#protodoc-title: Datadog tracer]

    Configuration for the Remote Configuration feature.
    """

    polling_interval: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Frequency at which new configuration updates are queried.
    If no value is provided, the default value is delegated to the Datadog tracing library.
    """


default_message_pool.register_message(
    "envoy.config.trace.v3", "DatadogRemoteConfig", DatadogRemoteConfig
)


@dataclass(eq=False, repr=False)
class DynamicOtConfig(betterproto2.Message):
    """
    [#protodoc-title: Dynamically loadable OpenTracing tracer]

    DynamicOtConfig was used to dynamically load a tracer from a shared library
    that implements the `OpenTracing dynamic loading API
    <https://github.com/opentracing/opentracing-cpp>`_.
    [#not-implemented-hide:]
    """

    library: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Dynamic library implementing the `OpenTracing API
    <https://github.com/opentracing/opentracing-cpp>`_.
    """

    config: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The configuration to use when creating a tracer from the given dynamic
    library.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("library"):
            warnings.warn("DynamicOtConfig.library is deprecated", DeprecationWarning)
        if self.is_set("config"):
            warnings.warn("DynamicOtConfig.config is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.config.trace.v3", "DynamicOtConfig", DynamicOtConfig
)


@dataclass(eq=False, repr=False)
class LightstepConfig(betterproto2.Message):
    """
    [#protodoc-title: LightStep tracer]

    Configuration for the LightStep tracer.
    [#extension: envoy.tracers.lightstep]
    [#not-implemented-hide:]
    """

    collector_cluster: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The cluster manager cluster that hosts the LightStep collectors.
    """

    access_token_file: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    File containing the access token to the `LightStep
    <https://lightstep.com/>`_ API.
    """

    access_token: "__core__v3__.DataSource | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Access token to the `LightStep <https://lightstep.com/>`_ API.
    """

    propagation_modes: "list[LightstepConfigPropagationMode]" = betterproto2.field(
        3, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    Propagation modes to use by LightStep's tracer.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("access_token_file"):
            warnings.warn(
                "LightstepConfig.access_token_file is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.config.trace.v3", "LightstepConfig", LightstepConfig
)


@dataclass(eq=False, repr=False)
class OpenTelemetryConfig(betterproto2.Message):
    """
    [#protodoc-title: OpenTelemetry tracer]

    Configuration for the OpenTelemetry tracer.
     [#extension: envoy.tracers.opentelemetry]
    [#next-free-field: 7]
    """

    grpc_service: "__core__v3__.GrpcService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The upstream gRPC cluster that will receive OTLP traces.
    Note that the tracer drops traces if the server does not read data fast enough.
    This field can be left empty to disable reporting traces to the gRPC service.
    Only one of ``grpc_service``, ``http_service`` may be used.
    """

    http_service: "__core__v3__.HttpService | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The upstream HTTP cluster that will receive OTLP traces.
    This field can be left empty to disable reporting traces to the HTTP service.
    Only one of ``grpc_service``, ``http_service`` may be used.

    .. note::

      Note: The ``request_headers_to_add`` property in the OTLP HTTP exporter service
      does not support the :ref:`format specifier <config_access_log_format>` as used for
      :ref:`HTTP access logging <config_access_log>`.
      The values configured are added as HTTP headers on the OTLP export request
      without any formatting applied.
    """

    service_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name for the service. This will be populated in the ResourceSpan Resource attributes.
    If it is not provided, it will default to "unknown_service:envoy".
    """

    resource_detectors: "list[__core__v3__.TypedExtensionConfig]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    An ordered list of resource detectors
    [#extension-category: envoy.tracers.opentelemetry.resource_detectors]
    """

    sampler: "__core__v3__.TypedExtensionConfig | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specifies the sampler to be used by the OpenTelemetry tracer.
    The configured sampler implements the Sampler interface defined by the OpenTelemetry specification.
    This field can be left empty. In this case, the default Envoy sampling decision is used.

    See: `OpenTelemetry sampler specification <https://opentelemetry.io/docs/specs/otel/trace/sdk/#sampler>`_
    [#extension-category: envoy.tracers.opentelemetry.samplers]
    """

    max_cache_size: "int | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Envoy caches the span in memory when the OpenTelemetry backend service is temporarily unavailable.
    This field specifies the maximum number of spans that can be cached. If not specified, the
    default is 1024.
    """


default_message_pool.register_message(
    "envoy.config.trace.v3", "OpenTelemetryConfig", OpenTelemetryConfig
)


@dataclass(eq=False, repr=False)
class SkyWalkingConfig(betterproto2.Message):
    """
    [#protodoc-title: SkyWalking tracer]

    Configuration for the SkyWalking tracer. Please note that if SkyWalking tracer is used as the
    provider of tracing, then
    :ref:`spawn_upstream_span <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.spawn_upstream_span>`
    in the tracing config must be set to true to get the correct topology and tracing data. Moreover, SkyWalking
    Tracer does not support SkyWalking extension header (``sw8-x``) temporarily.
    [#extension: envoy.tracers.skywalking]
    """

    grpc_service: "__core__v3__.GrpcService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    SkyWalking collector service.
    """

    client_config: "ClientConfig | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "envoy.config.trace.v3", "SkyWalkingConfig", SkyWalkingConfig
)


@dataclass(eq=False, repr=False)
class TraceServiceConfig(betterproto2.Message):
    """
    [#protodoc-title: Trace Service]

    Configuration structure.
    """

    grpc_service: "__core__v3__.GrpcService | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The upstream gRPC cluster that hosts the metrics service.
    """


default_message_pool.register_message(
    "envoy.config.trace.v3", "TraceServiceConfig", TraceServiceConfig
)


@dataclass(eq=False, repr=False)
class Tracing(betterproto2.Message):
    """
    [#protodoc-title: Tracing]
    Tracing :ref:`architecture overview <arch_overview_tracing>`.

    The tracing configuration specifies settings for an HTTP tracer provider used by Envoy.

    Envoy may support other tracers in the future, but right now the HTTP tracer is the only one
    supported.

    .. attention::

      Use of this message type has been deprecated in favor of direct use of
      :ref:`Tracing.Http <envoy_v3_api_msg_config.trace.v3.Tracing.Http>`.
    """

    http: "TracingHttp | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Provides configuration for the HTTP tracer.
    """


default_message_pool.register_message("envoy.config.trace.v3", "Tracing", Tracing)


@dataclass(eq=False, repr=False)
class TracingHttp(betterproto2.Message):
    """
    Configuration for an HTTP tracer provider used by Envoy.

    The configuration is defined by the
    :ref:`HttpConnectionManager.Tracing <envoy_v3_api_msg_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing>`
    :ref:`provider <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.provider>`
    field.

    Oneofs:
        - config_type: Trace driver specific configuration which must be set according to the driver being instantiated.
            [#extension-category: envoy.tracers]
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the HTTP trace driver to instantiate. The name must match a
    supported HTTP trace driver.
    See the :ref:`extensions listed in typed_config below <extension_category_envoy.tracers>` for the default list of the HTTP trace driver.
    """

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )


default_message_pool.register_message(
    "envoy.config.trace.v3", "Tracing.Http", TracingHttp
)


@dataclass(eq=False, repr=False)
class XRayConfig(betterproto2.Message):
    """
    [#protodoc-title: AWS X-Ray Tracer Configuration]
    Configuration for AWS X-Ray tracer

    The X-Ray tracer will automatically attach :ref:`custom_tags <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.custom_tags>` as annotations to the span. (See: `Annotations <https://docs.aws.amazon.com/xray/latest/devguide/xray-concepts.html#xray-concepts-annotations>`_.)

    AWS X-Ray trace annotations are also created by the tracing subsystem automatically based on metadata provided during creation of a span.

    An example X-Ray trace span that is generated by the envoy trace subsystem is as follows:

    .. code-block:: json

      {
        "Id": "1-6698980d-e829ae270ab34b69b488b098",
        "Duration": 0.016,
        "LimitExceeded": false,
        "Segments":
        [
          {
            "Id": "15d65e5ced8dfe76",
            "Document":
            {
              "id": "15d65e5ced8dfe76",
              "name": "envoy-example",
              "start_time": 1721276429.410355,
              "trace_id": "1-6698980d-e829ae270ab34b69b488b098",
              "end_time": 1721276429.426068,
              "fault": true,
              "http":
              {
                "request":
                {
                  "url": "http://example/path",
                  "method": "GET",
                  "user_agent": "curl/8.5.0",
                  "client_ip": "127.0.0.1",
                  "x_forwarded_for": false
                },
                "response":
                {
                  "status": 503,
                  "content_length": 216
                }
              },
              "aws": {},
              "annotations":
              {
                "response_flags": "UF",
                "component": "proxy",
                "upstream_cluster": "upstream_cluster",
                "annotation_from_custom_tag": "example",
                "http.protocol": "HTTP/1.1",
                "request_size": "0",
                "downstream_cluster": "-",
                "direction": "ingress",
                "upstream_cluster.name": "upstream_cluster"
              }
            }
          }
        ]
      }

    [#extension: envoy.tracers.xray]
    """

    daemon_endpoint: "__core__v3__.SocketAddress | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The UDP endpoint of the X-Ray Daemon where the spans will be sent.
    If this value is not set, the default value of 127.0.0.1:2000 will be used.
    """

    segment_name: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The name of the X-Ray segment.
    """

    sampling_rule_manifest: "__core__v3__.DataSource | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The location of a local custom sampling rules JSON file.
    For an example of the sampling rules see:
    `X-Ray SDK documentation
    <https://docs.aws.amazon.com/xray/latest/devguide/xray-sdk-go-configuration.html#xray-sdk-go-configuration-sampling>`_
    """

    segment_fields: "XRayConfigSegmentFields | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional custom fields to be added to each trace segment.
    see: `X-Ray Segment Document documentation
    <https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html>`__
    """


default_message_pool.register_message("envoy.config.trace.v3", "XRayConfig", XRayConfig)


@dataclass(eq=False, repr=False)
class XRayConfigSegmentFields(betterproto2.Message):
    origin: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The type of AWS resource, e.g. "AWS::AppMesh::Proxy".
    """

    aws: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    AWS resource metadata dictionary.
    See: `X-Ray Segment Document documentation <https://docs.aws.amazon.com/xray/latest/devguide/xray-api-segmentdocuments.html#api-segmentdocuments-aws>`__
    """


default_message_pool.register_message(
    "envoy.config.trace.v3", "XRayConfig.SegmentFields", XRayConfigSegmentFields
)


@dataclass(eq=False, repr=False)
class ZipkinConfig(betterproto2.Message):
    """
    [#protodoc-title: Zipkin tracer]

    Configuration for the Zipkin tracer.
    [#extension: envoy.tracers.zipkin]
    [#next-free-field: 10]
    """

    collector_cluster: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The cluster manager cluster that hosts the Zipkin collectors.
    Note: This field will be deprecated in future releases in favor of
    :ref:`collector_service <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_service>`.
    Either this field or collector_service must be specified.
    """

    collector_endpoint: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)
    """
    The API endpoint of the Zipkin service where the spans will be sent. When
    using a standard Zipkin installation.
    Note: This field will be deprecated in future releases in favor of
    :ref:`collector_service <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_service>`.
    Required when using collector_cluster.
    """

    trace_id_128bit: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Determines whether a 128bit trace id will be used when creating a new
    trace instance. The default value is false, which will result in a 64 bit trace id being used.
    """

    shared_span_context: "bool | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Determines whether client and server spans will share the same span context.
    The default value is true.
    """

    collector_endpoint_version: "ZipkinConfigCollectorEndpointVersion" = (
        betterproto2.field(
            5,
            betterproto2.TYPE_ENUM,
            default_factory=lambda: ZipkinConfigCollectorEndpointVersion(0),
        )
    )
    """
    Determines the selected collector endpoint version.
    """

    collector_hostname: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    Optional hostname to use when sending spans to the collector_cluster. Useful for collectors
    that require a specific hostname. Defaults to :ref:`collector_cluster <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_cluster>` above.
    Note: This field will be deprecated in future releases in favor of
    :ref:`collector_service <envoy_v3_api_field_config.trace.v3.ZipkinConfig.collector_service>`.
    """

    split_spans_for_request: "bool" = betterproto2.field(7, betterproto2.TYPE_BOOL)
    """
    If this is set to true, then Envoy will be treated as an independent hop in trace chain. A complete span pair will be created for a single
    request. Server span will be created for the downstream request and client span will be created for the related upstream request.
    This should be set to true in the following cases:

    * The Envoy Proxy is used as gateway or ingress.
    * The Envoy Proxy is used as sidecar but inbound traffic capturing or outbound traffic capturing is disabled.
    * Any case that the :ref:`start_child_span of router <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>` is set to true.

    .. attention::

      If this is set to true, then the
      :ref:`start_child_span of router <envoy_v3_api_field_extensions.filters.http.router.v3.Router.start_child_span>`
      SHOULD be set to true also to ensure the correctness of trace chain.

      Both this field and ``start_child_span`` are deprecated by the
      :ref:`spawn_upstream_span <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing.spawn_upstream_span>`.
      Please use that ``spawn_upstream_span`` field to control the span creation.
    """

    trace_context_option: "ZipkinConfigTraceContextOption" = betterproto2.field(
        8,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ZipkinConfigTraceContextOption(0),
    )
    """
    Determines which trace context format to use for trace header extraction and propagation.
    This controls both downstream request header extraction and upstream request header injection.
    Here is the spec for W3C trace headers: https://www.w3.org/TR/trace-context/
    The default value is USE_B3 to maintain backward compatibility.
    """

    collector_service: "__core__v3__.HttpService | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    HTTP service configuration for the Zipkin collector.
    When specified, this configuration takes precedence over the legacy fields:
    collector_cluster, collector_endpoint, and collector_hostname.
    This provides a complete HTTP service configuration including cluster, URI, timeout, and headers.
    If not specified, the legacy fields above will be used for backward compatibility.

    Required fields when using collector_service:

    * ``http_uri.cluster`` - Must be specified and non-empty
    * ``http_uri.uri`` - Must be specified and non-empty
    * ``http_uri.timeout`` - Optional

    Full URI Support with Automatic Parsing:

    The ``uri`` field supports both path-only and full URI formats:

    .. code-block:: yaml

      tracing:
        provider:
          name: envoy.tracers.zipkin
          typed_config:
            "@type": type.googleapis.com/envoy.config.trace.v3.ZipkinConfig
            collector_service:
              http_uri:
                # Full URI format - hostname and path are extracted automatically
                uri: "https://zipkin-collector.example.com/api/v2/spans"
                cluster: zipkin
                timeout: 5s
              request_headers_to_add:
                - header:
                    key: "X-Custom-Token"
                    value: "your-custom-token"
                - header:
                    key: "X-Service-ID"
                    value: "your-service-id"

    URI Parsing Behavior:

    * Full URI: ``"https://zipkin-collector.example.com/api/v2/spans"``

      * Hostname: ``zipkin-collector.example.com`` (sets HTTP ``Host`` header)
      * Path: ``/api/v2/spans`` (sets HTTP request path)

    * Path only: ``"/api/v2/spans"``

      * Hostname: Uses cluster name as fallback
      * Path: ``/api/v2/spans``
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("split_spans_for_request"):
            warnings.warn(
                "ZipkinConfig.split_spans_for_request is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.config.trace.v3", "ZipkinConfig", ZipkinConfig
)


from .....google import protobuf as ____google__protobuf__
from ...core import v3 as __core__v3__
