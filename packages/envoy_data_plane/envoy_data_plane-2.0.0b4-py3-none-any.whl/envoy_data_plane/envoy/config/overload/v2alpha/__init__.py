# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/overload/v2alpha/overload.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "OverloadAction",
    "OverloadManager",
    "ResourceMonitor",
    "ThresholdTrigger",
    "Trigger",
)

import datetime
import warnings
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class OverloadAction(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the overload action. This is just a well-known string that listeners can
    use for registering callbacks. Custom overload actions should be named using reverse
    DNS to ensure uniqueness.
    """

    triggers: "list[Trigger]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A set of triggers for this action. If any of these triggers fire the overload action
    is activated. Listeners are notified when the overload action transitions from
    inactivated to activated, or vice versa.
    """


default_message_pool.register_message(
    "envoy.config.overload.v2alpha", "OverloadAction", OverloadAction
)


@dataclass(eq=False, repr=False)
class OverloadManager(betterproto2.Message):
    refresh_interval: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    The interval for refreshing resource usage.
    """

    resource_monitors: "list[ResourceMonitor]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set of resources to monitor.
    """

    actions: "list[OverloadAction]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The set of overload actions.
    """


default_message_pool.register_message(
    "envoy.config.overload.v2alpha", "OverloadManager", OverloadManager
)


@dataclass(eq=False, repr=False)
class ResourceMonitor(betterproto2.Message):
    """
    [#protodoc-title: Overload Manager]

    The Overload Manager provides an extensible framework to protect Envoy instances
    from overload of various resources (memory, cpu, file descriptors, etc).
    It monitors a configurable set of resources and notifies registered listeners
    when triggers related to those resources fire.

    Oneofs:
        - config_type: Configuration for the resource monitor being instantiated.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the resource monitor to instantiate. Must match a registered
    resource monitor type. The built-in resource monitors are:

    * :ref:`envoy.resource_monitors.fixed_heap
      <envoy_api_msg_config.resource_monitor.fixed_heap.v2alpha.FixedHeapConfig>`
    * :ref:`envoy.resource_monitors.injected_resource
      <envoy_api_msg_config.resource_monitor.injected_resource.v2alpha.InjectedResourceConfig>`
    """

    config: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("config"):
            warnings.warn("ResourceMonitor.config is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.config.overload.v2alpha", "ResourceMonitor", ResourceMonitor
)


@dataclass(eq=False, repr=False)
class ThresholdTrigger(betterproto2.Message):
    value: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)
    """
    If the resource pressure is greater than or equal to this value, the trigger
    will fire.
    """


default_message_pool.register_message(
    "envoy.config.overload.v2alpha", "ThresholdTrigger", ThresholdTrigger
)


@dataclass(eq=False, repr=False)
class Trigger(betterproto2.Message):
    """


    Oneofs:
        - trigger_oneof:
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the resource this is a trigger for.
    """

    threshold: "ThresholdTrigger | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="trigger_oneof"
    )


default_message_pool.register_message(
    "envoy.config.overload.v2alpha", "Trigger", Trigger
)


from .....google import protobuf as ____google__protobuf__
