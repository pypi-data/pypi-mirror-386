# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/api/v2/listener/listener.proto, envoy/api/v2/listener/listener_components.proto, envoy/api/v2/listener/quic_config.proto, envoy/api/v2/listener/udp_listener_config.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ActiveRawUdpListenerConfig",
    "Filter",
    "FilterChain",
    "FilterChainMatch",
    "FilterChainMatchConnectionSourceType",
    "ListenerFilter",
    "ListenerFilterChainMatchPredicate",
    "ListenerFilterChainMatchPredicateMatchSet",
    "QuicProtocolOptions",
    "UdpListenerConfig",
)

import datetime
import warnings
from dataclasses import dataclass

import betterproto2

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class FilterChainMatchConnectionSourceType(betterproto2.Enum):
    ANY = 0
    """
    Any connection source matches.
    """

    LOCAL = 1
    """
    Match a connection originating from the same host.
    """

    EXTERNAL = 2
    """
    Match a connection originating from a different host.
    """


@dataclass(eq=False, repr=False)
class ActiveRawUdpListenerConfig(betterproto2.Message):
    pass


default_message_pool.register_message(
    "envoy.api.v2.listener", "ActiveRawUdpListenerConfig", ActiveRawUdpListenerConfig
)


@dataclass(eq=False, repr=False)
class Filter(betterproto2.Message):
    """
    [#protodoc-title: Listener components]
    Listener :ref:`configuration overview <config_listeners>`

    Oneofs:
        - config_type: Filter specific configuration which depends on the filter being
            instantiated. See the supported filters for further documentation.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the filter to instantiate. The name must match a
    :ref:`supported filter <config_network_filters>`.
    """

    config: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("config"):
            warnings.warn("Filter.config is deprecated", DeprecationWarning)


default_message_pool.register_message("envoy.api.v2.listener", "Filter", Filter)


@dataclass(eq=False, repr=False)
class FilterChain(betterproto2.Message):
    """
    A filter chain wraps a set of match criteria, an option TLS context, a set of filters, and
    various other parameters.
    [#next-free-field: 8]
    """

    filter_chain_match: "FilterChainMatch | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The criteria to use when matching a connection to this filter chain.
    """

    tls_context: "_auth__.DownstreamTlsContext | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The TLS context for this filter chain.

    .. attention::

      **This field is deprecated**. Use `transport_socket` with name `tls` instead. If both are
      set, `transport_socket` takes priority.
    """

    filters: "list[Filter]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of individual network filters that make up the filter chain for
    connections established with the listener. Order matters as the filters are
    processed sequentially as connection events happen. Note: If the filter
    list is empty, the connection will close by default.
    """

    use_proxy_proto: "bool | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Whether the listener should expect a PROXY protocol V1 header on new
    connections. If this option is enabled, the listener will assume that that
    remote address of the connection is the one specified in the header. Some
    load balancers including the AWS ELB support this option. If the option is
    absent or set to false, Envoy will use the physical peer address of the
    connection as the remote address.
    """

    metadata: "_core__.Metadata | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    [#not-implemented-hide:] filter chain metadata.
    """

    transport_socket: "_core__.TransportSocket | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional custom transport socket implementation to use for downstream connections.
    To setup TLS, set a transport socket with name `tls` and
    :ref:`DownstreamTlsContext <envoy_api_msg_auth.DownstreamTlsContext>` in the `typed_config`.
    If no transport socket configuration is specified, new connections
    will be set up with plaintext.
    """

    name: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    [#not-implemented-hide:] The unique name (or empty) by which this filter chain is known. If no
    name is provided, Envoy will allocate an internal UUID for the filter chain. If the filter
    chain is to be dynamically updated or removed via FCDS a unique name must be provided.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("tls_context"):
            warnings.warn("FilterChain.tls_context is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.api.v2.listener", "FilterChain", FilterChain
)


@dataclass(eq=False, repr=False)
class FilterChainMatch(betterproto2.Message):
    """
    Specifies the match criteria for selecting a specific filter chain for a
    listener.

    In order for a filter chain to be selected, *ALL* of its criteria must be
    fulfilled by the incoming connection, properties of which are set by the
    networking stack and/or listener filters.

    The following order applies:

    1. Destination port.
    2. Destination IP address.
    3. Server name (e.g. SNI for TLS protocol),
    4. Transport protocol.
    5. Application protocols (e.g. ALPN for TLS protocol).
    6. Source type (e.g. any, local or external network).
    7. Source IP address.
    8. Source port.

    For criteria that allow ranges or wildcards, the most specific value in any
    of the configured filter chains that matches the incoming connection is going
    to be used (e.g. for SNI ``www.example.com`` the most specific match would be
    ``www.example.com``, then ``*.example.com``, then ``*.com``, then any filter
    chain without ``server_names`` requirements).

    [#comment: Implemented rules are kept in the preference order, with deprecated fields
    listed at the end, because that's how we want to list them in the docs.

    [#comment:TODO(PiotrSikora): Add support for configurable precedence of the rules]
    [#next-free-field: 13]
    """

    destination_port: "int | None" = betterproto2.field(
        8,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Optional destination port to consider when use_original_dst is set on the
    listener in determining a filter chain match.
    """

    prefix_ranges: "list[_core__.CidrRange]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    If non-empty, an IP address and prefix length to match addresses when the
    listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
    """

    address_suffix: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    If non-empty, an IP address and suffix length to match addresses when the
    listener is bound to 0.0.0.0/:: or when use_original_dst is specified.
    [#not-implemented-hide:]
    """

    suffix_len: "int | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    [#not-implemented-hide:]
    """

    source_type: "FilterChainMatchConnectionSourceType" = betterproto2.field(
        12,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: FilterChainMatchConnectionSourceType(0),
    )
    """
    Specifies the connection source IP match type. Can be any, local or external network.
    """

    source_prefix_ranges: "list[_core__.CidrRange]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The criteria is satisfied if the source IP address of the downstream
    connection is contained in at least one of the specified subnets. If the
    parameter is not specified or the list is empty, the source IP address is
    ignored.
    """

    source_ports: "list[int]" = betterproto2.field(
        7, betterproto2.TYPE_UINT32, repeated=True
    )
    """
    The criteria is satisfied if the source port of the downstream connection
    is contained in at least one of the specified ports. If the parameter is
    not specified, the source port is ignored.
    """

    server_names: "list[str]" = betterproto2.field(
        11, betterproto2.TYPE_STRING, repeated=True
    )
    """
    If non-empty, a list of server names (e.g. SNI for TLS protocol) to consider when determining
    a filter chain match. Those values will be compared against the server names of a new
    connection, when detected by one of the listener filters.

    The server name will be matched against all wildcard domains, i.e. ``www.example.com``
    will be first matched against ``www.example.com``, then ``*.example.com``, then ``*.com``.

    Note that partial wildcards are not supported, and values like ``*w.example.com`` are invalid.

    .. attention::

      See the :ref:`FAQ entry <faq_how_to_setup_sni>` on how to configure SNI for more
      information.
    """

    transport_protocol: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)
    """
    If non-empty, a transport protocol to consider when determining a filter chain match.
    This value will be compared against the transport protocol of a new connection, when
    it's detected by one of the listener filters.

    Suggested values include:

    * ``raw_buffer`` - default, used when no transport protocol is detected,
    * ``tls`` - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`
      when TLS protocol is detected.
    """

    application_protocols: "list[str]" = betterproto2.field(
        10, betterproto2.TYPE_STRING, repeated=True
    )
    """
    If non-empty, a list of application protocols (e.g. ALPN for TLS protocol) to consider when
    determining a filter chain match. Those values will be compared against the application
    protocols of a new connection, when detected by one of the listener filters.

    Suggested values include:

    * ``http/1.1`` - set by :ref:`envoy.filters.listener.tls_inspector
      <config_listener_filters_tls_inspector>`,
    * ``h2`` - set by :ref:`envoy.filters.listener.tls_inspector <config_listener_filters_tls_inspector>`

    .. attention::

      Currently, only :ref:`TLS Inspector <config_listener_filters_tls_inspector>` provides
      application protocol detection based on the requested
      `ALPN <https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation>`_ values.

      However, the use of ALPN is pretty much limited to the HTTP/2 traffic on the Internet,
      and matching on values other than ``h2`` is going to lead to a lot of false negatives,
      unless all connecting clients are known to use ALPN.
    """


default_message_pool.register_message(
    "envoy.api.v2.listener", "FilterChainMatch", FilterChainMatch
)


@dataclass(eq=False, repr=False)
class ListenerFilter(betterproto2.Message):
    """


    Oneofs:
        - config_type: Filter specific configuration which depends on the filter being instantiated.
            See the supported filters for further documentation.
    """

    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    The name of the filter to instantiate. The name must match a
    :ref:`supported filter <config_listener_filters>`.
    """

    config: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    filter_disabled: "ListenerFilterChainMatchPredicate | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional match predicate used to disable the filter. The filter is enabled when this field is empty.
    See :ref:`ListenerFilterChainMatchPredicate <envoy_api_msg_listener.ListenerFilterChainMatchPredicate>`
    for further examples.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("config"):
            warnings.warn("ListenerFilter.config is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.api.v2.listener", "ListenerFilter", ListenerFilter
)


@dataclass(eq=False, repr=False)
class ListenerFilterChainMatchPredicate(betterproto2.Message):
    """
    Listener filter chain match configuration. This is a recursive structure which allows complex
    nested match configurations to be built using various logical operators.

    Examples:

    * Matches if the destination port is 3306.

    .. code-block:: yaml

     destination_port_range:
      start: 3306
      end: 3307

    * Matches if the destination port is 3306 or 15000.

    .. code-block:: yaml

     or_match:
       rules:
         - destination_port_range:
             start: 3306
             end: 3307
         - destination_port_range:
             start: 15000
             end: 15001

    [#next-free-field: 6]

    Oneofs:
        - rule:
    """

    or_match: "ListenerFilterChainMatchPredicateMatchSet | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="rule"
    )
    """
    A set that describes a logical OR. If any member of the set matches, the match configuration
    matches.
    """

    and_match: "ListenerFilterChainMatchPredicateMatchSet | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="rule"
    )
    """
    A set that describes a logical AND. If all members of the set match, the match configuration
    matches.
    """

    not_match: "ListenerFilterChainMatchPredicate | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="rule"
    )
    """
    A negation match. The match configuration will match if the negated match condition matches.
    """

    any_match: "bool | None" = betterproto2.field(
        4, betterproto2.TYPE_BOOL, optional=True, group="rule"
    )
    """
    The match configuration will always match.
    """

    destination_port_range: "___type__.Int32Range | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="rule"
    )
    """
    Match destination port. Particularly, the match evaluation must use the recovered local port if
    the owning listener filter is after :ref:`an original_dst listener filter <config_listener_filters_original_dst>`.
    """


default_message_pool.register_message(
    "envoy.api.v2.listener",
    "ListenerFilterChainMatchPredicate",
    ListenerFilterChainMatchPredicate,
)


@dataclass(eq=False, repr=False)
class ListenerFilterChainMatchPredicateMatchSet(betterproto2.Message):
    """
    A set of match configurations used for logical operations.
    """

    rules: "list[ListenerFilterChainMatchPredicate]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules that make up the set.
    """


default_message_pool.register_message(
    "envoy.api.v2.listener",
    "ListenerFilterChainMatchPredicate.MatchSet",
    ListenerFilterChainMatchPredicateMatchSet,
)


@dataclass(eq=False, repr=False)
class QuicProtocolOptions(betterproto2.Message):
    """
    [#protodoc-title: QUIC listener Config]

    Configuration specific to the QUIC protocol.
    Next id: 4
    """

    max_concurrent_streams: "int | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Maximum number of streams that the client can negotiate per connection. 100
    if not specified.
    """

    idle_timeout: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Maximum number of milliseconds that connection will be alive when there is
    no network activity. 300000ms if not specified.
    """

    crypto_handshake_timeout: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Connection timeout in milliseconds before the crypto handshake is finished.
    20000ms if not specified.
    """


default_message_pool.register_message(
    "envoy.api.v2.listener", "QuicProtocolOptions", QuicProtocolOptions
)


@dataclass(eq=False, repr=False)
class UdpListenerConfig(betterproto2.Message):
    """
    [#protodoc-title: UDP Listener Config]
    Listener :ref:`configuration overview <config_listeners>`

    Oneofs:
        - config_type: Used to create a specific listener factory. To some factory, e.g.
            "raw_udp_listener", config is not needed.
    """

    udp_listener_name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Used to look up UDP listener factory, matches "raw_udp_listener" or
    "quic_listener" to create a specific udp listener.
    If not specified, treat as "raw_udp_listener".
    """

    config: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("config"):
            warnings.warn("UdpListenerConfig.config is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.api.v2.listener", "UdpListenerConfig", UdpListenerConfig
)


from .....google import protobuf as ____google__protobuf__
from .... import type as ___type__
from .. import auth as _auth__
from .. import core as _core__
