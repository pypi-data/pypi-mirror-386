# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: validate/validate.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AnyRules",
    "BoolRules",
    "BytesRules",
    "DoubleRules",
    "DurationRules",
    "EnumRules",
    "FieldRules",
    "Fixed32Rules",
    "Fixed64Rules",
    "FloatRules",
    "Int32Rules",
    "Int64Rules",
    "KnownRegex",
    "MapRules",
    "MessageRules",
    "RepeatedRules",
    "SFixed32Rules",
    "SFixed64Rules",
    "SInt32Rules",
    "SInt64Rules",
    "StringRules",
    "TimestampRules",
    "UInt32Rules",
    "UInt64Rules",
)

import datetime
from dataclasses import dataclass

import betterproto2

from ..message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class KnownRegex(betterproto2.Enum):
    """
    WellKnownRegex contain some well-known patterns.
    """

    UNKNOWN = 0

    HTTP_HEADER_NAME = 1
    """
    HTTP header name as defined by RFC 7230.
    """

    HTTP_HEADER_VALUE = 2
    """
    HTTP header value as defined by RFC 7230.
    """


@dataclass(eq=False, repr=False)
class AnyRules(betterproto2.Message):
    """
    AnyRules describe constraints applied exclusively to the
    `google.protobuf.Any` well-known type
    """

    required: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    Required specifies that this field must be set
    """

    in_: "list[str]" = betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)
    """
    In specifies that this field's `type_url` must be equal to one of the
    specified values.
    """

    not_in: "list[str]" = betterproto2.field(3, betterproto2.TYPE_STRING, repeated=True)
    """
    NotIn specifies that this field's `type_url` must not be equal to any of
    the specified values.
    """


default_message_pool.register_message("validate", "AnyRules", AnyRules)


@dataclass(eq=False, repr=False)
class BoolRules(betterproto2.Message):
    """
    BoolRules describes the constraints applied to `bool` values
    """

    const: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    Const specifies that this field must be exactly the specified value
    """


default_message_pool.register_message("validate", "BoolRules", BoolRules)


@dataclass(eq=False, repr=False)
class BytesRules(betterproto2.Message):
    """
    BytesRules describe the constraints applied to `bytes` values

    Oneofs:
        - well_known: WellKnown rules provide advanced constraints against common byte
            patterns
    """

    const: "bytes" = betterproto2.field(1, betterproto2.TYPE_BYTES)
    """
    Const specifies that this field must be exactly the specified value
    """

    len: "int" = betterproto2.field(13, betterproto2.TYPE_UINT64)
    """
    Len specifies that this field must be the specified number of bytes
    """

    min_len: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    MinLen specifies that this field must be the specified number of bytes
    at a minimum
    """

    max_len: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    MaxLen specifies that this field must be the specified number of bytes
    at a maximum
    """

    pattern: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)
    """
    Pattern specifies that this field must match against the specified
    regular expression (RE2 syntax). The included expression should elide
    any delimiters.
    """

    prefix: "bytes" = betterproto2.field(5, betterproto2.TYPE_BYTES)
    """
    Prefix specifies that this field must have the specified bytes at the
    beginning of the string.
    """

    suffix: "bytes" = betterproto2.field(6, betterproto2.TYPE_BYTES)
    """
    Suffix specifies that this field must have the specified bytes at the
    end of the string.
    """

    contains: "bytes" = betterproto2.field(7, betterproto2.TYPE_BYTES)
    """
    Contains specifies that this field must have the specified bytes
    anywhere in the string.
    """

    in_: "list[bytes]" = betterproto2.field(8, betterproto2.TYPE_BYTES, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[bytes]" = betterproto2.field(
        9, betterproto2.TYPE_BYTES, repeated=True
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ip: "bool | None" = betterproto2.field(
        10, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Ip specifies that the field must be a valid IP (v4 or v6) address in
    byte format
    """

    ipv4: "bool | None" = betterproto2.field(
        11, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Ipv4 specifies that the field must be a valid IPv4 address in byte
    format
    """

    ipv6: "bool | None" = betterproto2.field(
        12, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Ipv6 specifies that the field must be a valid IPv6 address in byte
    format
    """

    ignore_empty: "bool" = betterproto2.field(14, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "BytesRules", BytesRules)


@dataclass(eq=False, repr=False)
class DoubleRules(betterproto2.Message):
    """
    DoubleRules describes the constraints applied to `double` values
    """

    const: "float" = betterproto2.field(1, betterproto2.TYPE_DOUBLE)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "float" = betterproto2.field(2, betterproto2.TYPE_DOUBLE)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "float" = betterproto2.field(3, betterproto2.TYPE_DOUBLE)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "float" = betterproto2.field(4, betterproto2.TYPE_DOUBLE)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "float" = betterproto2.field(5, betterproto2.TYPE_DOUBLE)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[float]" = betterproto2.field(6, betterproto2.TYPE_DOUBLE, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[float]" = betterproto2.field(
        7, betterproto2.TYPE_DOUBLE, repeated=True
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "DoubleRules", DoubleRules)


@dataclass(eq=False, repr=False)
class DurationRules(betterproto2.Message):
    """
    DurationRules describe the constraints applied exclusively to the
    `google.protobuf.Duration` well-known type
    """

    required: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    Required specifies that this field must be set
    """

    const: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Duration,
        optional=True,
    )
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Duration,
        optional=True,
    )
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "datetime.timedelta | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Duration,
        optional=True,
    )
    """
    Lt specifies that this field must be less than the specified value,
    inclusive
    """

    gt: "datetime.timedelta | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Duration,
        optional=True,
    )
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive
    """

    gte: "datetime.timedelta | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Duration,
        optional=True,
    )
    """
    Gte specifies that this field must be greater than the specified value,
    inclusive
    """

    in_: "list[datetime.timedelta]" = betterproto2.field(
        7,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Duration,
        repeated=True,
    )
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[datetime.timedelta]" = betterproto2.field(
        8,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Duration,
        repeated=True,
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """


default_message_pool.register_message("validate", "DurationRules", DurationRules)


@dataclass(eq=False, repr=False)
class EnumRules(betterproto2.Message):
    """
    EnumRules describe the constraints applied to enum values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    Const specifies that this field must be exactly the specified value
    """

    defined_only: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    DefinedOnly specifies that this field must be only one of the defined
    values for this enum, failing on any undefined value.
    """

    in_: "list[int]" = betterproto2.field(3, betterproto2.TYPE_INT32, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(4, betterproto2.TYPE_INT32, repeated=True)
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """


default_message_pool.register_message("validate", "EnumRules", EnumRules)


@dataclass(eq=False, repr=False)
class FieldRules(betterproto2.Message):
    """
    FieldRules encapsulates the rules for each type of field. Depending on the
    field, the correct set should be used to ensure proper validations.

    Oneofs:
        - type:
    """

    message: "MessageRules | None" = betterproto2.field(
        17, betterproto2.TYPE_MESSAGE, optional=True
    )

    float: "FloatRules | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )
    """
    Scalar Field Types
    """

    double: "DoubleRules | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    int32: "Int32Rules | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    int64: "Int64Rules | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    uint32: "UInt32Rules | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    uint64: "UInt64Rules | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    sint32: "SInt32Rules | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    sint64: "SInt64Rules | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    fixed32: "Fixed32Rules | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    fixed64: "Fixed64Rules | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    sfixed32: "SFixed32Rules | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    sfixed64: "SFixed64Rules | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    bool: "BoolRules | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    string: "StringRules | None" = betterproto2.field(
        14, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    bytes: "BytesRules | None" = betterproto2.field(
        15, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    enum: "EnumRules | None" = betterproto2.field(
        16, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )
    """
    Complex Field Types
    """

    repeated: "RepeatedRules | None" = betterproto2.field(
        18, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    map: "MapRules | None" = betterproto2.field(
        19, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    any: "AnyRules | None" = betterproto2.field(
        20, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )
    """
    Well-Known Field Types
    """

    duration: "DurationRules | None" = betterproto2.field(
        21, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )

    timestamp: "TimestampRules | None" = betterproto2.field(
        22, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )


default_message_pool.register_message("validate", "FieldRules", FieldRules)


@dataclass(eq=False, repr=False)
class Fixed32Rules(betterproto2.Message):
    """
    Fixed32Rules describes the constraints applied to `fixed32` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_FIXED32)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_FIXED32)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_FIXED32)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_FIXED32)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_FIXED32)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_FIXED32, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(
        7, betterproto2.TYPE_FIXED32, repeated=True
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "Fixed32Rules", Fixed32Rules)


@dataclass(eq=False, repr=False)
class Fixed64Rules(betterproto2.Message):
    """
    Fixed64Rules describes the constraints applied to `fixed64` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_FIXED64)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_FIXED64)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_FIXED64)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_FIXED64)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_FIXED64)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_FIXED64, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(
        7, betterproto2.TYPE_FIXED64, repeated=True
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "Fixed64Rules", Fixed64Rules)


@dataclass(eq=False, repr=False)
class FloatRules(betterproto2.Message):
    """
    FloatRules describes the constraints applied to `float` values
    """

    const: "float" = betterproto2.field(1, betterproto2.TYPE_FLOAT)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "float" = betterproto2.field(2, betterproto2.TYPE_FLOAT)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "float" = betterproto2.field(3, betterproto2.TYPE_FLOAT)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "float" = betterproto2.field(4, betterproto2.TYPE_FLOAT)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "float" = betterproto2.field(5, betterproto2.TYPE_FLOAT)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[float]" = betterproto2.field(6, betterproto2.TYPE_FLOAT, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[float]" = betterproto2.field(
        7, betterproto2.TYPE_FLOAT, repeated=True
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "FloatRules", FloatRules)


@dataclass(eq=False, repr=False)
class Int32Rules(betterproto2.Message):
    """
    Int32Rules describes the constraints applied to `int32` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_INT32)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_INT32)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_INT32)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_INT32)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_INT32, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(7, betterproto2.TYPE_INT32, repeated=True)
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "Int32Rules", Int32Rules)


@dataclass(eq=False, repr=False)
class Int64Rules(betterproto2.Message):
    """
    Int64Rules describes the constraints applied to `int64` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_INT64)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_INT64)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_INT64)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_INT64)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_INT64, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(7, betterproto2.TYPE_INT64, repeated=True)
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "Int64Rules", Int64Rules)


@dataclass(eq=False, repr=False)
class MapRules(betterproto2.Message):
    """
    MapRules describe the constraints applied to `map` values
    """

    min_pairs: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    MinPairs specifies that this field must have the specified number of
    KVs at a minimum
    """

    max_pairs: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    MaxPairs specifies that this field must have the specified number of
    KVs at a maximum
    """

    no_sparse: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    NoSparse specifies values in this field cannot be unset. This only
    applies to map's with message value types.
    """

    keys: "FieldRules | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Keys specifies the constraints to be applied to each key in the field.
    """

    values: "FieldRules | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Values specifies the constraints to be applied to the value of each key
    in the field. Message values will still have their validations evaluated
    unless skip is specified here.
    """

    ignore_empty: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "MapRules", MapRules)


@dataclass(eq=False, repr=False)
class MessageRules(betterproto2.Message):
    """
    MessageRules describe the constraints applied to embedded message values.
    For message-type fields, validation is performed recursively.
    """

    skip: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    Skip specifies that the validation rules of this field should not be
    evaluated
    """

    required: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Required specifies that this field must be set
    """


default_message_pool.register_message("validate", "MessageRules", MessageRules)


@dataclass(eq=False, repr=False)
class RepeatedRules(betterproto2.Message):
    """
    RepeatedRules describe the constraints applied to `repeated` values
    """

    min_items: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    MinItems specifies that this field must have the specified number of
    items at a minimum
    """

    max_items: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    MaxItems specifies that this field must have the specified number of
    items at a maximum
    """

    unique: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Unique specifies that all elements in this field must be unique. This
    constraint is only applicable to scalar and enum types (messages are not
    supported).
    """

    items: "FieldRules | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Items specifies the constraints to be applied to each item in the field.
    Repeated message fields will still execute validation against each item
    unless skip is specified here.
    """

    ignore_empty: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "RepeatedRules", RepeatedRules)


@dataclass(eq=False, repr=False)
class SFixed32Rules(betterproto2.Message):
    """
    SFixed32Rules describes the constraints applied to `sfixed32` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_SFIXED32)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_SFIXED32)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_SFIXED32)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_SFIXED32)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_SFIXED32)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_SFIXED32, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(
        7, betterproto2.TYPE_SFIXED32, repeated=True
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "SFixed32Rules", SFixed32Rules)


@dataclass(eq=False, repr=False)
class SFixed64Rules(betterproto2.Message):
    """
    SFixed64Rules describes the constraints applied to `sfixed64` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_SFIXED64)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_SFIXED64)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_SFIXED64)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_SFIXED64)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_SFIXED64)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_SFIXED64, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(
        7, betterproto2.TYPE_SFIXED64, repeated=True
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "SFixed64Rules", SFixed64Rules)


@dataclass(eq=False, repr=False)
class SInt32Rules(betterproto2.Message):
    """
    SInt32Rules describes the constraints applied to `sint32` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_SINT32)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_SINT32)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_SINT32)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_SINT32)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_SINT32)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_SINT32, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(7, betterproto2.TYPE_SINT32, repeated=True)
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "SInt32Rules", SInt32Rules)


@dataclass(eq=False, repr=False)
class SInt64Rules(betterproto2.Message):
    """
    SInt64Rules describes the constraints applied to `sint64` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_SINT64)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_SINT64)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_SINT64)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_SINT64)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_SINT64)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_SINT64, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(7, betterproto2.TYPE_SINT64, repeated=True)
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "SInt64Rules", SInt64Rules)


@dataclass(eq=False, repr=False)
class StringRules(betterproto2.Message):
    """
    StringRules describe the constraints applied to `string` values

    Oneofs:
        - well_known: WellKnown rules provide advanced constraints against common string
            patterns
    """

    const: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)
    """
    Const specifies that this field must be exactly the specified value
    """

    len: "int" = betterproto2.field(19, betterproto2.TYPE_UINT64)
    """
    Len specifies that this field must be the specified number of
    characters (Unicode code points). Note that the number of
    characters may differ from the number of bytes in the string.
    """

    min_len: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    MinLen specifies that this field must be the specified number of
    characters (Unicode code points) at a minimum. Note that the number of
    characters may differ from the number of bytes in the string.
    """

    max_len: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    MaxLen specifies that this field must be the specified number of
    characters (Unicode code points) at a maximum. Note that the number of
    characters may differ from the number of bytes in the string.
    """

    len_bytes: "int" = betterproto2.field(20, betterproto2.TYPE_UINT64)
    """
    LenBytes specifies that this field must be the specified number of bytes
    """

    min_bytes: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    MinBytes specifies that this field must be the specified number of bytes
    at a minimum
    """

    max_bytes: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)
    """
    MaxBytes specifies that this field must be the specified number of bytes
    at a maximum
    """

    pattern: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)
    """
    Pattern specifies that this field must match against the specified
    regular expression (RE2 syntax). The included expression should elide
    any delimiters.
    """

    prefix: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)
    """
    Prefix specifies that this field must have the specified substring at
    the beginning of the string.
    """

    suffix: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)
    """
    Suffix specifies that this field must have the specified substring at
    the end of the string.
    """

    contains: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)
    """
    Contains specifies that this field must have the specified substring
    anywhere in the string.
    """

    not_contains: "str" = betterproto2.field(23, betterproto2.TYPE_STRING)
    """
    NotContains specifies that this field cannot have the specified substring
    anywhere in the string.
    """

    in_: "list[str]" = betterproto2.field(10, betterproto2.TYPE_STRING, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[str]" = betterproto2.field(
        11, betterproto2.TYPE_STRING, repeated=True
    )
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    email: "bool | None" = betterproto2.field(
        12, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Email specifies that the field must be a valid email address as
    defined by RFC 5322
    """

    hostname: "bool | None" = betterproto2.field(
        13, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Hostname specifies that the field must be a valid hostname as
    defined by RFC 1034. This constraint does not support
    internationalized domain names (IDNs).
    """

    ip: "bool | None" = betterproto2.field(
        14, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Ip specifies that the field must be a valid IP (v4 or v6) address.
    Valid IPv6 addresses should not include surrounding square brackets.
    """

    ipv4: "bool | None" = betterproto2.field(
        15, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Ipv4 specifies that the field must be a valid IPv4 address.
    """

    ipv6: "bool | None" = betterproto2.field(
        16, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Ipv6 specifies that the field must be a valid IPv6 address. Valid
    IPv6 addresses should not include surrounding square brackets.
    """

    uri: "bool | None" = betterproto2.field(
        17, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Uri specifies that the field must be a valid, absolute URI as defined
    by RFC 3986
    """

    uri_ref: "bool | None" = betterproto2.field(
        18, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    UriRef specifies that the field must be a valid URI as defined by RFC
    3986 and may be relative or absolute.
    """

    address: "bool | None" = betterproto2.field(
        21, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Address specifies that the field must be either a valid hostname as
    defined by RFC 1034 (which does not support internationalized domain
    names or IDNs), or it can be a valid IP (v4 or v6).
    """

    uuid: "bool | None" = betterproto2.field(
        22, betterproto2.TYPE_BOOL, optional=True, group="well_known"
    )
    """
    Uuid specifies that the field must be a valid UUID as defined by
    RFC 4122
    """

    well_known_regex: "KnownRegex | None" = betterproto2.field(
        24, betterproto2.TYPE_ENUM, optional=True, group="well_known"
    )
    """
    WellKnownRegex specifies a common well known pattern defined as a regex.
    """

    strict: "bool" = betterproto2.field(25, betterproto2.TYPE_BOOL)
    """
    This applies to regexes HTTP_HEADER_NAME and HTTP_HEADER_VALUE to enable
    strict header validation.
    By default, this is true, and HTTP header validations are RFC-compliant.
    Setting to false will enable a looser validations that only disallows
    \\r\\n\\0 characters, which can be used to bypass header matching rules.
    """

    ignore_empty: "bool" = betterproto2.field(26, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "StringRules", StringRules)


@dataclass(eq=False, repr=False)
class TimestampRules(betterproto2.Message):
    """
    TimestampRules describe the constraints applied exclusively to the
    `google.protobuf.Timestamp` well-known type
    """

    required: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    Required specifies that this field must be set
    """

    const: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "datetime.datetime | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Lte specifies that this field must be less than the specified value,
    inclusive
    """

    gt: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive
    """

    gte: "datetime.datetime | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Gte specifies that this field must be greater than the specified value,
    inclusive
    """

    lt_now: "bool" = betterproto2.field(7, betterproto2.TYPE_BOOL)
    """
    LtNow specifies that this must be less than the current time. LtNow
    can only be used with the Within rule.
    """

    gt_now: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    GtNow specifies that this must be greater than the current time. GtNow
    can only be used with the Within rule.
    """

    within: "datetime.timedelta | None" = betterproto2.field(
        9,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _google__protobuf__.Duration,
        optional=True,
    )
    """
    Within specifies that this field must be within this duration of the
    current time. This constraint can be used alone or with the LtNow and
    GtNow rules.
    """


default_message_pool.register_message("validate", "TimestampRules", TimestampRules)


@dataclass(eq=False, repr=False)
class UInt32Rules(betterproto2.Message):
    """
    UInt32Rules describes the constraints applied to `uint32` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_UINT32)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_UINT32)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_UINT32)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_UINT32)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_UINT32, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(7, betterproto2.TYPE_UINT32, repeated=True)
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "UInt32Rules", UInt32Rules)


@dataclass(eq=False, repr=False)
class UInt64Rules(betterproto2.Message):
    """
    UInt64Rules describes the constraints applied to `uint64` values
    """

    const: "int" = betterproto2.field(1, betterproto2.TYPE_UINT64)
    """
    Const specifies that this field must be exactly the specified value
    """

    lt: "int" = betterproto2.field(2, betterproto2.TYPE_UINT64)
    """
    Lt specifies that this field must be less than the specified value,
    exclusive
    """

    lte: "int" = betterproto2.field(3, betterproto2.TYPE_UINT64)
    """
    Lte specifies that this field must be less than or equal to the
    specified value, inclusive
    """

    gt: "int" = betterproto2.field(4, betterproto2.TYPE_UINT64)
    """
    Gt specifies that this field must be greater than the specified value,
    exclusive. If the value of Gt is larger than a specified Lt or Lte, the
    range is reversed.
    """

    gte: "int" = betterproto2.field(5, betterproto2.TYPE_UINT64)
    """
    Gte specifies that this field must be greater than or equal to the
    specified value, inclusive. If the value of Gte is larger than a
    specified Lt or Lte, the range is reversed.
    """

    in_: "list[int]" = betterproto2.field(6, betterproto2.TYPE_UINT64, repeated=True)
    """
    In specifies that this field must be equal to one of the specified
    values
    """

    not_in: "list[int]" = betterproto2.field(7, betterproto2.TYPE_UINT64, repeated=True)
    """
    NotIn specifies that this field cannot be equal to one of the specified
    values
    """

    ignore_empty: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    IgnoreEmpty specifies that the validation rules of this field should be
    evaluated only if the field is not empty
    """


default_message_pool.register_message("validate", "UInt64Rules", UInt64Rules)


from ..google import protobuf as _google__protobuf__
