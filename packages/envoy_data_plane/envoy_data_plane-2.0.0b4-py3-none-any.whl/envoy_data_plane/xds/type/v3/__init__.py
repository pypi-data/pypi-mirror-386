# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: xds/type/v3/cel.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CelExpression",
    "CelExtractString",
)

import warnings
from dataclasses import dataclass

import betterproto2

from ....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False)
class CelExpression(betterproto2.Message):
    """
    [#protodoc-title: Common Expression Language (CEL)]

    Either parsed or checked representation of the `Common Expression Language
    <https://github.com/google/cel-spec>`_ (CEL) program.

    Oneofs:
        - expr_specifier:
    """

    parsed_expr: "___google__api__expr__v1alpha1__.ParsedExpr | None" = (
        betterproto2.field(
            1, betterproto2.TYPE_MESSAGE, optional=True, group="expr_specifier"
        )
    )
    """
    Parsed expression in abstract syntax tree (AST) form.

    Deprecated -- use ``cel_expr_parsed`` field instead.
    If ``cel_expr_parsed`` or ``cel_expr_checked`` is set, this field is not used.
    """

    checked_expr: "___google__api__expr__v1alpha1__.CheckedExpr | None" = (
        betterproto2.field(
            2, betterproto2.TYPE_MESSAGE, optional=True, group="expr_specifier"
        )
    )
    """
    Parsed expression in abstract syntax tree (AST) form that has been successfully type checked.

    Deprecated -- use ``cel_expr_checked`` field instead.
    If ``cel_expr_parsed`` or ``cel_expr_checked`` is set, this field is not used.
    """

    cel_expr_parsed: "___cel__expr__.ParsedExpr | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Parsed expression in abstract syntax tree (AST) form.

    If ``cel_expr_checked`` is set, this field is not used.
    """

    cel_expr_checked: "___cel__expr__.CheckedExpr | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Parsed expression in abstract syntax tree (AST) form that has been successfully type checked.

    If set, takes precedence over ``cel_expr_parsed``.
    """

    cel_expr_string: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)
    """
    Unparsed expression in string form. For example, ``request.headers['x-env'] == 'prod'`` will
    get ``x-env`` header value and compare it with ``prod``.
    Check the `Common Expression Language <https://github.com/google/cel-spec>`_ for more details.

    If set, takes precedence over ``cel_expr_parsed`` and ``cel_expr_checked``.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("parsed_expr"):
            warnings.warn("CelExpression.parsed_expr is deprecated", DeprecationWarning)
        if self.is_set("checked_expr"):
            warnings.warn(
                "CelExpression.checked_expr is deprecated", DeprecationWarning
            )


default_message_pool.register_message("xds.type.v3", "CelExpression", CelExpression)


@dataclass(eq=False, repr=False)
class CelExtractString(betterproto2.Message):
    """
    Extracts a string by evaluating a `Common Expression Language
    <https://github.com/google/cel-spec>`_ (CEL) expression against the standardized set of
    :ref:`HTTP attributes <arch_overview_attributes>`.

    .. attention::

      Besides CEL evaluation raising an error explicitly, CEL program returning a type other than
      the ``string``, or not returning anything, are considered an error as well.

    [#comment:TODO(sergiitk): When implemented, add the extension tag.]
    """

    expr_extract: "CelExpression | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The CEL expression used to extract a string from the CEL environment.
    the "subject string") that should be replaced.
    """

    default_value: "str | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.StringValue,
        optional=True,
    )
    """
    If CEL expression evaluates to an error, this value is be returned to the caller.
    If not set, the error is propagated to the caller.
    """


default_message_pool.register_message(
    "xds.type.v3", "CelExtractString", CelExtractString
)


from ....cel import expr as ___cel__expr__
from ....google import protobuf as ___google__protobuf__
from ....google.api.expr import v1alpha1 as ___google__api__expr__v1alpha1__
