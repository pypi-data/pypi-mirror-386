# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/dynamic_forward_proxy/v2alpha/dynamic_forward_proxy.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "FilterConfig",
    "PerRouteConfig",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FilterConfig(betterproto2.Message):
    """
    [#protodoc-title: Dynamic forward proxy]

    Configuration for the dynamic forward proxy HTTP filter. See the :ref:`architecture overview
    <arch_overview_http_dynamic_forward_proxy>` for more information.
    [#extension: envoy.filters.http.dynamic_forward_proxy]
    """

    dns_cache_config: "____common__dynamic_forward_proxy__v2alpha__.DnsCacheConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The DNS cache configuration that the filter will attach to. Note this configuration must
    match that of associated :ref:`dynamic forward proxy cluster configuration
    <envoy_api_field_config.cluster.dynamic_forward_proxy.v2alpha.ClusterConfig.dns_cache_config>`.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.dynamic_forward_proxy.v2alpha",
    "FilterConfig",
    FilterConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class PerRouteConfig(betterproto2.Message):
    """
    Per route Configuration for the dynamic forward proxy HTTP filter.

    Oneofs:
        - host_rewrite_specifier:
    """

    host_rewrite: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="host_rewrite_specifier"
    )
    """
    Indicates that before DNS lookup, the host header will be swapped with
    this value. If not set or empty, the original host header value
    will be used and no rewrite will happen.

    Note: this rewrite affects both DNS lookup and host header forwarding. However, this
    option shouldn't be used with
    :ref:`HCM host rewrite <envoy_api_field_route.RouteAction.host_rewrite>` given that the
    value set here would be used for DNS lookups whereas the value set in the HCM would be used
    for host header forwarding which is not the desired outcome.
    """

    auto_host_rewrite_header: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="host_rewrite_specifier"
    )
    """
    Indicates that before DNS lookup, the host header will be swapped with
    the value of this header. If not set or empty, the original host header
    value will be used and no rewrite will happen.

    Note: this rewrite affects both DNS lookup and host header forwarding. However, this
    option shouldn't be used with
    :ref:`HCM host rewrite header <envoy_api_field_route.RouteAction.auto_host_rewrite_header>`
    given that the value set here would be used for DNS lookups whereas the value set in the HCM
    would be used for host header forwarding which is not the desired outcome.

    .. note::

      If the header appears multiple times only the first value is used.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.config.filter.http.dynamic_forward_proxy.v2alpha",
    "PerRouteConfig",
    PerRouteConfig,
)


from .....common.dynamic_forward_proxy import (
    v2alpha as ____common__dynamic_forward_proxy__v2alpha__,
)
