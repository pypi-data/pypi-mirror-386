# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/http/ip_tagging/v2/ip_tagging.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("IpTagging", "IpTaggingIpTag", "IpTaggingRequestType")

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class IpTaggingRequestType(betterproto2.Enum):
    """
    The type of requests the filter should apply to. The supported types
    are internal, external or both. The
    :ref:`x-forwarded-for<config_http_conn_man_headers_x-forwarded-for_internal_origin>` header is
    used to determine if a request is internal and will result in
    :ref:`x-envoy-internal<config_http_conn_man_headers_x-envoy-internal>`
    being set. The filter defaults to both, and it will apply to all request types.
    """

    BOTH = 0
    """
    Both external and internal requests will be tagged. This is the default value.
    """

    INTERNAL = 1
    """
    Only internal requests will be tagged.
    """

    EXTERNAL = 2
    """
    Only external requests will be tagged.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class IpTagging(betterproto2.Message):
    """
    [#protodoc-title: IP tagging]
    IP tagging :ref:`configuration overview <config_http_filters_ip_tagging>`.
    [#extension: envoy.filters.http.ip_tagging]
    """

    request_type: "IpTaggingRequestType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: IpTaggingRequestType(0)
    )
    """
    The type of request the filter should apply to.
    """

    ip_tags: "list[IpTaggingIpTag]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    [#comment:TODO(ccaraman): Extend functionality to load IP tags from file system.
    Tracked by issue https://github.com/envoyproxy/envoy/issues/2695]
    The set of IP tags for the filter.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.ip_tagging.v2", "IPTagging", IpTagging
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class IpTaggingIpTag(betterproto2.Message):
    """
    Supplies the IP tag name and the IP address subnets.
    """

    ip_tag_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Specifies the IP tag name to apply.
    """

    ip_list: "list[_____api__v2__core__.CidrRange]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of IP address subnets that will be tagged with
    ip_tag_name. Both IPv4 and IPv6 are supported.
    """


default_message_pool.register_message(
    "envoy.config.filter.http.ip_tagging.v2", "IPTagging.IPTag", IpTaggingIpTag
)


from ......api.v2 import core as _____api__v2__core__
