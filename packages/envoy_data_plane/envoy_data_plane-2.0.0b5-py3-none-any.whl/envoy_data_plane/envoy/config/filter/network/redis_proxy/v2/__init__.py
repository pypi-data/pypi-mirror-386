# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "RedisProtocolOptions",
    "RedisProxy",
    "RedisProxyConnPoolSettings",
    "RedisProxyConnPoolSettingsReadPolicy",
    "RedisProxyPrefixRoutes",
    "RedisProxyPrefixRoutesRoute",
    "RedisProxyPrefixRoutesRouteRequestMirrorPolicy",
)

import datetime
import typing
import warnings

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class RedisProxyConnPoolSettingsReadPolicy(betterproto2.Enum):
    """
    ReadPolicy controls how Envoy routes read commands to Redis nodes. This is currently
    supported for Redis Cluster. All ReadPolicy settings except MASTER may return stale data
    because replication is asynchronous and requires some delay. You need to ensure that your
    application can tolerate stale data.
    """

    MASTER = 0
    """
    Default mode. Read from the current primary node.
    """

    PREFER_MASTER = 1
    """
    Read from the primary, but if it is unavailable, read from replica nodes.
    """

    REPLICA = 2
    """
    Read from replica nodes. If multiple replica nodes are present within a shard, a random
    node is selected. Healthy nodes have precedent over unhealthy nodes.
    """

    PREFER_REPLICA = 3
    """
    Read from the replica nodes (similar to REPLICA), but if all replicas are unavailable (not
    present or unhealthy), read from the primary.
    """

    ANY = 4
    """
    Read from any node of the cluster. A random node is selected among the primary and
    replicas, healthy nodes have precedent over unhealthy nodes.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProtocolOptions(betterproto2.Message):
    """
    RedisProtocolOptions specifies Redis upstream protocol options. This object is used in
    :ref:`typed_extension_protocol_options<envoy_api_field_Cluster.typed_extension_protocol_options>`,
    keyed by the name `envoy.filters.network.redis_proxy`.
    """

    auth_password: "_____api__v2__core__.DataSource | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Upstream server password as defined by the `requirepass` directive
    <https://redis.io/topics/config>`_ in the server's configuration file.
    """


default_message_pool.register_message(
    "envoy.config.filter.network.redis_proxy.v2",
    "RedisProtocolOptions",
    RedisProtocolOptions,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxy(betterproto2.Message):
    """
    [#protodoc-title: Redis Proxy]
    Redis Proxy :ref:`configuration overview <config_network_filters_redis_proxy>`.
    [#extension: envoy.filters.network.redis_proxy]

    [#next-free-field: 7]
    """

    stat_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The prefix to use when emitting :ref:`statistics <config_network_filters_redis_proxy_stats>`.
    """

    cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Name of cluster from cluster manager. See the :ref:`configuration section
    <arch_overview_redis_configuration>` of the architecture overview for recommendations on
    configuring the backing cluster.

    .. attention::

      This field is deprecated. Use a :ref:`catch_all
      route<envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.catch_all_route>`
      instead.
    """

    settings: "RedisProxyConnPoolSettings | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Network settings for the connection pool to the upstream clusters.
    """

    latency_in_micros: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    Indicates that latency stat should be computed in microseconds. By default it is computed in
    milliseconds.
    """

    prefix_routes: "RedisProxyPrefixRoutes | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    List of **unique** prefixes used to separate keys from different workloads to different
    clusters. Envoy will always favor the longest match first in case of overlap. A catch-all
    cluster can be used to forward commands when there is no match. Time complexity of the
    lookups are in O(min(longest key prefix, key length)).

    Example:

    .. code-block:: yaml

       prefix_routes:
         routes:
           - prefix: "ab"
             cluster: "cluster_a"
           - prefix: "abc"
             cluster: "cluster_b"

    When using the above routes, the following prefixes would be sent to:

    * ``get abc:users`` would retrieve the key 'abc:users' from cluster_b.
    * ``get ab:users`` would retrieve the key 'ab:users' from cluster_a.
    * ``get z:users`` would return a NoUpstreamHost error. A :ref:`catch-all
      route<envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.catch_all_route>`
      would have retrieved the key from that cluster instead.

    See the :ref:`configuration section
    <arch_overview_redis_configuration>` of the architecture overview for recommendations on
    configuring the backing clusters.
    """

    downstream_auth_password: "_____api__v2__core__.DataSource | None" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Authenticate Redis client connections locally by forcing downstream clients to issue a `Redis
    AUTH command <https://redis.io/commands/auth>`_ with this password before enabling any other
    command. If an AUTH command's password matches this password, an "OK" response will be returned
    to the client. If the AUTH command password does not match this password, then an "ERR invalid
    password" error will be returned. If any other command is received before AUTH when this
    password is set, then a "NOAUTH Authentication required." error response will be sent to the
    client. If an AUTH command is received when the password is not set, then an "ERR Client sent
    AUTH, but no password is set" error will be returned.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("cluster"):
            warnings.warn("RedisProxy.cluster is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.config.filter.network.redis_proxy.v2", "RedisProxy", RedisProxy
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyConnPoolSettings(betterproto2.Message):
    """
    Redis connection pool settings.
    [#next-free-field: 9]
    """

    op_timeout: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Per-operation timeout in milliseconds. The timer starts when the first
    command of a pipeline is written to the backend connection. Each response received from Redis
    resets the timer since it signifies that the next command is being processed by the backend.
    The only exception to this behavior is when a connection to a backend is not yet established.
    In that case, the connect timeout on the cluster will govern the timeout until the connection
    is ready.
    """

    enable_hashtagging: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Use hash tagging on every redis key to guarantee that keys with the same hash tag will be
    forwarded to the same upstream. The hash key used for determining the upstream in a
    consistent hash ring configuration will be computed from the hash tagged key instead of the
    whole key. The algorithm used to compute the hash tag is identical to the `redis-cluster
    implementation <https://redis.io/topics/cluster-spec#keys-hash-tags>`_.

    Examples:

    * '{user1000}.following' and '{user1000}.followers' **will** be sent to the same upstream
    * '{user1000}.following' and '{user1001}.following' **might** be sent to the same upstream
    """

    enable_redirection: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Accept `moved and ask redirection
    <https://redis.io/topics/cluster-spec#redirection-and-resharding>`_ errors from upstream
    redis servers, and retry commands to the specified target server. The target server does not
    need to be known to the cluster manager. If the command cannot be redirected, then the
    original error is passed downstream unchanged. By default, this support is not enabled.
    """

    max_buffer_size_before_flush: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        4, betterproto2.TYPE_UINT32
    )
    """
    Maximum size of encoded request buffer before flush is triggered and encoded requests
    are sent upstream. If this is unset, the buffer flushes whenever it receives data
    and performs no batching.
    This feature makes it possible for multiple clients to send requests to Envoy and have
    them batched- for example if one is running several worker processes, each with its own
    Redis connection. There is no benefit to using this with a single downstream process.
    Recommended size (if enabled) is 1024 bytes.
    """

    buffer_flush_timeout: "datetime.timedelta | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    The encoded request buffer is flushed N milliseconds after the first request has been
    encoded, unless the buffer size has already exceeded `max_buffer_size_before_flush`.
    If `max_buffer_size_before_flush` is not set, this flush timer is not used. Otherwise,
    the timer should be set according to the number of clients, overall request rate and
    desired maximum latency for a single command. For example, if there are many requests
    being batched together at a high rate, the buffer will likely be filled before the timer
    fires. Alternatively, if the request rate is lower the buffer will not be filled as often
    before the timer fires.
    If `max_buffer_size_before_flush` is set, but `buffer_flush_timeout` is not, the latter
    defaults to 3ms.
    """

    max_upstream_unknown_connections: "int | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    `max_upstream_unknown_connections` controls how many upstream connections to unknown hosts
    can be created at any given time by any given worker thread (see `enable_redirection` for
    more details). If the host is unknown and a connection cannot be created due to enforcing
    this limit, then redirection will fail and the original redirection error will be passed
    downstream unchanged. This limit defaults to 100.
    """

    enable_command_stats: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    Enable per-command statistics per upstream cluster, in addition to the filter level aggregate
    count.
    """

    read_policy: "RedisProxyConnPoolSettingsReadPolicy" = betterproto2.field(
        7,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: RedisProxyConnPoolSettingsReadPolicy(0),
    )
    """
    Read policy. The default is to read from the primary.
    """


default_message_pool.register_message(
    "envoy.config.filter.network.redis_proxy.v2",
    "RedisProxy.ConnPoolSettings",
    RedisProxyConnPoolSettings,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyPrefixRoutes(betterproto2.Message):
    routes: "list[RedisProxyPrefixRoutesRoute]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of prefix routes.
    """

    case_insensitive: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Indicates that prefix matching should be case insensitive.
    """

    catch_all_cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Optional catch-all route to forward commands that doesn't match any of the routes. The
    catch-all route becomes required when no routes are specified.
    .. attention::

      This field is deprecated. Use a :ref:`catch_all
      route<envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.catch_all_route>`
      instead.
    """

    catch_all_route: "RedisProxyPrefixRoutesRoute | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional catch-all route to forward commands that doesn't match any of the routes. The
    catch-all route becomes required when no routes are specified.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("catch_all_cluster"):
            warnings.warn(
                "RedisProxyPrefixRoutes.catch_all_cluster is deprecated",
                DeprecationWarning,
            )


default_message_pool.register_message(
    "envoy.config.filter.network.redis_proxy.v2",
    "RedisProxy.PrefixRoutes",
    RedisProxyPrefixRoutes,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyPrefixRoutesRoute(betterproto2.Message):
    prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    String prefix that must match the beginning of the keys. Envoy will always favor the
    longest match.
    """

    remove_prefix: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Indicates if the prefix needs to be removed from the key when forwarded.
    """

    cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Upstream cluster to forward the command to.
    """

    request_mirror_policy: "list[RedisProxyPrefixRoutesRouteRequestMirrorPolicy]" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Indicates that the route has a request mirroring policy.
    """


default_message_pool.register_message(
    "envoy.config.filter.network.redis_proxy.v2",
    "RedisProxy.PrefixRoutes.Route",
    RedisProxyPrefixRoutesRoute,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisProxyPrefixRoutesRouteRequestMirrorPolicy(betterproto2.Message):
    """
    The router is capable of shadowing traffic from one cluster to another. The current
    implementation is "fire and forget," meaning Envoy will not wait for the shadow cluster to
    respond before returning the response from the primary cluster. All normal statistics are
    collected for the shadow cluster making this feature useful for testing.
    """

    cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Specifies the cluster that requests will be mirrored to. The cluster must
    exist in the cluster manager configuration.
    """

    runtime_fraction: "_____api__v2__core__.RuntimeFractionalPercent | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    If not specified or the runtime key is not present, all requests to the target cluster
    will be mirrored.

    If specified, Envoy will lookup the runtime key to get the percentage of requests to the
    mirror.
    """

    exclude_read_commands: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Set this to TRUE to only mirror write commands, this is effectively replicating the
    writes in a "fire and forget" manner.
    """


default_message_pool.register_message(
    "envoy.config.filter.network.redis_proxy.v2",
    "RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy",
    RedisProxyPrefixRoutesRouteRequestMirrorPolicy,
)


from .......google import protobuf as ______google__protobuf__
from ......api.v2 import core as _____api__v2__core__
