# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/filter/network/rbac/v2/rbac.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Rbac", "RbacEnforcementType")

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class RbacEnforcementType(betterproto2.Enum):
    ONE_TIME_ON_FIRST_BYTE = 0
    """
    Apply RBAC policies when the first byte of data arrives on the connection.
    """

    CONTINUOUS = 1
    """
    Continuously apply RBAC policies as data arrives. Use this mode when
    using RBAC with message oriented protocols such as Mongo, MySQL, Kafka,
    etc. when the protocol decoders emit dynamic metadata such as the
    resources being accessed and the operations on the resources.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Rbac(betterproto2.Message):
    """
    [#protodoc-title: RBAC]
    Role-Based Access Control :ref:`configuration overview <config_network_filters_rbac>`.
    [#extension: envoy.filters.network.rbac]

    RBAC network filter config.

    Header should not be used in rules/shadow_rules in RBAC network filter as
    this information is only available in :ref:`RBAC http filter <config_http_filters_rbac>`.
    """

    rules: "____rbac__v2__.Rbac | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specify the RBAC rules to be applied globally.
    If absent, no enforcing RBAC policy will be applied.
    """

    shadow_rules: "____rbac__v2__.Rbac | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Shadow rules are not enforced by the filter but will emit stats and logs
    and can be used for rule testing.
    If absent, no shadow RBAC policy will be applied.
    """

    stat_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    The prefix to use when emitting statistics.
    """

    enforcement_type: "RbacEnforcementType" = betterproto2.field(
        4, betterproto2.TYPE_ENUM, default_factory=lambda: RbacEnforcementType(0)
    )
    """
    RBAC enforcement strategy. By default RBAC will be enforced only once
    when the first byte of data arrives from the downstream. When used in
    conjunction with filters that emit dynamic metadata after decoding
    every payload (e.g., Mongo, MySQL, Kafka) set the enforcement type to
    CONTINUOUS to enforce RBAC policies on every message boundary.
    """


default_message_pool.register_message(
    "envoy.config.filter.network.rbac.v2", "RBAC", Rbac
)


from .....rbac import v2 as ____rbac__v2__
