# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/bootstrap/v2/bootstrap.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Admin",
    "Bootstrap",
    "BootstrapDynamicResources",
    "BootstrapStaticResources",
    "ClusterManager",
    "ClusterManagerOutlierDetection",
    "LayeredRuntime",
    "Runtime",
    "RuntimeLayer",
    "RuntimeLayerAdminLayer",
    "RuntimeLayerDiskLayer",
    "RuntimeLayerRtdsLayer",
    "Watchdog",
)

import datetime
import typing
import warnings

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Admin(betterproto2.Message):
    """
    Administration interface :ref:`operations documentation
    <operations_admin_interface>`.
    """

    access_log_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The path to write the access log for the administration server. If no
    access log is desired specify ‘/dev/null’. This is only required if
    :ref:`address <envoy_api_field_config.bootstrap.v2.Admin.address>` is set.
    """

    profile_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The cpu profiler output path for the administration server. If no profile
    path is specified, the default is ‘/var/log/envoy/envoy.prof’.
    """

    address: "___api__v2__core__.Address | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The TCP address that the administration server will listen on.
    If not specified, Envoy will not start an administration server.
    """

    socket_options: "list[___api__v2__core__.SocketOption]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Additional socket options that may not be present in Envoy source code or
    precompiled binaries.
    """


default_message_pool.register_message("envoy.config.bootstrap.v2", "Admin", Admin)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Bootstrap(betterproto2.Message):
    """
    [#protodoc-title: Bootstrap]
    This proto is supplied via the :option:`-c` CLI flag and acts as the root
    of the Envoy v2 configuration. See the :ref:`v2 configuration overview
    <config_overview_bootstrap>` for more detail.

    Bootstrap :ref:`configuration overview <config_overview_bootstrap>`.
    [#next-free-field: 21]
    """

    node: "___api__v2__core__.Node | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Node identity to present to the management server and for instance
    identification purposes (e.g. in generated headers).
    """

    static_resources: "BootstrapStaticResources | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Statically specified resources.
    """

    dynamic_resources: "BootstrapDynamicResources | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    xDS configuration sources.
    """

    cluster_manager: "ClusterManager | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for the cluster manager which owns all upstream clusters
    within the server.
    """

    hds_config: "___api__v2__core__.ApiConfigSource | None" = betterproto2.field(
        14, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Health discovery service config option.
    (:ref:`core.ApiConfigSource <envoy_api_msg_core.ApiConfigSource>`)
    """

    flags_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    Optional file system path to search for startup flag files.
    """

    stats_sinks: "list[__metrics__v2__.StatsSink]" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Optional set of stats sinks.
    """

    stats_config: "__metrics__v2__.StatsConfig | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for internal processing of stats.
    """

    stats_flush_interval: "datetime.timedelta | None" = betterproto2.field(
        7,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Optional duration between flushes to configured stats sinks. For
    performance reasons Envoy latches counters and only flushes counters and
    gauges at a periodic interval. If not specified the default is 5000ms (5
    seconds).
    Duration must be at least 1ms and at most 5 min.
    """

    watchdog: "Watchdog | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional watchdog configuration.
    """

    tracing: "__trace__v2__.Tracing | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for an external tracing provider.

    .. attention::
     This field has been deprecated in favor of :ref:`HttpConnectionManager.Tracing.provider
     <envoy_api_field_config.filter.network.http_connection_manager.v2.HttpConnectionManager.Tracing.provider>`.
    """

    runtime: "Runtime | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for the runtime configuration provider (deprecated). If not
    specified, a “null” provider will be used which will result in all defaults
    being used.
    """

    layered_runtime: "LayeredRuntime | None" = betterproto2.field(
        17, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for the runtime configuration provider. If not
    specified, a “null” provider will be used which will result in all defaults
    being used.
    """

    admin: "Admin | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configuration for the local administration HTTP server.
    """

    overload_manager: "__overload__v2alpha__.OverloadManager | None" = (
        betterproto2.field(15, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Optional overload manager configuration.
    """

    enable_dispatcher_stats: "bool" = betterproto2.field(16, betterproto2.TYPE_BOOL)
    """
    Enable :ref:`stats for event dispatcher <operations_performance>`, defaults to false.
    Note that this records a value for each iteration of the event loop on every thread. This
    should normally be minimal overhead, but when using
    :ref:`statsd <envoy_api_msg_config.metrics.v2.StatsdSink>`, it will send each observed value
    over the wire individually because the statsd protocol doesn't have any way to represent a
    histogram summary. Be aware that this can be a very large volume of data.
    """

    header_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        18, betterproto2.TYPE_STRING
    )
    """
    Optional string which will be used in lieu of x-envoy in prefixing headers.

    For example, if this string is present and set to X-Foo, then x-envoy-retry-on will be
    transformed into x-foo-retry-on etc.

    Note this applies to the headers Envoy will generate, the headers Envoy will sanitize, and the
    headers Envoy will trust for core code and core extensions only. Be VERY careful making
    changes to this string, especially in multi-layer Envoy deployments or deployments using
    extensions which are not upstream.
    """

    stats_server_version_override: "int | None" = betterproto2.field(
        19,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt64Value,
        optional=True,
    )
    """
    Optional proxy version which will be used to set the value of :ref:`server.version statistic
    <server_statistics>` if specified. Envoy will not process this value, it will be sent as is to
    :ref:`stats sinks <envoy_api_msg_config.metrics.v2.StatsSink>`.
    """

    use_tcp_for_dns_lookups: "bool" = betterproto2.field(20, betterproto2.TYPE_BOOL)
    """
    Always use TCP queries instead of UDP queries for DNS lookups.
    This may be overridden on a per-cluster basis in cds_config,
    when :ref:`dns_resolvers <envoy_api_field_Cluster.dns_resolvers>` and
    :ref:`use_tcp_for_dns_lookups <envoy_api_field_Cluster.use_tcp_for_dns_lookups>` are
    specified.
    Setting this value causes failure if the
    ``envoy.restart_features.use_apple_api_for_dns_lookups`` runtime value is true during
    server startup. Apple' API only uses UDP for DNS resolution.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("runtime"):
            warnings.warn("Bootstrap.runtime is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "Bootstrap", Bootstrap
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class BootstrapDynamicResources(betterproto2.Message):
    lds_config: "___api__v2__core__.ConfigSource | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    All :ref:`Listeners <envoy_api_msg_Listener>` are provided by a single
    :ref:`LDS <arch_overview_dynamic_config_lds>` configuration source.
    """

    cds_config: "___api__v2__core__.ConfigSource | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    All post-bootstrap :ref:`Cluster <envoy_api_msg_Cluster>` definitions are
    provided by a single :ref:`CDS <arch_overview_dynamic_config_cds>`
    configuration source.
    """

    ads_config: "___api__v2__core__.ApiConfigSource | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A single :ref:`ADS <config_overview_ads>` source may be optionally
    specified. This must have :ref:`api_type
    <envoy_api_field_core.ApiConfigSource.api_type>` :ref:`GRPC
    <envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC>`. Only
    :ref:`ConfigSources <envoy_api_msg_core.ConfigSource>` that have
    the :ref:`ads <envoy_api_field_core.ConfigSource.ads>` field set will be
    streamed on the ADS channel.
    """


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "Bootstrap.DynamicResources", BootstrapDynamicResources
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class BootstrapStaticResources(betterproto2.Message):
    listeners: "list[___api__v2__.Listener]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Static :ref:`Listeners <envoy_api_msg_Listener>`. These listeners are
    available regardless of LDS configuration.
    """

    clusters: "list[___api__v2__.Cluster]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    If a network based configuration source is specified for :ref:`cds_config
    <envoy_api_field_config.bootstrap.v2.Bootstrap.DynamicResources.cds_config>`, it's necessary
    to have some initial cluster definitions available to allow Envoy to know
    how to speak to the management server. These cluster definitions may not
    use :ref:`EDS <arch_overview_dynamic_config_eds>` (i.e. they should be static
    IP or DNS-based).
    """

    secrets: "list[___api__v2__auth__.Secret]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    These static secrets can be used by :ref:`SdsSecretConfig
    <envoy_api_msg_auth.SdsSecretConfig>`
    """


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "Bootstrap.StaticResources", BootstrapStaticResources
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClusterManager(betterproto2.Message):
    """
    Cluster manager :ref:`architecture overview <arch_overview_cluster_manager>`.
    """

    local_cluster_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Name of the local cluster (i.e., the cluster that owns the Envoy running
    this configuration). In order to enable :ref:`zone aware routing
    <arch_overview_load_balancing_zone_aware_routing>` this option must be set.
    If *local_cluster_name* is defined then :ref:`clusters
    <envoy_api_msg_Cluster>` must be defined in the :ref:`Bootstrap
    static cluster resources
    <envoy_api_field_config.bootstrap.v2.Bootstrap.StaticResources.clusters>`. This is unrelated to
    the :option:`--service-cluster` option which does not `affect zone aware
    routing <https://github.com/envoyproxy/envoy/issues/774>`_.
    """

    outlier_detection: "ClusterManagerOutlierDetection | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional global configuration for outlier detection.
    """

    upstream_bind_config: "___api__v2__core__.BindConfig | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional configuration used to bind newly established upstream connections.
    This may be overridden on a per-cluster basis by upstream_bind_config in the cds_config.
    """

    load_stats_config: "___api__v2__core__.ApiConfigSource | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    A management server endpoint to stream load stats to via
    *StreamLoadStats*. This must have :ref:`api_type
    <envoy_api_field_core.ApiConfigSource.api_type>` :ref:`GRPC
    <envoy_api_enum_value_core.ApiConfigSource.ApiType.GRPC>`.
    """


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "ClusterManager", ClusterManager
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClusterManagerOutlierDetection(betterproto2.Message):
    event_log_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Specifies the path to the outlier event log.
    """

    event_service: "___api__v2__core__.EventServiceConfig | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    [#not-implemented-hide:]
    The gRPC service for the outlier detection event service.
    If empty, outlier detection events won't be sent to a remote endpoint.
    """


default_message_pool.register_message(
    "envoy.config.bootstrap.v2",
    "ClusterManager.OutlierDetection",
    ClusterManagerOutlierDetection,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LayeredRuntime(betterproto2.Message):
    """
    Runtime :ref:`configuration overview <config_runtime>`.
    """

    layers: "list[RuntimeLayer]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The :ref:`layers <config_runtime_layering>` of the runtime. This is ordered
    such that later layers in the list overlay earlier entries.
    """


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "LayeredRuntime", LayeredRuntime
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Runtime(betterproto2.Message):
    """
    Runtime :ref:`configuration overview <config_runtime>` (deprecated).
    """

    symlink_root: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The implementation assumes that the file system tree is accessed via a
    symbolic link. An atomic link swap is used when a new tree should be
    switched to. This parameter specifies the path to the symbolic link. Envoy
    will watch the location for changes and reload the file system tree when
    they happen. If this parameter is not set, there will be no disk based
    runtime.
    """

    subdirectory: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Specifies the subdirectory to load within the root directory. This is
    useful if multiple systems share the same delivery mechanism. Envoy
    configuration elements can be contained in a dedicated subdirectory.
    """

    override_subdirectory: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Specifies an optional subdirectory to load within the root directory. If
    specified and the directory exists, configuration values within this
    directory will override those found in the primary subdirectory. This is
    useful when Envoy is deployed across many different types of servers.
    Sometimes it is useful to have a per service cluster directory for runtime
    configuration. See below for exactly how the override directory is used.
    """

    base: "____google__protobuf__.Struct | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Static base runtime. This will be :ref:`overridden
    <config_runtime_layering>` by other runtime layers, e.g.
    disk or admin. This follows the :ref:`runtime protobuf JSON representation
    encoding <config_runtime_proto_json>`.
    """


default_message_pool.register_message("envoy.config.bootstrap.v2", "Runtime", Runtime)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RuntimeLayer(betterproto2.Message):
    """
    [#next-free-field: 6]

    Oneofs:
        - layer_specifier:
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Descriptive name for the runtime layer. This is only used for the runtime
    :http:get:`/runtime` output.
    """

    static_layer: "____google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="layer_specifier"
    )
    """
    :ref:`Static runtime <config_runtime_bootstrap>` layer.
    This follows the :ref:`runtime protobuf JSON representation encoding
    <config_runtime_proto_json>`. Unlike static xDS resources, this static
    layer is overridable by later layers in the runtime virtual filesystem.
    """

    disk_layer: "RuntimeLayerDiskLayer | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="layer_specifier"
    )

    admin_layer: "RuntimeLayerAdminLayer | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="layer_specifier"
    )

    rtds_layer: "RuntimeLayerRtdsLayer | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="layer_specifier"
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "RuntimeLayer", RuntimeLayer
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RuntimeLayerAdminLayer(betterproto2.Message):
    """
    :ref:`Admin console runtime <config_runtime_admin>` layer.
    """

    pass


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "RuntimeLayer.AdminLayer", RuntimeLayerAdminLayer
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RuntimeLayerDiskLayer(betterproto2.Message):
    """
    :ref:`Disk runtime <config_runtime_local_disk>` layer.
    """

    symlink_root: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The implementation assumes that the file system tree is accessed via a
    symbolic link. An atomic link swap is used when a new tree should be
    switched to. This parameter specifies the path to the symbolic link.
    Envoy will watch the location for changes and reload the file system tree
    when they happen. See documentation on runtime :ref:`atomicity
    <config_runtime_atomicity>` for further details on how reloads are
    treated.
    """

    subdirectory: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Specifies the subdirectory to load within the root directory. This is
    useful if multiple systems share the same delivery mechanism. Envoy
    configuration elements can be contained in a dedicated subdirectory.
    """

    append_service_cluster: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    :ref:`Append <config_runtime_local_disk_service_cluster_subdirs>` the
    service cluster to the path under symlink root.
    """


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "RuntimeLayer.DiskLayer", RuntimeLayerDiskLayer
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RuntimeLayerRtdsLayer(betterproto2.Message):
    """
    :ref:`Runtime Discovery Service (RTDS) <config_runtime_rtds>` layer.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Resource to subscribe to at *rtds_config* for the RTDS layer.
    """

    rtds_config: "___api__v2__core__.ConfigSource | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    RTDS configuration source.
    """


default_message_pool.register_message(
    "envoy.config.bootstrap.v2", "RuntimeLayer.RtdsLayer", RuntimeLayerRtdsLayer
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Watchdog(betterproto2.Message):
    """
    Envoy process watchdog configuration. When configured, this monitors for
    nonresponsive threads and kills the process after the configured thresholds.
    See the :ref:`watchdog documentation <operations_performance_watchdog>` for more information.
    """

    miss_timeout: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    The duration after which Envoy counts a nonresponsive thread in the
    *watchdog_miss* statistic. If not specified the default is 200ms.
    """

    megamiss_timeout: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    The duration after which Envoy counts a nonresponsive thread in the
    *watchdog_mega_miss* statistic. If not specified the default is
    1000ms.
    """

    kill_timeout: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    If a watched thread has been nonresponsive for this duration, assume a
    programming error and kill the entire Envoy process. Set to 0 to disable
    kill behavior. If not specified the default is 0 (disabled).
    """

    multikill_timeout: "datetime.timedelta | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    If at least two watched threads have been nonresponsive for at least this
    duration assume a true deadlock and kill the entire Envoy process. Set to 0
    to disable this behavior. If not specified the default is 0 (disabled).
    """


default_message_pool.register_message("envoy.config.bootstrap.v2", "Watchdog", Watchdog)


from .....google import protobuf as ____google__protobuf__
from ....api import v2 as ___api__v2__
from ....api.v2 import auth as ___api__v2__auth__
from ....api.v2 import core as ___api__v2__core__
from ...metrics import v2 as __metrics__v2__
from ...overload import v2alpha as __overload__v2alpha__
from ...trace import v2 as __trace__v2__
