# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/accesslog/v2/als.proto, envoy/config/accesslog/v2/file.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CommonGrpcAccessLogConfig",
    "FileAccessLog",
    "HttpGrpcAccessLogConfig",
    "TcpGrpcAccessLogConfig",
)

import datetime
import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CommonGrpcAccessLogConfig(betterproto2.Message):
    """
    Common configuration for gRPC access logs.
    [#next-free-field: 6]
    """

    log_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The friendly name of the access log to be returned in :ref:`StreamAccessLogsMessage.Identifier
    <envoy_api_msg_service.accesslog.v2.StreamAccessLogsMessage.Identifier>`. This allows the
    access log server to differentiate between different access logs coming from the same Envoy.
    """

    grpc_service: "___api__v2__core__.GrpcService | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The gRPC service for the access log service.
    """

    buffer_flush_interval: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval for flushing access logs to the gRPC stream. Logger will flush requests every time
    this interval is elapsed, or when batch size limit is hit, whichever comes first. Defaults to
    1 second.
    """

    buffer_size_bytes: "int | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Soft size limit in bytes for access log entries buffer. Logger will buffer requests until
    this limit it hit, or every time flush interval is elapsed, whichever comes first. Setting it
    to zero effectively disables the batching. Defaults to 16384.
    """

    filter_state_objects_to_log: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        5, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Additional filter state objects to log in :ref:`filter_state_objects
    <envoy_api_field_data.accesslog.v2.AccessLogCommon.filter_state_objects>`.
    Logger will call `FilterState::Object::serializeAsProto` to serialize the filter state object.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v2", "CommonGrpcAccessLogConfig", CommonGrpcAccessLogConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FileAccessLog(betterproto2.Message):
    """
    [#protodoc-title: File access log]
    [#extension: envoy.access_loggers.file]

    Custom configuration for an :ref:`AccessLog <envoy_api_msg_config.filter.accesslog.v2.AccessLog>`
    that writes log entries directly to a file. Configures the built-in *envoy.access_loggers.file*
    AccessLog.

    Oneofs:
        - access_log_format:
    """

    path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    A path to a local file to which to write the access log entries.
    """

    format: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="access_log_format"
    )
    """
    Access log :ref:`format string<config_access_log_format_strings>`.
    Envoy supports :ref:`custom access log formats <config_access_log_format>` as well as a
    :ref:`default format <config_access_log_default_format>`.
    """

    json_format: "____google__protobuf__.Struct | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="access_log_format"
    )
    """
    Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. All values
    are rendered as strings.
    """

    typed_json_format: "____google__protobuf__.Struct | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="access_log_format"
    )
    """
    Access log :ref:`format dictionary<config_access_log_format_dictionaries>`. Values are
    rendered as strings, numbers, or boolean values as appropriate. Nested JSON objects may
    be produced by some command operators (e.g.FILTER_STATE or DYNAMIC_METADATA). See the
    documentation for a specific command operator for details.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.config.accesslog.v2", "FileAccessLog", FileAccessLog
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HttpGrpcAccessLogConfig(betterproto2.Message):
    """
    [#protodoc-title: gRPC Access Log Service (ALS)]

    Configuration for the built-in *envoy.access_loggers.http_grpc*
    :ref:`AccessLog <envoy_api_msg_config.filter.accesslog.v2.AccessLog>`. This configuration will
    populate :ref:`StreamAccessLogsMessage.http_logs
    <envoy_api_field_service.accesslog.v2.StreamAccessLogsMessage.http_logs>`.
    [#extension: envoy.access_loggers.http_grpc]
    """

    common_config: "CommonGrpcAccessLogConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    additional_request_headers_to_log: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Additional request headers to log in :ref:`HTTPRequestProperties.request_headers
    <envoy_api_field_data.accesslog.v2.HTTPRequestProperties.request_headers>`.
    """

    additional_response_headers_to_log: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Additional response headers to log in :ref:`HTTPResponseProperties.response_headers
    <envoy_api_field_data.accesslog.v2.HTTPResponseProperties.response_headers>`.
    """

    additional_response_trailers_to_log: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        4, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Additional response trailers to log in :ref:`HTTPResponseProperties.response_trailers
    <envoy_api_field_data.accesslog.v2.HTTPResponseProperties.response_trailers>`.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v2", "HttpGrpcAccessLogConfig", HttpGrpcAccessLogConfig
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class TcpGrpcAccessLogConfig(betterproto2.Message):
    """
    Configuration for the built-in *envoy.access_loggers.tcp_grpc* type. This configuration will
    populate *StreamAccessLogsMessage.tcp_logs*.
    [#extension: envoy.access_loggers.tcp_grpc]
    """

    common_config: "CommonGrpcAccessLogConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "envoy.config.accesslog.v2", "TcpGrpcAccessLogConfig", TcpGrpcAccessLogConfig
)


from .....google import protobuf as ____google__protobuf__
from ....api.v2 import core as ___api__v2__core__
