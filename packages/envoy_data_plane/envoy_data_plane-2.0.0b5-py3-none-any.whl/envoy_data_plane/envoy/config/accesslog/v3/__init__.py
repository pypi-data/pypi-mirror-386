# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/accesslog/v3/accesslog.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "AccessLog",
    "AccessLogFilter",
    "AndFilter",
    "ComparisonFilter",
    "ComparisonFilterOp",
    "DurationFilter",
    "ExtensionFilter",
    "GrpcStatusFilter",
    "GrpcStatusFilterStatus",
    "HeaderFilter",
    "LogTypeFilter",
    "MetadataFilter",
    "NotHealthCheckFilter",
    "OrFilter",
    "ResponseFlagFilter",
    "RuntimeFilter",
    "StatusCodeFilter",
    "TraceableFilter",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class ComparisonFilterOp(betterproto2.Enum):
    EQ = 0
    """
    =
    """

    GE = 1
    """
    >=
    """

    LE = 2
    """
    <=
    """


class GrpcStatusFilterStatus(betterproto2.Enum):
    OK = 0

    CANCELED = 1

    UNKNOWN = 2

    INVALID_ARGUMENT = 3

    DEADLINE_EXCEEDED = 4

    NOT_FOUND = 5

    ALREADY_EXISTS = 6

    PERMISSION_DENIED = 7

    RESOURCE_EXHAUSTED = 8

    FAILED_PRECONDITION = 9

    ABORTED = 10

    OUT_OF_RANGE = 11

    UNIMPLEMENTED = 12

    INTERNAL = 13

    UNAVAILABLE = 14

    DATA_LOSS = 15

    UNAUTHENTICATED = 16


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AccessLog(betterproto2.Message):
    """
    [#protodoc-title: Common access log types]

    Oneofs:
        - config_type: Custom configuration that must be set according to the access logger extension being instantiated.
            [#extension-category: envoy.access_loggers]
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name of the access log extension configuration.
    """

    filter: "AccessLogFilter | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Filter which is used to determine if the access log needs to be written.
    """

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "AccessLog", AccessLog
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AccessLogFilter(betterproto2.Message):
    """
    [#next-free-field: 14]

    Oneofs:
        - filter_specifier:
    """

    status_code_filter: "StatusCodeFilter | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Status code filter.
    """

    duration_filter: "DurationFilter | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Duration filter.
    """

    not_health_check_filter: "NotHealthCheckFilter | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Not health check filter.
    """

    traceable_filter: "TraceableFilter | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Traceable filter.
    """

    runtime_filter: "RuntimeFilter | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Runtime filter.
    """

    and_filter: "AndFilter | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    And filter.
    """

    or_filter: "OrFilter | None" = betterproto2.field(
        7, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Or filter.
    """

    header_filter: "HeaderFilter | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Header filter.
    """

    response_flag_filter: "ResponseFlagFilter | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Response flag filter.
    """

    grpc_status_filter: "GrpcStatusFilter | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    gRPC status filter.
    """

    extension_filter: "ExtensionFilter | None" = betterproto2.field(
        11, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Extension filter.
    [#extension-category: envoy.access_loggers.extension_filters]
    """

    metadata_filter: "MetadataFilter | None" = betterproto2.field(
        12, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Metadata Filter
    """

    log_type_filter: "LogTypeFilter | None" = betterproto2.field(
        13, betterproto2.TYPE_MESSAGE, optional=True, group="filter_specifier"
    )
    """
    Log Type Filter
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "AccessLogFilter", AccessLogFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class AndFilter(betterproto2.Message):
    """
    Performs a logical “and” operation on the result of each filter in filters.
    Filters are evaluated sequentially and if one of them returns false, the
    filter returns false immediately.
    """

    filters: "list[AccessLogFilter]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "AndFilter", AndFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ComparisonFilter(betterproto2.Message):
    """
    Filter on an integer comparison.
    """

    op: "ComparisonFilterOp" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: ComparisonFilterOp(0)
    )
    """
    Comparison operator.
    """

    value: "__core__v3__.RuntimeUInt32 | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Value to compare against.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "ComparisonFilter", ComparisonFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DurationFilter(betterproto2.Message):
    """
    Filters based on the duration of the request or stream, in milliseconds.
    For end of stream access logs, the total duration of the stream will be used.
    For :ref:`periodic access logs<arch_overview_access_log_periodic>`,
    the duration of the stream at the time of log recording will be used.
    """

    comparison: "ComparisonFilter | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Comparison.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "DurationFilter", DurationFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ExtensionFilter(betterproto2.Message):
    """
    Extension filter is statically registered at runtime.

    Oneofs:
        - config_type: Custom configuration that depends on the filter being instantiated.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name of the filter implementation to instantiate. The name must
    match a statically registered filter.
    """

    typed_config: "____google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="config_type"
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "ExtensionFilter", ExtensionFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class GrpcStatusFilter(betterproto2.Message):
    """
    Filters gRPC requests based on their response status. If a gRPC status is not
    provided, the filter will infer the status from the HTTP status code.
    """

    statuses: "list[GrpcStatusFilterStatus]" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    Logs only responses that have any one of the gRPC statuses in this field.
    """

    exclude: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If included and set to true, the filter will instead block all responses
    with a gRPC status or inferred gRPC status enumerated in statuses, and
    allow all other responses.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "GrpcStatusFilter", GrpcStatusFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HeaderFilter(betterproto2.Message):
    """
    Filters requests based on the presence or value of a request header.
    """

    header: "__route__v3__.HeaderMatcher | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Only requests with a header which matches the specified HeaderMatcher will
    pass the filter check.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "HeaderFilter", HeaderFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LogTypeFilter(betterproto2.Message):
    """
    Filters based on access log type.
    """

    types: "list[___data__accesslog__v3__.AccessLogType]" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, repeated=True
    )
    """
    Logs only records which their type is one of the types defined in this field.
    """

    exclude: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    If this field is set to true, the filter will instead block all records
    with a access log type in types field, and allow all other records.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "LogTypeFilter", LogTypeFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class MetadataFilter(betterproto2.Message):
    """
    Filters based on matching dynamic metadata.
    If the matcher path and key correspond to an existing key in dynamic
    metadata, the request is logged only if the matcher value is equal to the
    metadata value. If the matcher path and key *do not* correspond to an
    existing key in dynamic metadata, the request is logged only if
    match_if_key_not_found is "true" or unset.
    """

    matcher: "___type__matcher__v3__.MetadataMatcher | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Matcher to check metadata for specified value. For example, to match on the
    access_log_hint metadata, set the filter to "envoy.common" and the path to
    "access_log_hint", and the value to "true".
    """

    match_if_key_not_found: "bool | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.BoolValue,
        optional=True,
    )
    """
    Default result if the key does not exist in dynamic metadata: if unset or
    true, then log; if false, then don't log.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "MetadataFilter", MetadataFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class NotHealthCheckFilter(betterproto2.Message):
    """
    Filters for requests that are not health check requests. A health check
    request is marked by the health check filter.
    """

    pass


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "NotHealthCheckFilter", NotHealthCheckFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class OrFilter(betterproto2.Message):
    """
    Performs a logical “or” operation on the result of each individual filter.
    Filters are evaluated sequentially and if one of them returns true, the
    filter returns true immediately.
    """

    filters: "list[AccessLogFilter]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("envoy.config.accesslog.v3", "OrFilter", OrFilter)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ResponseFlagFilter(betterproto2.Message):
    """
    Filters requests that received responses with an Envoy response flag set.
    A list of the response flags can be found
    in the access log formatter
    :ref:`documentation<config_access_log_format_response_flags>`.
    """

    flags: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Only responses with the any of the flags listed in this field will be
    logged. This field is optional. If it is not specified, then any response
    flag will pass the filter check.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "ResponseFlagFilter", ResponseFlagFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RuntimeFilter(betterproto2.Message):
    """
    Filters requests based on runtime-configurable sampling rates.
    """

    runtime_key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Specifies a key used to look up a custom sampling rate from the runtime configuration. If a value is found for this
    key, it will override the default sampling rate specified in ``percent_sampled``.
    """

    percent_sampled: "___type__v3__.FractionalPercent | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Defines the default sampling percentage when no runtime override is present. If not specified, the default is
    **0%** (with a denominator of 100).
    """

    use_independent_randomness: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Controls how sampling decisions are made.

    - Default behavior (``false``):

      * Uses the :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` as a consistent sampling pivot.
      * When :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` is present, sampling will be consistent
        across multiple hosts based on both the ``runtime_key`` and
        :ref:`x-request-id<config_http_conn_man_headers_x-request-id>`.
      * Useful for tracking related requests across a distributed system.

    - When set to ``true`` or :ref:`x-request-id<config_http_conn_man_headers_x-request-id>` is missing:

      * Sampling decisions are made randomly based only on the ``runtime_key``.
      * Useful in complex filter configurations (like nested
        :ref:`AndFilter<envoy_v3_api_msg_config.accesslog.v3.AndFilter>`/
        :ref:`OrFilter<envoy_v3_api_msg_config.accesslog.v3.OrFilter>` blocks) where independent probability
        calculations are desired.
      * Can be used to implement logging kill switches with predictable probability distributions.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "RuntimeFilter", RuntimeFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class StatusCodeFilter(betterproto2.Message):
    """
    Filters on HTTP response/status code.
    """

    comparison: "ComparisonFilter | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Comparison.
    """


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "StatusCodeFilter", StatusCodeFilter
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class TraceableFilter(betterproto2.Message):
    """
    Filters for requests that are traceable. See the tracing overview for more
    information on how a request becomes traceable.
    """

    pass


default_message_pool.register_message(
    "envoy.config.accesslog.v3", "TraceableFilter", TraceableFilter
)


from .....google import protobuf as ____google__protobuf__
from ....data.accesslog import v3 as ___data__accesslog__v3__
from ....type import v3 as ___type__v3__
from ....type.matcher import v3 as ___type__matcher__v3__
from ...core import v3 as __core__v3__
from ...route import v3 as __route__v3__
