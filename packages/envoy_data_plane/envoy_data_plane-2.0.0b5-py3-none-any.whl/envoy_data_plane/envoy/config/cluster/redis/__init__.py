# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/config/cluster/redis/redis_cluster.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("RedisClusterConfig",)

import datetime
import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedisClusterConfig(betterproto2.Message):
    """
    [#protodoc-title: Redis Cluster Configuration]
    This cluster adds support for `Redis Cluster <https://redis.io/topics/cluster-spec>`_, as part
    of :ref:`Envoy's support for Redis Cluster <arch_overview_redis>`.

    Redis Cluster is an extension of Redis which supports sharding and high availability (where a
    shard that loses its primary fails over to a replica, and designates it as the new primary).
    However, as there is no unified frontend or proxy service in front of Redis Cluster, the client
    (in this case Envoy) must locally maintain the state of the Redis Cluster, specifically the
    topology. A random node in the cluster is queried for the topology using the `CLUSTER SLOTS
    command <https://redis.io/commands/cluster-slots>`_. This result is then stored locally, and
    updated at user-configured intervals.

    Additionally, if
    :ref:`enable_redirection<envoy_api_field_config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.enable_redirection>`
    is true, then moved and ask redirection errors from upstream servers will trigger a topology
    refresh when they exceed a user-configured error threshold.

    Example:

    .. code-block:: yaml

        name: name
        connect_timeout: 0.25s
        dns_lookup_family: V4_ONLY
        hosts:
        - socket_address:
          address: foo.bar.com
          port_value: 22120
        cluster_type:
          name: envoy.clusters.redis
          typed_config:
            "@type": type.googleapis.com/google.protobuf.Struct
            value:
              cluster_refresh_rate: 30s
              cluster_refresh_timeout: 0.5s
              redirect_refresh_interval: 10s
              redirect_refresh_threshold: 10
    [#extension: envoy.clusters.redis]

    [#next-free-field: 7]
    """

    cluster_refresh_rate: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Interval between successive topology refresh requests. If not set, this defaults to 5s.
    """

    cluster_refresh_timeout: "datetime.timedelta | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Timeout for topology refresh request. If not set, this defaults to 3s.
    """

    redirect_refresh_interval: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    The minimum interval that must pass after triggering a topology refresh request before a new
    request can possibly be triggered again. Any errors received during one of these
    time intervals are ignored. If not set, this defaults to 5s.
    """

    redirect_refresh_threshold: "int | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    The number of redirection errors that must be received before
    triggering a topology refresh request. If not set, this defaults to 5.
    If this is set to 0, topology refresh after redirect is disabled.
    """

    failure_refresh_threshold: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        5, betterproto2.TYPE_UINT32
    )
    """
    The number of failures that must be received before triggering a topology refresh request.
    If not set, this defaults to 0, which disables the topology refresh due to failure.
    """

    host_degraded_refresh_threshold: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        6, betterproto2.TYPE_UINT32
    )
    """
    The number of hosts became degraded or unhealthy before triggering a topology refresh request.
    If not set, this defaults to 0, which disables the topology refresh due to degraded or
    unhealthy host.
    """


default_message_pool.register_message(
    "envoy.config.cluster.redis", "RedisClusterConfig", RedisClusterConfig
)


from .....google import protobuf as ____google__protobuf__
