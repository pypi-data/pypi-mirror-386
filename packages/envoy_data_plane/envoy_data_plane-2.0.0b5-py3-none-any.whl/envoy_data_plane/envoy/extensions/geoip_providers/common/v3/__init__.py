# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/geoip_providers/common/v3/common.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CommonGeoipProviderConfig",
    "CommonGeoipProviderConfigGeolocationHeadersToAdd",
)

import typing
import warnings

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CommonGeoipProviderConfig(betterproto2.Message):
    """
    [#protodoc-title: Common Geolocation Provider Configuration]
    Common geolocation provider :ref:`configuration overview <config_geoip_providers_common>`.
    Common configuration shared across geolocation providers.
    """

    geo_headers_to_add: "CommonGeoipProviderConfigGeolocationHeadersToAdd | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration for geolocation headers to add to the request.
    """


default_message_pool.register_message(
    "envoy.extensions.geoip_providers.common.v3",
    "CommonGeoipProviderConfig",
    CommonGeoipProviderConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CommonGeoipProviderConfigGeolocationHeadersToAdd(betterproto2.Message):
    """
    The set of geolocation headers to add to the request. If any of the configured headers is present
    in the incoming request, it will be overridden by the :ref:`GeoIP filter <config_http_filters_geoip>`.
    [#next-free-field: 13]
    """

    country: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    If set, the header will be used to populate the country ISO code associated with the IP address.
    """

    city: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    If set, the header will be used to populate the city associated with the IP address.
    """

    region: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    If set, the header will be used to populate the region ISO code associated with the IP address.
    The least specific subdivision will be selected as the region value.
    """

    asn: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    If set, the header will be used to populate the ASN associated with the IP address.
    """

    is_anon: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    This field is deprecated; use ``anon`` instead.
    """

    anon: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        12, betterproto2.TYPE_STRING
    )
    """
    If set, the IP address will be checked if it belongs to any type of anonymization network (e.g., VPN, public proxy).
    The header will be populated with the check result. Header value will be set to either ``true`` or ``false`` depending on the check result.
    """

    anon_vpn: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    If set, the IP address will be checked if it belongs to a VPN and the header will be populated with the check result.
    Header value will be set to either ``true`` or ``false`` depending on the check result.
    """

    anon_hosting: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        7, betterproto2.TYPE_STRING
    )
    """
    If set, the IP address will be checked if it belongs to a hosting provider and the header will be populated with the check result.
    Header value will be set to either ``true`` or ``false`` depending on the check result.
    """

    anon_tor: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        8, betterproto2.TYPE_STRING
    )
    """
    If set, the IP address will be checked if it belongs to a TOR exit node and the header will be populated with the check result.
    Header value will be set to either ``true`` or ``false`` depending on the check result.
    """

    anon_proxy: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        9, betterproto2.TYPE_STRING
    )
    """
    If set, the IP address will be checked if it belongs to a public proxy and the header will be populated with the check result.
    Header value will be set to either ``true`` or ``false`` depending on the check result.
    """

    isp: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )
    """
    If set, the header will be used to populate the ISP associated with the IP address.
    """

    apple_private_relay: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )
    """
    If set, the IP address will be checked if it belongs to the ISP named iCloud Private Relay and the header will be populated with the check result.
    Header value will be set to either ``true`` or ``false`` depending on the check result.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("is_anon"):
            warnings.warn(
                "CommonGeoipProviderConfigGeolocationHeadersToAdd.is_anon is deprecated",
                DeprecationWarning,
            )


default_message_pool.register_message(
    "envoy.extensions.geoip_providers.common.v3",
    "CommonGeoipProviderConfig.GeolocationHeadersToAdd",
    CommonGeoipProviderConfigGeolocationHeadersToAdd,
)
