# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/transport_sockets/internal_upstream/v3/internal_upstream.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "InternalUpstreamTransport",
    "InternalUpstreamTransportMetadataValueSource",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class InternalUpstreamTransport(betterproto2.Message):
    """
    [#protodoc-title: Internal Upstream]
    [#extension: envoy.transport_sockets.internal_upstream]

    Configuration for the internal upstream address. An internal address defines
    a loopback user space socket residing in the same proxy instance. This
    extension allows passing additional structured state across the user space
    socket in addition to the regular byte stream. The purpose is to facilitate
    communication between filters on the downstream and the upstream internal
    connections. All filter state objects that are shared with the upstream
    connection are also shared with the downstream internal connection using
    this transport socket.
    """

    passthrough_metadata: "list[InternalUpstreamTransportMetadataValueSource]" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    Specifies the metadata namespaces and values to insert into the downstream
    internal connection dynamic metadata when an internal address is used as a
    host. If the destination name is repeated across two metadata source
    locations, and both locations contain the metadata with the given name,
    then the latter in the list overrides the former.
    """

    transport_socket: "____config__core__v3__.TransportSocket | None" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The underlying transport socket being wrapped.
    """


default_message_pool.register_message(
    "envoy.extensions.transport_sockets.internal_upstream.v3",
    "InternalUpstreamTransport",
    InternalUpstreamTransport,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class InternalUpstreamTransportMetadataValueSource(betterproto2.Message):
    """
    Describes the location of the imported metadata value.
    If the metadata with the given name is not present at the source location,
    then no metadata is passed through for this particular instance.
    """

    kind: "____type__metadata__v3__.MetadataKind | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specifies what kind of metadata.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Name is the filter namespace used in the dynamic metadata.
    """


default_message_pool.register_message(
    "envoy.extensions.transport_sockets.internal_upstream.v3",
    "InternalUpstreamTransport.MetadataValueSource",
    InternalUpstreamTransportMetadataValueSource,
)


from .....config.core import v3 as ____config__core__v3__
from .....type.metadata import v3 as ____type__metadata__v3__
