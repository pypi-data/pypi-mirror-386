# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/transport_sockets/alts/v3/alts.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Alts",)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Alts(betterproto2.Message):
    """
    [#protodoc-title: ALTS]
    [#extension: envoy.transport_sockets.alts]

    Configuration for ALTS transport socket. This provides Google's ALTS protocol to Envoy.
    Store the peer identity in dynamic metadata, namespace is "envoy.transport_socket.peer_information", key is "peer_identity".
    https://cloud.google.com/security/encryption-in-transit/application-layer-transport-security/
    """

    handshaker_service: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The location of a handshaker service, this is usually 169.254.169.254:8080
    on GCE.
    """

    peer_service_accounts: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    The acceptable service accounts from peer, peers not in the list will be rejected in the
    handshake validation step. If empty, no validation will be performed.
    """


default_message_pool.register_message(
    "envoy.extensions.transport_sockets.alts.v3", "Alts", Alts
)
