# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/common/dependency/v3/dependency.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Dependency",
    "DependencyDependencyType",
    "FilterDependencies",
    "MatchingRequirements",
    "MatchingRequirementsDataInputAllowList",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class DependencyDependencyType(betterproto2.Enum):
    HEADER = 0

    FILTER_STATE_KEY = 1

    DYNAMIC_METADATA = 2


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Dependency(betterproto2.Message):
    """
    [#protodoc-title: Filter dependency specification]

    Dependency specification and string identifier.
    """

    type: "DependencyDependencyType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: DependencyDependencyType(0)
    )
    """
    The kind of dependency.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The string identifier for the dependency.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.common.dependency.v3", "Dependency", Dependency
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FilterDependencies(betterproto2.Message):
    """
    Dependency specification for a filter. For a filter chain to be valid, any
    dependency that is required must be provided by an earlier filter.
    """

    decode_required: "list[Dependency]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of dependencies required on the decode path.
    """

    decode_provided: "list[Dependency]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of dependencies provided on the decode path.
    """

    encode_required: "list[Dependency]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of dependencies required on the encode path.
    """

    encode_provided: "list[Dependency]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    A list of dependencies provided on the encode path.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.common.dependency.v3",
    "FilterDependencies",
    FilterDependencies,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class MatchingRequirements(betterproto2.Message):
    """
    Matching requirements for a filter. For a match tree to be used with a filter, the match
    requirements must be satisfied.

    This protobuf is provided by the filter implementation as a way to communicate the matching
    requirements to the filter factories, allowing for config rejection if the requirements are
    not satisfied.
    """

    data_input_allow_list: "MatchingRequirementsDataInputAllowList | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )


default_message_pool.register_message(
    "envoy.extensions.filters.common.dependency.v3",
    "MatchingRequirements",
    MatchingRequirements,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class MatchingRequirementsDataInputAllowList(betterproto2.Message):
    type_url: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    An explicit list of data inputs that are allowed to be used with this filter.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.common.dependency.v3",
    "MatchingRequirements.DataInputAllowList",
    MatchingRequirementsDataInputAllowList,
)
