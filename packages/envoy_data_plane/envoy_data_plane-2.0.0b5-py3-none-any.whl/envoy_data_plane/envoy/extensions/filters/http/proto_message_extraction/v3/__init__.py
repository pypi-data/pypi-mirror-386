# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/proto_message_extraction/v3/config.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "MethodExtraction",
    "MethodExtractionExtractDirective",
    "ProtoMessageExtractionConfig",
    "ProtoMessageExtractionConfigExtractMode",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class MethodExtractionExtractDirective(betterproto2.Enum):
    ExtractDirective_UNSPECIFIED = 0

    EXTRACT = 1
    """
    The value of this field will be extracted.
    """

    EXTRACT_REDACT = 2
    """
    It should be only annotated on Message type fields so if the field isn't
    empty, an empty Struct will be extracted.
    """


class ProtoMessageExtractionConfigExtractMode(betterproto2.Enum):
    ExtractMode_UNSPECIFIED = 0

    FIRST_AND_LAST = 1
    """
    The filter will extract the first and the last message for
    for streaming cases, containing
    client-side streaming, server-side streaming or bi-directional streaming.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class MethodExtraction(betterproto2.Message):
    """
    This message can be used to support per route config approach later even
    though the Istio doesn't support that so far.
    """

    request_extraction_by_field: "dict[str, MethodExtractionExtractDirective]" = (
        betterproto2.field(
            2,
            betterproto2.TYPE_MAP,
            map_meta=betterproto2.map_meta(
                betterproto2.TYPE_STRING, betterproto2.TYPE_ENUM
            ),
        )
    )
    """
    The mapping of field path to its ExtractDirective for request messages
    """

    response_extraction_by_field: "dict[str, MethodExtractionExtractDirective]" = (
        betterproto2.field(
            3,
            betterproto2.TYPE_MAP,
            map_meta=betterproto2.map_meta(
                betterproto2.TYPE_STRING, betterproto2.TYPE_ENUM
            ),
        )
    )
    """
    The mapping of field path to its ExtractDirective for response messages
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.proto_message_extraction.v3",
    "MethodExtraction",
    MethodExtraction,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ProtoMessageExtractionConfig(betterproto2.Message):
    """
    [#protodoc-title: Proto Message Extraction]

    [#extension: envoy.filters.http.proto_message_extraction]

    Overview
    --------

    ProtoMessageExtraction filter supports extracting gRPC
    requests/responses(proto messages) into google.protobuf.Struct and storing
    results in the dynamic metadata `envoy.filters.http.proto_message_extraction`
    for later access.

    Assumptions
    -----------

    This filter assumes it is only applicable for gRPC with Protobuf as payload.

    Process Flow
    ------------

    On the request path, it will check

    1. if the incoming gRPC request is configured, the filter tries to:

      a. buffer the incoming data to complete protobuf messages
      b. extract individual protobuf messages according to directives
      c. write the result into the dynamic metadata.
      d. pass through the request data

    2. otherwise, pass through the request.

    On the response path, it will check

    1. if the incoming gRPC request is configured, the filter tries to:

      a. buffer the incoming data to complete protobuf messages
      b. extract individual protobuf messages according to directives
      c. write the result into the dynamic metadata.
      d. pass through the response data

    2. otherwise, pass through the response.

    Config Requirements
    -------------------

    Here are config requirements

    1. the extracted target field should be among the following primitive types:
    `string`, `uint32`, `uint64`, `int32`, `int64`, `sint32`, `sint64`,
    `fixed32`, `fixed64`, `sfixed32`, `sfixed64`, `float`, `double`.

    2. the target field could be repeated.

    3. the intermediate type could also be repeated.

    Output Format
    -------------

    The extracted requests and responses will be  will be added in the dynamic
    ``metadata<google.protobuf.Struct>`` with the same layout of the message.

    For the default `FIRST_AND_LAST` mode, it will be like:

    .. code-block:: json

      {
        "requests":{
           "first":{
              "foo": "val_foo1",
           }
           "last":{
              "foo": "val_foo3",
           }
        },
        "responses":{
           "first":{
              "baz": "val_baz1",
           }
           "last":{
              "baz": "val_foo3",
           }
        }
      }

    Example for `FIRST_AND_LAST` mode
    ---------------------------------

    Let's say we have the following definition for the bi-streaming request
    `pkg.svc.Method`.

    .. code-block:: proto

      message MethodRequest {
        string foo = 1;
        Nested nested = 2;
        Msg redacted = 3;
        ...
      }

      message MethodResponse {
        string baz = 1;
      }

      message Nested {
        Msg double_nested = 2;
      }

      message Msg {
        string bar = 1;
        string not_extracted = 2;
      }

    This is the filter config in JSON.

    .. code-block:: json

      {
        "descriptor_set":{},
        "mode": "FIRST_AND_LAST",
        "extraction_by_method":{
           "pkg.svc.Method":{
              "request_extraction_by_field":{
                 "foo":"EXTRACT",
                 "nested.doubled_nested.bar":"EXTRACT",
                 "redacted":"EXTRACT_REDACT"
              },
              "response_extraction_by_field":{
                 "bar":"EXTRACT",
              }
           }
        }
      }

    During runtime, the filter receives the following `MethodRequest` message in
    JSON.

    .. code-block:: json

      {
        "foo": "val_foo1",
        "nested": { "double_nested": {"bar": "val_bar1", "not_extracted":
        "val_not_extracted1"}, "redacted": { "bar": "val_redacted_bar1"}
      }
      {
        "foo": "val_foo2",
        "nested": { "double_nested": {"bar": "val_bar2", "not_extracted":
        "val_not_extracted2"}, "redacted": { "bar": "val_redacted_bar2"}
      }
      {
        "foo": "val_foo3",
        "nested": { "double_nested": {"bar": "val_bar3", "not_extracted":
        "val_not_extracted3"}, "redacted": { "bar": "val_redacted_bar3"}
      }

    the filter receives the following `MethodResponse` message in
    JSON.

    .. code-block:: json

      {
        "baz": "val_baz1",
      }
      {
        "baz": "val_baz2",
      }
      {
        "baz": "val_baz3",
      }

    The filter will write the following dynamic
    metadata(`envoy.filters.http.proto_message_extraction`) in JSON.

    .. code-block:: json

      {
        "requests":{
           "first":{
              "foo": "val_foo1",
              "nested": { "double_nested": {"bar": "val_bar1"}},
              "redacted": {}
           }
           "last":{
              "foo": "val_foo3",
              "nested": { "double_nested": {"bar": "val_bar3"}},
              "redacted": {}
           }
        },
        "responses":{
           "first":{
              "baz": "val_baz1"
           }
           "last":{
              "baz": "val_foo3"
           }
        }
      }

    Oneofs:
        - descriptor_set: The proto descriptor set binary for the gRPC services.
    """

    data_source: "_____config__core__v3__.DataSource | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="descriptor_set"
    )
    """
    It could be passed by a local file through ``Datasource.filename`` or
    embedded in the ``Datasource.inline_bytes``.
    """

    proto_descriptor_typed_metadata: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="descriptor_set"
    )
    """
    Unimplemented, the key of proto descriptor TypedMetadata.
    Among filters depending on the proto descriptor, we can have a
    TypedMetadata for proto descriptors, so that these filters can share one
    copy of proto descriptor in memory.
    """

    mode: "ProtoMessageExtractionConfigExtractMode" = betterproto2.field(
        3,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: ProtoMessageExtractionConfigExtractMode(0),
    )

    extraction_by_method: "dict[str, MethodExtraction]" = betterproto2.field(
        4,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_MESSAGE
        ),
    )
    """
    Specify the message extraction info.
    The key is the fully qualified gRPC method name.
    ``${package}.${Service}.${Method}``, like
    ``endpoints.examples.bookstore.BookStore.GetShelf``

    The value is the message extraction information for individual gRPC
    methods.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.filters.http.proto_message_extraction.v3",
    "ProtoMessageExtractionConfig",
    ProtoMessageExtractionConfig,
)


from ......config.core import v3 as _____config__core__v3__
