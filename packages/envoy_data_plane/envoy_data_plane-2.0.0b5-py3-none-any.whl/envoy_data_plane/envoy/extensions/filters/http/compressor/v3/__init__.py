# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/compressor/v3/compressor.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Compressor",
    "CompressorCommonDirectionConfig",
    "CompressorOverrides",
    "CompressorPerRoute",
    "CompressorRequestDirectionConfig",
    "CompressorResponseDirectionConfig",
    "ResponseDirectionOverrides",
)

import typing
import warnings

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Compressor(betterproto2.Message):
    """
    [#protodoc-title: Compressor]
    Compressor :ref:`configuration overview <config_http_filters_compressor>`.
    [#extension: envoy.filters.http.compressor]

    [#next-free-field: 10]
    """

    content_length: "int | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Minimum response length, in bytes, which will trigger compression. The default value is 30.
    """

    content_type: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        2, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Set of strings that allows specifying which mime-types yield compression; e.g.,
    ``application/json``, ``text/html``, etc.

    When this field is not specified, compression will be applied to these following mime-types
    and their synonyms:

    * ``application/javascript``
    * ``application/json``
    * ``application/xhtml+xml``
    * ``image/svg+xml``
    * ``text/css``
    * ``text/html``
    * ``text/plain``
    * ``text/xml``
    """

    disable_on_etag_header: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    When this field is ``true``, disables compression when the response contains an ``ETag`` header.
    When this field is ``false``, the filter will preserve weak ``ETag`` values and remove those that
    require strong validation.
    """

    remove_accept_encoding_header: "bool" = betterproto2.field(
        4, betterproto2.TYPE_BOOL
    )
    """
    When this field is ``true``, removes ``Accept-Encoding`` from the request headers before dispatching
    the request to the upstream so that responses do not get compressed before reaching the filter.

    .. attention::

       To avoid interfering with other compression filters in the same chain, use this option in
       the filter closest to the upstream.
    """

    runtime_enabled: "_____config__core__v3__.RuntimeFeatureFlag | None" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Runtime flag that controls whether the filter is enabled. When this field is ``false``, the
    filter will operate as a pass-through filter, unless overridden by ``CompressorPerRoute``.
    If this field is not specified, the filter is enabled by default.
    """

    compressor_library: "_____config__core__v3__.TypedExtensionConfig | None" = (
        betterproto2.field(6, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    A compressor library to use for compression.
    [#extension-category: envoy.compression.compressor]
    """

    request_direction_config: "CompressorRequestDirectionConfig | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration for request compression. If this field is not specified, request compression is disabled.
    """

    response_direction_config: "CompressorResponseDirectionConfig | None" = (
        betterproto2.field(8, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Configuration for response compression. If this field is not specified, response compression is enabled.

    .. attention::

       When this field is set, duplicate deprecated fields of the ``Compressor`` message,
       such as ``content_length``, ``content_type``, ``disable_on_etag_header``,
       ``remove_accept_encoding_header``, and ``runtime_enabled``, are ignored.

       Additionally, all statistics related to response compression will be rooted in
       ``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.response.*``
       instead of
       ``<stat_prefix>.compressor.<compressor_library.name>.<compressor_library_stat_prefix>.*``.
    """

    choose_first: "bool" = betterproto2.field(9, betterproto2.TYPE_BOOL)
    """
    When this field is ``true``, this compressor is preferred when q-values in ``Accept-Encoding`` are equal.
    If multiple compressor filters set ``choose_first`` to ``true``, the last one in the filter chain is chosen.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("content_length"):
            warnings.warn("Compressor.content_length is deprecated", DeprecationWarning)
        if self.is_set("content_type"):
            warnings.warn("Compressor.content_type is deprecated", DeprecationWarning)
        if self.is_set("disable_on_etag_header"):
            warnings.warn(
                "Compressor.disable_on_etag_header is deprecated", DeprecationWarning
            )
        if self.is_set("remove_accept_encoding_header"):
            warnings.warn(
                "Compressor.remove_accept_encoding_header is deprecated",
                DeprecationWarning,
            )
        if self.is_set("runtime_enabled"):
            warnings.warn(
                "Compressor.runtime_enabled is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3", "Compressor", Compressor
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CompressorCommonDirectionConfig(betterproto2.Message):
    enabled: "_____config__core__v3__.RuntimeFeatureFlag | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Runtime flag that controls whether compression is enabled for the direction this
    common config is applied to. When this field is ``false``, the filter will operate as a
    pass-through filter in the chosen direction, unless overridden by ``CompressorPerRoute``.
    If this field is not specified, the filter will be enabled.
    """

    min_content_length: "int | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Minimum value of the ``Content-Length`` header in request or response messages (depending on the
    direction this common config is applied to), in bytes, that will trigger compression. Defaults to 30.
    """

    content_type: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        3, betterproto2.TYPE_STRING, repeated=True
    )
    """
    Set of strings that allows specifying which mime-types yield compression; e.g.,
    ``application/json``, ``text/html``, etc.

    When this field is not specified, compression will be applied to these following mime-types
    and their synonyms:

    * ``application/javascript``
    * ``application/json``
    * ``application/xhtml+xml``
    * ``image/svg+xml``
    * ``text/css``
    * ``text/html``
    * ``text/plain``
    * ``text/xml``
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "Compressor.CommonDirectionConfig",
    CompressorCommonDirectionConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CompressorRequestDirectionConfig(betterproto2.Message):
    """
    Configuration for filter behavior on the request direction.
    """

    common_config: "CompressorCommonDirectionConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "Compressor.RequestDirectionConfig",
    CompressorRequestDirectionConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CompressorResponseDirectionConfig(betterproto2.Message):
    """
    Configuration for filter behavior on the response direction.
    [#next-free-field: 6]
    """

    common_config: "CompressorCommonDirectionConfig | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    disable_on_etag_header: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    When this field is ``true``, disables compression when the response contains an ``ETag`` header.
    When this field is ``false``, the filter will preserve weak ``ETag`` values and remove those that
    require strong validation.
    """

    remove_accept_encoding_header: "bool" = betterproto2.field(
        3, betterproto2.TYPE_BOOL
    )
    """
    When this field is ``true``, removes ``Accept-Encoding`` from the request headers before dispatching
    the request to the upstream so that responses do not get compressed before reaching the filter.

    .. attention::

       To avoid interfering with other compression filters in the same chain, use this option in
       the filter closest to the upstream.
    """

    uncompressible_response_codes: "list[typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]]" = betterproto2.field(
        4, betterproto2.TYPE_UINT32, repeated=True
    )
    """
    Set of response codes for which compression is disabled; e.g., 206 Partial Content should not
    be compressed.
    """

    status_header_enabled: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    If true, the filter adds the ``x-envoy-compression-status`` response
    header to indicate whether the compression occurred and, if not, provide
    the reason why. The header's value format is
    ``<encoder-type>;<status>[;<additional-params>]``, where ``<status>`` is
    ``Compressed`` or the reason compression was skipped (e.g.,
    ``ContentLengthTooSmall``). When this field is enabled, the compressor
    filter alters the order of the compression eligibility checks to report
    the most valid reason for skipping the compression.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "Compressor.ResponseDirectionConfig",
    CompressorResponseDirectionConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CompressorOverrides(betterproto2.Message):
    """
    Per-route overrides. As per-route overrides are needed, they should be
    added here, mirroring the structure of ``Compressor``. All fields should be
    optional, to allow overriding arbitrary subsets of configuration.
    """

    response_direction_config: "ResponseDirectionOverrides | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If present, response compression is enabled.
    """

    compressor_library: "_____config__core__v3__.TypedExtensionConfig | None" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    A compressor library to use for compression. If specified, this overrides
    the filter-level ``compressor_library`` configuration for this route.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "CompressorOverrides",
    CompressorOverrides,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CompressorPerRoute(betterproto2.Message):
    """


    Oneofs:
        - override:
    """

    disabled: "bool | None" = betterproto2.field(
        1, betterproto2.TYPE_BOOL, optional=True, group="override"
    )
    """
    If set, the filter will operate as a pass-through filter.
    Overrides ``Compressor.runtime_enabled`` and ``CommonDirectionConfig.enabled``.
    """

    overrides: "CompressorOverrides | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="override"
    )
    """
    Per-route overrides. Fields set here will override corresponding fields in ``Compressor``.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "CompressorPerRoute",
    CompressorPerRoute,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ResponseDirectionOverrides(betterproto2.Message):
    """
    Per-route overrides of ``ResponseDirectionConfig``. Anything added here should be optional,
    to allow overriding arbitrary subsets of configuration. Omitted fields must have no effect.
    """

    remove_accept_encoding_header: "bool | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.BoolValue,
        optional=True,
    )
    """
    If set, overrides the filter-level
    :ref:`remove_accept_encoding_header<envoy_v3_api_field_extensions.filters.http.compressor.v3.Compressor.ResponseDirectionConfig.remove_accept_encoding_header>`.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.compressor.v3",
    "ResponseDirectionOverrides",
    ResponseDirectionOverrides,
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
