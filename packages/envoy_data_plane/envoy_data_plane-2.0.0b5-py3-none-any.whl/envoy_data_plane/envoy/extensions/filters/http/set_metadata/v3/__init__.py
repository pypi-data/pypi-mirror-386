# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/http/set_metadata/v3/set_metadata.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Config",
    "Metadata",
)

import typing
import warnings

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Config(betterproto2.Message):
    metadata_namespace: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The metadata namespace.
    This field is deprecated; please use ``metadata`` as replacement.
    """

    value: "______google__protobuf__.Struct | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The untyped value to update the dynamic metadata namespace with. See
    :ref:`the filter documentation <config_http_filters_set_metadata>` for
    more information on how this value is merged with potentially existing
    ones.
    This field is deprecated; please use ``metadata`` as replacement.
    """

    metadata: "list[Metadata]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Defines changes to be made to dynamic metadata.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("metadata_namespace"):
            warnings.warn("Config.metadata_namespace is deprecated", DeprecationWarning)
        if self.is_set("value"):
            warnings.warn("Config.value is deprecated", DeprecationWarning)


default_message_pool.register_message(
    "envoy.extensions.filters.http.set_metadata.v3", "Config", Config
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Metadata(betterproto2.Message):
    """
    [#protodoc-title: Set-Metadata Filter]

    This filters adds or updates dynamic metadata with static data.

    [#extension: envoy.filters.http.set_metadata]
    """

    metadata_namespace: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The metadata namespace.
    """

    allow_overwrite: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Allow the filter to overwrite or merge with an existing value in the namespace.
    """

    value: "______google__protobuf__.Struct | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The value to place at the namespace. If ``allow_overwrite``, this will
    overwrite or merge with any existing values in that namespace. See
    :ref:`the filter documentation <config_http_filters_set_metadata>` for
    more information on how this value is merged with potentially existing
    ones if ``allow_overwrite`` is configured. Only one of ``value`` and
    ``typed_value`` may be set.
    """

    typed_value: "______google__protobuf__.Any | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The value to place at the namespace. If ``allow_overwrite``, this will
    overwrite any existing values in that namespace. Only one of ``value`` and
    ``typed_value`` may be set.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.http.set_metadata.v3", "Metadata", Metadata
)


from .......google import protobuf as ______google__protobuf__
