# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/network/reverse_tunnel/v3/reverse_tunnel.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ReverseTunnel",
    "Validation",
)

import datetime
import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ReverseTunnel(betterproto2.Message):
    """
    Configuration for the reverse tunnel network filter.
    This filter handles reverse tunnel connection acceptance and rejection by processing
    HTTP requests where required identification values are provided via HTTP headers.
    [#next-free-field: 6]
    """

    ping_interval: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.Duration,
        optional=True,
    )
    """
    Ping interval for health checks on established reverse tunnel connections.
    If not specified, defaults to ``2 seconds``.
    """

    auto_close_connections: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Whether to automatically close connections after processing reverse tunnel requests.

    * When set to ``true``, connections are closed after acceptance or rejection.
    * When set to ``false``, connections remain open for potential reuse.

    Defaults to ``false``.
    """

    request_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    HTTP path to match for reverse tunnel requests.
    If not specified, defaults to ``/reverse_connections/request``.
    """

    request_method: "_____config__core__v3__.RequestMethod" = betterproto2.field(
        4,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: _____config__core__v3__.RequestMethod(0),
    )
    """
    HTTP method to match for reverse tunnel requests.
    If not specified (``METHOD_UNSPECIFIED``), this defaults to ``GET``.
    """

    validation: "Validation | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Optional validation configuration for node and cluster identifiers.
    If specified, the filter validates the ``x-envoy-reverse-tunnel-node-id`` and
    ``x-envoy-reverse-tunnel-cluster-id`` headers against expected values extracted
    using format strings. Requests that fail validation are rejected with HTTP ``403 Forbidden``.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.reverse_tunnel.v3", "ReverseTunnel", ReverseTunnel
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Validation(betterproto2.Message):
    """
    [#protodoc-title: Reverse Tunnel Network Filter]
    Reverse Tunnel Network Filter :ref:`configuration overview <config_network_filters_reverse_tunnel>`.
    [#extension: envoy.filters.network.reverse_tunnel]

    Validation configuration for reverse tunnel identifiers.
    Validates the node ID and cluster ID extracted from reverse tunnel handshake headers
    against expected values specified using format strings.
    """

    node_id_format: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Format string to extract the expected node identifier for validation.
    The formatted value is compared against the ``x-envoy-reverse-tunnel-node-id`` header
    from the incoming handshake request. If they do not match, the connection is rejected
    with HTTP ``403 Forbidden``.

    Supports Envoy's :ref:`command operators <config_access_log_command_operators>`:

    * ``%DYNAMIC_METADATA(namespace:key)%``: Extract expected value from dynamic metadata.
    * ``%FILTER_STATE(key)%``: Extract expected value from filter state.
    * ``%DOWNSTREAM_REMOTE_ADDRESS%``: Use downstream connection IP address.
    * Plain strings: Use a static expected value.

    If empty, node ID validation is skipped.

    Example using dynamic metadata allowlist:

    .. code-block:: yaml

       node_id_format: "%DYNAMIC_METADATA(envoy.reverse_tunnel.allowlist:expected_node_id)%"
    """

    cluster_id_format: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Format string to extract the expected cluster identifier for validation.
    The formatted value is compared against the ``x-envoy-reverse-tunnel-cluster-id`` header
    from the incoming handshake request. If they do not match, the connection is rejected
    with HTTP ``403 Forbidden``.

    Supports the same :ref:`command operators <config_access_log_command_operators>` as
    ``node_id_format``.

    If empty, cluster ID validation is skipped.

    Example using filter state:

    .. code-block:: yaml

       cluster_id_format: "%FILTER_STATE(expected_cluster_id)%"
    """

    emit_dynamic_metadata: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    Whether to emit validation results as dynamic metadata.
    When enabled, the filter emits metadata under the namespace specified by
    ``dynamic_metadata_namespace`` containing:

    * ``node_id``: The actual node ID from the handshake request.
    * ``cluster_id``: The actual cluster ID from the handshake request.
    * ``validation_result``: Either ``allowed`` or ``denied``.

    This metadata can be used by subsequent filters or for access logging.
    Defaults to ``false``.
    """

    dynamic_metadata_namespace: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    Namespace for emitted dynamic metadata when ``emit_dynamic_metadata`` is ``true``.
    If not specified, defaults to ``envoy.filters.network.reverse_tunnel``.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.network.reverse_tunnel.v3", "Validation", Validation
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
