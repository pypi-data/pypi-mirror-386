# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/listener/local_ratelimit/v3/local_ratelimit.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("LocalRateLimit",)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LocalRateLimit(betterproto2.Message):
    """
    [#protodoc-title: Local Rate Limit Filter]
    Local rate limit :ref:`configuration overview <config_listener_filters_local_rate_limit>`.
    [#extension: envoy.filters.listener.local_ratelimit]
    """

    stat_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The prefix to use when emitting :ref:`statistics
    <config_listener_filters_local_rate_limit_stats>`.
    """

    token_bucket: "_____type__v3__.TokenBucket | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The token bucket configuration to use for rate limiting all incoming sockets. If the token is available,
    the socket will be allowed. If no tokens are available, the socket will be immediately closed.

    .. note::
      In the current implementation the token bucket's :ref:`fill_interval
      <envoy_v3_api_field_type.v3.TokenBucket.fill_interval>` must be >= 50ms to avoid too aggressive
      refills.
    """

    runtime_enabled: "_____config__core__v3__.RuntimeFeatureFlag | None" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    Runtime flag that controls whether the filter is enabled or not. If not specified, defaults
    to enabled.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.listener.local_ratelimit.v3",
    "LocalRateLimit",
    LocalRateLimit,
)


from ......config.core import v3 as _____config__core__v3__
from ......type import v3 as _____type__v3__
