# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ProxyProtocol",
    "ProxyProtocolKeyValuePair",
    "ProxyProtocolRule",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ProxyProtocol(betterproto2.Message):
    """
    [#protodoc-title: Proxy Protocol Filter]
    PROXY protocol listener filter.
    [#extension: envoy.filters.listener.proxy_protocol]

    [#next-free-field: 6]
    """

    rules: "list[ProxyProtocolRule]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The list of rules to apply to requests.
    """

    allow_requests_without_proxy_protocol: "bool" = betterproto2.field(
        2, betterproto2.TYPE_BOOL
    )
    """
    Allow requests through that don't use proxy protocol. Defaults to false.

    .. attention::

      This breaks conformance with the specification.
      Only enable if ALL traffic to the listener comes from a trusted source.
      For more information on the security implications of this feature, see
      https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt

    .. attention::

      Requests of 12 or fewer bytes that match the proxy protocol v2 signature
      and requests of 6 or fewer bytes that match the proxy protocol v1
      signature will timeout (Envoy is unable to differentiate these requests
      from incomplete proxy protocol requests).
    """

    pass_through_tlvs: "_____config__core__v3__.ProxyProtocolPassThroughTlVs | None" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    This config controls which TLVs can be passed to filter state if it is Proxy Protocol
    V2 header. If there is no setting for this field, no TLVs will be passed through.

    .. note::

      If this is configured, you likely also want to set
      :ref:`core.v3.ProxyProtocolConfig.pass_through_tlvs <envoy_v3_api_field_config.core.v3.ProxyProtocolConfig.pass_through_tlvs>`,
      which controls pass-through for the upstream.
    """

    disallowed_versions: "list[_____config__core__v3__.ProxyProtocolConfigVersion]" = (
        betterproto2.field(4, betterproto2.TYPE_ENUM, repeated=True)
    )
    """
    The PROXY protocol versions that won't be matched. Useful to limit the scope and attack surface of the filter.

    When the filter receives PROXY protocol data that is disallowed, it will reject the connection.
    By default, the filter will match all PROXY protocol versions.
    See https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt for details.

    .. attention::

      When used in conjunction with the :ref:`allow_requests_without_proxy_protocol <envoy_v3_api_field_extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.allow_requests_without_proxy_protocol>`,
      the filter will not attempt to match signatures for the disallowed versions.
      For example, when ``disallowed_versions=V2``, ``allow_requests_without_proxy_protocol=true``,
      and an incoming request matches the V2 signature, the filter will allow the request through without any modification.
      The filter treats this request as if it did not have any PROXY protocol information.
    """

    stat_prefix: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    The human readable prefix to use when emitting statistics for the filter.
    If not configured, statistics will be emitted without the prefix segment.
    See the :ref:`filter's statistics documentation <config_listener_filters_proxy_protocol>` for
    more information.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.listener.proxy_protocol.v3",
    "ProxyProtocol",
    ProxyProtocol,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ProxyProtocolKeyValuePair(betterproto2.Message):
    metadata_namespace: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The namespace â€” if this is empty, the filter's namespace will be used.
    """

    key: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    The key to use within the namespace.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.listener.proxy_protocol.v3",
    "ProxyProtocol.KeyValuePair",
    ProxyProtocolKeyValuePair,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ProxyProtocolRule(betterproto2.Message):
    """
    A Rule defines what metadata to apply when a header is present or missing.
    """

    tlv_type: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(1, betterproto2.TYPE_UINT32)
    )
    """
    The type that triggers the rule - required
    TLV type is defined as uint8_t in proxy protocol. See `the spec
    <https://www.haproxy.org/download/2.1/doc/proxy-protocol.txt>`_ for details.
    """

    on_tlv_present: "ProxyProtocolKeyValuePair | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If the TLV type is present, apply this metadata KeyValuePair.
    """


default_message_pool.register_message(
    "envoy.extensions.filters.listener.proxy_protocol.v3",
    "ProxyProtocol.Rule",
    ProxyProtocolRule,
)


from ......config.core import v3 as _____config__core__v3__
