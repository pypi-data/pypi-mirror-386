# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/load_balancing_policies/common/v3/common.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ConsistentHashingLbConfig",
    "LocalityLbConfig",
    "LocalityLbConfigLocalityWeightedLbConfig",
    "LocalityLbConfigZoneAwareLbConfig",
    "LocalityLbConfigZoneAwareLbConfigForceLocalZone",
    "LocalityLbConfigZoneAwareLbConfigLocalityBasis",
    "SlowStartConfig",
)

import datetime
import warnings

import betterproto2
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from ......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class LocalityLbConfigZoneAwareLbConfigLocalityBasis(betterproto2.Enum):
    """
    Basis for computing per-locality percentages in zone-aware routing.
    """

    HEALTHY_HOSTS_NUM = 0
    """
    Use the number of healthy hosts in each locality.
    """

    HEALTHY_HOSTS_WEIGHT = 1
    """
    Use the weights of healthy hosts in each locality.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ConsistentHashingLbConfig(betterproto2.Message):
    """
    Common Configuration for all consistent hashing load balancers (MaglevLb, RingHashLb, etc.)
    """

    use_hostname_for_hashing: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    If set to ``true``, the cluster will use hostname instead of the resolved
    address as the key to consistently hash to an upstream host. Only valid for StrictDNS clusters with hostnames which resolve to a single IP address.
    """

    hash_balance_factor: "int | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Configures percentage of average cluster load to bound per upstream host. For example, with a value of 150
    no upstream host will get a load more than 1.5 times the average load of all the hosts in the cluster.
    If not specified, the load is not bounded for any upstream host. Typical value for this parameter is between 120 and 200.
    Minimum is 100.

    Applies to both Ring Hash and Maglev load balancers.

    This is implemented based on the method described in the paper https://arxiv.org/abs/1608.01350. For the specified
    ``hash_balance_factor``, requests to any upstream host are capped at ``hash_balance_factor/100`` times the average number of requests
    across the cluster. When a request arrives for an upstream host that is currently serving at its max capacity, linear probing
    is used to identify an eligible host. Further, the linear probe is implemented using a random jump in hosts ring/table to identify
    the eligible host (this technique is as described in the paper https://arxiv.org/abs/1908.08762 - the random jump avoids the
    cascading overflow effect when choosing the next host in the ring/table).

    If weights are specified on the hosts, they are respected.

    This is an O(N) algorithm, unlike other load balancers. Using a lower ``hash_balance_factor`` results in more hosts
    being probed, so use a higher value if you require better performance.
    """

    hash_policy: "list[____config__route__v3__.RouteActionHashPolicy]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
     Specifies a list of hash policies to use for ring hash load balancing. If ``hash_policy`` is
    set, then
    :ref:`route level hash policy <envoy_v3_api_field_config.route.v3.RouteAction.hash_policy>`
    will be ignored.
    """


default_message_pool.register_message(
    "envoy.extensions.load_balancing_policies.common.v3",
    "ConsistentHashingLbConfig",
    ConsistentHashingLbConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LocalityLbConfig(betterproto2.Message):
    """
    [#protodoc-title: Common configuration for two or more load balancing policy extensions]

    Oneofs:
        - locality_config_specifier:
    """

    zone_aware_lb_config: "LocalityLbConfigZoneAwareLbConfig | None" = (
        betterproto2.field(
            1,
            betterproto2.TYPE_MESSAGE,
            optional=True,
            group="locality_config_specifier",
        )
    )
    """
    Configuration for local zone aware load balancing.
    """

    locality_weighted_lb_config: "LocalityLbConfigLocalityWeightedLbConfig | None" = (
        betterproto2.field(
            2,
            betterproto2.TYPE_MESSAGE,
            optional=True,
            group="locality_config_specifier",
        )
    )
    """
    Enable locality weighted load balancing.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.load_balancing_policies.common.v3",
    "LocalityLbConfig",
    LocalityLbConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LocalityLbConfigLocalityWeightedLbConfig(betterproto2.Message):
    """
    Configuration for :ref:`locality weighted load balancing
    <arch_overview_load_balancing_locality_weighted_lb>`
    """

    pass


default_message_pool.register_message(
    "envoy.extensions.load_balancing_policies.common.v3",
    "LocalityLbConfig.LocalityWeightedLbConfig",
    LocalityLbConfigLocalityWeightedLbConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LocalityLbConfigZoneAwareLbConfig(betterproto2.Message):
    """
    Configuration for :ref:`zone aware routing
    <arch_overview_load_balancing_zone_aware_routing>`.
    [#next-free-field: 7]
    """

    routing_enabled: "____type__v3__.Percent | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configures percentage of requests that will be considered for zone aware routing
    if zone aware routing is configured. If not specified, the default is 100%.
    * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
    * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
    """

    min_cluster_size: "int | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.UInt64Value,
        optional=True,
    )
    """
    Configures minimum upstream cluster size required for zone aware routing
    If upstream cluster size is less than specified, zone aware routing is not performed
    even if zone aware routing is configured. If not specified, the default is 6.
    * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
    * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
    """

    fail_traffic_on_panic: "bool" = betterproto2.field(3, betterproto2.TYPE_BOOL)
    """
    If set to true, Envoy will not consider any hosts when the cluster is in :ref:`panic
    mode<arch_overview_load_balancing_panic_threshold>`. Instead, the cluster will fail all
    requests as if all hosts are unhealthy. This can help avoid potentially overwhelming a
    failing service.
    """

    force_locality_direct_routing: "bool" = betterproto2.field(
        4, betterproto2.TYPE_BOOL
    )
    """
    If set to true, Envoy will force LocalityDirect routing if a local locality exists.
    """

    force_local_zone: "LocalityLbConfigZoneAwareLbConfigForceLocalZone | None" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    )

    locality_basis: "LocalityLbConfigZoneAwareLbConfigLocalityBasis" = (
        betterproto2.field(
            6,
            betterproto2.TYPE_ENUM,
            default_factory=lambda: LocalityLbConfigZoneAwareLbConfigLocalityBasis(0),
        )
    )
    """
    Determines how locality percentages are computed:
    - HEALTHY_HOSTS_NUM: proportional to the count of healthy hosts.
    - HEALTHY_HOSTS_WEIGHT: proportional to the weights of healthy hosts.
    Default value is HEALTHY_HOSTS_NUM if unset.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("force_locality_direct_routing"):
            warnings.warn(
                "LocalityLbConfigZoneAwareLbConfig.force_locality_direct_routing is deprecated",
                DeprecationWarning,
            )


default_message_pool.register_message(
    "envoy.extensions.load_balancing_policies.common.v3",
    "LocalityLbConfig.ZoneAwareLbConfig",
    LocalityLbConfigZoneAwareLbConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class LocalityLbConfigZoneAwareLbConfigForceLocalZone(betterproto2.Message):
    """
    Configures Envoy to always route requests to the local zone regardless of the
    upstream zone structure. In Envoy's default configuration, traffic is distributed proportionally
    across all upstream hosts while trying to maximize local routing when possible. The approach
    with force_local_zone aims to be more predictable and if there are upstream hosts in the local
    zone, they will receive all traffic.
    * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
    * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
    """

    min_size: "int | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    Configures the minimum number of upstream hosts in the local zone required when force_local_zone
    is enabled. If the number of upstream hosts in the local zone is less than the specified value,
    Envoy will fall back to the default proportional-based distribution across localities.
    If not specified, the default is 1.
    * :ref:`runtime values <config_cluster_manager_cluster_runtime_zone_routing>`.
    * :ref:`Zone aware routing support <arch_overview_load_balancing_zone_aware_routing>`.
    """


default_message_pool.register_message(
    "envoy.extensions.load_balancing_policies.common.v3",
    "LocalityLbConfig.ZoneAwareLbConfig.ForceLocalZone",
    LocalityLbConfigZoneAwareLbConfigForceLocalZone,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SlowStartConfig(betterproto2.Message):
    """
    Configuration for :ref:`slow start mode <arch_overview_load_balancing_slow_start>`.
    """

    slow_start_window: "datetime.timedelta | None" = betterproto2.field(
        1,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: _____google__protobuf__.Duration,
        optional=True,
    )
    """
    Represents the size of slow start window.
    If set, the newly created host remains in slow start mode starting from its creation time
    for the duration of slow start window.
    """

    aggression: "____config__core__v3__.RuntimeDouble | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    This parameter controls the speed of traffic increase over the slow start window. Defaults to 1.0,
    so that endpoint would get linearly increasing amount of traffic.
    When increasing the value for this parameter, the speed of traffic ramp-up increases non-linearly.
    The value of aggression parameter should be greater than 0.0.
    By tuning the parameter, is possible to achieve polynomial or exponential shape of ramp-up curve.

    During slow start window, effective weight of an endpoint would be scaled with time factor and aggression:
    ``new_weight = weight * max(min_weight_percent, time_factor ^ (1 / aggression))``,
    where ``time_factor=(time_since_start_seconds / slow_start_time_seconds)``.

    As time progresses, more and more traffic would be sent to endpoint, which is in slow start window.
    Once host exits slow start, time_factor and aggression no longer affect its weight.
    """

    min_weight_percent: "____type__v3__.Percent | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Configures the minimum percentage of origin weight that avoids too small new weight,
    which may cause endpoints in slow start mode receive no traffic in slow start window.
    If not specified, the default is 10%.
    """


default_message_pool.register_message(
    "envoy.extensions.load_balancing_policies.common.v3",
    "SlowStartConfig",
    SlowStartConfig,
)


from ......google import protobuf as _____google__protobuf__
from .....config.core import v3 as ____config__core__v3__
from .....config.route import v3 as ____config__route__v3__
from .....type import v3 as ____type__v3__
