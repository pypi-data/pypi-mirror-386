# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/http/original_ip_detection/custom_header/v3/custom_header.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("CustomHeaderConfig",)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CustomHeaderConfig(betterproto2.Message):
    """
    [#protodoc-title: Custom header original IP detection extension]

    This extension allows for the original downstream remote IP to be detected
    by reading the value from a configured header name. If the value is successfully parsed
    as an IP, it'll be treated as the effective downstream remote address and seen as such
    by all filters. See :ref:`original_ip_detection_extensions
    <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.original_ip_detection_extensions>`
    for an overview of how extensions operate and what happens when an extension fails
    to detect the remote IP.

    [#extension: envoy.http.original_ip_detection.custom_header]
    """

    header_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The header name containing the original downstream remote address, if present.

    Note: in the case of a multi-valued header, only the first value is tried and the rest are ignored.
    """

    allow_extension_to_set_address_as_trusted: "bool" = betterproto2.field(
        2, betterproto2.TYPE_BOOL
    )
    """
    If set to true, the extension could decide that the detected address should be treated as
    trusted by the HCM. If the address is considered :ref:`trusted<config_http_conn_man_headers_x-forwarded-for_trusted_client_address>`,
    it might be used as input to determine if the request is internal (among other things).
    """

    reject_with_status: "_____type__v3__.HttpStatus | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    If this is set, the request will be rejected when detection fails using it as the HTTP response status.

    .. note::
      If this is set to < 400 or > 511, the default status 403 will be used instead.
    """


default_message_pool.register_message(
    "envoy.extensions.http.original_ip_detection.custom_header.v3",
    "CustomHeaderConfig",
    CustomHeaderConfig,
)


from ......type import v3 as _____type__v3__
