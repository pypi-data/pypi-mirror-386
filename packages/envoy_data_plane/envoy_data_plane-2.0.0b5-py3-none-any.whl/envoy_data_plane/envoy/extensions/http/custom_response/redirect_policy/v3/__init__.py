# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/http/custom_response/redirect_policy/v3/redirect_policy.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("RedirectPolicy",)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .......message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RedirectPolicy(betterproto2.Message):
    """
    [#protodoc-title: Redirect Policy for Custom Response]
    [#extension: envoy.http.custom_response.redirect_policy]

    Custom response policy to internally redirect the original response to a different
    upstream.
    [#next-free-field: 7]

    Oneofs:
        - redirect_action_specifier:
    """

    uri: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="redirect_action_specifier"
    )
    """
    The Http URI to redirect the original request to, to get the custom
    response.
    It should be a full FQDN with protocol, host and path.

    Example:

    .. code-block:: yaml

       uri: https://www.mydomain.com/path/to/404.txt
    """

    redirect_action: "_____config__route__v3__.RedirectAction | None" = (
        betterproto2.field(
            2,
            betterproto2.TYPE_MESSAGE,
            optional=True,
            group="redirect_action_specifier",
        )
    )
    """
    Specify elements of the redirect url individually.
    Note: Do not specify the ``response_code`` field in ``redirect_action``, use
    ``status_code`` instead.
    The following fields in ``redirect_action`` are currently not supported,
    and specifying them will cause the config to be rejected:
    - ``prefix_rewrite``
    - ``regex_rewrite``
    """

    status_code: "int | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ______google__protobuf__.UInt32Value,
        optional=True,
    )
    """
    The new response status code if specified. This is used to override the
    status code of the response from the new upstream if it is not an error status.
    """

    response_headers_to_add: "list[_____config__core__v3__.HeaderValueOption]" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    HTTP headers to add to the response. This allows the
    response policy to append, to add or to override headers of
    the original response for local body, or the custom response from the
    remote body, before it is sent to a downstream client.
    Note that these are not applied if the redirected response is an error
    response.
    """

    request_headers_to_add: "list[_____config__core__v3__.HeaderValueOption]" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    HTTP headers to add to the request before it is internally redirected.
    """

    modify_request_headers_action: "_____config__core__v3__.TypedExtensionConfig | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Custom action to modify request headers before selection of the
    redirected route.
    [#comment: TODO(pradeepcrao) add an extension category.]
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.extensions.http.custom_response.redirect_policy.v3",
    "RedirectPolicy",
    RedirectPolicy,
)


from .......google import protobuf as ______google__protobuf__
from ......config.core import v3 as _____config__core__v3__
from ......config.route import v3 as _____config__route__v3__
