# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/admin/v2alpha/certs.proto, envoy/admin/v2alpha/clusters.proto, envoy/admin/v2alpha/config_dump.proto, envoy/admin/v2alpha/listeners.proto, envoy/admin/v2alpha/memory.proto, envoy/admin/v2alpha/metrics.proto, envoy/admin/v2alpha/mutex_stats.proto, envoy/admin/v2alpha/server_info.proto, envoy/admin/v2alpha/tap.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "BootstrapConfigDump",
    "Certificate",
    "CertificateDetails",
    "Certificates",
    "ClusterStatus",
    "Clusters",
    "ClustersConfigDump",
    "ClustersConfigDumpDynamicCluster",
    "ClustersConfigDumpStaticCluster",
    "CommandLineOptions",
    "CommandLineOptionsIpVersion",
    "CommandLineOptionsMode",
    "ConfigDump",
    "HostHealthStatus",
    "HostStatus",
    "ListenerStatus",
    "Listeners",
    "ListenersConfigDump",
    "ListenersConfigDumpDynamicListener",
    "ListenersConfigDumpDynamicListenerState",
    "ListenersConfigDumpStaticListener",
    "Memory",
    "MutexStats",
    "RoutesConfigDump",
    "RoutesConfigDumpDynamicRouteConfig",
    "RoutesConfigDumpStaticRouteConfig",
    "ScopedRoutesConfigDump",
    "ScopedRoutesConfigDumpDynamicScopedRouteConfigs",
    "ScopedRoutesConfigDumpInlineScopedRouteConfigs",
    "SecretsConfigDump",
    "SecretsConfigDumpDynamicSecret",
    "SecretsConfigDumpStaticSecret",
    "ServerInfo",
    "ServerInfoState",
    "SimpleMetric",
    "SimpleMetricType",
    "SubjectAlternateName",
    "TapRequest",
    "UpdateFailureState",
)

import datetime
import typing
import warnings

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from ....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class CommandLineOptionsIpVersion(betterproto2.Enum):
    v4 = 0

    v6 = 1


class CommandLineOptionsMode(betterproto2.Enum):
    Serve = 0
    """
    Validate configs and then serve traffic normally.
    """

    Validate = 1
    """
    Validate configs and exit.
    """

    InitOnly = 2
    """
    Completely load and initialize the config, and then exit without running the listener loop.
    """


class ServerInfoState(betterproto2.Enum):
    LIVE = 0
    """
    Server is live and serving traffic.
    """

    DRAINING = 1
    """
    Server is draining listeners in response to external health checks failing.
    """

    PRE_INITIALIZING = 2
    """
    Server has not yet completed cluster manager initialization.
    """

    INITIALIZING = 3
    """
    Server is running the cluster manager initialization callbacks (e.g., RDS).
    """


class SimpleMetricType(betterproto2.Enum):
    COUNTER = 0

    GAUGE = 1


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class BootstrapConfigDump(betterproto2.Message):
    """
    This message describes the bootstrap configuration that Envoy was started with. This includes
    any CLI overrides that were merged. Bootstrap configuration information can be used to recreate
    the static portions of an Envoy configuration by reusing the output as the bootstrap
    configuration for another Envoy.
    """

    bootstrap: "__config__bootstrap__v2__.Bootstrap | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    last_updated: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the BootstrapConfig was last updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "BootstrapConfigDump", BootstrapConfigDump
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Certificate(betterproto2.Message):
    ca_cert: "list[CertificateDetails]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Details of CA certificate.
    """

    cert_chain: "list[CertificateDetails]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Details of Certificate Chain
    """


default_message_pool.register_message("envoy.admin.v2alpha", "Certificate", Certificate)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CertificateDetails(betterproto2.Message):
    """
    [#next-free-field: 7]
    """

    path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Path of the certificate.
    """

    serial_number: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Certificate Serial Number.
    """

    subject_alt_names: "list[SubjectAlternateName]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of Subject Alternate names.
    """

    days_until_expiration: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        4, betterproto2.TYPE_UINT64
    )
    """
    Minimum of days until expiration of certificate and it's chain.
    """

    valid_from: "datetime.datetime | None" = betterproto2.field(
        5,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Indicates the time from which the certificate is valid.
    """

    expiration_time: "datetime.datetime | None" = betterproto2.field(
        6,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Indicates the time at which the certificate expires.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "CertificateDetails", CertificateDetails
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Certificates(betterproto2.Message):
    """
    [#protodoc-title: Certificates]

    Proto representation of certificate details. Admin endpoint uses this wrapper for `/certs` to
    display certificate information. See :ref:`/certs <operations_admin_interface_certs>` for more
    information.
    """

    certificates: "list[Certificate]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of certificates known to an Envoy.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "Certificates", Certificates
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Clusters(betterproto2.Message):
    """
    [#protodoc-title: Clusters]

    Admin endpoint uses this wrapper for `/clusters` to display cluster status information.
    See :ref:`/clusters <operations_admin_interface_clusters>` for more information.
    """

    cluster_statuses: "list[ClusterStatus]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Mapping from cluster name to each cluster's status.
    """


default_message_pool.register_message("envoy.admin.v2alpha", "Clusters", Clusters)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClustersConfigDump(betterproto2.Message):
    """
    Envoy's cluster manager fills this message with all currently known clusters. Cluster
    configuration information can be used to recreate an Envoy configuration by populating all
    clusters as static clusters or by returning them in a CDS response.
    """

    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    This is the :ref:`version_info <envoy_api_field_DiscoveryResponse.version_info>` in the
    last processed CDS discovery response. If there are only static bootstrap clusters, this field
    will be "".
    """

    static_clusters: "list[ClustersConfigDumpStaticCluster]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The statically loaded cluster configs.
    """

    dynamic_active_clusters: "list[ClustersConfigDumpDynamicCluster]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    The dynamically loaded active clusters. These are clusters that are available to service
    data plane traffic.
    """

    dynamic_warming_clusters: "list[ClustersConfigDumpDynamicCluster]" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    The dynamically loaded warming clusters. These are clusters that are currently undergoing
    warming in preparation to service data plane traffic. Note that if attempting to recreate an
    Envoy configuration from a configuration dump, the warming clusters should generally be
    discarded.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "ClustersConfigDump", ClustersConfigDump
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClustersConfigDumpDynamicCluster(betterproto2.Message):
    """
    Describes a dynamically loaded cluster via the CDS API.
    """

    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    This is the per-resource version information. This version is currently taken from the
    :ref:`version_info <envoy_api_field_DiscoveryResponse.version_info>` field at the time
    that the cluster was loaded. In the future, discrete per-cluster versions may be supported by
    the API.
    """

    cluster: "___google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The cluster config.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the Cluster was last updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "ClustersConfigDump.DynamicCluster",
    ClustersConfigDumpDynamicCluster,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClustersConfigDumpStaticCluster(betterproto2.Message):
    """
    Describes a statically loaded cluster.
    """

    cluster: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The cluster config.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the Cluster was last updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "ClustersConfigDump.StaticCluster",
    ClustersConfigDumpStaticCluster,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ClusterStatus(betterproto2.Message):
    """
    Details an individual cluster's current status.
    [#next-free-field: 6]
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Name of the cluster.
    """

    added_via_api: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    Denotes whether this cluster was added via API or configured statically.
    """

    success_rate_ejection_threshold: "__type__.Percent | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The success rate threshold used in the last interval.
    If
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
    is *false*, all errors: externally and locally generated were used to calculate the threshold.
    If
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
    is *true*, only externally generated errors were used to calculate the threshold.
    The threshold is used to eject hosts based on their success rate. See
    :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for details.

    Note: this field may be omitted in any of the three following cases:

    1. There were not enough hosts with enough request volume to proceed with success rate based
       outlier ejection.
    2. The threshold is computed to be < 0 because a negative value implies that there was no
       threshold for that interval.
    3. Outlier detection is not enabled for this cluster.
    """

    host_statuses: "list[HostStatus]" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Mapping from host address to the host's current status.
    """

    local_origin_success_rate_ejection_threshold: "__type__.Percent | None" = (
        betterproto2.field(5, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The success rate threshold used in the last interval when only locally originated failures were
    taken into account and externally originated errors were treated as success.
    This field should be interpreted only when
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
    is *true*. The threshold is used to eject hosts based on their success rate.
    See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
    details.

    Note: this field may be omitted in any of the three following cases:

    1. There were not enough hosts with enough request volume to proceed with success rate based
       outlier ejection.
    2. The threshold is computed to be < 0 because a negative value implies that there was no
       threshold for that interval.
    3. Outlier detection is not enabled for this cluster.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "ClusterStatus", ClusterStatus
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CommandLineOptions(betterproto2.Message):
    """
    [#next-free-field: 29]
    """

    base_id: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(1, betterproto2.TYPE_UINT64)
    )
    """
    See :option:`--base-id` for details.
    """

    concurrency: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(2, betterproto2.TYPE_UINT32)
    )
    """
    See :option:`--concurrency` for details.
    """

    config_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    See :option:`--config-path` for details.
    """

    config_yaml: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    See :option:`--config-yaml` for details.
    """

    allow_unknown_static_fields: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    See :option:`--allow-unknown-static-fields` for details.
    """

    reject_unknown_dynamic_fields: "bool" = betterproto2.field(
        26, betterproto2.TYPE_BOOL
    )
    """
    See :option:`--reject-unknown-dynamic-fields` for details.
    """

    admin_address_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    See :option:`--admin-address-path` for details.
    """

    local_address_ip_version: "CommandLineOptionsIpVersion" = betterproto2.field(
        7,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: CommandLineOptionsIpVersion(0),
    )
    """
    See :option:`--local-address-ip-version` for details.
    """

    log_level: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        8, betterproto2.TYPE_STRING
    )
    """
    See :option:`--log-level` for details.
    """

    component_log_level: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        9, betterproto2.TYPE_STRING
    )
    """
    See :option:`--component-log-level` for details.
    """

    log_format: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        10, betterproto2.TYPE_STRING
    )
    """
    See :option:`--log-format` for details.
    """

    log_format_escaped: "bool" = betterproto2.field(27, betterproto2.TYPE_BOOL)
    """
    See :option:`--log-format-escaped` for details.
    """

    log_path: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        11, betterproto2.TYPE_STRING
    )
    """
    See :option:`--log-path` for details.
    """

    service_cluster: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        13, betterproto2.TYPE_STRING
    )
    """
    See :option:`--service-cluster` for details.
    """

    service_node: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        14, betterproto2.TYPE_STRING
    )
    """
    See :option:`--service-node` for details.
    """

    service_zone: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        15, betterproto2.TYPE_STRING
    )
    """
    See :option:`--service-zone` for details.
    """

    file_flush_interval: "datetime.timedelta | None" = betterproto2.field(
        16,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    See :option:`--file-flush-interval-msec` for details.
    """

    drain_time: "datetime.timedelta | None" = betterproto2.field(
        17,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    See :option:`--drain-time-s` for details.
    """

    parent_shutdown_time: "datetime.timedelta | None" = betterproto2.field(
        18,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    See :option:`--parent-shutdown-time-s` for details.
    """

    mode: "CommandLineOptionsMode" = betterproto2.field(
        19, betterproto2.TYPE_ENUM, default_factory=lambda: CommandLineOptionsMode(0)
    )
    """
    See :option:`--mode` for details.
    """

    max_stats: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(20, betterproto2.TYPE_UINT64)
    )
    """
    max_stats and max_obj_name_len are now unused and have no effect.
    """

    max_obj_name_len: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(21, betterproto2.TYPE_UINT64)
    )

    disable_hot_restart: "bool" = betterproto2.field(22, betterproto2.TYPE_BOOL)
    """
    See :option:`--disable-hot-restart` for details.
    """

    enable_mutex_tracing: "bool" = betterproto2.field(23, betterproto2.TYPE_BOOL)
    """
    See :option:`--enable-mutex-tracing` for details.
    """

    restart_epoch: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(24, betterproto2.TYPE_UINT32)
    )
    """
    See :option:`--restart-epoch` for details.
    """

    cpuset_threads: "bool" = betterproto2.field(25, betterproto2.TYPE_BOOL)
    """
    See :option:`--cpuset-threads` for details.
    """

    disabled_extensions: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        28, betterproto2.TYPE_STRING, repeated=True
    )
    """
    See :option:`--disable-extensions` for details.
    """

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("max_stats"):
            warnings.warn(
                "CommandLineOptions.max_stats is deprecated", DeprecationWarning
            )
        if self.is_set("max_obj_name_len"):
            warnings.warn(
                "CommandLineOptions.max_obj_name_len is deprecated", DeprecationWarning
            )


default_message_pool.register_message(
    "envoy.admin.v2alpha", "CommandLineOptions", CommandLineOptions
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ConfigDump(betterproto2.Message):
    """
    [#protodoc-title: ConfigDump]

    The :ref:`/config_dump <operations_admin_interface_config_dump>` admin endpoint uses this wrapper
    message to maintain and serve arbitrary configuration information from any component in Envoy.
    """

    configs: "list[___google__protobuf__.Any]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    This list is serialized and dumped in its entirety at the
    :ref:`/config_dump <operations_admin_interface_config_dump>` endpoint.

    The following configurations are currently supported and will be dumped in the order given
    below:

    * *bootstrap*: :ref:`BootstrapConfigDump <envoy_api_msg_admin.v2alpha.BootstrapConfigDump>`
    * *clusters*: :ref:`ClustersConfigDump <envoy_api_msg_admin.v2alpha.ClustersConfigDump>`
    * *listeners*: :ref:`ListenersConfigDump <envoy_api_msg_admin.v2alpha.ListenersConfigDump>`
    * *routes*:  :ref:`RoutesConfigDump <envoy_api_msg_admin.v2alpha.RoutesConfigDump>`

    You can filter output with the resource and mask query parameters.
    See :ref:`/config_dump?resource={} <operations_admin_interface_config_dump_by_resource>`,
    :ref:`/config_dump?mask={} <operations_admin_interface_config_dump_by_mask>`,
    or :ref:`/config_dump?resource={},mask={}
    <operations_admin_interface_config_dump_by_resource_and_mask>` for more information.
    """


default_message_pool.register_message("envoy.admin.v2alpha", "ConfigDump", ConfigDump)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HostHealthStatus(betterproto2.Message):
    """
    Health status for a host.
    [#next-free-field: 7]
    """

    failed_active_health_check: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    The host is currently failing active health checks.
    """

    failed_outlier_check: "bool" = betterproto2.field(2, betterproto2.TYPE_BOOL)
    """
    The host is currently considered an outlier and has been ejected.
    """

    failed_active_degraded_check: "bool" = betterproto2.field(4, betterproto2.TYPE_BOOL)
    """
    The host is currently being marked as degraded through active health checking.
    """

    pending_dynamic_removal: "bool" = betterproto2.field(5, betterproto2.TYPE_BOOL)
    """
    The host has been removed from service discovery, but is being stabilized due to active
    health checking.
    """

    pending_active_hc: "bool" = betterproto2.field(6, betterproto2.TYPE_BOOL)
    """
    The host has not yet been health checked.
    """

    eds_health_status: "__api__v2__core__.HealthStatus" = betterproto2.field(
        3,
        betterproto2.TYPE_ENUM,
        default_factory=lambda: __api__v2__core__.HealthStatus(0),
    )
    """
    Health status as reported by EDS. Note: only HEALTHY and UNHEALTHY are currently supported
    here.
    [#comment:TODO(mrice32): pipe through remaining EDS health status possibilities.]
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "HostHealthStatus", HostHealthStatus
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HostStatus(betterproto2.Message):
    """
    Current state of a particular host.
    [#next-free-field: 10]
    """

    address: "__api__v2__core__.Address | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Address of this host.
    """

    stats: "list[SimpleMetric]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of stats specific to this host.
    """

    health_status: "HostHealthStatus | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The host's current health status.
    """

    success_rate: "__type__.Percent | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Request success rate for this host over the last calculated interval.
    If
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
    is *false*, all errors: externally and locally generated were used in success rate
    calculation. If
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
    is *true*, only externally generated errors were used in success rate calculation.
    See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
    details.

    Note: the message will not be present if host did not have enough request volume to calculate
    success rate or the cluster did not have enough hosts to run through success rate outlier
    ejection.
    """

    weight: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(5, betterproto2.TYPE_UINT32)
    )
    """
    The host's weight. If not configured, the value defaults to 1.
    """

    hostname: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        6, betterproto2.TYPE_STRING
    )
    """
    The hostname of the host, if applicable.
    """

    priority: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(7, betterproto2.TYPE_UINT32)
    )
    """
    The host's priority. If not configured, the value defaults to 0 (highest priority).
    """

    local_origin_success_rate: "__type__.Percent | None" = betterproto2.field(
        8, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Request success rate for this host over the last calculated
    interval when only locally originated errors are taken into account and externally originated
    errors were treated as success.
    This field should be interpreted only when
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_api_field_cluster.OutlierDetection.split_external_local_origin_errors>`
    is *true*.
    See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
    details.

    Note: the message will not be present if host did not have enough request volume to calculate
    success rate or the cluster did not have enough hosts to run through success rate outlier
    ejection.
    """

    locality: "__api__v2__core__.Locality | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    locality of the host.
    """


default_message_pool.register_message("envoy.admin.v2alpha", "HostStatus", HostStatus)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Listeners(betterproto2.Message):
    """
    [#protodoc-title: Listeners]

    Admin endpoint uses this wrapper for `/listeners` to display listener status information.
    See :ref:`/listeners <operations_admin_interface_listeners>` for more information.
    """

    listener_statuses: "list[ListenerStatus]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    List of listener statuses.
    """


default_message_pool.register_message("envoy.admin.v2alpha", "Listeners", Listeners)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ListenersConfigDump(betterproto2.Message):
    """
    Envoy's listener manager fills this message with all currently known listeners. Listener
    configuration information can be used to recreate an Envoy configuration by populating all
    listeners as static listeners or by returning them in a LDS response.
    """

    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    This is the :ref:`version_info <envoy_api_field_DiscoveryResponse.version_info>` in the
    last processed LDS discovery response. If there are only static bootstrap listeners, this field
    will be "".
    """

    static_listeners: "list[ListenersConfigDumpStaticListener]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The statically loaded listener configs.
    """

    dynamic_listeners: "list[ListenersConfigDumpDynamicListener]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    State for any warming, active, or draining listeners.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "ListenersConfigDump", ListenersConfigDump
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ListenersConfigDumpDynamicListener(betterproto2.Message):
    """
    Describes a dynamically loaded listener via the LDS API.
    [#next-free-field: 6]
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name or unique id of this listener, pulled from the DynamicListenerState config.
    """

    active_state: "ListenersConfigDumpDynamicListenerState | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The listener state for any active listener by this name.
    These are listeners that are available to service data plane traffic.
    """

    warming_state: "ListenersConfigDumpDynamicListenerState | None" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The listener state for any warming listener by this name.
    These are listeners that are currently undergoing warming in preparation to service data
    plane traffic. Note that if attempting to recreate an Envoy configuration from a
    configuration dump, the warming listeners should generally be discarded.
    """

    draining_state: "ListenersConfigDumpDynamicListenerState | None" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True)
    )
    """
    The listener state for any draining listener by this name.
    These are listeners that are currently undergoing draining in preparation to stop servicing
    data plane traffic. Note that if attempting to recreate an Envoy configuration from a
    configuration dump, the draining listeners should generally be discarded.
    """

    error_state: "UpdateFailureState | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Set if the last update failed, cleared after the next successful update.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "ListenersConfigDump.DynamicListener",
    ListenersConfigDumpDynamicListener,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ListenersConfigDumpDynamicListenerState(betterproto2.Message):
    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    This is the per-resource version information. This version is currently taken from the
    :ref:`version_info <envoy_api_field_DiscoveryResponse.version_info>` field at the time
    that the listener was loaded. In the future, discrete per-listener versions may be supported
    by the API.
    """

    listener: "___google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The listener config.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the Listener was last successfully updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "ListenersConfigDump.DynamicListenerState",
    ListenersConfigDumpDynamicListenerState,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ListenersConfigDumpStaticListener(betterproto2.Message):
    """
    Describes a statically loaded listener.
    """

    listener: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The listener config.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the Listener was last successfully updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "ListenersConfigDump.StaticListener",
    ListenersConfigDumpStaticListener,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ListenerStatus(betterproto2.Message):
    """
    Details an individual listener's current status.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Name of the listener
    """

    local_address: "__api__v2__core__.Address | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The actual local address that the listener is listening on. If a listener was configured
    to listen on port 0, then this address has the port that was allocated by the OS.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "ListenerStatus", ListenerStatus
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Memory(betterproto2.Message):
    """
    [#protodoc-title: Memory]

    Proto representation of the internal memory consumption of an Envoy instance. These represent
    values extracted from an internal TCMalloc instance. For more information, see the section of the
    docs entitled ["Generic Tcmalloc Status"](https://gperftools.github.io/gperftools/tcmalloc.html).
    [#next-free-field: 7]
    """

    allocated: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(1, betterproto2.TYPE_UINT64)
    )
    """
    The number of bytes allocated by the heap for Envoy. This is an alias for
    `generic.current_allocated_bytes`.
    """

    heap_size: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(2, betterproto2.TYPE_UINT64)
    )
    """
    The number of bytes reserved by the heap but not necessarily allocated. This is an alias for
    `generic.heap_size`.
    """

    pageheap_unmapped: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(3, betterproto2.TYPE_UINT64)
    )
    """
    The number of bytes in free, unmapped pages in the page heap. These bytes always count towards
    virtual memory usage, and depending on the OS, typically do not count towards physical memory
    usage. This is an alias for `tcmalloc.pageheap_unmapped_bytes`.
    """

    pageheap_free: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(4, betterproto2.TYPE_UINT64)
    )
    """
    The number of bytes in free, mapped pages in the page heap. These bytes always count towards
    virtual memory usage, and unless the underlying memory is swapped out by the OS, they also
    count towards physical memory usage. This is an alias for `tcmalloc.pageheap_free_bytes`.
    """

    total_thread_cache: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(5, betterproto2.TYPE_UINT64)
    )
    """
    The amount of memory used by the TCMalloc thread caches (for small objects). This is an alias
    for `tcmalloc.current_total_thread_cache_bytes`.
    """

    total_physical_bytes: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        6, betterproto2.TYPE_UINT64
    )
    """
    The number of bytes of the physical memory usage by the allocator. This is an alias for
    `generic.total_physical_bytes`.
    """


default_message_pool.register_message("envoy.admin.v2alpha", "Memory", Memory)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class MutexStats(betterproto2.Message):
    """
    [#protodoc-title: MutexStats]

    Proto representation of the statistics collected upon absl::Mutex contention, if Envoy is run
    under :option:`--enable-mutex-tracing`. For more information, see the `absl::Mutex`
    [docs](https://abseil.io/about/design/mutex#extra-features).

    *NB*: The wait cycles below are measured by `absl::base_internal::CycleClock`, and may not
    correspond to core clock frequency. For more information, see the `CycleClock`
    [docs](https://github.com/abseil/abseil-cpp/blob/master/absl/base/internal/cycleclock.h).
    """

    num_contentions: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(1, betterproto2.TYPE_UINT64)
    )
    """
    The number of individual mutex contentions which have occurred since startup.
    """

    current_wait_cycles: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(2, betterproto2.TYPE_UINT64)
    )
    """
    The length of the current contention wait cycle.
    """

    lifetime_wait_cycles: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(
        3, betterproto2.TYPE_UINT64
    )
    """
    The lifetime total of all contention wait cycles.
    """


default_message_pool.register_message("envoy.admin.v2alpha", "MutexStats", MutexStats)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RoutesConfigDump(betterproto2.Message):
    """
    Envoy's RDS implementation fills this message with all currently loaded routes, as described by
    their RouteConfiguration objects. Static routes that are either defined in the bootstrap configuration
    or defined inline while configuring listeners are separated from those configured dynamically via RDS.
    Route configuration information can be used to recreate an Envoy configuration by populating all routes
    as static routes or by returning them in RDS responses.
    """

    static_route_configs: "list[RoutesConfigDumpStaticRouteConfig]" = (
        betterproto2.field(2, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    The statically loaded route configs.
    """

    dynamic_route_configs: "list[RoutesConfigDumpDynamicRouteConfig]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    The dynamically loaded route configs.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "RoutesConfigDump", RoutesConfigDump
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RoutesConfigDumpDynamicRouteConfig(betterproto2.Message):
    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    This is the per-resource version information. This version is currently taken from the
    :ref:`version_info <envoy_api_field_DiscoveryResponse.version_info>` field at the time that
    the route configuration was loaded.
    """

    route_config: "___google__protobuf__.Any | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The route config.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the Route was last updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "RoutesConfigDump.DynamicRouteConfig",
    RoutesConfigDumpDynamicRouteConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RoutesConfigDumpStaticRouteConfig(betterproto2.Message):
    route_config: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The route config.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the Route was last updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "RoutesConfigDump.StaticRouteConfig",
    RoutesConfigDumpStaticRouteConfig,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ScopedRoutesConfigDump(betterproto2.Message):
    """
    Envoy's scoped RDS implementation fills this message with all currently loaded route
    configuration scopes (defined via ScopedRouteConfigurationsSet protos). This message lists both
    the scopes defined inline with the higher order object (i.e., the HttpConnectionManager) and the
    dynamically obtained scopes via the SRDS API.
    """

    inline_scoped_route_configs: "list[ScopedRoutesConfigDumpInlineScopedRouteConfigs]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The statically loaded scoped route configs.
    """

    dynamic_scoped_route_configs: "list[ScopedRoutesConfigDumpDynamicScopedRouteConfigs]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The dynamically loaded scoped route configs.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "ScopedRoutesConfigDump", ScopedRoutesConfigDump
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ScopedRoutesConfigDumpDynamicScopedRouteConfigs(betterproto2.Message):
    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name assigned to the scoped route configurations.
    """

    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    This is the per-resource version information. This version is currently taken from the
    :ref:`version_info <envoy_api_field_DiscoveryResponse.version_info>` field at the time that
    the scoped routes configuration was loaded.
    """

    scoped_route_configs: "list[___google__protobuf__.Any]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The scoped route configurations.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the scoped route config set was last updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "ScopedRoutesConfigDump.DynamicScopedRouteConfigs",
    ScopedRoutesConfigDumpDynamicScopedRouteConfigs,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ScopedRoutesConfigDumpInlineScopedRouteConfigs(betterproto2.Message):
    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name assigned to the scoped route configurations.
    """

    scoped_route_configs: "list[___google__protobuf__.Any]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The scoped route configurations.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the scoped route config set was last updated.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "ScopedRoutesConfigDump.InlineScopedRouteConfigs",
    ScopedRoutesConfigDumpInlineScopedRouteConfigs,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SecretsConfigDump(betterproto2.Message):
    """
    Envoys SDS implementation fills this message with all secrets fetched dynamically via SDS.
    """

    static_secrets: "list[SecretsConfigDumpStaticSecret]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The statically loaded secrets.
    """

    dynamic_active_secrets: "list[SecretsConfigDumpDynamicSecret]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    The dynamically loaded active secrets. These are secrets that are available to service
    clusters or listeners.
    """

    dynamic_warming_secrets: "list[SecretsConfigDumpDynamicSecret]" = (
        betterproto2.field(3, betterproto2.TYPE_MESSAGE, repeated=True)
    )
    """
    The dynamically loaded warming secrets. These are secrets that are currently undergoing
    warming in preparation to service clusters or listeners.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "SecretsConfigDump", SecretsConfigDump
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SecretsConfigDumpDynamicSecret(betterproto2.Message):
    """
    DynamicSecret contains secret information fetched via SDS.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name assigned to the secret.
    """

    version_info: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    This is the per-resource version information.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the secret was last updated.
    """

    secret: "___google__protobuf__.Any | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The actual secret information.
    Security sensitive information is redacted (replaced with "[redacted]") for
    private keys and passwords in TLS certificates.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "SecretsConfigDump.DynamicSecret",
    SecretsConfigDumpDynamicSecret,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SecretsConfigDumpStaticSecret(betterproto2.Message):
    """
    StaticSecret specifies statically loaded secret in bootstrap.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The name assigned to the secret.
    """

    last_updated: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    The timestamp when the secret was last updated.
    """

    secret: "___google__protobuf__.Any | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The actual secret information.
    Security sensitive information is redacted (replaced with "[redacted]") for
    private keys and passwords in TLS certificates.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha",
    "SecretsConfigDump.StaticSecret",
    SecretsConfigDumpStaticSecret,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ServerInfo(betterproto2.Message):
    """
    [#protodoc-title: Server State]

    Proto representation of the value returned by /server_info, containing
    server version/server status information.
    [#next-free-field: 7]
    """

    version: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Server version.
    """

    state: "ServerInfoState" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: ServerInfoState(0)
    )
    """
    State of the server.
    """

    uptime_current_epoch: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    Uptime since current epoch was started.
    """

    uptime_all_epochs: "datetime.timedelta | None" = betterproto2.field(
        4,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Duration,
        optional=True,
    )
    """
    Uptime since the start of the first epoch.
    """

    hot_restart_version: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    Hot restart version.
    """

    command_line_options: "CommandLineOptions | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Command line options the server is currently running with.
    """


default_message_pool.register_message("envoy.admin.v2alpha", "ServerInfo", ServerInfo)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SimpleMetric(betterproto2.Message):
    """
    [#protodoc-title: Metrics]

    Proto representation of an Envoy Counter or Gauge value.
    """

    type: "SimpleMetricType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: SimpleMetricType(0)
    )
    """
    Type of the metric represented.
    """

    value: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(2, betterproto2.TYPE_UINT64)
    )
    """
    Current metric value.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Name of the metric.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "SimpleMetric", SimpleMetric
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SubjectAlternateName(betterproto2.Message):
    """


    Oneofs:
        - name: Subject Alternate Name.
    """

    dns: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        1, betterproto2.TYPE_STRING, optional=True, group="name"
    )

    uri: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        2, betterproto2.TYPE_STRING, optional=True, group="name"
    )

    ip_address: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = betterproto2.field(
        3, betterproto2.TYPE_STRING, optional=True, group="name"
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.admin.v2alpha", "SubjectAlternateName", SubjectAlternateName
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class TapRequest(betterproto2.Message):
    """
    [#protodoc-title: Tap]

    The /tap admin request body that is used to configure an active tap session.
    """

    config_id: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The opaque configuration ID used to match the configuration to a loaded extension.
    A tap extension configures a similar opaque ID that is used to match.
    """

    tap_config: "__service__tap__v2alpha__.TapConfig | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The tap configuration to load.
    """


default_message_pool.register_message("envoy.admin.v2alpha", "TapRequest", TapRequest)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class UpdateFailureState(betterproto2.Message):
    failed_configuration: "___google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    What the component configuration would have been if the update had succeeded.
    """

    last_update_attempt: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ___google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Time of the latest failed update attempt.
    """

    details: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    Details about the last failed update attempt.
    """


default_message_pool.register_message(
    "envoy.admin.v2alpha", "UpdateFailureState", UpdateFailureState
)


from ....google import protobuf as ___google__protobuf__
from ... import type as __type__
from ...api.v2 import core as __api__v2__core__
from ...config.bootstrap import v2 as __config__bootstrap__v2__
from ...service.tap import v2alpha as __service__tap__v2alpha__
