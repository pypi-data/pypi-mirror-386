# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/data/cluster/v3/outlier_detection_event.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Action",
    "OutlierDetectionEvent",
    "OutlierEjectConsecutive",
    "OutlierEjectFailurePercentage",
    "OutlierEjectSuccessRate",
    "OutlierEjectionType",
)

import datetime
import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class Action(betterproto2.Enum):
    """
    Represents possible action applied to upstream host
    """

    EJECT = 0
    """
    In case host was excluded from service
    """

    UNEJECT = 1
    """
    In case host was brought back into service
    """


class OutlierEjectionType(betterproto2.Enum):
    """
    [#protodoc-title: Outlier detection logging events]
    :ref:`Outlier detection logging <arch_overview_outlier_detection_logging>`.

    Type of ejection that took place
    """

    CONSECUTIVE_5XX = 0
    """
    In case upstream host returns certain number of consecutive 5xx.
    If
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
    is ``false``, all type of errors are treated as HTTP 5xx errors.
    See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
    details.
    """

    CONSECUTIVE_GATEWAY_FAILURE = 1
    """
    In case upstream host returns certain number of consecutive gateway errors
    """

    SUCCESS_RATE = 2
    """
    Runs over aggregated success rate statistics from every host in cluster
    and selects hosts for which ratio of successful replies deviates from other hosts
    in the cluster.
    If
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
    is ``false``, all errors (externally and locally generated) are used to calculate success rate
    statistics. See :ref:`Cluster outlier detection <arch_overview_outlier_detection>`
    documentation for details.
    """

    CONSECUTIVE_LOCAL_ORIGIN_FAILURE = 3
    """
    Consecutive local origin failures: Connection failures, resets, timeouts, etc
    This type of ejection happens only when
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
    is set to ``true``.
    See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
    """

    SUCCESS_RATE_LOCAL_ORIGIN = 4
    """
    Runs over aggregated success rate statistics for local origin failures
    for all hosts in the cluster and selects hosts for which success rate deviates from other
    hosts in the cluster. This type of ejection happens only when
    :ref:`outlier_detection.split_external_local_origin_errors<envoy_v3_api_field_config.cluster.v3.OutlierDetection.split_external_local_origin_errors>`
    is set to ``true``.
    See :ref:`Cluster outlier detection <arch_overview_outlier_detection>` documentation for
    """

    FAILURE_PERCENTAGE = 5
    """
    Runs over aggregated success rate statistics from every host in cluster and selects hosts for
    which ratio of failed replies is above configured value.
    """

    FAILURE_PERCENTAGE_LOCAL_ORIGIN = 6
    """
    Runs over aggregated success rate statistics for local origin failures from every host in
    cluster and selects hosts for which ratio of failed replies is above configured value.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class OutlierDetectionEvent(betterproto2.Message):
    """
    [#next-free-field: 12]

    Oneofs:
        - event:
    """

    type: "OutlierEjectionType" = betterproto2.field(
        1, betterproto2.TYPE_ENUM, default_factory=lambda: OutlierEjectionType(0)
    )
    """
    In case of eject represents type of ejection that took place.
    """

    timestamp: "datetime.datetime | None" = betterproto2.field(
        2,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Timestamp,
        optional=True,
    )
    """
    Timestamp for event.
    """

    secs_since_last_action: "int | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.UInt64Value,
        optional=True,
    )
    """
    The time in seconds since the last action (either an ejection or unejection) took place.
    """

    cluster_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        4, betterproto2.TYPE_STRING
    )
    """
    The :ref:`cluster <envoy_v3_api_msg_config.cluster.v3.Cluster>` that owns the ejected host.
    """

    upstream_url: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )
    """
    The URL of the ejected host. E.g., ``tcp://1.2.3.4:80``.
    """

    action: "Action" = betterproto2.field(
        6, betterproto2.TYPE_ENUM, default_factory=lambda: Action(0)
    )
    """
    The action that took place.
    """

    num_ejections: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(7, betterproto2.TYPE_UINT32)
    )
    """
    If ``action`` is ``eject``, specifies the number of times the host has been ejected (local to
    that Envoy and gets reset if the host gets removed from the upstream cluster for any reason and
    then re-added).
    """

    enforced: "bool" = betterproto2.field(8, betterproto2.TYPE_BOOL)
    """
    If ``action`` is ``eject``, specifies if the ejection was enforced. ``true`` means the host was
    ejected. ``false`` means the event was logged but the host was not actually ejected.
    """

    eject_success_rate_event: "OutlierEjectSuccessRate | None" = betterproto2.field(
        9, betterproto2.TYPE_MESSAGE, optional=True, group="event"
    )

    eject_consecutive_event: "OutlierEjectConsecutive | None" = betterproto2.field(
        10, betterproto2.TYPE_MESSAGE, optional=True, group="event"
    )

    eject_failure_percentage_event: "OutlierEjectFailurePercentage | None" = (
        betterproto2.field(11, betterproto2.TYPE_MESSAGE, optional=True, group="event")
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.data.cluster.v3", "OutlierDetectionEvent", OutlierDetectionEvent
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class OutlierEjectConsecutive(betterproto2.Message):
    pass


default_message_pool.register_message(
    "envoy.data.cluster.v3", "OutlierEjectConsecutive", OutlierEjectConsecutive
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class OutlierEjectFailurePercentage(betterproto2.Message):
    host_success_rate: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(1, betterproto2.TYPE_UINT32)
    )
    """
    Host's success rate at the time of the ejection event on a 0-100 range.
    """


default_message_pool.register_message(
    "envoy.data.cluster.v3",
    "OutlierEjectFailurePercentage",
    OutlierEjectFailurePercentage,
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class OutlierEjectSuccessRate(betterproto2.Message):
    host_success_rate: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = (
        betterproto2.field(1, betterproto2.TYPE_UINT32)
    )
    """
    Hostâ€™s success rate at the time of the ejection event on a 0-100 range.
    """

    cluster_average_success_rate: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        2, betterproto2.TYPE_UINT32
    )
    """
    Average success rate of the hosts in the cluster at the time of the ejection event on a 0-100
    range.
    """

    cluster_success_rate_ejection_threshold: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        3, betterproto2.TYPE_UINT32
    )
    """
    Success rate ejection threshold at the time of the ejection event.
    """


default_message_pool.register_message(
    "envoy.data.cluster.v3", "OutlierEjectSuccessRate", OutlierEjectSuccessRate
)


from .....google import protobuf as ____google__protobuf__
