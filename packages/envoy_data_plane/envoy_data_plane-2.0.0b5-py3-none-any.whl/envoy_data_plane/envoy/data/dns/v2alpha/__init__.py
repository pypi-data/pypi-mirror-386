# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/data/dns/v2alpha/dns_table.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "DnsTable",
    "DnsTableAddressList",
    "DnsTableDnsEndpoint",
    "DnsTableDnsVirtualDomain",
)

import datetime
import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DnsTable(betterproto2.Message):
    """
    [#protodoc-title: DNS Filter Table Data]
    :ref:`DNS Filter config overview <config_udp_listener_filters_dns_filter>`.

    This message contains the configuration for the DNS Filter if populated
    from the control plane
    """

    external_retry_count: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(
        1, betterproto2.TYPE_UINT32
    )
    """
    Control how many times envoy makes an attempt to forward a query to
    an external server
    """

    virtual_domains: "list[DnsTableDnsVirtualDomain]" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    Fully qualified domain names for which Envoy will respond to queries
    """

    known_suffixes: "list[___type__matcher__.StringMatcher]" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, repeated=True
    )
    """
    This field serves to help Envoy determine whether it can authoritatively
    answer a query for a name matching a suffix in this list. If the query
    name does not match a suffix in this list, Envoy will forward
    the query to an upstream DNS server
    """


default_message_pool.register_message("envoy.data.dns.v2alpha", "DnsTable", DnsTable)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DnsTableAddressList(betterproto2.Message):
    """
    This message contains a list of IP addresses returned for a query for a known name
    """

    address: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    This field contains a well formed IP address that is returned
    in the answer for a name query. The address field can be an
    IPv4 or IPv6 address. Address family detection is done automatically
    when Envoy parses the string. Since this field is repeated,
    Envoy will return one randomly chosen entry from this list in the
    DNS response. The random index will vary per query so that we prevent
    clients pinning on a single address for a configured domain
    """


default_message_pool.register_message(
    "envoy.data.dns.v2alpha", "DnsTable.AddressList", DnsTableAddressList
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DnsTableDnsEndpoint(betterproto2.Message):
    """
    This message type is extensible and can contain a list of addresses
    or dictate some other method for resolving the addresses for an
    endpoint

    Oneofs:
        - endpoint_config:
    """

    address_list: "DnsTableAddressList | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True, group="endpoint_config"
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message(
    "envoy.data.dns.v2alpha", "DnsTable.DnsEndpoint", DnsTableDnsEndpoint
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DnsTableDnsVirtualDomain(betterproto2.Message):
    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    The domain name for which Envoy will respond to query requests
    """

    endpoint: "DnsTableDnsEndpoint | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The configuration containing the method to determine the address
    of this endpoint
    """

    answer_ttl: "datetime.timedelta | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: ____google__protobuf__.Duration,
        optional=True,
    )
    """
    Sets the TTL in dns answers from Envoy returned to the client
    """


default_message_pool.register_message(
    "envoy.data.dns.v2alpha", "DnsTable.DnsVirtualDomain", DnsTableDnsVirtualDomain
)


from .....google import protobuf as ____google__protobuf__
from ....type import matcher as ___type__matcher__
