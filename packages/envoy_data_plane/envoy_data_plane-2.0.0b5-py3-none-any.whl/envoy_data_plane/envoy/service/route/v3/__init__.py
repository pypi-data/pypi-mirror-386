# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/route/v3/rds.proto, envoy/service/route/v3/srds.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "RdsDummy",
    "RouteDiscoveryServiceAsyncStub",
    "RouteDiscoveryServiceBase",
    "RouteDiscoveryServiceSyncStub",
    "ScopedRoutesDiscoveryServiceAsyncStub",
    "ScopedRoutesDiscoveryServiceBase",
    "ScopedRoutesDiscoveryServiceSyncStub",
    "SrdsDummy",
    "VirtualHostDiscoveryServiceAsyncStub",
    "VirtualHostDiscoveryServiceBase",
    "VirtualHostDiscoveryServiceSyncStub",
)

from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2 import grpclib as betterproto2_grpclib
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RdsDummy(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
    services: https://github.com/google/protobuf/issues/4221 and protoxform to upgrade the file.
    """

    pass


default_message_pool.register_message("envoy.service.route.v3", "RdsDummy", RdsDummy)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SrdsDummy(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue with importing
    services: https://github.com/google/protobuf/issues/4221 and protoxform to upgrade the file.
    """

    pass


default_message_pool.register_message("envoy.service.route.v3", "SrdsDummy", SrdsDummy)


class RouteDiscoveryServiceSyncStub:
    """
    [#protodoc-title: RDS]

    The resource_names field in DiscoveryRequest specifies a route configuration.
    This allows an Envoy configuration with multiple HTTP listeners (and
    associated HTTP connection manager filters) to use different route
    configurations. Each listener will bind its HTTP connection manager filter to
    a route table via this identifier.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_routes(
        self, messages: "Iterable[__discovery__v3__.DiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.route.v3.RouteDiscoveryService/StreamRoutes",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(iter(messages))

    def delta_routes(
        self, messages: "Iterable[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DeltaDiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.route.v3.RouteDiscoveryService/DeltaRoutes",
            __discovery__v3__.DeltaDiscoveryRequest.SerializeToString,
            __discovery__v3__.DeltaDiscoveryResponse.FromString,
        )(iter(messages))

    def fetch_routes(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        return self._channel.unary_unary(
            "/envoy.service.route.v3.RouteDiscoveryService/FetchRoutes",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(message)


class RouteDiscoveryServiceAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: RDS]

    The resource_names field in DiscoveryRequest specifies a route configuration.
    This allows an Envoy configuration with multiple HTTP listeners (and
    associated HTTP connection manager filters) to use different route
    configurations. Each listener will bind its HTTP connection manager filter to
    a route table via this identifier.
    """

    async def stream_routes(
        self,
        messages: "AsyncIterable[__discovery__v3__.DiscoveryRequest] | Iterable[__discovery__v3__.DiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.route.v3.RouteDiscoveryService/StreamRoutes",
            messages,
            __discovery__v3__.DiscoveryRequest,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def delta_routes(
        self,
        messages: "AsyncIterable[__discovery__v3__.DeltaDiscoveryRequest] | Iterable[__discovery__v3__.DeltaDiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.route.v3.RouteDiscoveryService/DeltaRoutes",
            messages,
            __discovery__v3__.DeltaDiscoveryRequest,
            __discovery__v3__.DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def fetch_routes(
        self,
        message: "__discovery__v3__.DiscoveryRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "__discovery__v3__.DiscoveryResponse":
        return await self._unary_unary(
            "/envoy.service.route.v3.RouteDiscoveryService/FetchRoutes",
            message,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ScopedRoutesDiscoveryServiceSyncStub:
    """
    [#protodoc-title: SRDS]
    * Routing :ref:`architecture overview <arch_overview_http_routing>`

    The Scoped Routes Discovery Service (SRDS) API distributes
    :ref:`ScopedRouteConfiguration<envoy_v3_api_msg.ScopedRouteConfiguration>`
    resources. Each ScopedRouteConfiguration resource represents a "routing
    scope" containing a mapping that allows the HTTP connection manager to
    dynamically assign a routing table (specified via a
    :ref:`RouteConfiguration<envoy_v3_api_msg_config.route.v3.RouteConfiguration>` message) to each
    HTTP request.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_scoped_routes(
        self, messages: "Iterable[__discovery__v3__.DiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/StreamScopedRoutes",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(iter(messages))

    def delta_scoped_routes(
        self, messages: "Iterable[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DeltaDiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/DeltaScopedRoutes",
            __discovery__v3__.DeltaDiscoveryRequest.SerializeToString,
            __discovery__v3__.DeltaDiscoveryResponse.FromString,
        )(iter(messages))

    def fetch_scoped_routes(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        return self._channel.unary_unary(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/FetchScopedRoutes",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(message)


class ScopedRoutesDiscoveryServiceAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: SRDS]
    * Routing :ref:`architecture overview <arch_overview_http_routing>`

    The Scoped Routes Discovery Service (SRDS) API distributes
    :ref:`ScopedRouteConfiguration<envoy_v3_api_msg.ScopedRouteConfiguration>`
    resources. Each ScopedRouteConfiguration resource represents a "routing
    scope" containing a mapping that allows the HTTP connection manager to
    dynamically assign a routing table (specified via a
    :ref:`RouteConfiguration<envoy_v3_api_msg_config.route.v3.RouteConfiguration>` message) to each
    HTTP request.
    """

    async def stream_scoped_routes(
        self,
        messages: "AsyncIterable[__discovery__v3__.DiscoveryRequest] | Iterable[__discovery__v3__.DiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/StreamScopedRoutes",
            messages,
            __discovery__v3__.DiscoveryRequest,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def delta_scoped_routes(
        self,
        messages: "AsyncIterable[__discovery__v3__.DeltaDiscoveryRequest] | Iterable[__discovery__v3__.DeltaDiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/DeltaScopedRoutes",
            messages,
            __discovery__v3__.DeltaDiscoveryRequest,
            __discovery__v3__.DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def fetch_scoped_routes(
        self,
        message: "__discovery__v3__.DiscoveryRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "__discovery__v3__.DiscoveryResponse":
        return await self._unary_unary(
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/FetchScopedRoutes",
            message,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class VirtualHostDiscoveryServiceSyncStub:
    """
    Virtual Host Discovery Service (VHDS) is used to dynamically update the list of virtual hosts for
    a given RouteConfiguration. If VHDS is configured a virtual host list update will be triggered
    during the processing of an HTTP request if a route for the request cannot be resolved. The
    :ref:`resource_names_subscribe <envoy_v3_api_field_service.discovery.v3.DeltaDiscoveryRequest.resource_names_subscribe>`
    field contains a list of virtual host names or aliases to track. The contents of an alias would
    be the contents of a ``host`` or ``authority`` header used to make an http request. An xDS server
    will match an alias to a virtual host based on the content of :ref:`domains'
    <envoy_v3_api_field_config.route.v3.VirtualHost.domains>` field. The ``resource_names_unsubscribe`` field
    contains a list of virtual host names that have been :ref:`unsubscribed
    <xds_protocol_unsubscribe>` from the routing table associated with the RouteConfiguration.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def delta_virtual_hosts(
        self, messages: "Iterable[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DeltaDiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.route.v3.VirtualHostDiscoveryService/DeltaVirtualHosts",
            __discovery__v3__.DeltaDiscoveryRequest.SerializeToString,
            __discovery__v3__.DeltaDiscoveryResponse.FromString,
        )(iter(messages))


class VirtualHostDiscoveryServiceAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    Virtual Host Discovery Service (VHDS) is used to dynamically update the list of virtual hosts for
    a given RouteConfiguration. If VHDS is configured a virtual host list update will be triggered
    during the processing of an HTTP request if a route for the request cannot be resolved. The
    :ref:`resource_names_subscribe <envoy_v3_api_field_service.discovery.v3.DeltaDiscoveryRequest.resource_names_subscribe>`
    field contains a list of virtual host names or aliases to track. The contents of an alias would
    be the contents of a ``host`` or ``authority`` header used to make an http request. An xDS server
    will match an alias to a virtual host based on the content of :ref:`domains'
    <envoy_v3_api_field_config.route.v3.VirtualHost.domains>` field. The ``resource_names_unsubscribe`` field
    contains a list of virtual host names that have been :ref:`unsubscribed
    <xds_protocol_unsubscribe>` from the routing table associated with the RouteConfiguration.
    """

    async def delta_virtual_hosts(
        self,
        messages: "AsyncIterable[__discovery__v3__.DeltaDiscoveryRequest] | Iterable[__discovery__v3__.DeltaDiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.route.v3.VirtualHostDiscoveryService/DeltaVirtualHosts",
            messages,
            __discovery__v3__.DeltaDiscoveryRequest,
            __discovery__v3__.DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


from ...discovery import v3 as __discovery__v3__


class RouteDiscoveryServiceBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: RDS]

    The resource_names field in DiscoveryRequest specifies a route configuration.
    This allows an Envoy configuration with multiple HTTP listeners (and
    associated HTTP connection manager filters) to use different route
    configurations. Each listener will bind its HTTP connection manager filter to
    a route table via this identifier.
    """

    async def stream_routes(
        self, messages: "AsyncIterator[__discovery__v3__.DiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DiscoveryResponse()

    async def delta_routes(
        self, messages: "AsyncIterator[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DeltaDiscoveryResponse()

    async def fetch_routes(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_routes(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.stream_routes,
            stream,
            request,
        )

    async def __rpc_delta_routes(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DeltaDiscoveryRequest, __discovery__v3__.DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_routes,
            stream,
            request,
        )

    async def __rpc_fetch_routes(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        assert request is not None
        response = await self.fetch_routes(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.route.v3.RouteDiscoveryService/StreamRoutes": grpclib.const.Handler(
                self.__rpc_stream_routes,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
            "/envoy.service.route.v3.RouteDiscoveryService/DeltaRoutes": grpclib.const.Handler(
                self.__rpc_delta_routes,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DeltaDiscoveryRequest,
                __discovery__v3__.DeltaDiscoveryResponse,
            ),
            "/envoy.service.route.v3.RouteDiscoveryService/FetchRoutes": grpclib.const.Handler(
                self.__rpc_fetch_routes,
                grpclib.const.Cardinality.UNARY_UNARY,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
        }


class ScopedRoutesDiscoveryServiceBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: SRDS]
    * Routing :ref:`architecture overview <arch_overview_http_routing>`

    The Scoped Routes Discovery Service (SRDS) API distributes
    :ref:`ScopedRouteConfiguration<envoy_v3_api_msg.ScopedRouteConfiguration>`
    resources. Each ScopedRouteConfiguration resource represents a "routing
    scope" containing a mapping that allows the HTTP connection manager to
    dynamically assign a routing table (specified via a
    :ref:`RouteConfiguration<envoy_v3_api_msg_config.route.v3.RouteConfiguration>` message) to each
    HTTP request.
    """

    async def stream_scoped_routes(
        self, messages: "AsyncIterator[__discovery__v3__.DiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DiscoveryResponse()

    async def delta_scoped_routes(
        self, messages: "AsyncIterator[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DeltaDiscoveryResponse()

    async def fetch_scoped_routes(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_scoped_routes(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.stream_scoped_routes,
            stream,
            request,
        )

    async def __rpc_delta_scoped_routes(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DeltaDiscoveryRequest, __discovery__v3__.DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_scoped_routes,
            stream,
            request,
        )

    async def __rpc_fetch_scoped_routes(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        assert request is not None
        response = await self.fetch_scoped_routes(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/StreamScopedRoutes": grpclib.const.Handler(
                self.__rpc_stream_scoped_routes,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/DeltaScopedRoutes": grpclib.const.Handler(
                self.__rpc_delta_scoped_routes,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DeltaDiscoveryRequest,
                __discovery__v3__.DeltaDiscoveryResponse,
            ),
            "/envoy.service.route.v3.ScopedRoutesDiscoveryService/FetchScopedRoutes": grpclib.const.Handler(
                self.__rpc_fetch_scoped_routes,
                grpclib.const.Cardinality.UNARY_UNARY,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
        }


class VirtualHostDiscoveryServiceBase(betterproto2_grpclib.ServiceBase):
    """
    Virtual Host Discovery Service (VHDS) is used to dynamically update the list of virtual hosts for
    a given RouteConfiguration. If VHDS is configured a virtual host list update will be triggered
    during the processing of an HTTP request if a route for the request cannot be resolved. The
    :ref:`resource_names_subscribe <envoy_v3_api_field_service.discovery.v3.DeltaDiscoveryRequest.resource_names_subscribe>`
    field contains a list of virtual host names or aliases to track. The contents of an alias would
    be the contents of a ``host`` or ``authority`` header used to make an http request. An xDS server
    will match an alias to a virtual host based on the content of :ref:`domains'
    <envoy_v3_api_field_config.route.v3.VirtualHost.domains>` field. The ``resource_names_unsubscribe`` field
    contains a list of virtual host names that have been :ref:`unsubscribed
    <xds_protocol_unsubscribe>` from the routing table associated with the RouteConfiguration.
    """

    async def delta_virtual_hosts(
        self, messages: "AsyncIterator[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DeltaDiscoveryResponse()

    async def __rpc_delta_virtual_hosts(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DeltaDiscoveryRequest, __discovery__v3__.DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_virtual_hosts,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.route.v3.VirtualHostDiscoveryService/DeltaVirtualHosts": grpclib.const.Handler(
                self.__rpc_delta_virtual_hosts,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DeltaDiscoveryRequest,
                __discovery__v3__.DeltaDiscoveryResponse,
            ),
        }
