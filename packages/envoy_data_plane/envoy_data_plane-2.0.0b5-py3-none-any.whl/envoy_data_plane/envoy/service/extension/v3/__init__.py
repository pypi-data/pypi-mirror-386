# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/service/extension/v3/config_discovery.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "EcdsDummy",
    "ExtensionConfigDiscoveryServiceAsyncStub",
    "ExtensionConfigDiscoveryServiceBase",
    "ExtensionConfigDiscoveryServiceSyncStub",
)

from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2 import grpclib as betterproto2_grpclib
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpclib.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class EcdsDummy(betterproto2.Message):
    """
    [#not-implemented-hide:] Not configuration. Workaround c++ protobuf issue
    with importing services: https://github.com/google/protobuf/issues/4221 and
    protoxform to upgrade the file.
    """

    pass


default_message_pool.register_message(
    "envoy.service.extension.v3", "EcdsDummy", EcdsDummy
)


class ExtensionConfigDiscoveryServiceSyncStub:
    """
    [#protodoc-title: Extension config discovery service (ECDS)]

    A service that supports dynamic configuration updates for a specific filter.
    Currently, ECDS is supported for network filters, HTTP filters, UDP session filters, and listener filters.
    Please check :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.

    The overall extension config discovery service works as follows:

    #. A filter (:ref:`Downstream Network <envoy_v3_api_field_config.listener.v3.Filter.config_discovery>`,
       :ref:`Upstream Network <envoy_v3_api_field_config.cluster.v3.Filter.config_discovery>`,
       :ref:`Listener <envoy_v3_api_field_config.listener.v3.ListenerFilter.config_discovery>`,
       :ref:`UDP Session <envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.SessionFilter.config_discovery>`,
       or :ref:`HTTP <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>`)
       contains a (:ref:`ExtensionConfigSource config discovery <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`) configuration. This configuration
       includes a :ref:`config_source <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.config_source>`,
       from which the filter configuration will be fetched.
    #. The client then registers for a resource using the filter name as the ``resource_name``.
    #. The xDS server sends back the filter's configuration.
    #. The client stores the configuration that will be used in the next instantiation of the filter chain,
       i.e., for the next requests. Whenever an updated filter configuration arrives, it will be taken into
       account in the following instantiation of the filter chain.

    .. note::
      Filters that are configured using ECDS are warmed. For more details see
      :ref:`ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`.

    Return extension configurations.
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def stream_extension_configs(
        self, messages: "Iterable[__discovery__v3__.DiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/StreamExtensionConfigs",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(iter(messages))

    def delta_extension_configs(
        self, messages: "Iterable[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "Iterator[__discovery__v3__.DeltaDiscoveryResponse]":
        yield from self._channel.stream_stream(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/DeltaExtensionConfigs",
            __discovery__v3__.DeltaDiscoveryRequest.SerializeToString,
            __discovery__v3__.DeltaDiscoveryResponse.FromString,
        )(iter(messages))

    def fetch_extension_configs(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        return self._channel.unary_unary(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/FetchExtensionConfigs",
            __discovery__v3__.DiscoveryRequest.SerializeToString,
            __discovery__v3__.DiscoveryResponse.FromString,
        )(message)


class ExtensionConfigDiscoveryServiceAsyncStub(betterproto2_grpclib.ServiceStub):
    """
    [#protodoc-title: Extension config discovery service (ECDS)]

    A service that supports dynamic configuration updates for a specific filter.
    Currently, ECDS is supported for network filters, HTTP filters, UDP session filters, and listener filters.
    Please check :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.

    The overall extension config discovery service works as follows:

    #. A filter (:ref:`Downstream Network <envoy_v3_api_field_config.listener.v3.Filter.config_discovery>`,
       :ref:`Upstream Network <envoy_v3_api_field_config.cluster.v3.Filter.config_discovery>`,
       :ref:`Listener <envoy_v3_api_field_config.listener.v3.ListenerFilter.config_discovery>`,
       :ref:`UDP Session <envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.SessionFilter.config_discovery>`,
       or :ref:`HTTP <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>`)
       contains a (:ref:`ExtensionConfigSource config discovery <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`) configuration. This configuration
       includes a :ref:`config_source <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.config_source>`,
       from which the filter configuration will be fetched.
    #. The client then registers for a resource using the filter name as the ``resource_name``.
    #. The xDS server sends back the filter's configuration.
    #. The client stores the configuration that will be used in the next instantiation of the filter chain,
       i.e., for the next requests. Whenever an updated filter configuration arrives, it will be taken into
       account in the following instantiation of the filter chain.

    .. note::
      Filters that are configured using ECDS are warmed. For more details see
      :ref:`ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`.

    Return extension configurations.
    """

    async def stream_extension_configs(
        self,
        messages: "AsyncIterable[__discovery__v3__.DiscoveryRequest] | Iterable[__discovery__v3__.DiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/StreamExtensionConfigs",
            messages,
            __discovery__v3__.DiscoveryRequest,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def delta_extension_configs(
        self,
        messages: "AsyncIterable[__discovery__v3__.DeltaDiscoveryRequest] | Iterable[__discovery__v3__.DeltaDiscoveryRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        async for response in self._stream_stream(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/DeltaExtensionConfigs",
            messages,
            __discovery__v3__.DeltaDiscoveryRequest,
            __discovery__v3__.DeltaDiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def fetch_extension_configs(
        self,
        message: "__discovery__v3__.DiscoveryRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "__discovery__v3__.DiscoveryResponse":
        return await self._unary_unary(
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/FetchExtensionConfigs",
            message,
            __discovery__v3__.DiscoveryResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ...discovery import v3 as __discovery__v3__


class ExtensionConfigDiscoveryServiceBase(betterproto2_grpclib.ServiceBase):
    """
    [#protodoc-title: Extension config discovery service (ECDS)]

    A service that supports dynamic configuration updates for a specific filter.
    Currently, ECDS is supported for network filters, HTTP filters, UDP session filters, and listener filters.
    Please check :ref:`Extension Config Discovery Service (ECDS) API <config_overview_extension_discovery>`.

    The overall extension config discovery service works as follows:

    #. A filter (:ref:`Downstream Network <envoy_v3_api_field_config.listener.v3.Filter.config_discovery>`,
       :ref:`Upstream Network <envoy_v3_api_field_config.cluster.v3.Filter.config_discovery>`,
       :ref:`Listener <envoy_v3_api_field_config.listener.v3.ListenerFilter.config_discovery>`,
       :ref:`UDP Session <envoy_v3_api_field_extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.SessionFilter.config_discovery>`,
       or :ref:`HTTP <envoy_v3_api_field_extensions.filters.network.http_connection_manager.v3.HttpFilter.config_discovery>`)
       contains a (:ref:`ExtensionConfigSource config discovery <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`) configuration. This configuration
       includes a :ref:`config_source <envoy_v3_api_field_config.core.v3.ExtensionConfigSource.config_source>`,
       from which the filter configuration will be fetched.
    #. The client then registers for a resource using the filter name as the ``resource_name``.
    #. The xDS server sends back the filter's configuration.
    #. The client stores the configuration that will be used in the next instantiation of the filter chain,
       i.e., for the next requests. Whenever an updated filter configuration arrives, it will be taken into
       account in the following instantiation of the filter chain.

    .. note::
      Filters that are configured using ECDS are warmed. For more details see
      :ref:`ExtensionConfigSource <envoy_v3_api_msg_config.core.v3.ExtensionConfigSource>`.

    Return extension configurations.
    """

    async def stream_extension_configs(
        self, messages: "AsyncIterator[__discovery__v3__.DiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DiscoveryResponse()

    async def delta_extension_configs(
        self, messages: "AsyncIterator[__discovery__v3__.DeltaDiscoveryRequest]"
    ) -> "AsyncIterator[__discovery__v3__.DeltaDiscoveryResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield __discovery__v3__.DeltaDiscoveryResponse()

    async def fetch_extension_configs(
        self, message: "__discovery__v3__.DiscoveryRequest"
    ) -> "__discovery__v3__.DiscoveryResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_stream_extension_configs(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.stream_extension_configs,
            stream,
            request,
        )

    async def __rpc_delta_extension_configs(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DeltaDiscoveryRequest, __discovery__v3__.DeltaDiscoveryResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.delta_extension_configs,
            stream,
            request,
        )

    async def __rpc_fetch_extension_configs(
        self,
        stream: "grpclib.server.Stream[__discovery__v3__.DiscoveryRequest, __discovery__v3__.DiscoveryResponse]",
    ) -> None:
        request = await stream.recv_message()
        assert request is not None
        response = await self.fetch_extension_configs(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/StreamExtensionConfigs": grpclib.const.Handler(
                self.__rpc_stream_extension_configs,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/DeltaExtensionConfigs": grpclib.const.Handler(
                self.__rpc_delta_extension_configs,
                grpclib.const.Cardinality.STREAM_STREAM,
                __discovery__v3__.DeltaDiscoveryRequest,
                __discovery__v3__.DeltaDiscoveryResponse,
            ),
            "/envoy.service.extension.v3.ExtensionConfigDiscoveryService/FetchExtensionConfigs": grpclib.const.Handler(
                self.__rpc_fetch_extension_configs,
                grpclib.const.Cardinality.UNARY_UNARY,
                __discovery__v3__.DiscoveryRequest,
                __discovery__v3__.DiscoveryResponse,
            ),
        }
