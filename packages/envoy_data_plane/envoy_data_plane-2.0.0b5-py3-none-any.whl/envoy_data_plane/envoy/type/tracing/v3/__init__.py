# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/type/tracing/v3/custom_tag.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "CustomTag",
    "CustomTagEnvironment",
    "CustomTagHeader",
    "CustomTagLiteral",
    "CustomTagMetadata",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from .....message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CustomTag(betterproto2.Message):
    """
    [#protodoc-title: Custom Tag]

    Describes custom tags for the active span.
    [#next-free-field: 6]

    Oneofs:
        - type: Used to specify what kind of custom tag.
    """

    tag: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Used to populate the tag name.
    """

    literal: "CustomTagLiteral | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )
    """
    A literal custom tag.
    """

    environment: "CustomTagEnvironment | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )
    """
    An environment custom tag.
    """

    request_header: "CustomTagHeader | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )
    """
    A request header custom tag.
    """

    metadata: "CustomTagMetadata | None" = betterproto2.field(
        5, betterproto2.TYPE_MESSAGE, optional=True, group="type"
    )
    """
    A custom tag to obtain tag value from the metadata.
    """

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message("envoy.type.tracing.v3", "CustomTag", CustomTag)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CustomTagEnvironment(betterproto2.Message):
    """
    Environment type custom tag with environment name and default value.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Environment variable name to obtain the value to populate the tag value.
    """

    default_value: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    When the environment variable is not found,
    the tag value will be populated with this default value if specified,
    otherwise no tag will be populated.
    """


default_message_pool.register_message(
    "envoy.type.tracing.v3", "CustomTag.Environment", CustomTagEnvironment
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CustomTagHeader(betterproto2.Message):
    """
    Header type custom tag with header name and default value.
    """

    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Header name to obtain the value to populate the tag value.
    """

    default_value: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    When the header does not exist,
    the tag value will be populated with this default value if specified,
    otherwise no tag will be populated.
    """


default_message_pool.register_message(
    "envoy.type.tracing.v3", "CustomTag.Header", CustomTagHeader
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CustomTagLiteral(betterproto2.Message):
    """
    Literal type custom tag with static value for the tag value.
    """

    value: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Static literal value to populate the tag value.
    """


default_message_pool.register_message(
    "envoy.type.tracing.v3", "CustomTag.Literal", CustomTagLiteral
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class CustomTagMetadata(betterproto2.Message):
    """
    Metadata type custom tag using
    :ref:`MetadataKey <envoy_v3_api_msg_type.metadata.v3.MetadataKey>` to retrieve the protobuf value
    from :ref:`Metadata <envoy_v3_api_msg_config.core.v3.Metadata>`, and populate the tag value with
    `the canonical JSON <https://developers.google.com/protocol-buffers/docs/proto3#json>`_
    representation of it.
    """

    kind: "__metadata__v3__.MetadataKind | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Specify what kind of metadata to obtain tag value from.
    """

    metadata_key: "__metadata__v3__.MetadataKey | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    Metadata key to define the path to retrieve the tag value.
    """

    default_value: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        3, betterproto2.TYPE_STRING
    )
    """
    When no valid metadata is found,
    the tag value would be populated with this default value if specified,
    otherwise no tag would be populated.
    """


default_message_pool.register_message(
    "envoy.type.tracing.v3", "CustomTag.Metadata", CustomTagMetadata
)


from ...metadata import v3 as __metadata__v3__
