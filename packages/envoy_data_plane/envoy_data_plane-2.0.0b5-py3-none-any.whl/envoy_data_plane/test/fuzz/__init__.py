# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: test/fuzz/common.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Headers",
    "HttpBody",
    "HttpData",
    "Metadata",
    "ProtoBody",
    "StreamInfo",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Headers(betterproto2.Message):
    """
    Common fuzzing input types.
    """

    headers: "list[__envoy__config__core__v3__.HeaderValue]" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, repeated=True
    )


default_message_pool.register_message("test.fuzz", "Headers", Headers)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HttpBody(betterproto2.Message):
    data: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = betterproto2.field(
        1, betterproto2.TYPE_STRING, repeated=True
    )
    """
    The bytes that will be used as the request body.
    """


default_message_pool.register_message("test.fuzz", "HttpBody", HttpBody)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class HttpData(betterproto2.Message):
    """


    Oneofs:
        - body:
    """

    headers: "Headers | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )

    http_body: "HttpBody | None" = betterproto2.field(
        2, betterproto2.TYPE_MESSAGE, optional=True, group="body"
    )

    proto_body: "ProtoBody | None" = betterproto2.field(
        4, betterproto2.TYPE_MESSAGE, optional=True, group="body"
    )

    trailers: "Headers | None" = betterproto2.field(
        3, betterproto2.TYPE_MESSAGE, optional=True
    )

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message("test.fuzz", "HttpData", HttpData)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Metadata(betterproto2.Message):
    metadata: "dict[str, str]" = betterproto2.field(
        1,
        betterproto2.TYPE_MAP,
        map_meta=betterproto2.map_meta(
            betterproto2.TYPE_STRING, betterproto2.TYPE_STRING
        ),
    )


default_message_pool.register_message("test.fuzz", "Metadata", Metadata)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class ProtoBody(betterproto2.Message):
    """
    HttpBody cannot efficiently create serialized protos.
    Use ProtoBody instead to test grpc data.
    """

    message: "__google__protobuf__.Any | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, optional=True
    )
    """
    The proto message that will be serialized and used as the request body.
    """

    chunk_size: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(2, betterproto2.TYPE_UINT64)
    )
    """
    The size (in bytes) of each buffer when forming the requests.
    """


default_message_pool.register_message("test.fuzz", "ProtoBody", ProtoBody)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class StreamInfo(betterproto2.Message):
    dynamic_metadata: "__envoy__config__core__v3__.Metadata | None" = (
        betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)
    )

    start_time: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = (
        betterproto2.field(2, betterproto2.TYPE_UINT64)
    )

    response_code: "int | None" = betterproto2.field(
        3,
        betterproto2.TYPE_MESSAGE,
        unwrap=lambda: __google__protobuf__.UInt32Value,
        optional=True,
    )

    upstream_metadata: "__envoy__config__core__v3__.Metadata | None" = (
        betterproto2.field(4, betterproto2.TYPE_MESSAGE, optional=True)
    )

    requested_server_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        5, betterproto2.TYPE_STRING
    )

    address: "__envoy__config__core__v3__.Address | None" = betterproto2.field(
        6, betterproto2.TYPE_MESSAGE, optional=True
    )

    upstream_local_address: "__envoy__config__core__v3__.Address | None" = (
        betterproto2.field(7, betterproto2.TYPE_MESSAGE, optional=True)
    )


default_message_pool.register_message("test.fuzz", "StreamInfo", StreamInfo)


from ...envoy.config.core import v3 as __envoy__config__core__v3__
from ...google import protobuf as __google__protobuf__
