# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: udpa/annotations/migrate.proto, udpa/annotations/security.proto, udpa/annotations/sensitive.proto, udpa/annotations/status.proto, udpa/annotations/versioning.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "FieldMigrateAnnotation",
    "FieldSecurityAnnotation",
    "FileMigrateAnnotation",
    "MigrateAnnotation",
    "PackageVersionStatus",
    "StatusAnnotation",
    "VersioningAnnotation",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ...message_pool import default_message_pool

_COMPILER_VERSION = "0.9.0"
betterproto2.check_compiler_version(_COMPILER_VERSION)


class PackageVersionStatus(betterproto2.Enum):
    UNKNOWN = 0
    """
    Unknown package version status.
    """

    FROZEN = 1
    """
    This version of the package is frozen.
    """

    ACTIVE = 2
    """
    This version of the package is the active development version.
    """

    NEXT_MAJOR_VERSION_CANDIDATE = 3
    """
    This version of the package is the candidate for the next major version. It
    is typically machine generated from the active development version.
    """


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FieldMigrateAnnotation(betterproto2.Message):
    rename: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Rename the field in next version.
    """

    oneof_promotion: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Add the field to a named oneof in next version. If this already exists, the
    field will join its siblings under the oneof, otherwise a new oneof will be
    created with the given name.
    """


default_message_pool.register_message(
    "udpa.annotations", "FieldMigrateAnnotation", FieldMigrateAnnotation
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FieldSecurityAnnotation(betterproto2.Message):
    """
    These annotations indicate metadata for the purpose of understanding the
    security significance of fields.
    """

    configure_for_untrusted_downstream: "bool" = betterproto2.field(
        1, betterproto2.TYPE_BOOL
    )
    """
    Field should be set in the presence of untrusted downstreams.
    """

    configure_for_untrusted_upstream: "bool" = betterproto2.field(
        2, betterproto2.TYPE_BOOL
    )
    """
    Field should be set in the presence of untrusted upstreams.
    """


default_message_pool.register_message(
    "udpa.annotations", "FieldSecurityAnnotation", FieldSecurityAnnotation
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class FileMigrateAnnotation(betterproto2.Message):
    move_to_package: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        2, betterproto2.TYPE_STRING
    )
    """
    Move all types in the file to another package, this implies changing proto
    file path.
    """


default_message_pool.register_message(
    "udpa.annotations", "FileMigrateAnnotation", FileMigrateAnnotation
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class MigrateAnnotation(betterproto2.Message):
    rename: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Rename the message/enum/enum value in next version.
    """


default_message_pool.register_message(
    "udpa.annotations", "MigrateAnnotation", MigrateAnnotation
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class StatusAnnotation(betterproto2.Message):
    work_in_progress: "bool" = betterproto2.field(1, betterproto2.TYPE_BOOL)
    """
    The entity is work-in-progress and subject to breaking changes.
    """

    package_version_status: "PackageVersionStatus" = betterproto2.field(
        2, betterproto2.TYPE_ENUM, default_factory=lambda: PackageVersionStatus(0)
    )
    """
    The entity belongs to a package with the given version status.
    """


default_message_pool.register_message(
    "udpa.annotations", "StatusAnnotation", StatusAnnotation
)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class VersioningAnnotation(betterproto2.Message):
    previous_message_type: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    Track the previous message type. E.g. this message might be
    udpa.foo.v3alpha.Foo and it was previously udpa.bar.v2.Bar. This
    information is consumed by UDPA via proto descriptors.
    """


default_message_pool.register_message(
    "udpa.annotations", "VersioningAnnotation", VersioningAnnotation
)
