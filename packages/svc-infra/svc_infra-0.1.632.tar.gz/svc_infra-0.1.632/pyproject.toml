[tool.poetry]
name = "svc-infra"
version = "0.1.632"
description = "Infrastructure for building and deploying prod-ready services"
authors = ["Ali Khatami <aliikhatami94@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "svc_infra", from = "src" }]
keywords = ["fastapi", "sqlalchemy", "alembic", "auth", "infra", "async", "pydantic"]
include = [
    "src/svc_infra/py.typed",
    "src/svc_infra/db/templates/**/*",
    "src/svc_infra/obs/templates/**/*",
    "src/svc_infra/obs/grafana/templates/**/*",
    "src/svc_infra/obs/grafana/dashboards/**/*",
    "src/svc_infra/docs/**/*"
]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Framework :: FastAPI",
    "Typing :: Typed"
]

[tool.poetry.urls]
Homepage = "https://github.com/your-org/svc-infra"
Repository = "https://github.com/your-org/svc-infra"
Issues = "https://github.com/your-org/svc-infra/issues"
Documentation = "https://github.com/your-org/svc-infra#readme"

[tool.poetry.dependencies]
python = ">=3.11,<4.0"

# Core
fastapi = "^0.116.1"
pydantic-settings = "^2.10.1"
python-dotenv = "^1.1.1"
typer = "^0.16.1"
httpx = "^0.28.1"

# DB + auth
sqlalchemy = { extras = ["asyncio"], version = "^2.0.43" }
alembic = "^1.13.2"
greenlet = "^3"
fastapi-users = { extras = ["oauth"], version = "^14.0.1" }
fastapi-users-db-sqlalchemy = "^7.0.0"
authlib = "^1.6.2"
httpx-oauth = "^0.16.1"
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
email-validator = "^2.2.0"

# Database drivers (all optional)
psycopg = {extras = ["binary"], version = "^3.2.10"}   # v3
asyncpg = { version = "^0.30.0", optional = true }
aiosqlite = { version = "^0.20.0", optional = true }
pymysql = { version = "^1.1.1", optional = true }
mysqlclient = { version = "^2.2.4", optional = true }
pyodbc = { version = "^5.1.0", optional = true }
snowflake-connector-python = { version = "^3.12.0", optional = true }
redshift-connector = { version = "^2.0.918", optional = true }
duckdb = { version = "^1.1.3", optional = true }
# (Removed hard psycopg2)

# Other infra deps
mcp = "^1.13.0"
ai-infra = "^0.1.63"
# prometheus-client moved to extras only (removed from here)
opentelemetry-sdk = "^1.36.0"
opentelemetry-instrumentation-fastapi = "^0.57b0"
opentelemetry-instrumentation-sqlalchemy = "^0.57b0"
opentelemetry-instrumentation-requests = "^0.57b0"
opentelemetry-instrumentation-httpx = "^0.57b0"
opentelemetry-exporter-otlp = "^1.36.0"
opentelemetry-propagator-b3 = "^1.36.0"
prometheus-client = "^0.22.1"
psycopg2-binary = "^2.9.10"
motor = "^3.7.1"
pre-commit = "^4.3.0"
redis = "^6.4.0"
cashews = {extras = ["redis"], version = "^7.4.1"}
itsdangerous = "^2.2.0"
pyotp = "^2.9.0"
stripe = "^13.0.1"
adyen = "^13.4.0"

[tool.poetry.extras]
# Postgres v3
pg = ["psycopg", "asyncpg"]
# Postgres v2 (choose either psycopg2 or psycopg2-binaryâ€”here we pick binary)
pg2 = ["psycopg2-binary"]
sqlite = ["aiosqlite"]
mysql = ["pymysql", "mysqlclient"]
mssql = ["pyodbc"]
snowflake = ["snowflake-connector-python"]
redshift = ["redshift-connector"]
duckdb = ["duckdb"]
metrics = ["prometheus-client"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.2"
pytest-asyncio = "^0.23.8"
ruff = "^0.6.9"
mypy = "^1.11.2"
types-requests = "^2.32.0.20241016"
pytest-mock = "^3.15.1"
httpx = "^0.28.1"
fakeredis = "^2.27.0"

[tool.poetry.scripts]
svc-infra = "svc_infra.cli:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*",]
python_functions = ["test_*"]
markers = [
    "acceptance: End-to-end acceptance tests running against the acceptance app or BASE_URL",
    "unit: Unit tests",
    "security: Security and auth hardening tests",
    "ratelimit: Rate limiting and abuse protection tests",
    "concurrency: Idempotency and concurrency control tests",
    "jobs: Background jobs and scheduling tests",
    "webhooks: Webhooks framework tests",
    "billing: Billing primitives tests",
    "tenancy: Tenancy isolation and enforcement tests",
    "data_lifecycle: Data lifecycle (fixtures, retention, erasure, backups)",
    "ops: SLOs & Ops tests (probes, breaker, instrumentation)",
    "dx: Developer experience and quality gates tests",
]
filterwarnings = [
    "ignore:The `route` decorator is deprecated:DeprecationWarning:starlette.*",
]

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"
