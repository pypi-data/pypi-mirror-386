/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * This represents a first draft of a json-schema that every activities exchanged between servers MUST satisfy and be able to parse. Here 'being able to parse' means making it to the point, where depending on the type, you decide what side effects to perform.
 *
 * Generally, the fields actor, to, and cc (and maybe bcc --- not transported) represent how the message is being delivered. The fields actor, type, object, target, content represent how the message is processed by the server.
 */
export interface Activity {
  "@context"?: string | unknown[] | null;
  /**
   * id of the activity or object, can be assumed to be globally unique. Some activities such as a Follow request will require an id to be valid. Servers may assume an id to be required. As assigning an id is 'trivial', one should assign one.
   */
  id: string;
  /**
   * Array of actors this activity or object is addressed to. It is sane to assume that an activity is addressed to at least one person.
   *
   * @minItems 1
   */
  to: [string, ...string[]];
  /**
   * Array of actors this activity or object is carbon copied to.
   */
  cc?: string[];
  /**
   * Moment of this activity or object being published
   */
  published?: string | null;
  /**
   * Type of the activity or activity. Side effects of this activity are determine by this type.
   */
  type: string;
  /**
   *
   *     id of the actor performing this activity. One can assume that the activity is signed by this actor (in some form).
   *
   */
  actor: string;
  object?: string | Object | null;
  /**
   *
   *     The target, not sure if needed, included for completeness
   *
   */
  target?:
    | string
    | {
        [k: string]: unknown;
      }
    | null;
  /**
   * The content used for example to represent the Emote for a like
   */
  content?: string | null;
}
export interface Object {
  /**
   * Moment of this object being updated
   */
  updated?: string | null;
  /**
   * The summary of the object
   */
  summary?: string | null;
  /**
   * The name of the object
   */
  name?: string | null;
  /**
   * The object being replied to. Currently a string. Not sure if this is what I want.
   */
  inReplyTo?: string | null;
  /**
   * The context of the object
   */
  context?: string | null;
  "@context"?: string | unknown[] | null;
  /**
   * id of the activity or object, can be assumed to be globally unique. Some activities such as a Follow request will require an id to be valid. Servers may assume an id to be required. As assigning an id is 'trivial', one should assign one.
   */
  id: string;
  /**
   * Array of actors this activity or object is addressed to. It is sane to assume that an activity is addressed to at least one person.
   *
   * @minItems 1
   */
  to: [string, ...string[]];
  /**
   * Array of actors this activity or object is carbon copied to.
   */
  cc?: string[];
  /**
   * Moment of this activity or object being published
   */
  published?: string | null;
  /**
   * Type of the activity or activity. Side effects of this activity are determine by this type.
   */
  type: string;
  /**
   * id of the actor that authored this object
   */
  attributedTo: string;
  /**
   * The content of the object
   */
  content: string;
  /**
   * A list of objects that are attached to the original object
   */
  attachment?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A list of objects that expand on the content of the object
   */
  tag?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  /**
   * A list of urls that expand on the content of the object
   */
  url?: {
    [k: string]: unknown;
  }[];
  /**
   *
   *     Marks the object as sensitive. Currently, used by everyone, a better way would be an element of the tag list that labels the object as sensitive due a reason
   *
   */
  sensitive?: boolean | null;
}
