/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Fixed type for serialization
 */
export type Type = string;
/**
 * Key of the value
 */
export type Name = string;
/**
 * Value
 */
export type Value = string;

/**
 * Describes an ActivityPub actor
 */
export interface Actor {
  /**
   * The inbox of the actor
   */
  inbox?: string | null;
  /**
   * The outbox of the actor
   */
  outbox?: string | null;
  /**
   * The followers collection of the actor
   */
  followers?: string | null;
  /**
   * The following collection of the actor
   */
  following?: string | null;
  /**
   * Description of the actor
   */
  summary?: string | null;
  /**
   * Display name of the actor
   */
  name?: string | null;
  /**
   * A list of urls that expand on the content of the object
   */
  url?: {
    [k: string]: unknown;
  }[];
  "@context"?: string | unknown[] | null;
  /**
   * id of the activity or object, can be assumed to be globally unique. Some activities such as a Follow request will require an id to be valid. Servers may assume an id to be required. As assigning an id is 'trivial', one should assign one.
   */
  id: string;
  /**
   * The type of Actor
   */
  type: string;
  /**
   * The avatar of the actor
   */
  icon?: {
    [k: string]: unknown;
  } | null;
  /**
   * Other uris associated with the actor
   */
  alsoKnownAs?: string[] | null;
  /**
   * attachments ... currently used for property values
   */
  attachments?:
    | (
        | {
            [k: string]: unknown;
          }
        | PropertyValue
      )[]
    | null;
  preferredUsername?: string | null;
  /**
   * An ordered list of identifiers
   */
  identifiers?: string[];
}
/**
 * Key value pairs in the attachment of an actor
 * as used by Mastodon
 */
export interface PropertyValue {
  type?: Type;
  name: Name;
  value: Value;
  [k: string]: unknown;
}
