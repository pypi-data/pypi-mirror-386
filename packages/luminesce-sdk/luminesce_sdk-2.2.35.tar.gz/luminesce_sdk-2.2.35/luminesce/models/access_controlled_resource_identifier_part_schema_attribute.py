# coding: utf-8

"""
    FINBOURNE Luminesce Web API

    FINBOURNE Technology  # noqa: E501

    Contact: info@finbourne.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic.v1 import StrictStr, Field, BaseModel, Field, StrictBool, StrictInt, StrictStr 

class AccessControlledResourceIdentifierPartSchemaAttribute(BaseModel):
    """
    AccessControlledResourceIdentifierPartSchemaAttribute
    """
    index: Optional[StrictInt] = None
    name:  Optional[StrictStr] = Field(None,alias="name") 
    display_name:  Optional[StrictStr] = Field(None,alias="displayName") 
    description:  Optional[StrictStr] = Field(None,alias="description") 
    required: Optional[StrictBool] = None
    values_path:  Optional[StrictStr] = Field(None,alias="valuesPath") 
    type_id: Optional[Any] = Field(None, alias="typeId")
    __properties = ["index", "name", "displayName", "description", "required", "valuesPath", "typeId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def __str__(self):
        """For `print` and `pprint`"""
        return pprint.pformat(self.dict(by_alias=False))

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccessControlledResourceIdentifierPartSchemaAttribute:
        """Create an instance of AccessControlledResourceIdentifierPartSchemaAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "type_id",
                          },
                          exclude_none=True)
        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if display_name (nullable) is None
        # and __fields_set__ contains the field
        if self.display_name is None and "display_name" in self.__fields_set__:
            _dict['displayName'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if values_path (nullable) is None
        # and __fields_set__ contains the field
        if self.values_path is None and "values_path" in self.__fields_set__:
            _dict['valuesPath'] = None

        # set to None if type_id (nullable) is None
        # and __fields_set__ contains the field
        if self.type_id is None and "type_id" in self.__fields_set__:
            _dict['typeId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccessControlledResourceIdentifierPartSchemaAttribute:
        """Create an instance of AccessControlledResourceIdentifierPartSchemaAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccessControlledResourceIdentifierPartSchemaAttribute.parse_obj(obj)

        _obj = AccessControlledResourceIdentifierPartSchemaAttribute.parse_obj({
            "index": obj.get("index"),
            "name": obj.get("name"),
            "display_name": obj.get("displayName"),
            "description": obj.get("description"),
            "required": obj.get("required"),
            "values_path": obj.get("valuesPath"),
            "type_id": obj.get("typeId")
        })
        return _obj
