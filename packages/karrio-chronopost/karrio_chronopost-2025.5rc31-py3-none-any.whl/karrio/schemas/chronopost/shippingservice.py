#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Fri Aug  5 11:45:43 2022 by generateDS.py version 2.40.13.
# Python 3.10.4 (main, Apr  2 2022, 09:04:19) [GCC 11.2.0]
#
# Command line options:
#   ('--no-namespace-defs', '')
#   ('-o', './chronopost_lib/shippingservice.py')
#
# Command line arguments:
#   ./schemas/ShippingServiceWS.xml
#
# Command line:
#   /home/iyed/Github/karrio/.venv/karrio/bin/generateDS --no-namespace-defs -o "./chronopost_lib/shippingservice.py" ./schemas/ShippingServiceWS.xml
#
# Current working directory (os.getcwd()):
#   chronopost
#

import sys
try:
    ModulenotfoundExp_ = ModuleNotFoundError
except NameError:
    ModulenotfoundExp_ = ImportError
from six.moves import zip_longest
import os
import re as re_
import base64
import datetime as datetime_
import decimal as decimal_
from lxml import etree as etree_


Validate_simpletypes_ = True
SaveElementTreeNode = True
TagNamePrefix = ""
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    try:
        if isinstance(infile, os.PathLike):
            infile = os.path.join(infile)
    except AttributeError:
        pass
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for an example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#
# Additionally, the generatedsnamespaces module can contain a python
# dictionary named GenerateDSNamespaceTypePrefixes that associates element
# types with the namespace prefixes that are to be added to the
# "xsi:type" attribute value.  See the _exportAttributes method of
# any generated element type and the generation of "xsi:type" for an
# example of the use of this table.
# An example table:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceTypePrefixes = {
#         "ElementtypeC": "aaa:",
#         "ElementtypeD": "bbb:",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ModulenotfoundExp_ :
    GenerateDSNamespaceDefs_ = {}
try:
    from generatedsnamespaces import GenerateDSNamespaceTypePrefixes as GenerateDSNamespaceTypePrefixes_
except ModulenotfoundExp_ :
    GenerateDSNamespaceTypePrefixes_ = {}

#
# You can replace the following class definition by defining an
# importable module named "generatedscollector" containing a class
# named "GdsCollector".  See the default class definition below for
# clues about the possible content of that class.
#
try:
    from generatedscollector import GdsCollector as GdsCollector_
except ModulenotfoundExp_ :

    class GdsCollector_(object):

        def __init__(self, messages=None):
            if messages is None:
                self.messages = []
            else:
                self.messages = messages

        def add_message(self, msg):
            self.messages.append(msg)

        def get_messages(self):
            return self.messages

        def clear_messages(self):
            self.messages = []

        def print_messages(self):
            for msg in self.messages:
                print("Warning: {}".format(msg))

        def write_messages(self, outstream):
            for msg in self.messages:
                outstream.write("Warning: {}\n".format(msg))


#
# The super-class for enum types
#

try:
    from enum import Enum
except ModulenotfoundExp_ :
    Enum = object

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ModulenotfoundExp_ as exp:
    try:
        from generatedssupersuper import GeneratedsSuperSuper
    except ModulenotfoundExp_ as exp:
        class GeneratedsSuperSuper(object):
            pass
    
    class GeneratedsSuper(GeneratedsSuperSuper):
        __hash__ = object.__hash__
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def __str__(self):
            settings = {
                'str_pretty_print': True,
                'str_indent_level': 0,
                'str_namespaceprefix': '',
                'str_name': self.__class__.__name__,
                'str_namespacedefs': '',
            }
            for n in settings:
                if hasattr(self, n):
                    settings[n] = getattr(self, n)
            if sys.version_info.major == 2:
                from StringIO import StringIO
            else:
                from io import StringIO
            output = StringIO()
            self.export(
                output,
                settings['str_indent_level'],
                pretty_print=settings['str_pretty_print'],
                namespaceprefix_=settings['str_namespaceprefix'],
                name_=settings['str_name'],
                namespacedef_=settings['str_namespacedefs']
            )
            strval = output.getvalue()
            output.close()
            return strval
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_parse_string(self, input_data, node=None, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data).decode('ascii')
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % int(input_data)
        def gds_parse_integer(self, input_data, node=None, input_name=''):
            try:
                ival = int(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires integer value: %s' % exp)
            return ival
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            try:
                value = int(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires integer value')
            return value
        def gds_format_integer_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integer values')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % float(input_data)).rstrip('0')
        def gds_parse_float(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires float or double value: %s' % exp)
            return fval_
        def gds_validate_float(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires float value')
            return value
        def gds_format_float_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of float values')
            return values
        def gds_format_decimal(self, input_data, input_name=''):
            return_value = '%s' % input_data
            if '.' in return_value:
                return_value = return_value.rstrip('0')
                if return_value.endswith('.'):
                    return_value = return_value.rstrip('.')
            return return_value
        def gds_parse_decimal(self, input_data, node=None, input_name=''):
            try:
                decimal_value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return decimal_value
        def gds_validate_decimal(self, input_data, node=None, input_name=''):
            try:
                value = decimal_.Decimal(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires decimal value')
            return value
        def gds_format_decimal_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return ' '.join([self.gds_format_decimal(item) for item in input_data])
        def gds_validate_decimal_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    decimal_.Decimal(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of decimal values')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_parse_double(self, input_data, node=None, input_name=''):
            try:
                fval_ = float(input_data)
            except (TypeError, ValueError) as exp:
                raise_parse_error(node, 'Requires double or float value: %s' % exp)
            return fval_
        def gds_validate_double(self, input_data, node=None, input_name=''):
            try:
                value = float(input_data)
            except (TypeError, ValueError):
                raise_parse_error(node, 'Requires double or float value')
            return value
        def gds_format_double_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(
                        node, 'Requires sequence of double or float values')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_parse_boolean(self, input_data, node=None, input_name=''):
            input_data = input_data.strip()
            if input_data in ('true', '1'):
                bval = True
            elif input_data in ('false', '0'):
                bval = False
            else:
                raise_parse_error(node, 'Requires boolean value')
            return bval
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            if input_data not in (True, 1, False, 0, ):
                raise_parse_error(
                    node,
                    'Requires boolean value '
                    '(one of True, 1, False, 0)')
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            if len(input_data) > 0 and not isinstance(input_data[0], BaseStrType_):
                input_data = [str(s) for s in input_data]
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                value = self.gds_parse_boolean(value, node, input_name)
                if value not in (True, 1, False, 0, ):
                    raise_parse_error(
                        node,
                        'Requires sequence of boolean values '
                        '(one of True, 1, False, 0)')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (
                    time_parts[0], "{}".format(micro_seconds).rjust(6, "0"), )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.
            # The target value must match at least one of the patterns
            # in order for the test to succeed.
            found1 = True
            target = str(target)
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    mo = re_.search(patterns2, target)
                    if mo is not None and len(mo.group(0)) == len(target):
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_check_cardinality_(
                self, value, input_name,
                min_occurs=0, max_occurs=1, required=None):
            if value is None:
                length = 0
            elif isinstance(value, list):
                length = len(value)
            else:
                length = 1
            if required is not None :
                if required and length < 1:
                    self.gds_collector_.add_message(
                        "Required value {}{} is missing".format(
                            input_name, self.gds_get_node_lineno_()))
            if length < min_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is below "
                    "the minimum allowed, "
                    "expected at least {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        min_occurs, length))
            elif length > max_occurs:
                self.gds_collector_.add_message(
                    "Number of values for {}{} is above "
                    "the maximum allowed, "
                    "expected at most {}, found {}".format(
                        input_name, self.gds_get_node_lineno_(),
                        max_occurs, length))
        def gds_validate_builtin_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value, input_name=input_name)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_validate_defined_ST_(
                self, validator, value, input_name,
                min_occurs=None, max_occurs=None, required=None):
            if value is not None:
                try:
                    validator(value)
                except GDSParseError as parse_error:
                    self.gds_collector_.add_message(str(parse_error))
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            # provide default value in case option --disable-xml is used.
            content = ""
            content = etree_.tostring(node, encoding="unicode")
            return content
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.items()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            def excl_select_objs_(obj):
                return (obj[0] != 'parent_object_' and
                        obj[0] != 'gds_collector_')
            if type(self) != type(other):
                return False
            return all(x == y for x, y in zip_longest(
                filter(excl_select_objs_, self.__dict__.items()),
                filter(excl_select_objs_, other.__dict__.items())))
        def __ne__(self, other):
            return not self.__eq__(other)
        # Django ETL transform hooks.
        def gds_djo_etl_transform(self):
            pass
        def gds_djo_etl_transform_db_obj(self, dbobj):
            pass
        # SQLAlchemy ETL transform hooks.
        def gds_sqa_etl_transform(self):
            return 0, None
        def gds_sqa_etl_transform_db_obj(self, dbobj):
            pass
        def gds_get_node_lineno_(self):
            if (hasattr(self, "gds_elementtree_node_") and
                    self.gds_elementtree_node_ is not None):
                return ' near line {}'.format(
                    self.gds_elementtree_node_.sourceline)
            else:
                return ""
    
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
# Set this to false in order to deactivate during export, the use of
# name space prefixes captured from the input document.
UseCapturedNS_ = True
CapturedNsmap_ = {}
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    s1 = s1.replace('\n', '&#10;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        if prefix == 'xml':
            namespace = 'http://www.w3.org/XML/1998/namespace'
        else:
            namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


def encode_str_2_3(instr):
    return instr


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    if node is not None:
        msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name_=name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self, mapping_=None, reverse_mapping_=None, nsmap_=None):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class resultGetReservedSkybillValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, errorCode=None, errorMessage=None, skybill=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        self.skybill = skybill
        self.skybill_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultGetReservedSkybillValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultGetReservedSkybillValue.subclass:
            return resultGetReservedSkybillValue.subclass(*args_, **kwargs_)
        else:
            return resultGetReservedSkybillValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_skybill(self):
        return self.skybill
    def set_skybill(self, skybill):
        self.skybill = skybill
    def _hasContent(self):
        if (
            self.errorCode is not None or
            self.errorMessage is not None or
            self.skybill is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultGetReservedSkybillValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultGetReservedSkybillValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultGetReservedSkybillValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultGetReservedSkybillValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultGetReservedSkybillValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultGetReservedSkybillValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultGetReservedSkybillValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
        if self.skybill is not None:
            namespaceprefix_ = self.skybill_nsprefix_ + ':' if (UseCapturedNS_ and self.skybill_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybill>%s</%sskybill>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybill), input_name='skybill')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybill':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybill')
            value_ = self.gds_validate_string(value_, node, 'skybill')
            self.skybill = value_
            self.skybill_nsprefix_ = child_.prefix
# end class resultGetReservedSkybillValue


class resultReservationExpeditionValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codeDepot=None, codeService=None, DSort=None, destinationDepot=None, ESDFullNumber=None, ESDNumber=None, errorCode=None, errorMessage=None, geoPostCodeBarre=None, geoPostNumeroColis=None, groupingPriorityLabel=None, OSort=None, pickupDate=None, reservationNumber=None, serviceMark=None, serviceName=None, signaletiqueProduit=None, skybillNumber=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codeDepot = codeDepot
        self.codeDepot_nsprefix_ = None
        self.codeService = codeService
        self.codeService_nsprefix_ = None
        self.DSort = DSort
        self.DSort_nsprefix_ = None
        self.destinationDepot = destinationDepot
        self.destinationDepot_nsprefix_ = None
        self.ESDFullNumber = ESDFullNumber
        self.ESDFullNumber_nsprefix_ = None
        self.ESDNumber = ESDNumber
        self.ESDNumber_nsprefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        self.geoPostCodeBarre = geoPostCodeBarre
        self.geoPostCodeBarre_nsprefix_ = None
        self.geoPostNumeroColis = geoPostNumeroColis
        self.geoPostNumeroColis_nsprefix_ = None
        self.groupingPriorityLabel = groupingPriorityLabel
        self.groupingPriorityLabel_nsprefix_ = None
        self.OSort = OSort
        self.OSort_nsprefix_ = None
        if isinstance(pickupDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(pickupDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = pickupDate
        self.pickupDate = initvalue_
        self.pickupDate_nsprefix_ = None
        self.reservationNumber = reservationNumber
        self.reservationNumber_nsprefix_ = None
        self.serviceMark = serviceMark
        self.serviceMark_nsprefix_ = None
        self.serviceName = serviceName
        self.serviceName_nsprefix_ = None
        self.signaletiqueProduit = signaletiqueProduit
        self.signaletiqueProduit_nsprefix_ = None
        self.skybillNumber = skybillNumber
        self.skybillNumber_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultReservationExpeditionValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultReservationExpeditionValue.subclass:
            return resultReservationExpeditionValue.subclass(*args_, **kwargs_)
        else:
            return resultReservationExpeditionValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeDepot(self):
        return self.codeDepot
    def set_codeDepot(self, codeDepot):
        self.codeDepot = codeDepot
    def get_codeService(self):
        return self.codeService
    def set_codeService(self, codeService):
        self.codeService = codeService
    def get_DSort(self):
        return self.DSort
    def set_DSort(self, DSort):
        self.DSort = DSort
    def get_destinationDepot(self):
        return self.destinationDepot
    def set_destinationDepot(self, destinationDepot):
        self.destinationDepot = destinationDepot
    def get_ESDFullNumber(self):
        return self.ESDFullNumber
    def set_ESDFullNumber(self, ESDFullNumber):
        self.ESDFullNumber = ESDFullNumber
    def get_ESDNumber(self):
        return self.ESDNumber
    def set_ESDNumber(self, ESDNumber):
        self.ESDNumber = ESDNumber
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_geoPostCodeBarre(self):
        return self.geoPostCodeBarre
    def set_geoPostCodeBarre(self, geoPostCodeBarre):
        self.geoPostCodeBarre = geoPostCodeBarre
    def get_geoPostNumeroColis(self):
        return self.geoPostNumeroColis
    def set_geoPostNumeroColis(self, geoPostNumeroColis):
        self.geoPostNumeroColis = geoPostNumeroColis
    def get_groupingPriorityLabel(self):
        return self.groupingPriorityLabel
    def set_groupingPriorityLabel(self, groupingPriorityLabel):
        self.groupingPriorityLabel = groupingPriorityLabel
    def get_OSort(self):
        return self.OSort
    def set_OSort(self, OSort):
        self.OSort = OSort
    def get_pickupDate(self):
        return self.pickupDate
    def set_pickupDate(self, pickupDate):
        self.pickupDate = pickupDate
    def get_reservationNumber(self):
        return self.reservationNumber
    def set_reservationNumber(self, reservationNumber):
        self.reservationNumber = reservationNumber
    def get_serviceMark(self):
        return self.serviceMark
    def set_serviceMark(self, serviceMark):
        self.serviceMark = serviceMark
    def get_serviceName(self):
        return self.serviceName
    def set_serviceName(self, serviceName):
        self.serviceName = serviceName
    def get_signaletiqueProduit(self):
        return self.signaletiqueProduit
    def set_signaletiqueProduit(self, signaletiqueProduit):
        self.signaletiqueProduit = signaletiqueProduit
    def get_skybillNumber(self):
        return self.skybillNumber
    def set_skybillNumber(self, skybillNumber):
        self.skybillNumber = skybillNumber
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.codeDepot is not None or
            self.codeService is not None or
            self.DSort is not None or
            self.destinationDepot is not None or
            self.ESDFullNumber is not None or
            self.ESDNumber is not None or
            self.errorCode is not None or
            self.errorMessage is not None or
            self.geoPostCodeBarre is not None or
            self.geoPostNumeroColis is not None or
            self.groupingPriorityLabel is not None or
            self.OSort is not None or
            self.pickupDate is not None or
            self.reservationNumber is not None or
            self.serviceMark is not None or
            self.serviceName is not None or
            self.signaletiqueProduit is not None or
            self.skybillNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultReservationExpeditionValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultReservationExpeditionValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultReservationExpeditionValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultReservationExpeditionValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultReservationExpeditionValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultReservationExpeditionValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultReservationExpeditionValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeDepot is not None:
            namespaceprefix_ = self.codeDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.codeDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeDepot>%s</%scodeDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeDepot), input_name='codeDepot')), namespaceprefix_ , eol_))
        if self.codeService is not None:
            namespaceprefix_ = self.codeService_nsprefix_ + ':' if (UseCapturedNS_ and self.codeService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeService>%s</%scodeService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeService), input_name='codeService')), namespaceprefix_ , eol_))
        if self.DSort is not None:
            namespaceprefix_ = self.DSort_nsprefix_ + ':' if (UseCapturedNS_ and self.DSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDSort>%s</%sDSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DSort), input_name='DSort')), namespaceprefix_ , eol_))
        if self.destinationDepot is not None:
            namespaceprefix_ = self.destinationDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.destinationDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationDepot>%s</%sdestinationDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.destinationDepot), input_name='destinationDepot')), namespaceprefix_ , eol_))
        if self.ESDFullNumber is not None:
            namespaceprefix_ = self.ESDFullNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ESDFullNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sESDFullNumber>%s</%sESDFullNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ESDFullNumber), input_name='ESDFullNumber')), namespaceprefix_ , eol_))
        if self.ESDNumber is not None:
            namespaceprefix_ = self.ESDNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ESDNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sESDNumber>%s</%sESDNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ESDNumber), input_name='ESDNumber')), namespaceprefix_ , eol_))
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
        if self.geoPostCodeBarre is not None:
            namespaceprefix_ = self.geoPostCodeBarre_nsprefix_ + ':' if (UseCapturedNS_ and self.geoPostCodeBarre_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoPostCodeBarre>%s</%sgeoPostCodeBarre>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.geoPostCodeBarre), input_name='geoPostCodeBarre')), namespaceprefix_ , eol_))
        if self.geoPostNumeroColis is not None:
            namespaceprefix_ = self.geoPostNumeroColis_nsprefix_ + ':' if (UseCapturedNS_ and self.geoPostNumeroColis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoPostNumeroColis>%s</%sgeoPostNumeroColis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.geoPostNumeroColis), input_name='geoPostNumeroColis')), namespaceprefix_ , eol_))
        if self.groupingPriorityLabel is not None:
            namespaceprefix_ = self.groupingPriorityLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.groupingPriorityLabel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupingPriorityLabel>%s</%sgroupingPriorityLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.groupingPriorityLabel), input_name='groupingPriorityLabel')), namespaceprefix_ , eol_))
        if self.OSort is not None:
            namespaceprefix_ = self.OSort_nsprefix_ + ':' if (UseCapturedNS_ and self.OSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOSort>%s</%sOSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OSort), input_name='OSort')), namespaceprefix_ , eol_))
        if self.pickupDate is not None:
            namespaceprefix_ = self.pickupDate_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupDate>%s</%spickupDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.pickupDate, input_name='pickupDate'), namespaceprefix_ , eol_))
        if self.reservationNumber is not None:
            namespaceprefix_ = self.reservationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.reservationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreservationNumber>%s</%sreservationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reservationNumber), input_name='reservationNumber')), namespaceprefix_ , eol_))
        if self.serviceMark is not None:
            namespaceprefix_ = self.serviceMark_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceMark>%s</%sserviceMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceMark), input_name='serviceMark')), namespaceprefix_ , eol_))
        if self.serviceName is not None:
            namespaceprefix_ = self.serviceName_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceName>%s</%sserviceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceName), input_name='serviceName')), namespaceprefix_ , eol_))
        if self.signaletiqueProduit is not None:
            namespaceprefix_ = self.signaletiqueProduit_nsprefix_ + ':' if (UseCapturedNS_ and self.signaletiqueProduit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssignaletiqueProduit>%s</%ssignaletiqueProduit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.signaletiqueProduit), input_name='signaletiqueProduit')), namespaceprefix_ , eol_))
        if self.skybillNumber is not None:
            namespaceprefix_ = self.skybillNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybillNumber>%s</%sskybillNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybillNumber), input_name='skybillNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeDepot')
            value_ = self.gds_validate_string(value_, node, 'codeDepot')
            self.codeDepot = value_
            self.codeDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeService')
            value_ = self.gds_validate_string(value_, node, 'codeService')
            self.codeService = value_
            self.codeService_nsprefix_ = child_.prefix
        elif nodeName_ == 'DSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DSort')
            value_ = self.gds_validate_string(value_, node, 'DSort')
            self.DSort = value_
            self.DSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'destinationDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'destinationDepot')
            value_ = self.gds_validate_string(value_, node, 'destinationDepot')
            self.destinationDepot = value_
            self.destinationDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'ESDFullNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ESDFullNumber')
            value_ = self.gds_validate_string(value_, node, 'ESDFullNumber')
            self.ESDFullNumber = value_
            self.ESDFullNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ESDNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ESDNumber')
            value_ = self.gds_validate_string(value_, node, 'ESDNumber')
            self.ESDNumber = value_
            self.ESDNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'geoPostCodeBarre':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'geoPostCodeBarre')
            value_ = self.gds_validate_string(value_, node, 'geoPostCodeBarre')
            self.geoPostCodeBarre = value_
            self.geoPostCodeBarre_nsprefix_ = child_.prefix
        elif nodeName_ == 'geoPostNumeroColis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'geoPostNumeroColis')
            value_ = self.gds_validate_string(value_, node, 'geoPostNumeroColis')
            self.geoPostNumeroColis = value_
            self.geoPostNumeroColis_nsprefix_ = child_.prefix
        elif nodeName_ == 'groupingPriorityLabel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'groupingPriorityLabel')
            value_ = self.gds_validate_string(value_, node, 'groupingPriorityLabel')
            self.groupingPriorityLabel = value_
            self.groupingPriorityLabel_nsprefix_ = child_.prefix
        elif nodeName_ == 'OSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OSort')
            value_ = self.gds_validate_string(value_, node, 'OSort')
            self.OSort = value_
            self.OSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.pickupDate = dval_
            self.pickupDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'reservationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reservationNumber')
            value_ = self.gds_validate_string(value_, node, 'reservationNumber')
            self.reservationNumber = value_
            self.reservationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceMark')
            value_ = self.gds_validate_string(value_, node, 'serviceMark')
            self.serviceMark = value_
            self.serviceMark_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceName')
            value_ = self.gds_validate_string(value_, node, 'serviceName')
            self.serviceName = value_
            self.serviceName_nsprefix_ = child_.prefix
        elif nodeName_ == 'signaletiqueProduit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'signaletiqueProduit')
            value_ = self.gds_validate_string(value_, node, 'signaletiqueProduit')
            self.signaletiqueProduit = value_
            self.signaletiqueProduit_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybillNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybillNumber')
            value_ = self.gds_validate_string(value_, node, 'skybillNumber')
            self.skybillNumber = value_
            self.skybillNumber_nsprefix_ = child_.prefix
# end class resultReservationExpeditionValue


class esdValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, closingDateTime=None, height=None, length=None, retrievalDateTime=None, shipperBuildingFloor=None, shipperCarriesCode=None, shipperServiceDirection=None, specificInstructions=None, width=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(closingDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(closingDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = closingDateTime
        self.closingDateTime = initvalue_
        self.closingDateTime_nsprefix_ = None
        self.height = height
        self.height_nsprefix_ = None
        self.length = length
        self.length_nsprefix_ = None
        if isinstance(retrievalDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(retrievalDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = retrievalDateTime
        self.retrievalDateTime = initvalue_
        self.retrievalDateTime_nsprefix_ = None
        self.shipperBuildingFloor = shipperBuildingFloor
        self.shipperBuildingFloor_nsprefix_ = None
        self.shipperCarriesCode = shipperCarriesCode
        self.shipperCarriesCode_nsprefix_ = None
        self.shipperServiceDirection = shipperServiceDirection
        self.shipperServiceDirection_nsprefix_ = None
        self.specificInstructions = specificInstructions
        self.specificInstructions_nsprefix_ = None
        self.width = width
        self.width_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, esdValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if esdValue.subclass:
            return esdValue.subclass(*args_, **kwargs_)
        else:
            return esdValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_closingDateTime(self):
        return self.closingDateTime
    def set_closingDateTime(self, closingDateTime):
        self.closingDateTime = closingDateTime
    def get_height(self):
        return self.height
    def set_height(self, height):
        self.height = height
    def get_length(self):
        return self.length
    def set_length(self, length):
        self.length = length
    def get_retrievalDateTime(self):
        return self.retrievalDateTime
    def set_retrievalDateTime(self, retrievalDateTime):
        self.retrievalDateTime = retrievalDateTime
    def get_shipperBuildingFloor(self):
        return self.shipperBuildingFloor
    def set_shipperBuildingFloor(self, shipperBuildingFloor):
        self.shipperBuildingFloor = shipperBuildingFloor
    def get_shipperCarriesCode(self):
        return self.shipperCarriesCode
    def set_shipperCarriesCode(self, shipperCarriesCode):
        self.shipperCarriesCode = shipperCarriesCode
    def get_shipperServiceDirection(self):
        return self.shipperServiceDirection
    def set_shipperServiceDirection(self, shipperServiceDirection):
        self.shipperServiceDirection = shipperServiceDirection
    def get_specificInstructions(self):
        return self.specificInstructions
    def set_specificInstructions(self, specificInstructions):
        self.specificInstructions = specificInstructions
    def get_width(self):
        return self.width
    def set_width(self, width):
        self.width = width
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.closingDateTime is not None or
            self.height is not None or
            self.length is not None or
            self.retrievalDateTime is not None or
            self.shipperBuildingFloor is not None or
            self.shipperCarriesCode is not None or
            self.shipperServiceDirection is not None or
            self.specificInstructions is not None or
            self.width is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('esdValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'esdValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='esdValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='esdValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.closingDateTime is not None:
            namespaceprefix_ = self.closingDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.closingDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclosingDateTime>%s</%sclosingDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.closingDateTime, input_name='closingDateTime'), namespaceprefix_ , eol_))
        if self.height is not None:
            namespaceprefix_ = self.height_nsprefix_ + ':' if (UseCapturedNS_ and self.height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sheight>%s</%sheight>%s' % (namespaceprefix_ , self.gds_format_float(self.height, input_name='height'), namespaceprefix_ , eol_))
        if self.length is not None:
            namespaceprefix_ = self.length_nsprefix_ + ':' if (UseCapturedNS_ and self.length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slength>%s</%slength>%s' % (namespaceprefix_ , self.gds_format_float(self.length, input_name='length'), namespaceprefix_ , eol_))
        if self.retrievalDateTime is not None:
            namespaceprefix_ = self.retrievalDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.retrievalDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sretrievalDateTime>%s</%sretrievalDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.retrievalDateTime, input_name='retrievalDateTime'), namespaceprefix_ , eol_))
        if self.shipperBuildingFloor is not None:
            namespaceprefix_ = self.shipperBuildingFloor_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperBuildingFloor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperBuildingFloor>%s</%sshipperBuildingFloor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperBuildingFloor), input_name='shipperBuildingFloor')), namespaceprefix_ , eol_))
        if self.shipperCarriesCode is not None:
            namespaceprefix_ = self.shipperCarriesCode_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCarriesCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCarriesCode>%s</%sshipperCarriesCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCarriesCode), input_name='shipperCarriesCode')), namespaceprefix_ , eol_))
        if self.shipperServiceDirection is not None:
            namespaceprefix_ = self.shipperServiceDirection_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperServiceDirection_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperServiceDirection>%s</%sshipperServiceDirection>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperServiceDirection), input_name='shipperServiceDirection')), namespaceprefix_ , eol_))
        if self.specificInstructions is not None:
            namespaceprefix_ = self.specificInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.specificInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sspecificInstructions>%s</%sspecificInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.specificInstructions), input_name='specificInstructions')), namespaceprefix_ , eol_))
        if self.width is not None:
            namespaceprefix_ = self.width_nsprefix_ + ':' if (UseCapturedNS_ and self.width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%swidth>%s</%swidth>%s' % (namespaceprefix_ , self.gds_format_float(self.width, input_name='width'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'closingDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.closingDateTime = dval_
            self.closingDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'height' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'height')
            fval_ = self.gds_validate_float(fval_, node, 'height')
            self.height = fval_
            self.height_nsprefix_ = child_.prefix
        elif nodeName_ == 'length' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'length')
            fval_ = self.gds_validate_float(fval_, node, 'length')
            self.length = fval_
            self.length_nsprefix_ = child_.prefix
        elif nodeName_ == 'retrievalDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.retrievalDateTime = dval_
            self.retrievalDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperBuildingFloor':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperBuildingFloor')
            value_ = self.gds_validate_string(value_, node, 'shipperBuildingFloor')
            self.shipperBuildingFloor = value_
            self.shipperBuildingFloor_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCarriesCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCarriesCode')
            value_ = self.gds_validate_string(value_, node, 'shipperCarriesCode')
            self.shipperCarriesCode = value_
            self.shipperCarriesCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperServiceDirection':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperServiceDirection')
            value_ = self.gds_validate_string(value_, node, 'shipperServiceDirection')
            self.shipperServiceDirection = value_
            self.shipperServiceDirection_nsprefix_ = child_.prefix
        elif nodeName_ == 'specificInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'specificInstructions')
            value_ = self.gds_validate_string(value_, node, 'specificInstructions')
            self.specificInstructions = value_
            self.specificInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'width' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'width')
            fval_ = self.gds_validate_float(fval_, node, 'width')
            self.width = fval_
            self.width_nsprefix_ = child_.prefix
# end class esdValue


class headerValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, accountNumber=None, idEmit=None, identWebPro=None, subAccount=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.accountNumber = accountNumber
        self.accountNumber_nsprefix_ = None
        self.idEmit = idEmit
        self.idEmit_nsprefix_ = None
        self.identWebPro = identWebPro
        self.identWebPro_nsprefix_ = None
        self.subAccount = subAccount
        self.subAccount_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, headerValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if headerValue.subclass:
            return headerValue.subclass(*args_, **kwargs_)
        else:
            return headerValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_accountNumber(self):
        return self.accountNumber
    def set_accountNumber(self, accountNumber):
        self.accountNumber = accountNumber
    def get_idEmit(self):
        return self.idEmit
    def set_idEmit(self, idEmit):
        self.idEmit = idEmit
    def get_identWebPro(self):
        return self.identWebPro
    def set_identWebPro(self, identWebPro):
        self.identWebPro = identWebPro
    def get_subAccount(self):
        return self.subAccount
    def set_subAccount(self, subAccount):
        self.subAccount = subAccount
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.accountNumber is not None or
            self.idEmit is not None or
            self.identWebPro is not None or
            self.subAccount is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='headerValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('headerValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'headerValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='headerValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='headerValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='headerValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='headerValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.accountNumber is not None:
            namespaceprefix_ = self.accountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.accountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccountNumber>%s</%saccountNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.accountNumber, input_name='accountNumber'), namespaceprefix_ , eol_))
        if self.idEmit is not None:
            namespaceprefix_ = self.idEmit_nsprefix_ + ':' if (UseCapturedNS_ and self.idEmit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidEmit>%s</%sidEmit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.idEmit), input_name='idEmit')), namespaceprefix_ , eol_))
        if self.identWebPro is not None:
            namespaceprefix_ = self.identWebPro_nsprefix_ + ':' if (UseCapturedNS_ and self.identWebPro_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentWebPro>%s</%sidentWebPro>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.identWebPro), input_name='identWebPro')), namespaceprefix_ , eol_))
        if self.subAccount is not None:
            namespaceprefix_ = self.subAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.subAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssubAccount>%s</%ssubAccount>%s' % (namespaceprefix_ , self.gds_format_integer(self.subAccount, input_name='subAccount'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'accountNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'accountNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'accountNumber')
            self.accountNumber = ival_
            self.accountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'idEmit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'idEmit')
            value_ = self.gds_validate_string(value_, node, 'idEmit')
            self.idEmit = value_
            self.idEmit_nsprefix_ = child_.prefix
        elif nodeName_ == 'identWebPro':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'identWebPro')
            value_ = self.gds_validate_string(value_, node, 'identWebPro')
            self.identWebPro = value_
            self.identWebPro_nsprefix_ = child_.prefix
        elif nodeName_ == 'subAccount' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'subAccount')
            ival_ = self.gds_validate_integer(ival_, node, 'subAccount')
            self.subAccount = ival_
            self.subAccount_nsprefix_ = child_.prefix
# end class headerValue


class shipperValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, shipperAdress1=None, shipperAdress2=None, shipperCity=None, shipperCivility=None, shipperContactName=None, shipperCountry=None, shipperCountryName=None, shipperEmail=None, shipperMobilePhone=None, shipperName=None, shipperName2=None, shipperPhone=None, shipperPreAlert=None, shipperZipCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.shipperAdress1 = shipperAdress1
        self.shipperAdress1_nsprefix_ = None
        self.shipperAdress2 = shipperAdress2
        self.shipperAdress2_nsprefix_ = None
        self.shipperCity = shipperCity
        self.shipperCity_nsprefix_ = None
        self.shipperCivility = shipperCivility
        self.shipperCivility_nsprefix_ = None
        self.shipperContactName = shipperContactName
        self.shipperContactName_nsprefix_ = None
        self.shipperCountry = shipperCountry
        self.shipperCountry_nsprefix_ = None
        self.shipperCountryName = shipperCountryName
        self.shipperCountryName_nsprefix_ = None
        self.shipperEmail = shipperEmail
        self.shipperEmail_nsprefix_ = None
        self.shipperMobilePhone = shipperMobilePhone
        self.shipperMobilePhone_nsprefix_ = None
        self.shipperName = shipperName
        self.shipperName_nsprefix_ = None
        self.shipperName2 = shipperName2
        self.shipperName2_nsprefix_ = None
        self.shipperPhone = shipperPhone
        self.shipperPhone_nsprefix_ = None
        self.shipperPreAlert = shipperPreAlert
        self.shipperPreAlert_nsprefix_ = None
        self.shipperZipCode = shipperZipCode
        self.shipperZipCode_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shipperValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shipperValue.subclass:
            return shipperValue.subclass(*args_, **kwargs_)
        else:
            return shipperValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_shipperAdress1(self):
        return self.shipperAdress1
    def set_shipperAdress1(self, shipperAdress1):
        self.shipperAdress1 = shipperAdress1
    def get_shipperAdress2(self):
        return self.shipperAdress2
    def set_shipperAdress2(self, shipperAdress2):
        self.shipperAdress2 = shipperAdress2
    def get_shipperCity(self):
        return self.shipperCity
    def set_shipperCity(self, shipperCity):
        self.shipperCity = shipperCity
    def get_shipperCivility(self):
        return self.shipperCivility
    def set_shipperCivility(self, shipperCivility):
        self.shipperCivility = shipperCivility
    def get_shipperContactName(self):
        return self.shipperContactName
    def set_shipperContactName(self, shipperContactName):
        self.shipperContactName = shipperContactName
    def get_shipperCountry(self):
        return self.shipperCountry
    def set_shipperCountry(self, shipperCountry):
        self.shipperCountry = shipperCountry
    def get_shipperCountryName(self):
        return self.shipperCountryName
    def set_shipperCountryName(self, shipperCountryName):
        self.shipperCountryName = shipperCountryName
    def get_shipperEmail(self):
        return self.shipperEmail
    def set_shipperEmail(self, shipperEmail):
        self.shipperEmail = shipperEmail
    def get_shipperMobilePhone(self):
        return self.shipperMobilePhone
    def set_shipperMobilePhone(self, shipperMobilePhone):
        self.shipperMobilePhone = shipperMobilePhone
    def get_shipperName(self):
        return self.shipperName
    def set_shipperName(self, shipperName):
        self.shipperName = shipperName
    def get_shipperName2(self):
        return self.shipperName2
    def set_shipperName2(self, shipperName2):
        self.shipperName2 = shipperName2
    def get_shipperPhone(self):
        return self.shipperPhone
    def set_shipperPhone(self, shipperPhone):
        self.shipperPhone = shipperPhone
    def get_shipperPreAlert(self):
        return self.shipperPreAlert
    def set_shipperPreAlert(self, shipperPreAlert):
        self.shipperPreAlert = shipperPreAlert
    def get_shipperZipCode(self):
        return self.shipperZipCode
    def set_shipperZipCode(self, shipperZipCode):
        self.shipperZipCode = shipperZipCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.shipperAdress1 is not None or
            self.shipperAdress2 is not None or
            self.shipperCity is not None or
            self.shipperCivility is not None or
            self.shipperContactName is not None or
            self.shipperCountry is not None or
            self.shipperCountryName is not None or
            self.shipperEmail is not None or
            self.shipperMobilePhone is not None or
            self.shipperName is not None or
            self.shipperName2 is not None or
            self.shipperPhone is not None or
            self.shipperPreAlert is not None or
            self.shipperZipCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shipperValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shipperValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shipperValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shipperValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shipperValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shipperValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shipperValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.shipperAdress1 is not None:
            namespaceprefix_ = self.shipperAdress1_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperAdress1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperAdress1>%s</%sshipperAdress1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperAdress1), input_name='shipperAdress1')), namespaceprefix_ , eol_))
        if self.shipperAdress2 is not None:
            namespaceprefix_ = self.shipperAdress2_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperAdress2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperAdress2>%s</%sshipperAdress2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperAdress2), input_name='shipperAdress2')), namespaceprefix_ , eol_))
        if self.shipperCity is not None:
            namespaceprefix_ = self.shipperCity_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCity>%s</%sshipperCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCity), input_name='shipperCity')), namespaceprefix_ , eol_))
        if self.shipperCivility is not None:
            namespaceprefix_ = self.shipperCivility_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCivility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCivility>%s</%sshipperCivility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCivility), input_name='shipperCivility')), namespaceprefix_ , eol_))
        if self.shipperContactName is not None:
            namespaceprefix_ = self.shipperContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperContactName>%s</%sshipperContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperContactName), input_name='shipperContactName')), namespaceprefix_ , eol_))
        if self.shipperCountry is not None:
            namespaceprefix_ = self.shipperCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCountry>%s</%sshipperCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCountry), input_name='shipperCountry')), namespaceprefix_ , eol_))
        if self.shipperCountryName is not None:
            namespaceprefix_ = self.shipperCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCountryName>%s</%sshipperCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCountryName), input_name='shipperCountryName')), namespaceprefix_ , eol_))
        if self.shipperEmail is not None:
            namespaceprefix_ = self.shipperEmail_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperEmail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperEmail>%s</%sshipperEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperEmail), input_name='shipperEmail')), namespaceprefix_ , eol_))
        if self.shipperMobilePhone is not None:
            namespaceprefix_ = self.shipperMobilePhone_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperMobilePhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperMobilePhone>%s</%sshipperMobilePhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperMobilePhone), input_name='shipperMobilePhone')), namespaceprefix_ , eol_))
        if self.shipperName is not None:
            namespaceprefix_ = self.shipperName_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperName>%s</%sshipperName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperName), input_name='shipperName')), namespaceprefix_ , eol_))
        if self.shipperName2 is not None:
            namespaceprefix_ = self.shipperName2_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperName2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperName2>%s</%sshipperName2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperName2), input_name='shipperName2')), namespaceprefix_ , eol_))
        if self.shipperPhone is not None:
            namespaceprefix_ = self.shipperPhone_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperPhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperPhone>%s</%sshipperPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperPhone), input_name='shipperPhone')), namespaceprefix_ , eol_))
        if self.shipperPreAlert is not None:
            namespaceprefix_ = self.shipperPreAlert_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperPreAlert_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperPreAlert>%s</%sshipperPreAlert>%s' % (namespaceprefix_ , self.gds_format_integer(self.shipperPreAlert, input_name='shipperPreAlert'), namespaceprefix_ , eol_))
        if self.shipperZipCode is not None:
            namespaceprefix_ = self.shipperZipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperZipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperZipCode>%s</%sshipperZipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperZipCode), input_name='shipperZipCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'shipperAdress1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperAdress1')
            value_ = self.gds_validate_string(value_, node, 'shipperAdress1')
            self.shipperAdress1 = value_
            self.shipperAdress1_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperAdress2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperAdress2')
            value_ = self.gds_validate_string(value_, node, 'shipperAdress2')
            self.shipperAdress2 = value_
            self.shipperAdress2_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCity')
            value_ = self.gds_validate_string(value_, node, 'shipperCity')
            self.shipperCity = value_
            self.shipperCity_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCivility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCivility')
            value_ = self.gds_validate_string(value_, node, 'shipperCivility')
            self.shipperCivility = value_
            self.shipperCivility_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperContactName')
            value_ = self.gds_validate_string(value_, node, 'shipperContactName')
            self.shipperContactName = value_
            self.shipperContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCountry')
            value_ = self.gds_validate_string(value_, node, 'shipperCountry')
            self.shipperCountry = value_
            self.shipperCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCountryName')
            value_ = self.gds_validate_string(value_, node, 'shipperCountryName')
            self.shipperCountryName = value_
            self.shipperCountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperEmail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperEmail')
            value_ = self.gds_validate_string(value_, node, 'shipperEmail')
            self.shipperEmail = value_
            self.shipperEmail_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperMobilePhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperMobilePhone')
            value_ = self.gds_validate_string(value_, node, 'shipperMobilePhone')
            self.shipperMobilePhone = value_
            self.shipperMobilePhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperName')
            value_ = self.gds_validate_string(value_, node, 'shipperName')
            self.shipperName = value_
            self.shipperName_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperName2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperName2')
            value_ = self.gds_validate_string(value_, node, 'shipperName2')
            self.shipperName2 = value_
            self.shipperName2_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperPhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperPhone')
            value_ = self.gds_validate_string(value_, node, 'shipperPhone')
            self.shipperPhone = value_
            self.shipperPhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperPreAlert' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'shipperPreAlert')
            ival_ = self.gds_validate_integer(ival_, node, 'shipperPreAlert')
            self.shipperPreAlert = ival_
            self.shipperPreAlert_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperZipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperZipCode')
            value_ = self.gds_validate_string(value_, node, 'shipperZipCode')
            self.shipperZipCode = value_
            self.shipperZipCode_nsprefix_ = child_.prefix
# end class shipperValue


class customerValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, customerAdress1=None, customerAdress2=None, customerCity=None, customerCivility=None, customerContactName=None, customerCountry=None, customerCountryName=None, customerEmail=None, customerMobilePhone=None, customerName=None, customerName2=None, customerPhone=None, customerPreAlert=None, customerZipCode=None, printAsSender=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.customerAdress1 = customerAdress1
        self.customerAdress1_nsprefix_ = None
        self.customerAdress2 = customerAdress2
        self.customerAdress2_nsprefix_ = None
        self.customerCity = customerCity
        self.customerCity_nsprefix_ = None
        self.customerCivility = customerCivility
        self.customerCivility_nsprefix_ = None
        self.customerContactName = customerContactName
        self.customerContactName_nsprefix_ = None
        self.customerCountry = customerCountry
        self.customerCountry_nsprefix_ = None
        self.customerCountryName = customerCountryName
        self.customerCountryName_nsprefix_ = None
        self.customerEmail = customerEmail
        self.customerEmail_nsprefix_ = None
        self.customerMobilePhone = customerMobilePhone
        self.customerMobilePhone_nsprefix_ = None
        self.customerName = customerName
        self.customerName_nsprefix_ = None
        self.customerName2 = customerName2
        self.customerName2_nsprefix_ = None
        self.customerPhone = customerPhone
        self.customerPhone_nsprefix_ = None
        self.customerPreAlert = customerPreAlert
        self.customerPreAlert_nsprefix_ = None
        self.customerZipCode = customerZipCode
        self.customerZipCode_nsprefix_ = None
        self.printAsSender = printAsSender
        self.printAsSender_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, customerValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if customerValue.subclass:
            return customerValue.subclass(*args_, **kwargs_)
        else:
            return customerValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_customerAdress1(self):
        return self.customerAdress1
    def set_customerAdress1(self, customerAdress1):
        self.customerAdress1 = customerAdress1
    def get_customerAdress2(self):
        return self.customerAdress2
    def set_customerAdress2(self, customerAdress2):
        self.customerAdress2 = customerAdress2
    def get_customerCity(self):
        return self.customerCity
    def set_customerCity(self, customerCity):
        self.customerCity = customerCity
    def get_customerCivility(self):
        return self.customerCivility
    def set_customerCivility(self, customerCivility):
        self.customerCivility = customerCivility
    def get_customerContactName(self):
        return self.customerContactName
    def set_customerContactName(self, customerContactName):
        self.customerContactName = customerContactName
    def get_customerCountry(self):
        return self.customerCountry
    def set_customerCountry(self, customerCountry):
        self.customerCountry = customerCountry
    def get_customerCountryName(self):
        return self.customerCountryName
    def set_customerCountryName(self, customerCountryName):
        self.customerCountryName = customerCountryName
    def get_customerEmail(self):
        return self.customerEmail
    def set_customerEmail(self, customerEmail):
        self.customerEmail = customerEmail
    def get_customerMobilePhone(self):
        return self.customerMobilePhone
    def set_customerMobilePhone(self, customerMobilePhone):
        self.customerMobilePhone = customerMobilePhone
    def get_customerName(self):
        return self.customerName
    def set_customerName(self, customerName):
        self.customerName = customerName
    def get_customerName2(self):
        return self.customerName2
    def set_customerName2(self, customerName2):
        self.customerName2 = customerName2
    def get_customerPhone(self):
        return self.customerPhone
    def set_customerPhone(self, customerPhone):
        self.customerPhone = customerPhone
    def get_customerPreAlert(self):
        return self.customerPreAlert
    def set_customerPreAlert(self, customerPreAlert):
        self.customerPreAlert = customerPreAlert
    def get_customerZipCode(self):
        return self.customerZipCode
    def set_customerZipCode(self, customerZipCode):
        self.customerZipCode = customerZipCode
    def get_printAsSender(self):
        return self.printAsSender
    def set_printAsSender(self, printAsSender):
        self.printAsSender = printAsSender
    def _hasContent(self):
        if (
            self.customerAdress1 is not None or
            self.customerAdress2 is not None or
            self.customerCity is not None or
            self.customerCivility is not None or
            self.customerContactName is not None or
            self.customerCountry is not None or
            self.customerCountryName is not None or
            self.customerEmail is not None or
            self.customerMobilePhone is not None or
            self.customerName is not None or
            self.customerName2 is not None or
            self.customerPhone is not None or
            self.customerPreAlert is not None or
            self.customerZipCode is not None or
            self.printAsSender is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customerValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('customerValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'customerValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='customerValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='customerValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='customerValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customerValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customerAdress1 is not None:
            namespaceprefix_ = self.customerAdress1_nsprefix_ + ':' if (UseCapturedNS_ and self.customerAdress1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerAdress1>%s</%scustomerAdress1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerAdress1), input_name='customerAdress1')), namespaceprefix_ , eol_))
        if self.customerAdress2 is not None:
            namespaceprefix_ = self.customerAdress2_nsprefix_ + ':' if (UseCapturedNS_ and self.customerAdress2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerAdress2>%s</%scustomerAdress2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerAdress2), input_name='customerAdress2')), namespaceprefix_ , eol_))
        if self.customerCity is not None:
            namespaceprefix_ = self.customerCity_nsprefix_ + ':' if (UseCapturedNS_ and self.customerCity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerCity>%s</%scustomerCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerCity), input_name='customerCity')), namespaceprefix_ , eol_))
        if self.customerCivility is not None:
            namespaceprefix_ = self.customerCivility_nsprefix_ + ':' if (UseCapturedNS_ and self.customerCivility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerCivility>%s</%scustomerCivility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerCivility), input_name='customerCivility')), namespaceprefix_ , eol_))
        if self.customerContactName is not None:
            namespaceprefix_ = self.customerContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.customerContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerContactName>%s</%scustomerContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerContactName), input_name='customerContactName')), namespaceprefix_ , eol_))
        if self.customerCountry is not None:
            namespaceprefix_ = self.customerCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.customerCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerCountry>%s</%scustomerCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerCountry), input_name='customerCountry')), namespaceprefix_ , eol_))
        if self.customerCountryName is not None:
            namespaceprefix_ = self.customerCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.customerCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerCountryName>%s</%scustomerCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerCountryName), input_name='customerCountryName')), namespaceprefix_ , eol_))
        if self.customerEmail is not None:
            namespaceprefix_ = self.customerEmail_nsprefix_ + ':' if (UseCapturedNS_ and self.customerEmail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerEmail>%s</%scustomerEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerEmail), input_name='customerEmail')), namespaceprefix_ , eol_))
        if self.customerMobilePhone is not None:
            namespaceprefix_ = self.customerMobilePhone_nsprefix_ + ':' if (UseCapturedNS_ and self.customerMobilePhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerMobilePhone>%s</%scustomerMobilePhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerMobilePhone), input_name='customerMobilePhone')), namespaceprefix_ , eol_))
        if self.customerName is not None:
            namespaceprefix_ = self.customerName_nsprefix_ + ':' if (UseCapturedNS_ and self.customerName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerName>%s</%scustomerName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerName), input_name='customerName')), namespaceprefix_ , eol_))
        if self.customerName2 is not None:
            namespaceprefix_ = self.customerName2_nsprefix_ + ':' if (UseCapturedNS_ and self.customerName2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerName2>%s</%scustomerName2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerName2), input_name='customerName2')), namespaceprefix_ , eol_))
        if self.customerPhone is not None:
            namespaceprefix_ = self.customerPhone_nsprefix_ + ':' if (UseCapturedNS_ and self.customerPhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerPhone>%s</%scustomerPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerPhone), input_name='customerPhone')), namespaceprefix_ , eol_))
        if self.customerPreAlert is not None:
            namespaceprefix_ = self.customerPreAlert_nsprefix_ + ':' if (UseCapturedNS_ and self.customerPreAlert_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerPreAlert>%s</%scustomerPreAlert>%s' % (namespaceprefix_ , self.gds_format_integer(self.customerPreAlert, input_name='customerPreAlert'), namespaceprefix_ , eol_))
        if self.customerZipCode is not None:
            namespaceprefix_ = self.customerZipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.customerZipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerZipCode>%s</%scustomerZipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerZipCode), input_name='customerZipCode')), namespaceprefix_ , eol_))
        if self.printAsSender is not None:
            namespaceprefix_ = self.printAsSender_nsprefix_ + ':' if (UseCapturedNS_ and self.printAsSender_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprintAsSender>%s</%sprintAsSender>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.printAsSender), input_name='printAsSender')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'customerAdress1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerAdress1')
            value_ = self.gds_validate_string(value_, node, 'customerAdress1')
            self.customerAdress1 = value_
            self.customerAdress1_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerAdress2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerAdress2')
            value_ = self.gds_validate_string(value_, node, 'customerAdress2')
            self.customerAdress2 = value_
            self.customerAdress2_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerCity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerCity')
            value_ = self.gds_validate_string(value_, node, 'customerCity')
            self.customerCity = value_
            self.customerCity_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerCivility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerCivility')
            value_ = self.gds_validate_string(value_, node, 'customerCivility')
            self.customerCivility = value_
            self.customerCivility_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerContactName')
            value_ = self.gds_validate_string(value_, node, 'customerContactName')
            self.customerContactName = value_
            self.customerContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerCountry')
            value_ = self.gds_validate_string(value_, node, 'customerCountry')
            self.customerCountry = value_
            self.customerCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerCountryName')
            value_ = self.gds_validate_string(value_, node, 'customerCountryName')
            self.customerCountryName = value_
            self.customerCountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerEmail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerEmail')
            value_ = self.gds_validate_string(value_, node, 'customerEmail')
            self.customerEmail = value_
            self.customerEmail_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerMobilePhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerMobilePhone')
            value_ = self.gds_validate_string(value_, node, 'customerMobilePhone')
            self.customerMobilePhone = value_
            self.customerMobilePhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerName')
            value_ = self.gds_validate_string(value_, node, 'customerName')
            self.customerName = value_
            self.customerName_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerName2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerName2')
            value_ = self.gds_validate_string(value_, node, 'customerName2')
            self.customerName2 = value_
            self.customerName2_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerPhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerPhone')
            value_ = self.gds_validate_string(value_, node, 'customerPhone')
            self.customerPhone = value_
            self.customerPhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerPreAlert' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'customerPreAlert')
            ival_ = self.gds_validate_integer(ival_, node, 'customerPreAlert')
            self.customerPreAlert = ival_
            self.customerPreAlert_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerZipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerZipCode')
            value_ = self.gds_validate_string(value_, node, 'customerZipCode')
            self.customerZipCode = value_
            self.customerZipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'printAsSender':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'printAsSender')
            value_ = self.gds_validate_string(value_, node, 'printAsSender')
            self.printAsSender = value_
            self.printAsSender_nsprefix_ = child_.prefix
# end class customerValue


class recipientValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, recipientAdress1=None, recipientAdress2=None, recipientCity=None, recipientContactName=None, recipientCountry=None, recipientCountryName=None, recipientEmail=None, recipientMobilePhone=None, recipientName=None, recipientName2=None, recipientPhone=None, recipientPreAlert=None, recipientZipCode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.recipientAdress1 = recipientAdress1
        self.recipientAdress1_nsprefix_ = None
        self.recipientAdress2 = recipientAdress2
        self.recipientAdress2_nsprefix_ = None
        self.recipientCity = recipientCity
        self.recipientCity_nsprefix_ = None
        self.recipientContactName = recipientContactName
        self.recipientContactName_nsprefix_ = None
        self.recipientCountry = recipientCountry
        self.recipientCountry_nsprefix_ = None
        self.recipientCountryName = recipientCountryName
        self.recipientCountryName_nsprefix_ = None
        self.recipientEmail = recipientEmail
        self.recipientEmail_nsprefix_ = None
        self.recipientMobilePhone = recipientMobilePhone
        self.recipientMobilePhone_nsprefix_ = None
        self.recipientName = recipientName
        self.recipientName_nsprefix_ = None
        self.recipientName2 = recipientName2
        self.recipientName2_nsprefix_ = None
        self.recipientPhone = recipientPhone
        self.recipientPhone_nsprefix_ = None
        self.recipientPreAlert = recipientPreAlert
        self.recipientPreAlert_nsprefix_ = None
        self.recipientZipCode = recipientZipCode
        self.recipientZipCode_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, recipientValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if recipientValue.subclass:
            return recipientValue.subclass(*args_, **kwargs_)
        else:
            return recipientValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_recipientAdress1(self):
        return self.recipientAdress1
    def set_recipientAdress1(self, recipientAdress1):
        self.recipientAdress1 = recipientAdress1
    def get_recipientAdress2(self):
        return self.recipientAdress2
    def set_recipientAdress2(self, recipientAdress2):
        self.recipientAdress2 = recipientAdress2
    def get_recipientCity(self):
        return self.recipientCity
    def set_recipientCity(self, recipientCity):
        self.recipientCity = recipientCity
    def get_recipientContactName(self):
        return self.recipientContactName
    def set_recipientContactName(self, recipientContactName):
        self.recipientContactName = recipientContactName
    def get_recipientCountry(self):
        return self.recipientCountry
    def set_recipientCountry(self, recipientCountry):
        self.recipientCountry = recipientCountry
    def get_recipientCountryName(self):
        return self.recipientCountryName
    def set_recipientCountryName(self, recipientCountryName):
        self.recipientCountryName = recipientCountryName
    def get_recipientEmail(self):
        return self.recipientEmail
    def set_recipientEmail(self, recipientEmail):
        self.recipientEmail = recipientEmail
    def get_recipientMobilePhone(self):
        return self.recipientMobilePhone
    def set_recipientMobilePhone(self, recipientMobilePhone):
        self.recipientMobilePhone = recipientMobilePhone
    def get_recipientName(self):
        return self.recipientName
    def set_recipientName(self, recipientName):
        self.recipientName = recipientName
    def get_recipientName2(self):
        return self.recipientName2
    def set_recipientName2(self, recipientName2):
        self.recipientName2 = recipientName2
    def get_recipientPhone(self):
        return self.recipientPhone
    def set_recipientPhone(self, recipientPhone):
        self.recipientPhone = recipientPhone
    def get_recipientPreAlert(self):
        return self.recipientPreAlert
    def set_recipientPreAlert(self, recipientPreAlert):
        self.recipientPreAlert = recipientPreAlert
    def get_recipientZipCode(self):
        return self.recipientZipCode
    def set_recipientZipCode(self, recipientZipCode):
        self.recipientZipCode = recipientZipCode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.recipientAdress1 is not None or
            self.recipientAdress2 is not None or
            self.recipientCity is not None or
            self.recipientContactName is not None or
            self.recipientCountry is not None or
            self.recipientCountryName is not None or
            self.recipientEmail is not None or
            self.recipientMobilePhone is not None or
            self.recipientName is not None or
            self.recipientName2 is not None or
            self.recipientPhone is not None or
            self.recipientPreAlert is not None or
            self.recipientZipCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='recipientValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('recipientValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'recipientValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recipientValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='recipientValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='recipientValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='recipientValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.recipientAdress1 is not None:
            namespaceprefix_ = self.recipientAdress1_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientAdress1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientAdress1>%s</%srecipientAdress1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientAdress1), input_name='recipientAdress1')), namespaceprefix_ , eol_))
        if self.recipientAdress2 is not None:
            namespaceprefix_ = self.recipientAdress2_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientAdress2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientAdress2>%s</%srecipientAdress2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientAdress2), input_name='recipientAdress2')), namespaceprefix_ , eol_))
        if self.recipientCity is not None:
            namespaceprefix_ = self.recipientCity_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientCity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientCity>%s</%srecipientCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientCity), input_name='recipientCity')), namespaceprefix_ , eol_))
        if self.recipientContactName is not None:
            namespaceprefix_ = self.recipientContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientContactName>%s</%srecipientContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientContactName), input_name='recipientContactName')), namespaceprefix_ , eol_))
        if self.recipientCountry is not None:
            namespaceprefix_ = self.recipientCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientCountry>%s</%srecipientCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientCountry), input_name='recipientCountry')), namespaceprefix_ , eol_))
        if self.recipientCountryName is not None:
            namespaceprefix_ = self.recipientCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientCountryName>%s</%srecipientCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientCountryName), input_name='recipientCountryName')), namespaceprefix_ , eol_))
        if self.recipientEmail is not None:
            namespaceprefix_ = self.recipientEmail_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientEmail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientEmail>%s</%srecipientEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientEmail), input_name='recipientEmail')), namespaceprefix_ , eol_))
        if self.recipientMobilePhone is not None:
            namespaceprefix_ = self.recipientMobilePhone_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientMobilePhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientMobilePhone>%s</%srecipientMobilePhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientMobilePhone), input_name='recipientMobilePhone')), namespaceprefix_ , eol_))
        if self.recipientName is not None:
            namespaceprefix_ = self.recipientName_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientName>%s</%srecipientName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientName), input_name='recipientName')), namespaceprefix_ , eol_))
        if self.recipientName2 is not None:
            namespaceprefix_ = self.recipientName2_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientName2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientName2>%s</%srecipientName2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientName2), input_name='recipientName2')), namespaceprefix_ , eol_))
        if self.recipientPhone is not None:
            namespaceprefix_ = self.recipientPhone_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientPhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientPhone>%s</%srecipientPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientPhone), input_name='recipientPhone')), namespaceprefix_ , eol_))
        if self.recipientPreAlert is not None:
            namespaceprefix_ = self.recipientPreAlert_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientPreAlert_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientPreAlert>%s</%srecipientPreAlert>%s' % (namespaceprefix_ , self.gds_format_integer(self.recipientPreAlert, input_name='recipientPreAlert'), namespaceprefix_ , eol_))
        if self.recipientZipCode is not None:
            namespaceprefix_ = self.recipientZipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientZipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientZipCode>%s</%srecipientZipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientZipCode), input_name='recipientZipCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'recipientAdress1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientAdress1')
            value_ = self.gds_validate_string(value_, node, 'recipientAdress1')
            self.recipientAdress1 = value_
            self.recipientAdress1_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientAdress2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientAdress2')
            value_ = self.gds_validate_string(value_, node, 'recipientAdress2')
            self.recipientAdress2 = value_
            self.recipientAdress2_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientCity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientCity')
            value_ = self.gds_validate_string(value_, node, 'recipientCity')
            self.recipientCity = value_
            self.recipientCity_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientContactName')
            value_ = self.gds_validate_string(value_, node, 'recipientContactName')
            self.recipientContactName = value_
            self.recipientContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientCountry')
            value_ = self.gds_validate_string(value_, node, 'recipientCountry')
            self.recipientCountry = value_
            self.recipientCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientCountryName')
            value_ = self.gds_validate_string(value_, node, 'recipientCountryName')
            self.recipientCountryName = value_
            self.recipientCountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientEmail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientEmail')
            value_ = self.gds_validate_string(value_, node, 'recipientEmail')
            self.recipientEmail = value_
            self.recipientEmail_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientMobilePhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientMobilePhone')
            value_ = self.gds_validate_string(value_, node, 'recipientMobilePhone')
            self.recipientMobilePhone = value_
            self.recipientMobilePhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientName')
            value_ = self.gds_validate_string(value_, node, 'recipientName')
            self.recipientName = value_
            self.recipientName_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientName2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientName2')
            value_ = self.gds_validate_string(value_, node, 'recipientName2')
            self.recipientName2 = value_
            self.recipientName2_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientPhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientPhone')
            value_ = self.gds_validate_string(value_, node, 'recipientPhone')
            self.recipientPhone = value_
            self.recipientPhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientPreAlert' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'recipientPreAlert')
            ival_ = self.gds_validate_integer(ival_, node, 'recipientPreAlert')
            self.recipientPreAlert = ival_
            self.recipientPreAlert_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientZipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientZipCode')
            value_ = self.gds_validate_string(value_, node, 'recipientZipCode')
            self.recipientZipCode = value_
            self.recipientZipCode_nsprefix_ = child_.prefix
# end class recipientValue


class refValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, customerSkybillNumber=None, PCardTransactionNumber=None, recipientRef=None, shipperRef=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.customerSkybillNumber = customerSkybillNumber
        self.customerSkybillNumber_nsprefix_ = None
        self.PCardTransactionNumber = PCardTransactionNumber
        self.PCardTransactionNumber_nsprefix_ = None
        self.recipientRef = recipientRef
        self.recipientRef_nsprefix_ = None
        self.shipperRef = shipperRef
        self.shipperRef_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, refValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if refValue.subclass:
            return refValue.subclass(*args_, **kwargs_)
        else:
            return refValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_customerSkybillNumber(self):
        return self.customerSkybillNumber
    def set_customerSkybillNumber(self, customerSkybillNumber):
        self.customerSkybillNumber = customerSkybillNumber
    def get_PCardTransactionNumber(self):
        return self.PCardTransactionNumber
    def set_PCardTransactionNumber(self, PCardTransactionNumber):
        self.PCardTransactionNumber = PCardTransactionNumber
    def get_recipientRef(self):
        return self.recipientRef
    def set_recipientRef(self, recipientRef):
        self.recipientRef = recipientRef
    def get_shipperRef(self):
        return self.shipperRef
    def set_shipperRef(self, shipperRef):
        self.shipperRef = shipperRef
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.customerSkybillNumber is not None or
            self.PCardTransactionNumber is not None or
            self.recipientRef is not None or
            self.shipperRef is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='refValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('refValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'refValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='refValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='refValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='refValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='refValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.customerSkybillNumber is not None:
            namespaceprefix_ = self.customerSkybillNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.customerSkybillNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerSkybillNumber>%s</%scustomerSkybillNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerSkybillNumber), input_name='customerSkybillNumber')), namespaceprefix_ , eol_))
        if self.PCardTransactionNumber is not None:
            namespaceprefix_ = self.PCardTransactionNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.PCardTransactionNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPCardTransactionNumber>%s</%sPCardTransactionNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.PCardTransactionNumber), input_name='PCardTransactionNumber')), namespaceprefix_ , eol_))
        if self.recipientRef is not None:
            namespaceprefix_ = self.recipientRef_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientRef>%s</%srecipientRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientRef), input_name='recipientRef')), namespaceprefix_ , eol_))
        if self.shipperRef is not None:
            namespaceprefix_ = self.shipperRef_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperRef>%s</%sshipperRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperRef), input_name='shipperRef')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'customerSkybillNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerSkybillNumber')
            value_ = self.gds_validate_string(value_, node, 'customerSkybillNumber')
            self.customerSkybillNumber = value_
            self.customerSkybillNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'PCardTransactionNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'PCardTransactionNumber')
            value_ = self.gds_validate_string(value_, node, 'PCardTransactionNumber')
            self.PCardTransactionNumber = value_
            self.PCardTransactionNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientRef')
            value_ = self.gds_validate_string(value_, node, 'recipientRef')
            self.recipientRef = value_
            self.recipientRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperRef')
            value_ = self.gds_validate_string(value_, node, 'shipperRef')
            self.shipperRef = value_
            self.shipperRef_nsprefix_ = child_.prefix
# end class refValue


class skybillValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, bulkNumber=None, codCurrency=None, codValue=None, content1=None, content2=None, content3=None, content4=None, content5=None, customsCurrency=None, customsValue=None, evtCode=None, insuredCurrency=None, insuredValue=None, latitude=None, longitude=None, masterSkybillNumber=None, objectType=None, portCurrency=None, portValue=None, productCode=None, qualite=None, service=None, shipDate=None, shipHour=None, skybillRank=None, source=None, weight=None, weightUnit=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.bulkNumber = bulkNumber
        self.bulkNumber_nsprefix_ = None
        self.codCurrency = codCurrency
        self.codCurrency_nsprefix_ = None
        self.codValue = codValue
        self.codValue_nsprefix_ = None
        self.content1 = content1
        self.content1_nsprefix_ = None
        self.content2 = content2
        self.content2_nsprefix_ = None
        self.content3 = content3
        self.content3_nsprefix_ = None
        self.content4 = content4
        self.content4_nsprefix_ = None
        self.content5 = content5
        self.content5_nsprefix_ = None
        self.customsCurrency = customsCurrency
        self.customsCurrency_nsprefix_ = None
        self.customsValue = customsValue
        self.customsValue_nsprefix_ = None
        self.evtCode = evtCode
        self.evtCode_nsprefix_ = None
        self.insuredCurrency = insuredCurrency
        self.insuredCurrency_nsprefix_ = None
        self.insuredValue = insuredValue
        self.insuredValue_nsprefix_ = None
        self.latitude = latitude
        self.latitude_nsprefix_ = None
        self.longitude = longitude
        self.longitude_nsprefix_ = None
        self.masterSkybillNumber = masterSkybillNumber
        self.masterSkybillNumber_nsprefix_ = None
        self.objectType = objectType
        self.objectType_nsprefix_ = None
        self.portCurrency = portCurrency
        self.portCurrency_nsprefix_ = None
        self.portValue = portValue
        self.portValue_nsprefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        self.qualite = qualite
        self.qualite_nsprefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        if isinstance(shipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(shipDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = shipDate
        self.shipDate = initvalue_
        self.shipDate_nsprefix_ = None
        self.shipHour = shipHour
        self.shipHour_nsprefix_ = None
        self.skybillRank = skybillRank
        self.skybillRank_nsprefix_ = None
        self.source = source
        self.source_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.weightUnit = weightUnit
        self.weightUnit_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillValue.subclass:
            return skybillValue.subclass(*args_, **kwargs_)
        else:
            return skybillValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_bulkNumber(self):
        return self.bulkNumber
    def set_bulkNumber(self, bulkNumber):
        self.bulkNumber = bulkNumber
    def get_codCurrency(self):
        return self.codCurrency
    def set_codCurrency(self, codCurrency):
        self.codCurrency = codCurrency
    def get_codValue(self):
        return self.codValue
    def set_codValue(self, codValue):
        self.codValue = codValue
    def get_content1(self):
        return self.content1
    def set_content1(self, content1):
        self.content1 = content1
    def get_content2(self):
        return self.content2
    def set_content2(self, content2):
        self.content2 = content2
    def get_content3(self):
        return self.content3
    def set_content3(self, content3):
        self.content3 = content3
    def get_content4(self):
        return self.content4
    def set_content4(self, content4):
        self.content4 = content4
    def get_content5(self):
        return self.content5
    def set_content5(self, content5):
        self.content5 = content5
    def get_customsCurrency(self):
        return self.customsCurrency
    def set_customsCurrency(self, customsCurrency):
        self.customsCurrency = customsCurrency
    def get_customsValue(self):
        return self.customsValue
    def set_customsValue(self, customsValue):
        self.customsValue = customsValue
    def get_evtCode(self):
        return self.evtCode
    def set_evtCode(self, evtCode):
        self.evtCode = evtCode
    def get_insuredCurrency(self):
        return self.insuredCurrency
    def set_insuredCurrency(self, insuredCurrency):
        self.insuredCurrency = insuredCurrency
    def get_insuredValue(self):
        return self.insuredValue
    def set_insuredValue(self, insuredValue):
        self.insuredValue = insuredValue
    def get_latitude(self):
        return self.latitude
    def set_latitude(self, latitude):
        self.latitude = latitude
    def get_longitude(self):
        return self.longitude
    def set_longitude(self, longitude):
        self.longitude = longitude
    def get_masterSkybillNumber(self):
        return self.masterSkybillNumber
    def set_masterSkybillNumber(self, masterSkybillNumber):
        self.masterSkybillNumber = masterSkybillNumber
    def get_objectType(self):
        return self.objectType
    def set_objectType(self, objectType):
        self.objectType = objectType
    def get_portCurrency(self):
        return self.portCurrency
    def set_portCurrency(self, portCurrency):
        self.portCurrency = portCurrency
    def get_portValue(self):
        return self.portValue
    def set_portValue(self, portValue):
        self.portValue = portValue
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_qualite(self):
        return self.qualite
    def set_qualite(self, qualite):
        self.qualite = qualite
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_shipDate(self):
        return self.shipDate
    def set_shipDate(self, shipDate):
        self.shipDate = shipDate
    def get_shipHour(self):
        return self.shipHour
    def set_shipHour(self, shipHour):
        self.shipHour = shipHour
    def get_skybillRank(self):
        return self.skybillRank
    def set_skybillRank(self, skybillRank):
        self.skybillRank = skybillRank
    def get_source(self):
        return self.source
    def set_source(self, source):
        self.source = source
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_weightUnit(self):
        return self.weightUnit
    def set_weightUnit(self, weightUnit):
        self.weightUnit = weightUnit
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.bulkNumber is not None or
            self.codCurrency is not None or
            self.codValue is not None or
            self.content1 is not None or
            self.content2 is not None or
            self.content3 is not None or
            self.content4 is not None or
            self.content5 is not None or
            self.customsCurrency is not None or
            self.customsValue is not None or
            self.evtCode is not None or
            self.insuredCurrency is not None or
            self.insuredValue is not None or
            self.latitude is not None or
            self.longitude is not None or
            self.masterSkybillNumber is not None or
            self.objectType is not None or
            self.portCurrency is not None or
            self.portValue is not None or
            self.productCode is not None or
            self.qualite is not None or
            self.service is not None or
            self.shipDate is not None or
            self.shipHour is not None or
            self.skybillRank is not None or
            self.source is not None or
            self.weight is not None or
            self.weightUnit is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.bulkNumber is not None:
            namespaceprefix_ = self.bulkNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.bulkNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbulkNumber>%s</%sbulkNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.bulkNumber), input_name='bulkNumber')), namespaceprefix_ , eol_))
        if self.codCurrency is not None:
            namespaceprefix_ = self.codCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.codCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodCurrency>%s</%scodCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codCurrency), input_name='codCurrency')), namespaceprefix_ , eol_))
        if self.codValue is not None:
            namespaceprefix_ = self.codValue_nsprefix_ + ':' if (UseCapturedNS_ and self.codValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodValue>%s</%scodValue>%s' % (namespaceprefix_ , self.gds_format_float(self.codValue, input_name='codValue'), namespaceprefix_ , eol_))
        if self.content1 is not None:
            namespaceprefix_ = self.content1_nsprefix_ + ':' if (UseCapturedNS_ and self.content1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent1>%s</%scontent1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content1), input_name='content1')), namespaceprefix_ , eol_))
        if self.content2 is not None:
            namespaceprefix_ = self.content2_nsprefix_ + ':' if (UseCapturedNS_ and self.content2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent2>%s</%scontent2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content2), input_name='content2')), namespaceprefix_ , eol_))
        if self.content3 is not None:
            namespaceprefix_ = self.content3_nsprefix_ + ':' if (UseCapturedNS_ and self.content3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent3>%s</%scontent3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content3), input_name='content3')), namespaceprefix_ , eol_))
        if self.content4 is not None:
            namespaceprefix_ = self.content4_nsprefix_ + ':' if (UseCapturedNS_ and self.content4_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent4>%s</%scontent4>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content4), input_name='content4')), namespaceprefix_ , eol_))
        if self.content5 is not None:
            namespaceprefix_ = self.content5_nsprefix_ + ':' if (UseCapturedNS_ and self.content5_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent5>%s</%scontent5>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content5), input_name='content5')), namespaceprefix_ , eol_))
        if self.customsCurrency is not None:
            namespaceprefix_ = self.customsCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.customsCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsCurrency>%s</%scustomsCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customsCurrency), input_name='customsCurrency')), namespaceprefix_ , eol_))
        if self.customsValue is not None:
            namespaceprefix_ = self.customsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customsValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsValue>%s</%scustomsValue>%s' % (namespaceprefix_ , self.gds_format_float(self.customsValue, input_name='customsValue'), namespaceprefix_ , eol_))
        if self.evtCode is not None:
            namespaceprefix_ = self.evtCode_nsprefix_ + ':' if (UseCapturedNS_ and self.evtCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sevtCode>%s</%sevtCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.evtCode), input_name='evtCode')), namespaceprefix_ , eol_))
        if self.insuredCurrency is not None:
            namespaceprefix_ = self.insuredCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.insuredCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuredCurrency>%s</%sinsuredCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.insuredCurrency), input_name='insuredCurrency')), namespaceprefix_ , eol_))
        if self.insuredValue is not None:
            namespaceprefix_ = self.insuredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.insuredValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuredValue>%s</%sinsuredValue>%s' % (namespaceprefix_ , self.gds_format_float(self.insuredValue, input_name='insuredValue'), namespaceprefix_ , eol_))
        if self.latitude is not None:
            namespaceprefix_ = self.latitude_nsprefix_ + ':' if (UseCapturedNS_ and self.latitude_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slatitude>%s</%slatitude>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.latitude), input_name='latitude')), namespaceprefix_ , eol_))
        if self.longitude is not None:
            namespaceprefix_ = self.longitude_nsprefix_ + ':' if (UseCapturedNS_ and self.longitude_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slongitude>%s</%slongitude>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.longitude), input_name='longitude')), namespaceprefix_ , eol_))
        if self.masterSkybillNumber is not None:
            namespaceprefix_ = self.masterSkybillNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.masterSkybillNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smasterSkybillNumber>%s</%smasterSkybillNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.masterSkybillNumber), input_name='masterSkybillNumber')), namespaceprefix_ , eol_))
        if self.objectType is not None:
            namespaceprefix_ = self.objectType_nsprefix_ + ':' if (UseCapturedNS_ and self.objectType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjectType>%s</%sobjectType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.objectType), input_name='objectType')), namespaceprefix_ , eol_))
        if self.portCurrency is not None:
            namespaceprefix_ = self.portCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.portCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sportCurrency>%s</%sportCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.portCurrency), input_name='portCurrency')), namespaceprefix_ , eol_))
        if self.portValue is not None:
            namespaceprefix_ = self.portValue_nsprefix_ + ':' if (UseCapturedNS_ and self.portValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sportValue>%s</%sportValue>%s' % (namespaceprefix_ , self.gds_format_float(self.portValue, input_name='portValue'), namespaceprefix_ , eol_))
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.qualite is not None:
            namespaceprefix_ = self.qualite_nsprefix_ + ':' if (UseCapturedNS_ and self.qualite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squalite>%s</%squalite>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.qualite), input_name='qualite')), namespaceprefix_ , eol_))
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sservice>%s</%sservice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.service), input_name='service')), namespaceprefix_ , eol_))
        if self.shipDate is not None:
            namespaceprefix_ = self.shipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.shipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipDate>%s</%sshipDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.shipDate, input_name='shipDate'), namespaceprefix_ , eol_))
        if self.shipHour is not None:
            namespaceprefix_ = self.shipHour_nsprefix_ + ':' if (UseCapturedNS_ and self.shipHour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipHour>%s</%sshipHour>%s' % (namespaceprefix_ , self.gds_format_integer(self.shipHour, input_name='shipHour'), namespaceprefix_ , eol_))
        if self.skybillRank is not None:
            namespaceprefix_ = self.skybillRank_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillRank_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybillRank>%s</%sskybillRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybillRank), input_name='skybillRank')), namespaceprefix_ , eol_))
        if self.source is not None:
            namespaceprefix_ = self.source_nsprefix_ + ':' if (UseCapturedNS_ and self.source_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource>%s</%ssource>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.source), input_name='source')), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
        if self.weightUnit is not None:
            namespaceprefix_ = self.weightUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.weightUnit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweightUnit>%s</%sweightUnit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.weightUnit), input_name='weightUnit')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'bulkNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'bulkNumber')
            value_ = self.gds_validate_string(value_, node, 'bulkNumber')
            self.bulkNumber = value_
            self.bulkNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'codCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codCurrency')
            value_ = self.gds_validate_string(value_, node, 'codCurrency')
            self.codCurrency = value_
            self.codCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'codValue' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'codValue')
            fval_ = self.gds_validate_float(fval_, node, 'codValue')
            self.codValue = fval_
            self.codValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'content1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content1')
            value_ = self.gds_validate_string(value_, node, 'content1')
            self.content1 = value_
            self.content1_nsprefix_ = child_.prefix
        elif nodeName_ == 'content2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content2')
            value_ = self.gds_validate_string(value_, node, 'content2')
            self.content2 = value_
            self.content2_nsprefix_ = child_.prefix
        elif nodeName_ == 'content3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content3')
            value_ = self.gds_validate_string(value_, node, 'content3')
            self.content3 = value_
            self.content3_nsprefix_ = child_.prefix
        elif nodeName_ == 'content4':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content4')
            value_ = self.gds_validate_string(value_, node, 'content4')
            self.content4 = value_
            self.content4_nsprefix_ = child_.prefix
        elif nodeName_ == 'content5':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content5')
            value_ = self.gds_validate_string(value_, node, 'content5')
            self.content5 = value_
            self.content5_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customsCurrency')
            value_ = self.gds_validate_string(value_, node, 'customsCurrency')
            self.customsCurrency = value_
            self.customsCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsValue' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'customsValue')
            fval_ = self.gds_validate_float(fval_, node, 'customsValue')
            self.customsValue = fval_
            self.customsValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'evtCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'evtCode')
            value_ = self.gds_validate_string(value_, node, 'evtCode')
            self.evtCode = value_
            self.evtCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuredCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'insuredCurrency')
            value_ = self.gds_validate_string(value_, node, 'insuredCurrency')
            self.insuredCurrency = value_
            self.insuredCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuredValue' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'insuredValue')
            fval_ = self.gds_validate_float(fval_, node, 'insuredValue')
            self.insuredValue = fval_
            self.insuredValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'latitude':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'latitude')
            value_ = self.gds_validate_string(value_, node, 'latitude')
            self.latitude = value_
            self.latitude_nsprefix_ = child_.prefix
        elif nodeName_ == 'longitude':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'longitude')
            value_ = self.gds_validate_string(value_, node, 'longitude')
            self.longitude = value_
            self.longitude_nsprefix_ = child_.prefix
        elif nodeName_ == 'masterSkybillNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'masterSkybillNumber')
            value_ = self.gds_validate_string(value_, node, 'masterSkybillNumber')
            self.masterSkybillNumber = value_
            self.masterSkybillNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'objectType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'objectType')
            value_ = self.gds_validate_string(value_, node, 'objectType')
            self.objectType = value_
            self.objectType_nsprefix_ = child_.prefix
        elif nodeName_ == 'portCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'portCurrency')
            value_ = self.gds_validate_string(value_, node, 'portCurrency')
            self.portCurrency = value_
            self.portCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'portValue' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'portValue')
            fval_ = self.gds_validate_float(fval_, node, 'portValue')
            self.portValue = fval_
            self.portValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'qualite':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'qualite')
            value_ = self.gds_validate_string(value_, node, 'qualite')
            self.qualite = value_
            self.qualite_nsprefix_ = child_.prefix
        elif nodeName_ == 'service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'service')
            value_ = self.gds_validate_string(value_, node, 'service')
            self.service = value_
            self.service_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.shipDate = dval_
            self.shipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipHour' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'shipHour')
            ival_ = self.gds_validate_integer(ival_, node, 'shipHour')
            self.shipHour = ival_
            self.shipHour_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybillRank':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybillRank')
            value_ = self.gds_validate_string(value_, node, 'skybillRank')
            self.skybillRank = value_
            self.skybillRank_nsprefix_ = child_.prefix
        elif nodeName_ == 'source':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'source')
            value_ = self.gds_validate_string(value_, node, 'source')
            self.source = value_
            self.source_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'weightUnit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'weightUnit')
            value_ = self.gds_validate_string(value_, node, 'weightUnit')
            self.weightUnit = value_
            self.weightUnit_nsprefix_ = child_.prefix
# end class skybillValue


class skybillParamsValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, duplicata=None, mode=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.duplicata = duplicata
        self.duplicata_nsprefix_ = None
        self.mode = mode
        self.mode_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillParamsValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillParamsValue.subclass:
            return skybillParamsValue.subclass(*args_, **kwargs_)
        else:
            return skybillParamsValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_duplicata(self):
        return self.duplicata
    def set_duplicata(self, duplicata):
        self.duplicata = duplicata
    def get_mode(self):
        return self.mode
    def set_mode(self, mode):
        self.mode = mode
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.duplicata is not None or
            self.mode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillParamsValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillParamsValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillParamsValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillParamsValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillParamsValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillParamsValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillParamsValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.duplicata is not None:
            namespaceprefix_ = self.duplicata_nsprefix_ + ':' if (UseCapturedNS_ and self.duplicata_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sduplicata>%s</%sduplicata>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.duplicata), input_name='duplicata')), namespaceprefix_ , eol_))
        if self.mode is not None:
            namespaceprefix_ = self.mode_nsprefix_ + ':' if (UseCapturedNS_ and self.mode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smode>%s</%smode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mode), input_name='mode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'duplicata':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'duplicata')
            value_ = self.gds_validate_string(value_, node, 'duplicata')
            self.duplicata = value_
            self.duplicata_nsprefix_ = child_.prefix
        elif nodeName_ == 'mode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mode')
            value_ = self.gds_validate_string(value_, node, 'mode')
            self.mode = value_
            self.mode_nsprefix_ = child_.prefix
# end class skybillParamsValue


class scheduledValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, appointmentValue=None, expirationDate=None, sellByDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.appointmentValue = appointmentValue
        self.appointmentValue_nsprefix_ = None
        if isinstance(expirationDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(expirationDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = expirationDate
        self.expirationDate = initvalue_
        self.expirationDate_nsprefix_ = None
        if isinstance(sellByDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(sellByDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = sellByDate
        self.sellByDate = initvalue_
        self.sellByDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, scheduledValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if scheduledValue.subclass:
            return scheduledValue.subclass(*args_, **kwargs_)
        else:
            return scheduledValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_appointmentValue(self):
        return self.appointmentValue
    def set_appointmentValue(self, appointmentValue):
        self.appointmentValue = appointmentValue
    def get_expirationDate(self):
        return self.expirationDate
    def set_expirationDate(self, expirationDate):
        self.expirationDate = expirationDate
    def get_sellByDate(self):
        return self.sellByDate
    def set_sellByDate(self, sellByDate):
        self.sellByDate = sellByDate
    def _hasContent(self):
        if (
            self.appointmentValue is not None or
            self.expirationDate is not None or
            self.sellByDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='scheduledValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('scheduledValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'scheduledValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='scheduledValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='scheduledValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='scheduledValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='scheduledValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.appointmentValue is not None:
            namespaceprefix_ = self.appointmentValue_nsprefix_ + ':' if (UseCapturedNS_ and self.appointmentValue_nsprefix_) else ''
            self.appointmentValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='appointmentValue', pretty_print=pretty_print)
        if self.expirationDate is not None:
            namespaceprefix_ = self.expirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.expirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexpirationDate>%s</%sexpirationDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.expirationDate, input_name='expirationDate'), namespaceprefix_ , eol_))
        if self.sellByDate is not None:
            namespaceprefix_ = self.sellByDate_nsprefix_ + ':' if (UseCapturedNS_ and self.sellByDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssellByDate>%s</%ssellByDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.sellByDate, input_name='sellByDate'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'appointmentValue':
            obj_ = appointmentValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.appointmentValue = obj_
            obj_.original_tagname_ = 'appointmentValue'
        elif nodeName_ == 'expirationDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.expirationDate = dval_
            self.expirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'sellByDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.sellByDate = dval_
            self.sellByDate_nsprefix_ = child_.prefix
# end class scheduledValue


class appointmentValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, timeSlotEndDate=None, timeSlotStartDate=None, timeSlotTariffLevel=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if isinstance(timeSlotEndDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(timeSlotEndDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = timeSlotEndDate
        self.timeSlotEndDate = initvalue_
        self.timeSlotEndDate_nsprefix_ = None
        if isinstance(timeSlotStartDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(timeSlotStartDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = timeSlotStartDate
        self.timeSlotStartDate = initvalue_
        self.timeSlotStartDate_nsprefix_ = None
        self.timeSlotTariffLevel = timeSlotTariffLevel
        self.timeSlotTariffLevel_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, appointmentValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if appointmentValue.subclass:
            return appointmentValue.subclass(*args_, **kwargs_)
        else:
            return appointmentValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_timeSlotEndDate(self):
        return self.timeSlotEndDate
    def set_timeSlotEndDate(self, timeSlotEndDate):
        self.timeSlotEndDate = timeSlotEndDate
    def get_timeSlotStartDate(self):
        return self.timeSlotStartDate
    def set_timeSlotStartDate(self, timeSlotStartDate):
        self.timeSlotStartDate = timeSlotStartDate
    def get_timeSlotTariffLevel(self):
        return self.timeSlotTariffLevel
    def set_timeSlotTariffLevel(self, timeSlotTariffLevel):
        self.timeSlotTariffLevel = timeSlotTariffLevel
    def _hasContent(self):
        if (
            self.timeSlotEndDate is not None or
            self.timeSlotStartDate is not None or
            self.timeSlotTariffLevel is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='appointmentValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('appointmentValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'appointmentValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='appointmentValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='appointmentValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='appointmentValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='appointmentValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.timeSlotEndDate is not None:
            namespaceprefix_ = self.timeSlotEndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.timeSlotEndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stimeSlotEndDate>%s</%stimeSlotEndDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.timeSlotEndDate, input_name='timeSlotEndDate'), namespaceprefix_ , eol_))
        if self.timeSlotStartDate is not None:
            namespaceprefix_ = self.timeSlotStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.timeSlotStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stimeSlotStartDate>%s</%stimeSlotStartDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.timeSlotStartDate, input_name='timeSlotStartDate'), namespaceprefix_ , eol_))
        if self.timeSlotTariffLevel is not None:
            namespaceprefix_ = self.timeSlotTariffLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.timeSlotTariffLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stimeSlotTariffLevel>%s</%stimeSlotTariffLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.timeSlotTariffLevel), input_name='timeSlotTariffLevel')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'timeSlotEndDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.timeSlotEndDate = dval_
            self.timeSlotEndDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'timeSlotStartDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.timeSlotStartDate = dval_
            self.timeSlotStartDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'timeSlotTariffLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'timeSlotTariffLevel')
            value_ = self.gds_validate_string(value_, node, 'timeSlotTariffLevel')
            self.timeSlotTariffLevel = value_
            self.timeSlotTariffLevel_nsprefix_ = child_.prefix
# end class appointmentValue


class resultExpeditionValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ESDFullNumber=None, ESDNumber=None, errorCode=None, errorMessage=None, pickupDate=None, skybill=None, skybillNumber=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ESDFullNumber = ESDFullNumber
        self.ESDFullNumber_nsprefix_ = None
        self.ESDNumber = ESDNumber
        self.ESDNumber_nsprefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        if isinstance(pickupDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(pickupDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = pickupDate
        self.pickupDate = initvalue_
        self.pickupDate_nsprefix_ = None
        self.skybill = skybill
        self.skybill_nsprefix_ = None
        self.skybillNumber = skybillNumber
        self.skybillNumber_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultExpeditionValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultExpeditionValue.subclass:
            return resultExpeditionValue.subclass(*args_, **kwargs_)
        else:
            return resultExpeditionValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ESDFullNumber(self):
        return self.ESDFullNumber
    def set_ESDFullNumber(self, ESDFullNumber):
        self.ESDFullNumber = ESDFullNumber
    def get_ESDNumber(self):
        return self.ESDNumber
    def set_ESDNumber(self, ESDNumber):
        self.ESDNumber = ESDNumber
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_pickupDate(self):
        return self.pickupDate
    def set_pickupDate(self, pickupDate):
        self.pickupDate = pickupDate
    def get_skybill(self):
        return self.skybill
    def set_skybill(self, skybill):
        self.skybill = skybill
    def get_skybillNumber(self):
        return self.skybillNumber
    def set_skybillNumber(self, skybillNumber):
        self.skybillNumber = skybillNumber
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.ESDFullNumber is not None or
            self.ESDNumber is not None or
            self.errorCode is not None or
            self.errorMessage is not None or
            self.pickupDate is not None or
            self.skybill is not None or
            self.skybillNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultExpeditionValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultExpeditionValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultExpeditionValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultExpeditionValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultExpeditionValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultExpeditionValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultExpeditionValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ESDFullNumber is not None:
            namespaceprefix_ = self.ESDFullNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ESDFullNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sESDFullNumber>%s</%sESDFullNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ESDFullNumber), input_name='ESDFullNumber')), namespaceprefix_ , eol_))
        if self.ESDNumber is not None:
            namespaceprefix_ = self.ESDNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ESDNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sESDNumber>%s</%sESDNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ESDNumber), input_name='ESDNumber')), namespaceprefix_ , eol_))
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
        if self.pickupDate is not None:
            namespaceprefix_ = self.pickupDate_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupDate>%s</%spickupDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.pickupDate, input_name='pickupDate'), namespaceprefix_ , eol_))
        if self.skybill is not None:
            namespaceprefix_ = self.skybill_nsprefix_ + ':' if (UseCapturedNS_ and self.skybill_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybill>%s</%sskybill>%s' % (namespaceprefix_ , self.gds_format_base64(self.skybill, input_name='skybill'), namespaceprefix_ , eol_))
        if self.skybillNumber is not None:
            namespaceprefix_ = self.skybillNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybillNumber>%s</%sskybillNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybillNumber), input_name='skybillNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ESDFullNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ESDFullNumber')
            value_ = self.gds_validate_string(value_, node, 'ESDFullNumber')
            self.ESDFullNumber = value_
            self.ESDFullNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ESDNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ESDNumber')
            value_ = self.gds_validate_string(value_, node, 'ESDNumber')
            self.ESDNumber = value_
            self.ESDNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.pickupDate = dval_
            self.pickupDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybill':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'skybill')
            else:
                bval_ = None
            self.skybill = bval_
            self.skybill_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybillNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybillNumber')
            value_ = self.gds_validate_string(value_, node, 'skybillNumber')
            self.skybillNumber = value_
            self.skybillNumber_nsprefix_ = child_.prefix
# end class resultExpeditionValue


class esdWithRefClientValue(esdValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = esdValue
    def __init__(self, closingDateTime=None, height=None, length=None, retrievalDateTime=None, shipperBuildingFloor=None, shipperCarriesCode=None, shipperServiceDirection=None, specificInstructions=None, width=None, ltAImprimerParChronopost=None, nombreDePassageMaximum=None, refEsdClient=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("esdWithRefClientValue"), self).__init__(closingDateTime, height, length, retrievalDateTime, shipperBuildingFloor, shipperCarriesCode, shipperServiceDirection, specificInstructions, width, extensiontype_,  **kwargs_)
        self.ltAImprimerParChronopost = ltAImprimerParChronopost
        self.ltAImprimerParChronopost_nsprefix_ = None
        self.nombreDePassageMaximum = nombreDePassageMaximum
        self.nombreDePassageMaximum_nsprefix_ = None
        self.refEsdClient = refEsdClient
        self.refEsdClient_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, esdWithRefClientValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if esdWithRefClientValue.subclass:
            return esdWithRefClientValue.subclass(*args_, **kwargs_)
        else:
            return esdWithRefClientValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ltAImprimerParChronopost(self):
        return self.ltAImprimerParChronopost
    def set_ltAImprimerParChronopost(self, ltAImprimerParChronopost):
        self.ltAImprimerParChronopost = ltAImprimerParChronopost
    def get_nombreDePassageMaximum(self):
        return self.nombreDePassageMaximum
    def set_nombreDePassageMaximum(self, nombreDePassageMaximum):
        self.nombreDePassageMaximum = nombreDePassageMaximum
    def get_refEsdClient(self):
        return self.refEsdClient
    def set_refEsdClient(self, refEsdClient):
        self.refEsdClient = refEsdClient
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.ltAImprimerParChronopost is not None or
            self.nombreDePassageMaximum is not None or
            self.refEsdClient is not None or
            super(esdWithRefClientValue, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdWithRefClientValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('esdWithRefClientValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'esdWithRefClientValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdWithRefClientValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='esdWithRefClientValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='esdWithRefClientValue'):
        super(esdWithRefClientValue, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdWithRefClientValue')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdWithRefClientValue', fromsubclass_=False, pretty_print=True):
        super(esdWithRefClientValue, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ltAImprimerParChronopost is not None:
            namespaceprefix_ = self.ltAImprimerParChronopost_nsprefix_ + ':' if (UseCapturedNS_ and self.ltAImprimerParChronopost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sltAImprimerParChronopost>%s</%sltAImprimerParChronopost>%s' % (namespaceprefix_ , self.gds_format_boolean(self.ltAImprimerParChronopost, input_name='ltAImprimerParChronopost'), namespaceprefix_ , eol_))
        if self.nombreDePassageMaximum is not None:
            namespaceprefix_ = self.nombreDePassageMaximum_nsprefix_ + ':' if (UseCapturedNS_ and self.nombreDePassageMaximum_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snombreDePassageMaximum>%s</%snombreDePassageMaximum>%s' % (namespaceprefix_ , self.gds_format_integer(self.nombreDePassageMaximum, input_name='nombreDePassageMaximum'), namespaceprefix_ , eol_))
        if self.refEsdClient is not None:
            namespaceprefix_ = self.refEsdClient_nsprefix_ + ':' if (UseCapturedNS_ and self.refEsdClient_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srefEsdClient>%s</%srefEsdClient>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.refEsdClient), input_name='refEsdClient')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(esdWithRefClientValue, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ltAImprimerParChronopost':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'ltAImprimerParChronopost')
            ival_ = self.gds_validate_boolean(ival_, node, 'ltAImprimerParChronopost')
            self.ltAImprimerParChronopost = ival_
            self.ltAImprimerParChronopost_nsprefix_ = child_.prefix
        elif nodeName_ == 'nombreDePassageMaximum' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'nombreDePassageMaximum')
            ival_ = self.gds_validate_integer(ival_, node, 'nombreDePassageMaximum')
            self.nombreDePassageMaximum = ival_
            self.nombreDePassageMaximum_nsprefix_ = child_.prefix
        elif nodeName_ == 'refEsdClient':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'refEsdClient')
            value_ = self.gds_validate_string(value_, node, 'refEsdClient')
            self.refEsdClient = value_
            self.refEsdClient_nsprefix_ = child_.prefix
        super(esdWithRefClientValue, self)._buildChildren(child_, node, nodeName_, True)
# end class esdWithRefClientValue


class esdWithRefClientValueV2(esdWithRefClientValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = esdWithRefClientValue
    def __init__(self, closingDateTime=None, height=None, length=None, retrievalDateTime=None, shipperBuildingFloor=None, shipperCarriesCode=None, shipperServiceDirection=None, specificInstructions=None, width=None, ltAImprimerParChronopost=None, nombreDePassageMaximum=None, refEsdClient=None, numberOfParcel=None, parcelsNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("esdWithRefClientValueV2"), self).__init__(closingDateTime, height, length, retrievalDateTime, shipperBuildingFloor, shipperCarriesCode, shipperServiceDirection, specificInstructions, width, ltAImprimerParChronopost, nombreDePassageMaximum, refEsdClient,  **kwargs_)
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        if parcelsNumber is None:
            self.parcelsNumber = []
        else:
            self.parcelsNumber = parcelsNumber
        self.parcelsNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, esdWithRefClientValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if esdWithRefClientValueV2.subclass:
            return esdWithRefClientValueV2.subclass(*args_, **kwargs_)
        else:
            return esdWithRefClientValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_parcelsNumber(self):
        return self.parcelsNumber
    def set_parcelsNumber(self, parcelsNumber):
        self.parcelsNumber = parcelsNumber
    def add_parcelsNumber(self, value):
        self.parcelsNumber.append(value)
    def insert_parcelsNumber_at(self, index, value):
        self.parcelsNumber.insert(index, value)
    def replace_parcelsNumber_at(self, index, value):
        self.parcelsNumber[index] = value
    def _hasContent(self):
        if (
            self.numberOfParcel is not None or
            self.parcelsNumber or
            super(esdWithRefClientValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdWithRefClientValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('esdWithRefClientValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'esdWithRefClientValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdWithRefClientValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='esdWithRefClientValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='esdWithRefClientValueV2'):
        super(esdWithRefClientValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdWithRefClientValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdWithRefClientValueV2', fromsubclass_=False, pretty_print=True):
        super(esdWithRefClientValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        for parcelsNumber_ in self.parcelsNumber:
            namespaceprefix_ = self.parcelsNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.parcelsNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sparcelsNumber>%s</%sparcelsNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(parcelsNumber_), input_name='parcelsNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(esdWithRefClientValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'parcelsNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'parcelsNumber')
            value_ = self.gds_validate_string(value_, node, 'parcelsNumber')
            self.parcelsNumber.append(value_)
            self.parcelsNumber_nsprefix_ = child_.prefix
        super(esdWithRefClientValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class esdWithRefClientValueV2


class esdValue3(esdWithRefClientValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = esdWithRefClientValue
    def __init__(self, closingDateTime=None, height=None, length=None, retrievalDateTime=None, shipperBuildingFloor=None, shipperCarriesCode=None, shipperServiceDirection=None, specificInstructions=None, width=None, ltAImprimerParChronopost=None, nombreDePassageMaximum=None, refEsdClient=None, codeDepotColReq=None, numColReq=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("esdValue3"), self).__init__(closingDateTime, height, length, retrievalDateTime, shipperBuildingFloor, shipperCarriesCode, shipperServiceDirection, specificInstructions, width, ltAImprimerParChronopost, nombreDePassageMaximum, refEsdClient,  **kwargs_)
        self.codeDepotColReq = codeDepotColReq
        self.codeDepotColReq_nsprefix_ = None
        self.numColReq = numColReq
        self.numColReq_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, esdValue3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if esdValue3.subclass:
            return esdValue3.subclass(*args_, **kwargs_)
        else:
            return esdValue3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeDepotColReq(self):
        return self.codeDepotColReq
    def set_codeDepotColReq(self, codeDepotColReq):
        self.codeDepotColReq = codeDepotColReq
    def get_numColReq(self):
        return self.numColReq
    def set_numColReq(self, numColReq):
        self.numColReq = numColReq
    def _hasContent(self):
        if (
            self.codeDepotColReq is not None or
            self.numColReq is not None or
            super(esdValue3, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdValue3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('esdValue3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'esdValue3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdValue3')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='esdValue3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='esdValue3'):
        super(esdValue3, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdValue3')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdValue3', fromsubclass_=False, pretty_print=True):
        super(esdValue3, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeDepotColReq is not None:
            namespaceprefix_ = self.codeDepotColReq_nsprefix_ + ':' if (UseCapturedNS_ and self.codeDepotColReq_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeDepotColReq>%s</%scodeDepotColReq>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeDepotColReq), input_name='codeDepotColReq')), namespaceprefix_ , eol_))
        if self.numColReq is not None:
            namespaceprefix_ = self.numColReq_nsprefix_ + ':' if (UseCapturedNS_ and self.numColReq_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumColReq>%s</%snumColReq>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.numColReq), input_name='numColReq')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(esdValue3, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeDepotColReq':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeDepotColReq')
            value_ = self.gds_validate_string(value_, node, 'codeDepotColReq')
            self.codeDepotColReq = value_
            self.codeDepotColReq_nsprefix_ = child_.prefix
        elif nodeName_ == 'numColReq':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'numColReq')
            value_ = self.gds_validate_string(value_, node, 'numColReq')
            self.numColReq = value_
            self.numColReq_nsprefix_ = child_.prefix
        super(esdValue3, self)._buildChildren(child_, node, nodeName_, True)
# end class esdValue3


class headerValueV2(headerValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = headerValue
    def __init__(self, accountNumber=None, idEmit=None, identWebPro=None, subAccount=None, iv4OrderId=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("headerValueV2"), self).__init__(accountNumber, idEmit, identWebPro, subAccount,  **kwargs_)
        self.iv4OrderId = iv4OrderId
        self.iv4OrderId_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, headerValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if headerValueV2.subclass:
            return headerValueV2.subclass(*args_, **kwargs_)
        else:
            return headerValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_iv4OrderId(self):
        return self.iv4OrderId
    def set_iv4OrderId(self, iv4OrderId):
        self.iv4OrderId = iv4OrderId
    def _hasContent(self):
        if (
            self.iv4OrderId is not None or
            super(headerValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='headerValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('headerValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'headerValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='headerValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='headerValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='headerValueV2'):
        super(headerValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='headerValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='headerValueV2', fromsubclass_=False, pretty_print=True):
        super(headerValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.iv4OrderId is not None:
            namespaceprefix_ = self.iv4OrderId_nsprefix_ + ':' if (UseCapturedNS_ and self.iv4OrderId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%siv4OrderId>%s</%siv4OrderId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.iv4OrderId), input_name='iv4OrderId')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(headerValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'iv4OrderId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'iv4OrderId')
            value_ = self.gds_validate_string(value_, node, 'iv4OrderId')
            self.iv4OrderId = value_
            self.iv4OrderId_nsprefix_ = child_.prefix
        super(headerValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class headerValueV2


class shipperValueV2(shipperValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = shipperValue
    def __init__(self, shipperAdress1=None, shipperAdress2=None, shipperCity=None, shipperCivility=None, shipperContactName=None, shipperCountry=None, shipperCountryName=None, shipperEmail=None, shipperMobilePhone=None, shipperName=None, shipperName2=None, shipperPhone=None, shipperPreAlert=None, shipperZipCode=None, shipperType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("shipperValueV2"), self).__init__(shipperAdress1, shipperAdress2, shipperCity, shipperCivility, shipperContactName, shipperCountry, shipperCountryName, shipperEmail, shipperMobilePhone, shipperName, shipperName2, shipperPhone, shipperPreAlert, shipperZipCode,  **kwargs_)
        self.shipperType = shipperType
        self.shipperType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shipperValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shipperValueV2.subclass:
            return shipperValueV2.subclass(*args_, **kwargs_)
        else:
            return shipperValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_shipperType(self):
        return self.shipperType
    def set_shipperType(self, shipperType):
        self.shipperType = shipperType
    def _hasContent(self):
        if (
            self.shipperType is not None or
            super(shipperValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shipperValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shipperValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shipperValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shipperValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shipperValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shipperValueV2'):
        super(shipperValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shipperValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shipperValueV2', fromsubclass_=False, pretty_print=True):
        super(shipperValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.shipperType is not None:
            namespaceprefix_ = self.shipperType_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperType>%s</%sshipperType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperType), input_name='shipperType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(shipperValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'shipperType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperType')
            value_ = self.gds_validate_string(value_, node, 'shipperType')
            self.shipperType = value_
            self.shipperType_nsprefix_ = child_.prefix
        super(shipperValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class shipperValueV2


class recipientValueV2(recipientValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = recipientValue
    def __init__(self, recipientAdress1=None, recipientAdress2=None, recipientCity=None, recipientContactName=None, recipientCountry=None, recipientCountryName=None, recipientEmail=None, recipientMobilePhone=None, recipientName=None, recipientName2=None, recipientPhone=None, recipientPreAlert=None, recipientZipCode=None, recipientType=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("recipientValueV2"), self).__init__(recipientAdress1, recipientAdress2, recipientCity, recipientContactName, recipientCountry, recipientCountryName, recipientEmail, recipientMobilePhone, recipientName, recipientName2, recipientPhone, recipientPreAlert, recipientZipCode,  **kwargs_)
        self.recipientType = recipientType
        self.recipientType_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, recipientValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if recipientValueV2.subclass:
            return recipientValueV2.subclass(*args_, **kwargs_)
        else:
            return recipientValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_recipientType(self):
        return self.recipientType
    def set_recipientType(self, recipientType):
        self.recipientType = recipientType
    def _hasContent(self):
        if (
            self.recipientType is not None or
            super(recipientValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='recipientValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('recipientValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'recipientValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recipientValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='recipientValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='recipientValueV2'):
        super(recipientValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recipientValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='recipientValueV2', fromsubclass_=False, pretty_print=True):
        super(recipientValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.recipientType is not None:
            namespaceprefix_ = self.recipientType_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientType>%s</%srecipientType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientType), input_name='recipientType')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(recipientValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'recipientType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientType')
            value_ = self.gds_validate_string(value_, node, 'recipientType')
            self.recipientType = value_
            self.recipientType_nsprefix_ = child_.prefix
        super(recipientValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class recipientValueV2


class refValueV2(refValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = refValue
    def __init__(self, customerSkybillNumber=None, PCardTransactionNumber=None, recipientRef=None, shipperRef=None, idRelais=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("refValueV2"), self).__init__(customerSkybillNumber, PCardTransactionNumber, recipientRef, shipperRef,  **kwargs_)
        self.idRelais = idRelais
        self.idRelais_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, refValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if refValueV2.subclass:
            return refValueV2.subclass(*args_, **kwargs_)
        else:
            return refValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_idRelais(self):
        return self.idRelais
    def set_idRelais(self, idRelais):
        self.idRelais = idRelais
    def _hasContent(self):
        if (
            self.idRelais is not None or
            super(refValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='refValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('refValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'refValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='refValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='refValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='refValueV2'):
        super(refValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='refValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='refValueV2', fromsubclass_=False, pretty_print=True):
        super(refValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.idRelais is not None:
            namespaceprefix_ = self.idRelais_nsprefix_ + ':' if (UseCapturedNS_ and self.idRelais_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidRelais>%s</%sidRelais>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.idRelais), input_name='idRelais')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(refValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'idRelais':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'idRelais')
            value_ = self.gds_validate_string(value_, node, 'idRelais')
            self.idRelais = value_
            self.idRelais_nsprefix_ = child_.prefix
        super(refValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class refValueV2


class skybillWithDimensionsValue(skybillValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = skybillValue
    def __init__(self, bulkNumber=None, codCurrency=None, codValue=None, content1=None, content2=None, content3=None, content4=None, content5=None, customsCurrency=None, customsValue=None, evtCode=None, insuredCurrency=None, insuredValue=None, latitude=None, longitude=None, masterSkybillNumber=None, objectType=None, portCurrency=None, portValue=None, productCode=None, qualite=None, service=None, shipDate=None, shipHour=None, skybillRank=None, source=None, weight=None, weightUnit=None, height=None, length=None, width=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("skybillWithDimensionsValue"), self).__init__(bulkNumber, codCurrency, codValue, content1, content2, content3, content4, content5, customsCurrency, customsValue, evtCode, insuredCurrency, insuredValue, latitude, longitude, masterSkybillNumber, objectType, portCurrency, portValue, productCode, qualite, service, shipDate, shipHour, skybillRank, source, weight, weightUnit, extensiontype_,  **kwargs_)
        self.height = height
        self.height_nsprefix_ = None
        self.length = length
        self.length_nsprefix_ = None
        self.width = width
        self.width_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillWithDimensionsValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillWithDimensionsValue.subclass:
            return skybillWithDimensionsValue.subclass(*args_, **kwargs_)
        else:
            return skybillWithDimensionsValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_height(self):
        return self.height
    def set_height(self, height):
        self.height = height
    def get_length(self):
        return self.length
    def set_length(self, length):
        self.length = length
    def get_width(self):
        return self.width
    def set_width(self, width):
        self.width = width
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.height is not None or
            self.length is not None or
            self.width is not None or
            super(skybillWithDimensionsValue, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillWithDimensionsValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillWithDimensionsValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillWithDimensionsValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillWithDimensionsValue'):
        super(skybillWithDimensionsValue, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValue')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValue', fromsubclass_=False, pretty_print=True):
        super(skybillWithDimensionsValue, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.height is not None:
            namespaceprefix_ = self.height_nsprefix_ + ':' if (UseCapturedNS_ and self.height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sheight>%s</%sheight>%s' % (namespaceprefix_ , self.gds_format_float(self.height, input_name='height'), namespaceprefix_ , eol_))
        if self.length is not None:
            namespaceprefix_ = self.length_nsprefix_ + ':' if (UseCapturedNS_ and self.length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slength>%s</%slength>%s' % (namespaceprefix_ , self.gds_format_float(self.length, input_name='length'), namespaceprefix_ , eol_))
        if self.width is not None:
            namespaceprefix_ = self.width_nsprefix_ + ':' if (UseCapturedNS_ and self.width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%swidth>%s</%swidth>%s' % (namespaceprefix_ , self.gds_format_float(self.width, input_name='width'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(skybillWithDimensionsValue, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'height' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'height')
            fval_ = self.gds_validate_float(fval_, node, 'height')
            self.height = fval_
            self.height_nsprefix_ = child_.prefix
        elif nodeName_ == 'length' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'length')
            fval_ = self.gds_validate_float(fval_, node, 'length')
            self.length = fval_
            self.length_nsprefix_ = child_.prefix
        elif nodeName_ == 'width' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'width')
            fval_ = self.gds_validate_float(fval_, node, 'width')
            self.width = fval_
            self.width_nsprefix_ = child_.prefix
        super(skybillWithDimensionsValue, self)._buildChildren(child_, node, nodeName_, True)
# end class skybillWithDimensionsValue


class skybillWithDimensionsValueV2(skybillWithDimensionsValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = skybillWithDimensionsValue
    def __init__(self, bulkNumber=None, codCurrency=None, codValue=None, content1=None, content2=None, content3=None, content4=None, content5=None, customsCurrency=None, customsValue=None, evtCode=None, insuredCurrency=None, insuredValue=None, latitude=None, longitude=None, masterSkybillNumber=None, objectType=None, portCurrency=None, portValue=None, productCode=None, qualite=None, service=None, shipDate=None, shipHour=None, skybillRank=None, source=None, weight=None, weightUnit=None, height=None, length=None, width=None, as_=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("skybillWithDimensionsValueV2"), self).__init__(bulkNumber, codCurrency, codValue, content1, content2, content3, content4, content5, customsCurrency, customsValue, evtCode, insuredCurrency, insuredValue, latitude, longitude, masterSkybillNumber, objectType, portCurrency, portValue, productCode, qualite, service, shipDate, shipHour, skybillRank, source, weight, weightUnit, height, length, width, extensiontype_,  **kwargs_)
        self.as_ = as_
        self.as__nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillWithDimensionsValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillWithDimensionsValueV2.subclass:
            return skybillWithDimensionsValueV2.subclass(*args_, **kwargs_)
        else:
            return skybillWithDimensionsValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_as(self):
        return self.as_
    def set_as(self, as_):
        self.as_ = as_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.as_ is not None or
            super(skybillWithDimensionsValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillWithDimensionsValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillWithDimensionsValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillWithDimensionsValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillWithDimensionsValueV2'):
        super(skybillWithDimensionsValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV2')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV2', fromsubclass_=False, pretty_print=True):
        super(skybillWithDimensionsValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.as_ is not None:
            namespaceprefix_ = self.as__nsprefix_ + ':' if (UseCapturedNS_ and self.as__nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sas>%s</%sas>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.as_), input_name='as')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(skybillWithDimensionsValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'as':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'as')
            value_ = self.gds_validate_string(value_, node, 'as')
            self.as_ = value_
            self.as_nsprefix_ = child_.prefix
        super(skybillWithDimensionsValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class skybillWithDimensionsValueV2


class skybillWithDimensionsValueV3(skybillWithDimensionsValueV2):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = skybillWithDimensionsValueV2
    def __init__(self, bulkNumber=None, codCurrency=None, codValue=None, content1=None, content2=None, content3=None, content4=None, content5=None, customsCurrency=None, customsValue=None, evtCode=None, insuredCurrency=None, insuredValue=None, latitude=None, longitude=None, masterSkybillNumber=None, objectType=None, portCurrency=None, portValue=None, productCode=None, qualite=None, service=None, shipDate=None, shipHour=None, skybillRank=None, source=None, weight=None, weightUnit=None, height=None, length=None, width=None, as_=None, subAccount=None, toTheOrderOf=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("skybillWithDimensionsValueV3"), self).__init__(bulkNumber, codCurrency, codValue, content1, content2, content3, content4, content5, customsCurrency, customsValue, evtCode, insuredCurrency, insuredValue, latitude, longitude, masterSkybillNumber, objectType, portCurrency, portValue, productCode, qualite, service, shipDate, shipHour, skybillRank, source, weight, weightUnit, height, length, width, as_, extensiontype_,  **kwargs_)
        self.subAccount = subAccount
        self.subAccount_nsprefix_ = None
        self.toTheOrderOf = toTheOrderOf
        self.toTheOrderOf_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillWithDimensionsValueV3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillWithDimensionsValueV3.subclass:
            return skybillWithDimensionsValueV3.subclass(*args_, **kwargs_)
        else:
            return skybillWithDimensionsValueV3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_subAccount(self):
        return self.subAccount
    def set_subAccount(self, subAccount):
        self.subAccount = subAccount
    def get_toTheOrderOf(self):
        return self.toTheOrderOf
    def set_toTheOrderOf(self, toTheOrderOf):
        self.toTheOrderOf = toTheOrderOf
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.subAccount is not None or
            self.toTheOrderOf is not None or
            super(skybillWithDimensionsValueV3, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillWithDimensionsValueV3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillWithDimensionsValueV3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV3')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillWithDimensionsValueV3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillWithDimensionsValueV3'):
        super(skybillWithDimensionsValueV3, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV3')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV3', fromsubclass_=False, pretty_print=True):
        super(skybillWithDimensionsValueV3, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.subAccount is not None:
            namespaceprefix_ = self.subAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.subAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssubAccount>%s</%ssubAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.subAccount), input_name='subAccount')), namespaceprefix_ , eol_))
        if self.toTheOrderOf is not None:
            namespaceprefix_ = self.toTheOrderOf_nsprefix_ + ':' if (UseCapturedNS_ and self.toTheOrderOf_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stoTheOrderOf>%s</%stoTheOrderOf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.toTheOrderOf), input_name='toTheOrderOf')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(skybillWithDimensionsValueV3, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'subAccount':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'subAccount')
            value_ = self.gds_validate_string(value_, node, 'subAccount')
            self.subAccount = value_
            self.subAccount_nsprefix_ = child_.prefix
        elif nodeName_ == 'toTheOrderOf':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'toTheOrderOf')
            value_ = self.gds_validate_string(value_, node, 'toTheOrderOf')
            self.toTheOrderOf = value_
            self.toTheOrderOf_nsprefix_ = child_.prefix
        super(skybillWithDimensionsValueV3, self)._buildChildren(child_, node, nodeName_, True)
# end class skybillWithDimensionsValueV3


class skybillWithDimensionsValueV4(skybillWithDimensionsValueV3):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = skybillWithDimensionsValueV3
    def __init__(self, bulkNumber=None, codCurrency=None, codValue=None, content1=None, content2=None, content3=None, content4=None, content5=None, customsCurrency=None, customsValue=None, evtCode=None, insuredCurrency=None, insuredValue=None, latitude=None, longitude=None, masterSkybillNumber=None, objectType=None, portCurrency=None, portValue=None, productCode=None, qualite=None, service=None, shipDate=None, shipHour=None, skybillRank=None, source=None, weight=None, weightUnit=None, height=None, length=None, width=None, as_=None, subAccount=None, toTheOrderOf=None, skybillNumber=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("skybillWithDimensionsValueV4"), self).__init__(bulkNumber, codCurrency, codValue, content1, content2, content3, content4, content5, customsCurrency, customsValue, evtCode, insuredCurrency, insuredValue, latitude, longitude, masterSkybillNumber, objectType, portCurrency, portValue, productCode, qualite, service, shipDate, shipHour, skybillRank, source, weight, weightUnit, height, length, width, as_, subAccount, toTheOrderOf, extensiontype_,  **kwargs_)
        self.skybillNumber = skybillNumber
        self.skybillNumber_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillWithDimensionsValueV4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillWithDimensionsValueV4.subclass:
            return skybillWithDimensionsValueV4.subclass(*args_, **kwargs_)
        else:
            return skybillWithDimensionsValueV4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_skybillNumber(self):
        return self.skybillNumber
    def set_skybillNumber(self, skybillNumber):
        self.skybillNumber = skybillNumber
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.skybillNumber is not None or
            super(skybillWithDimensionsValueV4, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillWithDimensionsValueV4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillWithDimensionsValueV4':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV4')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillWithDimensionsValueV4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillWithDimensionsValueV4'):
        super(skybillWithDimensionsValueV4, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV4')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV4', fromsubclass_=False, pretty_print=True):
        super(skybillWithDimensionsValueV4, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.skybillNumber is not None:
            namespaceprefix_ = self.skybillNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybillNumber>%s</%sskybillNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybillNumber), input_name='skybillNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(skybillWithDimensionsValueV4, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'skybillNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybillNumber')
            value_ = self.gds_validate_string(value_, node, 'skybillNumber')
            self.skybillNumber = value_
            self.skybillNumber_nsprefix_ = child_.prefix
        super(skybillWithDimensionsValueV4, self)._buildChildren(child_, node, nodeName_, True)
# end class skybillWithDimensionsValueV4


class skybillWithDimensionsValueV5(skybillWithDimensionsValueV4):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = skybillWithDimensionsValueV4
    def __init__(self, bulkNumber=None, codCurrency=None, codValue=None, content1=None, content2=None, content3=None, content4=None, content5=None, customsCurrency=None, customsValue=None, evtCode=None, insuredCurrency=None, insuredValue=None, latitude=None, longitude=None, masterSkybillNumber=None, objectType=None, portCurrency=None, portValue=None, productCode=None, qualite=None, service=None, shipDate=None, shipHour=None, skybillRank=None, source=None, weight=None, weightUnit=None, height=None, length=None, width=None, as_=None, subAccount=None, toTheOrderOf=None, skybillNumber=None, carrier=None, skybillBackNumber=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("skybillWithDimensionsValueV5"), self).__init__(bulkNumber, codCurrency, codValue, content1, content2, content3, content4, content5, customsCurrency, customsValue, evtCode, insuredCurrency, insuredValue, latitude, longitude, masterSkybillNumber, objectType, portCurrency, portValue, productCode, qualite, service, shipDate, shipHour, skybillRank, source, weight, weightUnit, height, length, width, as_, subAccount, toTheOrderOf, skybillNumber, extensiontype_,  **kwargs_)
        self.carrier = carrier
        self.carrier_nsprefix_ = None
        self.skybillBackNumber = skybillBackNumber
        self.skybillBackNumber_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillWithDimensionsValueV5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillWithDimensionsValueV5.subclass:
            return skybillWithDimensionsValueV5.subclass(*args_, **kwargs_)
        else:
            return skybillWithDimensionsValueV5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_carrier(self):
        return self.carrier
    def set_carrier(self, carrier):
        self.carrier = carrier
    def get_skybillBackNumber(self):
        return self.skybillBackNumber
    def set_skybillBackNumber(self, skybillBackNumber):
        self.skybillBackNumber = skybillBackNumber
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.carrier is not None or
            self.skybillBackNumber is not None or
            super(skybillWithDimensionsValueV5, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV5', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillWithDimensionsValueV5')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillWithDimensionsValueV5':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV5')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillWithDimensionsValueV5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillWithDimensionsValueV5'):
        super(skybillWithDimensionsValueV5, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV5')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV5', fromsubclass_=False, pretty_print=True):
        super(skybillWithDimensionsValueV5, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.carrier is not None:
            namespaceprefix_ = self.carrier_nsprefix_ + ':' if (UseCapturedNS_ and self.carrier_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scarrier>%s</%scarrier>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.carrier), input_name='carrier')), namespaceprefix_ , eol_))
        if self.skybillBackNumber is not None:
            namespaceprefix_ = self.skybillBackNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillBackNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybillBackNumber>%s</%sskybillBackNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybillBackNumber), input_name='skybillBackNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(skybillWithDimensionsValueV5, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'carrier':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'carrier')
            value_ = self.gds_validate_string(value_, node, 'carrier')
            self.carrier = value_
            self.carrier_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybillBackNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybillBackNumber')
            value_ = self.gds_validate_string(value_, node, 'skybillBackNumber')
            self.skybillBackNumber = value_
            self.skybillBackNumber_nsprefix_ = child_.prefix
        super(skybillWithDimensionsValueV5, self)._buildChildren(child_, node, nodeName_, True)
# end class skybillWithDimensionsValueV5


class skybillWithDimensionsValueV6(skybillWithDimensionsValueV5):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = skybillWithDimensionsValueV5
    def __init__(self, bulkNumber=None, codCurrency=None, codValue=None, content1=None, content2=None, content3=None, content4=None, content5=None, customsCurrency=None, customsValue=None, evtCode=None, insuredCurrency=None, insuredValue=None, latitude=None, longitude=None, masterSkybillNumber=None, objectType=None, portCurrency=None, portValue=None, productCode=None, qualite=None, service=None, shipDate=None, shipHour=None, skybillRank=None, source=None, weight=None, weightUnit=None, height=None, length=None, width=None, as_=None, subAccount=None, toTheOrderOf=None, skybillNumber=None, carrier=None, skybillBackNumber=None, alternateProductCode=None, labelNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("skybillWithDimensionsValueV6"), self).__init__(bulkNumber, codCurrency, codValue, content1, content2, content3, content4, content5, customsCurrency, customsValue, evtCode, insuredCurrency, insuredValue, latitude, longitude, masterSkybillNumber, objectType, portCurrency, portValue, productCode, qualite, service, shipDate, shipHour, skybillRank, source, weight, weightUnit, height, length, width, as_, subAccount, toTheOrderOf, skybillNumber, carrier, skybillBackNumber,  **kwargs_)
        self.alternateProductCode = alternateProductCode
        self.alternateProductCode_nsprefix_ = None
        self.labelNumber = labelNumber
        self.labelNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillWithDimensionsValueV6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillWithDimensionsValueV6.subclass:
            return skybillWithDimensionsValueV6.subclass(*args_, **kwargs_)
        else:
            return skybillWithDimensionsValueV6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_alternateProductCode(self):
        return self.alternateProductCode
    def set_alternateProductCode(self, alternateProductCode):
        self.alternateProductCode = alternateProductCode
    def get_labelNumber(self):
        return self.labelNumber
    def set_labelNumber(self, labelNumber):
        self.labelNumber = labelNumber
    def _hasContent(self):
        if (
            self.alternateProductCode is not None or
            self.labelNumber is not None or
            super(skybillWithDimensionsValueV6, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV6', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillWithDimensionsValueV6')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillWithDimensionsValueV6':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV6')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillWithDimensionsValueV6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillWithDimensionsValueV6'):
        super(skybillWithDimensionsValueV6, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillWithDimensionsValueV6')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillWithDimensionsValueV6', fromsubclass_=False, pretty_print=True):
        super(skybillWithDimensionsValueV6, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.alternateProductCode is not None:
            namespaceprefix_ = self.alternateProductCode_nsprefix_ + ':' if (UseCapturedNS_ and self.alternateProductCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%salternateProductCode>%s</%salternateProductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.alternateProductCode), input_name='alternateProductCode')), namespaceprefix_ , eol_))
        if self.labelNumber is not None:
            namespaceprefix_ = self.labelNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.labelNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slabelNumber>%s</%slabelNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.labelNumber), input_name='labelNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(skybillWithDimensionsValueV6, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'alternateProductCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'alternateProductCode')
            value_ = self.gds_validate_string(value_, node, 'alternateProductCode')
            self.alternateProductCode = value_
            self.alternateProductCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'labelNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'labelNumber')
            value_ = self.gds_validate_string(value_, node, 'labelNumber')
            self.labelNumber = value_
            self.labelNumber_nsprefix_ = child_.prefix
        super(skybillWithDimensionsValueV6, self)._buildChildren(child_, node, nodeName_, True)
# end class skybillWithDimensionsValueV6


class skybillParamsValueV2(skybillParamsValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = skybillParamsValue
    def __init__(self, duplicata=None, mode=None, withReservation=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("skybillParamsValueV2"), self).__init__(duplicata, mode,  **kwargs_)
        self.withReservation = withReservation
        self.withReservation_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillParamsValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillParamsValueV2.subclass:
            return skybillParamsValueV2.subclass(*args_, **kwargs_)
        else:
            return skybillParamsValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_withReservation(self):
        return self.withReservation
    def set_withReservation(self, withReservation):
        self.withReservation = withReservation
    def _hasContent(self):
        if (
            self.withReservation is not None or
            super(skybillParamsValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillParamsValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillParamsValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillParamsValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillParamsValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillParamsValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillParamsValueV2'):
        super(skybillParamsValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillParamsValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillParamsValueV2', fromsubclass_=False, pretty_print=True):
        super(skybillParamsValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.withReservation is not None:
            namespaceprefix_ = self.withReservation_nsprefix_ + ':' if (UseCapturedNS_ and self.withReservation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%swithReservation>%s</%swithReservation>%s' % (namespaceprefix_ , self.gds_format_integer(self.withReservation, input_name='withReservation'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(skybillParamsValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'withReservation' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'withReservation')
            ival_ = self.gds_validate_integer(ival_, node, 'withReservation')
            self.withReservation = ival_
            self.withReservation_nsprefix_ = child_.prefix
        super(skybillParamsValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class skybillParamsValueV2


class recipientLocalValue(recipientValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = recipientValue
    def __init__(self, recipientAdress1=None, recipientAdress2=None, recipientCity=None, recipientContactName=None, recipientCountry=None, recipientCountryName=None, recipientEmail=None, recipientMobilePhone=None, recipientName=None, recipientName2=None, recipientPhone=None, recipientPreAlert=None, recipientZipCode=None, identityCardNumber=None, language=None, province=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("recipientLocalValue"), self).__init__(recipientAdress1, recipientAdress2, recipientCity, recipientContactName, recipientCountry, recipientCountryName, recipientEmail, recipientMobilePhone, recipientName, recipientName2, recipientPhone, recipientPreAlert, recipientZipCode, extensiontype_,  **kwargs_)
        self.identityCardNumber = identityCardNumber
        self.identityCardNumber_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.province = province
        self.province_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, recipientLocalValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if recipientLocalValue.subclass:
            return recipientLocalValue.subclass(*args_, **kwargs_)
        else:
            return recipientLocalValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_identityCardNumber(self):
        return self.identityCardNumber
    def set_identityCardNumber(self, identityCardNumber):
        self.identityCardNumber = identityCardNumber
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_province(self):
        return self.province
    def set_province(self, province):
        self.province = province
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.identityCardNumber is not None or
            self.language is not None or
            self.province is not None or
            super(recipientLocalValue, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='recipientLocalValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('recipientLocalValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'recipientLocalValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recipientLocalValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='recipientLocalValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='recipientLocalValue'):
        super(recipientLocalValue, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recipientLocalValue')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='recipientLocalValue', fromsubclass_=False, pretty_print=True):
        super(recipientLocalValue, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.identityCardNumber is not None:
            namespaceprefix_ = self.identityCardNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.identityCardNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidentityCardNumber>%s</%sidentityCardNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.identityCardNumber), input_name='identityCardNumber')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.province is not None:
            namespaceprefix_ = self.province_nsprefix_ + ':' if (UseCapturedNS_ and self.province_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprovince>%s</%sprovince>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.province), input_name='province')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(recipientLocalValue, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'identityCardNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'identityCardNumber')
            value_ = self.gds_validate_string(value_, node, 'identityCardNumber')
            self.identityCardNumber = value_
            self.identityCardNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'province':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'province')
            value_ = self.gds_validate_string(value_, node, 'province')
            self.province = value_
            self.province_nsprefix_ = child_.prefix
        super(recipientLocalValue, self)._buildChildren(child_, node, nodeName_, True)
# end class recipientLocalValue


class recipientLocalValueV2(recipientLocalValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = recipientLocalValue
    def __init__(self, recipientAdress1=None, recipientAdress2=None, recipientCity=None, recipientContactName=None, recipientCountry=None, recipientCountryName=None, recipientEmail=None, recipientMobilePhone=None, recipientName=None, recipientName2=None, recipientPhone=None, recipientPreAlert=None, recipientZipCode=None, identityCardNumber=None, language=None, province=None, recipientType=None, thirdParty=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("recipientLocalValueV2"), self).__init__(recipientAdress1, recipientAdress2, recipientCity, recipientContactName, recipientCountry, recipientCountryName, recipientEmail, recipientMobilePhone, recipientName, recipientName2, recipientPhone, recipientPreAlert, recipientZipCode, identityCardNumber, language, province,  **kwargs_)
        self.recipientType = recipientType
        self.recipientType_nsprefix_ = None
        self.thirdParty = thirdParty
        self.thirdParty_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, recipientLocalValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if recipientLocalValueV2.subclass:
            return recipientLocalValueV2.subclass(*args_, **kwargs_)
        else:
            return recipientLocalValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_recipientType(self):
        return self.recipientType
    def set_recipientType(self, recipientType):
        self.recipientType = recipientType
    def get_thirdParty(self):
        return self.thirdParty
    def set_thirdParty(self, thirdParty):
        self.thirdParty = thirdParty
    def _hasContent(self):
        if (
            self.recipientType is not None or
            self.thirdParty is not None or
            super(recipientLocalValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='recipientLocalValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('recipientLocalValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'recipientLocalValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recipientLocalValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='recipientLocalValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='recipientLocalValueV2'):
        super(recipientLocalValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='recipientLocalValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='recipientLocalValueV2', fromsubclass_=False, pretty_print=True):
        super(recipientLocalValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.recipientType is not None:
            namespaceprefix_ = self.recipientType_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientType>%s</%srecipientType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientType), input_name='recipientType')), namespaceprefix_ , eol_))
        if self.thirdParty is not None:
            namespaceprefix_ = self.thirdParty_nsprefix_ + ':' if (UseCapturedNS_ and self.thirdParty_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sthirdParty>%s</%sthirdParty>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.thirdParty), input_name='thirdParty')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(recipientLocalValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'recipientType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientType')
            value_ = self.gds_validate_string(value_, node, 'recipientType')
            self.recipientType = value_
            self.recipientType_nsprefix_ = child_.prefix
        elif nodeName_ == 'thirdParty':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'thirdParty')
            value_ = self.gds_validate_string(value_, node, 'thirdParty')
            self.thirdParty = value_
            self.thirdParty_nsprefix_ = child_.prefix
        super(recipientLocalValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class recipientLocalValueV2


class customsValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, articlesValue=None, bagNumber=None, clearanceCleared=None, currency=None, description=None, descriptionInLanguage=None, eori=None, incoterm=None, language=None, numberOfItems=None, value=None, vatNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if articlesValue is None:
            self.articlesValue = []
        else:
            self.articlesValue = articlesValue
        self.articlesValue_nsprefix_ = None
        self.bagNumber = bagNumber
        self.bagNumber_nsprefix_ = None
        self.clearanceCleared = clearanceCleared
        self.clearanceCleared_nsprefix_ = None
        self.currency = currency
        self.currency_nsprefix_ = None
        self.description = description
        self.description_nsprefix_ = None
        self.descriptionInLanguage = descriptionInLanguage
        self.descriptionInLanguage_nsprefix_ = None
        self.eori = eori
        self.eori_nsprefix_ = None
        self.incoterm = incoterm
        self.incoterm_nsprefix_ = None
        self.language = language
        self.language_nsprefix_ = None
        self.numberOfItems = numberOfItems
        self.numberOfItems_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
        self.vatNumber = vatNumber
        self.vatNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, customsValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if customsValue.subclass:
            return customsValue.subclass(*args_, **kwargs_)
        else:
            return customsValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_articlesValue(self):
        return self.articlesValue
    def set_articlesValue(self, articlesValue):
        self.articlesValue = articlesValue
    def add_articlesValue(self, value):
        self.articlesValue.append(value)
    def insert_articlesValue_at(self, index, value):
        self.articlesValue.insert(index, value)
    def replace_articlesValue_at(self, index, value):
        self.articlesValue[index] = value
    def get_bagNumber(self):
        return self.bagNumber
    def set_bagNumber(self, bagNumber):
        self.bagNumber = bagNumber
    def get_clearanceCleared(self):
        return self.clearanceCleared
    def set_clearanceCleared(self, clearanceCleared):
        self.clearanceCleared = clearanceCleared
    def get_currency(self):
        return self.currency
    def set_currency(self, currency):
        self.currency = currency
    def get_description(self):
        return self.description
    def set_description(self, description):
        self.description = description
    def get_descriptionInLanguage(self):
        return self.descriptionInLanguage
    def set_descriptionInLanguage(self, descriptionInLanguage):
        self.descriptionInLanguage = descriptionInLanguage
    def get_eori(self):
        return self.eori
    def set_eori(self, eori):
        self.eori = eori
    def get_incoterm(self):
        return self.incoterm
    def set_incoterm(self, incoterm):
        self.incoterm = incoterm
    def get_language(self):
        return self.language
    def set_language(self, language):
        self.language = language
    def get_numberOfItems(self):
        return self.numberOfItems
    def set_numberOfItems(self, numberOfItems):
        self.numberOfItems = numberOfItems
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def get_vatNumber(self):
        return self.vatNumber
    def set_vatNumber(self, vatNumber):
        self.vatNumber = vatNumber
    def _hasContent(self):
        if (
            self.articlesValue or
            self.bagNumber is not None or
            self.clearanceCleared is not None or
            self.currency is not None or
            self.description is not None or
            self.descriptionInLanguage is not None or
            self.eori is not None or
            self.incoterm is not None or
            self.language is not None or
            self.numberOfItems is not None or
            self.value is not None or
            self.vatNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('customsValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'customsValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='customsValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='customsValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='customsValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='customsValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for articlesValue_ in self.articlesValue:
            namespaceprefix_ = self.articlesValue_nsprefix_ + ':' if (UseCapturedNS_ and self.articlesValue_nsprefix_) else ''
            articlesValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='articlesValue', pretty_print=pretty_print)
        if self.bagNumber is not None:
            namespaceprefix_ = self.bagNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.bagNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbagNumber>%s</%sbagNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.bagNumber), input_name='bagNumber')), namespaceprefix_ , eol_))
        if self.clearanceCleared is not None:
            namespaceprefix_ = self.clearanceCleared_nsprefix_ + ':' if (UseCapturedNS_ and self.clearanceCleared_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclearanceCleared>%s</%sclearanceCleared>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.clearanceCleared), input_name='clearanceCleared')), namespaceprefix_ , eol_))
        if self.currency is not None:
            namespaceprefix_ = self.currency_nsprefix_ + ':' if (UseCapturedNS_ and self.currency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scurrency>%s</%scurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.currency), input_name='currency')), namespaceprefix_ , eol_))
        if self.description is not None:
            namespaceprefix_ = self.description_nsprefix_ + ':' if (UseCapturedNS_ and self.description_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription>%s</%sdescription>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.description), input_name='description')), namespaceprefix_ , eol_))
        if self.descriptionInLanguage is not None:
            namespaceprefix_ = self.descriptionInLanguage_nsprefix_ + ':' if (UseCapturedNS_ and self.descriptionInLanguage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescriptionInLanguage>%s</%sdescriptionInLanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.descriptionInLanguage), input_name='descriptionInLanguage')), namespaceprefix_ , eol_))
        if self.eori is not None:
            namespaceprefix_ = self.eori_nsprefix_ + ':' if (UseCapturedNS_ and self.eori_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%seori>%s</%seori>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.eori), input_name='eori')), namespaceprefix_ , eol_))
        if self.incoterm is not None:
            namespaceprefix_ = self.incoterm_nsprefix_ + ':' if (UseCapturedNS_ and self.incoterm_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sincoterm>%s</%sincoterm>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.incoterm), input_name='incoterm')), namespaceprefix_ , eol_))
        if self.language is not None:
            namespaceprefix_ = self.language_nsprefix_ + ':' if (UseCapturedNS_ and self.language_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slanguage>%s</%slanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.language), input_name='language')), namespaceprefix_ , eol_))
        if self.numberOfItems is not None:
            namespaceprefix_ = self.numberOfItems_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfItems_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfItems>%s</%snumberOfItems>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfItems, input_name='numberOfItems'), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_float(self.value, input_name='value'), namespaceprefix_ , eol_))
        if self.vatNumber is not None:
            namespaceprefix_ = self.vatNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.vatNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svatNumber>%s</%svatNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.vatNumber), input_name='vatNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'articlesValue':
            obj_ = articleValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.articlesValue.append(obj_)
            obj_.original_tagname_ = 'articlesValue'
        elif nodeName_ == 'bagNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'bagNumber')
            value_ = self.gds_validate_string(value_, node, 'bagNumber')
            self.bagNumber = value_
            self.bagNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'clearanceCleared':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'clearanceCleared')
            value_ = self.gds_validate_string(value_, node, 'clearanceCleared')
            self.clearanceCleared = value_
            self.clearanceCleared_nsprefix_ = child_.prefix
        elif nodeName_ == 'currency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'currency')
            value_ = self.gds_validate_string(value_, node, 'currency')
            self.currency = value_
            self.currency_nsprefix_ = child_.prefix
        elif nodeName_ == 'description':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'description')
            value_ = self.gds_validate_string(value_, node, 'description')
            self.description = value_
            self.description_nsprefix_ = child_.prefix
        elif nodeName_ == 'descriptionInLanguage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'descriptionInLanguage')
            value_ = self.gds_validate_string(value_, node, 'descriptionInLanguage')
            self.descriptionInLanguage = value_
            self.descriptionInLanguage_nsprefix_ = child_.prefix
        elif nodeName_ == 'eori':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'eori')
            value_ = self.gds_validate_string(value_, node, 'eori')
            self.eori = value_
            self.eori_nsprefix_ = child_.prefix
        elif nodeName_ == 'incoterm':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'incoterm')
            value_ = self.gds_validate_string(value_, node, 'incoterm')
            self.incoterm = value_
            self.incoterm_nsprefix_ = child_.prefix
        elif nodeName_ == 'language':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'language')
            value_ = self.gds_validate_string(value_, node, 'language')
            self.language = value_
            self.language_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfItems' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfItems')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfItems')
            self.numberOfItems = ival_
            self.numberOfItems_nsprefix_ = child_.prefix
        elif nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'value')
            fval_ = self.gds_validate_float(fval_, node, 'value')
            self.value = fval_
            self.value_nsprefix_ = child_.prefix
        elif nodeName_ == 'vatNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'vatNumber')
            value_ = self.gds_validate_string(value_, node, 'vatNumber')
            self.vatNumber = value_
            self.vatNumber_nsprefix_ = child_.prefix
# end class customsValue


class articleValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, content=None, contentInLanguage=None, grossWeight=None, hscode=None, netWeight=None, origin=None, position=None, quantity=None, regime=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.content = content
        self.content_nsprefix_ = None
        self.contentInLanguage = contentInLanguage
        self.contentInLanguage_nsprefix_ = None
        self.grossWeight = grossWeight
        self.grossWeight_nsprefix_ = None
        self.hscode = hscode
        self.hscode_nsprefix_ = None
        self.netWeight = netWeight
        self.netWeight_nsprefix_ = None
        self.origin = origin
        self.origin_nsprefix_ = None
        self.position = position
        self.position_nsprefix_ = None
        self.quantity = quantity
        self.quantity_nsprefix_ = None
        self.regime = regime
        self.regime_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, articleValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if articleValue.subclass:
            return articleValue.subclass(*args_, **kwargs_)
        else:
            return articleValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_content(self):
        return self.content
    def set_content(self, content):
        self.content = content
    def get_contentInLanguage(self):
        return self.contentInLanguage
    def set_contentInLanguage(self, contentInLanguage):
        self.contentInLanguage = contentInLanguage
    def get_grossWeight(self):
        return self.grossWeight
    def set_grossWeight(self, grossWeight):
        self.grossWeight = grossWeight
    def get_hscode(self):
        return self.hscode
    def set_hscode(self, hscode):
        self.hscode = hscode
    def get_netWeight(self):
        return self.netWeight
    def set_netWeight(self, netWeight):
        self.netWeight = netWeight
    def get_origin(self):
        return self.origin
    def set_origin(self, origin):
        self.origin = origin
    def get_position(self):
        return self.position
    def set_position(self, position):
        self.position = position
    def get_quantity(self):
        return self.quantity
    def set_quantity(self, quantity):
        self.quantity = quantity
    def get_regime(self):
        return self.regime
    def set_regime(self, regime):
        self.regime = regime
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.content is not None or
            self.contentInLanguage is not None or
            self.grossWeight is not None or
            self.hscode is not None or
            self.netWeight is not None or
            self.origin is not None or
            self.position is not None or
            self.quantity is not None or
            self.regime is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('articleValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'articleValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='articleValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='articleValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='articleValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='articleValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.content is not None:
            namespaceprefix_ = self.content_nsprefix_ + ':' if (UseCapturedNS_ and self.content_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent>%s</%scontent>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content), input_name='content')), namespaceprefix_ , eol_))
        if self.contentInLanguage is not None:
            namespaceprefix_ = self.contentInLanguage_nsprefix_ + ':' if (UseCapturedNS_ and self.contentInLanguage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontentInLanguage>%s</%scontentInLanguage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contentInLanguage), input_name='contentInLanguage')), namespaceprefix_ , eol_))
        if self.grossWeight is not None:
            namespaceprefix_ = self.grossWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.grossWeight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrossWeight>%s</%sgrossWeight>%s' % (namespaceprefix_ , self.gds_format_float(self.grossWeight, input_name='grossWeight'), namespaceprefix_ , eol_))
        if self.hscode is not None:
            namespaceprefix_ = self.hscode_nsprefix_ + ':' if (UseCapturedNS_ and self.hscode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shscode>%s</%shscode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hscode), input_name='hscode')), namespaceprefix_ , eol_))
        if self.netWeight is not None:
            namespaceprefix_ = self.netWeight_nsprefix_ + ':' if (UseCapturedNS_ and self.netWeight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snetWeight>%s</%snetWeight>%s' % (namespaceprefix_ , self.gds_format_float(self.netWeight, input_name='netWeight'), namespaceprefix_ , eol_))
        if self.origin is not None:
            namespaceprefix_ = self.origin_nsprefix_ + ':' if (UseCapturedNS_ and self.origin_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sorigin>%s</%sorigin>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.origin), input_name='origin')), namespaceprefix_ , eol_))
        if self.position is not None:
            namespaceprefix_ = self.position_nsprefix_ + ':' if (UseCapturedNS_ and self.position_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sposition>%s</%sposition>%s' % (namespaceprefix_ , self.gds_format_integer(self.position, input_name='position'), namespaceprefix_ , eol_))
        if self.quantity is not None:
            namespaceprefix_ = self.quantity_nsprefix_ + ':' if (UseCapturedNS_ and self.quantity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%squantity>%s</%squantity>%s' % (namespaceprefix_ , self.gds_format_integer(self.quantity, input_name='quantity'), namespaceprefix_ , eol_))
        if self.regime is not None:
            namespaceprefix_ = self.regime_nsprefix_ + ':' if (UseCapturedNS_ and self.regime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sregime>%s</%sregime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.regime), input_name='regime')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_format_float(self.value, input_name='value'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'content':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content')
            value_ = self.gds_validate_string(value_, node, 'content')
            self.content = value_
            self.content_nsprefix_ = child_.prefix
        elif nodeName_ == 'contentInLanguage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contentInLanguage')
            value_ = self.gds_validate_string(value_, node, 'contentInLanguage')
            self.contentInLanguage = value_
            self.contentInLanguage_nsprefix_ = child_.prefix
        elif nodeName_ == 'grossWeight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'grossWeight')
            fval_ = self.gds_validate_float(fval_, node, 'grossWeight')
            self.grossWeight = fval_
            self.grossWeight_nsprefix_ = child_.prefix
        elif nodeName_ == 'hscode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hscode')
            value_ = self.gds_validate_string(value_, node, 'hscode')
            self.hscode = value_
            self.hscode_nsprefix_ = child_.prefix
        elif nodeName_ == 'netWeight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'netWeight')
            fval_ = self.gds_validate_float(fval_, node, 'netWeight')
            self.netWeight = fval_
            self.netWeight_nsprefix_ = child_.prefix
        elif nodeName_ == 'origin':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'origin')
            value_ = self.gds_validate_string(value_, node, 'origin')
            self.origin = value_
            self.origin_nsprefix_ = child_.prefix
        elif nodeName_ == 'position' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'position')
            ival_ = self.gds_validate_integer(ival_, node, 'position')
            self.position = ival_
            self.position_nsprefix_ = child_.prefix
        elif nodeName_ == 'quantity' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'quantity')
            ival_ = self.gds_validate_integer(ival_, node, 'quantity')
            self.quantity = ival_
            self.quantity_nsprefix_ = child_.prefix
        elif nodeName_ == 'regime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'regime')
            value_ = self.gds_validate_string(value_, node, 'regime')
            self.regime = value_
            self.regime_nsprefix_ = child_.prefix
        elif nodeName_ == 'value' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'value')
            fval_ = self.gds_validate_float(fval_, node, 'value')
            self.value = fval_
            self.value_nsprefix_ = child_.prefix
# end class articleValue


class resultShippingValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, errorCode=None, errorMessage=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultShippingValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultShippingValue.subclass:
            return resultShippingValue.subclass(*args_, **kwargs_)
        else:
            return resultShippingValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.errorCode is not None or
            self.errorMessage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultShippingValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultShippingValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultShippingValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultShippingValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultShippingValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultShippingValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultShippingValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
# end class resultShippingValue


class resultMultiParcelExpeditionValue(resultShippingValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = resultShippingValue
    def __init__(self, errorCode=None, errorMessage=None, ESDFullNumber=None, ESDNumber=None, pickupDate=None, reservationNumber=None, resultMultiParcelValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("resultMultiParcelExpeditionValue"), self).__init__(errorCode, errorMessage,  **kwargs_)
        self.ESDFullNumber = ESDFullNumber
        self.ESDFullNumber_nsprefix_ = None
        self.ESDNumber = ESDNumber
        self.ESDNumber_nsprefix_ = None
        if isinstance(pickupDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(pickupDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = pickupDate
        self.pickupDate = initvalue_
        self.pickupDate_nsprefix_ = None
        self.reservationNumber = reservationNumber
        self.reservationNumber_nsprefix_ = None
        if resultMultiParcelValue is None:
            self.resultMultiParcelValue = []
        else:
            self.resultMultiParcelValue = resultMultiParcelValue
        self.resultMultiParcelValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultMultiParcelExpeditionValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultMultiParcelExpeditionValue.subclass:
            return resultMultiParcelExpeditionValue.subclass(*args_, **kwargs_)
        else:
            return resultMultiParcelExpeditionValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ESDFullNumber(self):
        return self.ESDFullNumber
    def set_ESDFullNumber(self, ESDFullNumber):
        self.ESDFullNumber = ESDFullNumber
    def get_ESDNumber(self):
        return self.ESDNumber
    def set_ESDNumber(self, ESDNumber):
        self.ESDNumber = ESDNumber
    def get_pickupDate(self):
        return self.pickupDate
    def set_pickupDate(self, pickupDate):
        self.pickupDate = pickupDate
    def get_reservationNumber(self):
        return self.reservationNumber
    def set_reservationNumber(self, reservationNumber):
        self.reservationNumber = reservationNumber
    def get_resultMultiParcelValue(self):
        return self.resultMultiParcelValue
    def set_resultMultiParcelValue(self, resultMultiParcelValue):
        self.resultMultiParcelValue = resultMultiParcelValue
    def add_resultMultiParcelValue(self, value):
        self.resultMultiParcelValue.append(value)
    def insert_resultMultiParcelValue_at(self, index, value):
        self.resultMultiParcelValue.insert(index, value)
    def replace_resultMultiParcelValue_at(self, index, value):
        self.resultMultiParcelValue[index] = value
    def _hasContent(self):
        if (
            self.ESDFullNumber is not None or
            self.ESDNumber is not None or
            self.pickupDate is not None or
            self.reservationNumber is not None or
            self.resultMultiParcelValue or
            super(resultMultiParcelExpeditionValue, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultMultiParcelExpeditionValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultMultiParcelExpeditionValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultMultiParcelExpeditionValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultMultiParcelExpeditionValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultMultiParcelExpeditionValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultMultiParcelExpeditionValue'):
        super(resultMultiParcelExpeditionValue, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultMultiParcelExpeditionValue')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultMultiParcelExpeditionValue', fromsubclass_=False, pretty_print=True):
        super(resultMultiParcelExpeditionValue, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ESDFullNumber is not None:
            namespaceprefix_ = self.ESDFullNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ESDFullNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sESDFullNumber>%s</%sESDFullNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ESDFullNumber), input_name='ESDFullNumber')), namespaceprefix_ , eol_))
        if self.ESDNumber is not None:
            namespaceprefix_ = self.ESDNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ESDNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sESDNumber>%s</%sESDNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ESDNumber), input_name='ESDNumber')), namespaceprefix_ , eol_))
        if self.pickupDate is not None:
            namespaceprefix_ = self.pickupDate_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupDate>%s</%spickupDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.pickupDate, input_name='pickupDate'), namespaceprefix_ , eol_))
        if self.reservationNumber is not None:
            namespaceprefix_ = self.reservationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.reservationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreservationNumber>%s</%sreservationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reservationNumber), input_name='reservationNumber')), namespaceprefix_ , eol_))
        for resultMultiParcelValue_ in self.resultMultiParcelValue:
            namespaceprefix_ = self.resultMultiParcelValue_nsprefix_ + ':' if (UseCapturedNS_ and self.resultMultiParcelValue_nsprefix_) else ''
            resultMultiParcelValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='resultMultiParcelValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(resultMultiParcelExpeditionValue, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ESDFullNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ESDFullNumber')
            value_ = self.gds_validate_string(value_, node, 'ESDFullNumber')
            self.ESDFullNumber = value_
            self.ESDFullNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ESDNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ESDNumber')
            value_ = self.gds_validate_string(value_, node, 'ESDNumber')
            self.ESDNumber = value_
            self.ESDNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.pickupDate = dval_
            self.pickupDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'reservationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reservationNumber')
            value_ = self.gds_validate_string(value_, node, 'reservationNumber')
            self.reservationNumber = value_
            self.reservationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'resultMultiParcelValue':
            obj_ = resultMultiParcelValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.resultMultiParcelValue.append(obj_)
            obj_.original_tagname_ = 'resultMultiParcelValue'
        super(resultMultiParcelExpeditionValue, self)._buildChildren(child_, node, nodeName_, True)
# end class resultMultiParcelExpeditionValue


class resultMultiParcelValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, asCode=None, codeDepot=None, codeService=None, destinationDepot=None, geoPostCodeBarre=None, geoPostNumeroColis=None, groupingPriorityLabel=None, pdfEtiquette=None, serviceMark=None, serviceName=None, signaletiqueProduit=None, skybillNumber=None, dSort=None, oSort=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.asCode = asCode
        self.asCode_nsprefix_ = None
        self.codeDepot = codeDepot
        self.codeDepot_nsprefix_ = None
        self.codeService = codeService
        self.codeService_nsprefix_ = None
        self.destinationDepot = destinationDepot
        self.destinationDepot_nsprefix_ = None
        self.geoPostCodeBarre = geoPostCodeBarre
        self.geoPostCodeBarre_nsprefix_ = None
        self.geoPostNumeroColis = geoPostNumeroColis
        self.geoPostNumeroColis_nsprefix_ = None
        self.groupingPriorityLabel = groupingPriorityLabel
        self.groupingPriorityLabel_nsprefix_ = None
        self.pdfEtiquette = pdfEtiquette
        self.pdfEtiquette_nsprefix_ = None
        self.serviceMark = serviceMark
        self.serviceMark_nsprefix_ = None
        self.serviceName = serviceName
        self.serviceName_nsprefix_ = None
        self.signaletiqueProduit = signaletiqueProduit
        self.signaletiqueProduit_nsprefix_ = None
        self.skybillNumber = skybillNumber
        self.skybillNumber_nsprefix_ = None
        self.dSort = dSort
        self.dSort_nsprefix_ = None
        self.oSort = oSort
        self.oSort_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultMultiParcelValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultMultiParcelValue.subclass:
            return resultMultiParcelValue.subclass(*args_, **kwargs_)
        else:
            return resultMultiParcelValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_asCode(self):
        return self.asCode
    def set_asCode(self, asCode):
        self.asCode = asCode
    def get_codeDepot(self):
        return self.codeDepot
    def set_codeDepot(self, codeDepot):
        self.codeDepot = codeDepot
    def get_codeService(self):
        return self.codeService
    def set_codeService(self, codeService):
        self.codeService = codeService
    def get_destinationDepot(self):
        return self.destinationDepot
    def set_destinationDepot(self, destinationDepot):
        self.destinationDepot = destinationDepot
    def get_geoPostCodeBarre(self):
        return self.geoPostCodeBarre
    def set_geoPostCodeBarre(self, geoPostCodeBarre):
        self.geoPostCodeBarre = geoPostCodeBarre
    def get_geoPostNumeroColis(self):
        return self.geoPostNumeroColis
    def set_geoPostNumeroColis(self, geoPostNumeroColis):
        self.geoPostNumeroColis = geoPostNumeroColis
    def get_groupingPriorityLabel(self):
        return self.groupingPriorityLabel
    def set_groupingPriorityLabel(self, groupingPriorityLabel):
        self.groupingPriorityLabel = groupingPriorityLabel
    def get_pdfEtiquette(self):
        return self.pdfEtiquette
    def set_pdfEtiquette(self, pdfEtiquette):
        self.pdfEtiquette = pdfEtiquette
    def get_serviceMark(self):
        return self.serviceMark
    def set_serviceMark(self, serviceMark):
        self.serviceMark = serviceMark
    def get_serviceName(self):
        return self.serviceName
    def set_serviceName(self, serviceName):
        self.serviceName = serviceName
    def get_signaletiqueProduit(self):
        return self.signaletiqueProduit
    def set_signaletiqueProduit(self, signaletiqueProduit):
        self.signaletiqueProduit = signaletiqueProduit
    def get_skybillNumber(self):
        return self.skybillNumber
    def set_skybillNumber(self, skybillNumber):
        self.skybillNumber = skybillNumber
    def get_dSort(self):
        return self.dSort
    def set_dSort(self, dSort):
        self.dSort = dSort
    def get_oSort(self):
        return self.oSort
    def set_oSort(self, oSort):
        self.oSort = oSort
    def _hasContent(self):
        if (
            self.asCode is not None or
            self.codeDepot is not None or
            self.codeService is not None or
            self.destinationDepot is not None or
            self.geoPostCodeBarre is not None or
            self.geoPostNumeroColis is not None or
            self.groupingPriorityLabel is not None or
            self.pdfEtiquette is not None or
            self.serviceMark is not None or
            self.serviceName is not None or
            self.signaletiqueProduit is not None or
            self.skybillNumber is not None or
            self.dSort is not None or
            self.oSort is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultMultiParcelValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultMultiParcelValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultMultiParcelValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultMultiParcelValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultMultiParcelValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultMultiParcelValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultMultiParcelValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.asCode is not None:
            namespaceprefix_ = self.asCode_nsprefix_ + ':' if (UseCapturedNS_ and self.asCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sasCode>%s</%sasCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.asCode), input_name='asCode')), namespaceprefix_ , eol_))
        if self.codeDepot is not None:
            namespaceprefix_ = self.codeDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.codeDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeDepot>%s</%scodeDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeDepot), input_name='codeDepot')), namespaceprefix_ , eol_))
        if self.codeService is not None:
            namespaceprefix_ = self.codeService_nsprefix_ + ':' if (UseCapturedNS_ and self.codeService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeService>%s</%scodeService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeService), input_name='codeService')), namespaceprefix_ , eol_))
        if self.destinationDepot is not None:
            namespaceprefix_ = self.destinationDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.destinationDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationDepot>%s</%sdestinationDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.destinationDepot), input_name='destinationDepot')), namespaceprefix_ , eol_))
        if self.geoPostCodeBarre is not None:
            namespaceprefix_ = self.geoPostCodeBarre_nsprefix_ + ':' if (UseCapturedNS_ and self.geoPostCodeBarre_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoPostCodeBarre>%s</%sgeoPostCodeBarre>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.geoPostCodeBarre), input_name='geoPostCodeBarre')), namespaceprefix_ , eol_))
        if self.geoPostNumeroColis is not None:
            namespaceprefix_ = self.geoPostNumeroColis_nsprefix_ + ':' if (UseCapturedNS_ and self.geoPostNumeroColis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoPostNumeroColis>%s</%sgeoPostNumeroColis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.geoPostNumeroColis), input_name='geoPostNumeroColis')), namespaceprefix_ , eol_))
        if self.groupingPriorityLabel is not None:
            namespaceprefix_ = self.groupingPriorityLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.groupingPriorityLabel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupingPriorityLabel>%s</%sgroupingPriorityLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.groupingPriorityLabel), input_name='groupingPriorityLabel')), namespaceprefix_ , eol_))
        if self.pdfEtiquette is not None:
            namespaceprefix_ = self.pdfEtiquette_nsprefix_ + ':' if (UseCapturedNS_ and self.pdfEtiquette_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spdfEtiquette>%s</%spdfEtiquette>%s' % (namespaceprefix_ , self.gds_format_base64(self.pdfEtiquette, input_name='pdfEtiquette'), namespaceprefix_ , eol_))
        if self.serviceMark is not None:
            namespaceprefix_ = self.serviceMark_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceMark>%s</%sserviceMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceMark), input_name='serviceMark')), namespaceprefix_ , eol_))
        if self.serviceName is not None:
            namespaceprefix_ = self.serviceName_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceName>%s</%sserviceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceName), input_name='serviceName')), namespaceprefix_ , eol_))
        if self.signaletiqueProduit is not None:
            namespaceprefix_ = self.signaletiqueProduit_nsprefix_ + ':' if (UseCapturedNS_ and self.signaletiqueProduit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssignaletiqueProduit>%s</%ssignaletiqueProduit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.signaletiqueProduit), input_name='signaletiqueProduit')), namespaceprefix_ , eol_))
        if self.skybillNumber is not None:
            namespaceprefix_ = self.skybillNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybillNumber>%s</%sskybillNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybillNumber), input_name='skybillNumber')), namespaceprefix_ , eol_))
        if self.dSort is not None:
            namespaceprefix_ = self.dSort_nsprefix_ + ':' if (UseCapturedNS_ and self.dSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdSort>%s</%sdSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dSort), input_name='dSort')), namespaceprefix_ , eol_))
        if self.oSort is not None:
            namespaceprefix_ = self.oSort_nsprefix_ + ':' if (UseCapturedNS_ and self.oSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soSort>%s</%soSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.oSort), input_name='oSort')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'asCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'asCode')
            value_ = self.gds_validate_string(value_, node, 'asCode')
            self.asCode = value_
            self.asCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeDepot')
            value_ = self.gds_validate_string(value_, node, 'codeDepot')
            self.codeDepot = value_
            self.codeDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeService')
            value_ = self.gds_validate_string(value_, node, 'codeService')
            self.codeService = value_
            self.codeService_nsprefix_ = child_.prefix
        elif nodeName_ == 'destinationDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'destinationDepot')
            value_ = self.gds_validate_string(value_, node, 'destinationDepot')
            self.destinationDepot = value_
            self.destinationDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'geoPostCodeBarre':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'geoPostCodeBarre')
            value_ = self.gds_validate_string(value_, node, 'geoPostCodeBarre')
            self.geoPostCodeBarre = value_
            self.geoPostCodeBarre_nsprefix_ = child_.prefix
        elif nodeName_ == 'geoPostNumeroColis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'geoPostNumeroColis')
            value_ = self.gds_validate_string(value_, node, 'geoPostNumeroColis')
            self.geoPostNumeroColis = value_
            self.geoPostNumeroColis_nsprefix_ = child_.prefix
        elif nodeName_ == 'groupingPriorityLabel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'groupingPriorityLabel')
            value_ = self.gds_validate_string(value_, node, 'groupingPriorityLabel')
            self.groupingPriorityLabel = value_
            self.groupingPriorityLabel_nsprefix_ = child_.prefix
        elif nodeName_ == 'pdfEtiquette':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'pdfEtiquette')
            else:
                bval_ = None
            self.pdfEtiquette = bval_
            self.pdfEtiquette_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceMark')
            value_ = self.gds_validate_string(value_, node, 'serviceMark')
            self.serviceMark = value_
            self.serviceMark_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceName')
            value_ = self.gds_validate_string(value_, node, 'serviceName')
            self.serviceName = value_
            self.serviceName_nsprefix_ = child_.prefix
        elif nodeName_ == 'signaletiqueProduit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'signaletiqueProduit')
            value_ = self.gds_validate_string(value_, node, 'signaletiqueProduit')
            self.signaletiqueProduit = value_
            self.signaletiqueProduit_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybillNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybillNumber')
            value_ = self.gds_validate_string(value_, node, 'skybillNumber')
            self.skybillNumber = value_
            self.skybillNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'dSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'dSort')
            value_ = self.gds_validate_string(value_, node, 'dSort')
            self.dSort = value_
            self.dSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'oSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'oSort')
            value_ = self.gds_validate_string(value_, node, 'oSort')
            self.oSort = value_
            self.oSort_nsprefix_ = child_.prefix
# end class resultMultiParcelValue


class resultExpeditionValueV3(resultExpeditionValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = resultExpeditionValue
    def __init__(self, ESDFullNumber=None, ESDNumber=None, errorCode=None, errorMessage=None, pickupDate=None, skybill=None, skybillNumber=None, codeDepot=None, codeService=None, destinationDepot=None, geoPostCodeBarre=None, geoPostNumeroColis=None, groupingPriorityLabel=None, serviceMark=None, serviceName=None, signaletiqueProduit=None, dSort=None, oSort=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("resultExpeditionValueV3"), self).__init__(ESDFullNumber, ESDNumber, errorCode, errorMessage, pickupDate, skybill, skybillNumber, extensiontype_,  **kwargs_)
        self.codeDepot = codeDepot
        self.codeDepot_nsprefix_ = None
        self.codeService = codeService
        self.codeService_nsprefix_ = None
        self.destinationDepot = destinationDepot
        self.destinationDepot_nsprefix_ = None
        self.geoPostCodeBarre = geoPostCodeBarre
        self.geoPostCodeBarre_nsprefix_ = None
        self.geoPostNumeroColis = geoPostNumeroColis
        self.geoPostNumeroColis_nsprefix_ = None
        self.groupingPriorityLabel = groupingPriorityLabel
        self.groupingPriorityLabel_nsprefix_ = None
        self.serviceMark = serviceMark
        self.serviceMark_nsprefix_ = None
        self.serviceName = serviceName
        self.serviceName_nsprefix_ = None
        self.signaletiqueProduit = signaletiqueProduit
        self.signaletiqueProduit_nsprefix_ = None
        self.dSort = dSort
        self.dSort_nsprefix_ = None
        self.oSort = oSort
        self.oSort_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultExpeditionValueV3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultExpeditionValueV3.subclass:
            return resultExpeditionValueV3.subclass(*args_, **kwargs_)
        else:
            return resultExpeditionValueV3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeDepot(self):
        return self.codeDepot
    def set_codeDepot(self, codeDepot):
        self.codeDepot = codeDepot
    def get_codeService(self):
        return self.codeService
    def set_codeService(self, codeService):
        self.codeService = codeService
    def get_destinationDepot(self):
        return self.destinationDepot
    def set_destinationDepot(self, destinationDepot):
        self.destinationDepot = destinationDepot
    def get_geoPostCodeBarre(self):
        return self.geoPostCodeBarre
    def set_geoPostCodeBarre(self, geoPostCodeBarre):
        self.geoPostCodeBarre = geoPostCodeBarre
    def get_geoPostNumeroColis(self):
        return self.geoPostNumeroColis
    def set_geoPostNumeroColis(self, geoPostNumeroColis):
        self.geoPostNumeroColis = geoPostNumeroColis
    def get_groupingPriorityLabel(self):
        return self.groupingPriorityLabel
    def set_groupingPriorityLabel(self, groupingPriorityLabel):
        self.groupingPriorityLabel = groupingPriorityLabel
    def get_serviceMark(self):
        return self.serviceMark
    def set_serviceMark(self, serviceMark):
        self.serviceMark = serviceMark
    def get_serviceName(self):
        return self.serviceName
    def set_serviceName(self, serviceName):
        self.serviceName = serviceName
    def get_signaletiqueProduit(self):
        return self.signaletiqueProduit
    def set_signaletiqueProduit(self, signaletiqueProduit):
        self.signaletiqueProduit = signaletiqueProduit
    def get_dSort(self):
        return self.dSort
    def set_dSort(self, dSort):
        self.dSort = dSort
    def get_oSort(self):
        return self.oSort
    def set_oSort(self, oSort):
        self.oSort = oSort
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.codeDepot is not None or
            self.codeService is not None or
            self.destinationDepot is not None or
            self.geoPostCodeBarre is not None or
            self.geoPostNumeroColis is not None or
            self.groupingPriorityLabel is not None or
            self.serviceMark is not None or
            self.serviceName is not None or
            self.signaletiqueProduit is not None or
            self.dSort is not None or
            self.oSort is not None or
            super(resultExpeditionValueV3, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultExpeditionValueV3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultExpeditionValueV3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultExpeditionValueV3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultExpeditionValueV3')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultExpeditionValueV3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultExpeditionValueV3'):
        super(resultExpeditionValueV3, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultExpeditionValueV3')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultExpeditionValueV3', fromsubclass_=False, pretty_print=True):
        super(resultExpeditionValueV3, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeDepot is not None:
            namespaceprefix_ = self.codeDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.codeDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeDepot>%s</%scodeDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeDepot), input_name='codeDepot')), namespaceprefix_ , eol_))
        if self.codeService is not None:
            namespaceprefix_ = self.codeService_nsprefix_ + ':' if (UseCapturedNS_ and self.codeService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeService>%s</%scodeService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeService), input_name='codeService')), namespaceprefix_ , eol_))
        if self.destinationDepot is not None:
            namespaceprefix_ = self.destinationDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.destinationDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationDepot>%s</%sdestinationDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.destinationDepot), input_name='destinationDepot')), namespaceprefix_ , eol_))
        if self.geoPostCodeBarre is not None:
            namespaceprefix_ = self.geoPostCodeBarre_nsprefix_ + ':' if (UseCapturedNS_ and self.geoPostCodeBarre_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoPostCodeBarre>%s</%sgeoPostCodeBarre>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.geoPostCodeBarre), input_name='geoPostCodeBarre')), namespaceprefix_ , eol_))
        if self.geoPostNumeroColis is not None:
            namespaceprefix_ = self.geoPostNumeroColis_nsprefix_ + ':' if (UseCapturedNS_ and self.geoPostNumeroColis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoPostNumeroColis>%s</%sgeoPostNumeroColis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.geoPostNumeroColis), input_name='geoPostNumeroColis')), namespaceprefix_ , eol_))
        if self.groupingPriorityLabel is not None:
            namespaceprefix_ = self.groupingPriorityLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.groupingPriorityLabel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupingPriorityLabel>%s</%sgroupingPriorityLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.groupingPriorityLabel), input_name='groupingPriorityLabel')), namespaceprefix_ , eol_))
        if self.serviceMark is not None:
            namespaceprefix_ = self.serviceMark_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceMark>%s</%sserviceMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceMark), input_name='serviceMark')), namespaceprefix_ , eol_))
        if self.serviceName is not None:
            namespaceprefix_ = self.serviceName_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceName>%s</%sserviceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceName), input_name='serviceName')), namespaceprefix_ , eol_))
        if self.signaletiqueProduit is not None:
            namespaceprefix_ = self.signaletiqueProduit_nsprefix_ + ':' if (UseCapturedNS_ and self.signaletiqueProduit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssignaletiqueProduit>%s</%ssignaletiqueProduit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.signaletiqueProduit), input_name='signaletiqueProduit')), namespaceprefix_ , eol_))
        if self.dSort is not None:
            namespaceprefix_ = self.dSort_nsprefix_ + ':' if (UseCapturedNS_ and self.dSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdSort>%s</%sdSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dSort), input_name='dSort')), namespaceprefix_ , eol_))
        if self.oSort is not None:
            namespaceprefix_ = self.oSort_nsprefix_ + ':' if (UseCapturedNS_ and self.oSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soSort>%s</%soSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.oSort), input_name='oSort')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(resultExpeditionValueV3, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeDepot')
            value_ = self.gds_validate_string(value_, node, 'codeDepot')
            self.codeDepot = value_
            self.codeDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeService')
            value_ = self.gds_validate_string(value_, node, 'codeService')
            self.codeService = value_
            self.codeService_nsprefix_ = child_.prefix
        elif nodeName_ == 'destinationDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'destinationDepot')
            value_ = self.gds_validate_string(value_, node, 'destinationDepot')
            self.destinationDepot = value_
            self.destinationDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'geoPostCodeBarre':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'geoPostCodeBarre')
            value_ = self.gds_validate_string(value_, node, 'geoPostCodeBarre')
            self.geoPostCodeBarre = value_
            self.geoPostCodeBarre_nsprefix_ = child_.prefix
        elif nodeName_ == 'geoPostNumeroColis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'geoPostNumeroColis')
            value_ = self.gds_validate_string(value_, node, 'geoPostNumeroColis')
            self.geoPostNumeroColis = value_
            self.geoPostNumeroColis_nsprefix_ = child_.prefix
        elif nodeName_ == 'groupingPriorityLabel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'groupingPriorityLabel')
            value_ = self.gds_validate_string(value_, node, 'groupingPriorityLabel')
            self.groupingPriorityLabel = value_
            self.groupingPriorityLabel_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceMark')
            value_ = self.gds_validate_string(value_, node, 'serviceMark')
            self.serviceMark = value_
            self.serviceMark_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceName')
            value_ = self.gds_validate_string(value_, node, 'serviceName')
            self.serviceName = value_
            self.serviceName_nsprefix_ = child_.prefix
        elif nodeName_ == 'signaletiqueProduit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'signaletiqueProduit')
            value_ = self.gds_validate_string(value_, node, 'signaletiqueProduit')
            self.signaletiqueProduit = value_
            self.signaletiqueProduit_nsprefix_ = child_.prefix
        elif nodeName_ == 'dSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'dSort')
            value_ = self.gds_validate_string(value_, node, 'dSort')
            self.dSort = value_
            self.dSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'oSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'oSort')
            value_ = self.gds_validate_string(value_, node, 'oSort')
            self.oSort = value_
            self.oSort_nsprefix_ = child_.prefix
        super(resultExpeditionValueV3, self)._buildChildren(child_, node, nodeName_, True)
# end class resultExpeditionValueV3


class resultMonoParcelExpeditionValue(resultExpeditionValueV3):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = resultExpeditionValueV3
    def __init__(self, ESDFullNumber=None, ESDNumber=None, errorCode=None, errorMessage=None, pickupDate=None, skybill=None, skybillNumber=None, codeDepot=None, codeService=None, destinationDepot=None, geoPostCodeBarre=None, geoPostNumeroColis=None, groupingPriorityLabel=None, serviceMark=None, serviceName=None, signaletiqueProduit=None, dSort=None, oSort=None, pdfEtiquette=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("resultMonoParcelExpeditionValue"), self).__init__(ESDFullNumber, ESDNumber, errorCode, errorMessage, pickupDate, skybill, skybillNumber, codeDepot, codeService, destinationDepot, geoPostCodeBarre, geoPostNumeroColis, groupingPriorityLabel, serviceMark, serviceName, signaletiqueProduit, dSort, oSort,  **kwargs_)
        self.pdfEtiquette = pdfEtiquette
        self.pdfEtiquette_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultMonoParcelExpeditionValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultMonoParcelExpeditionValue.subclass:
            return resultMonoParcelExpeditionValue.subclass(*args_, **kwargs_)
        else:
            return resultMonoParcelExpeditionValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_pdfEtiquette(self):
        return self.pdfEtiquette
    def set_pdfEtiquette(self, pdfEtiquette):
        self.pdfEtiquette = pdfEtiquette
    def _hasContent(self):
        if (
            self.pdfEtiquette is not None or
            super(resultMonoParcelExpeditionValue, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultMonoParcelExpeditionValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultMonoParcelExpeditionValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultMonoParcelExpeditionValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultMonoParcelExpeditionValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultMonoParcelExpeditionValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultMonoParcelExpeditionValue'):
        super(resultMonoParcelExpeditionValue, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultMonoParcelExpeditionValue')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultMonoParcelExpeditionValue', fromsubclass_=False, pretty_print=True):
        super(resultMonoParcelExpeditionValue, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.pdfEtiquette is not None:
            namespaceprefix_ = self.pdfEtiquette_nsprefix_ + ':' if (UseCapturedNS_ and self.pdfEtiquette_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spdfEtiquette>%s</%spdfEtiquette>%s' % (namespaceprefix_ , self.gds_format_base64(self.pdfEtiquette, input_name='pdfEtiquette'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(resultMonoParcelExpeditionValue, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'pdfEtiquette':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'pdfEtiquette')
            else:
                bval_ = None
            self.pdfEtiquette = bval_
            self.pdfEtiquette_nsprefix_ = child_.prefix
        super(resultMonoParcelExpeditionValue, self)._buildChildren(child_, node, nodeName_, True)
# end class resultMonoParcelExpeditionValue


class resultGetRouting(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, errorCode=None, errorMessage=None, geopostResult=None, posteComptable=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        self.geopostResult = geopostResult
        self.geopostResult_nsprefix_ = None
        self.posteComptable = posteComptable
        self.posteComptable_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultGetRouting)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultGetRouting.subclass:
            return resultGetRouting.subclass(*args_, **kwargs_)
        else:
            return resultGetRouting(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_geopostResult(self):
        return self.geopostResult
    def set_geopostResult(self, geopostResult):
        self.geopostResult = geopostResult
    def get_posteComptable(self):
        return self.posteComptable
    def set_posteComptable(self, posteComptable):
        self.posteComptable = posteComptable
    def _hasContent(self):
        if (
            self.errorCode is not None or
            self.errorMessage is not None or
            self.geopostResult is not None or
            self.posteComptable is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultGetRouting', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultGetRouting')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultGetRouting':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultGetRouting')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultGetRouting', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultGetRouting'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultGetRouting', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
        if self.geopostResult is not None:
            namespaceprefix_ = self.geopostResult_nsprefix_ + ':' if (UseCapturedNS_ and self.geopostResult_nsprefix_) else ''
            self.geopostResult.export(outfile, level, namespaceprefix_, namespacedef_='', name_='geopostResult', pretty_print=pretty_print)
        if self.posteComptable is not None:
            namespaceprefix_ = self.posteComptable_nsprefix_ + ':' if (UseCapturedNS_ and self.posteComptable_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sposteComptable>%s</%sposteComptable>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.posteComptable), input_name='posteComptable')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'geopostResult':
            obj_ = geopostResult.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.geopostResult = obj_
            obj_.original_tagname_ = 'geopostResult'
        elif nodeName_ == 'posteComptable':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'posteComptable')
            value_ = self.gds_validate_string(value_, node, 'posteComptable')
            self.posteComptable = value_
            self.posteComptable_nsprefix_ = child_.prefix
# end class resultGetRouting


class geopostResult(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, barcodeId=None, barcodePostcode=None, buAlphaString=None, buCode=None, CSort=None, DCountry=None, DDepot=None, DDepotCountry=None, DDepotStr=None, DSort=None, groupingPriority=None, networkCode=None, OSort=None, partnerCode=None, SSort=None, serviceMark=None, serviceText=None, version=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.barcodeId = barcodeId
        self.barcodeId_nsprefix_ = None
        self.barcodePostcode = barcodePostcode
        self.barcodePostcode_nsprefix_ = None
        self.buAlphaString = buAlphaString
        self.buAlphaString_nsprefix_ = None
        self.buCode = buCode
        self.buCode_nsprefix_ = None
        self.CSort = CSort
        self.CSort_nsprefix_ = None
        self.DCountry = DCountry
        self.DCountry_nsprefix_ = None
        self.DDepot = DDepot
        self.DDepot_nsprefix_ = None
        self.DDepotCountry = DDepotCountry
        self.DDepotCountry_nsprefix_ = None
        self.DDepotStr = DDepotStr
        self.DDepotStr_nsprefix_ = None
        self.DSort = DSort
        self.DSort_nsprefix_ = None
        self.groupingPriority = groupingPriority
        self.groupingPriority_nsprefix_ = None
        self.networkCode = networkCode
        self.networkCode_nsprefix_ = None
        self.OSort = OSort
        self.OSort_nsprefix_ = None
        self.partnerCode = partnerCode
        self.partnerCode_nsprefix_ = None
        self.SSort = SSort
        self.SSort_nsprefix_ = None
        self.serviceMark = serviceMark
        self.serviceMark_nsprefix_ = None
        self.serviceText = serviceText
        self.serviceText_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, geopostResult)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if geopostResult.subclass:
            return geopostResult.subclass(*args_, **kwargs_)
        else:
            return geopostResult(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_barcodeId(self):
        return self.barcodeId
    def set_barcodeId(self, barcodeId):
        self.barcodeId = barcodeId
    def get_barcodePostcode(self):
        return self.barcodePostcode
    def set_barcodePostcode(self, barcodePostcode):
        self.barcodePostcode = barcodePostcode
    def get_buAlphaString(self):
        return self.buAlphaString
    def set_buAlphaString(self, buAlphaString):
        self.buAlphaString = buAlphaString
    def get_buCode(self):
        return self.buCode
    def set_buCode(self, buCode):
        self.buCode = buCode
    def get_CSort(self):
        return self.CSort
    def set_CSort(self, CSort):
        self.CSort = CSort
    def get_DCountry(self):
        return self.DCountry
    def set_DCountry(self, DCountry):
        self.DCountry = DCountry
    def get_DDepot(self):
        return self.DDepot
    def set_DDepot(self, DDepot):
        self.DDepot = DDepot
    def get_DDepotCountry(self):
        return self.DDepotCountry
    def set_DDepotCountry(self, DDepotCountry):
        self.DDepotCountry = DDepotCountry
    def get_DDepotStr(self):
        return self.DDepotStr
    def set_DDepotStr(self, DDepotStr):
        self.DDepotStr = DDepotStr
    def get_DSort(self):
        return self.DSort
    def set_DSort(self, DSort):
        self.DSort = DSort
    def get_groupingPriority(self):
        return self.groupingPriority
    def set_groupingPriority(self, groupingPriority):
        self.groupingPriority = groupingPriority
    def get_networkCode(self):
        return self.networkCode
    def set_networkCode(self, networkCode):
        self.networkCode = networkCode
    def get_OSort(self):
        return self.OSort
    def set_OSort(self, OSort):
        self.OSort = OSort
    def get_partnerCode(self):
        return self.partnerCode
    def set_partnerCode(self, partnerCode):
        self.partnerCode = partnerCode
    def get_SSort(self):
        return self.SSort
    def set_SSort(self, SSort):
        self.SSort = SSort
    def get_serviceMark(self):
        return self.serviceMark
    def set_serviceMark(self, serviceMark):
        self.serviceMark = serviceMark
    def get_serviceText(self):
        return self.serviceText
    def set_serviceText(self, serviceText):
        self.serviceText = serviceText
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def _hasContent(self):
        if (
            self.barcodeId is not None or
            self.barcodePostcode is not None or
            self.buAlphaString is not None or
            self.buCode is not None or
            self.CSort is not None or
            self.DCountry is not None or
            self.DDepot is not None or
            self.DDepotCountry is not None or
            self.DDepotStr is not None or
            self.DSort is not None or
            self.groupingPriority is not None or
            self.networkCode is not None or
            self.OSort is not None or
            self.partnerCode is not None or
            self.SSort is not None or
            self.serviceMark is not None or
            self.serviceText is not None or
            self.version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='geopostResult', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('geopostResult')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'geopostResult':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='geopostResult')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='geopostResult', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='geopostResult'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='geopostResult', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.barcodeId is not None:
            namespaceprefix_ = self.barcodeId_nsprefix_ + ':' if (UseCapturedNS_ and self.barcodeId_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbarcodeId>%s</%sbarcodeId>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.barcodeId), input_name='barcodeId')), namespaceprefix_ , eol_))
        if self.barcodePostcode is not None:
            namespaceprefix_ = self.barcodePostcode_nsprefix_ + ':' if (UseCapturedNS_ and self.barcodePostcode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbarcodePostcode>%s</%sbarcodePostcode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.barcodePostcode), input_name='barcodePostcode')), namespaceprefix_ , eol_))
        if self.buAlphaString is not None:
            namespaceprefix_ = self.buAlphaString_nsprefix_ + ':' if (UseCapturedNS_ and self.buAlphaString_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbuAlphaString>%s</%sbuAlphaString>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.buAlphaString), input_name='buAlphaString')), namespaceprefix_ , eol_))
        if self.buCode is not None:
            namespaceprefix_ = self.buCode_nsprefix_ + ':' if (UseCapturedNS_ and self.buCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbuCode>%s</%sbuCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.buCode), input_name='buCode')), namespaceprefix_ , eol_))
        if self.CSort is not None:
            namespaceprefix_ = self.CSort_nsprefix_ + ':' if (UseCapturedNS_ and self.CSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCSort>%s</%sCSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.CSort), input_name='CSort')), namespaceprefix_ , eol_))
        if self.DCountry is not None:
            namespaceprefix_ = self.DCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.DCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDCountry>%s</%sDCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DCountry), input_name='DCountry')), namespaceprefix_ , eol_))
        if self.DDepot is not None:
            namespaceprefix_ = self.DDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.DDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDDepot>%s</%sDDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DDepot), input_name='DDepot')), namespaceprefix_ , eol_))
        if self.DDepotCountry is not None:
            namespaceprefix_ = self.DDepotCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.DDepotCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDDepotCountry>%s</%sDDepotCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DDepotCountry), input_name='DDepotCountry')), namespaceprefix_ , eol_))
        if self.DDepotStr is not None:
            namespaceprefix_ = self.DDepotStr_nsprefix_ + ':' if (UseCapturedNS_ and self.DDepotStr_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDDepotStr>%s</%sDDepotStr>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DDepotStr), input_name='DDepotStr')), namespaceprefix_ , eol_))
        if self.DSort is not None:
            namespaceprefix_ = self.DSort_nsprefix_ + ':' if (UseCapturedNS_ and self.DSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDSort>%s</%sDSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DSort), input_name='DSort')), namespaceprefix_ , eol_))
        if self.groupingPriority is not None:
            namespaceprefix_ = self.groupingPriority_nsprefix_ + ':' if (UseCapturedNS_ and self.groupingPriority_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupingPriority>%s</%sgroupingPriority>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.groupingPriority), input_name='groupingPriority')), namespaceprefix_ , eol_))
        if self.networkCode is not None:
            namespaceprefix_ = self.networkCode_nsprefix_ + ':' if (UseCapturedNS_ and self.networkCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snetworkCode>%s</%snetworkCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.networkCode), input_name='networkCode')), namespaceprefix_ , eol_))
        if self.OSort is not None:
            namespaceprefix_ = self.OSort_nsprefix_ + ':' if (UseCapturedNS_ and self.OSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOSort>%s</%sOSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OSort), input_name='OSort')), namespaceprefix_ , eol_))
        if self.partnerCode is not None:
            namespaceprefix_ = self.partnerCode_nsprefix_ + ':' if (UseCapturedNS_ and self.partnerCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spartnerCode>%s</%spartnerCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.partnerCode), input_name='partnerCode')), namespaceprefix_ , eol_))
        if self.SSort is not None:
            namespaceprefix_ = self.SSort_nsprefix_ + ':' if (UseCapturedNS_ and self.SSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSSort>%s</%sSSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.SSort), input_name='SSort')), namespaceprefix_ , eol_))
        if self.serviceMark is not None:
            namespaceprefix_ = self.serviceMark_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceMark>%s</%sserviceMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceMark), input_name='serviceMark')), namespaceprefix_ , eol_))
        if self.serviceText is not None:
            namespaceprefix_ = self.serviceText_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceText_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceText>%s</%sserviceText>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceText), input_name='serviceText')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'barcodeId':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'barcodeId')
            value_ = self.gds_validate_string(value_, node, 'barcodeId')
            self.barcodeId = value_
            self.barcodeId_nsprefix_ = child_.prefix
        elif nodeName_ == 'barcodePostcode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'barcodePostcode')
            value_ = self.gds_validate_string(value_, node, 'barcodePostcode')
            self.barcodePostcode = value_
            self.barcodePostcode_nsprefix_ = child_.prefix
        elif nodeName_ == 'buAlphaString':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'buAlphaString')
            value_ = self.gds_validate_string(value_, node, 'buAlphaString')
            self.buAlphaString = value_
            self.buAlphaString_nsprefix_ = child_.prefix
        elif nodeName_ == 'buCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'buCode')
            value_ = self.gds_validate_string(value_, node, 'buCode')
            self.buCode = value_
            self.buCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'CSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'CSort')
            value_ = self.gds_validate_string(value_, node, 'CSort')
            self.CSort = value_
            self.CSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'DCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DCountry')
            value_ = self.gds_validate_string(value_, node, 'DCountry')
            self.DCountry = value_
            self.DCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'DDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DDepot')
            value_ = self.gds_validate_string(value_, node, 'DDepot')
            self.DDepot = value_
            self.DDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'DDepotCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DDepotCountry')
            value_ = self.gds_validate_string(value_, node, 'DDepotCountry')
            self.DDepotCountry = value_
            self.DDepotCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'DDepotStr':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DDepotStr')
            value_ = self.gds_validate_string(value_, node, 'DDepotStr')
            self.DDepotStr = value_
            self.DDepotStr_nsprefix_ = child_.prefix
        elif nodeName_ == 'DSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DSort')
            value_ = self.gds_validate_string(value_, node, 'DSort')
            self.DSort = value_
            self.DSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'groupingPriority':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'groupingPriority')
            value_ = self.gds_validate_string(value_, node, 'groupingPriority')
            self.groupingPriority = value_
            self.groupingPriority_nsprefix_ = child_.prefix
        elif nodeName_ == 'networkCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'networkCode')
            value_ = self.gds_validate_string(value_, node, 'networkCode')
            self.networkCode = value_
            self.networkCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'OSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OSort')
            value_ = self.gds_validate_string(value_, node, 'OSort')
            self.OSort = value_
            self.OSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'partnerCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'partnerCode')
            value_ = self.gds_validate_string(value_, node, 'partnerCode')
            self.partnerCode = value_
            self.partnerCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'SSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'SSort')
            value_ = self.gds_validate_string(value_, node, 'SSort')
            self.SSort = value_
            self.SSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceMark')
            value_ = self.gds_validate_string(value_, node, 'serviceMark')
            self.serviceMark = value_
            self.serviceMark_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceText':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceText')
            value_ = self.gds_validate_string(value_, node, 'serviceText')
            self.serviceText = value_
            self.serviceText_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
# end class geopostResult


class skybillValueV2(skybillValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = skybillValue
    def __init__(self, bulkNumber=None, codCurrency=None, codValue=None, content1=None, content2=None, content3=None, content4=None, content5=None, customsCurrency=None, customsValue=None, evtCode=None, insuredCurrency=None, insuredValue=None, latitude=None, longitude=None, masterSkybillNumber=None, objectType=None, portCurrency=None, portValue=None, productCode=None, qualite=None, service=None, shipDate=None, shipHour=None, skybillRank=None, source=None, weight=None, weightUnit=None, as_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("skybillValueV2"), self).__init__(bulkNumber, codCurrency, codValue, content1, content2, content3, content4, content5, customsCurrency, customsValue, evtCode, insuredCurrency, insuredValue, latitude, longitude, masterSkybillNumber, objectType, portCurrency, portValue, productCode, qualite, service, shipDate, shipHour, skybillRank, source, weight, weightUnit,  **kwargs_)
        self.as_ = as_
        self.as__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillValueV2.subclass:
            return skybillValueV2.subclass(*args_, **kwargs_)
        else:
            return skybillValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_as(self):
        return self.as_
    def set_as(self, as_):
        self.as_ = as_
    def _hasContent(self):
        if (
            self.as_ is not None or
            super(skybillValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillValueV2'):
        super(skybillValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillValueV2', fromsubclass_=False, pretty_print=True):
        super(skybillValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.as_ is not None:
            namespaceprefix_ = self.as__nsprefix_ + ':' if (UseCapturedNS_ and self.as__nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sas>%s</%sas>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.as_), input_name='as')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(skybillValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'as':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'as')
            value_ = self.gds_validate_string(value_, node, 'as')
            self.as_ = value_
            self.as_nsprefix_ = child_.prefix
        super(skybillValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class skybillValueV2


class resultFaisabiliteESD(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, errorCode=None, errorMessage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultFaisabiliteESD)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultFaisabiliteESD.subclass:
            return resultFaisabiliteESD.subclass(*args_, **kwargs_)
        else:
            return resultFaisabiliteESD(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def _hasContent(self):
        if (
            self.errorCode is not None or
            self.errorMessage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultFaisabiliteESD', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultFaisabiliteESD')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultFaisabiliteESD':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultFaisabiliteESD')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultFaisabiliteESD', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultFaisabiliteESD'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultFaisabiliteESD', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
# end class resultFaisabiliteESD


class donneurDOrdre(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, autreTelephone=None, batiment=None, codeCivilite=None, codeNaf=None, codePays=None, codePostal=None, EMail=None, fax=None, lieuDit=None, nom=None, prenom=None, raisonSociale=None, service=None, telephone=None, ville=None, voie=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.autreTelephone = autreTelephone
        self.autreTelephone_nsprefix_ = None
        self.batiment = batiment
        self.batiment_nsprefix_ = None
        self.codeCivilite = codeCivilite
        self.codeCivilite_nsprefix_ = None
        self.codeNaf = codeNaf
        self.codeNaf_nsprefix_ = None
        self.codePays = codePays
        self.codePays_nsprefix_ = None
        self.codePostal = codePostal
        self.codePostal_nsprefix_ = None
        self.EMail = EMail
        self.EMail_nsprefix_ = None
        self.fax = fax
        self.fax_nsprefix_ = None
        self.lieuDit = lieuDit
        self.lieuDit_nsprefix_ = None
        self.nom = nom
        self.nom_nsprefix_ = None
        self.prenom = prenom
        self.prenom_nsprefix_ = None
        self.raisonSociale = raisonSociale
        self.raisonSociale_nsprefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        self.telephone = telephone
        self.telephone_nsprefix_ = None
        self.ville = ville
        self.ville_nsprefix_ = None
        self.voie = voie
        self.voie_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, donneurDOrdre)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if donneurDOrdre.subclass:
            return donneurDOrdre.subclass(*args_, **kwargs_)
        else:
            return donneurDOrdre(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_autreTelephone(self):
        return self.autreTelephone
    def set_autreTelephone(self, autreTelephone):
        self.autreTelephone = autreTelephone
    def get_batiment(self):
        return self.batiment
    def set_batiment(self, batiment):
        self.batiment = batiment
    def get_codeCivilite(self):
        return self.codeCivilite
    def set_codeCivilite(self, codeCivilite):
        self.codeCivilite = codeCivilite
    def get_codeNaf(self):
        return self.codeNaf
    def set_codeNaf(self, codeNaf):
        self.codeNaf = codeNaf
    def get_codePays(self):
        return self.codePays
    def set_codePays(self, codePays):
        self.codePays = codePays
    def get_codePostal(self):
        return self.codePostal
    def set_codePostal(self, codePostal):
        self.codePostal = codePostal
    def get_EMail(self):
        return self.EMail
    def set_EMail(self, EMail):
        self.EMail = EMail
    def get_fax(self):
        return self.fax
    def set_fax(self, fax):
        self.fax = fax
    def get_lieuDit(self):
        return self.lieuDit
    def set_lieuDit(self, lieuDit):
        self.lieuDit = lieuDit
    def get_nom(self):
        return self.nom
    def set_nom(self, nom):
        self.nom = nom
    def get_prenom(self):
        return self.prenom
    def set_prenom(self, prenom):
        self.prenom = prenom
    def get_raisonSociale(self):
        return self.raisonSociale
    def set_raisonSociale(self, raisonSociale):
        self.raisonSociale = raisonSociale
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_telephone(self):
        return self.telephone
    def set_telephone(self, telephone):
        self.telephone = telephone
    def get_ville(self):
        return self.ville
    def set_ville(self, ville):
        self.ville = ville
    def get_voie(self):
        return self.voie
    def set_voie(self, voie):
        self.voie = voie
    def _hasContent(self):
        if (
            self.autreTelephone is not None or
            self.batiment is not None or
            self.codeCivilite is not None or
            self.codeNaf is not None or
            self.codePays is not None or
            self.codePostal is not None or
            self.EMail is not None or
            self.fax is not None or
            self.lieuDit is not None or
            self.nom is not None or
            self.prenom is not None or
            self.raisonSociale is not None or
            self.service is not None or
            self.telephone is not None or
            self.ville is not None or
            self.voie is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='donneurDOrdre', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('donneurDOrdre')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'donneurDOrdre':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='donneurDOrdre')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='donneurDOrdre', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='donneurDOrdre'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='donneurDOrdre', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.autreTelephone is not None:
            namespaceprefix_ = self.autreTelephone_nsprefix_ + ':' if (UseCapturedNS_ and self.autreTelephone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sautreTelephone>%s</%sautreTelephone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.autreTelephone), input_name='autreTelephone')), namespaceprefix_ , eol_))
        if self.batiment is not None:
            namespaceprefix_ = self.batiment_nsprefix_ + ':' if (UseCapturedNS_ and self.batiment_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbatiment>%s</%sbatiment>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.batiment), input_name='batiment')), namespaceprefix_ , eol_))
        if self.codeCivilite is not None:
            namespaceprefix_ = self.codeCivilite_nsprefix_ + ':' if (UseCapturedNS_ and self.codeCivilite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeCivilite>%s</%scodeCivilite>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeCivilite), input_name='codeCivilite')), namespaceprefix_ , eol_))
        if self.codeNaf is not None:
            namespaceprefix_ = self.codeNaf_nsprefix_ + ':' if (UseCapturedNS_ and self.codeNaf_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeNaf>%s</%scodeNaf>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeNaf), input_name='codeNaf')), namespaceprefix_ , eol_))
        if self.codePays is not None:
            namespaceprefix_ = self.codePays_nsprefix_ + ':' if (UseCapturedNS_ and self.codePays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePays>%s</%scodePays>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePays), input_name='codePays')), namespaceprefix_ , eol_))
        if self.codePostal is not None:
            namespaceprefix_ = self.codePostal_nsprefix_ + ':' if (UseCapturedNS_ and self.codePostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePostal>%s</%scodePostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePostal), input_name='codePostal')), namespaceprefix_ , eol_))
        if self.EMail is not None:
            namespaceprefix_ = self.EMail_nsprefix_ + ':' if (UseCapturedNS_ and self.EMail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEMail>%s</%sEMail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.EMail), input_name='EMail')), namespaceprefix_ , eol_))
        if self.fax is not None:
            namespaceprefix_ = self.fax_nsprefix_ + ':' if (UseCapturedNS_ and self.fax_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sfax>%s</%sfax>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.fax), input_name='fax')), namespaceprefix_ , eol_))
        if self.lieuDit is not None:
            namespaceprefix_ = self.lieuDit_nsprefix_ + ':' if (UseCapturedNS_ and self.lieuDit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slieuDit>%s</%slieuDit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lieuDit), input_name='lieuDit')), namespaceprefix_ , eol_))
        if self.nom is not None:
            namespaceprefix_ = self.nom_nsprefix_ + ':' if (UseCapturedNS_ and self.nom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snom>%s</%snom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nom), input_name='nom')), namespaceprefix_ , eol_))
        if self.prenom is not None:
            namespaceprefix_ = self.prenom_nsprefix_ + ':' if (UseCapturedNS_ and self.prenom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprenom>%s</%sprenom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.prenom), input_name='prenom')), namespaceprefix_ , eol_))
        if self.raisonSociale is not None:
            namespaceprefix_ = self.raisonSociale_nsprefix_ + ':' if (UseCapturedNS_ and self.raisonSociale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sraisonSociale>%s</%sraisonSociale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.raisonSociale), input_name='raisonSociale')), namespaceprefix_ , eol_))
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sservice>%s</%sservice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.service), input_name='service')), namespaceprefix_ , eol_))
        if self.telephone is not None:
            namespaceprefix_ = self.telephone_nsprefix_ + ':' if (UseCapturedNS_ and self.telephone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stelephone>%s</%stelephone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.telephone), input_name='telephone')), namespaceprefix_ , eol_))
        if self.ville is not None:
            namespaceprefix_ = self.ville_nsprefix_ + ':' if (UseCapturedNS_ and self.ville_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sville>%s</%sville>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ville), input_name='ville')), namespaceprefix_ , eol_))
        if self.voie is not None:
            namespaceprefix_ = self.voie_nsprefix_ + ':' if (UseCapturedNS_ and self.voie_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svoie>%s</%svoie>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.voie), input_name='voie')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'autreTelephone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'autreTelephone')
            value_ = self.gds_validate_string(value_, node, 'autreTelephone')
            self.autreTelephone = value_
            self.autreTelephone_nsprefix_ = child_.prefix
        elif nodeName_ == 'batiment':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'batiment')
            value_ = self.gds_validate_string(value_, node, 'batiment')
            self.batiment = value_
            self.batiment_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeCivilite':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeCivilite')
            value_ = self.gds_validate_string(value_, node, 'codeCivilite')
            self.codeCivilite = value_
            self.codeCivilite_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeNaf':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeNaf')
            value_ = self.gds_validate_string(value_, node, 'codeNaf')
            self.codeNaf = value_
            self.codeNaf_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePays':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePays')
            value_ = self.gds_validate_string(value_, node, 'codePays')
            self.codePays = value_
            self.codePays_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePostal')
            value_ = self.gds_validate_string(value_, node, 'codePostal')
            self.codePostal = value_
            self.codePostal_nsprefix_ = child_.prefix
        elif nodeName_ == 'EMail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'EMail')
            value_ = self.gds_validate_string(value_, node, 'EMail')
            self.EMail = value_
            self.EMail_nsprefix_ = child_.prefix
        elif nodeName_ == 'fax':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'fax')
            value_ = self.gds_validate_string(value_, node, 'fax')
            self.fax = value_
            self.fax_nsprefix_ = child_.prefix
        elif nodeName_ == 'lieuDit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lieuDit')
            value_ = self.gds_validate_string(value_, node, 'lieuDit')
            self.lieuDit = value_
            self.lieuDit_nsprefix_ = child_.prefix
        elif nodeName_ == 'nom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'nom')
            value_ = self.gds_validate_string(value_, node, 'nom')
            self.nom = value_
            self.nom_nsprefix_ = child_.prefix
        elif nodeName_ == 'prenom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'prenom')
            value_ = self.gds_validate_string(value_, node, 'prenom')
            self.prenom = value_
            self.prenom_nsprefix_ = child_.prefix
        elif nodeName_ == 'raisonSociale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'raisonSociale')
            value_ = self.gds_validate_string(value_, node, 'raisonSociale')
            self.raisonSociale = value_
            self.raisonSociale_nsprefix_ = child_.prefix
        elif nodeName_ == 'service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'service')
            value_ = self.gds_validate_string(value_, node, 'service')
            self.service = value_
            self.service_nsprefix_ = child_.prefix
        elif nodeName_ == 'telephone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'telephone')
            value_ = self.gds_validate_string(value_, node, 'telephone')
            self.telephone = value_
            self.telephone_nsprefix_ = child_.prefix
        elif nodeName_ == 'ville':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ville')
            value_ = self.gds_validate_string(value_, node, 'ville')
            self.ville = value_
            self.ville_nsprefix_ = child_.prefix
        elif nodeName_ == 'voie':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'voie')
            value_ = self.gds_validate_string(value_, node, 'voie')
            self.voie = value_
            self.voie_nsprefix_ = child_.prefix
# end class donneurDOrdre


class adresseEnlevement(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codeCivilite=None, codePays=None, codePorte=None, codePostal=None, lieuDit=None, nom=None, nomPersonneARencontrer=None, numeroVoie=None, porteAPorte=None, prenom=None, raisonSociale=None, residenceBatimentEtage=None, serviceDirection=None, telephone=None, ville=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codeCivilite = codeCivilite
        self.codeCivilite_nsprefix_ = None
        self.codePays = codePays
        self.codePays_nsprefix_ = None
        self.codePorte = codePorte
        self.codePorte_nsprefix_ = None
        self.codePostal = codePostal
        self.codePostal_nsprefix_ = None
        self.lieuDit = lieuDit
        self.lieuDit_nsprefix_ = None
        self.nom = nom
        self.nom_nsprefix_ = None
        self.nomPersonneARencontrer = nomPersonneARencontrer
        self.nomPersonneARencontrer_nsprefix_ = None
        self.numeroVoie = numeroVoie
        self.numeroVoie_nsprefix_ = None
        self.porteAPorte = porteAPorte
        self.porteAPorte_nsprefix_ = None
        self.prenom = prenom
        self.prenom_nsprefix_ = None
        self.raisonSociale = raisonSociale
        self.raisonSociale_nsprefix_ = None
        self.residenceBatimentEtage = residenceBatimentEtage
        self.residenceBatimentEtage_nsprefix_ = None
        self.serviceDirection = serviceDirection
        self.serviceDirection_nsprefix_ = None
        self.telephone = telephone
        self.telephone_nsprefix_ = None
        self.ville = ville
        self.ville_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, adresseEnlevement)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if adresseEnlevement.subclass:
            return adresseEnlevement.subclass(*args_, **kwargs_)
        else:
            return adresseEnlevement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeCivilite(self):
        return self.codeCivilite
    def set_codeCivilite(self, codeCivilite):
        self.codeCivilite = codeCivilite
    def get_codePays(self):
        return self.codePays
    def set_codePays(self, codePays):
        self.codePays = codePays
    def get_codePorte(self):
        return self.codePorte
    def set_codePorte(self, codePorte):
        self.codePorte = codePorte
    def get_codePostal(self):
        return self.codePostal
    def set_codePostal(self, codePostal):
        self.codePostal = codePostal
    def get_lieuDit(self):
        return self.lieuDit
    def set_lieuDit(self, lieuDit):
        self.lieuDit = lieuDit
    def get_nom(self):
        return self.nom
    def set_nom(self, nom):
        self.nom = nom
    def get_nomPersonneARencontrer(self):
        return self.nomPersonneARencontrer
    def set_nomPersonneARencontrer(self, nomPersonneARencontrer):
        self.nomPersonneARencontrer = nomPersonneARencontrer
    def get_numeroVoie(self):
        return self.numeroVoie
    def set_numeroVoie(self, numeroVoie):
        self.numeroVoie = numeroVoie
    def get_porteAPorte(self):
        return self.porteAPorte
    def set_porteAPorte(self, porteAPorte):
        self.porteAPorte = porteAPorte
    def get_prenom(self):
        return self.prenom
    def set_prenom(self, prenom):
        self.prenom = prenom
    def get_raisonSociale(self):
        return self.raisonSociale
    def set_raisonSociale(self, raisonSociale):
        self.raisonSociale = raisonSociale
    def get_residenceBatimentEtage(self):
        return self.residenceBatimentEtage
    def set_residenceBatimentEtage(self, residenceBatimentEtage):
        self.residenceBatimentEtage = residenceBatimentEtage
    def get_serviceDirection(self):
        return self.serviceDirection
    def set_serviceDirection(self, serviceDirection):
        self.serviceDirection = serviceDirection
    def get_telephone(self):
        return self.telephone
    def set_telephone(self, telephone):
        self.telephone = telephone
    def get_ville(self):
        return self.ville
    def set_ville(self, ville):
        self.ville = ville
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.codeCivilite is not None or
            self.codePays is not None or
            self.codePorte is not None or
            self.codePostal is not None or
            self.lieuDit is not None or
            self.nom is not None or
            self.nomPersonneARencontrer is not None or
            self.numeroVoie is not None or
            self.porteAPorte is not None or
            self.prenom is not None or
            self.raisonSociale is not None or
            self.residenceBatimentEtage is not None or
            self.serviceDirection is not None or
            self.telephone is not None or
            self.ville is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='adresseEnlevement', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('adresseEnlevement')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'adresseEnlevement':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='adresseEnlevement')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='adresseEnlevement', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='adresseEnlevement'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='adresseEnlevement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeCivilite is not None:
            namespaceprefix_ = self.codeCivilite_nsprefix_ + ':' if (UseCapturedNS_ and self.codeCivilite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeCivilite>%s</%scodeCivilite>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeCivilite), input_name='codeCivilite')), namespaceprefix_ , eol_))
        if self.codePays is not None:
            namespaceprefix_ = self.codePays_nsprefix_ + ':' if (UseCapturedNS_ and self.codePays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePays>%s</%scodePays>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePays), input_name='codePays')), namespaceprefix_ , eol_))
        if self.codePorte is not None:
            namespaceprefix_ = self.codePorte_nsprefix_ + ':' if (UseCapturedNS_ and self.codePorte_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePorte>%s</%scodePorte>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePorte), input_name='codePorte')), namespaceprefix_ , eol_))
        if self.codePostal is not None:
            namespaceprefix_ = self.codePostal_nsprefix_ + ':' if (UseCapturedNS_ and self.codePostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePostal>%s</%scodePostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePostal), input_name='codePostal')), namespaceprefix_ , eol_))
        if self.lieuDit is not None:
            namespaceprefix_ = self.lieuDit_nsprefix_ + ':' if (UseCapturedNS_ and self.lieuDit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slieuDit>%s</%slieuDit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.lieuDit), input_name='lieuDit')), namespaceprefix_ , eol_))
        if self.nom is not None:
            namespaceprefix_ = self.nom_nsprefix_ + ':' if (UseCapturedNS_ and self.nom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snom>%s</%snom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nom), input_name='nom')), namespaceprefix_ , eol_))
        if self.nomPersonneARencontrer is not None:
            namespaceprefix_ = self.nomPersonneARencontrer_nsprefix_ + ':' if (UseCapturedNS_ and self.nomPersonneARencontrer_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomPersonneARencontrer>%s</%snomPersonneARencontrer>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nomPersonneARencontrer), input_name='nomPersonneARencontrer')), namespaceprefix_ , eol_))
        if self.numeroVoie is not None:
            namespaceprefix_ = self.numeroVoie_nsprefix_ + ':' if (UseCapturedNS_ and self.numeroVoie_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroVoie>%s</%snumeroVoie>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.numeroVoie), input_name='numeroVoie')), namespaceprefix_ , eol_))
        if self.porteAPorte is not None:
            namespaceprefix_ = self.porteAPorte_nsprefix_ + ':' if (UseCapturedNS_ and self.porteAPorte_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sporteAPorte>%s</%sporteAPorte>%s' % (namespaceprefix_ , self.gds_format_boolean(self.porteAPorte, input_name='porteAPorte'), namespaceprefix_ , eol_))
        if self.prenom is not None:
            namespaceprefix_ = self.prenom_nsprefix_ + ':' if (UseCapturedNS_ and self.prenom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprenom>%s</%sprenom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.prenom), input_name='prenom')), namespaceprefix_ , eol_))
        if self.raisonSociale is not None:
            namespaceprefix_ = self.raisonSociale_nsprefix_ + ':' if (UseCapturedNS_ and self.raisonSociale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sraisonSociale>%s</%sraisonSociale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.raisonSociale), input_name='raisonSociale')), namespaceprefix_ , eol_))
        if self.residenceBatimentEtage is not None:
            namespaceprefix_ = self.residenceBatimentEtage_nsprefix_ + ':' if (UseCapturedNS_ and self.residenceBatimentEtage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sresidenceBatimentEtage>%s</%sresidenceBatimentEtage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.residenceBatimentEtage), input_name='residenceBatimentEtage')), namespaceprefix_ , eol_))
        if self.serviceDirection is not None:
            namespaceprefix_ = self.serviceDirection_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceDirection_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceDirection>%s</%sserviceDirection>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceDirection), input_name='serviceDirection')), namespaceprefix_ , eol_))
        if self.telephone is not None:
            namespaceprefix_ = self.telephone_nsprefix_ + ':' if (UseCapturedNS_ and self.telephone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stelephone>%s</%stelephone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.telephone), input_name='telephone')), namespaceprefix_ , eol_))
        if self.ville is not None:
            namespaceprefix_ = self.ville_nsprefix_ + ':' if (UseCapturedNS_ and self.ville_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sville>%s</%sville>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ville), input_name='ville')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeCivilite':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeCivilite')
            value_ = self.gds_validate_string(value_, node, 'codeCivilite')
            self.codeCivilite = value_
            self.codeCivilite_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePays':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePays')
            value_ = self.gds_validate_string(value_, node, 'codePays')
            self.codePays = value_
            self.codePays_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePorte':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePorte')
            value_ = self.gds_validate_string(value_, node, 'codePorte')
            self.codePorte = value_
            self.codePorte_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePostal')
            value_ = self.gds_validate_string(value_, node, 'codePostal')
            self.codePostal = value_
            self.codePostal_nsprefix_ = child_.prefix
        elif nodeName_ == 'lieuDit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'lieuDit')
            value_ = self.gds_validate_string(value_, node, 'lieuDit')
            self.lieuDit = value_
            self.lieuDit_nsprefix_ = child_.prefix
        elif nodeName_ == 'nom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'nom')
            value_ = self.gds_validate_string(value_, node, 'nom')
            self.nom = value_
            self.nom_nsprefix_ = child_.prefix
        elif nodeName_ == 'nomPersonneARencontrer':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'nomPersonneARencontrer')
            value_ = self.gds_validate_string(value_, node, 'nomPersonneARencontrer')
            self.nomPersonneARencontrer = value_
            self.nomPersonneARencontrer_nsprefix_ = child_.prefix
        elif nodeName_ == 'numeroVoie':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'numeroVoie')
            value_ = self.gds_validate_string(value_, node, 'numeroVoie')
            self.numeroVoie = value_
            self.numeroVoie_nsprefix_ = child_.prefix
        elif nodeName_ == 'porteAPorte':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'porteAPorte')
            ival_ = self.gds_validate_boolean(ival_, node, 'porteAPorte')
            self.porteAPorte = ival_
            self.porteAPorte_nsprefix_ = child_.prefix
        elif nodeName_ == 'prenom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'prenom')
            value_ = self.gds_validate_string(value_, node, 'prenom')
            self.prenom = value_
            self.prenom_nsprefix_ = child_.prefix
        elif nodeName_ == 'raisonSociale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'raisonSociale')
            value_ = self.gds_validate_string(value_, node, 'raisonSociale')
            self.raisonSociale = value_
            self.raisonSociale_nsprefix_ = child_.prefix
        elif nodeName_ == 'residenceBatimentEtage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'residenceBatimentEtage')
            value_ = self.gds_validate_string(value_, node, 'residenceBatimentEtage')
            self.residenceBatimentEtage = value_
            self.residenceBatimentEtage_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceDirection':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceDirection')
            value_ = self.gds_validate_string(value_, node, 'serviceDirection')
            self.serviceDirection = value_
            self.serviceDirection_nsprefix_ = child_.prefix
        elif nodeName_ == 'telephone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'telephone')
            value_ = self.gds_validate_string(value_, node, 'telephone')
            self.telephone = value_
            self.telephone_nsprefix_ = child_.prefix
        elif nodeName_ == 'ville':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ville')
            value_ = self.gds_validate_string(value_, node, 'ville')
            self.ville = value_
            self.ville_nsprefix_ = child_.prefix
# end class adresseEnlevement


class adresseEnlevementV2(adresseEnlevement):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = adresseEnlevement
    def __init__(self, codeCivilite=None, codePays=None, codePorte=None, codePostal=None, lieuDit=None, nom=None, nomPersonneARencontrer=None, numeroVoie=None, porteAPorte=None, prenom=None, raisonSociale=None, residenceBatimentEtage=None, serviceDirection=None, telephone=None, ville=None, email=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("adresseEnlevementV2"), self).__init__(codeCivilite, codePays, codePorte, codePostal, lieuDit, nom, nomPersonneARencontrer, numeroVoie, porteAPorte, prenom, raisonSociale, residenceBatimentEtage, serviceDirection, telephone, ville, extensiontype_,  **kwargs_)
        self.email = email
        self.email_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, adresseEnlevementV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if adresseEnlevementV2.subclass:
            return adresseEnlevementV2.subclass(*args_, **kwargs_)
        else:
            return adresseEnlevementV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_email(self):
        return self.email
    def set_email(self, email):
        self.email = email
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.email is not None or
            super(adresseEnlevementV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='adresseEnlevementV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('adresseEnlevementV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'adresseEnlevementV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='adresseEnlevementV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='adresseEnlevementV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='adresseEnlevementV2'):
        super(adresseEnlevementV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='adresseEnlevementV2')
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='adresseEnlevementV2', fromsubclass_=False, pretty_print=True):
        super(adresseEnlevementV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.email is not None:
            namespaceprefix_ = self.email_nsprefix_ + ':' if (UseCapturedNS_ and self.email_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%semail>%s</%semail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.email), input_name='email')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(adresseEnlevementV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'email':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'email')
            value_ = self.gds_validate_string(value_, node, 'email')
            self.email = value_
            self.email_nsprefix_ = child_.prefix
        super(adresseEnlevementV2, self)._buildChildren(child_, node, nodeName_, True)
# end class adresseEnlevementV2


class adresseEnlevementV3(adresseEnlevementV2):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = adresseEnlevementV2
    def __init__(self, codeCivilite=None, codePays=None, codePorte=None, codePostal=None, lieuDit=None, nom=None, nomPersonneARencontrer=None, numeroVoie=None, porteAPorte=None, prenom=None, raisonSociale=None, residenceBatimentEtage=None, serviceDirection=None, telephone=None, ville=None, email=None, refExpediteur=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("adresseEnlevementV3"), self).__init__(codeCivilite, codePays, codePorte, codePostal, lieuDit, nom, nomPersonneARencontrer, numeroVoie, porteAPorte, prenom, raisonSociale, residenceBatimentEtage, serviceDirection, telephone, ville, email,  **kwargs_)
        self.refExpediteur = refExpediteur
        self.refExpediteur_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, adresseEnlevementV3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if adresseEnlevementV3.subclass:
            return adresseEnlevementV3.subclass(*args_, **kwargs_)
        else:
            return adresseEnlevementV3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_refExpediteur(self):
        return self.refExpediteur
    def set_refExpediteur(self, refExpediteur):
        self.refExpediteur = refExpediteur
    def _hasContent(self):
        if (
            self.refExpediteur is not None or
            super(adresseEnlevementV3, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='adresseEnlevementV3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('adresseEnlevementV3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'adresseEnlevementV3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='adresseEnlevementV3')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='adresseEnlevementV3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='adresseEnlevementV3'):
        super(adresseEnlevementV3, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='adresseEnlevementV3')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='adresseEnlevementV3', fromsubclass_=False, pretty_print=True):
        super(adresseEnlevementV3, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.refExpediteur is not None:
            namespaceprefix_ = self.refExpediteur_nsprefix_ + ':' if (UseCapturedNS_ and self.refExpediteur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srefExpediteur>%s</%srefExpediteur>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.refExpediteur), input_name='refExpediteur')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(adresseEnlevementV3, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'refExpediteur':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'refExpediteur')
            value_ = self.gds_validate_string(value_, node, 'refExpediteur')
            self.refExpediteur = value_
            self.refExpediteur_nsprefix_ = child_.prefix
        super(adresseEnlevementV3, self)._buildChildren(child_, node, nodeName_, True)
# end class adresseEnlevementV3


class particularitesEsd(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, etudeDeFaisabilite=None, grosVolume=None, hauteur=None, instructionsParticulieres=None, largeur=None, listeColisAnnonces=None, longueur=None, nombreEnvois=None, poids=None, volume=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.etudeDeFaisabilite = etudeDeFaisabilite
        self.etudeDeFaisabilite_nsprefix_ = None
        self.grosVolume = grosVolume
        self.grosVolume_nsprefix_ = None
        self.hauteur = hauteur
        self.hauteur_nsprefix_ = None
        self.instructionsParticulieres = instructionsParticulieres
        self.instructionsParticulieres_nsprefix_ = None
        self.largeur = largeur
        self.largeur_nsprefix_ = None
        self.listeColisAnnonces = listeColisAnnonces
        self.listeColisAnnonces_nsprefix_ = None
        self.longueur = longueur
        self.longueur_nsprefix_ = None
        self.nombreEnvois = nombreEnvois
        self.nombreEnvois_nsprefix_ = None
        self.poids = poids
        self.poids_nsprefix_ = None
        self.volume = volume
        self.volume_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, particularitesEsd)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if particularitesEsd.subclass:
            return particularitesEsd.subclass(*args_, **kwargs_)
        else:
            return particularitesEsd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_etudeDeFaisabilite(self):
        return self.etudeDeFaisabilite
    def set_etudeDeFaisabilite(self, etudeDeFaisabilite):
        self.etudeDeFaisabilite = etudeDeFaisabilite
    def get_grosVolume(self):
        return self.grosVolume
    def set_grosVolume(self, grosVolume):
        self.grosVolume = grosVolume
    def get_hauteur(self):
        return self.hauteur
    def set_hauteur(self, hauteur):
        self.hauteur = hauteur
    def get_instructionsParticulieres(self):
        return self.instructionsParticulieres
    def set_instructionsParticulieres(self, instructionsParticulieres):
        self.instructionsParticulieres = instructionsParticulieres
    def get_largeur(self):
        return self.largeur
    def set_largeur(self, largeur):
        self.largeur = largeur
    def get_listeColisAnnonces(self):
        return self.listeColisAnnonces
    def set_listeColisAnnonces(self, listeColisAnnonces):
        self.listeColisAnnonces = listeColisAnnonces
    def get_longueur(self):
        return self.longueur
    def set_longueur(self, longueur):
        self.longueur = longueur
    def get_nombreEnvois(self):
        return self.nombreEnvois
    def set_nombreEnvois(self, nombreEnvois):
        self.nombreEnvois = nombreEnvois
    def get_poids(self):
        return self.poids
    def set_poids(self, poids):
        self.poids = poids
    def get_volume(self):
        return self.volume
    def set_volume(self, volume):
        self.volume = volume
    def _hasContent(self):
        if (
            self.etudeDeFaisabilite is not None or
            self.grosVolume is not None or
            self.hauteur is not None or
            self.instructionsParticulieres is not None or
            self.largeur is not None or
            self.listeColisAnnonces is not None or
            self.longueur is not None or
            self.nombreEnvois is not None or
            self.poids is not None or
            self.volume is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='particularitesEsd', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('particularitesEsd')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'particularitesEsd':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='particularitesEsd')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='particularitesEsd', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='particularitesEsd'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='particularitesEsd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.etudeDeFaisabilite is not None:
            namespaceprefix_ = self.etudeDeFaisabilite_nsprefix_ + ':' if (UseCapturedNS_ and self.etudeDeFaisabilite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%setudeDeFaisabilite>%s</%setudeDeFaisabilite>%s' % (namespaceprefix_ , self.gds_format_boolean(self.etudeDeFaisabilite, input_name='etudeDeFaisabilite'), namespaceprefix_ , eol_))
        if self.grosVolume is not None:
            namespaceprefix_ = self.grosVolume_nsprefix_ + ':' if (UseCapturedNS_ and self.grosVolume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgrosVolume>%s</%sgrosVolume>%s' % (namespaceprefix_ , self.gds_format_boolean(self.grosVolume, input_name='grosVolume'), namespaceprefix_ , eol_))
        if self.hauteur is not None:
            namespaceprefix_ = self.hauteur_nsprefix_ + ':' if (UseCapturedNS_ and self.hauteur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shauteur>%s</%shauteur>%s' % (namespaceprefix_ , self.gds_format_integer(self.hauteur, input_name='hauteur'), namespaceprefix_ , eol_))
        if self.instructionsParticulieres is not None:
            namespaceprefix_ = self.instructionsParticulieres_nsprefix_ + ':' if (UseCapturedNS_ and self.instructionsParticulieres_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinstructionsParticulieres>%s</%sinstructionsParticulieres>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.instructionsParticulieres), input_name='instructionsParticulieres')), namespaceprefix_ , eol_))
        if self.largeur is not None:
            namespaceprefix_ = self.largeur_nsprefix_ + ':' if (UseCapturedNS_ and self.largeur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slargeur>%s</%slargeur>%s' % (namespaceprefix_ , self.gds_format_integer(self.largeur, input_name='largeur'), namespaceprefix_ , eol_))
        if self.listeColisAnnonces is not None:
            namespaceprefix_ = self.listeColisAnnonces_nsprefix_ + ':' if (UseCapturedNS_ and self.listeColisAnnonces_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slisteColisAnnonces>%s</%slisteColisAnnonces>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.listeColisAnnonces), input_name='listeColisAnnonces')), namespaceprefix_ , eol_))
        if self.longueur is not None:
            namespaceprefix_ = self.longueur_nsprefix_ + ':' if (UseCapturedNS_ and self.longueur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slongueur>%s</%slongueur>%s' % (namespaceprefix_ , self.gds_format_integer(self.longueur, input_name='longueur'), namespaceprefix_ , eol_))
        if self.nombreEnvois is not None:
            namespaceprefix_ = self.nombreEnvois_nsprefix_ + ':' if (UseCapturedNS_ and self.nombreEnvois_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snombreEnvois>%s</%snombreEnvois>%s' % (namespaceprefix_ , self.gds_format_integer(self.nombreEnvois, input_name='nombreEnvois'), namespaceprefix_ , eol_))
        if self.poids is not None:
            namespaceprefix_ = self.poids_nsprefix_ + ':' if (UseCapturedNS_ and self.poids_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spoids>%s</%spoids>%s' % (namespaceprefix_ , self.gds_format_float(self.poids, input_name='poids'), namespaceprefix_ , eol_))
        if self.volume is not None:
            namespaceprefix_ = self.volume_nsprefix_ + ':' if (UseCapturedNS_ and self.volume_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svolume>%s</%svolume>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.volume), input_name='volume')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'etudeDeFaisabilite':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'etudeDeFaisabilite')
            ival_ = self.gds_validate_boolean(ival_, node, 'etudeDeFaisabilite')
            self.etudeDeFaisabilite = ival_
            self.etudeDeFaisabilite_nsprefix_ = child_.prefix
        elif nodeName_ == 'grosVolume':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'grosVolume')
            ival_ = self.gds_validate_boolean(ival_, node, 'grosVolume')
            self.grosVolume = ival_
            self.grosVolume_nsprefix_ = child_.prefix
        elif nodeName_ == 'hauteur' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'hauteur')
            ival_ = self.gds_validate_integer(ival_, node, 'hauteur')
            self.hauteur = ival_
            self.hauteur_nsprefix_ = child_.prefix
        elif nodeName_ == 'instructionsParticulieres':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'instructionsParticulieres')
            value_ = self.gds_validate_string(value_, node, 'instructionsParticulieres')
            self.instructionsParticulieres = value_
            self.instructionsParticulieres_nsprefix_ = child_.prefix
        elif nodeName_ == 'largeur' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'largeur')
            ival_ = self.gds_validate_integer(ival_, node, 'largeur')
            self.largeur = ival_
            self.largeur_nsprefix_ = child_.prefix
        elif nodeName_ == 'listeColisAnnonces':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'listeColisAnnonces')
            value_ = self.gds_validate_string(value_, node, 'listeColisAnnonces')
            self.listeColisAnnonces = value_
            self.listeColisAnnonces_nsprefix_ = child_.prefix
        elif nodeName_ == 'longueur' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'longueur')
            ival_ = self.gds_validate_integer(ival_, node, 'longueur')
            self.longueur = ival_
            self.longueur_nsprefix_ = child_.prefix
        elif nodeName_ == 'nombreEnvois' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'nombreEnvois')
            ival_ = self.gds_validate_integer(ival_, node, 'nombreEnvois')
            self.nombreEnvois = ival_
            self.nombreEnvois_nsprefix_ = child_.prefix
        elif nodeName_ == 'poids' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'poids')
            fval_ = self.gds_validate_float(fval_, node, 'poids')
            self.poids = fval_
            self.poids_nsprefix_ = child_.prefix
        elif nodeName_ == 'volume':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'volume')
            value_ = self.gds_validate_string(value_, node, 'volume')
            self.volume = value_
            self.volume_nsprefix_ = child_.prefix
# end class particularitesEsd


class options(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, aviserSurRealisation=None, chezUnTiers=None, envoyerLtParMail=None, LTaImprimerParChronopost=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.aviserSurRealisation = aviserSurRealisation
        self.aviserSurRealisation_nsprefix_ = None
        self.chezUnTiers = chezUnTiers
        self.chezUnTiers_nsprefix_ = None
        self.envoyerLtParMail = envoyerLtParMail
        self.envoyerLtParMail_nsprefix_ = None
        self.LTaImprimerParChronopost = LTaImprimerParChronopost
        self.LTaImprimerParChronopost_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, options)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if options.subclass:
            return options.subclass(*args_, **kwargs_)
        else:
            return options(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_aviserSurRealisation(self):
        return self.aviserSurRealisation
    def set_aviserSurRealisation(self, aviserSurRealisation):
        self.aviserSurRealisation = aviserSurRealisation
    def get_chezUnTiers(self):
        return self.chezUnTiers
    def set_chezUnTiers(self, chezUnTiers):
        self.chezUnTiers = chezUnTiers
    def get_envoyerLtParMail(self):
        return self.envoyerLtParMail
    def set_envoyerLtParMail(self, envoyerLtParMail):
        self.envoyerLtParMail = envoyerLtParMail
    def get_LTaImprimerParChronopost(self):
        return self.LTaImprimerParChronopost
    def set_LTaImprimerParChronopost(self, LTaImprimerParChronopost):
        self.LTaImprimerParChronopost = LTaImprimerParChronopost
    def _hasContent(self):
        if (
            self.aviserSurRealisation is not None or
            self.chezUnTiers is not None or
            self.envoyerLtParMail is not None or
            self.LTaImprimerParChronopost is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='options', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('options')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'options':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='options')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='options', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='options'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='options', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.aviserSurRealisation is not None:
            namespaceprefix_ = self.aviserSurRealisation_nsprefix_ + ':' if (UseCapturedNS_ and self.aviserSurRealisation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saviserSurRealisation>%s</%saviserSurRealisation>%s' % (namespaceprefix_ , self.gds_format_boolean(self.aviserSurRealisation, input_name='aviserSurRealisation'), namespaceprefix_ , eol_))
        if self.chezUnTiers is not None:
            namespaceprefix_ = self.chezUnTiers_nsprefix_ + ':' if (UseCapturedNS_ and self.chezUnTiers_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%schezUnTiers>%s</%schezUnTiers>%s' % (namespaceprefix_ , self.gds_format_boolean(self.chezUnTiers, input_name='chezUnTiers'), namespaceprefix_ , eol_))
        if self.envoyerLtParMail is not None:
            namespaceprefix_ = self.envoyerLtParMail_nsprefix_ + ':' if (UseCapturedNS_ and self.envoyerLtParMail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%senvoyerLtParMail>%s</%senvoyerLtParMail>%s' % (namespaceprefix_ , self.gds_format_boolean(self.envoyerLtParMail, input_name='envoyerLtParMail'), namespaceprefix_ , eol_))
        if self.LTaImprimerParChronopost is not None:
            namespaceprefix_ = self.LTaImprimerParChronopost_nsprefix_ + ':' if (UseCapturedNS_ and self.LTaImprimerParChronopost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLTaImprimerParChronopost>%s</%sLTaImprimerParChronopost>%s' % (namespaceprefix_ , self.gds_format_boolean(self.LTaImprimerParChronopost, input_name='LTaImprimerParChronopost'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'aviserSurRealisation':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'aviserSurRealisation')
            ival_ = self.gds_validate_boolean(ival_, node, 'aviserSurRealisation')
            self.aviserSurRealisation = ival_
            self.aviserSurRealisation_nsprefix_ = child_.prefix
        elif nodeName_ == 'chezUnTiers':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'chezUnTiers')
            ival_ = self.gds_validate_boolean(ival_, node, 'chezUnTiers')
            self.chezUnTiers = ival_
            self.chezUnTiers_nsprefix_ = child_.prefix
        elif nodeName_ == 'envoyerLtParMail':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'envoyerLtParMail')
            ival_ = self.gds_validate_boolean(ival_, node, 'envoyerLtParMail')
            self.envoyerLtParMail = ival_
            self.envoyerLtParMail_nsprefix_ = child_.prefix
        elif nodeName_ == 'LTaImprimerParChronopost':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'LTaImprimerParChronopost')
            ival_ = self.gds_validate_boolean(ival_, node, 'LTaImprimerParChronopost')
            self.LTaImprimerParChronopost = ival_
            self.LTaImprimerParChronopost_nsprefix_ = child_.prefix
# end class options


class resultEnlevementNational(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codeErreur=None, infoEnlevement=None, libelleErreur=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codeErreur = codeErreur
        self.codeErreur_nsprefix_ = None
        self.infoEnlevement = infoEnlevement
        self.infoEnlevement_nsprefix_ = None
        self.libelleErreur = libelleErreur
        self.libelleErreur_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultEnlevementNational)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultEnlevementNational.subclass:
            return resultEnlevementNational.subclass(*args_, **kwargs_)
        else:
            return resultEnlevementNational(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeErreur(self):
        return self.codeErreur
    def set_codeErreur(self, codeErreur):
        self.codeErreur = codeErreur
    def get_infoEnlevement(self):
        return self.infoEnlevement
    def set_infoEnlevement(self, infoEnlevement):
        self.infoEnlevement = infoEnlevement
    def get_libelleErreur(self):
        return self.libelleErreur
    def set_libelleErreur(self, libelleErreur):
        self.libelleErreur = libelleErreur
    def _hasContent(self):
        if (
            self.codeErreur is not None or
            self.infoEnlevement is not None or
            self.libelleErreur is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultEnlevementNational', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultEnlevementNational')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultEnlevementNational':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultEnlevementNational')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultEnlevementNational', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultEnlevementNational'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultEnlevementNational', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeErreur is not None:
            namespaceprefix_ = self.codeErreur_nsprefix_ + ':' if (UseCapturedNS_ and self.codeErreur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeErreur>%s</%scodeErreur>%s' % (namespaceprefix_ , self.gds_format_integer(self.codeErreur, input_name='codeErreur'), namespaceprefix_ , eol_))
        if self.infoEnlevement is not None:
            namespaceprefix_ = self.infoEnlevement_nsprefix_ + ':' if (UseCapturedNS_ and self.infoEnlevement_nsprefix_) else ''
            self.infoEnlevement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='infoEnlevement', pretty_print=pretty_print)
        if self.libelleErreur is not None:
            namespaceprefix_ = self.libelleErreur_nsprefix_ + ':' if (UseCapturedNS_ and self.libelleErreur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slibelleErreur>%s</%slibelleErreur>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.libelleErreur), input_name='libelleErreur')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeErreur' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'codeErreur')
            ival_ = self.gds_validate_integer(ival_, node, 'codeErreur')
            self.codeErreur = ival_
            self.codeErreur_nsprefix_ = child_.prefix
        elif nodeName_ == 'infoEnlevement':
            obj_ = infoEnlevement.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.infoEnlevement = obj_
            obj_.original_tagname_ = 'infoEnlevement'
        elif nodeName_ == 'libelleErreur':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'libelleErreur')
            value_ = self.gds_validate_string(value_, node, 'libelleErreur')
            self.libelleErreur = value_
            self.libelleErreur_nsprefix_ = child_.prefix
# end class resultEnlevementNational


class infoEnlevement(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ancienNumeroESD=None, codeBu=None, codeDepot=None, codePostal=None, dateCreation=None, datePassage=None, idEnlevement=None, numeroUniqueESD=None, refDestinataire=None, refEsdClient=None, ville=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ancienNumeroESD = ancienNumeroESD
        self.ancienNumeroESD_nsprefix_ = None
        self.codeBu = codeBu
        self.codeBu_nsprefix_ = None
        self.codeDepot = codeDepot
        self.codeDepot_nsprefix_ = None
        self.codePostal = codePostal
        self.codePostal_nsprefix_ = None
        if isinstance(dateCreation, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(dateCreation, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = dateCreation
        self.dateCreation = initvalue_
        self.dateCreation_nsprefix_ = None
        if isinstance(datePassage, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(datePassage, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = datePassage
        self.datePassage = initvalue_
        self.datePassage_nsprefix_ = None
        self.idEnlevement = idEnlevement
        self.idEnlevement_nsprefix_ = None
        self.numeroUniqueESD = numeroUniqueESD
        self.numeroUniqueESD_nsprefix_ = None
        self.refDestinataire = refDestinataire
        self.refDestinataire_nsprefix_ = None
        self.refEsdClient = refEsdClient
        self.refEsdClient_nsprefix_ = None
        self.ville = ville
        self.ville_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoEnlevement)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoEnlevement.subclass:
            return infoEnlevement.subclass(*args_, **kwargs_)
        else:
            return infoEnlevement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ancienNumeroESD(self):
        return self.ancienNumeroESD
    def set_ancienNumeroESD(self, ancienNumeroESD):
        self.ancienNumeroESD = ancienNumeroESD
    def get_codeBu(self):
        return self.codeBu
    def set_codeBu(self, codeBu):
        self.codeBu = codeBu
    def get_codeDepot(self):
        return self.codeDepot
    def set_codeDepot(self, codeDepot):
        self.codeDepot = codeDepot
    def get_codePostal(self):
        return self.codePostal
    def set_codePostal(self, codePostal):
        self.codePostal = codePostal
    def get_dateCreation(self):
        return self.dateCreation
    def set_dateCreation(self, dateCreation):
        self.dateCreation = dateCreation
    def get_datePassage(self):
        return self.datePassage
    def set_datePassage(self, datePassage):
        self.datePassage = datePassage
    def get_idEnlevement(self):
        return self.idEnlevement
    def set_idEnlevement(self, idEnlevement):
        self.idEnlevement = idEnlevement
    def get_numeroUniqueESD(self):
        return self.numeroUniqueESD
    def set_numeroUniqueESD(self, numeroUniqueESD):
        self.numeroUniqueESD = numeroUniqueESD
    def get_refDestinataire(self):
        return self.refDestinataire
    def set_refDestinataire(self, refDestinataire):
        self.refDestinataire = refDestinataire
    def get_refEsdClient(self):
        return self.refEsdClient
    def set_refEsdClient(self, refEsdClient):
        self.refEsdClient = refEsdClient
    def get_ville(self):
        return self.ville
    def set_ville(self, ville):
        self.ville = ville
    def _hasContent(self):
        if (
            self.ancienNumeroESD is not None or
            self.codeBu is not None or
            self.codeDepot is not None or
            self.codePostal is not None or
            self.dateCreation is not None or
            self.datePassage is not None or
            self.idEnlevement is not None or
            self.numeroUniqueESD is not None or
            self.refDestinataire is not None or
            self.refEsdClient is not None or
            self.ville is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='infoEnlevement', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoEnlevement')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'infoEnlevement':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='infoEnlevement')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='infoEnlevement', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='infoEnlevement'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='infoEnlevement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ancienNumeroESD is not None:
            namespaceprefix_ = self.ancienNumeroESD_nsprefix_ + ':' if (UseCapturedNS_ and self.ancienNumeroESD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sancienNumeroESD>%s</%sancienNumeroESD>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ancienNumeroESD), input_name='ancienNumeroESD')), namespaceprefix_ , eol_))
        if self.codeBu is not None:
            namespaceprefix_ = self.codeBu_nsprefix_ + ':' if (UseCapturedNS_ and self.codeBu_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeBu>%s</%scodeBu>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeBu), input_name='codeBu')), namespaceprefix_ , eol_))
        if self.codeDepot is not None:
            namespaceprefix_ = self.codeDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.codeDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeDepot>%s</%scodeDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeDepot), input_name='codeDepot')), namespaceprefix_ , eol_))
        if self.codePostal is not None:
            namespaceprefix_ = self.codePostal_nsprefix_ + ':' if (UseCapturedNS_ and self.codePostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePostal>%s</%scodePostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePostal), input_name='codePostal')), namespaceprefix_ , eol_))
        if self.dateCreation is not None:
            namespaceprefix_ = self.dateCreation_nsprefix_ + ':' if (UseCapturedNS_ and self.dateCreation_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdateCreation>%s</%sdateCreation>%s' % (namespaceprefix_ , self.gds_format_datetime(self.dateCreation, input_name='dateCreation'), namespaceprefix_ , eol_))
        if self.datePassage is not None:
            namespaceprefix_ = self.datePassage_nsprefix_ + ':' if (UseCapturedNS_ and self.datePassage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatePassage>%s</%sdatePassage>%s' % (namespaceprefix_ , self.gds_format_datetime(self.datePassage, input_name='datePassage'), namespaceprefix_ , eol_))
        if self.idEnlevement is not None:
            namespaceprefix_ = self.idEnlevement_nsprefix_ + ':' if (UseCapturedNS_ and self.idEnlevement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sidEnlevement>%s</%sidEnlevement>%s' % (namespaceprefix_ , self.gds_format_integer(self.idEnlevement, input_name='idEnlevement'), namespaceprefix_ , eol_))
        if self.numeroUniqueESD is not None:
            namespaceprefix_ = self.numeroUniqueESD_nsprefix_ + ':' if (UseCapturedNS_ and self.numeroUniqueESD_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumeroUniqueESD>%s</%snumeroUniqueESD>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.numeroUniqueESD), input_name='numeroUniqueESD')), namespaceprefix_ , eol_))
        if self.refDestinataire is not None:
            namespaceprefix_ = self.refDestinataire_nsprefix_ + ':' if (UseCapturedNS_ and self.refDestinataire_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srefDestinataire>%s</%srefDestinataire>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.refDestinataire), input_name='refDestinataire')), namespaceprefix_ , eol_))
        if self.refEsdClient is not None:
            namespaceprefix_ = self.refEsdClient_nsprefix_ + ':' if (UseCapturedNS_ and self.refEsdClient_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srefEsdClient>%s</%srefEsdClient>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.refEsdClient), input_name='refEsdClient')), namespaceprefix_ , eol_))
        if self.ville is not None:
            namespaceprefix_ = self.ville_nsprefix_ + ':' if (UseCapturedNS_ and self.ville_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sville>%s</%sville>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ville), input_name='ville')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ancienNumeroESD':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ancienNumeroESD')
            value_ = self.gds_validate_string(value_, node, 'ancienNumeroESD')
            self.ancienNumeroESD = value_
            self.ancienNumeroESD_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeBu':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeBu')
            value_ = self.gds_validate_string(value_, node, 'codeBu')
            self.codeBu = value_
            self.codeBu_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeDepot')
            value_ = self.gds_validate_string(value_, node, 'codeDepot')
            self.codeDepot = value_
            self.codeDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePostal')
            value_ = self.gds_validate_string(value_, node, 'codePostal')
            self.codePostal = value_
            self.codePostal_nsprefix_ = child_.prefix
        elif nodeName_ == 'dateCreation':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.dateCreation = dval_
            self.dateCreation_nsprefix_ = child_.prefix
        elif nodeName_ == 'datePassage':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.datePassage = dval_
            self.datePassage_nsprefix_ = child_.prefix
        elif nodeName_ == 'idEnlevement' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'idEnlevement')
            ival_ = self.gds_validate_integer(ival_, node, 'idEnlevement')
            self.idEnlevement = ival_
            self.idEnlevement_nsprefix_ = child_.prefix
        elif nodeName_ == 'numeroUniqueESD':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'numeroUniqueESD')
            value_ = self.gds_validate_string(value_, node, 'numeroUniqueESD')
            self.numeroUniqueESD = value_
            self.numeroUniqueESD_nsprefix_ = child_.prefix
        elif nodeName_ == 'refDestinataire':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'refDestinataire')
            value_ = self.gds_validate_string(value_, node, 'refDestinataire')
            self.refDestinataire = value_
            self.refDestinataire_nsprefix_ = child_.prefix
        elif nodeName_ == 'refEsdClient':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'refEsdClient')
            value_ = self.gds_validate_string(value_, node, 'refEsdClient')
            self.refEsdClient = value_
            self.refEsdClient_nsprefix_ = child_.prefix
        elif nodeName_ == 'ville':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ville')
            value_ = self.gds_validate_string(value_, node, 'ville')
            self.ville = value_
            self.ville_nsprefix_ = child_.prefix
# end class infoEnlevement


class resultGetReservedSkybillWithTypeValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, errorCode=None, errorMessage=None, skybill=None, type_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        self.skybill = skybill
        self.skybill_nsprefix_ = None
        self.type_ = type_
        self.type__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultGetReservedSkybillWithTypeValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultGetReservedSkybillWithTypeValue.subclass:
            return resultGetReservedSkybillWithTypeValue.subclass(*args_, **kwargs_)
        else:
            return resultGetReservedSkybillWithTypeValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_skybill(self):
        return self.skybill
    def set_skybill(self, skybill):
        self.skybill = skybill
    def get_type(self):
        return self.type_
    def set_type(self, type_):
        self.type_ = type_
    def _hasContent(self):
        if (
            self.errorCode is not None or
            self.errorMessage is not None or
            self.skybill is not None or
            self.type_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultGetReservedSkybillWithTypeValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultGetReservedSkybillWithTypeValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultGetReservedSkybillWithTypeValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultGetReservedSkybillWithTypeValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultGetReservedSkybillWithTypeValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultGetReservedSkybillWithTypeValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultGetReservedSkybillWithTypeValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
        if self.skybill is not None:
            namespaceprefix_ = self.skybill_nsprefix_ + ':' if (UseCapturedNS_ and self.skybill_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybill>%s</%sskybill>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybill), input_name='skybill')), namespaceprefix_ , eol_))
        if self.type_ is not None:
            namespaceprefix_ = self.type__nsprefix_ + ':' if (UseCapturedNS_ and self.type__nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.type_), input_name='type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybill':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybill')
            value_ = self.gds_validate_string(value_, node, 'skybill')
            self.skybill = value_
            self.skybill_nsprefix_ = child_.prefix
        elif nodeName_ == 'type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'type')
            value_ = self.gds_validate_string(value_, node, 'type')
            self.type_ = value_
            self.type_nsprefix_ = child_.prefix
# end class resultGetReservedSkybillWithTypeValue


class destinatairesDpd(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, destinataireDpd=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if destinataireDpd is None:
            self.destinataireDpd = []
        else:
            self.destinataireDpd = destinataireDpd
        self.destinataireDpd_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, destinatairesDpd)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if destinatairesDpd.subclass:
            return destinatairesDpd.subclass(*args_, **kwargs_)
        else:
            return destinatairesDpd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_destinataireDpd(self):
        return self.destinataireDpd
    def set_destinataireDpd(self, destinataireDpd):
        self.destinataireDpd = destinataireDpd
    def add_destinataireDpd(self, value):
        self.destinataireDpd.append(value)
    def insert_destinataireDpd_at(self, index, value):
        self.destinataireDpd.insert(index, value)
    def replace_destinataireDpd_at(self, index, value):
        self.destinataireDpd[index] = value
    def _hasContent(self):
        if (
            self.destinataireDpd
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='destinatairesDpd', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('destinatairesDpd')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'destinatairesDpd':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='destinatairesDpd')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='destinatairesDpd', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='destinatairesDpd'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='destinatairesDpd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for destinataireDpd_ in self.destinataireDpd:
            namespaceprefix_ = self.destinataireDpd_nsprefix_ + ':' if (UseCapturedNS_ and self.destinataireDpd_nsprefix_) else ''
            destinataireDpd_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='destinataireDpd', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'destinataireDpd':
            obj_ = destinataireDpd.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.destinataireDpd.append(obj_)
            obj_.original_tagname_ = 'destinataireDpd'
# end class destinatairesDpd


class destinataireDpd(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, adresseDestinataire=None, infoClient=None, particularites=None, particularitesColisDpd=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.adresseDestinataire = adresseDestinataire
        self.adresseDestinataire_nsprefix_ = None
        self.infoClient = infoClient
        self.infoClient_nsprefix_ = None
        self.particularites = particularites
        self.particularites_nsprefix_ = None
        self.particularitesColisDpd = particularitesColisDpd
        self.particularitesColisDpd_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, destinataireDpd)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if destinataireDpd.subclass:
            return destinataireDpd.subclass(*args_, **kwargs_)
        else:
            return destinataireDpd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_adresseDestinataire(self):
        return self.adresseDestinataire
    def set_adresseDestinataire(self, adresseDestinataire):
        self.adresseDestinataire = adresseDestinataire
    def get_infoClient(self):
        return self.infoClient
    def set_infoClient(self, infoClient):
        self.infoClient = infoClient
    def get_particularites(self):
        return self.particularites
    def set_particularites(self, particularites):
        self.particularites = particularites
    def get_particularitesColisDpd(self):
        return self.particularitesColisDpd
    def set_particularitesColisDpd(self, particularitesColisDpd):
        self.particularitesColisDpd = particularitesColisDpd
    def _hasContent(self):
        if (
            self.adresseDestinataire is not None or
            self.infoClient is not None or
            self.particularites is not None or
            self.particularitesColisDpd is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='destinataireDpd', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('destinataireDpd')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'destinataireDpd':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='destinataireDpd')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='destinataireDpd', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='destinataireDpd'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='destinataireDpd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.adresseDestinataire is not None:
            namespaceprefix_ = self.adresseDestinataire_nsprefix_ + ':' if (UseCapturedNS_ and self.adresseDestinataire_nsprefix_) else ''
            self.adresseDestinataire.export(outfile, level, namespaceprefix_, namespacedef_='', name_='adresseDestinataire', pretty_print=pretty_print)
        if self.infoClient is not None:
            namespaceprefix_ = self.infoClient_nsprefix_ + ':' if (UseCapturedNS_ and self.infoClient_nsprefix_) else ''
            self.infoClient.export(outfile, level, namespaceprefix_, namespacedef_='', name_='infoClient', pretty_print=pretty_print)
        if self.particularites is not None:
            namespaceprefix_ = self.particularites_nsprefix_ + ':' if (UseCapturedNS_ and self.particularites_nsprefix_) else ''
            self.particularites.export(outfile, level, namespaceprefix_, namespacedef_='', name_='particularites', pretty_print=pretty_print)
        if self.particularitesColisDpd is not None:
            namespaceprefix_ = self.particularitesColisDpd_nsprefix_ + ':' if (UseCapturedNS_ and self.particularitesColisDpd_nsprefix_) else ''
            self.particularitesColisDpd.export(outfile, level, namespaceprefix_, namespacedef_='', name_='particularitesColisDpd', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'adresseDestinataire':
            obj_ = adresseDestinataire.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.adresseDestinataire = obj_
            obj_.original_tagname_ = 'adresseDestinataire'
        elif nodeName_ == 'infoClient':
            obj_ = infoClient.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.infoClient = obj_
            obj_.original_tagname_ = 'infoClient'
        elif nodeName_ == 'particularites':
            obj_ = particularites.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.particularites = obj_
            obj_.original_tagname_ = 'particularites'
        elif nodeName_ == 'particularitesColisDpd':
            obj_ = particularitesColisDpd.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.particularitesColisDpd = obj_
            obj_.original_tagname_ = 'particularitesColisDpd'
# end class destinataireDpd


class adresseDestinataire(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, adresse=None, adresseSuite=None, codePays=None, codePostal=None, digicode=None, etage=None, mail=None, nom=None, poids=None, prenom=None, raisonSociale=None, referenceDestinataire=None, telephone=None, ville=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.adresse = adresse
        self.adresse_nsprefix_ = None
        self.adresseSuite = adresseSuite
        self.adresseSuite_nsprefix_ = None
        self.codePays = codePays
        self.codePays_nsprefix_ = None
        self.codePostal = codePostal
        self.codePostal_nsprefix_ = None
        self.digicode = digicode
        self.digicode_nsprefix_ = None
        self.etage = etage
        self.etage_nsprefix_ = None
        self.mail = mail
        self.mail_nsprefix_ = None
        self.nom = nom
        self.nom_nsprefix_ = None
        self.poids = poids
        self.poids_nsprefix_ = None
        self.prenom = prenom
        self.prenom_nsprefix_ = None
        self.raisonSociale = raisonSociale
        self.raisonSociale_nsprefix_ = None
        self.referenceDestinataire = referenceDestinataire
        self.referenceDestinataire_nsprefix_ = None
        self.telephone = telephone
        self.telephone_nsprefix_ = None
        self.ville = ville
        self.ville_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, adresseDestinataire)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if adresseDestinataire.subclass:
            return adresseDestinataire.subclass(*args_, **kwargs_)
        else:
            return adresseDestinataire(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_adresse(self):
        return self.adresse
    def set_adresse(self, adresse):
        self.adresse = adresse
    def get_adresseSuite(self):
        return self.adresseSuite
    def set_adresseSuite(self, adresseSuite):
        self.adresseSuite = adresseSuite
    def get_codePays(self):
        return self.codePays
    def set_codePays(self, codePays):
        self.codePays = codePays
    def get_codePostal(self):
        return self.codePostal
    def set_codePostal(self, codePostal):
        self.codePostal = codePostal
    def get_digicode(self):
        return self.digicode
    def set_digicode(self, digicode):
        self.digicode = digicode
    def get_etage(self):
        return self.etage
    def set_etage(self, etage):
        self.etage = etage
    def get_mail(self):
        return self.mail
    def set_mail(self, mail):
        self.mail = mail
    def get_nom(self):
        return self.nom
    def set_nom(self, nom):
        self.nom = nom
    def get_poids(self):
        return self.poids
    def set_poids(self, poids):
        self.poids = poids
    def get_prenom(self):
        return self.prenom
    def set_prenom(self, prenom):
        self.prenom = prenom
    def get_raisonSociale(self):
        return self.raisonSociale
    def set_raisonSociale(self, raisonSociale):
        self.raisonSociale = raisonSociale
    def get_referenceDestinataire(self):
        return self.referenceDestinataire
    def set_referenceDestinataire(self, referenceDestinataire):
        self.referenceDestinataire = referenceDestinataire
    def get_telephone(self):
        return self.telephone
    def set_telephone(self, telephone):
        self.telephone = telephone
    def get_ville(self):
        return self.ville
    def set_ville(self, ville):
        self.ville = ville
    def _hasContent(self):
        if (
            self.adresse is not None or
            self.adresseSuite is not None or
            self.codePays is not None or
            self.codePostal is not None or
            self.digicode is not None or
            self.etage is not None or
            self.mail is not None or
            self.nom is not None or
            self.poids is not None or
            self.prenom is not None or
            self.raisonSociale is not None or
            self.referenceDestinataire is not None or
            self.telephone is not None or
            self.ville is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='adresseDestinataire', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('adresseDestinataire')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'adresseDestinataire':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='adresseDestinataire')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='adresseDestinataire', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='adresseDestinataire'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='adresseDestinataire', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.adresse is not None:
            namespaceprefix_ = self.adresse_nsprefix_ + ':' if (UseCapturedNS_ and self.adresse_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sadresse>%s</%sadresse>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.adresse), input_name='adresse')), namespaceprefix_ , eol_))
        if self.adresseSuite is not None:
            namespaceprefix_ = self.adresseSuite_nsprefix_ + ':' if (UseCapturedNS_ and self.adresseSuite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sadresseSuite>%s</%sadresseSuite>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.adresseSuite), input_name='adresseSuite')), namespaceprefix_ , eol_))
        if self.codePays is not None:
            namespaceprefix_ = self.codePays_nsprefix_ + ':' if (UseCapturedNS_ and self.codePays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePays>%s</%scodePays>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePays), input_name='codePays')), namespaceprefix_ , eol_))
        if self.codePostal is not None:
            namespaceprefix_ = self.codePostal_nsprefix_ + ':' if (UseCapturedNS_ and self.codePostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePostal>%s</%scodePostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePostal), input_name='codePostal')), namespaceprefix_ , eol_))
        if self.digicode is not None:
            namespaceprefix_ = self.digicode_nsprefix_ + ':' if (UseCapturedNS_ and self.digicode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdigicode>%s</%sdigicode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.digicode), input_name='digicode')), namespaceprefix_ , eol_))
        if self.etage is not None:
            namespaceprefix_ = self.etage_nsprefix_ + ':' if (UseCapturedNS_ and self.etage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%setage>%s</%setage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.etage), input_name='etage')), namespaceprefix_ , eol_))
        if self.mail is not None:
            namespaceprefix_ = self.mail_nsprefix_ + ':' if (UseCapturedNS_ and self.mail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smail>%s</%smail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mail), input_name='mail')), namespaceprefix_ , eol_))
        if self.nom is not None:
            namespaceprefix_ = self.nom_nsprefix_ + ':' if (UseCapturedNS_ and self.nom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snom>%s</%snom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nom), input_name='nom')), namespaceprefix_ , eol_))
        if self.poids is not None:
            namespaceprefix_ = self.poids_nsprefix_ + ':' if (UseCapturedNS_ and self.poids_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spoids>%s</%spoids>%s' % (namespaceprefix_ , self.gds_format_float(self.poids, input_name='poids'), namespaceprefix_ , eol_))
        if self.prenom is not None:
            namespaceprefix_ = self.prenom_nsprefix_ + ':' if (UseCapturedNS_ and self.prenom_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sprenom>%s</%sprenom>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.prenom), input_name='prenom')), namespaceprefix_ , eol_))
        if self.raisonSociale is not None:
            namespaceprefix_ = self.raisonSociale_nsprefix_ + ':' if (UseCapturedNS_ and self.raisonSociale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sraisonSociale>%s</%sraisonSociale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.raisonSociale), input_name='raisonSociale')), namespaceprefix_ , eol_))
        if self.referenceDestinataire is not None:
            namespaceprefix_ = self.referenceDestinataire_nsprefix_ + ':' if (UseCapturedNS_ and self.referenceDestinataire_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreferenceDestinataire>%s</%sreferenceDestinataire>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.referenceDestinataire), input_name='referenceDestinataire')), namespaceprefix_ , eol_))
        if self.telephone is not None:
            namespaceprefix_ = self.telephone_nsprefix_ + ':' if (UseCapturedNS_ and self.telephone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stelephone>%s</%stelephone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.telephone), input_name='telephone')), namespaceprefix_ , eol_))
        if self.ville is not None:
            namespaceprefix_ = self.ville_nsprefix_ + ':' if (UseCapturedNS_ and self.ville_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sville>%s</%sville>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ville), input_name='ville')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'adresse':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'adresse')
            value_ = self.gds_validate_string(value_, node, 'adresse')
            self.adresse = value_
            self.adresse_nsprefix_ = child_.prefix
        elif nodeName_ == 'adresseSuite':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'adresseSuite')
            value_ = self.gds_validate_string(value_, node, 'adresseSuite')
            self.adresseSuite = value_
            self.adresseSuite_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePays':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePays')
            value_ = self.gds_validate_string(value_, node, 'codePays')
            self.codePays = value_
            self.codePays_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePostal')
            value_ = self.gds_validate_string(value_, node, 'codePostal')
            self.codePostal = value_
            self.codePostal_nsprefix_ = child_.prefix
        elif nodeName_ == 'digicode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'digicode')
            value_ = self.gds_validate_string(value_, node, 'digicode')
            self.digicode = value_
            self.digicode_nsprefix_ = child_.prefix
        elif nodeName_ == 'etage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'etage')
            value_ = self.gds_validate_string(value_, node, 'etage')
            self.etage = value_
            self.etage_nsprefix_ = child_.prefix
        elif nodeName_ == 'mail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mail')
            value_ = self.gds_validate_string(value_, node, 'mail')
            self.mail = value_
            self.mail_nsprefix_ = child_.prefix
        elif nodeName_ == 'nom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'nom')
            value_ = self.gds_validate_string(value_, node, 'nom')
            self.nom = value_
            self.nom_nsprefix_ = child_.prefix
        elif nodeName_ == 'poids' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'poids')
            fval_ = self.gds_validate_float(fval_, node, 'poids')
            self.poids = fval_
            self.poids_nsprefix_ = child_.prefix
        elif nodeName_ == 'prenom':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'prenom')
            value_ = self.gds_validate_string(value_, node, 'prenom')
            self.prenom = value_
            self.prenom_nsprefix_ = child_.prefix
        elif nodeName_ == 'raisonSociale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'raisonSociale')
            value_ = self.gds_validate_string(value_, node, 'raisonSociale')
            self.raisonSociale = value_
            self.raisonSociale_nsprefix_ = child_.prefix
        elif nodeName_ == 'referenceDestinataire':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'referenceDestinataire')
            value_ = self.gds_validate_string(value_, node, 'referenceDestinataire')
            self.referenceDestinataire = value_
            self.referenceDestinataire_nsprefix_ = child_.prefix
        elif nodeName_ == 'telephone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'telephone')
            value_ = self.gds_validate_string(value_, node, 'telephone')
            self.telephone = value_
            self.telephone_nsprefix_ = child_.prefix
        elif nodeName_ == 'ville':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ville')
            value_ = self.gds_validate_string(value_, node, 'ville')
            self.ville = value_
            self.ville_nsprefix_ = child_.prefix
# end class adresseDestinataire


class infoClient(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, contenu=None, devise=None, montant=None, refEsdClient=None, service=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.contenu = contenu
        self.contenu_nsprefix_ = None
        self.devise = devise
        self.devise_nsprefix_ = None
        self.montant = montant
        self.montant_nsprefix_ = None
        self.refEsdClient = refEsdClient
        self.refEsdClient_nsprefix_ = None
        self.service = service
        self.service_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoClient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoClient.subclass:
            return infoClient.subclass(*args_, **kwargs_)
        else:
            return infoClient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_contenu(self):
        return self.contenu
    def set_contenu(self, contenu):
        self.contenu = contenu
    def get_devise(self):
        return self.devise
    def set_devise(self, devise):
        self.devise = devise
    def get_montant(self):
        return self.montant
    def set_montant(self, montant):
        self.montant = montant
    def get_refEsdClient(self):
        return self.refEsdClient
    def set_refEsdClient(self, refEsdClient):
        self.refEsdClient = refEsdClient
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def _hasContent(self):
        if (
            self.contenu is not None or
            self.devise is not None or
            self.montant is not None or
            self.refEsdClient is not None or
            self.service is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='infoClient', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoClient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'infoClient':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='infoClient')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='infoClient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='infoClient'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='infoClient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.contenu is not None:
            namespaceprefix_ = self.contenu_nsprefix_ + ':' if (UseCapturedNS_ and self.contenu_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontenu>%s</%scontenu>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contenu), input_name='contenu')), namespaceprefix_ , eol_))
        if self.devise is not None:
            namespaceprefix_ = self.devise_nsprefix_ + ':' if (UseCapturedNS_ and self.devise_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdevise>%s</%sdevise>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.devise), input_name='devise')), namespaceprefix_ , eol_))
        if self.montant is not None:
            namespaceprefix_ = self.montant_nsprefix_ + ':' if (UseCapturedNS_ and self.montant_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smontant>%s</%smontant>%s' % (namespaceprefix_ , self.gds_format_double(self.montant, input_name='montant'), namespaceprefix_ , eol_))
        if self.refEsdClient is not None:
            namespaceprefix_ = self.refEsdClient_nsprefix_ + ':' if (UseCapturedNS_ and self.refEsdClient_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srefEsdClient>%s</%srefEsdClient>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.refEsdClient), input_name='refEsdClient')), namespaceprefix_ , eol_))
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sservice>%s</%sservice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.service), input_name='service')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'contenu':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contenu')
            value_ = self.gds_validate_string(value_, node, 'contenu')
            self.contenu = value_
            self.contenu_nsprefix_ = child_.prefix
        elif nodeName_ == 'devise':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'devise')
            value_ = self.gds_validate_string(value_, node, 'devise')
            self.devise = value_
            self.devise_nsprefix_ = child_.prefix
        elif nodeName_ == 'montant' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_double(sval_, node, 'montant')
            fval_ = self.gds_validate_double(fval_, node, 'montant')
            self.montant = fval_
            self.montant_nsprefix_ = child_.prefix
        elif nodeName_ == 'refEsdClient':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'refEsdClient')
            value_ = self.gds_validate_string(value_, node, 'refEsdClient')
            self.refEsdClient = value_
            self.refEsdClient_nsprefix_ = child_.prefix
        elif nodeName_ == 'service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'service')
            value_ = self.gds_validate_string(value_, node, 'service')
            self.service = value_
            self.service_nsprefix_ = child_.prefix
# end class infoClient


class particularites(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, hauteur=None, instructionsParticulieres=None, largeur=None, longueur=None, nombreEnvois=None, poids=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.hauteur = hauteur
        self.hauteur_nsprefix_ = None
        self.instructionsParticulieres = instructionsParticulieres
        self.instructionsParticulieres_nsprefix_ = None
        self.largeur = largeur
        self.largeur_nsprefix_ = None
        self.longueur = longueur
        self.longueur_nsprefix_ = None
        self.nombreEnvois = nombreEnvois
        self.nombreEnvois_nsprefix_ = None
        self.poids = poids
        self.poids_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, particularites)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if particularites.subclass:
            return particularites.subclass(*args_, **kwargs_)
        else:
            return particularites(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_hauteur(self):
        return self.hauteur
    def set_hauteur(self, hauteur):
        self.hauteur = hauteur
    def get_instructionsParticulieres(self):
        return self.instructionsParticulieres
    def set_instructionsParticulieres(self, instructionsParticulieres):
        self.instructionsParticulieres = instructionsParticulieres
    def get_largeur(self):
        return self.largeur
    def set_largeur(self, largeur):
        self.largeur = largeur
    def get_longueur(self):
        return self.longueur
    def set_longueur(self, longueur):
        self.longueur = longueur
    def get_nombreEnvois(self):
        return self.nombreEnvois
    def set_nombreEnvois(self, nombreEnvois):
        self.nombreEnvois = nombreEnvois
    def get_poids(self):
        return self.poids
    def set_poids(self, poids):
        self.poids = poids
    def _hasContent(self):
        if (
            self.hauteur is not None or
            self.instructionsParticulieres is not None or
            self.largeur is not None or
            self.longueur is not None or
            self.nombreEnvois is not None or
            self.poids is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='particularites', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('particularites')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'particularites':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='particularites')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='particularites', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='particularites'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='particularites', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.hauteur is not None:
            namespaceprefix_ = self.hauteur_nsprefix_ + ':' if (UseCapturedNS_ and self.hauteur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shauteur>%s</%shauteur>%s' % (namespaceprefix_ , self.gds_format_float(self.hauteur, input_name='hauteur'), namespaceprefix_ , eol_))
        if self.instructionsParticulieres is not None:
            namespaceprefix_ = self.instructionsParticulieres_nsprefix_ + ':' if (UseCapturedNS_ and self.instructionsParticulieres_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinstructionsParticulieres>%s</%sinstructionsParticulieres>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.instructionsParticulieres), input_name='instructionsParticulieres')), namespaceprefix_ , eol_))
        if self.largeur is not None:
            namespaceprefix_ = self.largeur_nsprefix_ + ':' if (UseCapturedNS_ and self.largeur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slargeur>%s</%slargeur>%s' % (namespaceprefix_ , self.gds_format_float(self.largeur, input_name='largeur'), namespaceprefix_ , eol_))
        if self.longueur is not None:
            namespaceprefix_ = self.longueur_nsprefix_ + ':' if (UseCapturedNS_ and self.longueur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slongueur>%s</%slongueur>%s' % (namespaceprefix_ , self.gds_format_float(self.longueur, input_name='longueur'), namespaceprefix_ , eol_))
        if self.nombreEnvois is not None:
            namespaceprefix_ = self.nombreEnvois_nsprefix_ + ':' if (UseCapturedNS_ and self.nombreEnvois_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snombreEnvois>%s</%snombreEnvois>%s' % (namespaceprefix_ , self.gds_format_integer(self.nombreEnvois, input_name='nombreEnvois'), namespaceprefix_ , eol_))
        if self.poids is not None:
            namespaceprefix_ = self.poids_nsprefix_ + ':' if (UseCapturedNS_ and self.poids_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spoids>%s</%spoids>%s' % (namespaceprefix_ , self.gds_format_float(self.poids, input_name='poids'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'hauteur' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'hauteur')
            fval_ = self.gds_validate_float(fval_, node, 'hauteur')
            self.hauteur = fval_
            self.hauteur_nsprefix_ = child_.prefix
        elif nodeName_ == 'instructionsParticulieres':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'instructionsParticulieres')
            value_ = self.gds_validate_string(value_, node, 'instructionsParticulieres')
            self.instructionsParticulieres = value_
            self.instructionsParticulieres_nsprefix_ = child_.prefix
        elif nodeName_ == 'largeur' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'largeur')
            fval_ = self.gds_validate_float(fval_, node, 'largeur')
            self.largeur = fval_
            self.largeur_nsprefix_ = child_.prefix
        elif nodeName_ == 'longueur' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'longueur')
            fval_ = self.gds_validate_float(fval_, node, 'longueur')
            self.longueur = fval_
            self.longueur_nsprefix_ = child_.prefix
        elif nodeName_ == 'nombreEnvois' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'nombreEnvois')
            ival_ = self.gds_validate_integer(ival_, node, 'nombreEnvois')
            self.nombreEnvois = ival_
            self.nombreEnvois_nsprefix_ = child_.prefix
        elif nodeName_ == 'poids' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'poids')
            fval_ = self.gds_validate_float(fval_, node, 'poids')
            self.poids = fval_
            self.poids_nsprefix_ = child_.prefix
# end class particularites


class particularitesColisDpd(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, infoDouanieres=None, valeurAssuree=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.infoDouanieres = infoDouanieres
        self.infoDouanieres_nsprefix_ = None
        self.valeurAssuree = valeurAssuree
        self.valeurAssuree_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, particularitesColisDpd)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if particularitesColisDpd.subclass:
            return particularitesColisDpd.subclass(*args_, **kwargs_)
        else:
            return particularitesColisDpd(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_infoDouanieres(self):
        return self.infoDouanieres
    def set_infoDouanieres(self, infoDouanieres):
        self.infoDouanieres = infoDouanieres
    def get_valeurAssuree(self):
        return self.valeurAssuree
    def set_valeurAssuree(self, valeurAssuree):
        self.valeurAssuree = valeurAssuree
    def _hasContent(self):
        if (
            self.infoDouanieres is not None or
            self.valeurAssuree is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='particularitesColisDpd', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('particularitesColisDpd')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'particularitesColisDpd':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='particularitesColisDpd')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='particularitesColisDpd', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='particularitesColisDpd'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='particularitesColisDpd', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.infoDouanieres is not None:
            namespaceprefix_ = self.infoDouanieres_nsprefix_ + ':' if (UseCapturedNS_ and self.infoDouanieres_nsprefix_) else ''
            self.infoDouanieres.export(outfile, level, namespaceprefix_, namespacedef_='', name_='infoDouanieres', pretty_print=pretty_print)
        if self.valeurAssuree is not None:
            namespaceprefix_ = self.valeurAssuree_nsprefix_ + ':' if (UseCapturedNS_ and self.valeurAssuree_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svaleurAssuree>%s</%svaleurAssuree>%s' % (namespaceprefix_ , self.gds_format_float(self.valeurAssuree, input_name='valeurAssuree'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'infoDouanieres':
            obj_ = infoDouanieres.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.infoDouanieres = obj_
            obj_.original_tagname_ = 'infoDouanieres'
        elif nodeName_ == 'valeurAssuree' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'valeurAssuree')
            fval_ = self.gds_validate_float(fval_, node, 'valeurAssuree')
            self.valeurAssuree = fval_
            self.valeurAssuree_nsprefix_ = child_.prefix
# end class particularitesColisDpd


class infoDouanieres(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, devise=None, montant=None, type_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.devise = devise
        self.devise_nsprefix_ = None
        self.montant = montant
        self.montant_nsprefix_ = None
        self.type_ = type_
        self.type__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, infoDouanieres)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if infoDouanieres.subclass:
            return infoDouanieres.subclass(*args_, **kwargs_)
        else:
            return infoDouanieres(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_devise(self):
        return self.devise
    def set_devise(self, devise):
        self.devise = devise
    def get_montant(self):
        return self.montant
    def set_montant(self, montant):
        self.montant = montant
    def get_type(self):
        return self.type_
    def set_type(self, type_):
        self.type_ = type_
    def _hasContent(self):
        if (
            self.devise is not None or
            self.montant is not None or
            self.type_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='infoDouanieres', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('infoDouanieres')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'infoDouanieres':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='infoDouanieres')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='infoDouanieres', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='infoDouanieres'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='infoDouanieres', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.devise is not None:
            namespaceprefix_ = self.devise_nsprefix_ + ':' if (UseCapturedNS_ and self.devise_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdevise>%s</%sdevise>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.devise), input_name='devise')), namespaceprefix_ , eol_))
        if self.montant is not None:
            namespaceprefix_ = self.montant_nsprefix_ + ':' if (UseCapturedNS_ and self.montant_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smontant>%s</%smontant>%s' % (namespaceprefix_ , self.gds_format_float(self.montant, input_name='montant'), namespaceprefix_ , eol_))
        if self.type_ is not None:
            namespaceprefix_ = self.type__nsprefix_ + ':' if (UseCapturedNS_ and self.type__nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.type_), input_name='type')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'devise':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'devise')
            value_ = self.gds_validate_string(value_, node, 'devise')
            self.devise = value_
            self.devise_nsprefix_ = child_.prefix
        elif nodeName_ == 'montant' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'montant')
            fval_ = self.gds_validate_float(fval_, node, 'montant')
            self.montant = fval_
            self.montant_nsprefix_ = child_.prefix
        elif nodeName_ == 'type':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'type')
            value_ = self.gds_validate_string(value_, node, 'type')
            self.type_ = value_
            self.type_nsprefix_ = child_.prefix
# end class infoDouanieres


class resultPickupOrCollectionRequest(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codeErreur=None, collectionRequest=None, infoEnlevements=None, libelleErreur=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codeErreur = codeErreur
        self.codeErreur_nsprefix_ = None
        self.collectionRequest = collectionRequest
        self.collectionRequest_nsprefix_ = None
        if infoEnlevements is None:
            self.infoEnlevements = []
        else:
            self.infoEnlevements = infoEnlevements
        self.infoEnlevements_nsprefix_ = None
        self.libelleErreur = libelleErreur
        self.libelleErreur_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultPickupOrCollectionRequest)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultPickupOrCollectionRequest.subclass:
            return resultPickupOrCollectionRequest.subclass(*args_, **kwargs_)
        else:
            return resultPickupOrCollectionRequest(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeErreur(self):
        return self.codeErreur
    def set_codeErreur(self, codeErreur):
        self.codeErreur = codeErreur
    def get_collectionRequest(self):
        return self.collectionRequest
    def set_collectionRequest(self, collectionRequest):
        self.collectionRequest = collectionRequest
    def get_infoEnlevements(self):
        return self.infoEnlevements
    def set_infoEnlevements(self, infoEnlevements):
        self.infoEnlevements = infoEnlevements
    def add_infoEnlevements(self, value):
        self.infoEnlevements.append(value)
    def insert_infoEnlevements_at(self, index, value):
        self.infoEnlevements.insert(index, value)
    def replace_infoEnlevements_at(self, index, value):
        self.infoEnlevements[index] = value
    def get_libelleErreur(self):
        return self.libelleErreur
    def set_libelleErreur(self, libelleErreur):
        self.libelleErreur = libelleErreur
    def _hasContent(self):
        if (
            self.codeErreur is not None or
            self.collectionRequest is not None or
            self.infoEnlevements or
            self.libelleErreur is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultPickupOrCollectionRequest', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultPickupOrCollectionRequest')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultPickupOrCollectionRequest':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultPickupOrCollectionRequest')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultPickupOrCollectionRequest', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultPickupOrCollectionRequest'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultPickupOrCollectionRequest', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeErreur is not None:
            namespaceprefix_ = self.codeErreur_nsprefix_ + ':' if (UseCapturedNS_ and self.codeErreur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeErreur>%s</%scodeErreur>%s' % (namespaceprefix_ , self.gds_format_integer(self.codeErreur, input_name='codeErreur'), namespaceprefix_ , eol_))
        if self.collectionRequest is not None:
            namespaceprefix_ = self.collectionRequest_nsprefix_ + ':' if (UseCapturedNS_ and self.collectionRequest_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scollectionRequest>%s</%scollectionRequest>%s' % (namespaceprefix_ , self.gds_format_boolean(self.collectionRequest, input_name='collectionRequest'), namespaceprefix_ , eol_))
        for infoEnlevements_ in self.infoEnlevements:
            namespaceprefix_ = self.infoEnlevements_nsprefix_ + ':' if (UseCapturedNS_ and self.infoEnlevements_nsprefix_) else ''
            infoEnlevements_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='infoEnlevements', pretty_print=pretty_print)
        if self.libelleErreur is not None:
            namespaceprefix_ = self.libelleErreur_nsprefix_ + ':' if (UseCapturedNS_ and self.libelleErreur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slibelleErreur>%s</%slibelleErreur>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.libelleErreur), input_name='libelleErreur')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeErreur' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'codeErreur')
            ival_ = self.gds_validate_integer(ival_, node, 'codeErreur')
            self.codeErreur = ival_
            self.codeErreur_nsprefix_ = child_.prefix
        elif nodeName_ == 'collectionRequest':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'collectionRequest')
            ival_ = self.gds_validate_boolean(ival_, node, 'collectionRequest')
            self.collectionRequest = ival_
            self.collectionRequest_nsprefix_ = child_.prefix
        elif nodeName_ == 'infoEnlevements':
            obj_ = infoEnlevement.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.infoEnlevements.append(obj_)
            obj_.original_tagname_ = 'infoEnlevements'
        elif nodeName_ == 'libelleErreur':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'libelleErreur')
            value_ = self.gds_validate_string(value_, node, 'libelleErreur')
            self.libelleErreur = value_
            self.libelleErreur_nsprefix_ = child_.prefix
# end class resultPickupOrCollectionRequest


class resultReservationMultiParcelExpeditionValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, ESDFullNumber=None, ESDNumber=None, errorCode=None, errorMessage=None, pickupDate=None, reservationNumber=None, resultParcelValue=None, extensiontype_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.ESDFullNumber = ESDFullNumber
        self.ESDFullNumber_nsprefix_ = None
        self.ESDNumber = ESDNumber
        self.ESDNumber_nsprefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        if isinstance(pickupDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(pickupDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = pickupDate
        self.pickupDate = initvalue_
        self.pickupDate_nsprefix_ = None
        self.reservationNumber = reservationNumber
        self.reservationNumber_nsprefix_ = None
        if resultParcelValue is None:
            self.resultParcelValue = []
        else:
            self.resultParcelValue = resultParcelValue
        self.resultParcelValue_nsprefix_ = None
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultReservationMultiParcelExpeditionValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultReservationMultiParcelExpeditionValue.subclass:
            return resultReservationMultiParcelExpeditionValue.subclass(*args_, **kwargs_)
        else:
            return resultReservationMultiParcelExpeditionValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_ESDFullNumber(self):
        return self.ESDFullNumber
    def set_ESDFullNumber(self, ESDFullNumber):
        self.ESDFullNumber = ESDFullNumber
    def get_ESDNumber(self):
        return self.ESDNumber
    def set_ESDNumber(self, ESDNumber):
        self.ESDNumber = ESDNumber
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_pickupDate(self):
        return self.pickupDate
    def set_pickupDate(self, pickupDate):
        self.pickupDate = pickupDate
    def get_reservationNumber(self):
        return self.reservationNumber
    def set_reservationNumber(self, reservationNumber):
        self.reservationNumber = reservationNumber
    def get_resultParcelValue(self):
        return self.resultParcelValue
    def set_resultParcelValue(self, resultParcelValue):
        self.resultParcelValue = resultParcelValue
    def add_resultParcelValue(self, value):
        self.resultParcelValue.append(value)
    def insert_resultParcelValue_at(self, index, value):
        self.resultParcelValue.insert(index, value)
    def replace_resultParcelValue_at(self, index, value):
        self.resultParcelValue[index] = value
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def _hasContent(self):
        if (
            self.ESDFullNumber is not None or
            self.ESDNumber is not None or
            self.errorCode is not None or
            self.errorMessage is not None or
            self.pickupDate is not None or
            self.reservationNumber is not None or
            self.resultParcelValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultReservationMultiParcelExpeditionValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultReservationMultiParcelExpeditionValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultReservationMultiParcelExpeditionValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultReservationMultiParcelExpeditionValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultReservationMultiParcelExpeditionValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultReservationMultiParcelExpeditionValue'):
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            if ":" not in self.extensiontype_:
                imported_ns_type_prefix_ = GenerateDSNamespaceTypePrefixes_.get(self.extensiontype_, '')
                outfile.write(' xsi:type="%s%s"' % (imported_ns_type_prefix_, self.extensiontype_))
            else:
                outfile.write(' xsi:type="%s"' % self.extensiontype_)
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultReservationMultiParcelExpeditionValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ESDFullNumber is not None:
            namespaceprefix_ = self.ESDFullNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ESDFullNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sESDFullNumber>%s</%sESDFullNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ESDFullNumber), input_name='ESDFullNumber')), namespaceprefix_ , eol_))
        if self.ESDNumber is not None:
            namespaceprefix_ = self.ESDNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.ESDNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sESDNumber>%s</%sESDNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ESDNumber), input_name='ESDNumber')), namespaceprefix_ , eol_))
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
        if self.pickupDate is not None:
            namespaceprefix_ = self.pickupDate_nsprefix_ + ':' if (UseCapturedNS_ and self.pickupDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spickupDate>%s</%spickupDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.pickupDate, input_name='pickupDate'), namespaceprefix_ , eol_))
        if self.reservationNumber is not None:
            namespaceprefix_ = self.reservationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.reservationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreservationNumber>%s</%sreservationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reservationNumber), input_name='reservationNumber')), namespaceprefix_ , eol_))
        for resultParcelValue_ in self.resultParcelValue:
            namespaceprefix_ = self.resultParcelValue_nsprefix_ + ':' if (UseCapturedNS_ and self.resultParcelValue_nsprefix_) else ''
            resultParcelValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='resultParcelValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'ESDFullNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ESDFullNumber')
            value_ = self.gds_validate_string(value_, node, 'ESDFullNumber')
            self.ESDFullNumber = value_
            self.ESDFullNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'ESDNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ESDNumber')
            value_ = self.gds_validate_string(value_, node, 'ESDNumber')
            self.ESDNumber = value_
            self.ESDNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'pickupDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.pickupDate = dval_
            self.pickupDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'reservationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reservationNumber')
            value_ = self.gds_validate_string(value_, node, 'reservationNumber')
            self.reservationNumber = value_
            self.reservationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'resultParcelValue':
            obj_ = resultParcelValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.resultParcelValue.append(obj_)
            obj_.original_tagname_ = 'resultParcelValue'
# end class resultReservationMultiParcelExpeditionValue


class resultParcelValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codeDepot=None, codeService=None, DSort=None, destinationDepot=None, geoPostCodeBarre=None, geoPostNumeroColis=None, groupingPriorityLabel=None, OSort=None, reservationNumber=None, serviceMark=None, serviceName=None, signaletiqueProduit=None, skybillNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codeDepot = codeDepot
        self.codeDepot_nsprefix_ = None
        self.codeService = codeService
        self.codeService_nsprefix_ = None
        self.DSort = DSort
        self.DSort_nsprefix_ = None
        self.destinationDepot = destinationDepot
        self.destinationDepot_nsprefix_ = None
        self.geoPostCodeBarre = geoPostCodeBarre
        self.geoPostCodeBarre_nsprefix_ = None
        self.geoPostNumeroColis = geoPostNumeroColis
        self.geoPostNumeroColis_nsprefix_ = None
        self.groupingPriorityLabel = groupingPriorityLabel
        self.groupingPriorityLabel_nsprefix_ = None
        self.OSort = OSort
        self.OSort_nsprefix_ = None
        self.reservationNumber = reservationNumber
        self.reservationNumber_nsprefix_ = None
        self.serviceMark = serviceMark
        self.serviceMark_nsprefix_ = None
        self.serviceName = serviceName
        self.serviceName_nsprefix_ = None
        self.signaletiqueProduit = signaletiqueProduit
        self.signaletiqueProduit_nsprefix_ = None
        self.skybillNumber = skybillNumber
        self.skybillNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultParcelValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultParcelValue.subclass:
            return resultParcelValue.subclass(*args_, **kwargs_)
        else:
            return resultParcelValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeDepot(self):
        return self.codeDepot
    def set_codeDepot(self, codeDepot):
        self.codeDepot = codeDepot
    def get_codeService(self):
        return self.codeService
    def set_codeService(self, codeService):
        self.codeService = codeService
    def get_DSort(self):
        return self.DSort
    def set_DSort(self, DSort):
        self.DSort = DSort
    def get_destinationDepot(self):
        return self.destinationDepot
    def set_destinationDepot(self, destinationDepot):
        self.destinationDepot = destinationDepot
    def get_geoPostCodeBarre(self):
        return self.geoPostCodeBarre
    def set_geoPostCodeBarre(self, geoPostCodeBarre):
        self.geoPostCodeBarre = geoPostCodeBarre
    def get_geoPostNumeroColis(self):
        return self.geoPostNumeroColis
    def set_geoPostNumeroColis(self, geoPostNumeroColis):
        self.geoPostNumeroColis = geoPostNumeroColis
    def get_groupingPriorityLabel(self):
        return self.groupingPriorityLabel
    def set_groupingPriorityLabel(self, groupingPriorityLabel):
        self.groupingPriorityLabel = groupingPriorityLabel
    def get_OSort(self):
        return self.OSort
    def set_OSort(self, OSort):
        self.OSort = OSort
    def get_reservationNumber(self):
        return self.reservationNumber
    def set_reservationNumber(self, reservationNumber):
        self.reservationNumber = reservationNumber
    def get_serviceMark(self):
        return self.serviceMark
    def set_serviceMark(self, serviceMark):
        self.serviceMark = serviceMark
    def get_serviceName(self):
        return self.serviceName
    def set_serviceName(self, serviceName):
        self.serviceName = serviceName
    def get_signaletiqueProduit(self):
        return self.signaletiqueProduit
    def set_signaletiqueProduit(self, signaletiqueProduit):
        self.signaletiqueProduit = signaletiqueProduit
    def get_skybillNumber(self):
        return self.skybillNumber
    def set_skybillNumber(self, skybillNumber):
        self.skybillNumber = skybillNumber
    def _hasContent(self):
        if (
            self.codeDepot is not None or
            self.codeService is not None or
            self.DSort is not None or
            self.destinationDepot is not None or
            self.geoPostCodeBarre is not None or
            self.geoPostNumeroColis is not None or
            self.groupingPriorityLabel is not None or
            self.OSort is not None or
            self.reservationNumber is not None or
            self.serviceMark is not None or
            self.serviceName is not None or
            self.signaletiqueProduit is not None or
            self.skybillNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultParcelValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultParcelValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultParcelValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultParcelValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultParcelValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultParcelValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultParcelValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeDepot is not None:
            namespaceprefix_ = self.codeDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.codeDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeDepot>%s</%scodeDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeDepot), input_name='codeDepot')), namespaceprefix_ , eol_))
        if self.codeService is not None:
            namespaceprefix_ = self.codeService_nsprefix_ + ':' if (UseCapturedNS_ and self.codeService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeService>%s</%scodeService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeService), input_name='codeService')), namespaceprefix_ , eol_))
        if self.DSort is not None:
            namespaceprefix_ = self.DSort_nsprefix_ + ':' if (UseCapturedNS_ and self.DSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDSort>%s</%sDSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.DSort), input_name='DSort')), namespaceprefix_ , eol_))
        if self.destinationDepot is not None:
            namespaceprefix_ = self.destinationDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.destinationDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationDepot>%s</%sdestinationDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.destinationDepot), input_name='destinationDepot')), namespaceprefix_ , eol_))
        if self.geoPostCodeBarre is not None:
            namespaceprefix_ = self.geoPostCodeBarre_nsprefix_ + ':' if (UseCapturedNS_ and self.geoPostCodeBarre_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoPostCodeBarre>%s</%sgeoPostCodeBarre>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.geoPostCodeBarre), input_name='geoPostCodeBarre')), namespaceprefix_ , eol_))
        if self.geoPostNumeroColis is not None:
            namespaceprefix_ = self.geoPostNumeroColis_nsprefix_ + ':' if (UseCapturedNS_ and self.geoPostNumeroColis_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgeoPostNumeroColis>%s</%sgeoPostNumeroColis>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.geoPostNumeroColis), input_name='geoPostNumeroColis')), namespaceprefix_ , eol_))
        if self.groupingPriorityLabel is not None:
            namespaceprefix_ = self.groupingPriorityLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.groupingPriorityLabel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupingPriorityLabel>%s</%sgroupingPriorityLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.groupingPriorityLabel), input_name='groupingPriorityLabel')), namespaceprefix_ , eol_))
        if self.OSort is not None:
            namespaceprefix_ = self.OSort_nsprefix_ + ':' if (UseCapturedNS_ and self.OSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOSort>%s</%sOSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.OSort), input_name='OSort')), namespaceprefix_ , eol_))
        if self.reservationNumber is not None:
            namespaceprefix_ = self.reservationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.reservationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreservationNumber>%s</%sreservationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reservationNumber), input_name='reservationNumber')), namespaceprefix_ , eol_))
        if self.serviceMark is not None:
            namespaceprefix_ = self.serviceMark_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceMark>%s</%sserviceMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceMark), input_name='serviceMark')), namespaceprefix_ , eol_))
        if self.serviceName is not None:
            namespaceprefix_ = self.serviceName_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceName>%s</%sserviceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceName), input_name='serviceName')), namespaceprefix_ , eol_))
        if self.signaletiqueProduit is not None:
            namespaceprefix_ = self.signaletiqueProduit_nsprefix_ + ':' if (UseCapturedNS_ and self.signaletiqueProduit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssignaletiqueProduit>%s</%ssignaletiqueProduit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.signaletiqueProduit), input_name='signaletiqueProduit')), namespaceprefix_ , eol_))
        if self.skybillNumber is not None:
            namespaceprefix_ = self.skybillNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybillNumber>%s</%sskybillNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybillNumber), input_name='skybillNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeDepot')
            value_ = self.gds_validate_string(value_, node, 'codeDepot')
            self.codeDepot = value_
            self.codeDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeService')
            value_ = self.gds_validate_string(value_, node, 'codeService')
            self.codeService = value_
            self.codeService_nsprefix_ = child_.prefix
        elif nodeName_ == 'DSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'DSort')
            value_ = self.gds_validate_string(value_, node, 'DSort')
            self.DSort = value_
            self.DSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'destinationDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'destinationDepot')
            value_ = self.gds_validate_string(value_, node, 'destinationDepot')
            self.destinationDepot = value_
            self.destinationDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'geoPostCodeBarre':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'geoPostCodeBarre')
            value_ = self.gds_validate_string(value_, node, 'geoPostCodeBarre')
            self.geoPostCodeBarre = value_
            self.geoPostCodeBarre_nsprefix_ = child_.prefix
        elif nodeName_ == 'geoPostNumeroColis':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'geoPostNumeroColis')
            value_ = self.gds_validate_string(value_, node, 'geoPostNumeroColis')
            self.geoPostNumeroColis = value_
            self.geoPostNumeroColis_nsprefix_ = child_.prefix
        elif nodeName_ == 'groupingPriorityLabel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'groupingPriorityLabel')
            value_ = self.gds_validate_string(value_, node, 'groupingPriorityLabel')
            self.groupingPriorityLabel = value_
            self.groupingPriorityLabel_nsprefix_ = child_.prefix
        elif nodeName_ == 'OSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'OSort')
            value_ = self.gds_validate_string(value_, node, 'OSort')
            self.OSort = value_
            self.OSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'reservationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reservationNumber')
            value_ = self.gds_validate_string(value_, node, 'reservationNumber')
            self.reservationNumber = value_
            self.reservationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceMark')
            value_ = self.gds_validate_string(value_, node, 'serviceMark')
            self.serviceMark = value_
            self.serviceMark_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceName')
            value_ = self.gds_validate_string(value_, node, 'serviceName')
            self.serviceName = value_
            self.serviceName_nsprefix_ = child_.prefix
        elif nodeName_ == 'signaletiqueProduit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'signaletiqueProduit')
            value_ = self.gds_validate_string(value_, node, 'signaletiqueProduit')
            self.signaletiqueProduit = value_
            self.signaletiqueProduit_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybillNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybillNumber')
            value_ = self.gds_validate_string(value_, node, 'skybillNumber')
            self.skybillNumber = value_
            self.skybillNumber_nsprefix_ = child_.prefix
# end class resultParcelValue


class esdResultContraintesAgenceValue(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codeErreur=None, esdContraintesAgence=None, libelleErreur=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codeErreur = codeErreur
        self.codeErreur_nsprefix_ = None
        if esdContraintesAgence is None:
            self.esdContraintesAgence = []
        else:
            self.esdContraintesAgence = esdContraintesAgence
        self.esdContraintesAgence_nsprefix_ = None
        self.libelleErreur = libelleErreur
        self.libelleErreur_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, esdResultContraintesAgenceValue)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if esdResultContraintesAgenceValue.subclass:
            return esdResultContraintesAgenceValue.subclass(*args_, **kwargs_)
        else:
            return esdResultContraintesAgenceValue(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeErreur(self):
        return self.codeErreur
    def set_codeErreur(self, codeErreur):
        self.codeErreur = codeErreur
    def get_esdContraintesAgence(self):
        return self.esdContraintesAgence
    def set_esdContraintesAgence(self, esdContraintesAgence):
        self.esdContraintesAgence = esdContraintesAgence
    def add_esdContraintesAgence(self, value):
        self.esdContraintesAgence.append(value)
    def insert_esdContraintesAgence_at(self, index, value):
        self.esdContraintesAgence.insert(index, value)
    def replace_esdContraintesAgence_at(self, index, value):
        self.esdContraintesAgence[index] = value
    def get_libelleErreur(self):
        return self.libelleErreur
    def set_libelleErreur(self, libelleErreur):
        self.libelleErreur = libelleErreur
    def _hasContent(self):
        if (
            self.codeErreur is not None or
            self.esdContraintesAgence or
            self.libelleErreur is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdResultContraintesAgenceValue', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('esdResultContraintesAgenceValue')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'esdResultContraintesAgenceValue':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdResultContraintesAgenceValue')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='esdResultContraintesAgenceValue', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='esdResultContraintesAgenceValue'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdResultContraintesAgenceValue', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeErreur is not None:
            namespaceprefix_ = self.codeErreur_nsprefix_ + ':' if (UseCapturedNS_ and self.codeErreur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeErreur>%s</%scodeErreur>%s' % (namespaceprefix_ , self.gds_format_integer(self.codeErreur, input_name='codeErreur'), namespaceprefix_ , eol_))
        for esdContraintesAgence_ in self.esdContraintesAgence:
            namespaceprefix_ = self.esdContraintesAgence_nsprefix_ + ':' if (UseCapturedNS_ and self.esdContraintesAgence_nsprefix_) else ''
            esdContraintesAgence_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdContraintesAgence', pretty_print=pretty_print)
        if self.libelleErreur is not None:
            namespaceprefix_ = self.libelleErreur_nsprefix_ + ':' if (UseCapturedNS_ and self.libelleErreur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slibelleErreur>%s</%slibelleErreur>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.libelleErreur), input_name='libelleErreur')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeErreur' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'codeErreur')
            ival_ = self.gds_validate_integer(ival_, node, 'codeErreur')
            self.codeErreur = ival_
            self.codeErreur_nsprefix_ = child_.prefix
        elif nodeName_ == 'esdContraintesAgence':
            obj_ = esdContraintesAgence.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdContraintesAgence.append(obj_)
            obj_.original_tagname_ = 'esdContraintesAgence'
        elif nodeName_ == 'libelleErreur':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'libelleErreur')
            value_ = self.gds_validate_string(value_, node, 'libelleErreur')
            self.libelleErreur = value_
            self.libelleErreur_nsprefix_ = child_.prefix
# end class esdResultContraintesAgenceValue


class esdContraintesAgence(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, battement=None, battementEnHeure=None, codeAgence=None, codePays=None, codePostal=None, hla=None, hlp=None, hppt=None, nomAgence=None, raisonNonActivite=None, ville=None, zoneA=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.battement = battement
        self.battement_nsprefix_ = None
        self.battementEnHeure = battementEnHeure
        self.battementEnHeure_nsprefix_ = None
        self.codeAgence = codeAgence
        self.codeAgence_nsprefix_ = None
        self.codePays = codePays
        self.codePays_nsprefix_ = None
        self.codePostal = codePostal
        self.codePostal_nsprefix_ = None
        self.hla = hla
        self.hla_nsprefix_ = None
        self.hlp = hlp
        self.hlp_nsprefix_ = None
        self.hppt = hppt
        self.hppt_nsprefix_ = None
        self.nomAgence = nomAgence
        self.nomAgence_nsprefix_ = None
        self.raisonNonActivite = raisonNonActivite
        self.raisonNonActivite_nsprefix_ = None
        self.ville = ville
        self.ville_nsprefix_ = None
        self.zoneA = zoneA
        self.zoneA_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, esdContraintesAgence)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if esdContraintesAgence.subclass:
            return esdContraintesAgence.subclass(*args_, **kwargs_)
        else:
            return esdContraintesAgence(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_battement(self):
        return self.battement
    def set_battement(self, battement):
        self.battement = battement
    def get_battementEnHeure(self):
        return self.battementEnHeure
    def set_battementEnHeure(self, battementEnHeure):
        self.battementEnHeure = battementEnHeure
    def get_codeAgence(self):
        return self.codeAgence
    def set_codeAgence(self, codeAgence):
        self.codeAgence = codeAgence
    def get_codePays(self):
        return self.codePays
    def set_codePays(self, codePays):
        self.codePays = codePays
    def get_codePostal(self):
        return self.codePostal
    def set_codePostal(self, codePostal):
        self.codePostal = codePostal
    def get_hla(self):
        return self.hla
    def set_hla(self, hla):
        self.hla = hla
    def get_hlp(self):
        return self.hlp
    def set_hlp(self, hlp):
        self.hlp = hlp
    def get_hppt(self):
        return self.hppt
    def set_hppt(self, hppt):
        self.hppt = hppt
    def get_nomAgence(self):
        return self.nomAgence
    def set_nomAgence(self, nomAgence):
        self.nomAgence = nomAgence
    def get_raisonNonActivite(self):
        return self.raisonNonActivite
    def set_raisonNonActivite(self, raisonNonActivite):
        self.raisonNonActivite = raisonNonActivite
    def get_ville(self):
        return self.ville
    def set_ville(self, ville):
        self.ville = ville
    def get_zoneA(self):
        return self.zoneA
    def set_zoneA(self, zoneA):
        self.zoneA = zoneA
    def _hasContent(self):
        if (
            self.battement is not None or
            self.battementEnHeure is not None or
            self.codeAgence is not None or
            self.codePays is not None or
            self.codePostal is not None or
            self.hla is not None or
            self.hlp is not None or
            self.hppt is not None or
            self.nomAgence is not None or
            self.raisonNonActivite is not None or
            self.ville is not None or
            self.zoneA is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdContraintesAgence', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('esdContraintesAgence')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'esdContraintesAgence':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='esdContraintesAgence')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='esdContraintesAgence', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='esdContraintesAgence'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='esdContraintesAgence', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.battement is not None:
            namespaceprefix_ = self.battement_nsprefix_ + ':' if (UseCapturedNS_ and self.battement_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbattement>%s</%sbattement>%s' % (namespaceprefix_ , self.gds_format_integer(self.battement, input_name='battement'), namespaceprefix_ , eol_))
        if self.battementEnHeure is not None:
            namespaceprefix_ = self.battementEnHeure_nsprefix_ + ':' if (UseCapturedNS_ and self.battementEnHeure_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbattementEnHeure>%s</%sbattementEnHeure>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.battementEnHeure), input_name='battementEnHeure')), namespaceprefix_ , eol_))
        if self.codeAgence is not None:
            namespaceprefix_ = self.codeAgence_nsprefix_ + ':' if (UseCapturedNS_ and self.codeAgence_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeAgence>%s</%scodeAgence>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeAgence), input_name='codeAgence')), namespaceprefix_ , eol_))
        if self.codePays is not None:
            namespaceprefix_ = self.codePays_nsprefix_ + ':' if (UseCapturedNS_ and self.codePays_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePays>%s</%scodePays>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePays), input_name='codePays')), namespaceprefix_ , eol_))
        if self.codePostal is not None:
            namespaceprefix_ = self.codePostal_nsprefix_ + ':' if (UseCapturedNS_ and self.codePostal_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodePostal>%s</%scodePostal>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codePostal), input_name='codePostal')), namespaceprefix_ , eol_))
        if self.hla is not None:
            namespaceprefix_ = self.hla_nsprefix_ + ':' if (UseCapturedNS_ and self.hla_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shla>%s</%shla>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hla), input_name='hla')), namespaceprefix_ , eol_))
        if self.hlp is not None:
            namespaceprefix_ = self.hlp_nsprefix_ + ':' if (UseCapturedNS_ and self.hlp_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shlp>%s</%shlp>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hlp), input_name='hlp')), namespaceprefix_ , eol_))
        if self.hppt is not None:
            namespaceprefix_ = self.hppt_nsprefix_ + ':' if (UseCapturedNS_ and self.hppt_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%shppt>%s</%shppt>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.hppt), input_name='hppt')), namespaceprefix_ , eol_))
        if self.nomAgence is not None:
            namespaceprefix_ = self.nomAgence_nsprefix_ + ':' if (UseCapturedNS_ and self.nomAgence_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snomAgence>%s</%snomAgence>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nomAgence), input_name='nomAgence')), namespaceprefix_ , eol_))
        if self.raisonNonActivite is not None:
            namespaceprefix_ = self.raisonNonActivite_nsprefix_ + ':' if (UseCapturedNS_ and self.raisonNonActivite_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sraisonNonActivite>%s</%sraisonNonActivite>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.raisonNonActivite), input_name='raisonNonActivite')), namespaceprefix_ , eol_))
        if self.ville is not None:
            namespaceprefix_ = self.ville_nsprefix_ + ':' if (UseCapturedNS_ and self.ville_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sville>%s</%sville>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ville), input_name='ville')), namespaceprefix_ , eol_))
        if self.zoneA is not None:
            namespaceprefix_ = self.zoneA_nsprefix_ + ':' if (UseCapturedNS_ and self.zoneA_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szoneA>%s</%szoneA>%s' % (namespaceprefix_ , self.gds_format_boolean(self.zoneA, input_name='zoneA'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'battement' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'battement')
            ival_ = self.gds_validate_integer(ival_, node, 'battement')
            self.battement = ival_
            self.battement_nsprefix_ = child_.prefix
        elif nodeName_ == 'battementEnHeure':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'battementEnHeure')
            value_ = self.gds_validate_string(value_, node, 'battementEnHeure')
            self.battementEnHeure = value_
            self.battementEnHeure_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeAgence':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeAgence')
            value_ = self.gds_validate_string(value_, node, 'codeAgence')
            self.codeAgence = value_
            self.codeAgence_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePays':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePays')
            value_ = self.gds_validate_string(value_, node, 'codePays')
            self.codePays = value_
            self.codePays_nsprefix_ = child_.prefix
        elif nodeName_ == 'codePostal':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codePostal')
            value_ = self.gds_validate_string(value_, node, 'codePostal')
            self.codePostal = value_
            self.codePostal_nsprefix_ = child_.prefix
        elif nodeName_ == 'hla':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hla')
            value_ = self.gds_validate_string(value_, node, 'hla')
            self.hla = value_
            self.hla_nsprefix_ = child_.prefix
        elif nodeName_ == 'hlp':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hlp')
            value_ = self.gds_validate_string(value_, node, 'hlp')
            self.hlp = value_
            self.hlp_nsprefix_ = child_.prefix
        elif nodeName_ == 'hppt':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'hppt')
            value_ = self.gds_validate_string(value_, node, 'hppt')
            self.hppt = value_
            self.hppt_nsprefix_ = child_.prefix
        elif nodeName_ == 'nomAgence':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'nomAgence')
            value_ = self.gds_validate_string(value_, node, 'nomAgence')
            self.nomAgence = value_
            self.nomAgence_nsprefix_ = child_.prefix
        elif nodeName_ == 'raisonNonActivite':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'raisonNonActivite')
            value_ = self.gds_validate_string(value_, node, 'raisonNonActivite')
            self.raisonNonActivite = value_
            self.raisonNonActivite_nsprefix_ = child_.prefix
        elif nodeName_ == 'ville':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ville')
            value_ = self.gds_validate_string(value_, node, 'ville')
            self.ville = value_
            self.ville_nsprefix_ = child_.prefix
        elif nodeName_ == 'zoneA':
            sval_ = child_.text
            ival_ = self.gds_parse_boolean(sval_, node, 'zoneA')
            ival_ = self.gds_validate_boolean(ival_, node, 'zoneA')
            self.zoneA = ival_
            self.zoneA_nsprefix_ = child_.prefix
# end class esdContraintesAgence


class resultReservationMultiParcelExpeditionValueV2(resultReservationMultiParcelExpeditionValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = resultReservationMultiParcelExpeditionValue
    def __init__(self, ESDFullNumber=None, ESDNumber=None, errorCode=None, errorMessage=None, pickupDate=None, reservationNumber=None, resultParcelValue=None, asCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("resultReservationMultiParcelExpeditionValueV2"), self).__init__(ESDFullNumber, ESDNumber, errorCode, errorMessage, pickupDate, reservationNumber, resultParcelValue,  **kwargs_)
        self.asCode = asCode
        self.asCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultReservationMultiParcelExpeditionValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultReservationMultiParcelExpeditionValueV2.subclass:
            return resultReservationMultiParcelExpeditionValueV2.subclass(*args_, **kwargs_)
        else:
            return resultReservationMultiParcelExpeditionValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_asCode(self):
        return self.asCode
    def set_asCode(self, asCode):
        self.asCode = asCode
    def _hasContent(self):
        if (
            self.asCode is not None or
            super(resultReservationMultiParcelExpeditionValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultReservationMultiParcelExpeditionValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultReservationMultiParcelExpeditionValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultReservationMultiParcelExpeditionValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultReservationMultiParcelExpeditionValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultReservationMultiParcelExpeditionValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultReservationMultiParcelExpeditionValueV2'):
        super(resultReservationMultiParcelExpeditionValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultReservationMultiParcelExpeditionValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultReservationMultiParcelExpeditionValueV2', fromsubclass_=False, pretty_print=True):
        super(resultReservationMultiParcelExpeditionValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.asCode is not None:
            namespaceprefix_ = self.asCode_nsprefix_ + ':' if (UseCapturedNS_ and self.asCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sasCode>%s</%sasCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.asCode), input_name='asCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(resultReservationMultiParcelExpeditionValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'asCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'asCode')
            value_ = self.gds_validate_string(value_, node, 'asCode')
            self.asCode = value_
            self.asCode_nsprefix_ = child_.prefix
        super(resultReservationMultiParcelExpeditionValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class resultReservationMultiParcelExpeditionValueV2


class resultAnnulerEnlevement(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, codeErreur=None, errorMessage=None, statut=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.codeErreur = codeErreur
        self.codeErreur_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        self.statut = statut
        self.statut_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultAnnulerEnlevement)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultAnnulerEnlevement.subclass:
            return resultAnnulerEnlevement.subclass(*args_, **kwargs_)
        else:
            return resultAnnulerEnlevement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_codeErreur(self):
        return self.codeErreur
    def set_codeErreur(self, codeErreur):
        self.codeErreur = codeErreur
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_statut(self):
        return self.statut
    def set_statut(self, statut):
        self.statut = statut
    def _hasContent(self):
        if (
            self.codeErreur is not None or
            self.errorMessage is not None or
            self.statut is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultAnnulerEnlevement', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultAnnulerEnlevement')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultAnnulerEnlevement':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultAnnulerEnlevement')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultAnnulerEnlevement', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultAnnulerEnlevement'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultAnnulerEnlevement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.codeErreur is not None:
            namespaceprefix_ = self.codeErreur_nsprefix_ + ':' if (UseCapturedNS_ and self.codeErreur_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeErreur>%s</%scodeErreur>%s' % (namespaceprefix_ , self.gds_format_integer(self.codeErreur, input_name='codeErreur'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
        if self.statut is not None:
            namespaceprefix_ = self.statut_nsprefix_ + ':' if (UseCapturedNS_ and self.statut_nsprefix_) else ''
            self.statut.export(outfile, level, namespaceprefix_, namespacedef_='', name_='statut', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'codeErreur' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'codeErreur')
            ival_ = self.gds_validate_integer(ival_, node, 'codeErreur')
            self.codeErreur = ival_
            self.codeErreur_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'statut':
            obj_ = statutType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.statut = obj_
            obj_.original_tagname_ = 'statut'
# end class resultAnnulerEnlevement


class resultReservationExpeditionValueV2(resultReservationExpeditionValue):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = resultReservationExpeditionValue
    def __init__(self, codeDepot=None, codeService=None, DSort=None, destinationDepot=None, ESDFullNumber=None, ESDNumber=None, errorCode=None, errorMessage=None, geoPostCodeBarre=None, geoPostNumeroColis=None, groupingPriorityLabel=None, OSort=None, pickupDate=None, reservationNumber=None, serviceMark=None, serviceName=None, signaletiqueProduit=None, skybillNumber=None, asCode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        super(globals().get("resultReservationExpeditionValueV2"), self).__init__(codeDepot, codeService, DSort, destinationDepot, ESDFullNumber, ESDNumber, errorCode, errorMessage, geoPostCodeBarre, geoPostNumeroColis, groupingPriorityLabel, OSort, pickupDate, reservationNumber, serviceMark, serviceName, signaletiqueProduit, skybillNumber,  **kwargs_)
        self.asCode = asCode
        self.asCode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultReservationExpeditionValueV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultReservationExpeditionValueV2.subclass:
            return resultReservationExpeditionValueV2.subclass(*args_, **kwargs_)
        else:
            return resultReservationExpeditionValueV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_asCode(self):
        return self.asCode
    def set_asCode(self, asCode):
        self.asCode = asCode
    def _hasContent(self):
        if (
            self.asCode is not None or
            super(resultReservationExpeditionValueV2, self)._hasContent()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultReservationExpeditionValueV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultReservationExpeditionValueV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultReservationExpeditionValueV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultReservationExpeditionValueV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultReservationExpeditionValueV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultReservationExpeditionValueV2'):
        super(resultReservationExpeditionValueV2, self)._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultReservationExpeditionValueV2')
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultReservationExpeditionValueV2', fromsubclass_=False, pretty_print=True):
        super(resultReservationExpeditionValueV2, self)._exportChildren(outfile, level, namespaceprefix_, namespacedef_, name_, True, pretty_print=pretty_print)
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.asCode is not None:
            namespaceprefix_ = self.asCode_nsprefix_ + ':' if (UseCapturedNS_ and self.asCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sasCode>%s</%sasCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.asCode), input_name='asCode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        super(resultReservationExpeditionValueV2, self)._buildAttributes(node, attrs, already_processed)
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'asCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'asCode')
            value_ = self.gds_validate_string(value_, node, 'asCode')
            self.asCode = value_
            self.asCode_nsprefix_ = child_.prefix
        super(resultReservationExpeditionValueV2, self)._buildChildren(child_, node, nodeName_, True)
# end class resultReservationExpeditionValueV2


class skybillValueBase(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, as_=None, objectType=None, productCode=None, service=None, shipDate=None, weight=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.as_ = as_
        self.as__nsprefix_ = None
        self.objectType = objectType
        self.objectType_nsprefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        if isinstance(shipDate, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(shipDate, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = shipDate
        self.shipDate = initvalue_
        self.shipDate_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, skybillValueBase)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if skybillValueBase.subclass:
            return skybillValueBase.subclass(*args_, **kwargs_)
        else:
            return skybillValueBase(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_as(self):
        return self.as_
    def set_as(self, as_):
        self.as_ = as_
    def get_objectType(self):
        return self.objectType
    def set_objectType(self, objectType):
        self.objectType = objectType
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_shipDate(self):
        return self.shipDate
    def set_shipDate(self, shipDate):
        self.shipDate = shipDate
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def _hasContent(self):
        if (
            self.as_ is not None or
            self.objectType is not None or
            self.productCode is not None or
            self.service is not None or
            self.shipDate is not None or
            self.weight is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillValueBase', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('skybillValueBase')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'skybillValueBase':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='skybillValueBase')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='skybillValueBase', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='skybillValueBase'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='skybillValueBase', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.as_ is not None:
            namespaceprefix_ = self.as__nsprefix_ + ':' if (UseCapturedNS_ and self.as__nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sas>%s</%sas>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.as_), input_name='as')), namespaceprefix_ , eol_))
        if self.objectType is not None:
            namespaceprefix_ = self.objectType_nsprefix_ + ':' if (UseCapturedNS_ and self.objectType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjectType>%s</%sobjectType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.objectType), input_name='objectType')), namespaceprefix_ , eol_))
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sservice>%s</%sservice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.service), input_name='service')), namespaceprefix_ , eol_))
        if self.shipDate is not None:
            namespaceprefix_ = self.shipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.shipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipDate>%s</%sshipDate>%s' % (namespaceprefix_ , self.gds_format_datetime(self.shipDate, input_name='shipDate'), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_format_float(self.weight, input_name='weight'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'as':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'as')
            value_ = self.gds_validate_string(value_, node, 'as')
            self.as_ = value_
            self.as_nsprefix_ = child_.prefix
        elif nodeName_ == 'objectType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'objectType')
            value_ = self.gds_validate_string(value_, node, 'objectType')
            self.objectType = value_
            self.objectType_nsprefix_ = child_.prefix
        elif nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'service')
            value_ = self.gds_validate_string(value_, node, 'service')
            self.service = value_
            self.service_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipDate':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.shipDate = dval_
            self.shipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight' and child_.text:
            sval_ = child_.text
            fval_ = self.gds_parse_float(sval_, node, 'weight')
            fval_ = self.gds_validate_float(fval_, node, 'weight')
            self.weight = fval_
            self.weight_nsprefix_ = child_.prefix
# end class skybillValueBase


class resultShippingInfo(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, error=None, shippingInfo=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.error = error
        self.error_nsprefix_ = None
        self.shippingInfo = shippingInfo
        self.shippingInfo_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, resultShippingInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if resultShippingInfo.subclass:
            return resultShippingInfo.subclass(*args_, **kwargs_)
        else:
            return resultShippingInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_error(self):
        return self.error
    def set_error(self, error):
        self.error = error
    def get_shippingInfo(self):
        return self.shippingInfo
    def set_shippingInfo(self, shippingInfo):
        self.shippingInfo = shippingInfo
    def _hasContent(self):
        if (
            self.error is not None or
            self.shippingInfo is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultShippingInfo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('resultShippingInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'resultShippingInfo':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='resultShippingInfo')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='resultShippingInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='resultShippingInfo'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='resultShippingInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.error is not None:
            namespaceprefix_ = self.error_nsprefix_ + ':' if (UseCapturedNS_ and self.error_nsprefix_) else ''
            self.error.export(outfile, level, namespaceprefix_, namespacedef_='', name_='error', pretty_print=pretty_print)
        if self.shippingInfo is not None:
            namespaceprefix_ = self.shippingInfo_nsprefix_ + ':' if (UseCapturedNS_ and self.shippingInfo_nsprefix_) else ''
            self.shippingInfo.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shippingInfo', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'error':
            obj_ = error.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.error = obj_
            obj_.original_tagname_ = 'error'
        elif nodeName_ == 'shippingInfo':
            obj_ = shippingInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shippingInfo = obj_
            obj_.original_tagname_ = 'shippingInfo'
# end class resultShippingInfo


class error(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, detail=None, errorCode=None, errorMessage=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.detail = detail
        self.detail_nsprefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, error)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if error.subclass:
            return error.subclass(*args_, **kwargs_)
        else:
            return error(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_detail(self):
        return self.detail
    def set_detail(self, detail):
        self.detail = detail
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def _hasContent(self):
        if (
            self.detail is not None or
            self.errorCode is not None or
            self.errorMessage is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='error', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('error')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'error':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='error')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='error', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='error'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='error', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.detail is not None:
            namespaceprefix_ = self.detail_nsprefix_ + ':' if (UseCapturedNS_ and self.detail_nsprefix_) else ''
            self.detail.export(outfile, level, namespaceprefix_, namespacedef_='', name_='detail', pretty_print=pretty_print)
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'detail':
            obj_ = detail.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.detail = obj_
            obj_.original_tagname_ = 'detail'
        elif nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
# end class error


class detail(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, errorCode=None, errorMessage=None, mode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.errorCode = errorCode
        self.errorCode_nsprefix_ = None
        self.errorMessage = errorMessage
        self.errorMessage_nsprefix_ = None
        self.mode = mode
        self.mode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, detail)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if detail.subclass:
            return detail.subclass(*args_, **kwargs_)
        else:
            return detail(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_errorCode(self):
        return self.errorCode
    def set_errorCode(self, errorCode):
        self.errorCode = errorCode
    def get_errorMessage(self):
        return self.errorMessage
    def set_errorMessage(self, errorMessage):
        self.errorMessage = errorMessage
    def get_mode(self):
        return self.mode
    def set_mode(self, mode):
        self.mode = mode
    def _hasContent(self):
        if (
            self.errorCode is not None or
            self.errorMessage is not None or
            self.mode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='detail', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('detail')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'detail':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='detail')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='detail', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='detail'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='detail', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.errorCode is not None:
            namespaceprefix_ = self.errorCode_nsprefix_ + ':' if (UseCapturedNS_ and self.errorCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorCode>%s</%serrorCode>%s' % (namespaceprefix_ , self.gds_format_integer(self.errorCode, input_name='errorCode'), namespaceprefix_ , eol_))
        if self.errorMessage is not None:
            namespaceprefix_ = self.errorMessage_nsprefix_ + ':' if (UseCapturedNS_ and self.errorMessage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%serrorMessage>%s</%serrorMessage>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.errorMessage), input_name='errorMessage')), namespaceprefix_ , eol_))
        if self.mode is not None:
            namespaceprefix_ = self.mode_nsprefix_ + ':' if (UseCapturedNS_ and self.mode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smode>%s</%smode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mode), input_name='mode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'errorCode' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'errorCode')
            ival_ = self.gds_validate_integer(ival_, node, 'errorCode')
            self.errorCode = ival_
            self.errorCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'errorMessage':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'errorMessage')
            value_ = self.gds_validate_string(value_, node, 'errorMessage')
            self.errorMessage = value_
            self.errorMessage_nsprefix_ = child_.prefix
        elif nodeName_ == 'mode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mode')
            value_ = self.gds_validate_string(value_, node, 'mode')
            self.mode = value_
            self.mode_nsprefix_ = child_.prefix
# end class detail


class shippingInfo(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, asCode=None, codeService=None, destinationDepot=None, groupingPriorityLabel=None, serviceMark=None, serviceName=None, signaletiqueProduit=None, dSort=None, oSort=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.asCode = asCode
        self.asCode_nsprefix_ = None
        self.codeService = codeService
        self.codeService_nsprefix_ = None
        self.destinationDepot = destinationDepot
        self.destinationDepot_nsprefix_ = None
        self.groupingPriorityLabel = groupingPriorityLabel
        self.groupingPriorityLabel_nsprefix_ = None
        self.serviceMark = serviceMark
        self.serviceMark_nsprefix_ = None
        self.serviceName = serviceName
        self.serviceName_nsprefix_ = None
        self.signaletiqueProduit = signaletiqueProduit
        self.signaletiqueProduit_nsprefix_ = None
        self.dSort = dSort
        self.dSort_nsprefix_ = None
        self.oSort = oSort
        self.oSort_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingInfo.subclass:
            return shippingInfo.subclass(*args_, **kwargs_)
        else:
            return shippingInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_asCode(self):
        return self.asCode
    def set_asCode(self, asCode):
        self.asCode = asCode
    def get_codeService(self):
        return self.codeService
    def set_codeService(self, codeService):
        self.codeService = codeService
    def get_destinationDepot(self):
        return self.destinationDepot
    def set_destinationDepot(self, destinationDepot):
        self.destinationDepot = destinationDepot
    def get_groupingPriorityLabel(self):
        return self.groupingPriorityLabel
    def set_groupingPriorityLabel(self, groupingPriorityLabel):
        self.groupingPriorityLabel = groupingPriorityLabel
    def get_serviceMark(self):
        return self.serviceMark
    def set_serviceMark(self, serviceMark):
        self.serviceMark = serviceMark
    def get_serviceName(self):
        return self.serviceName
    def set_serviceName(self, serviceName):
        self.serviceName = serviceName
    def get_signaletiqueProduit(self):
        return self.signaletiqueProduit
    def set_signaletiqueProduit(self, signaletiqueProduit):
        self.signaletiqueProduit = signaletiqueProduit
    def get_dSort(self):
        return self.dSort
    def set_dSort(self, dSort):
        self.dSort = dSort
    def get_oSort(self):
        return self.oSort
    def set_oSort(self, oSort):
        self.oSort = oSort
    def _hasContent(self):
        if (
            self.asCode is not None or
            self.codeService is not None or
            self.destinationDepot is not None or
            self.groupingPriorityLabel is not None or
            self.serviceMark is not None or
            self.serviceName is not None or
            self.signaletiqueProduit is not None or
            self.dSort is not None or
            self.oSort is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingInfo', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingInfo':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingInfo')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingInfo'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.asCode is not None:
            namespaceprefix_ = self.asCode_nsprefix_ + ':' if (UseCapturedNS_ and self.asCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sasCode>%s</%sasCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.asCode), input_name='asCode')), namespaceprefix_ , eol_))
        if self.codeService is not None:
            namespaceprefix_ = self.codeService_nsprefix_ + ':' if (UseCapturedNS_ and self.codeService_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodeService>%s</%scodeService>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codeService), input_name='codeService')), namespaceprefix_ , eol_))
        if self.destinationDepot is not None:
            namespaceprefix_ = self.destinationDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.destinationDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdestinationDepot>%s</%sdestinationDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.destinationDepot), input_name='destinationDepot')), namespaceprefix_ , eol_))
        if self.groupingPriorityLabel is not None:
            namespaceprefix_ = self.groupingPriorityLabel_nsprefix_ + ':' if (UseCapturedNS_ and self.groupingPriorityLabel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sgroupingPriorityLabel>%s</%sgroupingPriorityLabel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.groupingPriorityLabel), input_name='groupingPriorityLabel')), namespaceprefix_ , eol_))
        if self.serviceMark is not None:
            namespaceprefix_ = self.serviceMark_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceMark_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceMark>%s</%sserviceMark>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceMark), input_name='serviceMark')), namespaceprefix_ , eol_))
        if self.serviceName is not None:
            namespaceprefix_ = self.serviceName_nsprefix_ + ':' if (UseCapturedNS_ and self.serviceName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sserviceName>%s</%sserviceName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.serviceName), input_name='serviceName')), namespaceprefix_ , eol_))
        if self.signaletiqueProduit is not None:
            namespaceprefix_ = self.signaletiqueProduit_nsprefix_ + ':' if (UseCapturedNS_ and self.signaletiqueProduit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssignaletiqueProduit>%s</%ssignaletiqueProduit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.signaletiqueProduit), input_name='signaletiqueProduit')), namespaceprefix_ , eol_))
        if self.dSort is not None:
            namespaceprefix_ = self.dSort_nsprefix_ + ':' if (UseCapturedNS_ and self.dSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdSort>%s</%sdSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.dSort), input_name='dSort')), namespaceprefix_ , eol_))
        if self.oSort is not None:
            namespaceprefix_ = self.oSort_nsprefix_ + ':' if (UseCapturedNS_ and self.oSort_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soSort>%s</%soSort>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.oSort), input_name='oSort')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'asCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'asCode')
            value_ = self.gds_validate_string(value_, node, 'asCode')
            self.asCode = value_
            self.asCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'codeService':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codeService')
            value_ = self.gds_validate_string(value_, node, 'codeService')
            self.codeService = value_
            self.codeService_nsprefix_ = child_.prefix
        elif nodeName_ == 'destinationDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'destinationDepot')
            value_ = self.gds_validate_string(value_, node, 'destinationDepot')
            self.destinationDepot = value_
            self.destinationDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'groupingPriorityLabel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'groupingPriorityLabel')
            value_ = self.gds_validate_string(value_, node, 'groupingPriorityLabel')
            self.groupingPriorityLabel = value_
            self.groupingPriorityLabel_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceMark':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceMark')
            value_ = self.gds_validate_string(value_, node, 'serviceMark')
            self.serviceMark = value_
            self.serviceMark_nsprefix_ = child_.prefix
        elif nodeName_ == 'serviceName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'serviceName')
            value_ = self.gds_validate_string(value_, node, 'serviceName')
            self.serviceName = value_
            self.serviceName_nsprefix_ = child_.prefix
        elif nodeName_ == 'signaletiqueProduit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'signaletiqueProduit')
            value_ = self.gds_validate_string(value_, node, 'signaletiqueProduit')
            self.signaletiqueProduit = value_
            self.signaletiqueProduit_nsprefix_ = child_.prefix
        elif nodeName_ == 'dSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'dSort')
            value_ = self.gds_validate_string(value_, node, 'dSort')
            self.dSort = value_
            self.dSort_nsprefix_ = child_.prefix
        elif nodeName_ == 'oSort':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'oSort')
            value_ = self.gds_validate_string(value_, node, 'oSort')
            self.oSort = value_
            self.oSort_nsprefix_ = child_.prefix
# end class shippingInfo


class getReservedSkybill(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, reservationNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.reservationNumber = reservationNumber
        self.reservationNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybill)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybill.subclass:
            return getReservedSkybill.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybill(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_reservationNumber(self):
        return self.reservationNumber
    def set_reservationNumber(self, reservationNumber):
        self.reservationNumber = reservationNumber
    def _hasContent(self):
        if (
            self.reservationNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybill', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybill')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybill':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybill')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybill', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybill'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybill', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.reservationNumber is not None:
            namespaceprefix_ = self.reservationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.reservationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreservationNumber>%s</%sreservationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reservationNumber), input_name='reservationNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'reservationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reservationNumber')
            value_ = self.gds_validate_string(value_, node, 'reservationNumber')
            self.reservationNumber = value_
            self.reservationNumber_nsprefix_ = child_.prefix
# end class getReservedSkybill


class getReservedSkybillResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillResponse.subclass:
            return getReservedSkybillResponse.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultGetReservedSkybillValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getReservedSkybillResponse


class shippingWithReservationAndESDWithRefClientPC(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, refEsdClient=None, retrievalDateTime=None, closingDateTime=None, specificInstructions=None, height=None, width=None, length=None, shipperCarriesCode=None, shipperBuildingFloor=None, shipperServiceDirection=None, nombreDePassageMaximum=None, ltAImprimerParChronopost=None, header_idEmit=None, accountNumber=None, subAccount=None, header_identWebPro=None, shipperCivility=None, shipperName=None, shipperName2=None, shipperAdress1=None, shipperAdress2=None, shipperZipCode=None, shipperCity=None, shipperCountry=None, shipperCountryName=None, shipperContactName=None, shipperEmail=None, shipperPhone=None, shipperMobilePhone=None, customerCivility=None, customerName=None, customerName2=None, customerAdress1=None, customerAdress2=None, customerZipCode=None, customerCity=None, customerCountry=None, customerCountryName=None, customerContactName=None, customerEmail=None, customerPhone=None, customerMobilePhone=None, customerPreAlert=None, recipientCivility=None, recipientName=None, recipientName2=None, recipientAdress1=None, recipientAdress2=None, recipientZipCode=None, recipientCity=None, recipientCountry=None, recipientCountryName=None, recipientContactName=None, recipientEmail=None, recipientPhone=None, recipientMobilePhone=None, recipientPreAlert=None, shipperRef=None, recipientRef=None, customerSkybillNumber=None, evtCode=None, productCode=None, shipDate=None, shipHour=None, weight=None, weightUnit=None, insuredValue=None, insuredCurrency=None, codValue=None, codCurrency=None, customsValue=None, customsCurrency=None, service=None, as_=None, objectType=None, content1=None, content2=None, content3=None, content4=None, content5=None, portValue=None, portCurrency=None, skybillRank=None, bulkNumber=None, mode=None, password=None, modeRetour=None, timeSlotStartDate=None, timeSlotEndDate=None, timeSlotTariffLevel=None, expirationDate=None, sellByDate=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.refEsdClient = refEsdClient
        self.refEsdClient_nsprefix_ = None
        self.retrievalDateTime = retrievalDateTime
        self.retrievalDateTime_nsprefix_ = None
        self.closingDateTime = closingDateTime
        self.closingDateTime_nsprefix_ = None
        self.specificInstructions = specificInstructions
        self.specificInstructions_nsprefix_ = None
        self.height = height
        self.height_nsprefix_ = None
        self.width = width
        self.width_nsprefix_ = None
        self.length = length
        self.length_nsprefix_ = None
        self.shipperCarriesCode = shipperCarriesCode
        self.shipperCarriesCode_nsprefix_ = None
        self.shipperBuildingFloor = shipperBuildingFloor
        self.shipperBuildingFloor_nsprefix_ = None
        self.shipperServiceDirection = shipperServiceDirection
        self.shipperServiceDirection_nsprefix_ = None
        self.nombreDePassageMaximum = nombreDePassageMaximum
        self.nombreDePassageMaximum_nsprefix_ = None
        self.ltAImprimerParChronopost = ltAImprimerParChronopost
        self.ltAImprimerParChronopost_nsprefix_ = None
        self.header_idEmit = header_idEmit
        self.header_idEmit_nsprefix_ = None
        self.accountNumber = accountNumber
        self.accountNumber_nsprefix_ = None
        self.subAccount = subAccount
        self.subAccount_nsprefix_ = None
        self.header_identWebPro = header_identWebPro
        self.header_identWebPro_nsprefix_ = None
        self.shipperCivility = shipperCivility
        self.shipperCivility_nsprefix_ = None
        self.shipperName = shipperName
        self.shipperName_nsprefix_ = None
        self.shipperName2 = shipperName2
        self.shipperName2_nsprefix_ = None
        self.shipperAdress1 = shipperAdress1
        self.shipperAdress1_nsprefix_ = None
        self.shipperAdress2 = shipperAdress2
        self.shipperAdress2_nsprefix_ = None
        self.shipperZipCode = shipperZipCode
        self.shipperZipCode_nsprefix_ = None
        self.shipperCity = shipperCity
        self.shipperCity_nsprefix_ = None
        self.shipperCountry = shipperCountry
        self.shipperCountry_nsprefix_ = None
        self.shipperCountryName = shipperCountryName
        self.shipperCountryName_nsprefix_ = None
        self.shipperContactName = shipperContactName
        self.shipperContactName_nsprefix_ = None
        self.shipperEmail = shipperEmail
        self.shipperEmail_nsprefix_ = None
        self.shipperPhone = shipperPhone
        self.shipperPhone_nsprefix_ = None
        self.shipperMobilePhone = shipperMobilePhone
        self.shipperMobilePhone_nsprefix_ = None
        self.customerCivility = customerCivility
        self.customerCivility_nsprefix_ = None
        self.customerName = customerName
        self.customerName_nsprefix_ = None
        self.customerName2 = customerName2
        self.customerName2_nsprefix_ = None
        self.customerAdress1 = customerAdress1
        self.customerAdress1_nsprefix_ = None
        self.customerAdress2 = customerAdress2
        self.customerAdress2_nsprefix_ = None
        self.customerZipCode = customerZipCode
        self.customerZipCode_nsprefix_ = None
        self.customerCity = customerCity
        self.customerCity_nsprefix_ = None
        self.customerCountry = customerCountry
        self.customerCountry_nsprefix_ = None
        self.customerCountryName = customerCountryName
        self.customerCountryName_nsprefix_ = None
        self.customerContactName = customerContactName
        self.customerContactName_nsprefix_ = None
        self.customerEmail = customerEmail
        self.customerEmail_nsprefix_ = None
        self.customerPhone = customerPhone
        self.customerPhone_nsprefix_ = None
        self.customerMobilePhone = customerMobilePhone
        self.customerMobilePhone_nsprefix_ = None
        self.customerPreAlert = customerPreAlert
        self.customerPreAlert_nsprefix_ = None
        self.recipientCivility = recipientCivility
        self.recipientCivility_nsprefix_ = None
        self.recipientName = recipientName
        self.recipientName_nsprefix_ = None
        self.recipientName2 = recipientName2
        self.recipientName2_nsprefix_ = None
        self.recipientAdress1 = recipientAdress1
        self.recipientAdress1_nsprefix_ = None
        self.recipientAdress2 = recipientAdress2
        self.recipientAdress2_nsprefix_ = None
        self.recipientZipCode = recipientZipCode
        self.recipientZipCode_nsprefix_ = None
        self.recipientCity = recipientCity
        self.recipientCity_nsprefix_ = None
        self.recipientCountry = recipientCountry
        self.recipientCountry_nsprefix_ = None
        self.recipientCountryName = recipientCountryName
        self.recipientCountryName_nsprefix_ = None
        self.recipientContactName = recipientContactName
        self.recipientContactName_nsprefix_ = None
        self.recipientEmail = recipientEmail
        self.recipientEmail_nsprefix_ = None
        self.recipientPhone = recipientPhone
        self.recipientPhone_nsprefix_ = None
        self.recipientMobilePhone = recipientMobilePhone
        self.recipientMobilePhone_nsprefix_ = None
        self.recipientPreAlert = recipientPreAlert
        self.recipientPreAlert_nsprefix_ = None
        self.shipperRef = shipperRef
        self.shipperRef_nsprefix_ = None
        self.recipientRef = recipientRef
        self.recipientRef_nsprefix_ = None
        self.customerSkybillNumber = customerSkybillNumber
        self.customerSkybillNumber_nsprefix_ = None
        self.evtCode = evtCode
        self.evtCode_nsprefix_ = None
        self.productCode = productCode
        self.productCode_nsprefix_ = None
        self.shipDate = shipDate
        self.shipDate_nsprefix_ = None
        self.shipHour = shipHour
        self.shipHour_nsprefix_ = None
        self.weight = weight
        self.weight_nsprefix_ = None
        self.weightUnit = weightUnit
        self.weightUnit_nsprefix_ = None
        self.insuredValue = insuredValue
        self.insuredValue_nsprefix_ = None
        self.insuredCurrency = insuredCurrency
        self.insuredCurrency_nsprefix_ = None
        self.codValue = codValue
        self.codValue_nsprefix_ = None
        self.codCurrency = codCurrency
        self.codCurrency_nsprefix_ = None
        self.customsValue = customsValue
        self.customsValue_nsprefix_ = None
        self.customsCurrency = customsCurrency
        self.customsCurrency_nsprefix_ = None
        self.service = service
        self.service_nsprefix_ = None
        self.as_ = as_
        self.as__nsprefix_ = None
        self.objectType = objectType
        self.objectType_nsprefix_ = None
        self.content1 = content1
        self.content1_nsprefix_ = None
        self.content2 = content2
        self.content2_nsprefix_ = None
        self.content3 = content3
        self.content3_nsprefix_ = None
        self.content4 = content4
        self.content4_nsprefix_ = None
        self.content5 = content5
        self.content5_nsprefix_ = None
        self.portValue = portValue
        self.portValue_nsprefix_ = None
        self.portCurrency = portCurrency
        self.portCurrency_nsprefix_ = None
        self.skybillRank = skybillRank
        self.skybillRank_nsprefix_ = None
        self.bulkNumber = bulkNumber
        self.bulkNumber_nsprefix_ = None
        self.mode = mode
        self.mode_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.timeSlotStartDate = timeSlotStartDate
        self.timeSlotStartDate_nsprefix_ = None
        self.timeSlotEndDate = timeSlotEndDate
        self.timeSlotEndDate_nsprefix_ = None
        self.timeSlotTariffLevel = timeSlotTariffLevel
        self.timeSlotTariffLevel_nsprefix_ = None
        self.expirationDate = expirationDate
        self.expirationDate_nsprefix_ = None
        self.sellByDate = sellByDate
        self.sellByDate_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithReservationAndESDWithRefClientPC)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithReservationAndESDWithRefClientPC.subclass:
            return shippingWithReservationAndESDWithRefClientPC.subclass(*args_, **kwargs_)
        else:
            return shippingWithReservationAndESDWithRefClientPC(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_refEsdClient(self):
        return self.refEsdClient
    def set_refEsdClient(self, refEsdClient):
        self.refEsdClient = refEsdClient
    def get_retrievalDateTime(self):
        return self.retrievalDateTime
    def set_retrievalDateTime(self, retrievalDateTime):
        self.retrievalDateTime = retrievalDateTime
    def get_closingDateTime(self):
        return self.closingDateTime
    def set_closingDateTime(self, closingDateTime):
        self.closingDateTime = closingDateTime
    def get_specificInstructions(self):
        return self.specificInstructions
    def set_specificInstructions(self, specificInstructions):
        self.specificInstructions = specificInstructions
    def get_height(self):
        return self.height
    def set_height(self, height):
        self.height = height
    def get_width(self):
        return self.width
    def set_width(self, width):
        self.width = width
    def get_length(self):
        return self.length
    def set_length(self, length):
        self.length = length
    def get_shipperCarriesCode(self):
        return self.shipperCarriesCode
    def set_shipperCarriesCode(self, shipperCarriesCode):
        self.shipperCarriesCode = shipperCarriesCode
    def get_shipperBuildingFloor(self):
        return self.shipperBuildingFloor
    def set_shipperBuildingFloor(self, shipperBuildingFloor):
        self.shipperBuildingFloor = shipperBuildingFloor
    def get_shipperServiceDirection(self):
        return self.shipperServiceDirection
    def set_shipperServiceDirection(self, shipperServiceDirection):
        self.shipperServiceDirection = shipperServiceDirection
    def get_nombreDePassageMaximum(self):
        return self.nombreDePassageMaximum
    def set_nombreDePassageMaximum(self, nombreDePassageMaximum):
        self.nombreDePassageMaximum = nombreDePassageMaximum
    def get_ltAImprimerParChronopost(self):
        return self.ltAImprimerParChronopost
    def set_ltAImprimerParChronopost(self, ltAImprimerParChronopost):
        self.ltAImprimerParChronopost = ltAImprimerParChronopost
    def get_header_idEmit(self):
        return self.header_idEmit
    def set_header_idEmit(self, header_idEmit):
        self.header_idEmit = header_idEmit
    def get_accountNumber(self):
        return self.accountNumber
    def set_accountNumber(self, accountNumber):
        self.accountNumber = accountNumber
    def get_subAccount(self):
        return self.subAccount
    def set_subAccount(self, subAccount):
        self.subAccount = subAccount
    def get_header_identWebPro(self):
        return self.header_identWebPro
    def set_header_identWebPro(self, header_identWebPro):
        self.header_identWebPro = header_identWebPro
    def get_shipperCivility(self):
        return self.shipperCivility
    def set_shipperCivility(self, shipperCivility):
        self.shipperCivility = shipperCivility
    def get_shipperName(self):
        return self.shipperName
    def set_shipperName(self, shipperName):
        self.shipperName = shipperName
    def get_shipperName2(self):
        return self.shipperName2
    def set_shipperName2(self, shipperName2):
        self.shipperName2 = shipperName2
    def get_shipperAdress1(self):
        return self.shipperAdress1
    def set_shipperAdress1(self, shipperAdress1):
        self.shipperAdress1 = shipperAdress1
    def get_shipperAdress2(self):
        return self.shipperAdress2
    def set_shipperAdress2(self, shipperAdress2):
        self.shipperAdress2 = shipperAdress2
    def get_shipperZipCode(self):
        return self.shipperZipCode
    def set_shipperZipCode(self, shipperZipCode):
        self.shipperZipCode = shipperZipCode
    def get_shipperCity(self):
        return self.shipperCity
    def set_shipperCity(self, shipperCity):
        self.shipperCity = shipperCity
    def get_shipperCountry(self):
        return self.shipperCountry
    def set_shipperCountry(self, shipperCountry):
        self.shipperCountry = shipperCountry
    def get_shipperCountryName(self):
        return self.shipperCountryName
    def set_shipperCountryName(self, shipperCountryName):
        self.shipperCountryName = shipperCountryName
    def get_shipperContactName(self):
        return self.shipperContactName
    def set_shipperContactName(self, shipperContactName):
        self.shipperContactName = shipperContactName
    def get_shipperEmail(self):
        return self.shipperEmail
    def set_shipperEmail(self, shipperEmail):
        self.shipperEmail = shipperEmail
    def get_shipperPhone(self):
        return self.shipperPhone
    def set_shipperPhone(self, shipperPhone):
        self.shipperPhone = shipperPhone
    def get_shipperMobilePhone(self):
        return self.shipperMobilePhone
    def set_shipperMobilePhone(self, shipperMobilePhone):
        self.shipperMobilePhone = shipperMobilePhone
    def get_customerCivility(self):
        return self.customerCivility
    def set_customerCivility(self, customerCivility):
        self.customerCivility = customerCivility
    def get_customerName(self):
        return self.customerName
    def set_customerName(self, customerName):
        self.customerName = customerName
    def get_customerName2(self):
        return self.customerName2
    def set_customerName2(self, customerName2):
        self.customerName2 = customerName2
    def get_customerAdress1(self):
        return self.customerAdress1
    def set_customerAdress1(self, customerAdress1):
        self.customerAdress1 = customerAdress1
    def get_customerAdress2(self):
        return self.customerAdress2
    def set_customerAdress2(self, customerAdress2):
        self.customerAdress2 = customerAdress2
    def get_customerZipCode(self):
        return self.customerZipCode
    def set_customerZipCode(self, customerZipCode):
        self.customerZipCode = customerZipCode
    def get_customerCity(self):
        return self.customerCity
    def set_customerCity(self, customerCity):
        self.customerCity = customerCity
    def get_customerCountry(self):
        return self.customerCountry
    def set_customerCountry(self, customerCountry):
        self.customerCountry = customerCountry
    def get_customerCountryName(self):
        return self.customerCountryName
    def set_customerCountryName(self, customerCountryName):
        self.customerCountryName = customerCountryName
    def get_customerContactName(self):
        return self.customerContactName
    def set_customerContactName(self, customerContactName):
        self.customerContactName = customerContactName
    def get_customerEmail(self):
        return self.customerEmail
    def set_customerEmail(self, customerEmail):
        self.customerEmail = customerEmail
    def get_customerPhone(self):
        return self.customerPhone
    def set_customerPhone(self, customerPhone):
        self.customerPhone = customerPhone
    def get_customerMobilePhone(self):
        return self.customerMobilePhone
    def set_customerMobilePhone(self, customerMobilePhone):
        self.customerMobilePhone = customerMobilePhone
    def get_customerPreAlert(self):
        return self.customerPreAlert
    def set_customerPreAlert(self, customerPreAlert):
        self.customerPreAlert = customerPreAlert
    def get_recipientCivility(self):
        return self.recipientCivility
    def set_recipientCivility(self, recipientCivility):
        self.recipientCivility = recipientCivility
    def get_recipientName(self):
        return self.recipientName
    def set_recipientName(self, recipientName):
        self.recipientName = recipientName
    def get_recipientName2(self):
        return self.recipientName2
    def set_recipientName2(self, recipientName2):
        self.recipientName2 = recipientName2
    def get_recipientAdress1(self):
        return self.recipientAdress1
    def set_recipientAdress1(self, recipientAdress1):
        self.recipientAdress1 = recipientAdress1
    def get_recipientAdress2(self):
        return self.recipientAdress2
    def set_recipientAdress2(self, recipientAdress2):
        self.recipientAdress2 = recipientAdress2
    def get_recipientZipCode(self):
        return self.recipientZipCode
    def set_recipientZipCode(self, recipientZipCode):
        self.recipientZipCode = recipientZipCode
    def get_recipientCity(self):
        return self.recipientCity
    def set_recipientCity(self, recipientCity):
        self.recipientCity = recipientCity
    def get_recipientCountry(self):
        return self.recipientCountry
    def set_recipientCountry(self, recipientCountry):
        self.recipientCountry = recipientCountry
    def get_recipientCountryName(self):
        return self.recipientCountryName
    def set_recipientCountryName(self, recipientCountryName):
        self.recipientCountryName = recipientCountryName
    def get_recipientContactName(self):
        return self.recipientContactName
    def set_recipientContactName(self, recipientContactName):
        self.recipientContactName = recipientContactName
    def get_recipientEmail(self):
        return self.recipientEmail
    def set_recipientEmail(self, recipientEmail):
        self.recipientEmail = recipientEmail
    def get_recipientPhone(self):
        return self.recipientPhone
    def set_recipientPhone(self, recipientPhone):
        self.recipientPhone = recipientPhone
    def get_recipientMobilePhone(self):
        return self.recipientMobilePhone
    def set_recipientMobilePhone(self, recipientMobilePhone):
        self.recipientMobilePhone = recipientMobilePhone
    def get_recipientPreAlert(self):
        return self.recipientPreAlert
    def set_recipientPreAlert(self, recipientPreAlert):
        self.recipientPreAlert = recipientPreAlert
    def get_shipperRef(self):
        return self.shipperRef
    def set_shipperRef(self, shipperRef):
        self.shipperRef = shipperRef
    def get_recipientRef(self):
        return self.recipientRef
    def set_recipientRef(self, recipientRef):
        self.recipientRef = recipientRef
    def get_customerSkybillNumber(self):
        return self.customerSkybillNumber
    def set_customerSkybillNumber(self, customerSkybillNumber):
        self.customerSkybillNumber = customerSkybillNumber
    def get_evtCode(self):
        return self.evtCode
    def set_evtCode(self, evtCode):
        self.evtCode = evtCode
    def get_productCode(self):
        return self.productCode
    def set_productCode(self, productCode):
        self.productCode = productCode
    def get_shipDate(self):
        return self.shipDate
    def set_shipDate(self, shipDate):
        self.shipDate = shipDate
    def get_shipHour(self):
        return self.shipHour
    def set_shipHour(self, shipHour):
        self.shipHour = shipHour
    def get_weight(self):
        return self.weight
    def set_weight(self, weight):
        self.weight = weight
    def get_weightUnit(self):
        return self.weightUnit
    def set_weightUnit(self, weightUnit):
        self.weightUnit = weightUnit
    def get_insuredValue(self):
        return self.insuredValue
    def set_insuredValue(self, insuredValue):
        self.insuredValue = insuredValue
    def get_insuredCurrency(self):
        return self.insuredCurrency
    def set_insuredCurrency(self, insuredCurrency):
        self.insuredCurrency = insuredCurrency
    def get_codValue(self):
        return self.codValue
    def set_codValue(self, codValue):
        self.codValue = codValue
    def get_codCurrency(self):
        return self.codCurrency
    def set_codCurrency(self, codCurrency):
        self.codCurrency = codCurrency
    def get_customsValue(self):
        return self.customsValue
    def set_customsValue(self, customsValue):
        self.customsValue = customsValue
    def get_customsCurrency(self):
        return self.customsCurrency
    def set_customsCurrency(self, customsCurrency):
        self.customsCurrency = customsCurrency
    def get_service(self):
        return self.service
    def set_service(self, service):
        self.service = service
    def get_as(self):
        return self.as_
    def set_as(self, as_):
        self.as_ = as_
    def get_objectType(self):
        return self.objectType
    def set_objectType(self, objectType):
        self.objectType = objectType
    def get_content1(self):
        return self.content1
    def set_content1(self, content1):
        self.content1 = content1
    def get_content2(self):
        return self.content2
    def set_content2(self, content2):
        self.content2 = content2
    def get_content3(self):
        return self.content3
    def set_content3(self, content3):
        self.content3 = content3
    def get_content4(self):
        return self.content4
    def set_content4(self, content4):
        self.content4 = content4
    def get_content5(self):
        return self.content5
    def set_content5(self, content5):
        self.content5 = content5
    def get_portValue(self):
        return self.portValue
    def set_portValue(self, portValue):
        self.portValue = portValue
    def get_portCurrency(self):
        return self.portCurrency
    def set_portCurrency(self, portCurrency):
        self.portCurrency = portCurrency
    def get_skybillRank(self):
        return self.skybillRank
    def set_skybillRank(self, skybillRank):
        self.skybillRank = skybillRank
    def get_bulkNumber(self):
        return self.bulkNumber
    def set_bulkNumber(self, bulkNumber):
        self.bulkNumber = bulkNumber
    def get_mode(self):
        return self.mode
    def set_mode(self, mode):
        self.mode = mode
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_timeSlotStartDate(self):
        return self.timeSlotStartDate
    def set_timeSlotStartDate(self, timeSlotStartDate):
        self.timeSlotStartDate = timeSlotStartDate
    def get_timeSlotEndDate(self):
        return self.timeSlotEndDate
    def set_timeSlotEndDate(self, timeSlotEndDate):
        self.timeSlotEndDate = timeSlotEndDate
    def get_timeSlotTariffLevel(self):
        return self.timeSlotTariffLevel
    def set_timeSlotTariffLevel(self, timeSlotTariffLevel):
        self.timeSlotTariffLevel = timeSlotTariffLevel
    def get_expirationDate(self):
        return self.expirationDate
    def set_expirationDate(self, expirationDate):
        self.expirationDate = expirationDate
    def get_sellByDate(self):
        return self.sellByDate
    def set_sellByDate(self, sellByDate):
        self.sellByDate = sellByDate
    def _hasContent(self):
        if (
            self.refEsdClient is not None or
            self.retrievalDateTime is not None or
            self.closingDateTime is not None or
            self.specificInstructions is not None or
            self.height is not None or
            self.width is not None or
            self.length is not None or
            self.shipperCarriesCode is not None or
            self.shipperBuildingFloor is not None or
            self.shipperServiceDirection is not None or
            self.nombreDePassageMaximum is not None or
            self.ltAImprimerParChronopost is not None or
            self.header_idEmit is not None or
            self.accountNumber is not None or
            self.subAccount is not None or
            self.header_identWebPro is not None or
            self.shipperCivility is not None or
            self.shipperName is not None or
            self.shipperName2 is not None or
            self.shipperAdress1 is not None or
            self.shipperAdress2 is not None or
            self.shipperZipCode is not None or
            self.shipperCity is not None or
            self.shipperCountry is not None or
            self.shipperCountryName is not None or
            self.shipperContactName is not None or
            self.shipperEmail is not None or
            self.shipperPhone is not None or
            self.shipperMobilePhone is not None or
            self.customerCivility is not None or
            self.customerName is not None or
            self.customerName2 is not None or
            self.customerAdress1 is not None or
            self.customerAdress2 is not None or
            self.customerZipCode is not None or
            self.customerCity is not None or
            self.customerCountry is not None or
            self.customerCountryName is not None or
            self.customerContactName is not None or
            self.customerEmail is not None or
            self.customerPhone is not None or
            self.customerMobilePhone is not None or
            self.customerPreAlert is not None or
            self.recipientCivility is not None or
            self.recipientName is not None or
            self.recipientName2 is not None or
            self.recipientAdress1 is not None or
            self.recipientAdress2 is not None or
            self.recipientZipCode is not None or
            self.recipientCity is not None or
            self.recipientCountry is not None or
            self.recipientCountryName is not None or
            self.recipientContactName is not None or
            self.recipientEmail is not None or
            self.recipientPhone is not None or
            self.recipientMobilePhone is not None or
            self.recipientPreAlert is not None or
            self.shipperRef is not None or
            self.recipientRef is not None or
            self.customerSkybillNumber is not None or
            self.evtCode is not None or
            self.productCode is not None or
            self.shipDate is not None or
            self.shipHour is not None or
            self.weight is not None or
            self.weightUnit is not None or
            self.insuredValue is not None or
            self.insuredCurrency is not None or
            self.codValue is not None or
            self.codCurrency is not None or
            self.customsValue is not None or
            self.customsCurrency is not None or
            self.service is not None or
            self.as_ is not None or
            self.objectType is not None or
            self.content1 is not None or
            self.content2 is not None or
            self.content3 is not None or
            self.content4 is not None or
            self.content5 is not None or
            self.portValue is not None or
            self.portCurrency is not None or
            self.skybillRank is not None or
            self.bulkNumber is not None or
            self.mode is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.timeSlotStartDate is not None or
            self.timeSlotEndDate is not None or
            self.timeSlotTariffLevel is not None or
            self.expirationDate is not None or
            self.sellByDate is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationAndESDWithRefClientPC', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithReservationAndESDWithRefClientPC')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithReservationAndESDWithRefClientPC':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithReservationAndESDWithRefClientPC')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithReservationAndESDWithRefClientPC', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithReservationAndESDWithRefClientPC'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationAndESDWithRefClientPC', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.refEsdClient is not None:
            namespaceprefix_ = self.refEsdClient_nsprefix_ + ':' if (UseCapturedNS_ and self.refEsdClient_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srefEsdClient>%s</%srefEsdClient>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.refEsdClient), input_name='refEsdClient')), namespaceprefix_ , eol_))
        if self.retrievalDateTime is not None:
            namespaceprefix_ = self.retrievalDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.retrievalDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sretrievalDateTime>%s</%sretrievalDateTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.retrievalDateTime), input_name='retrievalDateTime')), namespaceprefix_ , eol_))
        if self.closingDateTime is not None:
            namespaceprefix_ = self.closingDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.closingDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclosingDateTime>%s</%sclosingDateTime>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.closingDateTime), input_name='closingDateTime')), namespaceprefix_ , eol_))
        if self.specificInstructions is not None:
            namespaceprefix_ = self.specificInstructions_nsprefix_ + ':' if (UseCapturedNS_ and self.specificInstructions_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sspecificInstructions>%s</%sspecificInstructions>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.specificInstructions), input_name='specificInstructions')), namespaceprefix_ , eol_))
        if self.height is not None:
            namespaceprefix_ = self.height_nsprefix_ + ':' if (UseCapturedNS_ and self.height_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sheight>%s</%sheight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.height), input_name='height')), namespaceprefix_ , eol_))
        if self.width is not None:
            namespaceprefix_ = self.width_nsprefix_ + ':' if (UseCapturedNS_ and self.width_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%swidth>%s</%swidth>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.width), input_name='width')), namespaceprefix_ , eol_))
        if self.length is not None:
            namespaceprefix_ = self.length_nsprefix_ + ':' if (UseCapturedNS_ and self.length_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slength>%s</%slength>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.length), input_name='length')), namespaceprefix_ , eol_))
        if self.shipperCarriesCode is not None:
            namespaceprefix_ = self.shipperCarriesCode_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCarriesCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCarriesCode>%s</%sshipperCarriesCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCarriesCode), input_name='shipperCarriesCode')), namespaceprefix_ , eol_))
        if self.shipperBuildingFloor is not None:
            namespaceprefix_ = self.shipperBuildingFloor_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperBuildingFloor_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperBuildingFloor>%s</%sshipperBuildingFloor>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperBuildingFloor), input_name='shipperBuildingFloor')), namespaceprefix_ , eol_))
        if self.shipperServiceDirection is not None:
            namespaceprefix_ = self.shipperServiceDirection_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperServiceDirection_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperServiceDirection>%s</%sshipperServiceDirection>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperServiceDirection), input_name='shipperServiceDirection')), namespaceprefix_ , eol_))
        if self.nombreDePassageMaximum is not None:
            namespaceprefix_ = self.nombreDePassageMaximum_nsprefix_ + ':' if (UseCapturedNS_ and self.nombreDePassageMaximum_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snombreDePassageMaximum>%s</%snombreDePassageMaximum>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.nombreDePassageMaximum), input_name='nombreDePassageMaximum')), namespaceprefix_ , eol_))
        if self.ltAImprimerParChronopost is not None:
            namespaceprefix_ = self.ltAImprimerParChronopost_nsprefix_ + ':' if (UseCapturedNS_ and self.ltAImprimerParChronopost_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sltAImprimerParChronopost>%s</%sltAImprimerParChronopost>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ltAImprimerParChronopost), input_name='ltAImprimerParChronopost')), namespaceprefix_ , eol_))
        if self.header_idEmit is not None:
            namespaceprefix_ = self.header_idEmit_nsprefix_ + ':' if (UseCapturedNS_ and self.header_idEmit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sheader_idEmit>%s</%sheader_idEmit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.header_idEmit), input_name='header_idEmit')), namespaceprefix_ , eol_))
        if self.accountNumber is not None:
            namespaceprefix_ = self.accountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.accountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccountNumber>%s</%saccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.accountNumber), input_name='accountNumber')), namespaceprefix_ , eol_))
        if self.subAccount is not None:
            namespaceprefix_ = self.subAccount_nsprefix_ + ':' if (UseCapturedNS_ and self.subAccount_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssubAccount>%s</%ssubAccount>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.subAccount), input_name='subAccount')), namespaceprefix_ , eol_))
        if self.header_identWebPro is not None:
            namespaceprefix_ = self.header_identWebPro_nsprefix_ + ':' if (UseCapturedNS_ and self.header_identWebPro_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sheader_identWebPro>%s</%sheader_identWebPro>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.header_identWebPro), input_name='header_identWebPro')), namespaceprefix_ , eol_))
        if self.shipperCivility is not None:
            namespaceprefix_ = self.shipperCivility_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCivility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCivility>%s</%sshipperCivility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCivility), input_name='shipperCivility')), namespaceprefix_ , eol_))
        if self.shipperName is not None:
            namespaceprefix_ = self.shipperName_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperName>%s</%sshipperName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperName), input_name='shipperName')), namespaceprefix_ , eol_))
        if self.shipperName2 is not None:
            namespaceprefix_ = self.shipperName2_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperName2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperName2>%s</%sshipperName2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperName2), input_name='shipperName2')), namespaceprefix_ , eol_))
        if self.shipperAdress1 is not None:
            namespaceprefix_ = self.shipperAdress1_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperAdress1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperAdress1>%s</%sshipperAdress1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperAdress1), input_name='shipperAdress1')), namespaceprefix_ , eol_))
        if self.shipperAdress2 is not None:
            namespaceprefix_ = self.shipperAdress2_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperAdress2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperAdress2>%s</%sshipperAdress2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperAdress2), input_name='shipperAdress2')), namespaceprefix_ , eol_))
        if self.shipperZipCode is not None:
            namespaceprefix_ = self.shipperZipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperZipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperZipCode>%s</%sshipperZipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperZipCode), input_name='shipperZipCode')), namespaceprefix_ , eol_))
        if self.shipperCity is not None:
            namespaceprefix_ = self.shipperCity_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCity>%s</%sshipperCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCity), input_name='shipperCity')), namespaceprefix_ , eol_))
        if self.shipperCountry is not None:
            namespaceprefix_ = self.shipperCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCountry>%s</%sshipperCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCountry), input_name='shipperCountry')), namespaceprefix_ , eol_))
        if self.shipperCountryName is not None:
            namespaceprefix_ = self.shipperCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperCountryName>%s</%sshipperCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperCountryName), input_name='shipperCountryName')), namespaceprefix_ , eol_))
        if self.shipperContactName is not None:
            namespaceprefix_ = self.shipperContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperContactName>%s</%sshipperContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperContactName), input_name='shipperContactName')), namespaceprefix_ , eol_))
        if self.shipperEmail is not None:
            namespaceprefix_ = self.shipperEmail_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperEmail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperEmail>%s</%sshipperEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperEmail), input_name='shipperEmail')), namespaceprefix_ , eol_))
        if self.shipperPhone is not None:
            namespaceprefix_ = self.shipperPhone_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperPhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperPhone>%s</%sshipperPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperPhone), input_name='shipperPhone')), namespaceprefix_ , eol_))
        if self.shipperMobilePhone is not None:
            namespaceprefix_ = self.shipperMobilePhone_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperMobilePhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperMobilePhone>%s</%sshipperMobilePhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperMobilePhone), input_name='shipperMobilePhone')), namespaceprefix_ , eol_))
        if self.customerCivility is not None:
            namespaceprefix_ = self.customerCivility_nsprefix_ + ':' if (UseCapturedNS_ and self.customerCivility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerCivility>%s</%scustomerCivility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerCivility), input_name='customerCivility')), namespaceprefix_ , eol_))
        if self.customerName is not None:
            namespaceprefix_ = self.customerName_nsprefix_ + ':' if (UseCapturedNS_ and self.customerName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerName>%s</%scustomerName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerName), input_name='customerName')), namespaceprefix_ , eol_))
        if self.customerName2 is not None:
            namespaceprefix_ = self.customerName2_nsprefix_ + ':' if (UseCapturedNS_ and self.customerName2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerName2>%s</%scustomerName2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerName2), input_name='customerName2')), namespaceprefix_ , eol_))
        if self.customerAdress1 is not None:
            namespaceprefix_ = self.customerAdress1_nsprefix_ + ':' if (UseCapturedNS_ and self.customerAdress1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerAdress1>%s</%scustomerAdress1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerAdress1), input_name='customerAdress1')), namespaceprefix_ , eol_))
        if self.customerAdress2 is not None:
            namespaceprefix_ = self.customerAdress2_nsprefix_ + ':' if (UseCapturedNS_ and self.customerAdress2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerAdress2>%s</%scustomerAdress2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerAdress2), input_name='customerAdress2')), namespaceprefix_ , eol_))
        if self.customerZipCode is not None:
            namespaceprefix_ = self.customerZipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.customerZipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerZipCode>%s</%scustomerZipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerZipCode), input_name='customerZipCode')), namespaceprefix_ , eol_))
        if self.customerCity is not None:
            namespaceprefix_ = self.customerCity_nsprefix_ + ':' if (UseCapturedNS_ and self.customerCity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerCity>%s</%scustomerCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerCity), input_name='customerCity')), namespaceprefix_ , eol_))
        if self.customerCountry is not None:
            namespaceprefix_ = self.customerCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.customerCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerCountry>%s</%scustomerCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerCountry), input_name='customerCountry')), namespaceprefix_ , eol_))
        if self.customerCountryName is not None:
            namespaceprefix_ = self.customerCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.customerCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerCountryName>%s</%scustomerCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerCountryName), input_name='customerCountryName')), namespaceprefix_ , eol_))
        if self.customerContactName is not None:
            namespaceprefix_ = self.customerContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.customerContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerContactName>%s</%scustomerContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerContactName), input_name='customerContactName')), namespaceprefix_ , eol_))
        if self.customerEmail is not None:
            namespaceprefix_ = self.customerEmail_nsprefix_ + ':' if (UseCapturedNS_ and self.customerEmail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerEmail>%s</%scustomerEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerEmail), input_name='customerEmail')), namespaceprefix_ , eol_))
        if self.customerPhone is not None:
            namespaceprefix_ = self.customerPhone_nsprefix_ + ':' if (UseCapturedNS_ and self.customerPhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerPhone>%s</%scustomerPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerPhone), input_name='customerPhone')), namespaceprefix_ , eol_))
        if self.customerMobilePhone is not None:
            namespaceprefix_ = self.customerMobilePhone_nsprefix_ + ':' if (UseCapturedNS_ and self.customerMobilePhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerMobilePhone>%s</%scustomerMobilePhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerMobilePhone), input_name='customerMobilePhone')), namespaceprefix_ , eol_))
        if self.customerPreAlert is not None:
            namespaceprefix_ = self.customerPreAlert_nsprefix_ + ':' if (UseCapturedNS_ and self.customerPreAlert_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerPreAlert>%s</%scustomerPreAlert>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerPreAlert), input_name='customerPreAlert')), namespaceprefix_ , eol_))
        if self.recipientCivility is not None:
            namespaceprefix_ = self.recipientCivility_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientCivility_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientCivility>%s</%srecipientCivility>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientCivility), input_name='recipientCivility')), namespaceprefix_ , eol_))
        if self.recipientName is not None:
            namespaceprefix_ = self.recipientName_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientName>%s</%srecipientName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientName), input_name='recipientName')), namespaceprefix_ , eol_))
        if self.recipientName2 is not None:
            namespaceprefix_ = self.recipientName2_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientName2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientName2>%s</%srecipientName2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientName2), input_name='recipientName2')), namespaceprefix_ , eol_))
        if self.recipientAdress1 is not None:
            namespaceprefix_ = self.recipientAdress1_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientAdress1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientAdress1>%s</%srecipientAdress1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientAdress1), input_name='recipientAdress1')), namespaceprefix_ , eol_))
        if self.recipientAdress2 is not None:
            namespaceprefix_ = self.recipientAdress2_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientAdress2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientAdress2>%s</%srecipientAdress2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientAdress2), input_name='recipientAdress2')), namespaceprefix_ , eol_))
        if self.recipientZipCode is not None:
            namespaceprefix_ = self.recipientZipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientZipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientZipCode>%s</%srecipientZipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientZipCode), input_name='recipientZipCode')), namespaceprefix_ , eol_))
        if self.recipientCity is not None:
            namespaceprefix_ = self.recipientCity_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientCity_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientCity>%s</%srecipientCity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientCity), input_name='recipientCity')), namespaceprefix_ , eol_))
        if self.recipientCountry is not None:
            namespaceprefix_ = self.recipientCountry_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientCountry_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientCountry>%s</%srecipientCountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientCountry), input_name='recipientCountry')), namespaceprefix_ , eol_))
        if self.recipientCountryName is not None:
            namespaceprefix_ = self.recipientCountryName_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientCountryName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientCountryName>%s</%srecipientCountryName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientCountryName), input_name='recipientCountryName')), namespaceprefix_ , eol_))
        if self.recipientContactName is not None:
            namespaceprefix_ = self.recipientContactName_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientContactName_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientContactName>%s</%srecipientContactName>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientContactName), input_name='recipientContactName')), namespaceprefix_ , eol_))
        if self.recipientEmail is not None:
            namespaceprefix_ = self.recipientEmail_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientEmail_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientEmail>%s</%srecipientEmail>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientEmail), input_name='recipientEmail')), namespaceprefix_ , eol_))
        if self.recipientPhone is not None:
            namespaceprefix_ = self.recipientPhone_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientPhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientPhone>%s</%srecipientPhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientPhone), input_name='recipientPhone')), namespaceprefix_ , eol_))
        if self.recipientMobilePhone is not None:
            namespaceprefix_ = self.recipientMobilePhone_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientMobilePhone_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientMobilePhone>%s</%srecipientMobilePhone>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientMobilePhone), input_name='recipientMobilePhone')), namespaceprefix_ , eol_))
        if self.recipientPreAlert is not None:
            namespaceprefix_ = self.recipientPreAlert_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientPreAlert_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientPreAlert>%s</%srecipientPreAlert>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientPreAlert), input_name='recipientPreAlert')), namespaceprefix_ , eol_))
        if self.shipperRef is not None:
            namespaceprefix_ = self.shipperRef_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperRef>%s</%sshipperRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperRef), input_name='shipperRef')), namespaceprefix_ , eol_))
        if self.recipientRef is not None:
            namespaceprefix_ = self.recipientRef_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientRef_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srecipientRef>%s</%srecipientRef>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.recipientRef), input_name='recipientRef')), namespaceprefix_ , eol_))
        if self.customerSkybillNumber is not None:
            namespaceprefix_ = self.customerSkybillNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.customerSkybillNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomerSkybillNumber>%s</%scustomerSkybillNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customerSkybillNumber), input_name='customerSkybillNumber')), namespaceprefix_ , eol_))
        if self.evtCode is not None:
            namespaceprefix_ = self.evtCode_nsprefix_ + ':' if (UseCapturedNS_ and self.evtCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sevtCode>%s</%sevtCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.evtCode), input_name='evtCode')), namespaceprefix_ , eol_))
        if self.productCode is not None:
            namespaceprefix_ = self.productCode_nsprefix_ + ':' if (UseCapturedNS_ and self.productCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sproductCode>%s</%sproductCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.productCode), input_name='productCode')), namespaceprefix_ , eol_))
        if self.shipDate is not None:
            namespaceprefix_ = self.shipDate_nsprefix_ + ':' if (UseCapturedNS_ and self.shipDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipDate>%s</%sshipDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipDate), input_name='shipDate')), namespaceprefix_ , eol_))
        if self.shipHour is not None:
            namespaceprefix_ = self.shipHour_nsprefix_ + ':' if (UseCapturedNS_ and self.shipHour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipHour>%s</%sshipHour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipHour), input_name='shipHour')), namespaceprefix_ , eol_))
        if self.weight is not None:
            namespaceprefix_ = self.weight_nsprefix_ + ':' if (UseCapturedNS_ and self.weight_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweight>%s</%sweight>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.weight), input_name='weight')), namespaceprefix_ , eol_))
        if self.weightUnit is not None:
            namespaceprefix_ = self.weightUnit_nsprefix_ + ':' if (UseCapturedNS_ and self.weightUnit_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sweightUnit>%s</%sweightUnit>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.weightUnit), input_name='weightUnit')), namespaceprefix_ , eol_))
        if self.insuredValue is not None:
            namespaceprefix_ = self.insuredValue_nsprefix_ + ':' if (UseCapturedNS_ and self.insuredValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuredValue>%s</%sinsuredValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.insuredValue), input_name='insuredValue')), namespaceprefix_ , eol_))
        if self.insuredCurrency is not None:
            namespaceprefix_ = self.insuredCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.insuredCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sinsuredCurrency>%s</%sinsuredCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.insuredCurrency), input_name='insuredCurrency')), namespaceprefix_ , eol_))
        if self.codValue is not None:
            namespaceprefix_ = self.codValue_nsprefix_ + ':' if (UseCapturedNS_ and self.codValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodValue>%s</%scodValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codValue), input_name='codValue')), namespaceprefix_ , eol_))
        if self.codCurrency is not None:
            namespaceprefix_ = self.codCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.codCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scodCurrency>%s</%scodCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.codCurrency), input_name='codCurrency')), namespaceprefix_ , eol_))
        if self.customsValue is not None:
            namespaceprefix_ = self.customsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customsValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsValue>%s</%scustomsValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customsValue), input_name='customsValue')), namespaceprefix_ , eol_))
        if self.customsCurrency is not None:
            namespaceprefix_ = self.customsCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.customsCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scustomsCurrency>%s</%scustomsCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.customsCurrency), input_name='customsCurrency')), namespaceprefix_ , eol_))
        if self.service is not None:
            namespaceprefix_ = self.service_nsprefix_ + ':' if (UseCapturedNS_ and self.service_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sservice>%s</%sservice>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.service), input_name='service')), namespaceprefix_ , eol_))
        if self.as_ is not None:
            namespaceprefix_ = self.as__nsprefix_ + ':' if (UseCapturedNS_ and self.as__nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sas>%s</%sas>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.as_), input_name='as')), namespaceprefix_ , eol_))
        if self.objectType is not None:
            namespaceprefix_ = self.objectType_nsprefix_ + ':' if (UseCapturedNS_ and self.objectType_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sobjectType>%s</%sobjectType>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.objectType), input_name='objectType')), namespaceprefix_ , eol_))
        if self.content1 is not None:
            namespaceprefix_ = self.content1_nsprefix_ + ':' if (UseCapturedNS_ and self.content1_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent1>%s</%scontent1>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content1), input_name='content1')), namespaceprefix_ , eol_))
        if self.content2 is not None:
            namespaceprefix_ = self.content2_nsprefix_ + ':' if (UseCapturedNS_ and self.content2_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent2>%s</%scontent2>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content2), input_name='content2')), namespaceprefix_ , eol_))
        if self.content3 is not None:
            namespaceprefix_ = self.content3_nsprefix_ + ':' if (UseCapturedNS_ and self.content3_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent3>%s</%scontent3>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content3), input_name='content3')), namespaceprefix_ , eol_))
        if self.content4 is not None:
            namespaceprefix_ = self.content4_nsprefix_ + ':' if (UseCapturedNS_ and self.content4_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent4>%s</%scontent4>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content4), input_name='content4')), namespaceprefix_ , eol_))
        if self.content5 is not None:
            namespaceprefix_ = self.content5_nsprefix_ + ':' if (UseCapturedNS_ and self.content5_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent5>%s</%scontent5>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.content5), input_name='content5')), namespaceprefix_ , eol_))
        if self.portValue is not None:
            namespaceprefix_ = self.portValue_nsprefix_ + ':' if (UseCapturedNS_ and self.portValue_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sportValue>%s</%sportValue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.portValue), input_name='portValue')), namespaceprefix_ , eol_))
        if self.portCurrency is not None:
            namespaceprefix_ = self.portCurrency_nsprefix_ + ':' if (UseCapturedNS_ and self.portCurrency_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sportCurrency>%s</%sportCurrency>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.portCurrency), input_name='portCurrency')), namespaceprefix_ , eol_))
        if self.skybillRank is not None:
            namespaceprefix_ = self.skybillRank_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillRank_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sskybillRank>%s</%sskybillRank>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.skybillRank), input_name='skybillRank')), namespaceprefix_ , eol_))
        if self.bulkNumber is not None:
            namespaceprefix_ = self.bulkNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.bulkNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sbulkNumber>%s</%sbulkNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.bulkNumber), input_name='bulkNumber')), namespaceprefix_ , eol_))
        if self.mode is not None:
            namespaceprefix_ = self.mode_nsprefix_ + ':' if (UseCapturedNS_ and self.mode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smode>%s</%smode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mode), input_name='mode')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.timeSlotStartDate is not None:
            namespaceprefix_ = self.timeSlotStartDate_nsprefix_ + ':' if (UseCapturedNS_ and self.timeSlotStartDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stimeSlotStartDate>%s</%stimeSlotStartDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.timeSlotStartDate), input_name='timeSlotStartDate')), namespaceprefix_ , eol_))
        if self.timeSlotEndDate is not None:
            namespaceprefix_ = self.timeSlotEndDate_nsprefix_ + ':' if (UseCapturedNS_ and self.timeSlotEndDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stimeSlotEndDate>%s</%stimeSlotEndDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.timeSlotEndDate), input_name='timeSlotEndDate')), namespaceprefix_ , eol_))
        if self.timeSlotTariffLevel is not None:
            namespaceprefix_ = self.timeSlotTariffLevel_nsprefix_ + ':' if (UseCapturedNS_ and self.timeSlotTariffLevel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stimeSlotTariffLevel>%s</%stimeSlotTariffLevel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.timeSlotTariffLevel), input_name='timeSlotTariffLevel')), namespaceprefix_ , eol_))
        if self.expirationDate is not None:
            namespaceprefix_ = self.expirationDate_nsprefix_ + ':' if (UseCapturedNS_ and self.expirationDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sexpirationDate>%s</%sexpirationDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.expirationDate), input_name='expirationDate')), namespaceprefix_ , eol_))
        if self.sellByDate is not None:
            namespaceprefix_ = self.sellByDate_nsprefix_ + ':' if (UseCapturedNS_ and self.sellByDate_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssellByDate>%s</%ssellByDate>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.sellByDate), input_name='sellByDate')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'refEsdClient':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'refEsdClient')
            value_ = self.gds_validate_string(value_, node, 'refEsdClient')
            self.refEsdClient = value_
            self.refEsdClient_nsprefix_ = child_.prefix
        elif nodeName_ == 'retrievalDateTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'retrievalDateTime')
            value_ = self.gds_validate_string(value_, node, 'retrievalDateTime')
            self.retrievalDateTime = value_
            self.retrievalDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'closingDateTime':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'closingDateTime')
            value_ = self.gds_validate_string(value_, node, 'closingDateTime')
            self.closingDateTime = value_
            self.closingDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'specificInstructions':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'specificInstructions')
            value_ = self.gds_validate_string(value_, node, 'specificInstructions')
            self.specificInstructions = value_
            self.specificInstructions_nsprefix_ = child_.prefix
        elif nodeName_ == 'height':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'height')
            value_ = self.gds_validate_string(value_, node, 'height')
            self.height = value_
            self.height_nsprefix_ = child_.prefix
        elif nodeName_ == 'width':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'width')
            value_ = self.gds_validate_string(value_, node, 'width')
            self.width = value_
            self.width_nsprefix_ = child_.prefix
        elif nodeName_ == 'length':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'length')
            value_ = self.gds_validate_string(value_, node, 'length')
            self.length = value_
            self.length_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCarriesCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCarriesCode')
            value_ = self.gds_validate_string(value_, node, 'shipperCarriesCode')
            self.shipperCarriesCode = value_
            self.shipperCarriesCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperBuildingFloor':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperBuildingFloor')
            value_ = self.gds_validate_string(value_, node, 'shipperBuildingFloor')
            self.shipperBuildingFloor = value_
            self.shipperBuildingFloor_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperServiceDirection':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperServiceDirection')
            value_ = self.gds_validate_string(value_, node, 'shipperServiceDirection')
            self.shipperServiceDirection = value_
            self.shipperServiceDirection_nsprefix_ = child_.prefix
        elif nodeName_ == 'nombreDePassageMaximum':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'nombreDePassageMaximum')
            value_ = self.gds_validate_string(value_, node, 'nombreDePassageMaximum')
            self.nombreDePassageMaximum = value_
            self.nombreDePassageMaximum_nsprefix_ = child_.prefix
        elif nodeName_ == 'ltAImprimerParChronopost':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ltAImprimerParChronopost')
            value_ = self.gds_validate_string(value_, node, 'ltAImprimerParChronopost')
            self.ltAImprimerParChronopost = value_
            self.ltAImprimerParChronopost_nsprefix_ = child_.prefix
        elif nodeName_ == 'header_idEmit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'header_idEmit')
            value_ = self.gds_validate_string(value_, node, 'header_idEmit')
            self.header_idEmit = value_
            self.header_idEmit_nsprefix_ = child_.prefix
        elif nodeName_ == 'accountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'accountNumber')
            value_ = self.gds_validate_string(value_, node, 'accountNumber')
            self.accountNumber = value_
            self.accountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'subAccount':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'subAccount')
            value_ = self.gds_validate_string(value_, node, 'subAccount')
            self.subAccount = value_
            self.subAccount_nsprefix_ = child_.prefix
        elif nodeName_ == 'header_identWebPro':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'header_identWebPro')
            value_ = self.gds_validate_string(value_, node, 'header_identWebPro')
            self.header_identWebPro = value_
            self.header_identWebPro_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCivility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCivility')
            value_ = self.gds_validate_string(value_, node, 'shipperCivility')
            self.shipperCivility = value_
            self.shipperCivility_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperName')
            value_ = self.gds_validate_string(value_, node, 'shipperName')
            self.shipperName = value_
            self.shipperName_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperName2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperName2')
            value_ = self.gds_validate_string(value_, node, 'shipperName2')
            self.shipperName2 = value_
            self.shipperName2_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperAdress1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperAdress1')
            value_ = self.gds_validate_string(value_, node, 'shipperAdress1')
            self.shipperAdress1 = value_
            self.shipperAdress1_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperAdress2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperAdress2')
            value_ = self.gds_validate_string(value_, node, 'shipperAdress2')
            self.shipperAdress2 = value_
            self.shipperAdress2_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperZipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperZipCode')
            value_ = self.gds_validate_string(value_, node, 'shipperZipCode')
            self.shipperZipCode = value_
            self.shipperZipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCity')
            value_ = self.gds_validate_string(value_, node, 'shipperCity')
            self.shipperCity = value_
            self.shipperCity_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCountry')
            value_ = self.gds_validate_string(value_, node, 'shipperCountry')
            self.shipperCountry = value_
            self.shipperCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperCountryName')
            value_ = self.gds_validate_string(value_, node, 'shipperCountryName')
            self.shipperCountryName = value_
            self.shipperCountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperContactName')
            value_ = self.gds_validate_string(value_, node, 'shipperContactName')
            self.shipperContactName = value_
            self.shipperContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperEmail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperEmail')
            value_ = self.gds_validate_string(value_, node, 'shipperEmail')
            self.shipperEmail = value_
            self.shipperEmail_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperPhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperPhone')
            value_ = self.gds_validate_string(value_, node, 'shipperPhone')
            self.shipperPhone = value_
            self.shipperPhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperMobilePhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperMobilePhone')
            value_ = self.gds_validate_string(value_, node, 'shipperMobilePhone')
            self.shipperMobilePhone = value_
            self.shipperMobilePhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerCivility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerCivility')
            value_ = self.gds_validate_string(value_, node, 'customerCivility')
            self.customerCivility = value_
            self.customerCivility_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerName')
            value_ = self.gds_validate_string(value_, node, 'customerName')
            self.customerName = value_
            self.customerName_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerName2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerName2')
            value_ = self.gds_validate_string(value_, node, 'customerName2')
            self.customerName2 = value_
            self.customerName2_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerAdress1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerAdress1')
            value_ = self.gds_validate_string(value_, node, 'customerAdress1')
            self.customerAdress1 = value_
            self.customerAdress1_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerAdress2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerAdress2')
            value_ = self.gds_validate_string(value_, node, 'customerAdress2')
            self.customerAdress2 = value_
            self.customerAdress2_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerZipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerZipCode')
            value_ = self.gds_validate_string(value_, node, 'customerZipCode')
            self.customerZipCode = value_
            self.customerZipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerCity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerCity')
            value_ = self.gds_validate_string(value_, node, 'customerCity')
            self.customerCity = value_
            self.customerCity_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerCountry')
            value_ = self.gds_validate_string(value_, node, 'customerCountry')
            self.customerCountry = value_
            self.customerCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerCountryName')
            value_ = self.gds_validate_string(value_, node, 'customerCountryName')
            self.customerCountryName = value_
            self.customerCountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerContactName')
            value_ = self.gds_validate_string(value_, node, 'customerContactName')
            self.customerContactName = value_
            self.customerContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerEmail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerEmail')
            value_ = self.gds_validate_string(value_, node, 'customerEmail')
            self.customerEmail = value_
            self.customerEmail_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerPhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerPhone')
            value_ = self.gds_validate_string(value_, node, 'customerPhone')
            self.customerPhone = value_
            self.customerPhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerMobilePhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerMobilePhone')
            value_ = self.gds_validate_string(value_, node, 'customerMobilePhone')
            self.customerMobilePhone = value_
            self.customerMobilePhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerPreAlert':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerPreAlert')
            value_ = self.gds_validate_string(value_, node, 'customerPreAlert')
            self.customerPreAlert = value_
            self.customerPreAlert_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientCivility':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientCivility')
            value_ = self.gds_validate_string(value_, node, 'recipientCivility')
            self.recipientCivility = value_
            self.recipientCivility_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientName')
            value_ = self.gds_validate_string(value_, node, 'recipientName')
            self.recipientName = value_
            self.recipientName_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientName2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientName2')
            value_ = self.gds_validate_string(value_, node, 'recipientName2')
            self.recipientName2 = value_
            self.recipientName2_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientAdress1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientAdress1')
            value_ = self.gds_validate_string(value_, node, 'recipientAdress1')
            self.recipientAdress1 = value_
            self.recipientAdress1_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientAdress2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientAdress2')
            value_ = self.gds_validate_string(value_, node, 'recipientAdress2')
            self.recipientAdress2 = value_
            self.recipientAdress2_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientZipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientZipCode')
            value_ = self.gds_validate_string(value_, node, 'recipientZipCode')
            self.recipientZipCode = value_
            self.recipientZipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientCity':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientCity')
            value_ = self.gds_validate_string(value_, node, 'recipientCity')
            self.recipientCity = value_
            self.recipientCity_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientCountry':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientCountry')
            value_ = self.gds_validate_string(value_, node, 'recipientCountry')
            self.recipientCountry = value_
            self.recipientCountry_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientCountryName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientCountryName')
            value_ = self.gds_validate_string(value_, node, 'recipientCountryName')
            self.recipientCountryName = value_
            self.recipientCountryName_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientContactName':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientContactName')
            value_ = self.gds_validate_string(value_, node, 'recipientContactName')
            self.recipientContactName = value_
            self.recipientContactName_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientEmail':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientEmail')
            value_ = self.gds_validate_string(value_, node, 'recipientEmail')
            self.recipientEmail = value_
            self.recipientEmail_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientPhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientPhone')
            value_ = self.gds_validate_string(value_, node, 'recipientPhone')
            self.recipientPhone = value_
            self.recipientPhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientMobilePhone':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientMobilePhone')
            value_ = self.gds_validate_string(value_, node, 'recipientMobilePhone')
            self.recipientMobilePhone = value_
            self.recipientMobilePhone_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientPreAlert':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientPreAlert')
            value_ = self.gds_validate_string(value_, node, 'recipientPreAlert')
            self.recipientPreAlert = value_
            self.recipientPreAlert_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperRef')
            value_ = self.gds_validate_string(value_, node, 'shipperRef')
            self.shipperRef = value_
            self.shipperRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'recipientRef':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'recipientRef')
            value_ = self.gds_validate_string(value_, node, 'recipientRef')
            self.recipientRef = value_
            self.recipientRef_nsprefix_ = child_.prefix
        elif nodeName_ == 'customerSkybillNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customerSkybillNumber')
            value_ = self.gds_validate_string(value_, node, 'customerSkybillNumber')
            self.customerSkybillNumber = value_
            self.customerSkybillNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'evtCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'evtCode')
            value_ = self.gds_validate_string(value_, node, 'evtCode')
            self.evtCode = value_
            self.evtCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'productCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'productCode')
            value_ = self.gds_validate_string(value_, node, 'productCode')
            self.productCode = value_
            self.productCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipDate')
            value_ = self.gds_validate_string(value_, node, 'shipDate')
            self.shipDate = value_
            self.shipDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipHour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipHour')
            value_ = self.gds_validate_string(value_, node, 'shipHour')
            self.shipHour = value_
            self.shipHour_nsprefix_ = child_.prefix
        elif nodeName_ == 'weight':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'weight')
            value_ = self.gds_validate_string(value_, node, 'weight')
            self.weight = value_
            self.weight_nsprefix_ = child_.prefix
        elif nodeName_ == 'weightUnit':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'weightUnit')
            value_ = self.gds_validate_string(value_, node, 'weightUnit')
            self.weightUnit = value_
            self.weightUnit_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuredValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'insuredValue')
            value_ = self.gds_validate_string(value_, node, 'insuredValue')
            self.insuredValue = value_
            self.insuredValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'insuredCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'insuredCurrency')
            value_ = self.gds_validate_string(value_, node, 'insuredCurrency')
            self.insuredCurrency = value_
            self.insuredCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'codValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codValue')
            value_ = self.gds_validate_string(value_, node, 'codValue')
            self.codValue = value_
            self.codValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'codCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'codCurrency')
            value_ = self.gds_validate_string(value_, node, 'codCurrency')
            self.codCurrency = value_
            self.codCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customsValue')
            value_ = self.gds_validate_string(value_, node, 'customsValue')
            self.customsValue = value_
            self.customsValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'customsCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'customsCurrency')
            value_ = self.gds_validate_string(value_, node, 'customsCurrency')
            self.customsCurrency = value_
            self.customsCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'service':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'service')
            value_ = self.gds_validate_string(value_, node, 'service')
            self.service = value_
            self.service_nsprefix_ = child_.prefix
        elif nodeName_ == 'as':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'as')
            value_ = self.gds_validate_string(value_, node, 'as')
            self.as_ = value_
            self.as_nsprefix_ = child_.prefix
        elif nodeName_ == 'objectType':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'objectType')
            value_ = self.gds_validate_string(value_, node, 'objectType')
            self.objectType = value_
            self.objectType_nsprefix_ = child_.prefix
        elif nodeName_ == 'content1':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content1')
            value_ = self.gds_validate_string(value_, node, 'content1')
            self.content1 = value_
            self.content1_nsprefix_ = child_.prefix
        elif nodeName_ == 'content2':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content2')
            value_ = self.gds_validate_string(value_, node, 'content2')
            self.content2 = value_
            self.content2_nsprefix_ = child_.prefix
        elif nodeName_ == 'content3':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content3')
            value_ = self.gds_validate_string(value_, node, 'content3')
            self.content3 = value_
            self.content3_nsprefix_ = child_.prefix
        elif nodeName_ == 'content4':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content4')
            value_ = self.gds_validate_string(value_, node, 'content4')
            self.content4 = value_
            self.content4_nsprefix_ = child_.prefix
        elif nodeName_ == 'content5':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'content5')
            value_ = self.gds_validate_string(value_, node, 'content5')
            self.content5 = value_
            self.content5_nsprefix_ = child_.prefix
        elif nodeName_ == 'portValue':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'portValue')
            value_ = self.gds_validate_string(value_, node, 'portValue')
            self.portValue = value_
            self.portValue_nsprefix_ = child_.prefix
        elif nodeName_ == 'portCurrency':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'portCurrency')
            value_ = self.gds_validate_string(value_, node, 'portCurrency')
            self.portCurrency = value_
            self.portCurrency_nsprefix_ = child_.prefix
        elif nodeName_ == 'skybillRank':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'skybillRank')
            value_ = self.gds_validate_string(value_, node, 'skybillRank')
            self.skybillRank = value_
            self.skybillRank_nsprefix_ = child_.prefix
        elif nodeName_ == 'bulkNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'bulkNumber')
            value_ = self.gds_validate_string(value_, node, 'bulkNumber')
            self.bulkNumber = value_
            self.bulkNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mode')
            value_ = self.gds_validate_string(value_, node, 'mode')
            self.mode = value_
            self.mode_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'timeSlotStartDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'timeSlotStartDate')
            value_ = self.gds_validate_string(value_, node, 'timeSlotStartDate')
            self.timeSlotStartDate = value_
            self.timeSlotStartDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'timeSlotEndDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'timeSlotEndDate')
            value_ = self.gds_validate_string(value_, node, 'timeSlotEndDate')
            self.timeSlotEndDate = value_
            self.timeSlotEndDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'timeSlotTariffLevel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'timeSlotTariffLevel')
            value_ = self.gds_validate_string(value_, node, 'timeSlotTariffLevel')
            self.timeSlotTariffLevel = value_
            self.timeSlotTariffLevel_nsprefix_ = child_.prefix
        elif nodeName_ == 'expirationDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'expirationDate')
            value_ = self.gds_validate_string(value_, node, 'expirationDate')
            self.expirationDate = value_
            self.expirationDate_nsprefix_ = child_.prefix
        elif nodeName_ == 'sellByDate':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'sellByDate')
            value_ = self.gds_validate_string(value_, node, 'sellByDate')
            self.sellByDate = value_
            self.sellByDate_nsprefix_ = child_.prefix
# end class shippingWithReservationAndESDWithRefClientPC


class shippingWithReservationAndESDWithRefClientPCResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithReservationAndESDWithRefClientPCResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithReservationAndESDWithRefClientPCResponse.subclass:
            return shippingWithReservationAndESDWithRefClientPCResponse.subclass(*args_, **kwargs_)
        else:
            return shippingWithReservationAndESDWithRefClientPCResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationAndESDWithRefClientPCResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithReservationAndESDWithRefClientPCResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithReservationAndESDWithRefClientPCResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithReservationAndESDWithRefClientPCResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithReservationAndESDWithRefClientPCResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithReservationAndESDWithRefClientPCResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationAndESDWithRefClientPCResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultReservationExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingWithReservationAndESDWithRefClientPCResponse


class shippingV3(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, version=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV3.subclass:
            return shippingV3.subclass(*args_, **kwargs_)
        else:
            return shippingV3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.version is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV3')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV3'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingV3


class shippingV3Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV3Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV3Response.subclass:
            return shippingV3Response.subclass(*args_, **kwargs_)
        else:
            return shippingV3Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV3Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV3Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV3Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV3Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV3Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV3Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV3Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingV3Response


class shippingV2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, version=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV2.subclass:
            return shippingV2.subclass(*args_, **kwargs_)
        else:
            return shippingV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV2'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
# end class shippingV2


class shippingV2Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV2Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV2Response.subclass:
            return shippingV2Response.subclass(*args_, **kwargs_)
        else:
            return shippingV2Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV2Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV2Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV2Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV2Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV2Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV2Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV2Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingV2Response


class shippingWithESDOnlyV2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, version=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithESDOnlyV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithESDOnlyV2.subclass:
            return shippingWithESDOnlyV2.subclass(*args_, **kwargs_)
        else:
            return shippingWithESDOnlyV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithESDOnlyV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithESDOnlyV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithESDOnlyV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithESDOnlyV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithESDOnlyV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithESDOnlyV2'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithESDOnlyV2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdWithRefClientValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
# end class shippingWithESDOnlyV2


class shippingWithESDOnlyV2Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithESDOnlyV2Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithESDOnlyV2Response.subclass:
            return shippingWithESDOnlyV2Response.subclass(*args_, **kwargs_)
        else:
            return shippingWithESDOnlyV2Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithESDOnlyV2Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithESDOnlyV2Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithESDOnlyV2Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithESDOnlyV2Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithESDOnlyV2Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithESDOnlyV2Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithESDOnlyV2Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultReservationExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingWithESDOnlyV2Response


class shippingMultiParcelV5(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, numberOfParcel=None, version=None, multiParcel=None, scheduledValue=None, recipientLocalValue=None, customsValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        if shipperValue is None:
            self.shipperValue = []
        else:
            self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        if recipientValue is None:
            self.recipientValue = []
        else:
            self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        if refValue is None:
            self.refValue = []
        else:
            self.refValue = refValue
        self.refValue_nsprefix_ = None
        if skybillValue is None:
            self.skybillValue = []
        else:
            self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.multiParcel = multiParcel
        self.multiParcel_nsprefix_ = None
        if scheduledValue is None:
            self.scheduledValue = []
        else:
            self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
        if recipientLocalValue is None:
            self.recipientLocalValue = []
        else:
            self.recipientLocalValue = recipientLocalValue
        self.recipientLocalValue_nsprefix_ = None
        if customsValue is None:
            self.customsValue = []
        else:
            self.customsValue = customsValue
        self.customsValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelV5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelV5.subclass:
            return shippingMultiParcelV5.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelV5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def add_shipperValue(self, value):
        self.shipperValue.append(value)
    def insert_shipperValue_at(self, index, value):
        self.shipperValue.insert(index, value)
    def replace_shipperValue_at(self, index, value):
        self.shipperValue[index] = value
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def add_recipientValue(self, value):
        self.recipientValue.append(value)
    def insert_recipientValue_at(self, index, value):
        self.recipientValue.insert(index, value)
    def replace_recipientValue_at(self, index, value):
        self.recipientValue[index] = value
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def add_refValue(self, value):
        self.refValue.append(value)
    def insert_refValue_at(self, index, value):
        self.refValue.insert(index, value)
    def replace_refValue_at(self, index, value):
        self.refValue[index] = value
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def add_skybillValue(self, value):
        self.skybillValue.append(value)
    def insert_skybillValue_at(self, index, value):
        self.skybillValue.insert(index, value)
    def replace_skybillValue_at(self, index, value):
        self.skybillValue[index] = value
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_multiParcel(self):
        return self.multiParcel
    def set_multiParcel(self, multiParcel):
        self.multiParcel = multiParcel
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def add_scheduledValue(self, value):
        self.scheduledValue.append(value)
    def insert_scheduledValue_at(self, index, value):
        self.scheduledValue.insert(index, value)
    def replace_scheduledValue_at(self, index, value):
        self.scheduledValue[index] = value
    def get_recipientLocalValue(self):
        return self.recipientLocalValue
    def set_recipientLocalValue(self, recipientLocalValue):
        self.recipientLocalValue = recipientLocalValue
    def add_recipientLocalValue(self, value):
        self.recipientLocalValue.append(value)
    def insert_recipientLocalValue_at(self, index, value):
        self.recipientLocalValue.insert(index, value)
    def replace_recipientLocalValue_at(self, index, value):
        self.recipientLocalValue[index] = value
    def get_customsValue(self):
        return self.customsValue
    def set_customsValue(self, customsValue):
        self.customsValue = customsValue
    def add_customsValue(self, value):
        self.customsValue.append(value)
    def insert_customsValue_at(self, index, value):
        self.customsValue.insert(index, value)
    def replace_customsValue_at(self, index, value):
        self.customsValue[index] = value
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue or
            self.customerValue is not None or
            self.recipientValue or
            self.refValue or
            self.skybillValue or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.numberOfParcel is not None or
            self.version is not None or
            self.multiParcel is not None or
            self.scheduledValue or
            self.recipientLocalValue or
            self.customsValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV5', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelV5')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelV5':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelV5')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelV5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelV5'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        for shipperValue_ in self.shipperValue:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            shipperValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        for recipientValue_ in self.recipientValue:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            recipientValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        for refValue_ in self.refValue:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            refValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        for skybillValue_ in self.skybillValue:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            skybillValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.multiParcel is not None:
            namespaceprefix_ = self.multiParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.multiParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smultiParcel>%s</%smultiParcel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.multiParcel), input_name='multiParcel')), namespaceprefix_ , eol_))
        for scheduledValue_ in self.scheduledValue:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            scheduledValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
        for recipientLocalValue_ in self.recipientLocalValue:
            namespaceprefix_ = self.recipientLocalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientLocalValue_nsprefix_) else ''
            recipientLocalValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientLocalValue', pretty_print=pretty_print)
        for customsValue_ in self.customsValue:
            namespaceprefix_ = self.customsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customsValue_nsprefix_) else ''
            customsValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdValue3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            obj_ = headerValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            obj_ = shipperValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue.append(obj_)
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            obj_ = recipientValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue.append(obj_)
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            obj_ = refValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue.append(obj_)
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            obj_ = skybillWithDimensionsValueV6.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue.append(obj_)
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            obj_ = skybillParamsValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'multiParcel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'multiParcel')
            value_ = self.gds_validate_string(value_, node, 'multiParcel')
            self.multiParcel = value_
            self.multiParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue.append(obj_)
            obj_.original_tagname_ = 'scheduledValue'
        elif nodeName_ == 'recipientLocalValue':
            obj_ = recipientLocalValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientLocalValue.append(obj_)
            obj_.original_tagname_ = 'recipientLocalValue'
        elif nodeName_ == 'customsValue':
            obj_ = customsValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsValue.append(obj_)
            obj_.original_tagname_ = 'customsValue'
# end class shippingMultiParcelV5


class shippingMultiParcelV5Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelV5Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelV5Response.subclass:
            return shippingMultiParcelV5Response.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelV5Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV5Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelV5Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelV5Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelV5Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelV5Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelV5Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV5Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultMultiParcelExpeditionValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingMultiParcelV5Response


class shippingV7(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, customsValue=None, password=None, modeRetour=None, version=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.customsValue = customsValue
        self.customsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV7)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV7.subclass:
            return shippingV7.subclass(*args_, **kwargs_)
        else:
            return shippingV7(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_customsValue(self):
        return self.customsValue
    def set_customsValue(self, customsValue):
        self.customsValue = customsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.customsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.version is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV7', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV7')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV7':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV7')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV7', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV7'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV7', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.customsValue is not None:
            namespaceprefix_ = self.customsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customsValue_nsprefix_) else ''
            self.customsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillWithDimensionsValueV3)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            obj_ = skybillParamsValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'customsValue':
            obj_ = customsValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsValue = obj_
            obj_.original_tagname_ = 'customsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingV7


class shippingV7Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV7Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV7Response.subclass:
            return shippingV7Response.subclass(*args_, **kwargs_)
        else:
            return shippingV7Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV7Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV7Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV7Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV7Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV7Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV7Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV7Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultMonoParcelExpeditionValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingV7Response


class getRouting(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, accountNumber=None, password=None, shipperDepot=None, countryCode=None, zipCode=None, socode=None, ascode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.accountNumber = accountNumber
        self.accountNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.shipperDepot = shipperDepot
        self.shipperDepot_nsprefix_ = None
        self.countryCode = countryCode
        self.countryCode_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.socode = socode
        self.socode_nsprefix_ = None
        self.ascode = ascode
        self.ascode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getRouting)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getRouting.subclass:
            return getRouting.subclass(*args_, **kwargs_)
        else:
            return getRouting(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_accountNumber(self):
        return self.accountNumber
    def set_accountNumber(self, accountNumber):
        self.accountNumber = accountNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_shipperDepot(self):
        return self.shipperDepot
    def set_shipperDepot(self, shipperDepot):
        self.shipperDepot = shipperDepot
    def get_countryCode(self):
        return self.countryCode
    def set_countryCode(self, countryCode):
        self.countryCode = countryCode
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_socode(self):
        return self.socode
    def set_socode(self, socode):
        self.socode = socode
    def get_ascode(self):
        return self.ascode
    def set_ascode(self, ascode):
        self.ascode = ascode
    def _hasContent(self):
        if (
            self.accountNumber is not None or
            self.password is not None or
            self.shipperDepot is not None or
            self.countryCode is not None or
            self.zipCode is not None or
            self.socode is not None or
            self.ascode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getRouting', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getRouting')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getRouting':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getRouting')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getRouting', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getRouting'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getRouting', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.accountNumber is not None:
            namespaceprefix_ = self.accountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.accountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccountNumber>%s</%saccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.accountNumber), input_name='accountNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.shipperDepot is not None:
            namespaceprefix_ = self.shipperDepot_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperDepot_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sshipperDepot>%s</%sshipperDepot>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.shipperDepot), input_name='shipperDepot')), namespaceprefix_ , eol_))
        if self.countryCode is not None:
            namespaceprefix_ = self.countryCode_nsprefix_ + ':' if (UseCapturedNS_ and self.countryCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountryCode>%s</%scountryCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.countryCode), input_name='countryCode')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.socode is not None:
            namespaceprefix_ = self.socode_nsprefix_ + ':' if (UseCapturedNS_ and self.socode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssocode>%s</%ssocode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.socode), input_name='socode')), namespaceprefix_ , eol_))
        if self.ascode is not None:
            namespaceprefix_ = self.ascode_nsprefix_ + ':' if (UseCapturedNS_ and self.ascode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sascode>%s</%sascode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.ascode), input_name='ascode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'accountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'accountNumber')
            value_ = self.gds_validate_string(value_, node, 'accountNumber')
            self.accountNumber = value_
            self.accountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'shipperDepot':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'shipperDepot')
            value_ = self.gds_validate_string(value_, node, 'shipperDepot')
            self.shipperDepot = value_
            self.shipperDepot_nsprefix_ = child_.prefix
        elif nodeName_ == 'countryCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'countryCode')
            value_ = self.gds_validate_string(value_, node, 'countryCode')
            self.countryCode = value_
            self.countryCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'socode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'socode')
            value_ = self.gds_validate_string(value_, node, 'socode')
            self.socode = value_
            self.socode_nsprefix_ = child_.prefix
        elif nodeName_ == 'ascode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'ascode')
            value_ = self.gds_validate_string(value_, node, 'ascode')
            self.ascode = value_
            self.ascode_nsprefix_ = child_.prefix
# end class getRouting


class getRoutingResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getRoutingResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getRoutingResponse.subclass:
            return getRoutingResponse.subclass(*args_, **kwargs_)
        else:
            return getRoutingResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getRoutingResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getRoutingResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getRoutingResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getRoutingResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getRoutingResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getRoutingResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getRoutingResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultGetRouting.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getRoutingResponse


class shippingMultiParcelV4(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, numberOfParcel=None, version=None, multiParcel=None, scheduledValue=None, recipientLocalValue=None, customsValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        if shipperValue is None:
            self.shipperValue = []
        else:
            self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        if recipientValue is None:
            self.recipientValue = []
        else:
            self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        if refValue is None:
            self.refValue = []
        else:
            self.refValue = refValue
        self.refValue_nsprefix_ = None
        if skybillValue is None:
            self.skybillValue = []
        else:
            self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.multiParcel = multiParcel
        self.multiParcel_nsprefix_ = None
        if scheduledValue is None:
            self.scheduledValue = []
        else:
            self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
        if recipientLocalValue is None:
            self.recipientLocalValue = []
        else:
            self.recipientLocalValue = recipientLocalValue
        self.recipientLocalValue_nsprefix_ = None
        if customsValue is None:
            self.customsValue = []
        else:
            self.customsValue = customsValue
        self.customsValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelV4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelV4.subclass:
            return shippingMultiParcelV4.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelV4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def add_shipperValue(self, value):
        self.shipperValue.append(value)
    def insert_shipperValue_at(self, index, value):
        self.shipperValue.insert(index, value)
    def replace_shipperValue_at(self, index, value):
        self.shipperValue[index] = value
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def add_recipientValue(self, value):
        self.recipientValue.append(value)
    def insert_recipientValue_at(self, index, value):
        self.recipientValue.insert(index, value)
    def replace_recipientValue_at(self, index, value):
        self.recipientValue[index] = value
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def add_refValue(self, value):
        self.refValue.append(value)
    def insert_refValue_at(self, index, value):
        self.refValue.insert(index, value)
    def replace_refValue_at(self, index, value):
        self.refValue[index] = value
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def add_skybillValue(self, value):
        self.skybillValue.append(value)
    def insert_skybillValue_at(self, index, value):
        self.skybillValue.insert(index, value)
    def replace_skybillValue_at(self, index, value):
        self.skybillValue[index] = value
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_multiParcel(self):
        return self.multiParcel
    def set_multiParcel(self, multiParcel):
        self.multiParcel = multiParcel
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def add_scheduledValue(self, value):
        self.scheduledValue.append(value)
    def insert_scheduledValue_at(self, index, value):
        self.scheduledValue.insert(index, value)
    def replace_scheduledValue_at(self, index, value):
        self.scheduledValue[index] = value
    def get_recipientLocalValue(self):
        return self.recipientLocalValue
    def set_recipientLocalValue(self, recipientLocalValue):
        self.recipientLocalValue = recipientLocalValue
    def add_recipientLocalValue(self, value):
        self.recipientLocalValue.append(value)
    def insert_recipientLocalValue_at(self, index, value):
        self.recipientLocalValue.insert(index, value)
    def replace_recipientLocalValue_at(self, index, value):
        self.recipientLocalValue[index] = value
    def get_customsValue(self):
        return self.customsValue
    def set_customsValue(self, customsValue):
        self.customsValue = customsValue
    def add_customsValue(self, value):
        self.customsValue.append(value)
    def insert_customsValue_at(self, index, value):
        self.customsValue.insert(index, value)
    def replace_customsValue_at(self, index, value):
        self.customsValue[index] = value
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue or
            self.customerValue is not None or
            self.recipientValue or
            self.refValue or
            self.skybillValue or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.numberOfParcel is not None or
            self.version is not None or
            self.multiParcel is not None or
            self.scheduledValue or
            self.recipientLocalValue or
            self.customsValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelV4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelV4':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelV4')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelV4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelV4'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        for shipperValue_ in self.shipperValue:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            shipperValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        for recipientValue_ in self.recipientValue:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            recipientValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        for refValue_ in self.refValue:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            refValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        for skybillValue_ in self.skybillValue:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            skybillValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.multiParcel is not None:
            namespaceprefix_ = self.multiParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.multiParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smultiParcel>%s</%smultiParcel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.multiParcel), input_name='multiParcel')), namespaceprefix_ , eol_))
        for scheduledValue_ in self.scheduledValue:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            scheduledValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
        for recipientLocalValue_ in self.recipientLocalValue:
            namespaceprefix_ = self.recipientLocalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientLocalValue_nsprefix_) else ''
            recipientLocalValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientLocalValue', pretty_print=pretty_print)
        for customsValue_ in self.customsValue:
            namespaceprefix_ = self.customsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customsValue_nsprefix_) else ''
            customsValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdValue3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            obj_ = shipperValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue.append(obj_)
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            obj_ = recipientValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue.append(obj_)
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            obj_ = refValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue.append(obj_)
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            obj_ = skybillWithDimensionsValueV6.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue.append(obj_)
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            obj_ = skybillParamsValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'multiParcel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'multiParcel')
            value_ = self.gds_validate_string(value_, node, 'multiParcel')
            self.multiParcel = value_
            self.multiParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue.append(obj_)
            obj_.original_tagname_ = 'scheduledValue'
        elif nodeName_ == 'recipientLocalValue':
            obj_ = recipientLocalValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientLocalValue.append(obj_)
            obj_.original_tagname_ = 'recipientLocalValue'
        elif nodeName_ == 'customsValue':
            obj_ = customsValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsValue.append(obj_)
            obj_.original_tagname_ = 'customsValue'
# end class shippingMultiParcelV4


class shippingMultiParcelV4Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelV4Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelV4Response.subclass:
            return shippingMultiParcelV4Response.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelV4Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV4Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelV4Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelV4Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelV4Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelV4Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelV4Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV4Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultMultiParcelExpeditionValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingMultiParcelV4Response


class shippingV6(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, version=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV6)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV6.subclass:
            return shippingV6.subclass(*args_, **kwargs_)
        else:
            return shippingV6(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.version is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV6', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV6')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV6':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV6')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV6', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV6'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV6', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdValue3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            obj_ = skybillValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingV6


class shippingV6Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV6Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV6Response.subclass:
            return shippingV6Response.subclass(*args_, **kwargs_)
        else:
            return shippingV6Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV6Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV6Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV6Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV6Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV6Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV6Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV6Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultExpeditionValueV3)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingV6Response


class shippingMultiParcelV3(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, numberOfParcel=None, version=None, multiParcel=None, scheduledValue=None, recipientLocalValue=None, customsValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        if shipperValue is None:
            self.shipperValue = []
        else:
            self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        if recipientValue is None:
            self.recipientValue = []
        else:
            self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        if refValue is None:
            self.refValue = []
        else:
            self.refValue = refValue
        self.refValue_nsprefix_ = None
        if skybillValue is None:
            self.skybillValue = []
        else:
            self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.multiParcel = multiParcel
        self.multiParcel_nsprefix_ = None
        if scheduledValue is None:
            self.scheduledValue = []
        else:
            self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
        if recipientLocalValue is None:
            self.recipientLocalValue = []
        else:
            self.recipientLocalValue = recipientLocalValue
        self.recipientLocalValue_nsprefix_ = None
        if customsValue is None:
            self.customsValue = []
        else:
            self.customsValue = customsValue
        self.customsValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelV3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelV3.subclass:
            return shippingMultiParcelV3.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelV3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def add_shipperValue(self, value):
        self.shipperValue.append(value)
    def insert_shipperValue_at(self, index, value):
        self.shipperValue.insert(index, value)
    def replace_shipperValue_at(self, index, value):
        self.shipperValue[index] = value
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def add_recipientValue(self, value):
        self.recipientValue.append(value)
    def insert_recipientValue_at(self, index, value):
        self.recipientValue.insert(index, value)
    def replace_recipientValue_at(self, index, value):
        self.recipientValue[index] = value
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def add_refValue(self, value):
        self.refValue.append(value)
    def insert_refValue_at(self, index, value):
        self.refValue.insert(index, value)
    def replace_refValue_at(self, index, value):
        self.refValue[index] = value
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def add_skybillValue(self, value):
        self.skybillValue.append(value)
    def insert_skybillValue_at(self, index, value):
        self.skybillValue.insert(index, value)
    def replace_skybillValue_at(self, index, value):
        self.skybillValue[index] = value
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_multiParcel(self):
        return self.multiParcel
    def set_multiParcel(self, multiParcel):
        self.multiParcel = multiParcel
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def add_scheduledValue(self, value):
        self.scheduledValue.append(value)
    def insert_scheduledValue_at(self, index, value):
        self.scheduledValue.insert(index, value)
    def replace_scheduledValue_at(self, index, value):
        self.scheduledValue[index] = value
    def get_recipientLocalValue(self):
        return self.recipientLocalValue
    def set_recipientLocalValue(self, recipientLocalValue):
        self.recipientLocalValue = recipientLocalValue
    def add_recipientLocalValue(self, value):
        self.recipientLocalValue.append(value)
    def insert_recipientLocalValue_at(self, index, value):
        self.recipientLocalValue.insert(index, value)
    def replace_recipientLocalValue_at(self, index, value):
        self.recipientLocalValue[index] = value
    def get_customsValue(self):
        return self.customsValue
    def set_customsValue(self, customsValue):
        self.customsValue = customsValue
    def add_customsValue(self, value):
        self.customsValue.append(value)
    def insert_customsValue_at(self, index, value):
        self.customsValue.insert(index, value)
    def replace_customsValue_at(self, index, value):
        self.customsValue[index] = value
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue or
            self.customerValue is not None or
            self.recipientValue or
            self.refValue or
            self.skybillValue or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.numberOfParcel is not None or
            self.version is not None or
            self.multiParcel is not None or
            self.scheduledValue or
            self.recipientLocalValue or
            self.customsValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelV3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelV3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelV3')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelV3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelV3'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        for shipperValue_ in self.shipperValue:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            shipperValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        for recipientValue_ in self.recipientValue:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            recipientValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        for refValue_ in self.refValue:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            refValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        for skybillValue_ in self.skybillValue:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            skybillValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.multiParcel is not None:
            namespaceprefix_ = self.multiParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.multiParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smultiParcel>%s</%smultiParcel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.multiParcel), input_name='multiParcel')), namespaceprefix_ , eol_))
        for scheduledValue_ in self.scheduledValue:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            scheduledValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
        for recipientLocalValue_ in self.recipientLocalValue:
            namespaceprefix_ = self.recipientLocalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientLocalValue_nsprefix_) else ''
            recipientLocalValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientLocalValue', pretty_print=pretty_print)
        for customsValue_ in self.customsValue:
            namespaceprefix_ = self.customsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customsValue_nsprefix_) else ''
            customsValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdValue3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            obj_ = shipperValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue.append(obj_)
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            obj_ = recipientValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue.append(obj_)
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            obj_ = refValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue.append(obj_)
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillWithDimensionsValueV5)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue.append(obj_)
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            obj_ = skybillParamsValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'multiParcel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'multiParcel')
            value_ = self.gds_validate_string(value_, node, 'multiParcel')
            self.multiParcel = value_
            self.multiParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue.append(obj_)
            obj_.original_tagname_ = 'scheduledValue'
        elif nodeName_ == 'recipientLocalValue':
            obj_ = recipientLocalValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientLocalValue.append(obj_)
            obj_.original_tagname_ = 'recipientLocalValue'
        elif nodeName_ == 'customsValue':
            obj_ = customsValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsValue.append(obj_)
            obj_.original_tagname_ = 'customsValue'
# end class shippingMultiParcelV3


class shippingMultiParcelV3Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelV3Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelV3Response.subclass:
            return shippingMultiParcelV3Response.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelV3Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV3Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelV3Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelV3Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelV3Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelV3Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelV3Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV3Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultMultiParcelExpeditionValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingMultiParcelV3Response


class shippingV5(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, version=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV5)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV5.subclass:
            return shippingV5.subclass(*args_, **kwargs_)
        else:
            return shippingV5(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.version is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV5', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV5')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV5':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV5')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV5', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV5'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV5', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdValue3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            obj_ = skybillValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingV5


class shippingV5Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV5Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV5Response.subclass:
            return shippingV5Response.subclass(*args_, **kwargs_)
        else:
            return shippingV5Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV5Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV5Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV5Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV5Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV5Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV5Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV5Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingV5Response


class shippingMultiParcelV2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, numberOfParcel=None, version=None, multiParcel=None, scheduledValue=None, recipientLocalValue=None, customsValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        if shipperValue is None:
            self.shipperValue = []
        else:
            self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        if recipientValue is None:
            self.recipientValue = []
        else:
            self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        if refValue is None:
            self.refValue = []
        else:
            self.refValue = refValue
        self.refValue_nsprefix_ = None
        if skybillValue is None:
            self.skybillValue = []
        else:
            self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.multiParcel = multiParcel
        self.multiParcel_nsprefix_ = None
        if scheduledValue is None:
            self.scheduledValue = []
        else:
            self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
        if recipientLocalValue is None:
            self.recipientLocalValue = []
        else:
            self.recipientLocalValue = recipientLocalValue
        self.recipientLocalValue_nsprefix_ = None
        if customsValue is None:
            self.customsValue = []
        else:
            self.customsValue = customsValue
        self.customsValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelV2.subclass:
            return shippingMultiParcelV2.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def add_shipperValue(self, value):
        self.shipperValue.append(value)
    def insert_shipperValue_at(self, index, value):
        self.shipperValue.insert(index, value)
    def replace_shipperValue_at(self, index, value):
        self.shipperValue[index] = value
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def add_recipientValue(self, value):
        self.recipientValue.append(value)
    def insert_recipientValue_at(self, index, value):
        self.recipientValue.insert(index, value)
    def replace_recipientValue_at(self, index, value):
        self.recipientValue[index] = value
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def add_refValue(self, value):
        self.refValue.append(value)
    def insert_refValue_at(self, index, value):
        self.refValue.insert(index, value)
    def replace_refValue_at(self, index, value):
        self.refValue[index] = value
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def add_skybillValue(self, value):
        self.skybillValue.append(value)
    def insert_skybillValue_at(self, index, value):
        self.skybillValue.insert(index, value)
    def replace_skybillValue_at(self, index, value):
        self.skybillValue[index] = value
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_multiParcel(self):
        return self.multiParcel
    def set_multiParcel(self, multiParcel):
        self.multiParcel = multiParcel
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def add_scheduledValue(self, value):
        self.scheduledValue.append(value)
    def insert_scheduledValue_at(self, index, value):
        self.scheduledValue.insert(index, value)
    def replace_scheduledValue_at(self, index, value):
        self.scheduledValue[index] = value
    def get_recipientLocalValue(self):
        return self.recipientLocalValue
    def set_recipientLocalValue(self, recipientLocalValue):
        self.recipientLocalValue = recipientLocalValue
    def add_recipientLocalValue(self, value):
        self.recipientLocalValue.append(value)
    def insert_recipientLocalValue_at(self, index, value):
        self.recipientLocalValue.insert(index, value)
    def replace_recipientLocalValue_at(self, index, value):
        self.recipientLocalValue[index] = value
    def get_customsValue(self):
        return self.customsValue
    def set_customsValue(self, customsValue):
        self.customsValue = customsValue
    def add_customsValue(self, value):
        self.customsValue.append(value)
    def insert_customsValue_at(self, index, value):
        self.customsValue.insert(index, value)
    def replace_customsValue_at(self, index, value):
        self.customsValue[index] = value
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue or
            self.customerValue is not None or
            self.recipientValue or
            self.refValue or
            self.skybillValue or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.numberOfParcel is not None or
            self.version is not None or
            self.multiParcel is not None or
            self.scheduledValue or
            self.recipientLocalValue or
            self.customsValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelV2'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        for shipperValue_ in self.shipperValue:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            shipperValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        for recipientValue_ in self.recipientValue:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            recipientValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        for refValue_ in self.refValue:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            refValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        for skybillValue_ in self.skybillValue:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            skybillValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.multiParcel is not None:
            namespaceprefix_ = self.multiParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.multiParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smultiParcel>%s</%smultiParcel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.multiParcel), input_name='multiParcel')), namespaceprefix_ , eol_))
        for scheduledValue_ in self.scheduledValue:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            scheduledValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
        for recipientLocalValue_ in self.recipientLocalValue:
            namespaceprefix_ = self.recipientLocalValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientLocalValue_nsprefix_) else ''
            recipientLocalValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientLocalValue', pretty_print=pretty_print)
        for customsValue_ in self.customsValue:
            namespaceprefix_ = self.customsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customsValue_nsprefix_) else ''
            customsValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customsValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdValue3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            obj_ = shipperValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue.append(obj_)
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue.append(obj_)
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue.append(obj_)
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillWithDimensionsValueV4)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue.append(obj_)
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            obj_ = skybillParamsValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'multiParcel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'multiParcel')
            value_ = self.gds_validate_string(value_, node, 'multiParcel')
            self.multiParcel = value_
            self.multiParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue.append(obj_)
            obj_.original_tagname_ = 'scheduledValue'
        elif nodeName_ == 'recipientLocalValue':
            class_obj_ = self.get_class_obj_(child_, recipientLocalValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientLocalValue.append(obj_)
            obj_.original_tagname_ = 'recipientLocalValue'
        elif nodeName_ == 'customsValue':
            obj_ = customsValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customsValue.append(obj_)
            obj_.original_tagname_ = 'customsValue'
# end class shippingMultiParcelV2


class shippingMultiParcelV2Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelV2Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelV2Response.subclass:
            return shippingMultiParcelV2Response.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelV2Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV2Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelV2Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelV2Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelV2Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelV2Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelV2Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelV2Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultMultiParcelExpeditionValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingMultiParcelV2Response


class shippingV4(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, version=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV4)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV4.subclass:
            return shippingV4.subclass(*args_, **kwargs_)
        else:
            return shippingV4(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.version is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV4', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV4')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV4':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV4')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV4', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV4'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV4', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            obj_ = skybillValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingV4


class shippingV4Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingV4Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingV4Response.subclass:
            return shippingV4Response.subclass(*args_, **kwargs_)
        else:
            return shippingV4Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV4Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingV4Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingV4Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingV4Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingV4Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingV4Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingV4Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingV4Response


class faisabiliteESD(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, shipperValue=None, retrievalDateTime=None, closingDateTime=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        if isinstance(retrievalDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(retrievalDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = retrievalDateTime
        self.retrievalDateTime = initvalue_
        self.retrievalDateTime_nsprefix_ = None
        if isinstance(closingDateTime, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(closingDateTime, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = closingDateTime
        self.closingDateTime = initvalue_
        self.closingDateTime_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, faisabiliteESD)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if faisabiliteESD.subclass:
            return faisabiliteESD.subclass(*args_, **kwargs_)
        else:
            return faisabiliteESD(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_retrievalDateTime(self):
        return self.retrievalDateTime
    def set_retrievalDateTime(self, retrievalDateTime):
        self.retrievalDateTime = retrievalDateTime
    def get_closingDateTime(self):
        return self.closingDateTime
    def set_closingDateTime(self, closingDateTime):
        self.closingDateTime = closingDateTime
    def _hasContent(self):
        if (
            self.shipperValue is not None or
            self.retrievalDateTime is not None or
            self.closingDateTime is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='faisabiliteESD', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('faisabiliteESD')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'faisabiliteESD':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='faisabiliteESD')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='faisabiliteESD', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='faisabiliteESD'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='faisabiliteESD', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.retrievalDateTime is not None:
            namespaceprefix_ = self.retrievalDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.retrievalDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sretrievalDateTime>%s</%sretrievalDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.retrievalDateTime, input_name='retrievalDateTime'), namespaceprefix_ , eol_))
        if self.closingDateTime is not None:
            namespaceprefix_ = self.closingDateTime_nsprefix_ + ':' if (UseCapturedNS_ and self.closingDateTime_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sclosingDateTime>%s</%sclosingDateTime>%s' % (namespaceprefix_ , self.gds_format_datetime(self.closingDateTime, input_name='closingDateTime'), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'retrievalDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.retrievalDateTime = dval_
            self.retrievalDateTime_nsprefix_ = child_.prefix
        elif nodeName_ == 'closingDateTime':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.closingDateTime = dval_
            self.closingDateTime_nsprefix_ = child_.prefix
# end class faisabiliteESD


class faisabiliteESDResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, faisabiliteESDResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if faisabiliteESDResponse.subclass:
            return faisabiliteESDResponse.subclass(*args_, **kwargs_)
        else:
            return faisabiliteESDResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='faisabiliteESDResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('faisabiliteESDResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'faisabiliteESDResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='faisabiliteESDResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='faisabiliteESDResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='faisabiliteESDResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='faisabiliteESDResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultFaisabiliteESD.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class faisabiliteESDResponse


class creerEnlevementNational(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, headerValue=None, password=None, datePassage=None, datePassageFermeture=None, donneurDOrdre=None, adresseEnlevement=None, particulartiesEsd=None, referenceEsdClient=None, contenu=None, options=None, locale=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        if isinstance(datePassage, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(datePassage, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = datePassage
        self.datePassage = initvalue_
        self.datePassage_nsprefix_ = None
        if isinstance(datePassageFermeture, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(datePassageFermeture, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = datePassageFermeture
        self.datePassageFermeture = initvalue_
        self.datePassageFermeture_nsprefix_ = None
        self.donneurDOrdre = donneurDOrdre
        self.donneurDOrdre_nsprefix_ = None
        self.adresseEnlevement = adresseEnlevement
        self.adresseEnlevement_nsprefix_ = None
        self.particulartiesEsd = particulartiesEsd
        self.particulartiesEsd_nsprefix_ = None
        self.referenceEsdClient = referenceEsdClient
        self.referenceEsdClient_nsprefix_ = None
        self.contenu = contenu
        self.contenu_nsprefix_ = None
        self.options = options
        self.options_nsprefix_ = None
        self.locale = locale
        self.locale_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, creerEnlevementNational)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if creerEnlevementNational.subclass:
            return creerEnlevementNational.subclass(*args_, **kwargs_)
        else:
            return creerEnlevementNational(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_datePassage(self):
        return self.datePassage
    def set_datePassage(self, datePassage):
        self.datePassage = datePassage
    def get_datePassageFermeture(self):
        return self.datePassageFermeture
    def set_datePassageFermeture(self, datePassageFermeture):
        self.datePassageFermeture = datePassageFermeture
    def get_donneurDOrdre(self):
        return self.donneurDOrdre
    def set_donneurDOrdre(self, donneurDOrdre):
        self.donneurDOrdre = donneurDOrdre
    def get_adresseEnlevement(self):
        return self.adresseEnlevement
    def set_adresseEnlevement(self, adresseEnlevement):
        self.adresseEnlevement = adresseEnlevement
    def get_particulartiesEsd(self):
        return self.particulartiesEsd
    def set_particulartiesEsd(self, particulartiesEsd):
        self.particulartiesEsd = particulartiesEsd
    def get_referenceEsdClient(self):
        return self.referenceEsdClient
    def set_referenceEsdClient(self, referenceEsdClient):
        self.referenceEsdClient = referenceEsdClient
    def get_contenu(self):
        return self.contenu
    def set_contenu(self, contenu):
        self.contenu = contenu
    def get_options(self):
        return self.options
    def set_options(self, options):
        self.options = options
    def get_locale(self):
        return self.locale
    def set_locale(self, locale):
        self.locale = locale
    def _hasContent(self):
        if (
            self.headerValue is not None or
            self.password is not None or
            self.datePassage is not None or
            self.datePassageFermeture is not None or
            self.donneurDOrdre is not None or
            self.adresseEnlevement is not None or
            self.particulartiesEsd is not None or
            self.referenceEsdClient is not None or
            self.contenu is not None or
            self.options is not None or
            self.locale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='creerEnlevementNational', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('creerEnlevementNational')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'creerEnlevementNational':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='creerEnlevementNational')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='creerEnlevementNational', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='creerEnlevementNational'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='creerEnlevementNational', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.datePassage is not None:
            namespaceprefix_ = self.datePassage_nsprefix_ + ':' if (UseCapturedNS_ and self.datePassage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatePassage>%s</%sdatePassage>%s' % (namespaceprefix_ , self.gds_format_datetime(self.datePassage, input_name='datePassage'), namespaceprefix_ , eol_))
        if self.datePassageFermeture is not None:
            namespaceprefix_ = self.datePassageFermeture_nsprefix_ + ':' if (UseCapturedNS_ and self.datePassageFermeture_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatePassageFermeture>%s</%sdatePassageFermeture>%s' % (namespaceprefix_ , self.gds_format_datetime(self.datePassageFermeture, input_name='datePassageFermeture'), namespaceprefix_ , eol_))
        if self.donneurDOrdre is not None:
            namespaceprefix_ = self.donneurDOrdre_nsprefix_ + ':' if (UseCapturedNS_ and self.donneurDOrdre_nsprefix_) else ''
            self.donneurDOrdre.export(outfile, level, namespaceprefix_, namespacedef_='', name_='donneurDOrdre', pretty_print=pretty_print)
        if self.adresseEnlevement is not None:
            namespaceprefix_ = self.adresseEnlevement_nsprefix_ + ':' if (UseCapturedNS_ and self.adresseEnlevement_nsprefix_) else ''
            self.adresseEnlevement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='adresseEnlevement', pretty_print=pretty_print)
        if self.particulartiesEsd is not None:
            namespaceprefix_ = self.particulartiesEsd_nsprefix_ + ':' if (UseCapturedNS_ and self.particulartiesEsd_nsprefix_) else ''
            self.particulartiesEsd.export(outfile, level, namespaceprefix_, namespacedef_='', name_='particulartiesEsd', pretty_print=pretty_print)
        if self.referenceEsdClient is not None:
            namespaceprefix_ = self.referenceEsdClient_nsprefix_ + ':' if (UseCapturedNS_ and self.referenceEsdClient_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreferenceEsdClient>%s</%sreferenceEsdClient>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.referenceEsdClient), input_name='referenceEsdClient')), namespaceprefix_ , eol_))
        if self.contenu is not None:
            namespaceprefix_ = self.contenu_nsprefix_ + ':' if (UseCapturedNS_ and self.contenu_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontenu>%s</%scontenu>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.contenu), input_name='contenu')), namespaceprefix_ , eol_))
        if self.options is not None:
            namespaceprefix_ = self.options_nsprefix_ + ':' if (UseCapturedNS_ and self.options_nsprefix_) else ''
            self.options.export(outfile, level, namespaceprefix_, namespacedef_='', name_='options', pretty_print=pretty_print)
        if self.locale is not None:
            namespaceprefix_ = self.locale_nsprefix_ + ':' if (UseCapturedNS_ and self.locale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slocale>%s</%slocale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.locale), input_name='locale')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'datePassage':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.datePassage = dval_
            self.datePassage_nsprefix_ = child_.prefix
        elif nodeName_ == 'datePassageFermeture':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.datePassageFermeture = dval_
            self.datePassageFermeture_nsprefix_ = child_.prefix
        elif nodeName_ == 'donneurDOrdre':
            obj_ = donneurDOrdre.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.donneurDOrdre = obj_
            obj_.original_tagname_ = 'donneurDOrdre'
        elif nodeName_ == 'adresseEnlevement':
            obj_ = adresseEnlevementV3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.adresseEnlevement = obj_
            obj_.original_tagname_ = 'adresseEnlevement'
        elif nodeName_ == 'particulartiesEsd':
            obj_ = particularitesEsd.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.particulartiesEsd = obj_
            obj_.original_tagname_ = 'particulartiesEsd'
        elif nodeName_ == 'referenceEsdClient':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'referenceEsdClient')
            value_ = self.gds_validate_string(value_, node, 'referenceEsdClient')
            self.referenceEsdClient = value_
            self.referenceEsdClient_nsprefix_ = child_.prefix
        elif nodeName_ == 'contenu':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'contenu')
            value_ = self.gds_validate_string(value_, node, 'contenu')
            self.contenu = value_
            self.contenu_nsprefix_ = child_.prefix
        elif nodeName_ == 'options':
            obj_ = options.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.options = obj_
            obj_.original_tagname_ = 'options'
        elif nodeName_ == 'locale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'locale')
            value_ = self.gds_validate_string(value_, node, 'locale')
            self.locale = value_
            self.locale_nsprefix_ = child_.prefix
# end class creerEnlevementNational


class creerEnlevementNationalResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, creerEnlevementNationalResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if creerEnlevementNationalResponse.subclass:
            return creerEnlevementNationalResponse.subclass(*args_, **kwargs_)
        else:
            return creerEnlevementNationalResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='creerEnlevementNationalResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('creerEnlevementNationalResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'creerEnlevementNationalResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='creerEnlevementNationalResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='creerEnlevementNationalResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='creerEnlevementNationalResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='creerEnlevementNationalResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultEnlevementNational.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class creerEnlevementNationalResponse


class shippingWithESDOnly(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, version=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithESDOnly)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithESDOnly.subclass:
            return shippingWithESDOnly.subclass(*args_, **kwargs_)
        else:
            return shippingWithESDOnly(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.version is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithESDOnly', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithESDOnly')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithESDOnly':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithESDOnly')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithESDOnly', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithESDOnly'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithESDOnly', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdWithRefClientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
# end class shippingWithESDOnly


class shippingWithESDOnlyResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithESDOnlyResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithESDOnlyResponse.subclass:
            return shippingWithESDOnlyResponse.subclass(*args_, **kwargs_)
        else:
            return shippingWithESDOnlyResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithESDOnlyResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithESDOnlyResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithESDOnlyResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithESDOnlyResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithESDOnlyResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithESDOnlyResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithESDOnlyResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultReservationExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingWithESDOnlyResponse


class getReservedSkybillWithTypeAndModeByReservation(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, reservationNumber=None, mode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.reservationNumber = reservationNumber
        self.reservationNumber_nsprefix_ = None
        self.mode = mode
        self.mode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillWithTypeAndModeByReservation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillWithTypeAndModeByReservation.subclass:
            return getReservedSkybillWithTypeAndModeByReservation.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillWithTypeAndModeByReservation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_reservationNumber(self):
        return self.reservationNumber
    def set_reservationNumber(self, reservationNumber):
        self.reservationNumber = reservationNumber
    def get_mode(self):
        return self.mode
    def set_mode(self, mode):
        self.mode = mode
    def _hasContent(self):
        if (
            self.reservationNumber is not None or
            self.mode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeByReservation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillWithTypeAndModeByReservation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillWithTypeAndModeByReservation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillWithTypeAndModeByReservation')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillWithTypeAndModeByReservation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillWithTypeAndModeByReservation'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeByReservation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.reservationNumber is not None:
            namespaceprefix_ = self.reservationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.reservationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreservationNumber>%s</%sreservationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reservationNumber), input_name='reservationNumber')), namespaceprefix_ , eol_))
        if self.mode is not None:
            namespaceprefix_ = self.mode_nsprefix_ + ':' if (UseCapturedNS_ and self.mode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smode>%s</%smode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mode), input_name='mode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'reservationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reservationNumber')
            value_ = self.gds_validate_string(value_, node, 'reservationNumber')
            self.reservationNumber = value_
            self.reservationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mode')
            value_ = self.gds_validate_string(value_, node, 'mode')
            self.mode = value_
            self.mode_nsprefix_ = child_.prefix
# end class getReservedSkybillWithTypeAndModeByReservation


class getReservedSkybillWithTypeAndModeByReservationResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillWithTypeAndModeByReservationResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillWithTypeAndModeByReservationResponse.subclass:
            return getReservedSkybillWithTypeAndModeByReservationResponse.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillWithTypeAndModeByReservationResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeByReservationResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillWithTypeAndModeByReservationResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillWithTypeAndModeByReservationResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillWithTypeAndModeByReservationResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillWithTypeAndModeByReservationResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillWithTypeAndModeByReservationResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeByReservationResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultGetReservedSkybillWithTypeValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getReservedSkybillWithTypeAndModeByReservationResponse


class creerEnlevementEurope(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, headerValue=None, password=None, datePassage=None, donneurDOrdre=None, adresseEnlevement=None, destinatairesEsd=None, locale=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        if isinstance(datePassage, BaseStrType_):
            initvalue_ = datetime_.datetime.strptime(datePassage, '%Y-%m-%dT%H:%M:%S')
        else:
            initvalue_ = datePassage
        self.datePassage = initvalue_
        self.datePassage_nsprefix_ = None
        self.donneurDOrdre = donneurDOrdre
        self.donneurDOrdre_nsprefix_ = None
        self.adresseEnlevement = adresseEnlevement
        self.adresseEnlevement_nsprefix_ = None
        self.destinatairesEsd = destinatairesEsd
        self.destinatairesEsd_nsprefix_ = None
        self.locale = locale
        self.locale_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, creerEnlevementEurope)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if creerEnlevementEurope.subclass:
            return creerEnlevementEurope.subclass(*args_, **kwargs_)
        else:
            return creerEnlevementEurope(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_datePassage(self):
        return self.datePassage
    def set_datePassage(self, datePassage):
        self.datePassage = datePassage
    def get_donneurDOrdre(self):
        return self.donneurDOrdre
    def set_donneurDOrdre(self, donneurDOrdre):
        self.donneurDOrdre = donneurDOrdre
    def get_adresseEnlevement(self):
        return self.adresseEnlevement
    def set_adresseEnlevement(self, adresseEnlevement):
        self.adresseEnlevement = adresseEnlevement
    def get_destinatairesEsd(self):
        return self.destinatairesEsd
    def set_destinatairesEsd(self, destinatairesEsd):
        self.destinatairesEsd = destinatairesEsd
    def get_locale(self):
        return self.locale
    def set_locale(self, locale):
        self.locale = locale
    def _hasContent(self):
        if (
            self.headerValue is not None or
            self.password is not None or
            self.datePassage is not None or
            self.donneurDOrdre is not None or
            self.adresseEnlevement is not None or
            self.destinatairesEsd is not None or
            self.locale is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='creerEnlevementEurope', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('creerEnlevementEurope')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'creerEnlevementEurope':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='creerEnlevementEurope')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='creerEnlevementEurope', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='creerEnlevementEurope'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='creerEnlevementEurope', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.datePassage is not None:
            namespaceprefix_ = self.datePassage_nsprefix_ + ':' if (UseCapturedNS_ and self.datePassage_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdatePassage>%s</%sdatePassage>%s' % (namespaceprefix_ , self.gds_format_datetime(self.datePassage, input_name='datePassage'), namespaceprefix_ , eol_))
        if self.donneurDOrdre is not None:
            namespaceprefix_ = self.donneurDOrdre_nsprefix_ + ':' if (UseCapturedNS_ and self.donneurDOrdre_nsprefix_) else ''
            self.donneurDOrdre.export(outfile, level, namespaceprefix_, namespacedef_='', name_='donneurDOrdre', pretty_print=pretty_print)
        if self.adresseEnlevement is not None:
            namespaceprefix_ = self.adresseEnlevement_nsprefix_ + ':' if (UseCapturedNS_ and self.adresseEnlevement_nsprefix_) else ''
            self.adresseEnlevement.export(outfile, level, namespaceprefix_, namespacedef_='', name_='adresseEnlevement', pretty_print=pretty_print)
        if self.destinatairesEsd is not None:
            namespaceprefix_ = self.destinatairesEsd_nsprefix_ + ':' if (UseCapturedNS_ and self.destinatairesEsd_nsprefix_) else ''
            self.destinatairesEsd.export(outfile, level, namespaceprefix_, namespacedef_='', name_='destinatairesEsd', pretty_print=pretty_print)
        if self.locale is not None:
            namespaceprefix_ = self.locale_nsprefix_ + ':' if (UseCapturedNS_ and self.locale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slocale>%s</%slocale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.locale), input_name='locale')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'datePassage':
            sval_ = child_.text
            dval_ = self.gds_parse_datetime(sval_)
            self.datePassage = dval_
            self.datePassage_nsprefix_ = child_.prefix
        elif nodeName_ == 'donneurDOrdre':
            obj_ = donneurDOrdre.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.donneurDOrdre = obj_
            obj_.original_tagname_ = 'donneurDOrdre'
        elif nodeName_ == 'adresseEnlevement':
            obj_ = adresseEnlevementV3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.adresseEnlevement = obj_
            obj_.original_tagname_ = 'adresseEnlevement'
        elif nodeName_ == 'destinatairesEsd':
            obj_ = destinatairesDpd.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.destinatairesEsd = obj_
            obj_.original_tagname_ = 'destinatairesEsd'
        elif nodeName_ == 'locale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'locale')
            value_ = self.gds_validate_string(value_, node, 'locale')
            self.locale = value_
            self.locale_nsprefix_ = child_.prefix
# end class creerEnlevementEurope


class creerEnlevementEuropeResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, creerEnlevementEuropeResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if creerEnlevementEuropeResponse.subclass:
            return creerEnlevementEuropeResponse.subclass(*args_, **kwargs_)
        else:
            return creerEnlevementEuropeResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='creerEnlevementEuropeResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('creerEnlevementEuropeResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'creerEnlevementEuropeResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='creerEnlevementEuropeResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='creerEnlevementEuropeResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='creerEnlevementEuropeResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='creerEnlevementEuropeResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultPickupOrCollectionRequest.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class creerEnlevementEuropeResponse


class shippingMultiParcelWithReservation(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, numberOfParcel=None, version=None, multiParcel=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        if recipientValue is None:
            self.recipientValue = []
        else:
            self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        if refValue is None:
            self.refValue = []
        else:
            self.refValue = refValue
        self.refValue_nsprefix_ = None
        if skybillValue is None:
            self.skybillValue = []
        else:
            self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.multiParcel = multiParcel
        self.multiParcel_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelWithReservation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelWithReservation.subclass:
            return shippingMultiParcelWithReservation.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelWithReservation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def add_recipientValue(self, value):
        self.recipientValue.append(value)
    def insert_recipientValue_at(self, index, value):
        self.recipientValue.insert(index, value)
    def replace_recipientValue_at(self, index, value):
        self.recipientValue[index] = value
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def add_refValue(self, value):
        self.refValue.append(value)
    def insert_refValue_at(self, index, value):
        self.refValue.insert(index, value)
    def replace_refValue_at(self, index, value):
        self.refValue[index] = value
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def add_skybillValue(self, value):
        self.skybillValue.append(value)
    def insert_skybillValue_at(self, index, value):
        self.skybillValue.insert(index, value)
    def replace_skybillValue_at(self, index, value):
        self.skybillValue[index] = value
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_multiParcel(self):
        return self.multiParcel
    def set_multiParcel(self, multiParcel):
        self.multiParcel = multiParcel
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue or
            self.refValue or
            self.skybillValue or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.numberOfParcel is not None or
            self.version is not None or
            self.multiParcel is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelWithReservation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelWithReservation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelWithReservation')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelWithReservation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelWithReservation'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        for recipientValue_ in self.recipientValue:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            recipientValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        for refValue_ in self.refValue:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            refValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        for skybillValue_ in self.skybillValue:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            skybillValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.multiParcel is not None:
            namespaceprefix_ = self.multiParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.multiParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smultiParcel>%s</%smultiParcel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.multiParcel), input_name='multiParcel')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdWithRefClientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue.append(obj_)
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue.append(obj_)
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillWithDimensionsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue.append(obj_)
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'multiParcel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'multiParcel')
            value_ = self.gds_validate_string(value_, node, 'multiParcel')
            self.multiParcel = value_
            self.multiParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingMultiParcelWithReservation


class shippingMultiParcelWithReservationResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelWithReservationResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelWithReservationResponse.subclass:
            return shippingMultiParcelWithReservationResponse.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelWithReservationResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelWithReservationResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelWithReservationResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelWithReservationResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelWithReservationResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelWithReservationResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultReservationMultiParcelExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingMultiParcelWithReservationResponse


class rechercherContraintesEnlevement(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, country=None, zipCode=None, city=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.country = country
        self.country_nsprefix_ = None
        self.zipCode = zipCode
        self.zipCode_nsprefix_ = None
        self.city = city
        self.city_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, rechercherContraintesEnlevement)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if rechercherContraintesEnlevement.subclass:
            return rechercherContraintesEnlevement.subclass(*args_, **kwargs_)
        else:
            return rechercherContraintesEnlevement(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_country(self):
        return self.country
    def set_country(self, country):
        self.country = country
    def get_zipCode(self):
        return self.zipCode
    def set_zipCode(self, zipCode):
        self.zipCode = zipCode
    def get_city(self):
        return self.city
    def set_city(self, city):
        self.city = city
    def _hasContent(self):
        if (
            self.country is not None or
            self.zipCode is not None or
            self.city is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='rechercherContraintesEnlevement', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('rechercherContraintesEnlevement')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'rechercherContraintesEnlevement':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='rechercherContraintesEnlevement')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='rechercherContraintesEnlevement', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='rechercherContraintesEnlevement'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='rechercherContraintesEnlevement', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.country is not None:
            namespaceprefix_ = self.country_nsprefix_ + ':' if (UseCapturedNS_ and self.country_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scountry>%s</%scountry>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.country), input_name='country')), namespaceprefix_ , eol_))
        if self.zipCode is not None:
            namespaceprefix_ = self.zipCode_nsprefix_ + ':' if (UseCapturedNS_ and self.zipCode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%szipCode>%s</%szipCode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.zipCode), input_name='zipCode')), namespaceprefix_ , eol_))
        if self.city is not None:
            namespaceprefix_ = self.city_nsprefix_ + ':' if (UseCapturedNS_ and self.city_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scity>%s</%scity>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.city), input_name='city')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'country':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'country')
            value_ = self.gds_validate_string(value_, node, 'country')
            self.country = value_
            self.country_nsprefix_ = child_.prefix
        elif nodeName_ == 'zipCode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'zipCode')
            value_ = self.gds_validate_string(value_, node, 'zipCode')
            self.zipCode = value_
            self.zipCode_nsprefix_ = child_.prefix
        elif nodeName_ == 'city':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'city')
            value_ = self.gds_validate_string(value_, node, 'city')
            self.city = value_
            self.city_nsprefix_ = child_.prefix
# end class rechercherContraintesEnlevement


class rechercherContraintesEnlevementResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, rechercherContraintesEnlevementResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if rechercherContraintesEnlevementResponse.subclass:
            return rechercherContraintesEnlevementResponse.subclass(*args_, **kwargs_)
        else:
            return rechercherContraintesEnlevementResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='rechercherContraintesEnlevementResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('rechercherContraintesEnlevementResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'rechercherContraintesEnlevementResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='rechercherContraintesEnlevementResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='rechercherContraintesEnlevementResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='rechercherContraintesEnlevementResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='rechercherContraintesEnlevementResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = esdResultContraintesAgenceValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class rechercherContraintesEnlevementResponse


class shippingWithReservationAndESDWithRefClient(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, version=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithReservationAndESDWithRefClient)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithReservationAndESDWithRefClient.subclass:
            return shippingWithReservationAndESDWithRefClient.subclass(*args_, **kwargs_)
        else:
            return shippingWithReservationAndESDWithRefClient(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.version is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationAndESDWithRefClient', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithReservationAndESDWithRefClient')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithReservationAndESDWithRefClient':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithReservationAndESDWithRefClient')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithReservationAndESDWithRefClient', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithReservationAndESDWithRefClient'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationAndESDWithRefClient', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdWithRefClientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingWithReservationAndESDWithRefClient


class shippingWithReservationAndESDWithRefClientResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithReservationAndESDWithRefClientResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithReservationAndESDWithRefClientResponse.subclass:
            return shippingWithReservationAndESDWithRefClientResponse.subclass(*args_, **kwargs_)
        else:
            return shippingWithReservationAndESDWithRefClientResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationAndESDWithRefClientResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithReservationAndESDWithRefClientResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithReservationAndESDWithRefClientResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithReservationAndESDWithRefClientResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithReservationAndESDWithRefClientResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithReservationAndESDWithRefClientResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationAndESDWithRefClientResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultReservationExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingWithReservationAndESDWithRefClientResponse


class shippingMultiParcel(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, numberOfParcel=None, version=None, multiParcel=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        if shipperValue is None:
            self.shipperValue = []
        else:
            self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        if recipientValue is None:
            self.recipientValue = []
        else:
            self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        if refValue is None:
            self.refValue = []
        else:
            self.refValue = refValue
        self.refValue_nsprefix_ = None
        if skybillValue is None:
            self.skybillValue = []
        else:
            self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.multiParcel = multiParcel
        self.multiParcel_nsprefix_ = None
        if scheduledValue is None:
            self.scheduledValue = []
        else:
            self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcel)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcel.subclass:
            return shippingMultiParcel.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcel(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def add_shipperValue(self, value):
        self.shipperValue.append(value)
    def insert_shipperValue_at(self, index, value):
        self.shipperValue.insert(index, value)
    def replace_shipperValue_at(self, index, value):
        self.shipperValue[index] = value
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def add_recipientValue(self, value):
        self.recipientValue.append(value)
    def insert_recipientValue_at(self, index, value):
        self.recipientValue.insert(index, value)
    def replace_recipientValue_at(self, index, value):
        self.recipientValue[index] = value
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def add_refValue(self, value):
        self.refValue.append(value)
    def insert_refValue_at(self, index, value):
        self.refValue.insert(index, value)
    def replace_refValue_at(self, index, value):
        self.refValue[index] = value
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def add_skybillValue(self, value):
        self.skybillValue.append(value)
    def insert_skybillValue_at(self, index, value):
        self.skybillValue.insert(index, value)
    def replace_skybillValue_at(self, index, value):
        self.skybillValue[index] = value
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_multiParcel(self):
        return self.multiParcel
    def set_multiParcel(self, multiParcel):
        self.multiParcel = multiParcel
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def add_scheduledValue(self, value):
        self.scheduledValue.append(value)
    def insert_scheduledValue_at(self, index, value):
        self.scheduledValue.insert(index, value)
    def replace_scheduledValue_at(self, index, value):
        self.scheduledValue[index] = value
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue or
            self.customerValue is not None or
            self.recipientValue or
            self.refValue or
            self.skybillValue or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.numberOfParcel is not None or
            self.version is not None or
            self.multiParcel is not None or
            self.scheduledValue
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcel', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcel')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcel':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcel')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcel', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcel'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcel', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        for shipperValue_ in self.shipperValue:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            shipperValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        for recipientValue_ in self.recipientValue:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            recipientValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        for refValue_ in self.refValue:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            refValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        for skybillValue_ in self.skybillValue:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            skybillValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.multiParcel is not None:
            namespaceprefix_ = self.multiParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.multiParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smultiParcel>%s</%smultiParcel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.multiParcel), input_name='multiParcel')), namespaceprefix_ , eol_))
        for scheduledValue_ in self.scheduledValue:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            scheduledValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdValue3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue.append(obj_)
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue.append(obj_)
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue.append(obj_)
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillWithDimensionsValueV3)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue.append(obj_)
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            obj_ = skybillParamsValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'multiParcel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'multiParcel')
            value_ = self.gds_validate_string(value_, node, 'multiParcel')
            self.multiParcel = value_
            self.multiParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue.append(obj_)
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingMultiParcel


class shippingMultiParcelResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelResponse.subclass:
            return shippingMultiParcelResponse.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultMultiParcelExpeditionValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingMultiParcelResponse


class getReservedSkybillWithTypeAndModeAuth(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, numberSearch=None, mode=None, accountNumber=None, password=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.numberSearch = numberSearch
        self.numberSearch_nsprefix_ = None
        self.mode = mode
        self.mode_nsprefix_ = None
        self.accountNumber = accountNumber
        self.accountNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillWithTypeAndModeAuth)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillWithTypeAndModeAuth.subclass:
            return getReservedSkybillWithTypeAndModeAuth.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillWithTypeAndModeAuth(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_numberSearch(self):
        return self.numberSearch
    def set_numberSearch(self, numberSearch):
        self.numberSearch = numberSearch
    def get_mode(self):
        return self.mode
    def set_mode(self, mode):
        self.mode = mode
    def get_accountNumber(self):
        return self.accountNumber
    def set_accountNumber(self, accountNumber):
        self.accountNumber = accountNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def _hasContent(self):
        if (
            self.numberSearch is not None or
            self.mode is not None or
            self.accountNumber is not None or
            self.password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeAuth', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillWithTypeAndModeAuth')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillWithTypeAndModeAuth':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillWithTypeAndModeAuth')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillWithTypeAndModeAuth', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillWithTypeAndModeAuth'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeAuth', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.numberSearch is not None:
            namespaceprefix_ = self.numberSearch_nsprefix_ + ':' if (UseCapturedNS_ and self.numberSearch_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberSearch>%s</%snumberSearch>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.numberSearch), input_name='numberSearch')), namespaceprefix_ , eol_))
        if self.mode is not None:
            namespaceprefix_ = self.mode_nsprefix_ + ':' if (UseCapturedNS_ and self.mode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smode>%s</%smode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mode), input_name='mode')), namespaceprefix_ , eol_))
        if self.accountNumber is not None:
            namespaceprefix_ = self.accountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.accountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccountNumber>%s</%saccountNumber>%s' % (namespaceprefix_ , self.gds_format_integer(self.accountNumber, input_name='accountNumber'), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'numberSearch':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'numberSearch')
            value_ = self.gds_validate_string(value_, node, 'numberSearch')
            self.numberSearch = value_
            self.numberSearch_nsprefix_ = child_.prefix
        elif nodeName_ == 'mode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mode')
            value_ = self.gds_validate_string(value_, node, 'mode')
            self.mode = value_
            self.mode_nsprefix_ = child_.prefix
        elif nodeName_ == 'accountNumber' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'accountNumber')
            ival_ = self.gds_validate_integer(ival_, node, 'accountNumber')
            self.accountNumber = ival_
            self.accountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
# end class getReservedSkybillWithTypeAndModeAuth


class getReservedSkybillWithTypeAndModeAuthResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillWithTypeAndModeAuthResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillWithTypeAndModeAuthResponse.subclass:
            return getReservedSkybillWithTypeAndModeAuthResponse.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillWithTypeAndModeAuthResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeAuthResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillWithTypeAndModeAuthResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillWithTypeAndModeAuthResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillWithTypeAndModeAuthResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillWithTypeAndModeAuthResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillWithTypeAndModeAuthResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeAuthResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultGetReservedSkybillWithTypeValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getReservedSkybillWithTypeAndModeAuthResponse


class shipping(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shipping)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shipping.subclass:
            return shipping.subclass(*args_, **kwargs_)
        else:
            return shipping(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shipping', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shipping')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shipping':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shipping')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shipping', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shipping'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shipping', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
# end class shipping


class shippingResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingResponse.subclass:
            return shippingResponse.subclass(*args_, **kwargs_)
        else:
            return shippingResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingResponse


class getReservedSkybillWithTypeAndMode(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, reservationNumber=None, mode=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.reservationNumber = reservationNumber
        self.reservationNumber_nsprefix_ = None
        self.mode = mode
        self.mode_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillWithTypeAndMode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillWithTypeAndMode.subclass:
            return getReservedSkybillWithTypeAndMode.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillWithTypeAndMode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_reservationNumber(self):
        return self.reservationNumber
    def set_reservationNumber(self, reservationNumber):
        self.reservationNumber = reservationNumber
    def get_mode(self):
        return self.mode
    def set_mode(self, mode):
        self.mode = mode
    def _hasContent(self):
        if (
            self.reservationNumber is not None or
            self.mode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndMode', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillWithTypeAndMode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillWithTypeAndMode':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillWithTypeAndMode')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillWithTypeAndMode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillWithTypeAndMode'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndMode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.reservationNumber is not None:
            namespaceprefix_ = self.reservationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.reservationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreservationNumber>%s</%sreservationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reservationNumber), input_name='reservationNumber')), namespaceprefix_ , eol_))
        if self.mode is not None:
            namespaceprefix_ = self.mode_nsprefix_ + ':' if (UseCapturedNS_ and self.mode_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smode>%s</%smode>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.mode), input_name='mode')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'reservationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reservationNumber')
            value_ = self.gds_validate_string(value_, node, 'reservationNumber')
            self.reservationNumber = value_
            self.reservationNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'mode':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'mode')
            value_ = self.gds_validate_string(value_, node, 'mode')
            self.mode = value_
            self.mode_nsprefix_ = child_.prefix
# end class getReservedSkybillWithTypeAndMode


class getReservedSkybillWithTypeAndModeResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillWithTypeAndModeResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillWithTypeAndModeResponse.subclass:
            return getReservedSkybillWithTypeAndModeResponse.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillWithTypeAndModeResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillWithTypeAndModeResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillWithTypeAndModeResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillWithTypeAndModeResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillWithTypeAndModeResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillWithTypeAndModeResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeAndModeResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultGetReservedSkybillWithTypeValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getReservedSkybillWithTypeAndModeResponse


class getReservedSkybillWithType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, reservationNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.reservationNumber = reservationNumber
        self.reservationNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillWithType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillWithType.subclass:
            return getReservedSkybillWithType.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillWithType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_reservationNumber(self):
        return self.reservationNumber
    def set_reservationNumber(self, reservationNumber):
        self.reservationNumber = reservationNumber
    def _hasContent(self):
        if (
            self.reservationNumber is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillWithType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillWithType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillWithType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillWithType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillWithType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.reservationNumber is not None:
            namespaceprefix_ = self.reservationNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.reservationNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sreservationNumber>%s</%sreservationNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.reservationNumber), input_name='reservationNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'reservationNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'reservationNumber')
            value_ = self.gds_validate_string(value_, node, 'reservationNumber')
            self.reservationNumber = value_
            self.reservationNumber_nsprefix_ = child_.prefix
# end class getReservedSkybillWithType


class getReservedSkybillWithTypeResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getReservedSkybillWithTypeResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getReservedSkybillWithTypeResponse.subclass:
            return getReservedSkybillWithTypeResponse.subclass(*args_, **kwargs_)
        else:
            return getReservedSkybillWithTypeResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getReservedSkybillWithTypeResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getReservedSkybillWithTypeResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getReservedSkybillWithTypeResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getReservedSkybillWithTypeResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getReservedSkybillWithTypeResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getReservedSkybillWithTypeResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultGetReservedSkybillWithTypeValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getReservedSkybillWithTypeResponse


class shippingMultiParcelWithReservationV3(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, numberOfParcel=None, version=None, multiParcel=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        if recipientValue is None:
            self.recipientValue = []
        else:
            self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        if refValue is None:
            self.refValue = []
        else:
            self.refValue = refValue
        self.refValue_nsprefix_ = None
        if skybillValue is None:
            self.skybillValue = []
        else:
            self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.multiParcel = multiParcel
        self.multiParcel_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelWithReservationV3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelWithReservationV3.subclass:
            return shippingMultiParcelWithReservationV3.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelWithReservationV3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def add_recipientValue(self, value):
        self.recipientValue.append(value)
    def insert_recipientValue_at(self, index, value):
        self.recipientValue.insert(index, value)
    def replace_recipientValue_at(self, index, value):
        self.recipientValue[index] = value
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def add_refValue(self, value):
        self.refValue.append(value)
    def insert_refValue_at(self, index, value):
        self.refValue.insert(index, value)
    def replace_refValue_at(self, index, value):
        self.refValue[index] = value
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def add_skybillValue(self, value):
        self.skybillValue.append(value)
    def insert_skybillValue_at(self, index, value):
        self.skybillValue.insert(index, value)
    def replace_skybillValue_at(self, index, value):
        self.skybillValue[index] = value
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_multiParcel(self):
        return self.multiParcel
    def set_multiParcel(self, multiParcel):
        self.multiParcel = multiParcel
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue or
            self.refValue or
            self.skybillValue or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.numberOfParcel is not None or
            self.version is not None or
            self.multiParcel is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationV3', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelWithReservationV3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelWithReservationV3':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelWithReservationV3')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelWithReservationV3', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelWithReservationV3'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationV3', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        for recipientValue_ in self.recipientValue:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            recipientValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        for refValue_ in self.refValue:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            refValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        for skybillValue_ in self.skybillValue:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            skybillValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.multiParcel is not None:
            namespaceprefix_ = self.multiParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.multiParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smultiParcel>%s</%smultiParcel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.multiParcel), input_name='multiParcel')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            obj_ = esdValue3.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue.append(obj_)
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue.append(obj_)
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillWithDimensionsValueV2)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue.append(obj_)
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'multiParcel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'multiParcel')
            value_ = self.gds_validate_string(value_, node, 'multiParcel')
            self.multiParcel = value_
            self.multiParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingMultiParcelWithReservationV3


class shippingMultiParcelWithReservationV3Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelWithReservationV3Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelWithReservationV3Response.subclass:
            return shippingMultiParcelWithReservationV3Response.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelWithReservationV3Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationV3Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelWithReservationV3Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelWithReservationV3Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelWithReservationV3Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelWithReservationV3Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelWithReservationV3Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationV3Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultReservationMultiParcelExpeditionValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingMultiParcelWithReservationV3Response


class annulerEnlevements(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, accountNumber=None, password=None, locale=None, esdNumber=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.accountNumber = accountNumber
        self.accountNumber_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.locale = locale
        self.locale_nsprefix_ = None
        if esdNumber is None:
            self.esdNumber = []
        else:
            self.esdNumber = esdNumber
        self.esdNumber_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, annulerEnlevements)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if annulerEnlevements.subclass:
            return annulerEnlevements.subclass(*args_, **kwargs_)
        else:
            return annulerEnlevements(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_accountNumber(self):
        return self.accountNumber
    def set_accountNumber(self, accountNumber):
        self.accountNumber = accountNumber
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_locale(self):
        return self.locale
    def set_locale(self, locale):
        self.locale = locale
    def get_esdNumber(self):
        return self.esdNumber
    def set_esdNumber(self, esdNumber):
        self.esdNumber = esdNumber
    def add_esdNumber(self, value):
        self.esdNumber.append(value)
    def insert_esdNumber_at(self, index, value):
        self.esdNumber.insert(index, value)
    def replace_esdNumber_at(self, index, value):
        self.esdNumber[index] = value
    def _hasContent(self):
        if (
            self.accountNumber is not None or
            self.password is not None or
            self.locale is not None or
            self.esdNumber
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='annulerEnlevements', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('annulerEnlevements')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'annulerEnlevements':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='annulerEnlevements')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='annulerEnlevements', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='annulerEnlevements'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='annulerEnlevements', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.accountNumber is not None:
            namespaceprefix_ = self.accountNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.accountNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccountNumber>%s</%saccountNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.accountNumber), input_name='accountNumber')), namespaceprefix_ , eol_))
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.locale is not None:
            namespaceprefix_ = self.locale_nsprefix_ + ':' if (UseCapturedNS_ and self.locale_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slocale>%s</%slocale>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.locale), input_name='locale')), namespaceprefix_ , eol_))
        for esdNumber_ in self.esdNumber:
            namespaceprefix_ = self.esdNumber_nsprefix_ + ':' if (UseCapturedNS_ and self.esdNumber_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sesdNumber>%s</%sesdNumber>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(esdNumber_), input_name='esdNumber')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'accountNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'accountNumber')
            value_ = self.gds_validate_string(value_, node, 'accountNumber')
            self.accountNumber = value_
            self.accountNumber_nsprefix_ = child_.prefix
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'locale':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'locale')
            value_ = self.gds_validate_string(value_, node, 'locale')
            self.locale = value_
            self.locale_nsprefix_ = child_.prefix
        elif nodeName_ == 'esdNumber':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'esdNumber')
            value_ = self.gds_validate_string(value_, node, 'esdNumber')
            self.esdNumber.append(value_)
            self.esdNumber_nsprefix_ = child_.prefix
# end class annulerEnlevements


class annulerEnlevementsResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, annulerEnlevementsResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if annulerEnlevementsResponse.subclass:
            return annulerEnlevementsResponse.subclass(*args_, **kwargs_)
        else:
            return annulerEnlevementsResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='annulerEnlevementsResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('annulerEnlevementsResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'annulerEnlevementsResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='annulerEnlevementsResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='annulerEnlevementsResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='annulerEnlevementsResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='annulerEnlevementsResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultAnnulerEnlevement.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class annulerEnlevementsResponse


class shippingMultiParcelWithReservationV2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, numberOfParcel=None, version=None, multiParcel=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        if recipientValue is None:
            self.recipientValue = []
        else:
            self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        if refValue is None:
            self.refValue = []
        else:
            self.refValue = refValue
        self.refValue_nsprefix_ = None
        if skybillValue is None:
            self.skybillValue = []
        else:
            self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.numberOfParcel = numberOfParcel
        self.numberOfParcel_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.multiParcel = multiParcel
        self.multiParcel_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelWithReservationV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelWithReservationV2.subclass:
            return shippingMultiParcelWithReservationV2.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelWithReservationV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def add_recipientValue(self, value):
        self.recipientValue.append(value)
    def insert_recipientValue_at(self, index, value):
        self.recipientValue.insert(index, value)
    def replace_recipientValue_at(self, index, value):
        self.recipientValue[index] = value
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def add_refValue(self, value):
        self.refValue.append(value)
    def insert_refValue_at(self, index, value):
        self.refValue.insert(index, value)
    def replace_refValue_at(self, index, value):
        self.refValue[index] = value
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def add_skybillValue(self, value):
        self.skybillValue.append(value)
    def insert_skybillValue_at(self, index, value):
        self.skybillValue.insert(index, value)
    def replace_skybillValue_at(self, index, value):
        self.skybillValue[index] = value
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_numberOfParcel(self):
        return self.numberOfParcel
    def set_numberOfParcel(self, numberOfParcel):
        self.numberOfParcel = numberOfParcel
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_multiParcel(self):
        return self.multiParcel
    def set_multiParcel(self, multiParcel):
        self.multiParcel = multiParcel
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue or
            self.refValue or
            self.skybillValue or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.numberOfParcel is not None or
            self.version is not None or
            self.multiParcel is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelWithReservationV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelWithReservationV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelWithReservationV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelWithReservationV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelWithReservationV2'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationV2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        for recipientValue_ in self.recipientValue:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            recipientValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        for refValue_ in self.refValue:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            refValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        for skybillValue_ in self.skybillValue:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            skybillValue_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.numberOfParcel is not None:
            namespaceprefix_ = self.numberOfParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.numberOfParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%snumberOfParcel>%s</%snumberOfParcel>%s' % (namespaceprefix_ , self.gds_format_integer(self.numberOfParcel, input_name='numberOfParcel'), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.multiParcel is not None:
            namespaceprefix_ = self.multiParcel_nsprefix_ + ':' if (UseCapturedNS_ and self.multiParcel_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smultiParcel>%s</%smultiParcel>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.multiParcel), input_name='multiParcel')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdWithRefClientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue.append(obj_)
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue.append(obj_)
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillWithDimensionsValueV2)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue.append(obj_)
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'numberOfParcel' and child_.text:
            sval_ = child_.text
            ival_ = self.gds_parse_integer(sval_, node, 'numberOfParcel')
            ival_ = self.gds_validate_integer(ival_, node, 'numberOfParcel')
            self.numberOfParcel = ival_
            self.numberOfParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'multiParcel':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'multiParcel')
            value_ = self.gds_validate_string(value_, node, 'multiParcel')
            self.multiParcel = value_
            self.multiParcel_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingMultiParcelWithReservationV2


class shippingMultiParcelWithReservationV2Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingMultiParcelWithReservationV2Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingMultiParcelWithReservationV2Response.subclass:
            return shippingMultiParcelWithReservationV2Response.subclass(*args_, **kwargs_)
        else:
            return shippingMultiParcelWithReservationV2Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationV2Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingMultiParcelWithReservationV2Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingMultiParcelWithReservationV2Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingMultiParcelWithReservationV2Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingMultiParcelWithReservationV2Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingMultiParcelWithReservationV2Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingMultiParcelWithReservationV2Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultReservationMultiParcelExpeditionValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingMultiParcelWithReservationV2Response


class shippingWithReservationV2(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, version=None, scheduledValue=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
        self.version = version
        self.version_nsprefix_ = None
        self.scheduledValue = scheduledValue
        self.scheduledValue_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithReservationV2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithReservationV2.subclass:
            return shippingWithReservationV2.subclass(*args_, **kwargs_)
        else:
            return shippingWithReservationV2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def get_version(self):
        return self.version
    def set_version(self, version):
        self.version = version
    def get_scheduledValue(self):
        return self.scheduledValue
    def set_scheduledValue(self, scheduledValue):
        self.scheduledValue = scheduledValue
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None or
            self.version is not None or
            self.scheduledValue is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationV2', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithReservationV2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithReservationV2':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithReservationV2')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithReservationV2', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithReservationV2'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationV2', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
        if self.version is not None:
            namespaceprefix_ = self.version_nsprefix_ + ':' if (UseCapturedNS_ and self.version_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sversion>%s</%sversion>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.version), input_name='version')), namespaceprefix_ , eol_))
        if self.scheduledValue is not None:
            namespaceprefix_ = self.scheduledValue_nsprefix_ + ':' if (UseCapturedNS_ and self.scheduledValue_nsprefix_) else ''
            self.scheduledValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='scheduledValue', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdWithRefClientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            obj_ = skybillValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
        elif nodeName_ == 'version':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'version')
            value_ = self.gds_validate_string(value_, node, 'version')
            self.version = value_
            self.version_nsprefix_ = child_.prefix
        elif nodeName_ == 'scheduledValue':
            obj_ = scheduledValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.scheduledValue = obj_
            obj_.original_tagname_ = 'scheduledValue'
# end class shippingWithReservationV2


class shippingWithReservationV2Response(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithReservationV2Response)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithReservationV2Response.subclass:
            return shippingWithReservationV2Response.subclass(*args_, **kwargs_)
        else:
            return shippingWithReservationV2Response(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationV2Response', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithReservationV2Response')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithReservationV2Response':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithReservationV2Response')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithReservationV2Response', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithReservationV2Response'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationV2Response', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultReservationExpeditionValueV2.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingWithReservationV2Response


class getShippingInformation(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, headerValue=None, shipperValue=None, recipientValue=None, skybillValueBase=None, password=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.skybillValueBase = skybillValueBase
        self.skybillValueBase_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getShippingInformation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getShippingInformation.subclass:
            return getShippingInformation.subclass(*args_, **kwargs_)
        else:
            return getShippingInformation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_skybillValueBase(self):
        return self.skybillValueBase
    def set_skybillValueBase(self, skybillValueBase):
        self.skybillValueBase = skybillValueBase
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def _hasContent(self):
        if (
            self.headerValue is not None or
            self.shipperValue is not None or
            self.recipientValue is not None or
            self.skybillValueBase is not None or
            self.password is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getShippingInformation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getShippingInformation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getShippingInformation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getShippingInformation')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getShippingInformation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getShippingInformation'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getShippingInformation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.skybillValueBase is not None:
            namespaceprefix_ = self.skybillValueBase_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValueBase_nsprefix_) else ''
            self.skybillValueBase.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValueBase', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'skybillValueBase':
            obj_ = skybillValueBase.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValueBase = obj_
            obj_.original_tagname_ = 'skybillValueBase'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
# end class getShippingInformation


class getShippingInformationResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, getShippingInformationResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if getShippingInformationResponse.subclass:
            return getShippingInformationResponse.subclass(*args_, **kwargs_)
        else:
            return getShippingInformationResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getShippingInformationResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('getShippingInformationResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'getShippingInformationResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='getShippingInformationResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='getShippingInformationResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='getShippingInformationResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='getShippingInformationResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            obj_ = resultShippingInfo.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class getShippingInformationResponse


class shippingWithReservation(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, esdValue=None, headerValue=None, shipperValue=None, customerValue=None, recipientValue=None, refValue=None, skybillValue=None, skybillParamsValue=None, password=None, modeRetour=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.esdValue = esdValue
        self.esdValue_nsprefix_ = None
        self.headerValue = headerValue
        self.headerValue_nsprefix_ = None
        self.shipperValue = shipperValue
        self.shipperValue_nsprefix_ = None
        self.customerValue = customerValue
        self.customerValue_nsprefix_ = None
        self.recipientValue = recipientValue
        self.recipientValue_nsprefix_ = None
        self.refValue = refValue
        self.refValue_nsprefix_ = None
        self.skybillValue = skybillValue
        self.skybillValue_nsprefix_ = None
        self.skybillParamsValue = skybillParamsValue
        self.skybillParamsValue_nsprefix_ = None
        self.password = password
        self.password_nsprefix_ = None
        self.modeRetour = modeRetour
        self.modeRetour_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithReservation)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithReservation.subclass:
            return shippingWithReservation.subclass(*args_, **kwargs_)
        else:
            return shippingWithReservation(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_esdValue(self):
        return self.esdValue
    def set_esdValue(self, esdValue):
        self.esdValue = esdValue
    def get_headerValue(self):
        return self.headerValue
    def set_headerValue(self, headerValue):
        self.headerValue = headerValue
    def get_shipperValue(self):
        return self.shipperValue
    def set_shipperValue(self, shipperValue):
        self.shipperValue = shipperValue
    def get_customerValue(self):
        return self.customerValue
    def set_customerValue(self, customerValue):
        self.customerValue = customerValue
    def get_recipientValue(self):
        return self.recipientValue
    def set_recipientValue(self, recipientValue):
        self.recipientValue = recipientValue
    def get_refValue(self):
        return self.refValue
    def set_refValue(self, refValue):
        self.refValue = refValue
    def get_skybillValue(self):
        return self.skybillValue
    def set_skybillValue(self, skybillValue):
        self.skybillValue = skybillValue
    def get_skybillParamsValue(self):
        return self.skybillParamsValue
    def set_skybillParamsValue(self, skybillParamsValue):
        self.skybillParamsValue = skybillParamsValue
    def get_password(self):
        return self.password
    def set_password(self, password):
        self.password = password
    def get_modeRetour(self):
        return self.modeRetour
    def set_modeRetour(self, modeRetour):
        self.modeRetour = modeRetour
    def _hasContent(self):
        if (
            self.esdValue is not None or
            self.headerValue is not None or
            self.shipperValue is not None or
            self.customerValue is not None or
            self.recipientValue is not None or
            self.refValue is not None or
            self.skybillValue is not None or
            self.skybillParamsValue is not None or
            self.password is not None or
            self.modeRetour is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservation', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithReservation')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithReservation':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithReservation')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithReservation', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithReservation'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservation', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.esdValue is not None:
            namespaceprefix_ = self.esdValue_nsprefix_ + ':' if (UseCapturedNS_ and self.esdValue_nsprefix_) else ''
            self.esdValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='esdValue', pretty_print=pretty_print)
        if self.headerValue is not None:
            namespaceprefix_ = self.headerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.headerValue_nsprefix_) else ''
            self.headerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='headerValue', pretty_print=pretty_print)
        if self.shipperValue is not None:
            namespaceprefix_ = self.shipperValue_nsprefix_ + ':' if (UseCapturedNS_ and self.shipperValue_nsprefix_) else ''
            self.shipperValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='shipperValue', pretty_print=pretty_print)
        if self.customerValue is not None:
            namespaceprefix_ = self.customerValue_nsprefix_ + ':' if (UseCapturedNS_ and self.customerValue_nsprefix_) else ''
            self.customerValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='customerValue', pretty_print=pretty_print)
        if self.recipientValue is not None:
            namespaceprefix_ = self.recipientValue_nsprefix_ + ':' if (UseCapturedNS_ and self.recipientValue_nsprefix_) else ''
            self.recipientValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='recipientValue', pretty_print=pretty_print)
        if self.refValue is not None:
            namespaceprefix_ = self.refValue_nsprefix_ + ':' if (UseCapturedNS_ and self.refValue_nsprefix_) else ''
            self.refValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='refValue', pretty_print=pretty_print)
        if self.skybillValue is not None:
            namespaceprefix_ = self.skybillValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillValue_nsprefix_) else ''
            self.skybillValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillValue', pretty_print=pretty_print)
        if self.skybillParamsValue is not None:
            namespaceprefix_ = self.skybillParamsValue_nsprefix_ + ':' if (UseCapturedNS_ and self.skybillParamsValue_nsprefix_) else ''
            self.skybillParamsValue.export(outfile, level, namespaceprefix_, namespacedef_='', name_='skybillParamsValue', pretty_print=pretty_print)
        if self.password is not None:
            namespaceprefix_ = self.password_nsprefix_ + ':' if (UseCapturedNS_ and self.password_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%spassword>%s</%spassword>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.password), input_name='password')), namespaceprefix_ , eol_))
        if self.modeRetour is not None:
            namespaceprefix_ = self.modeRetour_nsprefix_ + ':' if (UseCapturedNS_ and self.modeRetour_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smodeRetour>%s</%smodeRetour>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.modeRetour), input_name='modeRetour')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'esdValue':
            class_obj_ = self.get_class_obj_(child_, esdValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.esdValue = obj_
            obj_.original_tagname_ = 'esdValue'
        elif nodeName_ == 'headerValue':
            class_obj_ = self.get_class_obj_(child_, headerValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.headerValue = obj_
            obj_.original_tagname_ = 'headerValue'
        elif nodeName_ == 'shipperValue':
            class_obj_ = self.get_class_obj_(child_, shipperValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.shipperValue = obj_
            obj_.original_tagname_ = 'shipperValue'
        elif nodeName_ == 'customerValue':
            obj_ = customerValue.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.customerValue = obj_
            obj_.original_tagname_ = 'customerValue'
        elif nodeName_ == 'recipientValue':
            class_obj_ = self.get_class_obj_(child_, recipientValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.recipientValue = obj_
            obj_.original_tagname_ = 'recipientValue'
        elif nodeName_ == 'refValue':
            class_obj_ = self.get_class_obj_(child_, refValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.refValue = obj_
            obj_.original_tagname_ = 'refValue'
        elif nodeName_ == 'skybillValue':
            class_obj_ = self.get_class_obj_(child_, skybillValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillValue = obj_
            obj_.original_tagname_ = 'skybillValue'
        elif nodeName_ == 'skybillParamsValue':
            class_obj_ = self.get_class_obj_(child_, skybillParamsValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.skybillParamsValue = obj_
            obj_.original_tagname_ = 'skybillParamsValue'
        elif nodeName_ == 'password':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'password')
            value_ = self.gds_validate_string(value_, node, 'password')
            self.password = value_
            self.password_nsprefix_ = child_.prefix
        elif nodeName_ == 'modeRetour':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'modeRetour')
            value_ = self.gds_validate_string(value_, node, 'modeRetour')
            self.modeRetour = value_
            self.modeRetour_nsprefix_ = child_.prefix
# end class shippingWithReservation


class shippingWithReservationResponse(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, return_=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.return_ = return_
        self.return__nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, shippingWithReservationResponse)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if shippingWithReservationResponse.subclass:
            return shippingWithReservationResponse.subclass(*args_, **kwargs_)
        else:
            return shippingWithReservationResponse(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_return(self):
        return self.return_
    def set_return(self, return_):
        self.return_ = return_
    def _hasContent(self):
        if (
            self.return_ is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationResponse', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('shippingWithReservationResponse')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'shippingWithReservationResponse':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='shippingWithReservationResponse')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='shippingWithReservationResponse', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='shippingWithReservationResponse'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='shippingWithReservationResponse', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.return_ is not None:
            namespaceprefix_ = self.return__nsprefix_ + ':' if (UseCapturedNS_ and self.return__nsprefix_) else ''
            self.return_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='return', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'return':
            class_obj_ = self.get_class_obj_(child_, resultReservationExpeditionValue)
            obj_ = class_obj_.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.return_ = obj_
            obj_.original_tagname_ = 'return'
# end class shippingWithReservationResponse


class statutType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, entry=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        if entry is None:
            self.entry = []
        else:
            self.entry = entry
        self.entry_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, statutType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if statutType.subclass:
            return statutType.subclass(*args_, **kwargs_)
        else:
            return statutType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_entry(self):
        return self.entry
    def set_entry(self, entry):
        self.entry = entry
    def add_entry(self, value):
        self.entry.append(value)
    def insert_entry_at(self, index, value):
        self.entry.insert(index, value)
    def replace_entry_at(self, index, value):
        self.entry[index] = value
    def _hasContent(self):
        if (
            self.entry
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='statutType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('statutType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'statutType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='statutType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='statutType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='statutType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='statutType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for entry_ in self.entry:
            namespaceprefix_ = self.entry_nsprefix_ + ':' if (UseCapturedNS_ and self.entry_nsprefix_) else ''
            entry_.export(outfile, level, namespaceprefix_, namespacedef_='', name_='entry', pretty_print=pretty_print)
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'entry':
            obj_ = entryType.factory(parent_object_=self)
            obj_.build(child_, gds_collector_=gds_collector_)
            self.entry.append(obj_)
            obj_.original_tagname_ = 'entry'
# end class statutType


class entryType(GeneratedsSuper):
    __hash__ = GeneratedsSuper.__hash__
    subclass = None
    superclass = None
    def __init__(self, key=None, value=None, gds_collector_=None, **kwargs_):
        self.gds_collector_ = gds_collector_
        self.gds_elementtree_node_ = None
        self.original_tagname_ = None
        self.parent_object_ = kwargs_.get('parent_object_')
        self.ns_prefix_ = None
        self.key = key
        self.key_nsprefix_ = None
        self.value = value
        self.value_nsprefix_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, entryType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if entryType.subclass:
            return entryType.subclass(*args_, **kwargs_)
        else:
            return entryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ns_prefix_(self):
        return self.ns_prefix_
    def set_ns_prefix_(self, ns_prefix):
        self.ns_prefix_ = ns_prefix
    def get_key(self):
        return self.key
    def set_key(self, key):
        self.key = key
    def get_value(self):
        return self.value
    def set_value(self, value):
        self.value = value
    def _hasContent(self):
        if (
            self.key is not None or
            self.value is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='entryType', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('entryType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None and name_ == 'entryType':
            name_ = self.original_tagname_
        if UseCapturedNS_ and self.ns_prefix_:
            namespaceprefix_ = self.ns_prefix_ + ':'
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespaceprefix_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self._exportAttributes(outfile, level, already_processed, namespaceprefix_, name_='entryType')
        if self._hasContent():
            outfile.write('>%s' % (eol_, ))
            self._exportChildren(outfile, level + 1, namespaceprefix_, namespacedef_, name_='entryType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespaceprefix_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def _exportAttributes(self, outfile, level, already_processed, namespaceprefix_='', name_='entryType'):
        pass
    def _exportChildren(self, outfile, level, namespaceprefix_='', namespacedef_='', name_='entryType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.key is not None:
            namespaceprefix_ = self.key_nsprefix_ + ':' if (UseCapturedNS_ and self.key_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%skey>%s</%skey>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.key), input_name='key')), namespaceprefix_ , eol_))
        if self.value is not None:
            namespaceprefix_ = self.value_nsprefix_ + ':' if (UseCapturedNS_ and self.value_nsprefix_) else ''
            showIndent(outfile, level, pretty_print)
            outfile.write('<%svalue>%s</%svalue>%s' % (namespaceprefix_ , self.gds_encode(self.gds_format_string(quote_xml(self.value), input_name='value')), namespaceprefix_ , eol_))
    def build(self, node, gds_collector_=None):
        self.gds_collector_ = gds_collector_
        if SaveElementTreeNode:
            self.gds_elementtree_node_ = node
        already_processed = set()
        self.ns_prefix_ = node.prefix
        self._buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self._buildChildren(child, node, nodeName_, gds_collector_=gds_collector_)
        return self
    def _buildAttributes(self, node, attrs, already_processed):
        pass
    def _buildChildren(self, child_, node, nodeName_, fromsubclass_=False, gds_collector_=None):
        if nodeName_ == 'key':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'key')
            value_ = self.gds_validate_string(value_, node, 'key')
            self.key = value_
            self.key_nsprefix_ = child_.prefix
        elif nodeName_ == 'value':
            value_ = child_.text
            value_ = self.gds_parse_string(value_, node, 'value')
            value_ = self.gds_validate_string(value_, node, 'value')
            self.value = value_
            self.value_nsprefix_ = child_.prefix
# end class entryType


GDSClassesMapping = {
    'annulerEnlevements': annulerEnlevements,
    'annulerEnlevementsResponse': annulerEnlevementsResponse,
    'creerEnlevementEurope': creerEnlevementEurope,
    'creerEnlevementEuropeResponse': creerEnlevementEuropeResponse,
    'creerEnlevementNational': creerEnlevementNational,
    'creerEnlevementNationalResponse': creerEnlevementNationalResponse,
    'faisabiliteESD': faisabiliteESD,
    'faisabiliteESDResponse': faisabiliteESDResponse,
    'getReservedSkybill': getReservedSkybill,
    'getReservedSkybillResponse': getReservedSkybillResponse,
    'getReservedSkybillWithType': getReservedSkybillWithType,
    'getReservedSkybillWithTypeAndMode': getReservedSkybillWithTypeAndMode,
    'getReservedSkybillWithTypeAndModeAuth': getReservedSkybillWithTypeAndModeAuth,
    'getReservedSkybillWithTypeAndModeAuthResponse': getReservedSkybillWithTypeAndModeAuthResponse,
    'getReservedSkybillWithTypeAndModeByReservation': getReservedSkybillWithTypeAndModeByReservation,
    'getReservedSkybillWithTypeAndModeByReservationResponse': getReservedSkybillWithTypeAndModeByReservationResponse,
    'getReservedSkybillWithTypeAndModeResponse': getReservedSkybillWithTypeAndModeResponse,
    'getReservedSkybillWithTypeResponse': getReservedSkybillWithTypeResponse,
    'getRouting': getRouting,
    'getRoutingResponse': getRoutingResponse,
    'getShippingInformation': getShippingInformation,
    'getShippingInformationResponse': getShippingInformationResponse,
    'rechercherContraintesEnlevement': rechercherContraintesEnlevement,
    'rechercherContraintesEnlevementResponse': rechercherContraintesEnlevementResponse,
    'shipping': shipping,
    'shippingMultiParcel': shippingMultiParcel,
    'shippingMultiParcelResponse': shippingMultiParcelResponse,
    'shippingMultiParcelV2': shippingMultiParcelV2,
    'shippingMultiParcelV2Response': shippingMultiParcelV2Response,
    'shippingMultiParcelV3': shippingMultiParcelV3,
    'shippingMultiParcelV3Response': shippingMultiParcelV3Response,
    'shippingMultiParcelV4': shippingMultiParcelV4,
    'shippingMultiParcelV4Response': shippingMultiParcelV4Response,
    'shippingMultiParcelV5': shippingMultiParcelV5,
    'shippingMultiParcelV5Response': shippingMultiParcelV5Response,
    'shippingMultiParcelWithReservation': shippingMultiParcelWithReservation,
    'shippingMultiParcelWithReservationResponse': shippingMultiParcelWithReservationResponse,
    'shippingMultiParcelWithReservationV2': shippingMultiParcelWithReservationV2,
    'shippingMultiParcelWithReservationV2Response': shippingMultiParcelWithReservationV2Response,
    'shippingMultiParcelWithReservationV3': shippingMultiParcelWithReservationV3,
    'shippingMultiParcelWithReservationV3Response': shippingMultiParcelWithReservationV3Response,
    'shippingResponse': shippingResponse,
    'shippingV2': shippingV2,
    'shippingV2Response': shippingV2Response,
    'shippingV3': shippingV3,
    'shippingV3Response': shippingV3Response,
    'shippingV4': shippingV4,
    'shippingV4Response': shippingV4Response,
    'shippingV5': shippingV5,
    'shippingV5Response': shippingV5Response,
    'shippingV6': shippingV6,
    'shippingV6Response': shippingV6Response,
    'shippingV7': shippingV7,
    'shippingV7Response': shippingV7Response,
    'shippingWithESDOnly': shippingWithESDOnly,
    'shippingWithESDOnlyResponse': shippingWithESDOnlyResponse,
    'shippingWithESDOnlyV2': shippingWithESDOnlyV2,
    'shippingWithESDOnlyV2Response': shippingWithESDOnlyV2Response,
    'shippingWithReservation': shippingWithReservation,
    'shippingWithReservationAndESDWithRefClient': shippingWithReservationAndESDWithRefClient,
    'shippingWithReservationAndESDWithRefClientPC': shippingWithReservationAndESDWithRefClientPC,
    'shippingWithReservationAndESDWithRefClientPCResponse': shippingWithReservationAndESDWithRefClientPCResponse,
    'shippingWithReservationAndESDWithRefClientResponse': shippingWithReservationAndESDWithRefClientResponse,
    'shippingWithReservationResponse': shippingWithReservationResponse,
    'shippingWithReservationV2': shippingWithReservationV2,
    'shippingWithReservationV2Response': shippingWithReservationV2Response,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    prefix_tag = TagNamePrefix + tag
    rootClass = GDSClassesMapping.get(prefix_tag)
    if rootClass is None:
        rootClass = globals().get(prefix_tag)
    return tag, rootClass


def get_required_ns_prefix_defs(rootNode):
    '''Get all name space prefix definitions required in this XML doc.
    Return a dictionary of definitions and a char string of definitions.
    '''
    nsmap = {
        prefix: uri
        for node in rootNode.iter()
        for (prefix, uri) in node.nsmap.items()
        if prefix is not None
    }
    namespacedefs = ' '.join([
        'xmlns:{}="{}"'.format(prefix, uri)
        for prefix, uri in nsmap.items()
    ])
    return nsmap, namespacedefs


def parse(inFileName, silence=False, print_warnings=True):
    global CapturedNsmap_
    gds_collector = GdsCollector_()
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'resultGetReservedSkybillValue'
        rootClass = resultGetReservedSkybillValue
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    CapturedNsmap_, namespacedefs = get_required_ns_prefix_defs(rootNode)
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_=namespacedefs,
            pretty_print=True)
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseEtree(inFileName, silence=False, print_warnings=True,
               mapping=None, reverse_mapping=None, nsmap=None):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'resultGetReservedSkybillValue'
        rootClass = resultGetReservedSkybillValue
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if mapping is None:
        mapping = {}
    if reverse_mapping is None:
        reverse_mapping = {}
    rootElement = rootObj.to_etree(
        None, name_=rootTag, mapping_=mapping,
        reverse_mapping_=reverse_mapping, nsmap_=nsmap)
    reverse_node_mapping = rootObj.gds_reverse_node_mapping(mapping)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(str(content))
        sys.stdout.write('\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj, rootElement, mapping, reverse_node_mapping


def parseString(inString, silence=False, print_warnings=True):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    gds_collector = GdsCollector_()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'resultGetReservedSkybillValue'
        rootClass = resultGetReservedSkybillValue
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    if not SaveElementTreeNode:
        rootNode = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='xmlns:tns="http://cxf.shipping.soap.chronopost.fr/"')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def parseLiteral(inFileName, silence=False, print_warnings=True):
    parser = None
    doc = parsexml_(inFileName, parser)
    gds_collector = GdsCollector_()
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'resultGetReservedSkybillValue'
        rootClass = resultGetReservedSkybillValue
    rootObj = rootClass.factory()
    rootObj.build(rootNode, gds_collector_=gds_collector)
    # Enable Python to collect the space used by the DOM.
    if not SaveElementTreeNode:
        doc = None
        rootNode = None
    if not silence:
        sys.stdout.write('#from shippingservice import *\n\n')
        sys.stdout.write('import shippingservice as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    if print_warnings and len(gds_collector.get_messages()) > 0:
        separator = ('-' * 50) + '\n'
        sys.stderr.write(separator)
        sys.stderr.write('----- Warnings -- count: {} -----\n'.format(
            len(gds_collector.get_messages()), ))
        gds_collector.write_messages(sys.stderr)
        sys.stderr.write(separator)
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()

RenameMappings_ = {
}

#
# Mapping of namespaces to types defined in them
# and the file in which each is defined.
# simpleTypes are marked "ST" and complexTypes "CT".
NamespaceToDefMappings_ = {'http://cxf.shipping.soap.chronopost.fr/': [('resultGetReservedSkybillValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultReservationExpeditionValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('esdValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('headerValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shipperValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('customerValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('recipientValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('refValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillParamsValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('scheduledValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('appointmentValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultExpeditionValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('esdWithRefClientValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('esdWithRefClientValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('esdValue3',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('headerValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shipperValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('recipientValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('refValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillWithDimensionsValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillWithDimensionsValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillWithDimensionsValueV3',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillWithDimensionsValueV4',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillWithDimensionsValueV5',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillWithDimensionsValueV6',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillParamsValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('recipientLocalValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('recipientLocalValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('customsValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('articleValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultShippingValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultMultiParcelExpeditionValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultMultiParcelValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultExpeditionValueV3',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultMonoParcelExpeditionValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultGetRouting',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('geopostResult',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultFaisabiliteESD',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('donneurDOrdre',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('adresseEnlevement',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('adresseEnlevementV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('adresseEnlevementV3',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('particularitesEsd',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('options',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultEnlevementNational',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('infoEnlevement',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultGetReservedSkybillWithTypeValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('destinatairesDpd',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('destinataireDpd',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('adresseDestinataire',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('infoClient',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('particularites',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('particularitesColisDpd',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('infoDouanieres',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultPickupOrCollectionRequest',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultReservationMultiParcelExpeditionValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultParcelValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('esdResultContraintesAgenceValue',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('esdContraintesAgence',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultReservationMultiParcelExpeditionValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultAnnulerEnlevement',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultReservationExpeditionValueV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('skybillValueBase',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('resultShippingInfo',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('error',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('detail',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingInfo',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybill',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithReservationAndESDWithRefClientPC',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithReservationAndESDWithRefClientPCResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV3',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV3Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV2Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithESDOnlyV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithESDOnlyV2Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelV5',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelV5Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV7',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV7Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getRouting',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getRoutingResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelV4',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelV4Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV6',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV6Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelV3',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelV3Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV5',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV5Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelV2Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV4',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingV4Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('faisabiliteESD',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('faisabiliteESDResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('creerEnlevementNational',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('creerEnlevementNationalResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithESDOnly',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithESDOnlyResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillWithTypeAndModeByReservation',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillWithTypeAndModeByReservationResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('creerEnlevementEurope',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('creerEnlevementEuropeResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelWithReservation',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelWithReservationResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('rechercherContraintesEnlevement',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('rechercherContraintesEnlevementResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithReservationAndESDWithRefClient',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithReservationAndESDWithRefClientResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcel',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillWithTypeAndModeAuth',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillWithTypeAndModeAuthResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shipping',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillWithTypeAndMode',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillWithTypeAndModeResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillWithType',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getReservedSkybillWithTypeResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelWithReservationV3',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelWithReservationV3Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('annulerEnlevements',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('annulerEnlevementsResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelWithReservationV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingMultiParcelWithReservationV2Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithReservationV2',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithReservationV2Response',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getShippingInformation',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('getShippingInformationResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithReservation',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT'),
                                             ('shippingWithReservationResponse',
                                              './schemas/ShippingServiceWS.xml',
                                              'CT')]}

__all__ = [
    "adresseDestinataire",
    "adresseEnlevement",
    "adresseEnlevementV2",
    "adresseEnlevementV3",
    "annulerEnlevements",
    "annulerEnlevementsResponse",
    "appointmentValue",
    "articleValue",
    "creerEnlevementEurope",
    "creerEnlevementEuropeResponse",
    "creerEnlevementNational",
    "creerEnlevementNationalResponse",
    "customerValue",
    "customsValue",
    "destinataireDpd",
    "destinatairesDpd",
    "detail",
    "donneurDOrdre",
    "entryType",
    "error",
    "esdContraintesAgence",
    "esdResultContraintesAgenceValue",
    "esdValue",
    "esdValue3",
    "esdWithRefClientValue",
    "esdWithRefClientValueV2",
    "faisabiliteESD",
    "faisabiliteESDResponse",
    "geopostResult",
    "getReservedSkybill",
    "getReservedSkybillResponse",
    "getReservedSkybillWithType",
    "getReservedSkybillWithTypeAndMode",
    "getReservedSkybillWithTypeAndModeAuth",
    "getReservedSkybillWithTypeAndModeAuthResponse",
    "getReservedSkybillWithTypeAndModeByReservation",
    "getReservedSkybillWithTypeAndModeByReservationResponse",
    "getReservedSkybillWithTypeAndModeResponse",
    "getReservedSkybillWithTypeResponse",
    "getRouting",
    "getRoutingResponse",
    "getShippingInformation",
    "getShippingInformationResponse",
    "headerValue",
    "headerValueV2",
    "infoClient",
    "infoDouanieres",
    "infoEnlevement",
    "options",
    "particularites",
    "particularitesColisDpd",
    "particularitesEsd",
    "rechercherContraintesEnlevement",
    "rechercherContraintesEnlevementResponse",
    "recipientLocalValue",
    "recipientLocalValueV2",
    "recipientValue",
    "recipientValueV2",
    "refValue",
    "refValueV2",
    "resultAnnulerEnlevement",
    "resultEnlevementNational",
    "resultExpeditionValue",
    "resultExpeditionValueV3",
    "resultFaisabiliteESD",
    "resultGetReservedSkybillValue",
    "resultGetReservedSkybillWithTypeValue",
    "resultGetRouting",
    "resultMonoParcelExpeditionValue",
    "resultMultiParcelExpeditionValue",
    "resultMultiParcelValue",
    "resultParcelValue",
    "resultPickupOrCollectionRequest",
    "resultReservationExpeditionValue",
    "resultReservationExpeditionValueV2",
    "resultReservationMultiParcelExpeditionValue",
    "resultReservationMultiParcelExpeditionValueV2",
    "resultShippingInfo",
    "resultShippingValue",
    "scheduledValue",
    "shipperValue",
    "shipperValueV2",
    "shipping",
    "shippingInfo",
    "shippingMultiParcel",
    "shippingMultiParcelResponse",
    "shippingMultiParcelV2",
    "shippingMultiParcelV2Response",
    "shippingMultiParcelV3",
    "shippingMultiParcelV3Response",
    "shippingMultiParcelV4",
    "shippingMultiParcelV4Response",
    "shippingMultiParcelV5",
    "shippingMultiParcelV5Response",
    "shippingMultiParcelWithReservation",
    "shippingMultiParcelWithReservationResponse",
    "shippingMultiParcelWithReservationV2",
    "shippingMultiParcelWithReservationV2Response",
    "shippingMultiParcelWithReservationV3",
    "shippingMultiParcelWithReservationV3Response",
    "shippingResponse",
    "shippingV2",
    "shippingV2Response",
    "shippingV3",
    "shippingV3Response",
    "shippingV4",
    "shippingV4Response",
    "shippingV5",
    "shippingV5Response",
    "shippingV6",
    "shippingV6Response",
    "shippingV7",
    "shippingV7Response",
    "shippingWithESDOnly",
    "shippingWithESDOnlyResponse",
    "shippingWithESDOnlyV2",
    "shippingWithESDOnlyV2Response",
    "shippingWithReservation",
    "shippingWithReservationAndESDWithRefClient",
    "shippingWithReservationAndESDWithRefClientPC",
    "shippingWithReservationAndESDWithRefClientPCResponse",
    "shippingWithReservationAndESDWithRefClientResponse",
    "shippingWithReservationResponse",
    "shippingWithReservationV2",
    "shippingWithReservationV2Response",
    "skybillParamsValue",
    "skybillParamsValueV2",
    "skybillValue",
    "skybillValueBase",
    "skybillValueV2",
    "skybillWithDimensionsValue",
    "skybillWithDimensionsValueV2",
    "skybillWithDimensionsValueV3",
    "skybillWithDimensionsValueV4",
    "skybillWithDimensionsValueV5",
    "skybillWithDimensionsValueV6",
    "statutType"
]
