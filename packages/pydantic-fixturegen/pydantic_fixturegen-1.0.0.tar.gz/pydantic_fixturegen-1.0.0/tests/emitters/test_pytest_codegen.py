from __future__ import annotations

from pathlib import Path

from pydantic import BaseModel, Field
from pydantic_fixturegen.emitters.pytest_codegen import PytestEmitConfig, emit_pytest_fixtures


class Address(BaseModel):
    street: str = Field(min_length=5)
    city: str


class User(BaseModel):
    name: str = Field(pattern="^User", min_length=5)
    age: int
    address: Address


def test_emit_pytest_fixtures_model_return(tmp_path: Path) -> None:
    output = tmp_path / "conftest.py"
    result = emit_pytest_fixtures(
        [User],
        output_path=output,
        config=PytestEmitConfig(seed=7, scope="function", return_type="model"),
    )

    assert result.wrote is True
    text = output.read_text(encoding="utf-8")
    assert "Generated by pydantic-fixturegen" in text
    assert "import pytest" in text
    assert "from __future__ import annotations" in text
    assert f"from {User.__module__} import User" in text
    assert "return User.model_validate(data)" in text
    assert "User" in text

    second = emit_pytest_fixtures(
        [User],
        output_path=output,
        config=PytestEmitConfig(seed=7, scope="function", return_type="model"),
    )
    assert second.skipped is True


def test_emit_pytest_fixtures_dict_return(tmp_path: Path) -> None:
    output = tmp_path / "fixtures.py"
    result = emit_pytest_fixtures(
        [User],
        output_path=output,
        config=PytestEmitConfig(seed=11, return_type="dict"),
    )
    assert result.wrote is True
    text = output.read_text(encoding="utf-8")
    assert "-> dict[str, Any]" in text
    assert "from typing import Any" in text
    assert "return dict(" in text


def test_emit_pytest_fixtures_multiple_cases(tmp_path: Path) -> None:
    output = tmp_path / "multi.py"
    result = emit_pytest_fixtures(
        [User],
        output_path=output,
        config=PytestEmitConfig(seed=21, cases=2),
    )

    assert result.wrote is True
    text = output.read_text(encoding="utf-8")
    assert "params=" in text
    assert "def user(request)" in text
