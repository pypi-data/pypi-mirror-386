from __future__ import annotations

import re
from typing import Any

import pydantic_fixturegen
import pytest
from pydantic_fixturegen.core import version as version_mod


def test_get_tool_version_matches_package_constant() -> None:
    """`get_tool_version` should align with the package exported version."""
    package_version = pydantic_fixturegen.__version__
    helper_version = version_mod.get_tool_version()

    assert helper_version == package_version
    assert re.match(r"^\d+\.\d+\.\d+.*$", helper_version)


def test_build_artifact_header_includes_fields() -> None:
    """Header helper should include tool version, seed, digest, and extras."""
    seed: int | str = 42
    digest = "deadbeef"
    extras: dict[str, Any] = {"locale": "en_US", "count": 3}

    header = version_mod.build_artifact_header(seed=seed, model_digest=digest, extras=extras)

    assert header.startswith("Generated by pydantic-fixturegen v")
    assert f"seed={seed}" in header
    assert f"model-digest={digest}" in header
    # Extras sorted alphabetically for stability
    assert header.index("count=3") < header.index("locale=en_US")


def test_build_artifact_header_handles_missing_extras() -> None:
    """Header helper falls back to placeholders when metadata is absent."""
    header = version_mod.build_artifact_header(seed=None, model_digest=None, extras=None)

    assert "seed=unknown" in header
    assert "model-digest=unknown" in header


def test_get_tool_version_fallback(monkeypatch: pytest.MonkeyPatch) -> None:
    """Fallback string should be used when distribution metadata is missing."""

    def _raise_package_not_found(_: str) -> str:
        raise version_mod.metadata.PackageNotFoundError  # type: ignore[no-untyped-call]

    monkeypatch.setattr(version_mod.metadata, "version", _raise_package_not_found)
    version_mod.get_tool_version.cache_clear()

    try:
        assert version_mod.get_tool_version() == "0.0.0+dev"
    finally:
        version_mod.get_tool_version.cache_clear()
