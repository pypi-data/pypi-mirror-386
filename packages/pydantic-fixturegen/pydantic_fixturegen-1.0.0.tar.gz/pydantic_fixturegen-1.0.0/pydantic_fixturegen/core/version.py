"""Helpers for interrogating tool version metadata and formatting artifact headers."""

from __future__ import annotations

from collections.abc import Mapping, Sequence
from functools import lru_cache
from importlib import metadata
from typing import Any

_PACKAGE_NAME = "pydantic-fixturegen"
_HEADER_PREFIX = "Generated by pydantic-fixturegen"


@lru_cache(maxsize=1)
def get_tool_version() -> str:
    """Return the installed package version.

    Falls back to a development tag if the distribution metadata is missing.
    """
    try:
        return metadata.version(_PACKAGE_NAME)
    except metadata.PackageNotFoundError:
        return "0.0.0+dev"


def build_artifact_header(
    *,
    seed: Any | None,
    model_digest: str | None,
    extras: Mapping[str, Any] | Sequence[tuple[str, Any]] | None = None,
) -> str:
    """Compose a standardized header string for generated artifacts.

    Args:
        seed: Seed value that drove deterministic generation (None if unknown).
        model_digest: Hash or identifier describing the model graph.
        extras: Optional additional key/value metadata to include.
    """
    version = get_tool_version()
    segments: list[str] = [
        f"{_HEADER_PREFIX} v{version}",
        f"seed={seed if seed is not None else 'unknown'}",
        f"model-digest={model_digest or 'unknown'}",
    ]

    if extras:
        items = extras.items() if isinstance(extras, Mapping) else extras

        for key, value in sorted(items):
            segments.append(f"{key}={value}")

    return " | ".join(segments)
