"""Form generation components for settings interfaces"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/forms.ipynb.

# %% auto 0
__all__ = ['create_settings_form', 'create_settings_form_container']

# %% ../../nbs/components/forms.ipynb 3
import json
from pathlib import Path
from typing import Dict, Any, Optional, List
from fasthtml.common import *
from cjm_fasthtml_daisyui.components.actions.button import btn, btn_colors, btn_styles
from cjm_fasthtml_daisyui.components.data_display.card import card_actions
from cjm_fasthtml_daisyui.utilities.semantic_colors import border_dui
from cjm_fasthtml_tailwind.utilities.spacing import m
from cjm_fasthtml_tailwind.core.base import combine_classes

from cjm_fasthtml_jsonschema.generators.form import generate_form_ui
from ..core.html_ids import SettingsHtmlIds as HtmlIds

# %% ../../nbs/components/forms.ipynb 6
def create_settings_form(
    schema: Dict[str, Any],  # JSON schema for the form
    values: Dict[str, Any],  # Current values for the form fields
    post_url: str,  # URL for form submission
    reset_url: str  # URL for resetting form to defaults
) -> Form:  # Form element with settings and action buttons
    """Create a settings form with action buttons.
    
    Generates a form using cjm-fasthtml-jsonschema based on the provided schema,
    with Save and Reset buttons.
    """

    # Build button attributes for Save button
    save_button_attrs = {
        "type": "submit",
        "cls": combine_classes(btn, btn_colors.primary)
    }

    # Add custom onclick handler if defined in schema
    if "onclick_save" in schema:
        save_button_attrs["onclick"] = schema["onclick_save"]

    # Build button attributes for Reset button
    reset_button_attrs = {
        "type": "button",
        "hx_get": reset_url,
        "hx_target": HtmlIds.as_selector(HtmlIds.SETTINGS_CONTENT),
        "hx_swap": "innerHTML",
        "cls": combine_classes(btn, btn_styles.ghost, m.l(2))
    }

    # Add custom onclick handler if defined in schema
    if "onclick_reset" in schema:
        reset_button_attrs["onclick"] = schema["onclick_reset"]

    return Form(
        generate_form_ui(
            schema=schema,
            values=values,
            show_title=True,
            show_description=True,
            compact=False,
            card_wrapper=True
        ),

        # Form actions
        Div(
            Button(
                "Save Configuration",
                **save_button_attrs
            ),
            Button(
                "Reset to Defaults",
                **reset_button_attrs
            ),
            cls=combine_classes(
                card_actions,
                m.t(6),
                border_dui.base_300,
            )
        ),

        # Form submission
        hx_post=post_url,
        hx_target=HtmlIds.as_selector(HtmlIds.SETTINGS_CONTENT),
        hx_swap="innerHTML"
    )

# %% ../../nbs/components/forms.ipynb 10
def create_settings_form_container(
    schema: Dict[str, Any],  # JSON schema for the form
    values: Dict[str, Any],  # Current values for the form fields
    post_url: str,  # URL for form submission
    reset_url: str,  # URL for resetting form to defaults
    alert_message: Optional[Any] = None,  # Optional alert element to display
    use_alert_container: bool = False  # If True, add empty alert-container div
) -> Div:  # Div containing the alert (if any) and the settings form
    """Create a container with optional alert and settings form.
    
    This is useful for wrapping a settings form with an alert area that can
    display success/error messages.
    """
    children = []

    # Add alert or alert container
    if alert_message:
        children.append(alert_message)
    elif use_alert_container:
        children.append(Div(id=HtmlIds.ALERT_CONTAINER))

    # Add the form
    children.append(
        create_settings_form(
            schema=schema,
            values=values,
            post_url=post_url,
            reset_url=reset_url
        )
    )

    return Div(*children)
