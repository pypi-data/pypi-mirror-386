"""Grouping related configuration schemas for better organization"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/schema_group.ipynb.

# %% auto 0
__all__ = ['SchemaGroup']

# %% ../../nbs/core/schema_group.ipynb 3
from dataclasses import dataclass, field
from pathlib import Path
from typing import Dict, Any, Optional

# %% ../../nbs/core/schema_group.ipynb 5
@dataclass
class SchemaGroup:
    """A group of related configuration schemas."""
    name: str
    title: str
    schemas: Dict[str, Dict[str, Any]]
    icon: Optional[Any] = None
    default_open: bool = True
    description: Optional[str] = None

    def get_schema(
        self, 
        schema_name: str  # Schema name
    ) -> Optional[Dict[str, Any]]:  # Schema dictionary or None
        """Get a specific schema from the group by name."""
        return self.schemas.get(schema_name)

    def get_unique_id(
        self, 
        schema_name: str  # Schema name
    ) -> str:  # Unique ID in format: {group_name}_{schema_name}
        """Generate a unique ID for a schema within this group."""
        return f"{self.name}_{schema_name}"

    def has_configured_schemas(
        self,
        config_dir: Path  # Directory where config files are stored
    ) -> bool:  # True if any schema in group has saved config
        """Check if any schemas in this group have saved configurations."""
        for schema_name in self.schemas:
            config_file = Path(config_dir) / f"{self.get_unique_id(schema_name)}.json"
            if config_file.exists():
                return True
        return False

    def get_configured_schemas(
        self,
        config_dir: Path  # Directory where config files are stored
    ) -> list:  # List of schema names that have saved configs
        """Get list of configured schema names in this group."""
        configured = []
        for schema_name in self.schemas:
            config_file = Path(config_dir) / f"{self.get_unique_id(schema_name)}.json"
            if config_file.exists():
                configured.append(schema_name)
        return configured
