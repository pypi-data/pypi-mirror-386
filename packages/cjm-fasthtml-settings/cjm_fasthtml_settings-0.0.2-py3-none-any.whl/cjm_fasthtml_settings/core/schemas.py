"""Schema registry and management for settings"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/schemas.ipynb.

# %% auto 0
__all__ = ['registry', 'SettingsRegistry']

# %% ../../nbs/core/schemas.ipynb 3
from pathlib import Path
from typing import Dict, Any, Optional, Union

# %% ../../nbs/core/schemas.ipynb 5
class SettingsRegistry:
    """Registry for managing settings schemas and schema groups.
    
    Provides a centralized place to register and access settings schemas.
    Supports both individual schemas and SchemaGroup objects for organizing
    related configurations.
    
    Example:
        ```python
        from cjm_fasthtml_settings.core.schemas import registry
        from cjm_fasthtml_settings.core.schema_group import SchemaGroup
        
        # Register a simple schema
        registry.register(my_schema)
        
        # Register a schema group
        registry.register(SchemaGroup(
            name="media",
            title="Media Settings",
            schemas={"scanner": SCAN_SCHEMA, "player": PLAYER_SCHEMA}
        ))
        ```
    """
    
    def __init__(self):
        self._schemas: Dict[str, Union[Dict[str, Any], 'SchemaGroup']] = {}
    
    def register(
        self,
        schema: Union[Dict[str, Any], 'SchemaGroup'],  # Schema or SchemaGroup to register
        name: Optional[str] = None  # Optional name override
    ):
        """Register a settings schema or schema group.
        
        For schemas: must have a 'name' field or provide name parameter
        For SchemaGroups: uses the group's name attribute
        """
        # Import here to avoid circular dependency
        from cjm_fasthtml_settings.core.schema_group import SchemaGroup
        
        if isinstance(schema, SchemaGroup):
            schema_name = schema.name
        else:
            schema_name = name or schema.get('name')
            if not schema_name:
                raise ValueError("Schema must have a 'name' field or name must be provided")
        
        self._schemas[schema_name] = schema
    
    def get(
        self,
        name: str  # Name of the schema/group to retrieve
    ) -> Optional[Union[Dict[str, Any], 'SchemaGroup']]:  # The schema/group, or None if not found
        """Get a registered schema or group by name."""
        return self._schemas.get(name)
    
    def list_schemas(self) -> list:  # List of registered schema/group names
        """List all registered schema and group names."""
        return list(self._schemas.keys())
    
    def get_all(self) -> Dict[str, Union[Dict[str, Any], 'SchemaGroup']]:  # All schemas and groups
        """Get all registered schemas and groups."""
        return self._schemas.copy()
    
    def resolve_schema(
        self,
        id: str  # Schema ID (can be 'name' or 'group_schema' format)
    ) -> tuple:  # (schema_dict, error_message)
        """Resolve a schema ID to a schema dictionary.
        
        Handles both direct schemas and grouped schemas:
        - Direct: 'general' -> returns the general schema
        - Grouped: 'media_scanner' -> returns scanner schema from media group
        
        Args:
            id: Schema identifier
            
        Returns:
            Tuple of (schema_dict, error_message). If successful, error_message is None.
            If failed, schema_dict is None and error_message explains the issue.
        """
        from cjm_fasthtml_settings.core.schema_group import SchemaGroup
        
        # Try direct lookup first
        item = self._schemas.get(id)
        if item:
            if isinstance(item, SchemaGroup):
                return None, f"'{id}' is a group, not a schema. Use 'group_schemaname' format."
            return item, None
        
        # Try grouped schema lookup (format: group_schema)
        if "_" in id:
            group_name, schema_key = id.split("_", 1)
            group = self._schemas.get(group_name)
            
            if isinstance(group, SchemaGroup):
                schema = group.get_schema(schema_key)
                if schema:
                    # Add the unique_id to the schema for proper saving
                    return {**schema, "unique_id": id}, None
                else:
                    return None, f"Schema '{schema_key}' not found in group '{group_name}'"
        
        return None, f"Settings '{id}' not found"

# %% ../../nbs/core/schemas.ipynb 12
# Module-level registry instance
# This is the single source of truth for all settings schemas
# Routes and other modules will import and use this instance
registry = SettingsRegistry()
