"""Optional plugin integration for extensible settings systems"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/plugins.ipynb.

# %% auto 0
__all__ = ['PluginRegistryProtocol']

# %% ../nbs/plugins.ipynb 3
import tempfile
from pathlib import Path
from typing import Dict, Any, Optional, Protocol, runtime_checkable

# Import from cjm-fasthtml-plugins
from cjm_fasthtml_plugins.core.metadata import PluginMetadata

# %% ../nbs/plugins.ipynb 8
@runtime_checkable
class PluginRegistryProtocol(Protocol):
    """Protocol that plugin registries should implement.
    
    This allows the settings library to work with any plugin system
    that implements these methods.
    """
    
    def get_plugin(self, unique_id: str) -> Optional[PluginMetadata]:
        """Get plugin metadata by unique ID."""
        ...
    
    def get_plugins_by_category(self, category: str) -> list[PluginMetadata]:
        """Get all plugins in a category."""
        ...
    
    def get_categories_with_plugins(self) -> list[str]:
        """Get all categories that have registered plugins."""
        ...
    
    def load_plugin_config(self, unique_id: str) -> Dict[str, Any]:
        """Load saved configuration for a plugin."""
        ...
    
    def save_plugin_config(self, unique_id: str, config: Dict[str, Any]) -> bool:
        """Save configuration for a plugin."""
        ...
