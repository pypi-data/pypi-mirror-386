"""Settings dashboard layout components"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/dashboard.ipynb.

# %% auto 0
__all__ = ['create_form_skeleton', 'render_schema_settings_content', 'settings_content']

# %% ../../nbs/components/dashboard.ipynb 3
from typing import Dict, Optional
from pathlib import Path
from fasthtml.common import *
from fasthtml.common import FT
from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import (
    flex_display, gap, flex, items, justify
)
from cjm_fasthtml_tailwind.utilities.spacing import p, m
from cjm_fasthtml_tailwind.utilities.sizing import container, max_w, w, min_h
from cjm_fasthtml_tailwind.core.base import combine_classes

from .sidebar import create_sidebar_menu, create_oob_sidebar_menu
from cjm_fasthtml_settings.core.utils import (
    load_config,
    get_default_values_from_schema,
)
from .forms import create_settings_form_container
from ..core.html_ids import SettingsHtmlIds as HtmlIds

# %% ../../nbs/components/dashboard.ipynb 6
def create_form_skeleton(
    schema_id: str,  # The schema ID for the settings
    hx_get_url: str  # URL to fetch the actual form content
) -> FT:  # Div element with loading trigger
    """Create a loading skeleton for the settings form that loads asynchronously."""
    return Div(
        # Loading spinner centered (could add actual loading UI here)
        Div(
            cls=combine_classes(
                flex_display,
                items.center,
                justify.center,
            )
        ),
        # HTMX attributes for async loading
        hx_get=hx_get_url,
        hx_trigger="load",
        hx_swap="outerHTML",
        id=HtmlIds.SETTINGS_CONTENT,
        cls=combine_classes(flex(1), min_h(0))
    )

# %% ../../nbs/components/dashboard.ipynb 9
def render_schema_settings_content(
    schema: Dict,  # JSON schema for the settings
    config_dir: Optional[Path] = None  # Config directory path
) -> FT:  # Settings form container
    """Render settings content for a schema-based configuration."""
    from cjm_fasthtml_settings import routes as settings_rt
    
    # Get the schema identifier (prioritize unique_id for grouped schemas)
    schema_id = schema.get("unique_id", schema.get("name"))

    # Load existing config or use defaults
    saved_config = load_config(schema_id, config_dir)
    default_values = get_default_values_from_schema(schema)
    values = {**default_values, **saved_config}

    return create_settings_form_container(
        schema=schema,
        values=values,
        post_url=settings_rt.save.to(id=schema_id),
        reset_url=settings_rt.reset.to(id=schema_id),
        use_alert_container=True
    )

# %% ../../nbs/components/dashboard.ipynb 13
def settings_content(
    request,  # FastHTML request object
    schema: Dict,  # Schema to display
    schemas: Dict,  # All registered schemas for sidebar
    config_dir: Optional[Path] = None,  # Config directory
    menu_section_title: str = "Settings",  # Sidebar section title
    plugin_registry: Optional[Any] = None  # Optional plugin registry
) -> FT:  # Settings content layout
    """Return settings content with sidebar and form."""
    from cjm_fasthtml_settings import routes as settings_rt
    
    # Get the schema identifier
    schema_id = schema.get("unique_id", schema.get("name"))

    # Return content with updated sidebar menu via OOB swap if HTMX request to content area
    if request.headers.get('HX-Request') and request.headers.get('HX-Target') == HtmlIds.SETTINGS_CONTENT:
        updated_menu = create_oob_sidebar_menu(
            schemas=schemas,
            active_schema=schema_id,
            config_dir=config_dir,
            menu_section_title=menu_section_title,
            plugin_registry=plugin_registry
        )
        return Div(
            render_schema_settings_content(schema, config_dir),
            updated_menu
        )

    # Return full settings layout with immediate sidebar and async form
    return Div(
        # Sidebar - loads immediately
        Div(
            create_sidebar_menu(
                schemas=schemas,
                active_schema=schema_id,
                config_dir=config_dir,
                include_wrapper=True,
                menu_section_title=menu_section_title,
                plugin_registry=plugin_registry
            ),
            id=HtmlIds.SETTINGS_SIDEBAR,
            cls=combine_classes(w(64), flex.shrink_0)
        ),

        # Form skeleton - loads asynchronously
        create_form_skeleton(
            schema_id=schema_id,
            hx_get_url=settings_rt.load_form.to(id=schema_id)
        ),

        cls=combine_classes(
            flex_display,
            gap(6),
            container,
            max_w._7xl,
            m.x.auto,
            p(6)
        )
    )
