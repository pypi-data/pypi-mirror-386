name: Cleanup Pre-releases

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      days_to_keep:
        description: 'Number of days to keep pre-releases'
        required: false
        default: '7'
        type: string

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Clean up old pre-releases
      uses: actions/github-script@v7
      with:
        script: |
          const daysToKeep = parseInt('${{ github.event.inputs.days_to_keep || '7' }}');
          const cutoffDate = new Date();
          cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
          
          console.log(`Cleaning up pre-releases older than ${daysToKeep} days (before ${cutoffDate.toISOString()})`);
          
          // Get all releases
          const releases = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          let deletedCount = 0;
          
          for (const release of releases.data) {
            // Only process pre-releases with PR tags
            if (release.prerelease && release.tag_name.includes('-pr')) {
              const releaseDate = new Date(release.created_at);
              
              if (releaseDate < cutoffDate) {
                console.log(`Deleting pre-release: ${release.tag_name} (created: ${releaseDate.toISOString()})`);
                
                try {
                  // Delete the release
                  await github.rest.repos.deleteRelease({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    release_id: release.id
                  });
                  
                  // Delete the tag
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `tags/${release.tag_name}`
                  });
                  
                  deletedCount++;
                  console.log(`✓ Deleted: ${release.tag_name}`);
                } catch (error) {
                  console.error(`✗ Failed to delete ${release.tag_name}:`, error.message);
                }
              } else {
                console.log(`Keeping: ${release.tag_name} (created: ${releaseDate.toISOString()})`);
              }
            }
          }
          
          console.log(`Cleanup complete. Deleted ${deletedCount} pre-releases.`);