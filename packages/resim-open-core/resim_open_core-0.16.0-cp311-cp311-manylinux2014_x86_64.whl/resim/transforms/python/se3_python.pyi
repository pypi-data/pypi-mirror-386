from __future__ import annotations
import numpy
import resim.transforms.python.so3_python
import typing
__all__ = ['SE3']
class SE3:
    DIMS: typing.ClassVar[int] = 3
    DOF: typing.ClassVar[int] = 6
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @staticmethod
    def exp(alg: numpy.ndarray[tuple[typing.Literal[6], typing.Literal[1]], numpy.dtype[numpy.float64]]) -> SE3:
        ...
    @staticmethod
    def identity() -> SE3:
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, rotation: resim.transforms.python.so3_python.SO3) -> None:
        ...
    @typing.overload
    def __init__(self, translation: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]) -> None:
        ...
    @typing.overload
    def __init__(self, rotation: resim.transforms.python.so3_python.SO3, translation: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]) -> None:
        ...
    @typing.overload
    def __mul__(self, arg0: SE3) -> SE3:
        ...
    @typing.overload
    def __mul__(self, arg0: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]:
        ...
    def arc_length(self) -> float:
        ...
    def interp(self, fraction: float) -> SE3:
        ...
    def inverse(self) -> SE3:
        ...
    def is_approx(self, other: SE3, precision: float = 1e-12) -> bool:
        ...
    def log(self) -> numpy.ndarray[tuple[typing.Literal[6], typing.Literal[1]], numpy.dtype[numpy.float64]]:
        ...
    def rotate(self, source_vector: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]:
        ...
    def rotation(self) -> resim.transforms.python.so3_python.SO3:
        ...
    def translation(self) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]:
        ...
