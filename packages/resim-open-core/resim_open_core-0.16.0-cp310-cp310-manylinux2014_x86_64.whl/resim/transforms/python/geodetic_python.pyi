from __future__ import annotations
import numpy
import resim.transforms.python.se3_python
import resim.transforms.python.so3_python
import typing
__all__ = ['Geodetic', 'GeodeticWithRotation', 'ecef_from_body_from_geodetic_with_rotation', 'ecef_position_from_geodetic', 'geodetic_from_ecef_position', 'geodetic_with_rotation_from_ecef_from_body']
class Geodetic:
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, *, latitude_deg: float, longitude_deg: float, altitude_m: float) -> None:
        ...
    def altitude_ft(self) -> float:
        ...
    def altitude_m(self) -> float:
        ...
    def latitude_deg(self) -> float:
        ...
    def longitude_deg(self) -> float:
        ...
    def set_altitude_ft(self, altitude_ft: float) -> None:
        ...
    def set_altitude_m(self, altitude_m: float) -> None:
        ...
    def set_latitude_deg(self, latitude_deg: float) -> None:
        ...
    def set_longitude_deg(self, longitude_deg: float) -> None:
        ...
class GeodeticWithRotation:
    geodetic: Geodetic
    rotation: resim.transforms.python.so3_python.SO3
    @staticmethod
    def _pybind11_conduit_v1_(*args, **kwargs):
        ...
    @typing.overload
    def __init__(self) -> None:
        ...
    @typing.overload
    def __init__(self, *, geodetic: Geodetic, rotation: resim.transforms.python.so3_python.SO3) -> None:
        ...
def ecef_from_body_from_geodetic_with_rotation(geodetic_with_rotation: GeodeticWithRotation) -> resim.transforms.python.se3_python.SE3:
    ...
def ecef_position_from_geodetic(geodetic: Geodetic) -> numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]:
    ...
def geodetic_from_ecef_position(ecef_position: numpy.ndarray[tuple[typing.Literal[3], typing.Literal[1]], numpy.dtype[numpy.float64]]) -> Geodetic:
    ...
def geodetic_with_rotation_from_ecef_from_body(ecef_from_body: resim.transforms.python.se3_python.SE3) -> GeodeticWithRotation:
    ...
