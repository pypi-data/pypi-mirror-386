@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

set(HYHOUND_AVAILABLE_COMPONENTS "Core" "OCP")
# Always require "Core"
list(PREPEND hyhound_FIND_COMPONENTS "Core")
if (hyhound_FIND_REQUIRED)
    set(hyhound_FIND_Core_REQUIRED True)
endif()

set(HYHOUND_FIND_QUIET_ARG)
if(hyhound_FIND_QUIETLY)
    set(HYHOUND_FIND_QUIET_ARG QUIET)
endif()

foreach(COMP IN LISTS hyhound_FIND_COMPONENTS)
    if (NOT COMP IN_LIST HYHOUND_AVAILABLE_COMPONENTS)
        set(hyhound_NOT_FOUND_MESSAGE
            "Invalid component: ${COMP} (valid components: ${HYHOUND_AVAILABLE_COMPONENTS})")
        set(hyhound_FOUND False)
        return()
    endif()
    set(HYHOUND_FIND_REQUIRED_ARG)
    if(hyhound_FIND_REQUIRED_${COMP})
        set(HYHOUND_FIND_REQUIRED_ARG REQUIRED)
    endif()
    set(hyhound${COMP}_ROOT ${CMAKE_CURRENT_LIST_DIR})
    find_package(hyhound${COMP}
        ${HYHOUND_FIND_QUIET_ARG} ${HYHOUND_FIND_REQUIRED_ARG})
    if (NOT hyhound${COMP}_FOUND AND hyhound_FIND_REQUIRED_${COMP})
        set(hyhound_NOT_FOUND_MESSAGE "Missing required components: ${COMP} (find_package(hyhound${COMP}) failed)")
        set(hyhound_FOUND False)
        return()
    endif()
    set(hyhound_${COMP}_FOUND ${hyhound${COMP}_FOUND})
endforeach()

if (hyhound_Core_FOUND AND NOT _@PROJECT_NAME@_PRINTED AND "Core" IN_LIST hyhound_FIND_COMPONENTS)
    get_target_property(HYHOUND_CONFIGS hyhound::hyhound IMPORTED_CONFIGURATIONS)
    message(STATUS "Found @PROJECT_NAME@ @PROJECT_VERSION@: ${CMAKE_CURRENT_LIST_DIR} (available configs: ${HYHOUND_CONFIGS}, valid components: @HYHOUND_OPTIONAL_COMPONENTS@, installed targets: @HYHOUND_INSTALL_TARGETS@)")
    set(_@PROJECT_NAME@_PRINTED On CACHE INTERNAL "")
endif()

check_required_components(hyhound)
