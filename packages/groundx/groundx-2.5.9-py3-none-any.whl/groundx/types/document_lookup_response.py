# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .document_detail import DocumentDetail


class DocumentLookupResponse(UniversalBaseModel):
    count: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of results returned in the current response
    """

    documents: typing.Optional[typing.List[DocumentDetail]] = None
    next_token: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="nextToken")] = None
    remaining: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of results that have not been returned yet. Will be null if there are no remaining results.
    """

    total: typing.Optional[int] = pydantic.Field(default=None)
    """
    The total number of results found
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
