// qoauth2deviceauthorizationflow.sip generated by MetaSIP
//
// This file is part of the QtNetworkAuth Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-NetworkAuth.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (QtNetworkAuth_6_9_0 -)

class QOAuth2DeviceAuthorizationFlow : public QAbstractOAuth2
{
%TypeHeaderCode
#include <qoauth2deviceauthorizationflow.h>
%End

public:
    QOAuth2DeviceAuthorizationFlow();
    explicit QOAuth2DeviceAuthorizationFlow(QObject *parent /TransferThis/);
    QOAuth2DeviceAuthorizationFlow(QNetworkAccessManager *manager /KeepReference/, QObject *parent /TransferThis/ = 0);
    virtual ~QOAuth2DeviceAuthorizationFlow();
    QString userCode() const;
    QUrl verificationUrl() const;
    QUrl completeVerificationUrl() const;
    bool isPolling() const;
    QDateTime userCodeExpirationAt() const;

public slots:
    virtual void grant();
    bool startTokenPolling();
    void stopTokenPolling();

signals:
    void authorizeWithUserCode(const QUrl &verificationUrl, const QString &userCode, const QUrl &completeVerificationUrl);
    void userCodeChanged(const QString &userCode);
    void verificationUrlChanged(const QUrl &verificationUrl);
    void completeVerificationUrlChanged(const QUrl &completeVerificationUrl);
    void pollingChanged(bool polling);
    void userCodeExpirationAtChanged(const QDateTime &expiration);

protected:
    virtual bool event(QEvent *event);

protected slots:
    void refreshTokensImplementation();
};

%End
