// qabstractoauth2.sip generated by MetaSIP
//
// This file is part of the QtNetworkAuth Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-NetworkAuth.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QAbstractOAuth2 : public QAbstractOAuth
{
%TypeHeaderCode
#include <qabstractoauth2.h>
%End

public:
    explicit QAbstractOAuth2(QObject *parent /TransferThis/ = 0);
    QAbstractOAuth2(QNetworkAccessManager *manager /KeepReference/, QObject *parent /TransferThis/ = 0);
    virtual ~QAbstractOAuth2();
    virtual QUrl createAuthenticatedUrl(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *head(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *get(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *post(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *put(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    virtual QNetworkReply *deleteResource(const QUrl &url, const QVariantMap &parameters = QVariantMap());
    QString scope() const;
    void setScope(const QString &scope);
    QString userAgent() const;
    void setUserAgent(const QString &userAgent);
    QString responseType() const;
    QString clientIdentifierSharedKey() const;
    void setClientIdentifierSharedKey(const QString &clientIdentifierSharedKey);
    QString state() const;
    void setState(const QString &state);
    QDateTime expirationAt() const;
    QString refreshToken() const;
    void setRefreshToken(const QString &refreshToken);

signals:
    void scopeChanged(const QString &scope);
    void userAgentChanged(const QString &userAgent);
    void refreshTokenChanged(const QString &refreshToken);
    void responseTypeChanged(const QString &responseType);
    void clientIdentifierSharedKeyChanged(const QString &clientIdentifierSharedKey);
    void stateChanged(const QString &state);
    void expirationAtChanged(const QDateTime &expiration);
    void error(const QString &error, const QString &errorDescription, const QUrl &uri);
    void authorizationCallbackReceived(const QVariantMap &data);

protected slots:
    void setResponseType(const QString &responseType);

public:
    virtual QNetworkReply *post(const QUrl &url, const QByteArray &data);
    virtual QNetworkReply *post(const QUrl &url, QHttpMultiPart *multiPart);
    virtual QNetworkReply *put(const QUrl &url, const QByteArray &data);
    virtual QNetworkReply *put(const QUrl &url, QHttpMultiPart *multiPart);
    virtual void prepareRequest(QNetworkRequest *request, const QByteArray &verb, const QByteArray &body = QByteArray());
%If (QtNetworkAuth_6_5_0 -)
%If (PyQt_SSL)
    QSslConfiguration sslConfiguration() const;
%End
%End
%If (QtNetworkAuth_6_5_0 -)
%If (PyQt_SSL)
    void setSslConfiguration(const QSslConfiguration &configuration);
%End
%End

signals:
%If (QtNetworkAuth_6_5_0 -)
%If (PyQt_SSL)
    void sslConfigurationChanged(const QSslConfiguration &configuration);
%End
%End

public:
%If (QtNetworkAuth_6_9_0 -)

    enum class NonceMode
    {
        Automatic,
        Enabled,
        Disabled,
    };

%End
%If (QtNetworkAuth_6_9_0 -)
    QSet<QByteArray> grantedScopeTokens() const;
%End
%If (QtNetworkAuth_6_9_0 -)
    QSet<QByteArray> requestedScopeTokens() const;
%End
%If (QtNetworkAuth_6_9_0 -)
    void setRequestedScopeTokens(const QSet<QByteArray> &tokens);
%End
%If (QtNetworkAuth_6_9_0 -)
    std::chrono::seconds refreshLeadTime() const;
%End
%If (QtNetworkAuth_6_9_0 -)
    void setRefreshLeadTime(std::chrono::seconds leadTime);
%End
%If (QtNetworkAuth_6_9_0 -)
    bool autoRefresh() const;
%End
%If (QtNetworkAuth_6_9_0 -)
    void setAutoRefresh(bool enable);
%End
%If (QtNetworkAuth_6_9_0 -)
    QAbstractOAuth2::NonceMode nonceMode() const;
%End
%If (QtNetworkAuth_6_9_0 -)
    void setNonceMode(QAbstractOAuth2::NonceMode mode);
%End
%If (QtNetworkAuth_6_9_0 -)
    QString nonce() const;
%End
%If (QtNetworkAuth_6_9_0 -)
    void setNonce(const QString &nonce);
%End
%If (QtNetworkAuth_6_9_0 -)
    QString idToken() const;
%End
%If (QtNetworkAuth_6_9_0 -)
    QUrl tokenUrl() const;
%End
%If (QtNetworkAuth_6_9_0 -)
    void setTokenUrl(const QUrl &tokenUrl);
%End
%If (QtNetworkAuth_6_9_0 -)
    void clearNetworkRequestModifier();
%End

protected:
%If (QtNetworkAuth_6_9_0 -)
    void refreshTokensImplementation();
%End

public slots:
%If (QtNetworkAuth_6_9_0 -)
    void refreshTokens();
%End

signals:
%If (QtNetworkAuth_6_9_0 -)
    void grantedScopeTokensChanged(const QSet<QByteArray> &tokens);
%End
%If (QtNetworkAuth_6_9_0 -)
    void requestedScopeTokensChanged(const QSet<QByteArray> &tokens);
%End
%If (QtNetworkAuth_6_9_0 -)
    void accessTokenAboutToExpire();
%End
%If (QtNetworkAuth_6_9_0 -)
    void refreshLeadTimeChanged(std::chrono::seconds leadTime);
%End
%If (QtNetworkAuth_6_9_0 -)
    void autoRefreshChanged(bool enable);
%End
%If (QtNetworkAuth_6_9_0 -)
    void nonceModeChanged(QAbstractOAuth2::NonceMode mode);
%End
%If (QtNetworkAuth_6_9_0 -)
    void nonceChanged(const QString &nonce);
%End
%If (QtNetworkAuth_6_9_0 -)
    void idTokenChanged(const QString &idToken);
%End
%If (QtNetworkAuth_6_9_0 -)
    void tokenUrlChanged(const QUrl &tokenUrl);
%End
%If (QtNetworkAuth_6_9_0 -)
    void serverReportedErrorOccurred(const QString &error, const QString &errorDescription, const QUrl &uri);
%End
};
