// qoauth2authorizationcodeflow.sip generated by MetaSIP
//
// This file is part of the QtNetworkAuth Python extension module.
//
// Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6-NetworkAuth.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QOAuth2AuthorizationCodeFlow : public QAbstractOAuth2
{
%TypeHeaderCode
#include <qoauth2authorizationcodeflow.h>
%End

public:
    explicit QOAuth2AuthorizationCodeFlow(QObject *parent /TransferThis/ = 0);
    QOAuth2AuthorizationCodeFlow(QNetworkAccessManager *manager /KeepReference/, QObject *parent /TransferThis/ = 0);
    QOAuth2AuthorizationCodeFlow(const QString &clientIdentifier, QNetworkAccessManager *manager /KeepReference/, QObject *parent /TransferThis/ = 0);
    QOAuth2AuthorizationCodeFlow(const QUrl &authorizationUrl, const QUrl &accessTokenUrl, QNetworkAccessManager *manager /KeepReference/, QObject *parent /TransferThis/ = 0);
    QOAuth2AuthorizationCodeFlow(const QString &clientIdentifier, const QUrl &authorizationUrl, const QUrl &accessTokenUrl, QNetworkAccessManager *manager /KeepReference/, QObject *parent /TransferThis/ = 0);
    virtual ~QOAuth2AuthorizationCodeFlow();
    QUrl accessTokenUrl() const;
    void setAccessTokenUrl(const QUrl &accessTokenUrl);

public slots:
    virtual void grant();
    void refreshAccessToken();

signals:
    void accessTokenUrlChanged(const QUrl &accessTokenUrl);

protected:
    QUrl buildAuthenticateUrl(const QMultiMap<QString, QVariant> &parameters = {});
    void requestAccessToken(const QString &code);
    virtual void resourceOwnerAuthorization(const QUrl &url, const QMultiMap<QString, QVariant> &parameters = {});

public:
%If (QtNetworkAuth_6_8_0 -)

    enum class PkceMethod
    {
        S256,
        Plain,
        None,
    };

%End
%If (QtNetworkAuth_6_8_0 -)
    void setPkceMethod(QOAuth2AuthorizationCodeFlow::PkceMethod method, qsizetype length = 43);
%End
%If (QtNetworkAuth_6_8_0 -)
    QOAuth2AuthorizationCodeFlow::PkceMethod pkceMethod() const;
%End

protected slots:
%If (QtNetworkAuth_6_9_0 -)
    void refreshTokensImplementation();
%End
};
