#!/usr/bin/env python3
"""
Test file with XXE (XML External Entity) vulnerabilities.
Based on OWASP XXE examples.
Expected: Should detect XXE patterns.
"""

import xml.etree.ElementTree as ET
from xml.sax import make_parser
from xml.sax.handler import ContentHandler
import xml.dom.minidom
from flask import request
import requests

def vulnerable_xml_parsing():
    """Vulnerable XML parsing with XXE."""
    xml_data = request.data
    
    # Vulnerable ElementTree parsing
    root = ET.fromstring(xml_data)  # Vulnerable
    
    # Vulnerable minidom parsing
    dom = xml.dom.minidom.parseString(xml_data)  # Vulnerable
    
    # Vulnerable SAX parsing
    parser = make_parser()  # Vulnerable
    handler = ContentHandler()
    parser.setContentHandler(handler)
    parser.parse(xml_data)  # Vulnerable
    
    return root

def vulnerable_xml_file_parsing():
    """Vulnerable XML file parsing with XXE."""
    xml_file = request.files.get('xmlfile')
    
    # Vulnerable file parsing
    tree = ET.parse(xml_file)  # Vulnerable
    root = tree.getroot()
    
    # Another pattern
    dom = xml.dom.minidom.parse(xml_file)  # Vulnerable
    
    return root

def vulnerable_xml_validation():
    """Vulnerable XML validation with XXE."""
    xml_data = request.data
    
    # Vulnerable validation
    try:
        ET.fromstring(xml_data)  # Vulnerable
        return True
    except ET.ParseError:
        return False

def vulnerable_xml_transform():
    """Vulnerable XML transformation with XXE."""
    xml_data = request.data
    
    # Vulnerable transformation
    root = ET.fromstring(xml_data)  # Vulnerable
    
    # Process XML content
    for elem in root.iter():
        if elem.tag == 'data':
            return elem.text
    
    return None

def vulnerable_xml_search():
    """Vulnerable XML search with XXE."""
    xml_data = request.data
    search_term = request.args.get('search')
    
    # Vulnerable search
    root = ET.fromstring(xml_data)  # Vulnerable
    
    # Find elements
    results = root.findall(f".//{search_term}")
    return [elem.text for elem in results]

def vulnerable_xml_modification():
    """Vulnerable XML modification with XXE."""
    xml_data = request.data
    new_value = request.form.get('value')
    
    # Vulnerable modification
    root = ET.fromstring(xml_data)  # Vulnerable
    
    # Modify XML
    for elem in root.iter('data'):
        elem.text = new_value
    
    return ET.tostring(root)

def vulnerable_xml_merge():
    """Vulnerable XML merge with XXE."""
    xml1 = request.files.get('xml1')
    xml2 = request.files.get('xml2')
    
    # Vulnerable merge
    root1 = ET.parse(xml1).getroot()  # Vulnerable
    root2 = ET.parse(xml2).getroot()  # Vulnerable
    
    # Merge roots
    for child in root2:
        root1.append(child)
    
    return ET.tostring(root1)

def vulnerable_xml_schema_validation():
    """Vulnerable XML schema validation with XXE."""
    xml_data = request.data
    schema_file = request.files.get('schema')
    
    # Vulnerable schema validation
    from xml.schema import XMLSchema
    schema = XMLSchema(schema_file)  # Vulnerable
    
    # Validate XML
    schema.assertValid(xml_data)  # Vulnerable
    
    return True

def vulnerable_xml_namespace_handling():
    """Vulnerable XML namespace handling with XXE."""
    xml_data = request.data
    
    # Vulnerable namespace handling
    root = ET.fromstring(xml_data)  # Vulnerable
    
    # Process namespaces
    namespaces = {'ns': 'http://example.com/ns'}
    elements = root.findall('.//ns:element', namespaces)
    
    return [elem.text for elem in elements]

def vulnerable_xml_entity_resolution():
    """Vulnerable XML entity resolution with XXE."""
    xml_data = request.data
    
    # Vulnerable entity resolution
    parser = ET.XMLParser()  # Vulnerable
    root = ET.fromstring(xml_data, parser=parser)  # Vulnerable
    
    return root

def vulnerable_xml_processing():
    """Vulnerable XML processing with XXE."""
    xml_data = request.data
    
    # Multiple vulnerable parsing methods
    methods = [
        lambda: ET.fromstring(xml_data),  # Vulnerable
        lambda: xml.dom.minidom.parseString(xml_data),  # Vulnerable
        lambda: ET.parse(xml_data)  # Vulnerable
    ]
    
    results = []
    for method in methods:
        try:
            result = method()
            results.append(result)
        except:
            pass
    
    return results

if __name__ == "__main__":
    print("XXE vulnerability test file")
    print("This file contains various XXE vulnerabilities")
    print("for testing Levox detection capabilities.")
