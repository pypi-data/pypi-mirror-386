[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "invenio-oauthclient-aaf"
version = "0.2.0"
description = "AAF (Australian Access Federation) OAuth integration for InvenioRDM"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
  { name = "Bata Byambasuren", email = "bata.byambasuren@adelaide.edu.au" },
]
keywords = ["invenio", "oauth", "aaf", "openid-connect", "authentication"]
classifiers = [
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]

dependencies = ["invenio-oauthclient>=2.0.0"]

[project.optional-dependencies]
tests = [
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-mock>=3.10.0",
  "pytest-flask>=1.2.0",
]
dev = [
  # Code quality
  "ruff>=0.14.0",
  "pre-commit>=4.3.0",

  # Testing (includes tests dependencies)
  "pytest>=7.0.0",
  "pytest-cov>=4.0.0",
  "pytest-mock>=3.10.0",
  "pytest-flask>=1.2.0",

  # Type checking
  "mypy>=0.0.1",

  # Release automation
  "python-semantic-release>=9.0.0",
  "commitizen>=3.0.0",

  # Development tools
  "ipython>=8.0.0",
  "ipdb>=0.13.0",
]
docs = ["sphinx>=5.0.0", "sphinx-rtd-theme>=1.2.0"]

[project.urls]
Homepage = "https://github.com/aus-plant-phenomics-network/invenio-oauthclient-aaf"
Documentation = "https://github.com/aus-plant-phenomics-network/invenio-oauthclient-aaf/blob/main/README.md"
Repository = "https://github.com/aus-plant-phenomics-network/invenio-oauthclient-aaf"
Issues = "https://github.com/aus-plant-phenomics-network/invenio-oauthclient-aaf/issues"

[project.entry-points."invenio_oauthclient.remote_apps"]
aaf = "invenio_oauthclient_aaf.remote:REMOTE_APP"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=invenio_oauthclient_aaf --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["invenio_oauthclient_aaf"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  # "E203", # whitespace before ':'
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"


[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
branch = "main"
build_command = """
    uv lock --upgrade-package "$PACKAGE_NAME"
    git add uv.lock
    uv build
"""
dist_path = "dist/"
upload_to_vcs_release = true
upload_to_pypi = false
upload_to_repository = false
major_on_zero = false # Stay in 0.x versions until explicit major release
allow_zero_version = true
assets = []
build_command_env = []
commit_message = "chore(release): bump version to {version}"
commit_parser = "conventional"
logging_use_named_masks = false
repo_dir = "."
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.branches.alpha]
# Matches branches with the prefixes 'feat/', 'fix/', or 'perf/'.
match = "^(feat|fix|perf)/.+"
prerelease = true
prerelease_token = "alpha"

[tool.semantic_release.changelog]
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
  '''chore(?:\([^)]*?\))?: .+''',
  '''ci(?:\([^)]*?\))?: .+''',
  '''refactor(?:\([^)]*?\))?: .+''',
  '''style(?:\([^)]*?\))?: .+''',
  '''test(?:\([^)]*?\))?: .+''',
  '''build\((?!deps\): .+)''',
  '''Initial [Cc]ommit.*''',
]
mode = "update"
insertion_flag = "<!-- version list -->"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"
mask_initial_release = true

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

# [tool.semantic_release.commit_author]
# env = "GIT_COMMIT_AUTHOR"
# default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
minor_tags = ["feat"]
patch_tags = ["fix", "perf", "refactor"]
other_allowed_tags = [
  "build",
  "chore",
  "ci",
  "docs",
  "style",
  "refactor",
  "test",
]
allowed_tags = [
  "feat",
  "fix",
  "perf",
  "build",
  "chore",
  "ci",
  "docs",
  "style",
  "refactor",
  "test",
]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
