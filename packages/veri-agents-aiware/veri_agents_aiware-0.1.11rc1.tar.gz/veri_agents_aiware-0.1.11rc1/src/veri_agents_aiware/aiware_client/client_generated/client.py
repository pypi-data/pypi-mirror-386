# Generated by ariadne-codegen
# Source: src/veri_agents_aiware/aiware_client/graphql/operations

from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from .base_model_ref import UNSET, UnsetType
from .client_ref import BaseAiware
from .get_entities import GetEntities
from .get_folder import GetFolder
from .get_libraries import GetLibraries
from .get_recent_tdos import GetRecentTdos
from .get_root_folders import GetRootFolders
from .get_watchlists import GetWatchlists
from .rag_get_td_os_meta import RAGGetTDOsMeta
from .rag_get_tdo_content import RAGGetTDOContent


def gql(q: str) -> str:
    return q


class AgentsAiware(BaseAiware):
    def get_entities(
        self,
        libraryIds: Union[Optional[List[str]], UnsetType] = UNSET,
        limit: Union[Optional[int], UnsetType] = UNSET,
        offset: Union[Optional[int], UnsetType] = UNSET,
        name: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetEntities:
        query = gql(
            """
            query GetEntities($libraryIds: [ID!], $limit: Int = 100, $offset: Int = 0, $name: String) {
              entities(libraryIds: $libraryIds, limit: $limit, offset: $offset, name: $name) {
                count
                records {
                  id
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "libraryIds": libraryIds,
            "limit": limit,
            "offset": offset,
            "name": name,
        }
        response = self.execute(
            query=query, operation_name="GetEntities", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetEntities.model_validate(data)

    def get_folder(
        self,
        id: str,
        limit: Union[Optional[int], UnsetType] = UNSET,
        offset: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetFolder:
        query = gql(
            """
            query Get_Folder($id: ID!, $limit: Int = 30, $offset: Int = 0) {
              folder(id: $id) {
                id
                name
                parent {
                  id
                  name
                }
                childFolders(
                  limit: $limit
                  offset: $offset
                  orderBy: [{field: name, direction: asc}]
                ) {
                  records {
                    id
                    name
                  }
                }
                childTDOs(limit: 100) {
                  count
                  records {
                    id
                    name
                    createdDateTime
                    modifiedDateTime
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "limit": limit, "offset": offset}
        response = self.execute(
            query=query, operation_name="Get_Folder", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetFolder.model_validate(data)

    def get_libraries(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        offset: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetLibraries:
        query = gql(
            """
            query GetLibraries($limit: Int = 100, $offset: Int = 0) {
              libraries(limit: $limit, offset: $offset) {
                records {
                  id
                  name
                  libraryTypeId
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "offset": offset}
        response = self.execute(
            query=query, operation_name="GetLibraries", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetLibraries.model_validate(data)

    def rag_get_tdo_content(self, id: str, **kwargs: Any) -> RAGGetTDOContent:
        query = gql(
            """
            query RAG_GetTDO_Content($id: ID!) {
              temporalDataObject(id: $id) {
                id
                createdDateTime
                modifiedDateTime
                startDateTime
                stopDateTime
                name
                ...TDO_Content
              }
            }

            fragment TDO_Content on TemporalDataObject {
              assets(assetType: ["text", "AION", "vtn-standard", "media", "content-template"]) {
                records {
                  name
                  contentType
                  assetType
                  signedUri
                  uri
                  sourceData {
                    name
                    engine {
                      category {
                        name
                      }
                    }
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = self.execute(
            query=query,
            operation_name="RAG_GetTDO_Content",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RAGGetTDOContent.model_validate(data)

    def rag_get_td_os_meta(
        self, ids: List[str], idsCount: int, **kwargs: Any
    ) -> RAGGetTDOsMeta:
        query = gql(
            """
            query RAG_GetTDOs_Meta($ids: [ID!]!, $idsCount: Int!) {
              temporalDataObjects(ids: $ids, limit: $idsCount) {
                records {
                  ...TDO_Meta
                }
              }
            }

            fragment TDO_Meta on TemporalDataObject {
              id
              createdDateTime
              modifiedDateTime
              name
              description
            }
            """
        )
        variables: Dict[str, object] = {"ids": ids, "idsCount": idsCount}
        response = self.execute(
            query=query,
            operation_name="RAG_GetTDOs_Meta",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return RAGGetTDOsMeta.model_validate(data)

    def get_recent_tdos(
        self,
        fromDateTime: datetime,
        toDateTime: datetime,
        limit: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetRecentTdos:
        query = gql(
            """
            query Get_Recent_Tdos($fromDateTime: DateTime!, $toDateTime: DateTime!, $limit: Int = 30) {
              temporalDataObjects(
                dateTimeFilter: {fromDateTime: $fromDateTime, toDateTime: $toDateTime, field: createdDateTime}
                orderBy: createdDateTime
                orderDirection: desc
                limit: $limit
              ) {
                records {
                  id
                  name
                  createdDateTime
                  modifiedDateTime
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "fromDateTime": fromDateTime,
            "toDateTime": toDateTime,
            "limit": limit,
        }
        response = self.execute(
            query=query, operation_name="Get_Recent_Tdos", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetRecentTdos.model_validate(data)

    def get_root_folders(self, **kwargs: Any) -> GetRootFolders:
        query = gql(
            """
            query Get_Root_Folders {
              rootFolders {
                id
                name
                rootFolderTypeId
                ownerId
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query,
            operation_name="Get_Root_Folders",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetRootFolders.model_validate(data)

    def get_watchlists(
        self,
        limit: Union[Optional[int], UnsetType] = UNSET,
        offset: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> GetWatchlists:
        query = gql(
            """
            query GetWatchlists($limit: Int = 100, $offset: Int = 0) {
              watchlists(limit: $limit, offset: $offset) {
                count
                records {
                  id
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"limit": limit, "offset": offset}
        response = self.execute(
            query=query, operation_name="GetWatchlists", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetWatchlists.model_validate(data)
