"""
AvaTax Software Development Kit for Python.

   Copyright 2022 Avalara, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

    Avalara Shipping Verification for Beverage Alcohol
    API for evaluating transactions against direct-to-consumer Beverage Alcohol shipping regulations.  This API is currently in beta.  

@author     Sachin Baijal <sachin.baijal@avalara.com>
@author     Jonathan Wenger <jonathan.wenger@avalara.com>
@copyright  2022 Avalara, Inc.
@license    https://www.apache.org/licenses/LICENSE-2.0
@link       https://github.com/avadev/AvaTax-REST-V3-Python-SDK
"""


import copy
import logging
import multiprocessing
from os import access
import sys
from webbrowser import get
import urllib3

from http import client as http_client
from Avalara.SDK.exceptions import ApiValueError
from Avalara.SDK.oauth_helper.AvalaraOauth2Client import ( AvalaraOauth2Client )
from Avalara.SDK.oauth_helper.AvalaraSdkOauthUtils import (
    AvalaraApiEnvironment,
)


JSON_SCHEMA_VALIDATION_KEYWORDS = {
    'multipleOf',
    'maximum',
    'exclusiveMaximum',
    'minimum',
    'exclusiveMinimum',
    'maxLength',
    'minLength',
    'pattern',
    'maxItems',
    'minItems',
}


class Configuration(object):
    """NOTE: This class is auto generated by OpenAPI Generator

        Ref: https://openapi-generator.tech
        Do not edit the class manually.

        :param host: Base url
        :param api_key: Dict to store API key(s).
          Each entry in the dict specifies an API key.
          The dict key is the name of the security scheme in the OAS specification.
          The dict value is the API key secret.
        :param api_key_prefix: Dict to store API prefix (e.g. Bearer)
          The dict key is the name of the security scheme in the OAS specification.
          The dict value is an API key prefix when generating the auth data.
        :param username: Username for HTTP basic authentication
        :param password: Password for HTTP basic authentication
        :param discard_unknown_keys: Boolean value indicating whether to discard
          unknown properties. A server may send a response that includes additional
          properties that are not known by the client in the following scenarios:
          1. The OpenAPI document is incomplete, i.e. it does not match the server
             implementation.
          2. The client was generated using an older version of the OpenAPI document
             and the server has been upgraded since then.
          If a schema in the OpenAPI document defines the additionalProperties attribute,
          then all undeclared properties received by the server are injected into the
          additional properties map. In that case, there are undeclared properties, and
          nothing to discard.
        :param disabled_client_side_validations (string): Comma-separated list of
          JSON schema validation keywords to disable JSON schema structural validation
          rules. The following keywords may be specified: multipleOf, maximum,
          exclusiveMaximum, minimum, exclusiveMinimum, maxLength, minLength, pattern,
          maxItems, minItems.
          By default, the validation is performed for data generated locally by the client
          and data received from the server, independent of any validation performed by
          the server side. If the input data does not satisfy the JSON schema validation
          rules specified in the OpenAPI document, an exception is raised.
          If disabled_client_side_validations is set, structural validation is
          disabled. This can be useful to troubleshoot data validation problem, such as
          when the OpenAPI document validation rules do not match the actual API data
          received by the server.
        :param server_index: Index to servers configuration.
        :param server_variables: Mapping with string values to replace variables in
          templated server configuration. The validation of enums is performed for
          variables with defined enum values before.
        :param server_operation_index: Mapping from operation ID to an index to server
          configuration.
        :param server_operation_variables: Mapping from operation ID to a mapping with
          string values to replace variables in templated server configuration.
          The validation of enums is performed for variables with defined enum values before.
        :param ssl_ca_cert: str - the path to a file of concatenated CA certificates
          in PEM format

        :Example:

        API Key Authentication Example.
        Given the following security scheme in the OpenAPI specification:
          components:
            securitySchemes:
              cookieAuth:         # name for the security scheme
                type: apiKey
                in: cookie
                name: JSESSIONID  # cookie name

        You can programmatically set the cookie:

    conf = Avalara.SDK.Configuration(
        api_key={'cookieAuth': 'abc123'}
        api_key_prefix={'cookieAuth': 'JSESSIONID'}
    )

        The following cookie will be added to the HTTP request:
           Cookie: JSESSIONID abc123

        HTTP Basic Authentication Example.
        Given the following security scheme in the OpenAPI specification:
          components:
            securitySchemes:
              http_basic_auth:
                type: http
                scheme: basic

        Configure API client with HTTP basic authentication:

    conf = Avalara.SDK.Configuration(
        username='the-user',
        password='the-password',
    )

    """

    _default = None

    # Official URL of EInvoicing Service (Production by Environment)
    EINVOICING_SERVICE_PRODUCTION_URL = 'https://api.avalara.com'
    EINVOICING_SERVICE_SANDBOX_URL = 'https://api.sbx.avalara.com'
    EINVOICING_SERVICE_QA_URL = 'https://superapi.qa.avalara.io'
    EINVOICING_SERVICE_DEV_URL = 'https://superapi.dev.avalara.io'

    # Official URL of A1099 Service (Production by Environment)
    A1099_SERVICE_PRODUCTION_URL = 'https://api.avalara.com/avalara1099'
    A1099_SERVICE_SANDBOX_URL = 'https://api.sbx.avalara.com/avalara1099'
    A1099_SERVICE_QA_URL = 'https://api-ava1099.gamma.qa.us-west-2.aws.avalara.io'
    A1099_SERVICE_DEV_URL = 'https://api-ava1099.gamma.dev.us-west-2.aws.avalara.io'

    def __init__(
        self,
        api_key=None,
        api_key_prefix=None,
        access_token=None,
        username=None,
        password=None,
        discard_unknown_keys=False,
        disabled_client_side_validations="",
        ssl_ca_cert=None,
        environment=None,
        app_name="",
        app_version="",
        machine_name="",
        client_id=None,
        client_secret=None,
        device_code=None,
        test_base_path=None,
    ):
        """Constructor"""
        self.__ENVIRONMENT_PROD = "production"
        self.__ENVIRONMENT_SBX = "sandbox"
        self.__ENVIRONMENT_QA = "qa"
        self.__ENVIRONMENT_DEV = "dev"
        self._base_path = ''
        self.test_base_path = test_base_path
        
        """Default Base url
        """
        if environment:
            self.avalara_oauth_api_environment = (
                self.get_avalara_oauth_api_environment(environment)
            )
        """Default server variables
        """
        self.temp_folder_path = None
        """Temp file folder for downloading files
        """
        # Authentication Settings
        self.access_token = access_token
        """dict to store API key(s)
        """
        self.api_key = {}
        if api_key:
            self.api_key = api_key

        """dict to store API prefix (e.g. Bearer)
        """
        self.api_key_prefix = {}
        if api_key_prefix:
            self.api_key_prefix = api_key_prefix

        """function hook to refresh API key if expired
        """
        self.refresh_api_key_hook = None

        """Username for HTTP basic authentication
        """
        self.username = username

        """environment
        """
        self.environment = environment

        """Password for HTTP basic authentication
        """
        self.password = password
        """Oauth2 client id
        """
        self.client_id = client_id

        """Oauth2 client secret
        """
        self.client_secret = client_secret

        """Oauth2 device code
        """
        self.device_code = device_code

        self.discard_unknown_keys = discard_unknown_keys
        self.disabled_client_side_validations = (
            disabled_client_side_validations
        )
        self.logger = {}
        """Logging Settings
        """
        self.logger["package_logger"] = logging.getLogger("Avalara.SDK")
        self.logger["urllib3_logger"] = logging.getLogger("urllib3")
        self.logger_format = '%(asctime)s %(levelname)s %(message)s'
        """Log format
        """
        self.logger_stream_handler = None
        """Log stream handler
        """
        self.logger_file_handler = None
        """Log file handler
        """
        self.logger_file = None
        """Debug file location
        """
        self.debug = False
        """Debug switch
        """

        self.verify_ssl = False
        """SSL/TLS verification
           Set this to false to skip verifying SSL certificate when calling API
           from https server.
        """
        self.ssl_ca_cert = ssl_ca_cert
        """Set this to customize the certificate file to verify the peer.
        """
        self.cert_file = None
        """client certificate file
        """
        self.key_file = None
        """client key file
        """
        self.assert_hostname = None
        """Set this to True/False to enable/disable SSL hostname verification.
        """

        self.connection_pool_maxsize = multiprocessing.cpu_count() * 5
        """urllib3 connection pool's maximum number of connections saved
           per pool. urllib3 uses 1 connection as default value, but this is
           not the best value when you are making a lot of possibly parallel
           requests to the same host, which is often the case here.
           cpu_count * 5 is used as default value to increase performance.
        """

        self.proxy = None
        """Proxy URL
        """
        self.no_proxy = None
        """bypass proxy for host in the no_proxy list.
        """
        self.proxy_headers = None
        """Proxy headers
        """
        self.safe_chars_for_path_param = ''
        """Safe chars for path_param
        """
        self.retries = None
        """Adding retries to override urllib3 default value 3
        """
        self.app_name = app_name
        """app_name to be set in request header
        """
        self.app_version = app_version
        """app_version to be set in request header
        """
        self.machine_name = machine_name
        """machine_name to be set in request header
        """
        # Enable client side validation
        self.client_side_validation = True

        # Options to pass down to the underlying urllib3 socket
        self.socket_options = None
        self.outh2_client = AvalaraOauth2Client(
            self.client_id,
            self.client_secret,
            required_scopes=None,
            avalara_api_environment=self.avalara_oauth_api_environment,
        )

    def get_base_path(self, microservice="none"):
        """Returns base URL for specified operation based on server settings and microservice
        
        :param microservice: Microservice name (EInvoicing, A1099, or none)
        :return: Base URL for the microservice
        """
        environment = self.environment.lower() if self.environment else ""
        
        if environment == 'test' and not self.test_base_path:
            raise ApiValueError("TestBasePath must be configured to run in test environment mode.")

        if microservice == "EInvoicing":
            if environment == "production":
                return self.EINVOICING_SERVICE_PRODUCTION_URL
            elif environment == "sandbox":
                return self.EINVOICING_SERVICE_SANDBOX_URL
            elif environment == "qa":
                return self.EINVOICING_SERVICE_QA_URL
            elif environment == "dev":
                return self.EINVOICING_SERVICE_DEV_URL
            elif environment == "test":
                return self.test_base_path
            else:
                raise ApiValueError('Environment not configured correctly, Acceptable values are "production", "sandbox", "qa", "dev", and "test".')
        elif microservice == "A1099":
            if environment == "production":
                return self.A1099_SERVICE_PRODUCTION_URL
            elif environment == "sandbox":
                return self.A1099_SERVICE_SANDBOX_URL
            elif environment == "qa":
                return self.A1099_SERVICE_QA_URL
            elif environment == "dev":
                return self.A1099_SERVICE_DEV_URL
            elif environment == "test":
                return self.test_base_path
            else:
                raise ApiValueError('Environment not configured correctly, Acceptable values are "production", "sandbox", "qa", "dev", and "test".')
        elif microservice == "none":
            raise ApiValueError('Microservice not configured correctly, Acceptable values are "EInvoicing", "A1099", and "none".')

    def get_avalara_oauth_api_environment(self, env):
        avalara_environment = None
        if self.__ENVIRONMENT_PROD == env:
            avalara_environment = AvalaraApiEnvironment.Production
        elif self.__ENVIRONMENT_SBX == env:
            avalara_environment = AvalaraApiEnvironment.Sandbox
        elif self.__ENVIRONMENT_QA == env:
            avalara_environment = AvalaraApiEnvironment.QA
        elif self.__ENVIRONMENT_DEV == env:
            avalara_environment = AvalaraApiEnvironment.Dev
        return avalara_environment

    def __deepcopy__(self, memo):
        cls = self.__class__
        result = cls.__new__(cls)
        memo[id(self)] = result
        for k, v in self.__dict__.items():
            if k not in ('logger', 'logger_file_handler'):
                setattr(result, k, copy.deepcopy(v, memo))
        # shallow copy of loggers
        result.logger = copy.copy(self.logger)
        # use setters to configure loggers
        result.logger_file = self.logger_file
        result.debug = self.debug
        return result

    def __setattr__(self, name, value):
        object.__setattr__(self, name, value)
        if name == 'disabled_client_side_validations':
            s = set(filter(None, value.split(',')))
            for v in s:
                if v not in JSON_SCHEMA_VALIDATION_KEYWORDS:
                    raise ApiValueError("Invalid keyword: '{0}''".format(v))
            self._disabled_client_side_validations = s

    @classmethod
    def set_default(cls, default):
        """Set default instance of configuration.

        It stores default configuration, which can be
        returned by get_default_copy method.

        :param default: object of Configuration
        """
        cls._default = copy.deepcopy(default)

    @classmethod
    def get_default_copy(cls):
        """Return new instance of configuration.

        This method returns newly created, based on default constructor,
        object of Configuration class or returns a copy of default
        configuration passed by the set_default method.

        :return: The configuration object.
        """
        if cls._default is not None:
            return copy.deepcopy(cls._default)
        return Configuration()

    @property
    def logger_file(self):
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        return self.__logger_file

    @logger_file.setter
    def logger_file(self, value):
        """The logger file.

        If the logger_file is None, then add stream handler and remove file
        handler. Otherwise, add file handler and remove stream handler.

        :param value: The logger_file path.
        :type: str
        """
        self.__logger_file = value
        if self.__logger_file:
            # If set logging file,
            # then add file handler and remove stream handler.
            self.logger_file_handler = logging.FileHandler(self.__logger_file)
            self.logger_file_handler.setFormatter(self.logger_formatter)
            for _, logger in self.logger.items():
                logger.addHandler(self.logger_file_handler)

    @property
    def debug(self):
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        return self.__debug

    @debug.setter
    def debug(self, value):
        """Debug status

        :param value: The debug status, True or False.
        :type: bool
        """
        self.__debug = value
        if self.__debug:
            # if debug status is True, turn on debug logging
            for _, logger in self.logger.items():
                logger.setLevel(logging.DEBUG)
            # turn on http_client debug
            http_client.HTTPConnection.debuglevel = 1
        else:
            # if debug status is False, turn off debug logging,
            # setting log level to default `logging.WARNING`
            for _, logger in self.logger.items():
                logger.setLevel(logging.WARNING)
            # turn off http_client debug
            http_client.HTTPConnection.debuglevel = 0

    @property
    def logger_format(self):
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        return self.__logger_format

    @logger_format.setter
    def logger_format(self, value):
        """The logger format.

        The logger_formatter will be updated when sets logger_format.

        :param value: The format string.
        :type: str
        """
        self.__logger_format = value
        self.logger_formatter = logging.Formatter(self.__logger_format)

    def get_api_key_with_prefix(self, identifier, alias=None):
        """Gets API key (with prefix if set).

        :param identifier: The identifier of apiKey.
        :param alias: The alternative identifier of apiKey.
        :return: The token for api key authentication.
        """
        if self.refresh_api_key_hook is not None:
            self.refresh_api_key_hook(self)
        key = self.api_key.get(
            identifier, self.api_key.get(alias) if alias is not None else None
        )
        if key:
            prefix = self.api_key_prefix.get(identifier)
            if prefix:
                return "%s %s" % (prefix, key)
            else:
                return key

    def get_basic_auth_token(self):
        """Gets HTTP basic authentication header (string).

        :return: The token for basic HTTP authentication.
        """
        username = ""
        if self.username is not None:
            username = self.username
        password = ""
        if self.password is not None:
            password = self.password
        return urllib3.util.make_headers(
            basic_auth=username + ':' + password
        ).get('authorization')

    def auth_settings(self, required_scopes):
        """Gets Auth Settings dict for api client.

        :return: The Auth Settings information dict.
        """
        auth = {}
        if self.username is not None and self.password is not None:
            auth['BasicAuth'] = {
                'type': 'basic',
                'in': 'header',
                'key': 'Authorization',
                'value': self.get_basic_auth_token(),
            }
        if 'Bearer' in self.api_key:
            auth['Bearer'] = {
                'type': 'api_key',
                'in': 'header',
                'key': 'Authorization',
                'value': self.get_api_key_with_prefix(
                    'Bearer',
                ),
            }
        elif self.access_token is not None:
            auth['Bearer'] = {
                'type': 'api_key',
                'in': 'header',
                'key': 'Authorization',
                'value': f'Bearer {self.access_token}',
            }
            auth['bearer'] = {
                'type': 'api_key',
                'in': 'header',
                'key': 'Authorization',
                'value': f'Bearer {self.access_token}',
            }
        elif self.client_id is not None and not self.is_null_or_empty(
            self.client_secret
        ):
            auth['OAuth'] = {
                'type': 'api_key',
                'in': 'header',
                'key': 'Authorization',
                'value': self.get_oauth2_access_token(required_scopes),
            }
        return auth

    def is_null_or_empty(self, value):
        return value is None or len(value) <= 0

    def get_oauth2_access_token(self, required_scopes):
        self.outh2_client = AvalaraOauth2Client(
            self.client_id,
            self.client_secret,
            required_scopes,
            self.avalara_oauth_api_environment,
        )
        access_token_info = self.outh2_client.get_avalara_access_token_info()
        access_token = access_token_info.get("access_token")
        return f"Bearer {access_token}"

    def get_host_settings(self):
        """Gets an array of host settings

        :return: An array of host settings
        """
        return [
            {
                'url': "",
                'description': "No description provided",
            }
        ]

    def get_host_from_settings(self, microservice="none"):
        """Gets host URL based on the environment and microservice
        :param microservice: Microservice name (EInvoicing, A1099, or none)
        :return: URL based on host settings
        """
        return self.get_base_path(microservice)


class AvalaraMicroservice:
    """Microservice enumeration"""
    EINVOICING = "EInvoicing"
    A1099 = "A1099"
    NONE = "none"
