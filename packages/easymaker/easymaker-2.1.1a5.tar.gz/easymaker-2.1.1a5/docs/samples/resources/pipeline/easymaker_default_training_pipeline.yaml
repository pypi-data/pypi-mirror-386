apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: easymaker-tfjob-pipeline-
  annotations: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.4, pipelines.kubeflow.org/pipeline_compilation_time: '2022-06-21T16:14:32.108923',
    pipelines.kubeflow.org/pipeline_spec: '{"description": "EasyMaker Default TFJob
      Training Pipeline", "inputs": [{"name": "training_id"}, {"name": "tfjob_name"},
      {"name": "tfjob_namespace"}, {"name": "tfjob_version"}, {"name": "train_image_uri"},
      {"name": "run_command"}, {"name": "registry_credential_name"}, {"default": "43200",
      "name": "timeout_minutes", "optional": true}, {"default": "1", "name": "worker_replicas",
      "optional": true}, {"default": "0", "name": "gpu_limits", "optional": true},
      {"default": "/app", "name": "working_dir", "optional": true}], "name": "EasyMaker
      TFJob Pipeline"}'}
  labels: {pipelines.kubeflow.org/kfp_sdk_version: 1.8.4}
spec:
  entrypoint: easymaker-tfjob-pipeline
  templates:
  - name: create-postprocess-task
    container:
      args: [--executor_input, '{{$}}', --function_to_execute, create_postprocess_task]
      command:
      - sh
      - -c
      - (python3 -m ensurepip || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet                 --no-warn-script-location 'kfp==1.8.4'
        || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location
        'kfp==1.8.4' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp -d)
        printf "%s" "$0" > "$program_path/ephemeral_component.py"
        python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
      - "\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_postprocess_task(training_id):\n\
        \    # TODO. \uD2B8\uB808\uC774\uB2DD\uC5D0 \uC0AC\uC6A9\uB41C \uB9AC\uC18C\
        \uC2A4 \uC815\uB9AC\uB97C \uC704\uD574 API \uD638\uCD9C (API \uC11C\uBC84\uC5D0\
        \uC11C \uB178\uB4DC\uADF8\uB8F9, \uC2A4\uD1A0\uB9AC\uC9C0 \uC0AD\uC81C \uB4F1\
        \ \uC9C4\uD589)\n    print(f'create_postprocess_task {training_id}')\n   \
        \ return training_id\n\n"
      image: python:3.7
    inputs:
      artifacts:
      - {name: training_id, path: /tmp/inputs/training_id/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.4
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--executor_input", {"executorInput": null}, "--function_to_execute",
          "create_postprocess_task"], "command": ["sh", "-c", "(python3 -m ensurepip
          || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1 python3
          -m pip install --quiet                 --no-warn-script-location ''kfp==1.8.4''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location
          ''kfp==1.8.4'' --user) && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp
          -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3
          -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
          "\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_postprocess_task(training_id):\n    #
          TODO. \ud2b8\ub808\uc774\ub2dd\uc5d0 \uc0ac\uc6a9\ub41c \ub9ac\uc18c\uc2a4
          \uc815\ub9ac\ub97c \uc704\ud574 API \ud638\ucd9c (API \uc11c\ubc84\uc5d0\uc11c
          \ub178\ub4dc\uadf8\ub8f9, \uc2a4\ud1a0\ub9ac\uc9c0 \uc0ad\uc81c \ub4f1 \uc9c4\ud589)\n    print(f''create_postprocess_task
          {training_id}'')\n    return training_id\n\n"], "image": "python:3.7"}},
          "inputs": [{"name": "training_id"}], "name": "Create postprocess task"}',
        pipelines.kubeflow.org/component_ref: '{}'}
  - name: create-preprocess-task
    container:
      args: [--executor_input, '{{$}}', --function_to_execute, create_preprocess_task]
      command:
      - sh
      - -c
      - (python3 -m ensurepip || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1
        python3 -m pip install --quiet                 --no-warn-script-location 'kfp==1.8.4'
        || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location
        'kfp==1.8.4' --user) && "$0" "$@"
      - sh
      - -ec
      - |
        program_path=$(mktemp -d)
        printf "%s" "$0" > "$program_path/ephemeral_component.py"
        python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
      - "\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_preprocess_task(training_id:\
        \ str) -> str:\n    # TODO. DB\uC5D0\uC11C training_id\uC5D0 \uD574\uB2F9\uD558\
        \uB294 channel \uC815\uBCF4 \uC870\uD68C, channel \uC874\uC7AC\uD558\uBA74\
        \ \uB370\uC774\uD130 \uB2E4\uC6B4\uB85C\uB4DC\n    print(f'create_preprocess_task\
        \ {training_id}')\n    return training_id\n\n"
      image: python:3.7
    inputs:
      artifacts:
      - {name: training_id, path: /tmp/inputs/training_id/data}
    outputs:
      artifacts:
      - {name: create-preprocess-task-Output, path: /tmp/outputs/Output/data}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.4
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"implementation": {"container":
          {"args": ["--executor_input", {"executorInput": null}, "--function_to_execute",
          "create_preprocess_task"], "command": ["sh", "-c", "(python3 -m ensurepip
          || python3 -m ensurepip --user) && (PIP_DISABLE_PIP_VERSION_CHECK=1 python3
          -m pip install --quiet                 --no-warn-script-location ''kfp==1.8.4''
          || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet                 --no-warn-script-location
          ''kfp==1.8.4'' --user) && \"$0\" \"$@\"", "sh", "-ec", "program_path=$(mktemp
          -d)\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\npython3
          -m kfp.v2.components.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
          "\nfrom kfp.v2.dsl import *\nfrom typing import *\n\ndef create_preprocess_task(training_id:
          str) -> str:\n    # TODO. DB\uc5d0\uc11c training_id\uc5d0 \ud574\ub2f9\ud558\ub294
          channel \uc815\ubcf4 \uc870\ud68c, channel \uc874\uc7ac\ud558\uba74 \ub370\uc774\ud130
          \ub2e4\uc6b4\ub85c\ub4dc\n    print(f''create_preprocess_task {training_id}'')\n    return
          training_id\n\n"], "image": "python:3.7"}}, "inputs": [{"name": "training_id",
          "type": "String"}], "name": "Create preprocess task", "outputs": [{"name":
          "Output", "type": "String"}]}', pipelines.kubeflow.org/component_ref: '{}'}
  - name: easymaker-tfjob-pipeline
    inputs:
      parameters:
      - {name: gpu_limits}
      - {name: registry_credential_name}
      - {name: run_command}
      - {name: tfjob_name}
      - {name: tfjob_namespace}
      - {name: tfjob_version}
      - {name: timeout_minutes}
      - {name: train_image_uri}
      - {name: worker_replicas}
      - {name: working_dir}
      artifacts:
      - {name: training_id}
    dag:
      tasks:
      - name: create-postprocess-task
        template: create-postprocess-task
        dependencies: [kubeflow-launch-tfjob]
        arguments:
          artifacts:
          - {name: training_id, from: '{{inputs.artifacts.training_id}}'}
      - name: create-preprocess-task
        template: create-preprocess-task
        arguments:
          artifacts:
          - {name: training_id, from: '{{inputs.artifacts.training_id}}'}
      - name: kubeflow-launch-tfjob
        template: kubeflow-launch-tfjob
        dependencies: [create-preprocess-task]
        arguments:
          parameters:
          - {name: gpu_limits, value: '{{inputs.parameters.gpu_limits}}'}
          - {name: registry_credential_name, value: '{{inputs.parameters.registry_credential_name}}'}
          - {name: run_command, value: '{{inputs.parameters.run_command}}'}
          - {name: tfjob_name, value: '{{inputs.parameters.tfjob_name}}'}
          - {name: tfjob_namespace, value: '{{inputs.parameters.tfjob_namespace}}'}
          - {name: tfjob_version, value: '{{inputs.parameters.tfjob_version}}'}
          - {name: timeout_minutes, value: '{{inputs.parameters.timeout_minutes}}'}
          - {name: train_image_uri, value: '{{inputs.parameters.train_image_uri}}'}
          - {name: worker_replicas, value: '{{inputs.parameters.worker_replicas}}'}
          - {name: working_dir, value: '{{inputs.parameters.working_dir}}'}
  - name: kubeflow-launch-tfjob
    container:
      args:
      - --name
      - '{{inputs.parameters.tfjob_name}}'
      - --namespace
      - '{{inputs.parameters.tfjob_namespace}}'
      - --version
      - '{{inputs.parameters.tfjob_version}}'
      - --activeDeadlineSeconds
      - '-1'
      - --backoffLimit
      - '-1'
      - --cleanPodPolicy
      - Running
      - --ttlSecondsAfterFinished
      - '-1'
      - --psSpec
      - '{}'
      - --workerSpec
      - '{"replicas": "{{inputs.parameters.worker_replicas}}", "restartPolicy": "Never",
        "template": {"metadata": {"annotations": {"sidecar.istio.io/inject": "false"}},
        "spec": {"containers": [{"name": "tensorflow", "image": "{{inputs.parameters.train_image_uri}}",
        "command": ["sh", "-c"], "args": ["{{inputs.parameters.run_command}}"], "workingDir":
        "{{inputs.parameters.working_dir}}", "imagePullSecrets": [{"name": "{{inputs.parameters.registry_credential_name}}"}],
        "resources": {"limits": {"nvidia.com/gpu": "{{inputs.parameters.gpu_limits}}"}}}],
        "cleanPodPolicy": "None"}}}'
      - --chiefSpec
      - '{"replicas": 1, "restartPolicy": "Never", "template": {"metadata": {"annotations":
        {"sidecar.istio.io/inject": "false"}}, "spec": {"containers": [{"name": "tensorflow",
        "image": "{{inputs.parameters.train_image_uri}}", "command": ["sh", "-c"],
        "args": ["{{inputs.parameters.run_command}}"], "workingDir": "{{inputs.parameters.working_dir}}",
        "imagePullSecrets": [{"name": "{{inputs.parameters.registry_credential_name}}"}],
        "resources": {"limits": {"nvidia.com/gpu": "0"}}}], "cleanPodPolicy": "None"}}}'
      - --evaluatorSpec
      - '{}'
      - --tfjobTimeoutMinutes
      - '{{inputs.parameters.timeout_minutes}}'
      - --deleteAfterDone
      - "False"
      command: [python, /ml/launch_tfjob.py]
      image: nikenano/launchernew:latest
    inputs:
      parameters:
      - {name: gpu_limits}
      - {name: registry_credential_name}
      - {name: run_command}
      - {name: tfjob_name}
      - {name: tfjob_namespace}
      - {name: tfjob_version}
      - {name: timeout_minutes}
      - {name: train_image_uri}
      - {name: worker_replicas}
      - {name: working_dir}
    metadata:
      labels:
        pipelines.kubeflow.org/kfp_sdk_version: 1.8.4
        pipelines.kubeflow.org/pipeline-sdk-type: kfp
        pipelines.kubeflow.org/enable_caching: "true"
      annotations: {pipelines.kubeflow.org/component_spec: '{"description": "Kubeflow
          TFJob launcher", "implementation": {"container": {"args": ["--name", {"inputValue":
          "Name"}, "--namespace", {"inputValue": "Namespace"}, "--version", {"inputValue":
          "Version"}, "--activeDeadlineSeconds", {"inputValue": "ActiveDeadlineSeconds"},
          "--backoffLimit", {"inputValue": "BackoffLimit"}, "--cleanPodPolicy", {"inputValue":
          "CleanPodPolicy"}, "--ttlSecondsAfterFinished", {"inputValue": "ttl Seconds
          After Finished"}, "--psSpec", {"inputValue": "PS Spec"}, "--workerSpec",
          {"inputValue": "Worker Spec"}, "--chiefSpec", {"inputValue": "Chief Spec"},
          "--evaluatorSpec", {"inputValue": "Evaluator Spec"}, "--tfjobTimeoutMinutes",
          {"inputValue": "Tfjob Timeout Minutes"}, "--deleteAfterDone", {"inputValue":
          "Delete Finished Tfjob"}], "command": ["python", "/ml/launch_tfjob.py"],
          "image": "nikenano/launchernew:latest"}}, "inputs": [{"description": "TFJob
          name.", "name": "Name", "type": "String"}, {"default": "kubeflow", "description":
          "TFJob namespace.", "name": "Namespace", "type": "String"}, {"default":
          "v1", "description": "TFJob version.", "name": "Version", "type": "String"},
          {"default": -1, "description": "Specifies the duration (in seconds) since
          startTime during which the job can remain active before it is terminated.
          Must be a positive integer. This setting applies only to pods where restartPolicy
          is OnFailure or Always.", "name": "ActiveDeadlineSeconds", "type": "Integer"},
          {"default": -1, "description": "Number of retries before marking this job
          as failed.", "name": "BackoffLimit", "type": "Integer"}, {"default": -1,
          "description": "Defines the TTL for cleaning up finished TFJobs.", "name":
          "ttl Seconds After Finished", "type": "Integer"}, {"default": "Running",
          "description": "Defines the policy for cleaning up pods after the TFJob
          completes.", "name": "CleanPodPolicy", "type": "String"}, {"default": "{}",
          "description": "TFJob ps replicaSpecs.", "name": "PS Spec", "type": "JsonObject"},
          {"default": "{}", "description": "TFJob worker replicaSpecs.", "name": "Worker
          Spec", "type": "JsonObject"}, {"default": "{}", "description": "TFJob chief
          replicaSpecs.", "name": "Chief Spec", "type": "JsonObject"}, {"default":
          "{}", "description": "TFJob evaluator replicaSpecs.", "name": "Evaluator
          Spec", "type": "JsonObject"}, {"default": 1440, "description": "Time in
          minutes to wait for the TFJob to complete.", "name": "Tfjob Timeout Minutes",
          "type": "Integer"}, {"default": "True", "description": "Whether to delete
          the tfjob after it is finished.", "name": "Delete Finished Tfjob", "type":
          "Bool"}], "name": "Kubeflow - Launch TFJob"}', pipelines.kubeflow.org/component_ref: '{"digest":
          "98fd1829c0a5ff1b36c53bc2a8d6482d33a7a5dc042e2ee661840be06065c325", "url":
          "https://raw.githubusercontent.com/kubeflow/pipelines/master/components/kubeflow/launcher/component.yaml"}',
        pipelines.kubeflow.org/arguments.parameters: '{"ActiveDeadlineSeconds": "-1",
          "BackoffLimit": "-1", "Chief Spec": "{\"replicas\": 1, \"restartPolicy\":
          \"Never\", \"template\": {\"metadata\": {\"annotations\": {\"sidecar.istio.io/inject\":
          \"false\"}}, \"spec\": {\"containers\": [{\"name\": \"tensorflow\", \"image\":
          \"{{inputs.parameters.train_image_uri}}\", \"command\": [\"sh\", \"-c\"],
          \"args\": [\"{{inputs.parameters.run_command}}\"], \"workingDir\": \"{{inputs.parameters.working_dir}}\",
          \"imagePullSecrets\": [{\"name\": \"{{inputs.parameters.registry_credential_name}}\"}],
          \"resources\": {\"limits\": {\"nvidia.com/gpu\": \"0\"}}}], \"cleanPodPolicy\":
          \"None\"}}}", "CleanPodPolicy": "Running", "Delete Finished Tfjob": "False",
          "Evaluator Spec": "{}", "Name": "{{inputs.parameters.tfjob_name}}", "Namespace":
          "{{inputs.parameters.tfjob_namespace}}", "PS Spec": "{}", "Tfjob Timeout
          Minutes": "{{inputs.parameters.timeout_minutes}}", "Version": "{{inputs.parameters.tfjob_version}}",
          "Worker Spec": "{\"replicas\": \"{{inputs.parameters.worker_replicas}}\",
          \"restartPolicy\": \"Never\", \"template\": {\"metadata\": {\"annotations\":
          {\"sidecar.istio.io/inject\": \"false\"}}, \"spec\": {\"containers\": [{\"name\":
          \"tensorflow\", \"image\": \"{{inputs.parameters.train_image_uri}}\", \"command\":
          [\"sh\", \"-c\"], \"args\": [\"{{inputs.parameters.run_command}}\"], \"workingDir\":
          \"{{inputs.parameters.working_dir}}\", \"imagePullSecrets\": [{\"name\":
          \"{{inputs.parameters.registry_credential_name}}\"}], \"resources\": {\"limits\":
          {\"nvidia.com/gpu\": \"{{inputs.parameters.gpu_limits}}\"}}}], \"cleanPodPolicy\":
          \"None\"}}}", "ttl Seconds After Finished": "-1"}'}
  arguments:
    parameters:
    - {name: training_id}
    - {name: tfjob_name}
    - {name: tfjob_namespace}
    - {name: tfjob_version}
    - {name: train_image_uri}
    - {name: run_command}
    - {name: registry_credential_name}
    - {name: timeout_minutes, value: '43200'}
    - {name: worker_replicas, value: '1'}
    - {name: gpu_limits, value: '0'}
    - {name: working_dir, value: /app}
    artifacts:
    - name: training_id
      raw: {data: '{{workflow.parameters.training_id}}'}
  serviceAccountName: pipeline-runner
