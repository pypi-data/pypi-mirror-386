# PSR Factory. Copyright (C) PSR, Inc - All Rights Reserved
# Unauthorized copying of this file, via any medium is strictly prohibited
# Proprietary and confidential

import ctypes
import os
import sys

import psr.psrfcommon


lib = None

if sys.platform == "win32":
    def get_lib_path() -> str:
        return os.path.join(os.path.dirname(__file__), "factory.dll")
    def load_lib():
        return ctypes.cdll.LoadLibrary(get_lib_path())
else:
    def get_lib_path() -> str:
        return os.path.join(os.path.dirname(__file__), "libfactory.so")
    def load_lib():
        with psr.psrfcommon.change_cwd(os.path.dirname(__file__)):
            lib_path = "./libfactory.so"
            return ctypes.cdll.LoadLibrary(lib_path)


def initialize():
    global lib
    lib = load_lib()

    lib.psrd_check_license.restype = ctypes.c_int
    lib.psrd_check_license.argtypes = [ctypes.c_void_p]
    lib.psrd_initialize.restype = ctypes.c_int
    lib.psrd_initialize.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_unload.restype = ctypes.c_int
    lib.psrd_unload.argtypes = [ctypes.c_void_p]
    lib.psrd_set_global_setting.restype = ctypes.c_int
    lib.psrd_set_global_setting.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_get_global_setting.restype = ctypes.c_int
    lib.psrd_get_global_setting.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_set_binding_property.restype = ctypes.c_int
    lib.psrd_set_binding_property.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_version_short.restype = ctypes.c_int
    lib.psrd_version_short.argtypes = [ctypes.c_char_p, ctypes.c_long]
    lib.psrd_version_long.restype = ctypes.c_int
    lib.psrd_version_long.argtypes = [ctypes.c_char_p, ctypes.c_long]
    lib.psrd_help.restype = ctypes.c_int
    lib.psrd_help.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_set_log_level.restype = ctypes.c_int
    lib.psrd_set_log_level.argtypes = [ctypes.c_long]
    lib.psrd_get_log_level.restype = ctypes.c_int
    lib.psrd_get_log_level.argtypes = [ctypes.POINTER(ctypes.c_long)]
    lib.psrd_get_log_file_path.restype = ctypes.c_int
    lib.psrd_get_log_file_path.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_set_diagnostics_mode.restype = ctypes.c_int
    lib.psrd_set_diagnostics_mode.argtypes = [ctypes.c_long]
    lib.psrd_diagnostics.restype = ctypes.c_int
    lib.psrd_diagnostics.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_get_default_context.restype = ctypes.c_void_p
    lib.psrd_get_default_context.argtypes = [ctypes.c_void_p]
    lib.psrd_new_error.restype = ctypes.c_void_p
    lib.psrd_new_error.argtypes = []
    lib.psrd_error_code.restype = ctypes.c_int
    lib.psrd_error_code.argtypes = [ctypes.c_void_p]
    lib.psrd_error_message.restype = ctypes.c_int
    lib.psrd_error_message.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long]
    lib.psrd_free_error.restype = ctypes.c_int
    lib.psrd_free_error.argtypes = [ctypes.c_void_p]
    lib.psrd_study_load.restype = ctypes.c_void_p
    lib.psrd_study_load.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_save.restype = ctypes.c_int
    lib.psrd_study_save.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_load_settings.restype = ctypes.c_void_p
    lib.psrd_study_load_settings.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_save_settings.restype = ctypes.c_int
    lib.psrd_study_save_settings.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_create.restype = ctypes.c_void_p
    lib.psrd_study_create.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_is_equals_to.restype = ctypes.c_int
    lib.psrd_study_is_equals_to.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_study_get_handler.restype = ctypes.c_longlong
    lib.psrd_study_get_handler.argtypes = [ctypes.c_void_p]
    lib.psrd_study_clone.restype = ctypes.c_void_p
    lib.psrd_study_clone.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_context.restype = ctypes.c_void_p
    lib.psrd_study_context.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_free_study.restype = ctypes.c_int
    lib.psrd_free_study.argtypes = [ctypes.c_void_p]
    lib.psrd_study_property_description_count.restype = ctypes.c_int
    lib.psrd_study_property_description_count.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_study_get_property_description.restype = ctypes.c_void_p
    lib.psrd_study_get_property_description.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_study_set_value.restype = ctypes.c_int
    lib.psrd_study_set_value.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_set_value_at.restype = ctypes.c_int
    lib.psrd_study_set_value_at.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_set_from_dict.restype = ctypes.c_int
    lib.psrd_study_set_from_dict.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_get_value.restype = ctypes.c_int
    lib.psrd_study_get_value.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_get_value_at.restype = ctypes.c_int
    lib.psrd_study_get_value_at.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_get_as_dict.restype = ctypes.c_void_p
    lib.psrd_study_get_as_dict.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_get_table.restype = ctypes.c_int
    lib.psrd_study_get_table.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_study_set_table.restype = ctypes.c_int
    lib.psrd_study_set_table.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_clear_values.restype = ctypes.c_int
    lib.psrd_study_clear_values.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_study_get_objects_values.restype = ctypes.c_int
    lib.psrd_study_get_objects_values.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_get_objects_values_at.restype = ctypes.c_int
    lib.psrd_study_get_objects_values_at.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_get_date_iterator_from_start.restype = ctypes.c_int
    lib.psrd_study_get_date_iterator_from_start.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_create.restype = ctypes.c_void_p
    lib.psrd_create.argtypes = [ctypes.c_char_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_add.restype = ctypes.c_int
    lib.psrd_study_add.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_remove.restype = ctypes.c_int
    lib.psrd_study_remove.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_get_all_objects.restype = ctypes.c_void_p
    lib.psrd_study_get_all_objects.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_study_find.restype = ctypes.c_void_p
    lib.psrd_study_find.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
    lib.psrd_study_find_by_id.restype = ctypes.c_void_p
    lib.psrd_study_find_by_id.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p]
    lib.psrd_study_find_by_code.restype = ctypes.c_void_p
    lib.psrd_study_find_by_code.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_int, ctypes.c_void_p]
    lib.psrd_free_object.restype = ctypes.c_int
    lib.psrd_free_object.argtypes = [ctypes.c_void_p]
    lib.psrd_object_is_equals_to.restype = ctypes.c_int
    lib.psrd_object_is_equals_to.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_object_get_handler.restype = ctypes.c_longlong
    lib.psrd_object_get_handler.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_clone.restype = ctypes.c_void_p
    lib.psrd_object_clone.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_context.restype = ctypes.c_void_p
    lib.psrd_object_context.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_get_parent.restype = ctypes.c_void_p
    lib.psrd_object_get_parent.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_get_type.restype = ctypes.c_int
    lib.psrd_object_get_type.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_get_key.restype = ctypes.c_int
    lib.psrd_object_get_key.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_set_key.restype = ctypes.c_int
    lib.psrd_object_set_key.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_get_code.restype = ctypes.c_int
    lib.psrd_object_get_code.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_void_p]
    lib.psrd_object_set_code.restype = ctypes.c_int
    lib.psrd_object_set_code.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p]
    lib.psrd_object_get_name.restype = ctypes.c_int
    lib.psrd_object_get_name.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_set_name.restype = ctypes.c_int
    lib.psrd_object_set_name.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_get_id.restype = ctypes.c_int
    lib.psrd_object_get_id.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_set_id.restype = ctypes.c_int
    lib.psrd_object_set_id.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_property_description_count.restype = ctypes.c_int
    lib.psrd_object_property_description_count.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_object_get_property_description.restype = ctypes.c_void_p
    lib.psrd_object_get_property_description.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_set_value.restype = ctypes.c_int
    lib.psrd_object_set_value.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_set_value_at.restype = ctypes.c_int
    lib.psrd_object_set_value_at.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_set_from_dict.restype = ctypes.c_int
    lib.psrd_object_set_from_dict.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_get_value.restype = ctypes.c_int
    lib.psrd_object_get_value.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_get_value_at.restype = ctypes.c_int
    lib.psrd_object_get_value_at.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_get_as_dict.restype = ctypes.c_void_p
    lib.psrd_object_get_as_dict.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_get_table.restype = ctypes.c_int
    lib.psrd_object_get_table.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_set_table.restype = ctypes.c_int
    lib.psrd_object_set_table.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_object_clear_values.restype = ctypes.c_int
    lib.psrd_object_clear_values.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_object_referenced_by.restype = ctypes.c_void_p
    lib.psrd_object_referenced_by.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_new_value.restype = ctypes.c_void_p
    lib.psrd_new_value.argtypes = []
    lib.psrd_free_value.restype = ctypes.c_int
    lib.psrd_free_value.argtypes = [ctypes.c_void_p]
    lib.psrd_value_get_type.restype = ctypes.c_int
    lib.psrd_value_get_type.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_value_get_int32.restype = ctypes.c_int
    lib.psrd_value_get_int32.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_int), ctypes.c_void_p]
    lib.psrd_value_set_int32.restype = ctypes.c_int
    lib.psrd_value_set_int32.argtypes = [ctypes.c_void_p, ctypes.c_int, ctypes.c_void_p]
    lib.psrd_value_get_int64.restype = ctypes.c_int
    lib.psrd_value_get_int64.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_value_set_int64.restype = ctypes.c_int
    lib.psrd_value_set_int64.argtypes = [ctypes.c_void_p, ctypes.c_longlong, ctypes.c_void_p]
    lib.psrd_value_get_bool.restype = ctypes.c_int
    lib.psrd_value_get_bool.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_value_set_bool.restype = ctypes.c_int
    lib.psrd_value_set_bool.argtypes = [ctypes.c_void_p, ctypes.c_short, ctypes.c_void_p]
    lib.psrd_value_get_date.restype = ctypes.c_int
    lib.psrd_value_get_date.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_value_set_date.restype = ctypes.c_int
    lib.psrd_value_set_date.argtypes = [ctypes.c_void_p, ctypes.c_longlong, ctypes.c_void_p]
    lib.psrd_value_get_float32.restype = ctypes.c_int
    lib.psrd_value_get_float32.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_float), ctypes.c_void_p]
    lib.psrd_value_set_float32.restype = ctypes.c_int
    lib.psrd_value_set_float32.argtypes = [ctypes.c_void_p, ctypes.c_float, ctypes.c_void_p]
    lib.psrd_value_get_float64.restype = ctypes.c_int
    lib.psrd_value_get_float64.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_double), ctypes.c_void_p]
    lib.psrd_value_set_float64.restype = ctypes.c_int
    lib.psrd_value_set_float64.argtypes = [ctypes.c_void_p, ctypes.c_double, ctypes.c_void_p]
    lib.psrd_value_get_string.restype = ctypes.c_int
    lib.psrd_value_get_string.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_value_set_string.restype = ctypes.c_int
    lib.psrd_value_set_string.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_value_get_object.restype = ctypes.c_void_p
    lib.psrd_value_get_object.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_value_set_object.restype = ctypes.c_int
    lib.psrd_value_set_object.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_value_get_list.restype = ctypes.c_void_p
    lib.psrd_value_get_list.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_value_set_list.restype = ctypes.c_int
    lib.psrd_value_set_list.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_value_get_dict.restype = ctypes.c_void_p
    lib.psrd_value_get_dict.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_value_set_dict.restype = ctypes.c_int
    lib.psrd_value_set_dict.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_value_set_null.restype = ctypes.c_int
    lib.psrd_value_set_null.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_value_is_null.restype = ctypes.c_int
    lib.psrd_value_is_null.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_new_list.restype = ctypes.c_void_p
    lib.psrd_new_list.argtypes = []
    lib.psrd_free_list.restype = ctypes.c_int
    lib.psrd_free_list.argtypes = [ctypes.c_void_p]
    lib.psrd_list_count.restype = ctypes.c_int
    lib.psrd_list_count.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_list_clear.restype = ctypes.c_int
    lib.psrd_list_clear.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_list_get.restype = ctypes.c_int
    lib.psrd_list_get.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_list_set.restype = ctypes.c_int
    lib.psrd_list_set.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_list_append.restype = ctypes.c_int
    lib.psrd_list_append.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_new_dict.restype = ctypes.c_void_p
    lib.psrd_new_dict.argtypes = []
    lib.psrd_free_dict.restype = ctypes.c_int
    lib.psrd_free_dict.argtypes = [ctypes.c_void_p]
    lib.psrd_dict_count.restype = ctypes.c_int
    lib.psrd_dict_count.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_dict_clear.restype = ctypes.c_int
    lib.psrd_dict_clear.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_dict_get_by_key.restype = ctypes.c_int
    lib.psrd_dict_get_by_key.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_dict_get_by_index.restype = ctypes.c_int
    lib.psrd_dict_get_by_index.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_dict_get_key_by_index.restype = ctypes.c_int
    lib.psrd_dict_get_key_by_index.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_dict_get_value_by_index.restype = ctypes.c_int
    lib.psrd_dict_get_value_by_index.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_dict_set.restype = ctypes.c_int
    lib.psrd_dict_set.argtypes = [ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_free_property_description.restype = ctypes.c_int
    lib.psrd_free_property_description.argtypes = [ctypes.c_void_p]
    lib.psrd_property_description_get_name.restype = ctypes.c_int
    lib.psrd_property_description_get_name.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_property_description_get_alternative_name.restype = ctypes.c_int
    lib.psrd_property_description_get_alternative_name.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_property_description_dimensions_count.restype = ctypes.c_int
    lib.psrd_property_description_dimensions_count.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_property_description_get_type.restype = ctypes.c_int
    lib.psrd_property_description_get_type.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_property_description_get_dimension_size.restype = ctypes.c_int
    lib.psrd_property_description_get_dimension_size.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_property_description_get_dimension_name.restype = ctypes.c_int
    lib.psrd_property_description_get_dimension_name.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_property_description_is_dynamic.restype = ctypes.c_int
    lib.psrd_property_description_is_dynamic.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_property_description_is_indexed.restype = ctypes.c_int
    lib.psrd_property_description_is_indexed.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_property_description_is_grouped.restype = ctypes.c_int
    lib.psrd_property_description_is_grouped.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_property_description_grouped_with.restype = ctypes.c_void_p
    lib.psrd_property_description_grouped_with.argtypes = [ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_new_table.restype = ctypes.c_void_p
    lib.psrd_new_table.argtypes = []
    lib.psrd_free_table.restype = ctypes.c_int
    lib.psrd_free_table.argtypes = [ctypes.c_void_p]
    lib.psrd_table_load.restype = ctypes.c_int
    lib.psrd_table_load.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_table_save.restype = ctypes.c_int
    lib.psrd_table_save.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_table_set_property.restype = ctypes.c_int
    lib.psrd_table_set_property.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_table_get_property.restype = ctypes.c_int
    lib.psrd_table_get_property.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_table_is_indexed.restype = ctypes.c_int
    lib.psrd_table_is_indexed.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_table_resize.restype = ctypes.c_int
    lib.psrd_table_resize.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_table_configure_index.restype = ctypes.c_int
    lib.psrd_table_configure_index.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_table_configure_column.restype = ctypes.c_int
    lib.psrd_table_configure_column.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_table_columns_count.restype = ctypes.c_int
    lib.psrd_table_columns_count.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_table_column_get_name.restype = ctypes.c_int
    lib.psrd_table_column_get_name.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_table_column_set_name.restype = ctypes.c_int
    lib.psrd_table_column_set_name.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_table_column_values_count.restype = ctypes.c_int
    lib.psrd_table_column_values_count.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_table_column_get_value.restype = ctypes.c_int
    lib.psrd_table_column_get_value.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_table_column_set_value.restype = ctypes.c_int
    lib.psrd_table_column_set_value.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_table_rows_count.restype = ctypes.c_int
    lib.psrd_table_rows_count.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_table_index_count.restype = ctypes.c_int
    lib.psrd_table_index_count.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_long), ctypes.c_void_p]
    lib.psrd_table_index_get_name.restype = ctypes.c_int
    lib.psrd_table_index_get_name.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_table_index_set_name.restype = ctypes.c_int
    lib.psrd_table_index_set_name.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_table_index_get_value.restype = ctypes.c_int
    lib.psrd_table_index_get_value.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_table_index_set_value.restype = ctypes.c_int
    lib.psrd_table_index_set_value.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]
    lib.psrd_table_column_set_float32_values.restype = ctypes.c_int
    lib.psrd_table_column_set_float32_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_float), ctypes.c_void_p]
    lib.psrd_table_column_set_float64_values.restype = ctypes.c_int
    lib.psrd_table_column_set_float64_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_double), ctypes.c_void_p]
    lib.psrd_table_column_set_int32_values.restype = ctypes.c_int
    lib.psrd_table_column_set_int32_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_int), ctypes.c_void_p]
    lib.psrd_table_column_set_date_values.restype = ctypes.c_int
    lib.psrd_table_column_set_date_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_table_column_set_null_values.restype = ctypes.c_int
    lib.psrd_table_column_set_null_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_table_index_set_int32_values.restype = ctypes.c_int
    lib.psrd_table_index_set_int32_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_int), ctypes.c_void_p]
    lib.psrd_table_index_set_int64_values.restype = ctypes.c_int
    lib.psrd_table_index_set_int64_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_table_index_set_float32_values.restype = ctypes.c_int
    lib.psrd_table_index_set_float32_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_float), ctypes.c_void_p]
    lib.psrd_table_index_set_float64_values.restype = ctypes.c_int
    lib.psrd_table_index_set_float64_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_double), ctypes.c_void_p]
    lib.psrd_table_index_set_date_values.restype = ctypes.c_int
    lib.psrd_table_index_set_date_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_table_column_get_float32_values.restype = ctypes.c_int
    lib.psrd_table_column_get_float32_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_float), ctypes.c_void_p]
    lib.psrd_table_column_get_float64_values.restype = ctypes.c_int
    lib.psrd_table_column_get_float64_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_double), ctypes.c_void_p]
    lib.psrd_table_column_get_int32_values.restype = ctypes.c_int
    lib.psrd_table_column_get_int32_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_int), ctypes.c_void_p]
    lib.psrd_table_column_get_int64_values.restype = ctypes.c_int
    lib.psrd_table_column_get_int64_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_table_column_get_date_values.restype = ctypes.c_int
    lib.psrd_table_column_get_date_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_table_index_get_int32_values.restype = ctypes.c_int
    lib.psrd_table_index_get_int32_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_int), ctypes.c_void_p]
    lib.psrd_table_index_get_int64_values.restype = ctypes.c_int
    lib.psrd_table_index_get_int64_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_table_index_get_date_values.restype = ctypes.c_int
    lib.psrd_table_index_get_date_values.argtypes = [ctypes.c_void_p, ctypes.c_long, ctypes.POINTER(ctypes.c_longlong), ctypes.c_void_p]
    lib.psrd_new_date_iterator.restype = ctypes.c_void_p
    lib.psrd_new_date_iterator.argtypes = []
    lib.psrd_free_date_iterator.restype = ctypes.c_int
    lib.psrd_free_date_iterator.argtypes = [ctypes.c_void_p]
    lib.psrd_date_iterator_at_start.restype = ctypes.c_int
    lib.psrd_date_iterator_at_start.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_date_iterator_at_end.restype = ctypes.c_int
    lib.psrd_date_iterator_at_end.argtypes = [ctypes.c_void_p, ctypes.POINTER(ctypes.c_bool), ctypes.c_void_p]
    lib.psrd_date_iterator_get_value.restype = ctypes.c_int
    lib.psrd_date_iterator_get_value.argtypes = [ctypes.c_void_p, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p]
    lib.psrd_convert_output.restype = ctypes.c_int
    lib.psrd_convert_output.argtypes = [ctypes.c_char_p, ctypes.c_long, ctypes.c_char_p, ctypes.c_long, ctypes.c_void_p, ctypes.c_void_p]

