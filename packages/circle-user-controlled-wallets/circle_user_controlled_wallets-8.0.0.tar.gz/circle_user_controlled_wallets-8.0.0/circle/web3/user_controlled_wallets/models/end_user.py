# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

# CUSTOMIZED: Added pydantic_encoder import (not in default OpenAPI Generator template)
# pydantic_encoder is needed to address serialization issues with datetime and other non-primitive fields,
# which are not handled by the default JSON encoder.
from pydantic.json import pydantic_encoder

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from circle.web3.user_controlled_wallets.models.end_user_status import EndUserStatus
from circle.web3.user_controlled_wallets.models.pin_security_details import PinSecurityDetails
from circle.web3.user_controlled_wallets.models.pin_status import PinStatus

class EndUser(BaseModel):
    """
    EndUser
    """
    id: Optional[StrictStr] = Field(None, description="System-generated unique identifier of the resource.")
    create_date: Optional[datetime] = Field(None, alias="createDate", description="Date and time the resource was created, in ISO-8601 UTC format.")
    pin_status: Optional[PinStatus] = Field(None, alias="pinStatus")
    status: Optional[EndUserStatus] = None
    security_question_status: Optional[StrictStr] = Field(None, alias="securityQuestionStatus")
    pin_details: Optional[PinSecurityDetails] = Field(None, alias="pinDetails")
    security_question_details: Optional[PinSecurityDetails] = Field(None, alias="securityQuestionDetails")
    __properties = ["id", "createDate", "pinStatus", "status", "securityQuestionStatus", "pinDetails", "securityQuestionDetails"]

    def __init__(self, **kwargs):
        if "idempotencyKey" in self.__properties and not kwargs.get("idempotency_key"):
            kwargs["idempotency_key"] = "#REFILL_PLACEHOLDER"

        if "entitySecretCiphertext" in self.__properties and not kwargs.get("entity_secret_ciphertext"):
            kwargs["entity_secret_ciphertext"] = "#REFILL_PLACEHOLDER"
        super().__init__(**kwargs)


    @validator('security_question_status')
    def security_question_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ENABLED', 'UNSET', 'LOCKED'):
            raise ValueError("must be one of enum values ('ENABLED', 'UNSET', 'LOCKED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Return JSON string of the model (handles datetime/UUID/Decimal/Enum, etc.)"""
        # CUSTOMIZED: Added default=pydantic_encoder to handle complex types (datetime, UUID, Enum, etc.)
        # This differs from the default OpenAPI Generator template which doesn't handle these types properly
        return json.dumps(self.to_dict(), default=pydantic_encoder)

    @classmethod
    def from_json(cls, json_str: str) -> EndUser:
        """Create an instance of EndUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pin_details
        if self.pin_details:
            _dict['pinDetails'] = self.pin_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security_question_details
        if self.security_question_details:
            _dict['securityQuestionDetails'] = self.security_question_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EndUser:
        """Create an instance of EndUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EndUser.parse_obj(obj)

        # fill idempotency_key and ciphertext with placeholder for auto_fill
        if "idempotencyKey" in cls.__properties and not obj.get("idempotencyKey"):
            obj["idempotencyKey"] = "#REFILL_PLACEHOLDER"

        if "entitySecretCiphertext" in cls.__properties and not obj.get("entitySecretCiphertext"):
            obj["entitySecretCiphertext"] = "#REFILL_PLACEHOLDER"

        _obj = EndUser.parse_obj({
            "id": obj.get("id"),
            "create_date": obj.get("createDate"),
            "pin_status": obj.get("pinStatus"),
            "status": obj.get("status"),
            "security_question_status": obj.get("securityQuestionStatus"),
            "pin_details": PinSecurityDetails.from_dict(obj.get("pinDetails")) if obj.get("pinDetails") is not None else None,
            "security_question_details": PinSecurityDetails.from_dict(obj.get("securityQuestionDetails")) if obj.get("securityQuestionDetails") is not None else None
        })
        return _obj


