[package]
name = "uvenv"
description = "uvenv: pipx for uv (ðŸ¦€)"
version = "3.10.8"
rust-version = "1.90"
edition = "2024"
categories = ["development-tools", "development-tools::build-utils", "virtualization", "external-ffi-bindings", "command-line-interface"]
keywords = ["Python", "uv", "pip", "packaging"]
repository = "https://github.com/robinvandernoord/uvenv"
license = "MIT"
readme = "README.md"

[features]
snap = []

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[profile.release]
# https://stackoverflow.com/questions/29008127/why-are-rust-executables-so-huge
# before: 15 MB
# with opt-level z: 7 MB
# currently: 9 MB

# opt-level = 'z'     # Optimize for size
lto = true          # Enable link-time optimization
codegen-units = 1   # Reduce number of codegen units to increase optimizations
panic = 'abort'     # Abort on panic
strip = true        # Strip symbols from binary*

[dependencies]
# cli
clap = { version = "4.5", features = ["derive"] }
clap_complete = "4.5"
anyhow = { version = "1.0", features = ["default", "backtrace"] }

# async
tokio = { version = "1.48", features = ["default", "process", "rt-multi-thread"] }

# serialize
rmp-serde = "1.3"
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
toml = "0.9"
toml_edit = { version = "0.23", features = ["serde"] }
rkyv = "0.8"

# helpers
home = "0.5" # ~ resolving
directories = "6.0"
itertools = "0.14" # more .iter magic
configparser = "3.1"
tempfile = "3.23"
chrono = "0.4"
subprocess = "0.2"
reqwest = { version = "0.12", default-features = false, features = ["json", "gzip", "brotli", "stream", "rustls-tls", "rustls-tls-native-roots"] }
regex = "1.12"
futures = "0.3"
scopeguard = "1.2" # for defer!
pushd = "0.0.2"

# fancy
anstyle = "1.0" # color styling for clap
owo-colors = "4.2" # color styling for strings

# uv
uv = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-cache = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-client = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-configuration = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-distribution-types = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-installer = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-normalize = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-preview = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-python = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-resolver = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-pep440 = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-pep508 = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-pypi-types = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-requirements = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }
uv-tool = { git = "https://github.com/astral-sh/uv.git", tag = "0.9.5" }

[patch.crates-io]
# black magic fuckery, see https://github.com/astral-sh/uv/blob/main/Cargo.toml#L300
reqwest-middleware = { git = "https://github.com/astral-sh/reqwest-middleware", rev = "7650ed76215a962a96d94a79be71c27bffde7ab2" }
reqwest-retry = { git = "https://github.com/astral-sh/reqwest-middleware", rev = "7650ed76215a962a96d94a79be71c27bffde7ab2" }

[lints.clippy]
# categories:
correctness = { level = "deny", priority = 1 }
suspicious = { level = "deny", priority = -1 }
complexity = { level = "warn", priority = -1 }
perf = { level = "warn", priority = -1 }
style = { level = "warn", priority = -1 }
pedantic = { level = "warn", priority = -1 }
restriction = { level = "warn", priority = -1 }
nursery = { level = "warn", priority = -1 }
cargo = { level = "warn", priority = -1 }
# specific ones:
## deny
unwrap_used = "deny" # at least use .expect
implicit_clone = "warn" # good to know when clones are happening

## allow
module_name_repetitions = "allow" # using venv_ in functions triggers this, annoying
future_not_send = "allow" # idk how to fix this, tokio goes crazy
struct_excessive_bools = "allow" # Clap args can just get lot of bools
fn_params_excessive_bools = "allow" # Clap args can just get lot of bools
cast_possible_wrap = "allow" #  the numbers in this program won't be very large so it's okay
cast_possible_truncation = "allow" # the numbers in this program won't be very large so it's okay
multiple_crate_versions = "allow" # some dependencies make this happen

blanket_clippy_restriction_lints = "allow" # we'll disable everything we don't want below:
single_call_fn = "allow" # # not everything should be one big function
print_stdout = "allow" # it's a cli tool, printing is fine
print_stderr = "allow" # eprintln is nice even for prd
implicit_return = "allow" # conflicts with needless_return
default_numeric_fallback = "allow" # why do 1_i32 if it's fine to let Rust figure out the types?
question_mark_used = "allow" # it's a nice operator?
missing_docs_in_private_items = "allow" # only docs for pub items is fine for now
pattern_type_mismatch = "allow"  # rust understands the pattern match so idk why I would complicate it
absolute_paths = "allow" # it's probably with good reason (e.g. so it's explitly using tokio::fs instead of std)
missing_trait_methods = "allow" # optional default implementations are nice
std_instead_of_alloc = "allow" # false flag for VecDeque
arithmetic_side_effects = "allow" # I trust the math will keep mathing
expect_used = "allow" # expect is only used when absolutely sure panic will not happen!
let_underscore_must_use = "allow" # doing `let _` already says I explicitly don't care about the result!
let_underscore_untyped = "allow" # doing `let _` already says I explicitly don't care about the result!
non_ascii_literal = "allow" # unicode is king
separated_literal_suffix = "allow" # otherwise it will complain about the opposite :(
pub_with_shorthand = "allow" # otherwise it will complain about the opposite :(
mod_module_files = "allow" # grouping mods like tests and 'commands' is useful
unused_trait_names = "allow" # heh?
arbitrary_source_item_ordering = "allow" # I prefer the current ordering over alphabetical.
