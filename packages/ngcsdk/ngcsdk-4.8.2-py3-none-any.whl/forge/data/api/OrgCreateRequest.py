"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .OrgOwner import OrgOwner
from .ProductSubscription import ProductSubscription
from .ProductEnablement import ProductEnablement
from .OrgType import OrgTypeEnum

# Unused import over optimization prevention
str(repr(OrgTypeEnum))
str(repr(ProductEnablement))
str(repr(ProductSubscription))
str(repr(OrgOwner))


if sys.version_info > (3,):
    long = int
    unicode = str

class OrgCreateRequest(object):
    """Request to create new Organization"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.country = (
            None if not fromDict or propDict.get(
                "country"
            ) is None
            else propDict["country"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.idpId = (
            None if not fromDict or propDict.get(
                "idpId"
            ) is None
            else propDict["idpId"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgOwner = (
            None if not fromDict or propDict.get(
                "orgOwner"
            ) is None
            else propDict["orgOwner"])
        self.pecName = (
            None if not fromDict or propDict.get(
                "pecName"
            ) is None
            else propDict["pecName"])
        self.pecSfdcId = (
            None if not fromDict or propDict.get(
                "pecSfdcId"
            ) is None
            else propDict["pecSfdcId"])
        self.productEnablements = (
            None if not fromDict or propDict.get(
                "productEnablements"
            ) is None
            else [ ProductEnablement(i)
            for i in propDict["productEnablements"] ])
        self.productSubscriptions = (
            None if not fromDict or propDict.get(
                "productSubscriptions"
            ) is None
            else [ ProductSubscription(i)
            for i in propDict["productSubscriptions"] ])
        self.salesforceAccountIndustry = (
            None if not fromDict or propDict.get(
                "salesforceAccountIndustry"
            ) is None
            else propDict["salesforceAccountIndustry"])
        self.sendEmail = (
            None if not fromDict or propDict.get(
                "sendEmail"
            ) is None
            else propDict["sendEmail"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def country(self):
        """str: user country"""
        return self._country

    @country.setter
    def country(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._country = value
        else:
            raise TypeError(
                'Property "country" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: optional description of the organization"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Name of the organization that will be shown to users."""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def idpId(self):
        """str: Identity Provider ID."""
        return self._idpId

    @idpId.setter
    def idpId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._idpId = value
        else:
            raise TypeError(
                'Property "idpId" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Organization name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgOwner(self):
        """OrgOwner: Org owner."""
        return self._orgOwner

    @orgOwner.setter
    def orgOwner(self, value):
        if value is not None and not isinstance(value, OrgOwner):
            value = OrgOwner(value)
        if (value is None) or isinstance(value, OrgOwner):
            self._orgOwner = value
        else:
            raise TypeError(
                'Property "orgOwner" of type "list<OrgOwner>" set to wrong ty'
                'pe'
            )

    @property
    def pecName(self):
        """str: product end customer name for enterprise(Fleet Command) produc
        t"""
        return self._pecName

    @pecName.setter
    def pecName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pecName = value
        else:
            raise TypeError(
                'Property "pecName" of type "list<str>" set to wrong type'
            )

    @property
    def pecSfdcId(self):
        """str: product end customer salesforce.com Id (external customer Id) 
        for enterprise(Fleet Command) product"""
        return self._pecSfdcId

    @pecSfdcId.setter
    def pecSfdcId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pecSfdcId = value
        else:
            raise TypeError(
                'Property "pecSfdcId" of type "list<str>" set to wrong type'
            )

    @property
    def productEnablements(self):
        """ """
        return self._productEnablements

    @productEnablements.setter
    def productEnablements(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productEnablements = value
        else:
            raise TypeError(
                'Property "productEnablements" of type "list<ProductEnablemen'
                't>" set to wrong type'
            )

    @property
    def productSubscriptions(self):
        """list: This should be deprecated, use productEnablements instead"""
        return self._productSubscriptions

    @productSubscriptions.setter
    def productSubscriptions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productSubscriptions = value
        else:
            raise TypeError(
                'Property "productSubscriptions" of type "list<ProductSubscri'
                'ption>" set to wrong type'
            )

    @property
    def salesforceAccountIndustry(self):
        """str: Company or organization industry"""
        return self._salesforceAccountIndustry

    @salesforceAccountIndustry.setter
    def salesforceAccountIndustry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._salesforceAccountIndustry = value
        else:
            raise TypeError(
                'Property "salesforceAccountIndustry" of type "list<str>" set'
                ' to wrong type'
            )

    @property
    def sendEmail(self):
        """bool: Send email to org owner or not. Default is true"""
        return self._sendEmail

    @sendEmail.setter
    def sendEmail(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._sendEmail = value
        else:
            raise TypeError(
                'Property "sendEmail" of type "list<bool>" set to wrong type'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<OrgTypeEnum>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._country is not None:
            result["country"] = \
                self._country
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._idpId is not None:
            result["idpId"] = \
                self._idpId
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgOwner:
            result["orgOwner"] = \
                self._orgOwner.toDict() if self._orgOwner is not None else None
        if self._pecName is not None:
            result["pecName"] = \
                self._pecName
        if self._pecSfdcId is not None:
            result["pecSfdcId"] = \
                self._pecSfdcId
        if self._productEnablements:
            result["productEnablements"] = [
                i.toDict() for i in self._productEnablements 
            ] if self._productEnablements else []
        if self._productSubscriptions:
            result["productSubscriptions"] = [
                i.toDict() for i in self._productSubscriptions 
            ] if self._productSubscriptions else []
        if self._salesforceAccountIndustry is not None:
            result["salesforceAccountIndustry"] = \
                self._salesforceAccountIndustry
        if self._sendEmail is not None:
            result["sendEmail"] = \
                self._sendEmail
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 2):
            raise ValueError(
                "OrgCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 2")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "OrgCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if (self._name is not None
            and
            not re.match(
                r"[a-z][a-z\d_-]+",
                 self._name)):
            raise ValueError(
                "OrgCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: pattern: [a-z][a-z\d_-]+")
        if (self._displayName is not None
            and
            len(self._displayName) < 1):
            raise ValueError(
                "OrgCreateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: minLength: 1")
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "OrgCreateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._description is not None
            and
            len(self._description) > 128):
            raise ValueError(
                "OrgCreateRequest.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 128")
        if self._orgOwner is None:
            raise ValueError(
                "OrgCreateRequest.orgOwner doesnt match requirement:" 
                "required: True"
            )
        if (self._orgOwner is not None): self._orgOwner.isValid()
        if (self._productSubscriptions is not None):
            for obj in self._productSubscriptions:
                if (obj is not None): obj.isValid()
        if (self._productEnablements is not None):
            for obj in self._productEnablements:
                if (obj is not None): obj.isValid()
        return True
    

