"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .CelestialErrorDetail import CelestialErrorDetail

# Unused import over optimization prevention
str(repr(CelestialErrorDetail))


if sys.version_info > (3,):
    long = int
    unicode = str

class AuditLogsEventResponse(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.errorDetails = (
            None if not fromDict or propDict.get(
                "errorDetails"
            ) is None
            else propDict["errorDetails"])
        self.expiration = (
            None if not fromDict or propDict.get(
                "expiration"
            ) is None
            else propDict["expiration"])
        self.logUrl = (
            None if not fromDict or propDict.get(
                "logUrl"
            ) is None
            else propDict["logUrl"])
        self.outputFormat = (
            None if not fromDict or propDict.get(
                "outputFormat"
            ) is None
            else propDict["outputFormat"])
        self.requestId = (
            None if not fromDict or propDict.get(
                "requestId"
            ) is None
            else propDict["requestId"])
        self.requesterClientId = (
            None if not fromDict or propDict.get(
                "requesterClientId"
            ) is None
            else propDict["requesterClientId"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def errorDetails(self):
        """CelestialErrorDetail: ACE is a collection of nodes that can run job
        s"""
        return self._errorDetails

    @errorDetails.setter
    def errorDetails(self, value):
        if value is not None and not isinstance(value, CelestialErrorDetail):
            value = CelestialErrorDetail(value)
        if (value is None) or isinstance(value, CelestialErrorDetail):
            self._errorDetails = value
        else:
            raise TypeError(
                'Property "errorDetails" of type "list<CelestialErrorDetail>"'
                ' set to wrong type'
            )

    @property
    def expiration(self):
        """long: Expiration for S3 presigned URL from Celestial service. Unix 
        timestamp in milliseconds long type"""
        return self._expiration

    @expiration.setter
    def expiration(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._expiration = value
        else:
            raise TypeError(
                'Property "expiration" of type "list<long>" set to wrong type'
            )

    @property
    def logUrl(self):
        """str: A S3 presigned URL from Celestial service"""
        return self._logUrl

    @logUrl.setter
    def logUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logUrl = value
        else:
            raise TypeError(
                'Property "logUrl" of type "list<str>" set to wrong type'
            )

    @property
    def outputFormat(self):
        """OutputFormatEnum: Compression format of the output file. Either GZ/
        Parquet. From Pradeep: we can take it as null value as the dat
        a will be in gzip format"""
        return self._outputFormat

    @outputFormat.setter
    def outputFormat(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._outputFormat = value
        else:
            raise TypeError(
                'Property "outputFormat" of type "list<OutputFormatEnum>" set'
                ' to wrong type'
            )

    OutputFormatEnum=["PARQUET","GZ",]
    str(repr(OutputFormatEnum))  # Prevent optimizer removing enum

    @property
    def requestId(self):
        """str: The unique identifier of audit logs event sent by client"""
        return self._requestId

    @requestId.setter
    def requestId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requestId = value
        else:
            raise TypeError(
                'Property "requestId" of type "list<str>" set to wrong type'
            )

    @property
    def requesterClientId(self):
        """str: which clientId requests audit logs"""
        return self._requesterClientId

    @requesterClientId.setter
    def requesterClientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requesterClientId = value
        else:
            raise TypeError(
                'Property "requesterClientId" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def status(self):
        """StatusEnum: Status from backend processing"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<StatusEnum>" set to wrong ty'
                'pe'
            )

    StatusEnum=["SUCCEEDED","FAILED","ERROR","TIMEOUT",]
    str(repr(StatusEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._errorDetails:
            result["errorDetails"] = \
                self._errorDetails.toDict() if self._errorDetails is not None else None
        if self._expiration is not None:
            result["expiration"] = \
                self._expiration
        if self._logUrl is not None:
            result["logUrl"] = \
                self._logUrl
        if self._outputFormat is not None:
            result["outputFormat"] = \
                self._outputFormat
        if self._requestId is not None:
            result["requestId"] = \
                self._requestId
        if self._requesterClientId is not None:
            result["requesterClientId"] = \
                self._requesterClientId
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._requestId is None:
            raise ValueError(
                "AuditLogsEventResponse.requestId doesnt match requirement:" 
                "required: True"
            )
        if self._requesterClientId is None:
            raise ValueError(
                "AuditLogsEventResponse.requesterClientId doesnt match requirement:" 
                "required: True"
            )
        if (self._errorDetails is not None): self._errorDetails.isValid()
        return True
    

