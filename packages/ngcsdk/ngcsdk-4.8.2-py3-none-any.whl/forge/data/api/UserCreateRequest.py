"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RoleType import RoleTypeEnum
from .UserMetadata import UserMetadata

# Unused import over optimization prevention
str(repr(RoleTypeEnum))
str(repr(UserMetadata))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserCreateRequest(object):
    """object used request user creation in an existing org"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.emailOptIn = (
            None if not fromDict or propDict.get(
                "emailOptIn"
            ) is None
            else propDict["emailOptIn"])
        self.eulaAccepted = (
            None if not fromDict or propDict.get(
                "eulaAccepted"
            ) is None
            else propDict["eulaAccepted"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.roleType = (
            None if not fromDict or propDict.get(
                "roleType"
            ) is None
            else propDict["roleType"])
        self.roleTypes = (
            None if not fromDict or propDict.get(
                "roleTypes"
            ) is None
            else propDict["roleTypes"])
        self.salesforceContactJobRole = (
            None if not fromDict or propDict.get(
                "salesforceContactJobRole"
            ) is None
            else propDict["salesforceContactJobRole"])
        self.userMetadata = (
            None if not fromDict or propDict.get(
                "userMetadata"
            ) is None
            else propDict["userMetadata"])

    @property
    def email(self):
        """str: Email address of the user. This should be unique."""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def emailOptIn(self):
        """bool: indicates if user has opt in to nvidia emails"""
        return self._emailOptIn

    @emailOptIn.setter
    def emailOptIn(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._emailOptIn = value
        else:
            raise TypeError(
                'Property "emailOptIn" of type "list<bool>" set to wrong type'
            )

    @property
    def eulaAccepted(self):
        """bool: indicates if user has accepted EULA"""
        return self._eulaAccepted

    @eulaAccepted.setter
    def eulaAccepted(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._eulaAccepted = value
        else:
            raise TypeError(
                'Property "eulaAccepted" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def name(self):
        """str: user name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def roleType(self):
        """RoleTypeEnum: ADMIN have admin access over all features. ADMIN_READ
        _ONLY have admin_read access over all features. USER have user
         access over all features. The remaining roles specify the features th
        at it has access to."""
        return self._roleType

    @roleType.setter
    def roleType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._roleType = value
        else:
            raise TypeError(
                'Property "roleType" of type "list<RoleTypeEnum>" set to wron'
                'g type'
            )

    @property
    def roleTypes(self):
        """list: feature roles to give to the user"""
        return self._roleTypes

    @roleTypes.setter
    def roleTypes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._roleTypes = value
        else:
            raise TypeError(
                'Property "roleTypes" of type "list<RoleTypeEnum>" set to wro'
                'ng type'
            )

    @property
    def salesforceContactJobRole(self):
        """str: user job role"""
        return self._salesforceContactJobRole

    @salesforceContactJobRole.setter
    def salesforceContactJobRole(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._salesforceContactJobRole = value
        else:
            raise TypeError(
                'Property "salesforceContactJobRole" of type "list<str>" set '
                'to wrong type'
            )

    @property
    def userMetadata(self):
        """UserMetadata: Metadata information about the user."""
        return self._userMetadata

    @userMetadata.setter
    def userMetadata(self, value):
        if value is not None and not isinstance(value, UserMetadata):
            value = UserMetadata(value)
        if (value is None) or isinstance(value, UserMetadata):
            self._userMetadata = value
        else:
            raise TypeError(
                'Property "userMetadata" of type "list<UserMetadata>" set to '
                'wrong type'
            )

    def toDict(self):
        result = {}
        if self._email is not None:
            result["email"] = \
                self._email
        if self._emailOptIn is not None:
            result["emailOptIn"] = \
                self._emailOptIn
        if self._eulaAccepted is not None:
            result["eulaAccepted"] = \
                self._eulaAccepted
        if self._name is not None:
            result["name"] = \
                self._name
        if self._roleType is not None:
            result["roleType"] = \
                self._roleType
        if self._roleTypes is not None:
            result["roleTypes"] = \
                self._roleTypes
        if self._salesforceContactJobRole is not None:
            result["salesforceContactJobRole"] = \
                self._salesforceContactJobRole
        if self._userMetadata:
            result["userMetadata"] = \
                self._userMetadata.toDict() if self._userMetadata is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "UserCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "UserCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if self._email is None:
            raise ValueError(
                "UserCreateRequest.email doesnt match requirement:" 
                "required: True"
            )
        if (self._email is not None
            and
            len(self._email) < 6):
            raise ValueError(
                "UserCreateRequest.email: " + str(self._email) + 
                " doesnt match requirement: minLength: 6")
        if (self._email is not None
            and
            len(self._email) > 128):
            raise ValueError(
                "UserCreateRequest.email: " + str(self._email) + 
                " doesnt match requirement: maxLength: 128")
        if (self._email is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._email)):
            raise ValueError(
                "UserCreateRequest.email: " + str(self._email) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        if (self._userMetadata is not None): self._userMetadata.isValid()
        return True
    

