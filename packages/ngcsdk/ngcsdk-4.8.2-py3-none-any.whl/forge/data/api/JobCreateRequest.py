"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobArrayTypeEnum import JobArrayTypeEnum
from .JobVolumeMount import JobVolumeMount
from .JobPortMapping import JobPortMapping
from .JobInitContainer import JobInitContainer
from .JobRunPolicy import JobRunPolicy
from .JobWorkspaceMountInfo import JobWorkspaceMountInfo
from .NetworkTypeEnum import NetworkTypeEnum
from .ContainerResources import ContainerResources
from .SecretSpec import SecretSpec
from .JobSidecarContainer import JobSidecarContainer
from .JobPriorityEnum import JobPriorityEnum
from .ExpTrackingParams import ExpTrackingParams
from .Env import Env
from .JobHealthCheck import JobHealthCheck
from .JobResultsetMountInfo import JobResultsetMountInfo
from .JobTypeEnum import JobTypeEnum
from .JobVolume import JobVolume
from .JobDatasetMountInfo import JobDatasetMountInfo

# Unused import over optimization prevention
str(repr(JobSidecarContainer))
str(repr(JobVolume))
str(repr(Env))
str(repr(JobTypeEnum))
str(repr(JobHealthCheck))
str(repr(JobResultsetMountInfo))
str(repr(JobPriorityEnum))
str(repr(JobArrayTypeEnum))
str(repr(ExpTrackingParams))
str(repr(JobVolumeMount))
str(repr(JobPortMapping))
str(repr(ContainerResources))
str(repr(JobInitContainer))
str(repr(JobRunPolicy))
str(repr(NetworkTypeEnum))
str(repr(SecretSpec))
str(repr(JobWorkspaceMountInfo))
str(repr(JobDatasetMountInfo))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobCreateRequest(object):
    """request to create a job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.aceInstance = (
            None if not fromDict or propDict.get(
                "aceInstance"
            ) is None
            else propDict["aceInstance"])
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.arrayType = (
            None if not fromDict or propDict.get(
                "arrayType"
            ) is None
            else propDict["arrayType"])
        self.command = (
            None if not fromDict or propDict.get(
                "command"
            ) is None
            else propDict["command"])
        self.containerName = (
            None if not fromDict or propDict.get(
                "containerName"
            ) is None
            else propDict["containerName"])
        self.containerResources = (
            None if not fromDict or propDict.get(
                "containerResources"
            ) is None
            else propDict["containerResources"])
        self.datasetMounts = (
            None if not fromDict or propDict.get(
                "datasetMounts"
            ) is None
            else [ JobDatasetMountInfo(i)
            for i in propDict["datasetMounts"] ])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.dockerImageName = (
            None if not fromDict or propDict.get(
                "dockerImageName"
            ) is None
            else propDict["dockerImageName"])
        self.entryPoint = (
            None if not fromDict or propDict.get(
                "entryPoint"
            ) is None
            else propDict["entryPoint"])
        self.envs = (
            None if not fromDict or propDict.get(
                "envs"
            ) is None
            else [ Env(i)
            for i in propDict["envs"] ])
        self.expTrackingParams = (
            None if not fromDict or propDict.get(
                "expTrackingParams"
            ) is None
            else propDict["expTrackingParams"])
        self.healthCheck = (
            None if not fromDict or propDict.get(
                "healthCheck"
            ) is None
            else propDict["healthCheck"])
        self.initContainers = (
            None if not fromDict or propDict.get(
                "initContainers"
            ) is None
            else [ JobInitContainer(i)
            for i in propDict["initContainers"] ])
        self.isLabelLocked = (
            None if not fromDict or propDict.get(
                "isLabelLocked"
            ) is None
            else propDict["isLabelLocked"])
        self.jobOrder = (
            None if not fromDict or propDict.get(
                "jobOrder"
            ) is None
            else propDict["jobOrder"])
        self.jobPriority = (
            None if not fromDict or propDict.get(
                "jobPriority"
            ) is None
            else propDict["jobPriority"])
        self.jobType = (
            None if not fromDict or propDict.get(
                "jobType"
            ) is None
            else propDict["jobType"])
        self.jobVolumeMounts = (
            None if not fromDict or propDict.get(
                "jobVolumeMounts"
            ) is None
            else [ JobVolumeMount(i)
            for i in propDict["jobVolumeMounts"] ])
        self.jobVolumes = (
            None if not fromDict or propDict.get(
                "jobVolumes"
            ) is None
            else [ JobVolume(i)
            for i in propDict["jobVolumes"] ])
        self.minAvailability = (
            None if not fromDict or propDict.get(
                "minAvailability"
            ) is None
            else propDict["minAvailability"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.networkType = (
            None if not fromDict or propDict.get(
                "networkType"
            ) is None
            else propDict["networkType"])
        self.portMappings = (
            None if not fromDict or propDict.get(
                "portMappings"
            ) is None
            else [ JobPortMapping(i)
            for i in propDict["portMappings"] ])
        self.publishedContainerPorts = (
            None if not fromDict or propDict.get(
                "publishedContainerPorts"
            ) is None
            else propDict["publishedContainerPorts"])
        self.replicaCount = (
            None if not fromDict or propDict.get(
                "replicaCount"
            ) is None
            else propDict["replicaCount"])
        self.reservedLabels = (
            None if not fromDict or propDict.get(
                "reservedLabels"
            ) is None
            else propDict["reservedLabels"])
        self.resultContainerMountPoint = (
            None if not fromDict or propDict.get(
                "resultContainerMountPoint"
            ) is None
            else propDict["resultContainerMountPoint"])
        self.resultsetMounts = (
            None if not fromDict or propDict.get(
                "resultsetMounts"
            ) is None
            else propDict["resultsetMounts"])
        self.runPolicy = (
            None if not fromDict or propDict.get(
                "runPolicy"
            ) is None
            else propDict["runPolicy"])
        self.sidecarContainers = (
            None if not fromDict or propDict.get(
                "sidecarContainers"
            ) is None
            else [ JobSidecarContainer(i)
            for i in propDict["sidecarContainers"] ])
        self.systemLabels = (
            None if not fromDict or propDict.get(
                "systemLabels"
            ) is None
            else propDict["systemLabels"])
        self.topologyConstraint = (
            None if not fromDict or propDict.get(
                "topologyConstraint"
            ) is None
            else propDict["topologyConstraint"])
        self.useImageEntryPoint = (
            None if not fromDict or propDict.get(
                "useImageEntryPoint"
            ) is None
            else propDict["useImageEntryPoint"])
        self.userLabels = (
            None if not fromDict or propDict.get(
                "userLabels"
            ) is None
            else propDict["userLabels"])
        self.userSecretsSpec = (
            None if not fromDict or propDict.get(
                "userSecretsSpec"
            ) is None
            else [ SecretSpec(i)
            for i in propDict["userSecretsSpec"] ])
        self.workspaceMounts = (
            None if not fromDict or propDict.get(
                "workspaceMounts"
            ) is None
            else [ JobWorkspaceMountInfo(i)
            for i in propDict["workspaceMounts"] ])

    @property
    def aceId(self):
        """long: Deprecated, please use aceName instead. ID of the selected AC
        E that needs to run this job. User must have access privileges
         to it."""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def aceInstance(self):
        """str: ACE instance name required for this Job. This instance has to 
        be available in given ACE."""
        return self._aceInstance

    @aceInstance.setter
    def aceInstance(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceInstance = value
        else:
            raise TypeError(
                'Property "aceInstance" of type "list<str>" set to wrong type'
            )

    @property
    def aceName(self):
        """str: Name of the selected ACE that needs to run this job. User must
         have access privileges to it."""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def arrayType(self):
        """JobArrayTypeEnum: Type of array job."""
        return self._arrayType

    @arrayType.setter
    def arrayType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._arrayType = value
        else:
            raise TypeError(
                'Property "arrayType" of type "list<JobArrayTypeEnum>" set to'
                ' wrong type'
            )

    @property
    def command(self):
        """str: Run command to be associated with the container."""
        return self._command

    @command.setter
    def command(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._command = value
        else:
            raise TypeError(
                'Property "command" of type "list<str>" set to wrong type'
            )

    @property
    def containerName(self):
        """str: Name of the init container, MUST be unique among all helper co
        ntainers."""
        return self._containerName

    @containerName.setter
    def containerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerName = value
        else:
            raise TypeError(
                'Property "containerName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def containerResources(self):
        """ """
        return self._containerResources

    @containerResources.setter
    def containerResources(self, value):
        if value is not None and not isinstance(value, ContainerResources):
            value = ContainerResources(value)
        if (value is None) or isinstance(value, ContainerResources):
            self._containerResources = value
        else:
            raise TypeError(
                'Property "containerResources" of type "list<ContainerResourc'
                'es>" set to wrong type'
            )

    @property
    def datasetMounts(self):
        """ """
        return self._datasetMounts

    @datasetMounts.setter
    def datasetMounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._datasetMounts = value
        else:
            raise TypeError(
                'Property "datasetMounts" of type "list<JobDatasetMountInfo>"'
                ' set to wrong type'
            )

    @property
    def description(self):
        """str: optional description of the job, max 512 chars."""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def dockerImageName(self):
        """str: Docker container image name to use when submitting this job. P
        rovide full namespace - org/team/repo:tag. If tag is not speci
        fied, latest will be used by default."""
        return self._dockerImageName

    @dockerImageName.setter
    def dockerImageName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dockerImageName = value
        else:
            raise TypeError(
                'Property "dockerImageName" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def entryPoint(self):
        """str: Overwrite the default ENTRYPOINT of the image"""
        return self._entryPoint

    @entryPoint.setter
    def entryPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._entryPoint = value
        else:
            raise TypeError(
                'Property "entryPoint" of type "list<str>" set to wrong type'
            )

    @property
    def envs(self):
        """list: List of environment variables associated to the job"""
        return self._envs

    @envs.setter
    def envs(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._envs = value
        else:
            raise TypeError(
                'Property "envs" of type "list<Env>" set to wrong type'
            )

    @property
    def expTrackingParams(self):
        """ExpTrackingParams: ML experimentation tracking params associated to
         the job, when the job is submitted for a third-party ML exper
        imentation tracking system like Weights&Biases, MLFlow, etc"""
        return self._expTrackingParams

    @expTrackingParams.setter
    def expTrackingParams(self, value):
        if value is not None and not isinstance(value, ExpTrackingParams):
            value = ExpTrackingParams(value)
        if (value is None) or isinstance(value, ExpTrackingParams):
            self._expTrackingParams = value
        else:
            raise TypeError(
                'Property "expTrackingParams" of type "list<ExpTrackingParams'
                '>" set to wrong type'
            )

    @property
    def healthCheck(self):
        """ """
        return self._healthCheck

    @healthCheck.setter
    def healthCheck(self, value):
        if value is not None and not isinstance(value, JobHealthCheck):
            value = JobHealthCheck(value)
        if (value is None) or isinstance(value, JobHealthCheck):
            self._healthCheck = value
        else:
            raise TypeError(
                'Property "healthCheck" of type "list<JobHealthCheck>" set to'
                ' wrong type'
            )

    @property
    def initContainers(self):
        """list: An optional list of init containers run sequentially before m
        ain container starts."""
        return self._initContainers

    @initContainers.setter
    def initContainers(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._initContainers = value
        else:
            raise TypeError(
                'Property "initContainers" of type "list<JobInitContainer>" s'
                'et to wrong type'
            )

    @property
    def isLabelLocked(self):
        """bool: Indicates whether the labels will be locked or not, default a
        s false"""
        return self._isLabelLocked

    @isLabelLocked.setter
    def isLabelLocked(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isLabelLocked = value
        else:
            raise TypeError(
                'Property "isLabelLocked" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def jobOrder(self):
        """int: The order of job. Job order is from 1 to 99. Default value is 
        50"""
        return self._jobOrder

    @jobOrder.setter
    def jobOrder(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._jobOrder = value
        else:
            raise TypeError(
                'Property "jobOrder" of type "list<int>" set to wrong type'
            )

    @property
    def jobPriority(self):
        """JobPriorityEnum: Indicates the job priority enum"""
        return self._jobPriority

    @jobPriority.setter
    def jobPriority(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._jobPriority = value
        else:
            raise TypeError(
                'Property "jobPriority" of type "list<JobPriorityEnum>" set t'
                'o wrong type'
            )

    @property
    def jobType(self):
        """JobTypeEnum: Possible job types"""
        return self._jobType

    @jobType.setter
    def jobType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._jobType = value
        else:
            raise TypeError(
                'Property "jobType" of type "list<JobTypeEnum>" set to wrong '
                'type'
            )

    @property
    def jobVolumeMounts(self):
        """list: A list of job volume mount points in the init container."""
        return self._jobVolumeMounts

    @jobVolumeMounts.setter
    def jobVolumeMounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._jobVolumeMounts = value
        else:
            raise TypeError(
                'Property "jobVolumeMounts" of type "list<JobVolumeMount>" se'
                't to wrong type'
            )

    @property
    def jobVolumes(self):
        """list: A list of ephemeral volumes for main container and help conta
        iners to share state in job lifetime."""
        return self._jobVolumes

    @jobVolumes.setter
    def jobVolumes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._jobVolumes = value
        else:
            raise TypeError(
                'Property "jobVolumes" of type "list<JobVolume>" set to wrong'
                ' type'
            )

    @property
    def minAvailability(self):
        """int: Option to indicate whether n tasks are needed to be scheduled 
        at the same time for array job."""
        return self._minAvailability

    @minAvailability.setter
    def minAvailability(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._minAvailability = value
        else:
            raise TypeError(
                'Property "minAvailability" of type "list<int>" set to wrong '
                'type'
            )

    @property
    def name(self):
        """str: name for the job, does not need to be unique max 128 character
        s"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def networkType(self):
        """NetworkTypeEnum: Network connectivity type. Default will be INFINIB
        AND"""
        return self._networkType

    @networkType.setter
    def networkType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._networkType = value
        else:
            raise TypeError(
                'Property "networkType" of type "list<NetworkTypeEnum>" set t'
                'o wrong type'
            )

    @property
    def portMappings(self):
        """list: Actual port mappings used for the job"""
        return self._portMappings

    @portMappings.setter
    def portMappings(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._portMappings = value
        else:
            raise TypeError(
                'Property "portMappings" of type "list<JobPortMapping>" set t'
                'o wrong type'
            )

    @property
    def publishedContainerPorts(self):
        """list: List of ports to be published from the container. These will 
        be bound to random ports on hosts. Mapping can be found in res
        ulting Job Status."""
        return self._publishedContainerPorts

    @publishedContainerPorts.setter
    def publishedContainerPorts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._publishedContainerPorts = value
        else:
            raise TypeError(
                'Property "publishedContainerPorts" of type "list<int>" set t'
                'o wrong type'
            )

    @property
    def replicaCount(self):
        """int: Number of replicas to start based on the definition. Default i
        s 1."""
        return self._replicaCount

    @replicaCount.setter
    def replicaCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._replicaCount = value
        else:
            raise TypeError(
                'Property "replicaCount" of type "list<int>" set to wrong typ'
                'e'
            )

    @property
    def reservedLabels(self):
        """list: An array of reserved labels"""
        return self._reservedLabels

    @reservedLabels.setter
    def reservedLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._reservedLabels = value
        else:
            raise TypeError(
                'Property "reservedLabels" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def resultContainerMountPoint(self):
        """str: Mount Point inside container to which result set mount will be
         mapped"""
        return self._resultContainerMountPoint

    @resultContainerMountPoint.setter
    def resultContainerMountPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resultContainerMountPoint = value
        else:
            raise TypeError(
                'Property "resultContainerMountPoint" of type "list<str>" set'
                ' to wrong type'
            )

    @property
    def resultsetMounts(self):
        """JobResultsetMountInfo: This is used for data mover job and not regu
        lar GPU/CPU jobs"""
        return self._resultsetMounts

    @resultsetMounts.setter
    def resultsetMounts(self, value):
        if value is not None and not isinstance(value, JobResultsetMountInfo):
            value = JobResultsetMountInfo(value)
        if (value is None) or isinstance(value, JobResultsetMountInfo):
            self._resultsetMounts = value
        else:
            raise TypeError(
                'Property "resultsetMounts" of type "list<JobResultsetMountIn'
                'fo>" set to wrong type'
            )

    @property
    def runPolicy(self):
        """JobRunPolicy: Kill policy of the job"""
        return self._runPolicy

    @runPolicy.setter
    def runPolicy(self, value):
        if value is not None and not isinstance(value, JobRunPolicy):
            value = JobRunPolicy(value)
        if (value is None) or isinstance(value, JobRunPolicy):
            self._runPolicy = value
        else:
            raise TypeError(
                'Property "runPolicy" of type "list<JobRunPolicy>" set to wro'
                'ng type'
            )

    @property
    def sidecarContainers(self):
        """list: An optional list of sidecar containers run alongside with the
         main container."""
        return self._sidecarContainers

    @sidecarContainers.setter
    def sidecarContainers(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sidecarContainers = value
        else:
            raise TypeError(
                'Property "sidecarContainers" of type "list<JobSidecarContain'
                'er>" set to wrong type'
            )

    @property
    def systemLabels(self):
        """list: An array of system labels"""
        return self._systemLabels

    @systemLabels.setter
    def systemLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._systemLabels = value
        else:
            raise TypeError(
                'Property "systemLabels" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def topologyConstraint(self):
        """str: Constraints to set the topology for the array job"""
        return self._topologyConstraint

    @topologyConstraint.setter
    def topologyConstraint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._topologyConstraint = value
        else:
            raise TypeError(
                'Property "topologyConstraint" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def useImageEntryPoint(self):
        """bool: opt-in flag for enabling image entrypoint."""
        return self._useImageEntryPoint

    @useImageEntryPoint.setter
    def useImageEntryPoint(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._useImageEntryPoint = value
        else:
            raise TypeError(
                'Property "useImageEntryPoint" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def userLabels(self):
        """list: An array of user labels that describe this job"""
        return self._userLabels

    @userLabels.setter
    def userLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._userLabels = value
        else:
            raise TypeError(
                'Property "userLabels" of type "list<str>" set to wrong type'
            )

    @property
    def userSecretsSpec(self):
        """list: Specification of list of user secrets to associate to the job
        """
        return self._userSecretsSpec

    @userSecretsSpec.setter
    def userSecretsSpec(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._userSecretsSpec = value
        else:
            raise TypeError(
                'Property "userSecretsSpec" of type "list<SecretSpec>" set to'
                ' wrong type'
            )

    @property
    def workspaceMounts(self):
        """ """
        return self._workspaceMounts

    @workspaceMounts.setter
    def workspaceMounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._workspaceMounts = value
        else:
            raise TypeError(
                'Property "workspaceMounts" of type "list<JobWorkspaceMountIn'
                'fo>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._aceInstance is not None:
            result["aceInstance"] = \
                self._aceInstance
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._arrayType is not None:
            result["arrayType"] = \
                self._arrayType
        if self._command is not None:
            result["command"] = \
                self._command
        if self._containerName is not None:
            result["containerName"] = \
                self._containerName
        if self._containerResources:
            result["containerResources"] = \
                self._containerResources.toDict() if self._containerResources is not None else None
        if self._datasetMounts:
            result["datasetMounts"] = [
                i.toDict() for i in self._datasetMounts 
            ] if self._datasetMounts else []
        if self._description is not None:
            result["description"] = \
                self._description
        if self._dockerImageName is not None:
            result["dockerImageName"] = \
                self._dockerImageName
        if self._entryPoint is not None:
            result["entryPoint"] = \
                self._entryPoint
        if self._envs:
            result["envs"] = [
                i.toDict() for i in self._envs 
            ] if self._envs else []
        if self._expTrackingParams:
            result["expTrackingParams"] = \
                self._expTrackingParams.toDict() if self._expTrackingParams is not None else None
        if self._healthCheck:
            result["healthCheck"] = \
                self._healthCheck.toDict() if self._healthCheck is not None else None
        if self._initContainers:
            result["initContainers"] = [
                i.toDict() for i in self._initContainers 
            ] if self._initContainers else []
        if self._isLabelLocked is not None:
            result["isLabelLocked"] = \
                self._isLabelLocked
        if self._jobOrder is not None:
            result["jobOrder"] = \
                self._jobOrder
        if self._jobPriority is not None:
            result["jobPriority"] = \
                self._jobPriority
        if self._jobType is not None:
            result["jobType"] = \
                self._jobType
        if self._jobVolumeMounts:
            result["jobVolumeMounts"] = [
                i.toDict() for i in self._jobVolumeMounts 
            ] if self._jobVolumeMounts else []
        if self._jobVolumes:
            result["jobVolumes"] = [
                i.toDict() for i in self._jobVolumes 
            ] if self._jobVolumes else []
        if self._minAvailability is not None:
            result["minAvailability"] = \
                self._minAvailability
        if self._name is not None:
            result["name"] = \
                self._name
        if self._networkType is not None:
            result["networkType"] = \
                self._networkType
        if self._portMappings:
            result["portMappings"] = [
                i.toDict() for i in self._portMappings 
            ] if self._portMappings else []
        if self._publishedContainerPorts is not None:
            result["publishedContainerPorts"] = \
                self._publishedContainerPorts
        if self._replicaCount is not None:
            result["replicaCount"] = \
                self._replicaCount
        if self._reservedLabels is not None:
            result["reservedLabels"] = \
                self._reservedLabels
        if self._resultContainerMountPoint is not None:
            result["resultContainerMountPoint"] = \
                self._resultContainerMountPoint
        if self._resultsetMounts:
            result["resultsetMounts"] = \
                self._resultsetMounts.toDict() if self._resultsetMounts is not None else None
        if self._runPolicy:
            result["runPolicy"] = \
                self._runPolicy.toDict() if self._runPolicy is not None else None
        if self._sidecarContainers:
            result["sidecarContainers"] = [
                i.toDict() for i in self._sidecarContainers 
            ] if self._sidecarContainers else []
        if self._systemLabels is not None:
            result["systemLabels"] = \
                self._systemLabels
        if self._topologyConstraint is not None:
            result["topologyConstraint"] = \
                self._topologyConstraint
        if self._useImageEntryPoint is not None:
            result["useImageEntryPoint"] = \
                self._useImageEntryPoint
        if self._userLabels is not None:
            result["userLabels"] = \
                self._userLabels
        if self._userSecretsSpec:
            result["userSecretsSpec"] = [
                i.toDict() for i in self._userSecretsSpec 
            ] if self._userSecretsSpec else []
        if self._workspaceMounts:
            result["workspaceMounts"] = [
                i.toDict() for i in self._workspaceMounts 
            ] if self._workspaceMounts else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "JobCreateRequest.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 2):
            raise ValueError(
                "JobCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 2")
        if (self._name is not None
            and
            len(self._name) > 128):
            raise ValueError(
                "JobCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 128")
        if (self._name is not None
            and
            not re.match(
                r"^[a-zA-Z\d][a-zA-Z\d\-\. ,_]*$",
                 self._name)):
            raise ValueError(
                "JobCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-zA-Z\d][a-zA-Z\d\-\."
                " ,_]*$")
        if (self._description is not None
            and
            len(self._description) > 512):
            raise ValueError(
                "JobCreateRequest.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 512")
        if self._aceInstance is None:
            raise ValueError(
                "JobCreateRequest.aceInstance doesnt match requirement:" 
                "required: True"
            )
        if (self._replicaCount is not None
            and
            self._replicaCount < 1):
            raise ValueError(
                "JobCreateRequest.replicaCount: " + str(self._replicaCount) + 
                " doesnt match requirement: minimum: 1")
        if (self._jobOrder is not None
            and
            self._jobOrder < 1):
            raise ValueError(
                "JobCreateRequest.jobOrder: " + str(self._jobOrder) + 
                " doesnt match requirement: minimum: 1")
        if (self._jobOrder is not None
            and
            self._jobOrder > 99):
            raise ValueError(
                "JobCreateRequest.jobOrder: " + str(self._jobOrder) + 
                " doesnt match requirement: maximum: 99")
        if self._dockerImageName is None:
            raise ValueError(
                "JobCreateRequest.dockerImageName doesnt match requirement:" 
                "required: True"
            )
        if (self._dockerImageName is not None
            and
            not re.match(
                r"[\x20-\x7E]*",
                 self._dockerImageName)):
            raise ValueError(
                "JobCreateRequest.dockerImageName: " + str(self._dockerImageName) + 
                " doesnt match requirement: pattern: [\x20-\x7E]*")
        if self._resultContainerMountPoint is None:
            raise ValueError(
                "JobCreateRequest.resultContainerMountPoint doesnt match requirement:" 
                "required: True"
            )
        if (self._portMappings is not None):
            for obj in self._portMappings:
                if (obj is not None): obj.isValid()
        if (self._runPolicy is not None): self._runPolicy.isValid()
        if (self._userSecretsSpec is not None):
            for obj in self._userSecretsSpec:
                if (obj is not None): obj.isValid()
        if (self._expTrackingParams is not None): self._expTrackingParams.isValid()
        if (self._resultsetMounts is not None): self._resultsetMounts.isValid()
        if (self._initContainers is not None):
            for obj in self._initContainers:
                if (obj is not None): obj.isValid()
        if (self._sidecarContainers is not None):
            for obj in self._sidecarContainers:
                if (obj is not None): obj.isValid()
        if (self._jobVolumes is not None):
            for obj in self._jobVolumes:
                if (obj is not None): obj.isValid()
        if (self._healthCheck is not None): self._healthCheck.isValid()
        if (self._datasetMounts is not None):
            for obj in self._datasetMounts:
                if (obj is not None): obj.isValid()
        if (self._workspaceMounts is not None):
            for obj in self._workspaceMounts:
                if (obj is not None): obj.isValid()
        if (self._envs is not None):
            for obj in self._envs:
                if (obj is not None): obj.isValid()
        if (self._jobVolumeMounts is not None):
            for obj in self._jobVolumeMounts:
                if (obj is not None): obj.isValid()
        if (self._containerResources is not None): self._containerResources.isValid()
        return True
    

