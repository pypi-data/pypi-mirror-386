"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class DatasetFileEventRequest(object):
    """This request tells that a file belonging to a dataset has been uploaded
    """
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.datasetId = (
            None if not fromDict or propDict.get(
                "datasetId"
            ) is None
            else propDict["datasetId"])
        self.eventType = (
            None if not fromDict or propDict.get(
                "eventType"
            ) is None
            else propDict["eventType"])
        self.filePath = (
            None if not fromDict or propDict.get(
                "filePath"
            ) is None
            else propDict["filePath"])
        self.fileSize = (
            None if not fromDict or propDict.get(
                "fileSize"
            ) is None
            else propDict["fileSize"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])

    @property
    def datasetId(self):
        """ """
        return self._datasetId

    @datasetId.setter
    def datasetId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._datasetId = value
        else:
            raise TypeError(
                'Property "datasetId" of type "list<long>" set to wrong type'
            )

    @property
    def eventType(self):
        """ """
        return self._eventType

    @eventType.setter
    def eventType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._eventType = value
        else:
            raise TypeError(
                'Property "eventType" of type "list<EventTypeEnum>" set to wr'
                'ong type'
            )

    EventTypeEnum=["UPLOAD_STARTED","UPLOAD_INTERRUPTED","UPLOAD_COMPLETED","UPLOAD_FAILED","DATASET_UPLOAD_COMPLETED","DELETE_STARTED","DELETE_INTERRUPTED","DELETE_FAILED","DELETE_COMPLETED",]
    str(repr(EventTypeEnum))  # Prevent optimizer removing enum

    @property
    def filePath(self):
        """str: Full file path."""
        return self._filePath

    @filePath.setter
    def filePath(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._filePath = value
        else:
            raise TypeError(
                'Property "filePath" of type "list<str>" set to wrong type'
            )

    @property
    def fileSize(self):
        """long: file size in bytes"""
        return self._fileSize

    @fileSize.setter
    def fileSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._fileSize = value
        else:
            raise TypeError(
                'Property "fileSize" of type "list<long>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: org name that the dataset belongs to. This is used by DATASET_
        UPLOAD_COMPLETED"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._datasetId is not None:
            result["datasetId"] = \
                self._datasetId
        if self._eventType is not None:
            result["eventType"] = \
                self._eventType
        if self._filePath is not None:
            result["filePath"] = \
                self._filePath
        if self._fileSize is not None:
            result["fileSize"] = \
                self._fileSize
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._filePath is not None
            and
            len(self._filePath) < 2):
            raise ValueError(
                "DatasetFileEventRequest.filePath: " + str(self._filePath) + 
                " doesnt match requirement: minLength: 2")
        if (self._filePath is not None
            and
            len(self._filePath) > 1024):
            raise ValueError(
                "DatasetFileEventRequest.filePath: " + str(self._filePath) + 
                " doesnt match requirement: maxLength: 1024")
        if (self._filePath is not None
            and
            not re.match(
                r"^(\/(?!\/)([\w- %\.(?!\.)])+)+$",
                 self._filePath)):
            raise ValueError(
                "DatasetFileEventRequest.filePath: " + str(self._filePath) + 
                " doesnt match requirement: pattern: ^(\/(?!\/)([\w- %\.(?!\."
                ")])+)+$")
        return True
    

