"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class DeviceLoginResponse(object):
    """Response to the device login"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.expiresIn = (
            None if not fromDict or propDict.get(
                "expiresIn"
            ) is None
            else propDict["expiresIn"])
        self.loginUrl = (
            None if not fromDict or propDict.get(
                "loginUrl"
            ) is None
            else propDict["loginUrl"])
        self.sessionKey = (
            None if not fromDict or propDict.get(
                "sessionKey"
            ) is None
            else propDict["sessionKey"])

    @property
    def expiresIn(self):
        """long: Expiration time of the session key in seconds"""
        return self._expiresIn

    @expiresIn.setter
    def expiresIn(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._expiresIn = value
        else:
            raise TypeError(
                'Property "expiresIn" of type "list<long>" set to wrong type'
            )

    @property
    def loginUrl(self):
        """str: Login URL to be opened in any browser"""
        return self._loginUrl

    @loginUrl.setter
    def loginUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._loginUrl = value
        else:
            raise TypeError(
                'Property "loginUrl" of type "list<str>" set to wrong type'
            )

    @property
    def sessionKey(self):
        """str: Session Key"""
        return self._sessionKey

    @sessionKey.setter
    def sessionKey(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sessionKey = value
        else:
            raise TypeError(
                'Property "sessionKey" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._expiresIn is not None:
            result["expiresIn"] = \
                self._expiresIn
        if self._loginUrl is not None:
            result["loginUrl"] = \
                self._loginUrl
        if self._sessionKey is not None:
            result["sessionKey"] = \
                self._sessionKey
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._loginUrl is None:
            raise ValueError(
                "DeviceLoginResponse.loginUrl doesnt match requirement:" 
                "required: True"
            )
        if (self._loginUrl is not None
            and
            len(self._loginUrl) > 1024):
            raise ValueError(
                "DeviceLoginResponse.loginUrl: " + str(self._loginUrl) + 
                " doesnt match requirement: maxLength: 1024")
        if self._sessionKey is None:
            raise ValueError(
                "DeviceLoginResponse.sessionKey doesnt match requirement:" 
                "required: True"
            )
        if (self._sessionKey is not None
            and
            len(self._sessionKey) > 255):
            raise ValueError(
                "DeviceLoginResponse.sessionKey: " + str(self._sessionKey) + 
                " doesnt match requirement: maxLength: 255")
        return True
    

