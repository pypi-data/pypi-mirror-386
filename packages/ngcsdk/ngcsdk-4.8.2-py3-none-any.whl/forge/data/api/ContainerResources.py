"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobContainerResources import JobContainerResources

# Unused import over optimization prevention
str(repr(JobContainerResources))


if sys.version_info > (3,):
    long = int
    unicode = str

class ContainerResources(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.limits = (
            None if not fromDict or propDict.get(
                "limits"
            ) is None
            else propDict["limits"])
        self.requests = (
            None if not fromDict or propDict.get(
                "requests"
            ) is None
            else propDict["requests"])

    @property
    def limits(self):
        """JobContainerResources: Describes the cpu and memory resources for t
        he job containers"""
        return self._limits

    @limits.setter
    def limits(self, value):
        if value is not None and not isinstance(value, JobContainerResources):
            value = JobContainerResources(value)
        if (value is None) or isinstance(value, JobContainerResources):
            self._limits = value
        else:
            raise TypeError(
                'Property "limits" of type "list<JobContainerResources>" set '
                'to wrong type'
            )

    @property
    def requests(self):
        """JobContainerResources: Describes the cpu and memory resources for t
        he job containers"""
        return self._requests

    @requests.setter
    def requests(self, value):
        if value is not None and not isinstance(value, JobContainerResources):
            value = JobContainerResources(value)
        if (value is None) or isinstance(value, JobContainerResources):
            self._requests = value
        else:
            raise TypeError(
                'Property "requests" of type "list<JobContainerResources>" se'
                't to wrong type'
            )

    def toDict(self):
        result = {}
        if self._limits:
            result["limits"] = \
                self._limits.toDict() if self._limits is not None else None
        if self._requests:
            result["requests"] = \
                self._requests.toDict() if self._requests is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._requests is not None): self._requests.isValid()
        if (self._limits is not None): self._limits.isValid()
        return True
    

