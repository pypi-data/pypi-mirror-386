"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .StorageEngineTypeEnum import StorageEngineTypeEnum

# Unused import over optimization prevention
str(repr(StorageEngineTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class StorageServiceConfigDetails(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.apiPort = (
            None if not fromDict or propDict.get(
                "apiPort"
            ) is None
            else propDict["apiPort"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.destination = (
            None if not fromDict or propDict.get(
                "destination"
            ) is None
            else propDict["destination"])
        self.grpcPort = (
            None if not fromDict or propDict.get(
                "grpcPort"
            ) is None
            else propDict["grpcPort"])
        self.inboundHttpDisabled = (
            None if not fromDict or propDict.get(
                "inboundHttpDisabled"
            ) is None
            else propDict["inboundHttpDisabled"])
        self.initialDefaultQuotaSizeGb = (
            None if not fromDict or propDict.get(
                "initialDefaultQuotaSizeGb"
            ) is None
            else propDict["initialDefaultQuotaSizeGb"])
        self.isDefault = (
            None if not fromDict or propDict.get(
                "isDefault"
            ) is None
            else propDict["isDefault"])
        self.maxQuotaSizeGb = (
            None if not fromDict or propDict.get(
                "maxQuotaSizeGb"
            ) is None
            else propDict["maxQuotaSizeGb"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.sftpPort = (
            None if not fromDict or propDict.get(
                "sftpPort"
            ) is None
            else propDict["sftpPort"])
        self.storageClusterUuid = (
            None if not fromDict or propDict.get(
                "storageClusterUuid"
            ) is None
            else propDict["storageClusterUuid"])
        self.storageLocation = (
            None if not fromDict or propDict.get(
                "storageLocation"
            ) is None
            else propDict["storageLocation"])
        self.storageMountPrefix = (
            None if not fromDict or propDict.get(
                "storageMountPrefix"
            ) is None
            else propDict["storageMountPrefix"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def apiPort(self):
        """int: Port number for routing API traffic to the storage cluster."""
        return self._apiPort

    @apiPort.setter
    def apiPort(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._apiPort = value
        else:
            raise TypeError(
                'Property "apiPort" of type "list<int>" set to wrong type'
            )

    @property
    def description(self):
        """str: Full description about this storage cluster. eg. NetApp SJC4 .
        .."""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def destination(self):
        """str: Storage Service URL fo this resource type"""
        return self._destination

    @destination.setter
    def destination(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._destination = value
        else:
            raise TypeError(
                'Property "destination" of type "list<str>" set to wrong type'
            )

    @property
    def grpcPort(self):
        """int: Port number for routing GRPC traffic to the storage cluster.
        """
        return self._grpcPort

    @grpcPort.setter
    def grpcPort(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._grpcPort = value
        else:
            raise TypeError(
                'Property "grpcPort" of type "list<int>" set to wrong type'
            )

    @property
    def inboundHttpDisabled(self):
        """bool: If set to true, all communication to FSS on this cluster will
         be via kafka. This will be used in superPod"""
        return self._inboundHttpDisabled

    @inboundHttpDisabled.setter
    def inboundHttpDisabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._inboundHttpDisabled = value
        else:
            raise TypeError(
                'Property "inboundHttpDisabled" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def initialDefaultQuotaSizeGb(self):
        """long: When provisioning storage quota for new user, how much initia
        l GB to be provisioned"""
        return self._initialDefaultQuotaSizeGb

    @initialDefaultQuotaSizeGb.setter
    def initialDefaultQuotaSizeGb(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._initialDefaultQuotaSizeGb = value
        else:
            raise TypeError(
                'Property "initialDefaultQuotaSizeGb" of type "list<long>" se'
                't to wrong type'
            )

    @property
    def isDefault(self):
        """bool: For multiple storage in an ACE, is this storage service the d
        efault one"""
        return self._isDefault

    @isDefault.setter
    def isDefault(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isDefault = value
        else:
            raise TypeError(
                'Property "isDefault" of type "list<bool>" set to wrong type'
            )

    @property
    def maxQuotaSizeGb(self):
        """long: Maximum quota allowed when increasing quota"""
        return self._maxQuotaSizeGb

    @maxQuotaSizeGb.setter
    def maxQuotaSizeGb(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._maxQuotaSizeGb = value
        else:
            raise TypeError(
                'Property "maxQuotaSizeGb" of type "list<long>" set to wrong '
                'type'
            )

    @property
    def name(self):
        """str: Human readable name for this storage cluster"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def sftpPort(self):
        """int: Port number for routing sftp traffic to the storage cluster.
        """
        return self._sftpPort

    @sftpPort.setter
    def sftpPort(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._sftpPort = value
        else:
            raise TypeError(
                'Property "sftpPort" of type "list<int>" set to wrong type'
            )

    @property
    def storageClusterUuid(self):
        """str: Storage Cluster unique UUID."""
        return self._storageClusterUuid

    @storageClusterUuid.setter
    def storageClusterUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageClusterUuid = value
        else:
            raise TypeError(
                'Property "storageClusterUuid" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def storageLocation(self):
        """str: The IP of the storage locations"""
        return self._storageLocation

    @storageLocation.setter
    def storageLocation(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageLocation = value
        else:
            raise TypeError(
                'Property "storageLocation" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def storageMountPrefix(self):
        """str: The prefix of the mount eg. 192.168.0.1:/vol where /vol is you
        r prefix"""
        return self._storageMountPrefix

    @storageMountPrefix.setter
    def storageMountPrefix(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageMountPrefix = value
        else:
            raise TypeError(
                'Property "storageMountPrefix" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def type(self):
        """StorageEngineTypeEnum: All possible storage engine type enums"""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<StorageEngineTypeEnum>" set to'
                ' wrong type'
            )

    def toDict(self):
        result = {}
        if self._apiPort is not None:
            result["apiPort"] = \
                self._apiPort
        if self._description is not None:
            result["description"] = \
                self._description
        if self._destination is not None:
            result["destination"] = \
                self._destination
        if self._grpcPort is not None:
            result["grpcPort"] = \
                self._grpcPort
        if self._inboundHttpDisabled is not None:
            result["inboundHttpDisabled"] = \
                self._inboundHttpDisabled
        if self._initialDefaultQuotaSizeGb is not None:
            result["initialDefaultQuotaSizeGb"] = \
                self._initialDefaultQuotaSizeGb
        if self._isDefault is not None:
            result["isDefault"] = \
                self._isDefault
        if self._maxQuotaSizeGb is not None:
            result["maxQuotaSizeGb"] = \
                self._maxQuotaSizeGb
        if self._name is not None:
            result["name"] = \
                self._name
        if self._sftpPort is not None:
            result["sftpPort"] = \
                self._sftpPort
        if self._storageClusterUuid is not None:
            result["storageClusterUuid"] = \
                self._storageClusterUuid
        if self._storageLocation is not None:
            result["storageLocation"] = \
                self._storageLocation
        if self._storageMountPrefix is not None:
            result["storageMountPrefix"] = \
                self._storageMountPrefix
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._destination is None:
            raise ValueError(
                "StorageServiceConfigDetails.destination doesnt match requirement:" 
                "required: True"
            )
        if self._type is None:
            raise ValueError(
                "StorageServiceConfigDetails.type doesnt match requirement:" 
                "required: True"
            )
        if self._storageLocation is None:
            raise ValueError(
                "StorageServiceConfigDetails.storageLocation doesnt match requirement:" 
                "required: True"
            )
        return True
    

