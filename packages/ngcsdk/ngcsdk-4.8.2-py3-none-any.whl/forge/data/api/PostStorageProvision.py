"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .BatchResourceTypeEnum import BatchResourceTypeEnum

# Unused import over optimization prevention
str(repr(BatchResourceTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class PostStorageProvision(object):
    """Event to CAS once FSS provisions storage account"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.key = (
            None if not fromDict or propDict.get(
                "key"
            ) is None
            else propDict["key"])
        self.resourceId = (
            None if not fromDict or propDict.get(
                "resourceId"
            ) is None
            else propDict["resourceId"])
        self.resourceType = (
            None if not fromDict or propDict.get(
                "resourceType"
            ) is None
            else propDict["resourceType"])
        self.storageClientId = (
            None if not fromDict or propDict.get(
                "storageClientId"
            ) is None
            else propDict["storageClientId"])

    @property
    def key(self):
        """str: Some storage like Ceph requires secret key to mount. This will
         be the mount key for this storage account"""
        return self._key

    @key.setter
    def key(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._key = value
        else:
            raise TypeError(
                'Property "key" of type "list<str>" set to wrong type'
            )

    @property
    def resourceId(self):
        """str: The resource id that initiated this storage acc provisioning
        """
        return self._resourceId

    @resourceId.setter
    def resourceId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resourceId = value
        else:
            raise TypeError(
                'Property "resourceId" of type "list<str>" set to wrong type'
            )

    @property
    def resourceType(self):
        """BatchResourceTypeEnum: All possible storage resource for batch serv
        ice"""
        return self._resourceType

    @resourceType.setter
    def resourceType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._resourceType = value
        else:
            raise TypeError(
                'Property "resourceType" of type "list<BatchResourceTypeEnum>'
                '" set to wrong type'
            )

    @property
    def storageClientId(self):
        """str: The storage client id. Also the user mount"""
        return self._storageClientId

    @storageClientId.setter
    def storageClientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageClientId = value
        else:
            raise TypeError(
                'Property "storageClientId" of type "list<str>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._key is not None:
            result["key"] = \
                self._key
        if self._resourceId is not None:
            result["resourceId"] = \
                self._resourceId
        if self._resourceType is not None:
            result["resourceType"] = \
                self._resourceType
        if self._storageClientId is not None:
            result["storageClientId"] = \
                self._storageClientId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._storageClientId is None:
            raise ValueError(
                "PostStorageProvision.storageClientId doesnt match requirement:" 
                "required: True"
            )
        return True
    

