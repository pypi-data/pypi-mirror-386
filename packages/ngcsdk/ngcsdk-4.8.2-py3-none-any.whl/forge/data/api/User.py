"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .UserStorageQuota import UserStorageQuota
from .UserRole import UserRole
from .UserMetadata import UserMetadata

# Unused import over optimization prevention
str(repr(UserStorageQuota))
str(repr(UserRole))
str(repr(UserMetadata))


if sys.version_info > (3,):
    long = int
    unicode = str

class User(object):
    """information about the user"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.clientId = (
            None if not fromDict or propDict.get(
                "clientId"
            ) is None
            else propDict["clientId"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.firstLoginDate = (
            None if not fromDict or propDict.get(
                "firstLoginDate"
            ) is None
            else propDict["firstLoginDate"])
        self.hasBetaAccess = (
            None if not fromDict or propDict.get(
                "hasBetaAccess"
            ) is None
            else propDict["hasBetaAccess"])
        self.hasSignedBaseCommandEULA = (
            None if not fromDict or propDict.get(
                "hasSignedBaseCommandEULA"
            ) is None
            else propDict["hasSignedBaseCommandEULA"])
        self.hasSignedBioNeMoEULA = (
            None if not fromDict or propDict.get(
                "hasSignedBioNeMoEULA"
            ) is None
            else propDict["hasSignedBioNeMoEULA"])
        self.hasSignedContainerPublishingEULA = (
            None if not fromDict or propDict.get(
                "hasSignedContainerPublishingEULA"
            ) is None
            else propDict["hasSignedContainerPublishingEULA"])
        self.hasSignedCuOptEULA = (
            None if not fromDict or propDict.get(
                "hasSignedCuOptEULA"
            ) is None
            else propDict["hasSignedCuOptEULA"])
        self.hasSignedEULA = (
            None if not fromDict or propDict.get(
                "hasSignedEULA"
            ) is None
            else propDict["hasSignedEULA"])
        self.hasSignedEgxEULA = (
            None if not fromDict or propDict.get(
                "hasSignedEgxEULA"
            ) is None
            else propDict["hasSignedEgxEULA"])
        self.hasSignedFleetCommandEULA = (
            None if not fromDict or propDict.get(
                "hasSignedFleetCommandEULA"
            ) is None
            else propDict["hasSignedFleetCommandEULA"])
        self.hasSignedLlmEULA = (
            None if not fromDict or propDict.get(
                "hasSignedLlmEULA"
            ) is None
            else propDict["hasSignedLlmEULA"])
        self.hasSignedNVAIEEULA = (
            None if not fromDict or propDict.get(
                "hasSignedNVAIEEULA"
            ) is None
            else propDict["hasSignedNVAIEEULA"])
        self.hasSignedNvidiaEULA = (
            None if not fromDict or propDict.get(
                "hasSignedNvidiaEULA"
            ) is None
            else propDict["hasSignedNvidiaEULA"])
        self.hasSignedOmniverseEULA = (
            None if not fromDict or propDict.get(
                "hasSignedOmniverseEULA"
            ) is None
            else propDict["hasSignedOmniverseEULA"])
        self.hasSignedPrivacyPolicy = (
            None if not fromDict or propDict.get(
                "hasSignedPrivacyPolicy"
            ) is None
            else propDict["hasSignedPrivacyPolicy"])
        self.hasSignedThirdPartyRegistryShareEULA = (
            None if not fromDict or propDict.get(
                "hasSignedThirdPartyRegistryShareEULA"
            ) is None
            else propDict["hasSignedThirdPartyRegistryShareEULA"])
        self.hasSubscribedToEmail = (
            None if not fromDict or propDict.get(
                "hasSubscribedToEmail"
            ) is None
            else propDict["hasSubscribedToEmail"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.idpType = (
            None if not fromDict or propDict.get(
                "idpType"
            ) is None
            else propDict["idpType"])
        self.isActive = (
            None if not fromDict or propDict.get(
                "isActive"
            ) is None
            else propDict["isActive"])
        self.isDeleted = (
            None if not fromDict or propDict.get(
                "isDeleted"
            ) is None
            else propDict["isDeleted"])
        self.isSAML = (
            None if not fromDict or propDict.get(
                "isSAML"
            ) is None
            else propDict["isSAML"])
        self.jobPositionTitle = (
            None if not fromDict or propDict.get(
                "jobPositionTitle"
            ) is None
            else propDict["jobPositionTitle"])
        self.lastLoginDate = (
            None if not fromDict or propDict.get(
                "lastLoginDate"
            ) is None
            else propDict["lastLoginDate"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.roles = (
            None if not fromDict or propDict.get(
                "roles"
            ) is None
            else [ UserRole(i)
            for i in propDict["roles"] ])
        self.starfleetId = (
            None if not fromDict or propDict.get(
                "starfleetId"
            ) is None
            else propDict["starfleetId"])
        self.storageQuota = (
            None if not fromDict or propDict.get(
                "storageQuota"
            ) is None
            else [ UserStorageQuota(i)
            for i in propDict["storageQuota"] ])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])
        self.userMetadata = (
            None if not fromDict or propDict.get(
                "userMetadata"
            ) is None
            else propDict["userMetadata"])

    @property
    def clientId(self):
        """str: unique auth client id of this user."""
        return self._clientId

    @clientId.setter
    def clientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._clientId = value
        else:
            raise TypeError(
                'Property "clientId" of type "list<str>" set to wrong type'
            )

    @property
    def createdDate(self):
        """str: Created date for this user"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def email(self):
        """str: Email address of the user. This should be unique."""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def firstLoginDate(self):
        """str: Last time the user logged in"""
        return self._firstLoginDate

    @firstLoginDate.setter
    def firstLoginDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._firstLoginDate = value
        else:
            raise TypeError(
                'Property "firstLoginDate" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def hasBetaAccess(self):
        """bool: Determines if the user has beta access"""
        return self._hasBetaAccess

    @hasBetaAccess.setter
    def hasBetaAccess(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasBetaAccess = value
        else:
            raise TypeError(
                'Property "hasBetaAccess" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def hasSignedBaseCommandEULA(self):
        """bool: indicates if user has accepted Base Command End User License 
        Agreement."""
        return self._hasSignedBaseCommandEULA

    @hasSignedBaseCommandEULA.setter
    def hasSignedBaseCommandEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedBaseCommandEULA = value
        else:
            raise TypeError(
                'Property "hasSignedBaseCommandEULA" of type "list<bool>" set'
                ' to wrong type'
            )

    @property
    def hasSignedBioNeMoEULA(self):
        """bool: indicates if user has accepted BioNeMo End User License Agree
        ment."""
        return self._hasSignedBioNeMoEULA

    @hasSignedBioNeMoEULA.setter
    def hasSignedBioNeMoEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedBioNeMoEULA = value
        else:
            raise TypeError(
                'Property "hasSignedBioNeMoEULA" of type "list<bool>" set to '
                'wrong type'
            )

    @property
    def hasSignedContainerPublishingEULA(self):
        """bool: indicates if user has accepted container publishing eula"""
        return self._hasSignedContainerPublishingEULA

    @hasSignedContainerPublishingEULA.setter
    def hasSignedContainerPublishingEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedContainerPublishingEULA = value
        else:
            raise TypeError(
                'Property "hasSignedContainerPublishingEULA" of type "list<bo'
                'ol>" set to wrong type'
            )

    @property
    def hasSignedCuOptEULA(self):
        """bool: indicates if user has accepted CuOpt eula"""
        return self._hasSignedCuOptEULA

    @hasSignedCuOptEULA.setter
    def hasSignedCuOptEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedCuOptEULA = value
        else:
            raise TypeError(
                'Property "hasSignedCuOptEULA" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def hasSignedEULA(self):
        """bool: Determines if the user has signed the NGC End User License Ag
        reement."""
        return self._hasSignedEULA

    @hasSignedEULA.setter
    def hasSignedEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedEULA = value
        else:
            raise TypeError(
                'Property "hasSignedEULA" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def hasSignedEgxEULA(self):
        """bool: [Deprecated] indicates if user has accepted EGX End User Lice
        nse Agreement."""
        return self._hasSignedEgxEULA

    @hasSignedEgxEULA.setter
    def hasSignedEgxEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedEgxEULA = value
        else:
            raise TypeError(
                'Property "hasSignedEgxEULA" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def hasSignedFleetCommandEULA(self):
        """bool: indicates if user has accepted Fleet Command End User License
         Agreement."""
        return self._hasSignedFleetCommandEULA

    @hasSignedFleetCommandEULA.setter
    def hasSignedFleetCommandEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedFleetCommandEULA = value
        else:
            raise TypeError(
                'Property "hasSignedFleetCommandEULA" of type "list<bool>" se'
                't to wrong type'
            )

    @property
    def hasSignedLlmEULA(self):
        """bool: indicates if user has accepted LLM End User License Agreement
        ."""
        return self._hasSignedLlmEULA

    @hasSignedLlmEULA.setter
    def hasSignedLlmEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedLlmEULA = value
        else:
            raise TypeError(
                'Property "hasSignedLlmEULA" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def hasSignedNVAIEEULA(self):
        """bool: indicates if user has accepted Fleet Command End User License
         Agreement."""
        return self._hasSignedNVAIEEULA

    @hasSignedNVAIEEULA.setter
    def hasSignedNVAIEEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedNVAIEEULA = value
        else:
            raise TypeError(
                'Property "hasSignedNVAIEEULA" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def hasSignedNvidiaEULA(self):
        """bool: Determines if the user has signed the NVIDIA End User License
         Agreement."""
        return self._hasSignedNvidiaEULA

    @hasSignedNvidiaEULA.setter
    def hasSignedNvidiaEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedNvidiaEULA = value
        else:
            raise TypeError(
                'Property "hasSignedNvidiaEULA" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def hasSignedOmniverseEULA(self):
        """bool: indicates if user has accepted Omniverse End User License Agr
        eement."""
        return self._hasSignedOmniverseEULA

    @hasSignedOmniverseEULA.setter
    def hasSignedOmniverseEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedOmniverseEULA = value
        else:
            raise TypeError(
                'Property "hasSignedOmniverseEULA" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def hasSignedPrivacyPolicy(self):
        """bool: Determines if the user has signed the Privacy Policy."""
        return self._hasSignedPrivacyPolicy

    @hasSignedPrivacyPolicy.setter
    def hasSignedPrivacyPolicy(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedPrivacyPolicy = value
        else:
            raise TypeError(
                'Property "hasSignedPrivacyPolicy" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def hasSignedThirdPartyRegistryShareEULA(self):
        """bool: indicates if user has consented to share their registration i
        nfo with other parties"""
        return self._hasSignedThirdPartyRegistryShareEULA

    @hasSignedThirdPartyRegistryShareEULA.setter
    def hasSignedThirdPartyRegistryShareEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedThirdPartyRegistryShareEULA = value
        else:
            raise TypeError(
                'Property "hasSignedThirdPartyRegistryShareEULA" of type "lis'
                't<bool>" set to wrong type'
            )

    @property
    def hasSubscribedToEmail(self):
        """bool: Determines if the user has opted in email subscription."""
        return self._hasSubscribedToEmail

    @hasSubscribedToEmail.setter
    def hasSubscribedToEmail(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSubscribedToEmail = value
        else:
            raise TypeError(
                'Property "hasSubscribedToEmail" of type "list<bool>" set to '
                'wrong type'
            )

    @property
    def id(self):
        """long: unique Id of this user."""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def idpType(self):
        """IdpTypeEnum: Type of IDP, Identity Provider. Used for login."""
        return self._idpType

    @idpType.setter
    def idpType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._idpType = value
        else:
            raise TypeError(
                'Property "idpType" of type "list<IdpTypeEnum>" set to wrong '
                'type'
            )

    IdpTypeEnum=["NVIDIA","ENTERPRISE",]
    str(repr(IdpTypeEnum))  # Prevent optimizer removing enum

    @property
    def isActive(self):
        """bool: Determines if the user is active or not."""
        return self._isActive

    @isActive.setter
    def isActive(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isActive = value
        else:
            raise TypeError(
                'Property "isActive" of type "list<bool>" set to wrong type'
            )

    @property
    def isDeleted(self):
        """bool: Indicates if user was deleted from the system."""
        return self._isDeleted

    @isDeleted.setter
    def isDeleted(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isDeleted = value
        else:
            raise TypeError(
                'Property "isDeleted" of type "list<bool>" set to wrong type'
            )

    @property
    def isSAML(self):
        """bool: Determines if the user is a SAML account or not."""
        return self._isSAML

    @isSAML.setter
    def isSAML(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSAML = value
        else:
            raise TypeError(
                'Property "isSAML" of type "list<bool>" set to wrong type'
            )

    @property
    def jobPositionTitle(self):
        """str: Title of user's job position."""
        return self._jobPositionTitle

    @jobPositionTitle.setter
    def jobPositionTitle(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._jobPositionTitle = value
        else:
            raise TypeError(
                'Property "jobPositionTitle" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def lastLoginDate(self):
        """str: Last time the user logged in"""
        return self._lastLoginDate

    @lastLoginDate.setter
    def lastLoginDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastLoginDate = value
        else:
            raise TypeError(
                'Property "lastLoginDate" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def name(self):
        """str: user name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def roles(self):
        """list: List of roles that the user have"""
        return self._roles

    @roles.setter
    def roles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._roles = value
        else:
            raise TypeError(
                'Property "roles" of type "list<UserRole>" set to wrong type'
            )

    @property
    def starfleetId(self):
        """str: unique starfleet id of this user."""
        return self._starfleetId

    @starfleetId.setter
    def starfleetId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._starfleetId = value
        else:
            raise TypeError(
                'Property "starfleetId" of type "list<str>" set to wrong type'
            )

    @property
    def storageQuota(self):
        """list: Storage quota for this user."""
        return self._storageQuota

    @storageQuota.setter
    def storageQuota(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._storageQuota = value
        else:
            raise TypeError(
                'Property "storageQuota" of type "list<UserStorageQuota>" set'
                ' to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Updated date for this user"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    @property
    def userMetadata(self):
        """UserMetadata: Metadata information about the user."""
        return self._userMetadata

    @userMetadata.setter
    def userMetadata(self, value):
        if value is not None and not isinstance(value, UserMetadata):
            value = UserMetadata(value)
        if (value is None) or isinstance(value, UserMetadata):
            self._userMetadata = value
        else:
            raise TypeError(
                'Property "userMetadata" of type "list<UserMetadata>" set to '
                'wrong type'
            )

    def toDict(self):
        result = {}
        if self._clientId is not None:
            result["clientId"] = \
                self._clientId
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._email is not None:
            result["email"] = \
                self._email
        if self._firstLoginDate is not None:
            result["firstLoginDate"] = \
                self._firstLoginDate
        if self._hasBetaAccess is not None:
            result["hasBetaAccess"] = \
                self._hasBetaAccess
        if self._hasSignedBaseCommandEULA is not None:
            result["hasSignedBaseCommandEULA"] = \
                self._hasSignedBaseCommandEULA
        if self._hasSignedBioNeMoEULA is not None:
            result["hasSignedBioNeMoEULA"] = \
                self._hasSignedBioNeMoEULA
        if self._hasSignedContainerPublishingEULA is not None:
            result["hasSignedContainerPublishingEULA"] = \
                self._hasSignedContainerPublishingEULA
        if self._hasSignedCuOptEULA is not None:
            result["hasSignedCuOptEULA"] = \
                self._hasSignedCuOptEULA
        if self._hasSignedEULA is not None:
            result["hasSignedEULA"] = \
                self._hasSignedEULA
        if self._hasSignedEgxEULA is not None:
            result["hasSignedEgxEULA"] = \
                self._hasSignedEgxEULA
        if self._hasSignedFleetCommandEULA is not None:
            result["hasSignedFleetCommandEULA"] = \
                self._hasSignedFleetCommandEULA
        if self._hasSignedLlmEULA is not None:
            result["hasSignedLlmEULA"] = \
                self._hasSignedLlmEULA
        if self._hasSignedNVAIEEULA is not None:
            result["hasSignedNVAIEEULA"] = \
                self._hasSignedNVAIEEULA
        if self._hasSignedNvidiaEULA is not None:
            result["hasSignedNvidiaEULA"] = \
                self._hasSignedNvidiaEULA
        if self._hasSignedOmniverseEULA is not None:
            result["hasSignedOmniverseEULA"] = \
                self._hasSignedOmniverseEULA
        if self._hasSignedPrivacyPolicy is not None:
            result["hasSignedPrivacyPolicy"] = \
                self._hasSignedPrivacyPolicy
        if self._hasSignedThirdPartyRegistryShareEULA is not None:
            result["hasSignedThirdPartyRegistryShareEULA"] = \
                self._hasSignedThirdPartyRegistryShareEULA
        if self._hasSubscribedToEmail is not None:
            result["hasSubscribedToEmail"] = \
                self._hasSubscribedToEmail
        if self._id is not None:
            result["id"] = \
                self._id
        if self._idpType is not None:
            result["idpType"] = \
                self._idpType
        if self._isActive is not None:
            result["isActive"] = \
                self._isActive
        if self._isDeleted is not None:
            result["isDeleted"] = \
                self._isDeleted
        if self._isSAML is not None:
            result["isSAML"] = \
                self._isSAML
        if self._jobPositionTitle is not None:
            result["jobPositionTitle"] = \
                self._jobPositionTitle
        if self._lastLoginDate is not None:
            result["lastLoginDate"] = \
                self._lastLoginDate
        if self._name is not None:
            result["name"] = \
                self._name
        if self._roles:
            result["roles"] = [
                i.toDict() for i in self._roles 
            ] if self._roles else []
        if self._starfleetId is not None:
            result["starfleetId"] = \
                self._starfleetId
        if self._storageQuota:
            result["storageQuota"] = [
                i.toDict() for i in self._storageQuota 
            ] if self._storageQuota else []
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        if self._userMetadata:
            result["userMetadata"] = \
                self._userMetadata.toDict() if self._userMetadata is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "User.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "User.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if (self._email is not None
            and
            len(self._email) < 7):
            raise ValueError(
                "User.email: " + str(self._email) + 
                " doesnt match requirement: minLength: 7")
        if (self._email is not None
            and
            len(self._email) > 128):
            raise ValueError(
                "User.email: " + str(self._email) + 
                " doesnt match requirement: maxLength: 128")
        if (self._email is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._email)):
            raise ValueError(
                "User.email: " + str(self._email) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        if (self._roles is not None):
            for obj in self._roles:
                if (obj is not None): obj.isValid()
        if (self._userMetadata is not None): self._userMetadata.isValid()
        if (self._storageQuota is not None):
            for obj in self._storageQuota:
                if (obj is not None): obj.isValid()
        return True
    

