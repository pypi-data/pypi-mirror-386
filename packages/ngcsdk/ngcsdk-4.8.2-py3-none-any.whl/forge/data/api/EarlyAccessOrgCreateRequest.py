"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .OrgOwner import OrgOwner
from .ProductEnablement import ProductEnablement

# Unused import over optimization prevention
str(repr(ProductEnablement))
str(repr(OrgOwner))


if sys.version_info > (3,):
    long = int
    unicode = str

class EarlyAccessOrgCreateRequest(object):
    """Request to create new Organization"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.idpId = (
            None if not fromDict or propDict.get(
                "idpId"
            ) is None
            else propDict["idpId"])
        self.orgOwner = (
            None if not fromDict or propDict.get(
                "orgOwner"
            ) is None
            else propDict["orgOwner"])
        self.productEnablements = (
            None if not fromDict or propDict.get(
                "productEnablements"
            ) is None
            else [ ProductEnablement(i)
            for i in propDict["productEnablements"] ])

    @property
    def description(self):
        """str: Optional description of the organization."""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Name of the organization that will be shown to users."""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def idpId(self):
        """str: Identity provider ID."""
        return self._idpId

    @idpId.setter
    def idpId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._idpId = value
        else:
            raise TypeError(
                'Property "idpId" of type "list<str>" set to wrong type'
            )

    @property
    def orgOwner(self):
        """OrgOwner: Org owner."""
        return self._orgOwner

    @orgOwner.setter
    def orgOwner(self, value):
        if value is not None and not isinstance(value, OrgOwner):
            value = OrgOwner(value)
        if (value is None) or isinstance(value, OrgOwner):
            self._orgOwner = value
        else:
            raise TypeError(
                'Property "orgOwner" of type "list<OrgOwner>" set to wrong ty'
                'pe'
            )

    @property
    def productEnablements(self):
        """ """
        return self._productEnablements

    @productEnablements.setter
    def productEnablements(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productEnablements = value
        else:
            raise TypeError(
                'Property "productEnablements" of type "list<ProductEnablemen'
                't>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._idpId is not None:
            result["idpId"] = \
                self._idpId
        if self._orgOwner:
            result["orgOwner"] = \
                self._orgOwner.toDict() if self._orgOwner is not None else None
        if self._productEnablements:
            result["productEnablements"] = [
                i.toDict() for i in self._productEnablements 
            ] if self._productEnablements else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._displayName is not None
            and
            len(self._displayName) < 1):
            raise ValueError(
                "EarlyAccessOrgCreateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: minLength: 1")
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "EarlyAccessOrgCreateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._description is not None
            and
            len(self._description) > 128):
            raise ValueError(
                "EarlyAccessOrgCreateRequest.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 128")
        if self._orgOwner is None:
            raise ValueError(
                "EarlyAccessOrgCreateRequest.orgOwner doesnt match requirement:" 
                "required: True"
            )
        if self._productEnablements is None:
            raise ValueError(
                "EarlyAccessOrgCreateRequest.productEnablements doesnt match requirement:" 
                "required: True"
            )
        if (self._orgOwner is not None): self._orgOwner.isValid()
        if (self._productEnablements is not None):
            for obj in self._productEnablements:
                if (obj is not None): obj.isValid()
        return True
    

