"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class JobNodeDeleteRequest(object):
    """object used to send request from cloud to the node to delete a job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.dockerToken = (
            None if not fromDict or propDict.get(
                "dockerToken"
            ) is None
            else propDict["dockerToken"])
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])

    @property
    def dockerToken(self):
        """str: docker token that is associated with the user requesting a job
        """
        return self._dockerToken

    @dockerToken.setter
    def dockerToken(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dockerToken = value
        else:
            raise TypeError(
                'Property "dockerToken" of type "list<str>" set to wrong type'
            )

    @property
    def jobId(self):
        """long: unique identifier of the job"""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._dockerToken is not None:
            result["dockerToken"] = \
                self._dockerToken
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._jobId is None:
            raise ValueError(
                "JobNodeDeleteRequest.jobId doesnt match requirement:" 
                "required: True"
            )
        if self._dockerToken is None:
            raise ValueError(
                "JobNodeDeleteRequest.dockerToken doesnt match requirement:" 
                "required: True"
            )
        return True
    

