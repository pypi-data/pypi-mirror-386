"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class DatasetFilePath(object):
    """File in the dataset"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.path = (
            None if not fromDict or propDict.get(
                "path"
            ) is None
            else propDict["path"])

    @property
    def path(self):
        """str: Full file path."""
        return self._path

    @path.setter
    def path(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._path = value
        else:
            raise TypeError(
                'Property "path" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._path is not None:
            result["path"] = \
                self._path
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._path is not None
            and
            len(self._path) < 2):
            raise ValueError(
                "DatasetFilePath.path: " + str(self._path) + 
                " doesnt match requirement: minLength: 2")
        if (self._path is not None
            and
            len(self._path) > 1024):
            raise ValueError(
                "DatasetFilePath.path: " + str(self._path) + 
                " doesnt match requirement: maxLength: 1024")
        if (self._path is not None
            and
            not re.match(
                r"^(\/(?!\/)([\w- %\.(?!\.)])+)+$",
                 self._path)):
            raise ValueError(
                "DatasetFilePath.path: " + str(self._path) + 
                " doesnt match requirement: pattern: ^(\/(?!\/)([\w- %\.(?!\."
                ")])+)+$")
        return True
    

