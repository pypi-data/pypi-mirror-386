"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .EntitlementProduct import EntitlementProduct

# Unused import over optimization prevention
str(repr(EntitlementProduct))


if sys.version_info > (3,):
    long = int
    unicode = str

class Entitlement(object):
    """Information about the entitlement for an org"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.entitlementExpirationTime = (
            None if not fromDict or propDict.get(
                "entitlementExpirationTime"
            ) is None
            else propDict["entitlementExpirationTime"])
        self.entitlementId = (
            None if not fromDict or propDict.get(
                "entitlementId"
            ) is None
            else propDict["entitlementId"])
        self.entitlementState = (
            None if not fromDict or propDict.get(
                "entitlementState"
            ) is None
            else propDict["entitlementState"])
        self.pecSfdcId = (
            None if not fromDict or propDict.get(
                "pecSfdcId"
            ) is None
            else propDict["pecSfdcId"])
        self.products = (
            None if not fromDict or propDict.get(
                "products"
            ) is None
            else [ EntitlementProduct(i)
            for i in propDict["products"] ])

    @property
    def entitlementExpirationTime(self):
        """str: Entitlement expiration time"""
        return self._entitlementExpirationTime

    @entitlementExpirationTime.setter
    def entitlementExpirationTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._entitlementExpirationTime = value
        else:
            raise TypeError(
                'Property "entitlementExpirationTime" of type "list<str>" set'
                ' to wrong type'
            )

    @property
    def entitlementId(self):
        """str: Unique entitlement identifier"""
        return self._entitlementId

    @entitlementId.setter
    def entitlementId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._entitlementId = value
        else:
            raise TypeError(
                'Property "entitlementId" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def entitlementState(self):
        """str: Entitlement state"""
        return self._entitlementState

    @entitlementState.setter
    def entitlementState(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._entitlementState = value
        else:
            raise TypeError(
                'Property "entitlementState" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def pecSfdcId(self):
        """str: Product end customer salesforce.com Id (external customer Id).
         pecSfdcId is for EMS (entitlement management service) to trac
        k external paid customer"""
        return self._pecSfdcId

    @pecSfdcId.setter
    def pecSfdcId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pecSfdcId = value
        else:
            raise TypeError(
                'Property "pecSfdcId" of type "list<str>" set to wrong type'
            )

    @property
    def products(self):
        """ """
        return self._products

    @products.setter
    def products(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._products = value
        else:
            raise TypeError(
                'Property "products" of type "list<EntitlementProduct>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._entitlementExpirationTime is not None:
            result["entitlementExpirationTime"] = \
                self._entitlementExpirationTime
        if self._entitlementId is not None:
            result["entitlementId"] = \
                self._entitlementId
        if self._entitlementState is not None:
            result["entitlementState"] = \
                self._entitlementState
        if self._pecSfdcId is not None:
            result["pecSfdcId"] = \
                self._pecSfdcId
        if self._products:
            result["products"] = [
                i.toDict() for i in self._products 
            ] if self._products else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._products is not None):
            for obj in self._products:
                if (obj is not None): obj.isValid()
        return True
    

