"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class EntitlementProduct(object):
    """Information about the entitlement product"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.pkId = (
            None if not fromDict or propDict.get(
                "pkId"
            ) is None
            else propDict["pkId"])
        self.productName = (
            None if not fromDict or propDict.get(
                "productName"
            ) is None
            else propDict["productName"])
        self.subscriptionType = (
            None if not fromDict or propDict.get(
                "subscriptionType"
            ) is None
            else propDict["subscriptionType"])

    @property
    def pkId(self):
        """str: Unique product key identifier"""
        return self._pkId

    @pkId.setter
    def pkId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pkId = value
        else:
            raise TypeError(
                'Property "pkId" of type "list<str>" set to wrong type'
            )

    @property
    def productName(self):
        """str: Product name. ex: FleetCommand, Batch, etc"""
        return self._productName

    @productName.setter
    def productName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productName = value
        else:
            raise TypeError(
                'Property "productName" of type "list<str>" set to wrong type'
            )

    @property
    def subscriptionType(self):
        """str: Subscription type"""
        return self._subscriptionType

    @subscriptionType.setter
    def subscriptionType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subscriptionType = value
        else:
            raise TypeError(
                'Property "subscriptionType" of type "list<str>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._pkId is not None:
            result["pkId"] = \
                self._pkId
        if self._productName is not None:
            result["productName"] = \
                self._productName
        if self._subscriptionType is not None:
            result["subscriptionType"] = \
                self._subscriptionType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

