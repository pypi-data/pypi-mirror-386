"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class StorageYarofsInfo(object):
    """Describes the arguments needed for mounting YaroFS volumes"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.imageUrl = (
            None if not fromDict or propDict.get(
                "imageUrl"
            ) is None
            else propDict["imageUrl"])
        self.useInnerRingCache = (
            None if not fromDict or propDict.get(
                "useInnerRingCache"
            ) is None
            else propDict["useInnerRingCache"])
        self.useYaroFSCache = (
            None if not fromDict or propDict.get(
                "useYaroFSCache"
            ) is None
            else propDict["useYaroFSCache"])
        self.yarofsCacheBcount = (
            None if not fromDict or propDict.get(
                "yarofsCacheBcount"
            ) is None
            else propDict["yarofsCacheBcount"])
        self.yarofsCacheBsize = (
            None if not fromDict or propDict.get(
                "yarofsCacheBsize"
            ) is None
            else propDict["yarofsCacheBsize"])

    @property
    def imageUrl(self):
        """str: disk-image URL to be used for this dataset"""
        return self._imageUrl

    @imageUrl.setter
    def imageUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._imageUrl = value
        else:
            raise TypeError(
                'Property "imageUrl" of type "list<str>" set to wrong type'
            )

    @property
    def useInnerRingCache(self):
        """bool: Flag to use Inner ring cache"""
        return self._useInnerRingCache

    @useInnerRingCache.setter
    def useInnerRingCache(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._useInnerRingCache = value
        else:
            raise TypeError(
                'Property "useInnerRingCache" of type "list<bool>" set to wro'
                'ng type'
            )

    @property
    def useYaroFSCache(self):
        """bool: Flag to use YaroFS memory cache"""
        return self._useYaroFSCache

    @useYaroFSCache.setter
    def useYaroFSCache(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._useYaroFSCache = value
        else:
            raise TypeError(
                'Property "useYaroFSCache" of type "list<bool>" set to wrong '
                'type'
            )

    @property
    def yarofsCacheBcount(self):
        """int: YaroFS Cache block count (useYaroFSCache must be true)"""
        return self._yarofsCacheBcount

    @yarofsCacheBcount.setter
    def yarofsCacheBcount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._yarofsCacheBcount = value
        else:
            raise TypeError(
                'Property "yarofsCacheBcount" of type "list<int>" set to wron'
                'g type'
            )

    @property
    def yarofsCacheBsize(self):
        """int: YaroFS Cache block size (useYaroFSCache must be true)"""
        return self._yarofsCacheBsize

    @yarofsCacheBsize.setter
    def yarofsCacheBsize(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._yarofsCacheBsize = value
        else:
            raise TypeError(
                'Property "yarofsCacheBsize" of type "list<int>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._imageUrl is not None:
            result["imageUrl"] = \
                self._imageUrl
        if self._useInnerRingCache is not None:
            result["useInnerRingCache"] = \
                self._useInnerRingCache
        if self._useYaroFSCache is not None:
            result["useYaroFSCache"] = \
                self._useYaroFSCache
        if self._yarofsCacheBcount is not None:
            result["yarofsCacheBcount"] = \
                self._yarofsCacheBcount
        if self._yarofsCacheBsize is not None:
            result["yarofsCacheBsize"] = \
                self._yarofsCacheBsize
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

