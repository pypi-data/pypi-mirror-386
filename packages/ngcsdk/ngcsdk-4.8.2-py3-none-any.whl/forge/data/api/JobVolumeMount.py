"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class JobVolumeMount(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.containerMountPoint = (
            None if not fromDict or propDict.get(
                "containerMountPoint"
            ) is None
            else propDict["containerMountPoint"])
        self.mountMode = (
            None if not fromDict or propDict.get(
                "mountMode"
            ) is None
            else propDict["mountMode"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def containerMountPoint(self):
        """str: Mount point inside the container to which this job volume will
         be mapped"""
        return self._containerMountPoint

    @containerMountPoint.setter
    def containerMountPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerMountPoint = value
        else:
            raise TypeError(
                'Property "containerMountPoint" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def mountMode(self):
        """MountModeEnum: Permissions for the volume when mounted"""
        return self._mountMode

    @mountMode.setter
    def mountMode(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._mountMode = value
        else:
            raise TypeError(
                'Property "mountMode" of type "list<MountModeEnum>" set to wr'
                'ong type'
            )

    MountModeEnum=["RO","RW",]
    str(repr(MountModeEnum))  # Prevent optimizer removing enum

    @property
    def name(self):
        """str: Name of the job volume"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._containerMountPoint is not None:
            result["containerMountPoint"] = \
                self._containerMountPoint
        if self._mountMode is not None:
            result["mountMode"] = \
                self._mountMode
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "JobVolumeMount.name doesnt match requirement:" 
                "required: True"
            )
        if self._containerMountPoint is None:
            raise ValueError(
                "JobVolumeMount.containerMountPoint doesnt match requirement:" 
                "required: True"
            )
        return True
    

