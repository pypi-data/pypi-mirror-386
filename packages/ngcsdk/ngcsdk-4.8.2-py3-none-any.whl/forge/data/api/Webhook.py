"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .WebhookEventType import WebhookEventTypeEnum
from .AlertAggregationType import AlertAggregationTypeEnum
from .AlertDeliveryMode import AlertDeliveryMode

# Unused import over optimization prevention
str(repr(WebhookEventTypeEnum))
str(repr(AlertDeliveryMode))
str(repr(AlertAggregationTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Webhook(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aggregationType = (
            None if not fromDict or propDict.get(
                "aggregationType"
            ) is None
            else propDict["aggregationType"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.deliveryModes = (
            None if not fromDict or propDict.get(
                "deliveryModes"
            ) is None
            else [ AlertDeliveryMode(i)
            for i in propDict["deliveryModes"] ])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.enabled = (
            None if not fromDict or propDict.get(
                "enabled"
            ) is None
            else propDict["enabled"])
        self.eventTypes = (
            None if not fromDict or propDict.get(
                "eventTypes"
            ) is None
            else propDict["eventTypes"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.message = (
            None if not fromDict or propDict.get(
                "message"
            ) is None
            else propDict["message"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def aggregationType(self):
        """AlertAggregationTypeEnum: Aggregation type for webhooks and alerts,
         i.e. user only, team or org"""
        return self._aggregationType

    @aggregationType.setter
    def aggregationType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._aggregationType = value
        else:
            raise TypeError(
                'Property "aggregationType" of type "list<AlertAggregationTyp'
                'eEnum>" set to wrong type'
            )

    @property
    def createdDate(self):
        """str: Date at which this webhook was created"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def deliveryModes(self):
        """ """
        return self._deliveryModes

    @deliveryModes.setter
    def deliveryModes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._deliveryModes = value
        else:
            raise TypeError(
                'Property "deliveryModes" of type "list<AlertDeliveryMode>" s'
                'et to wrong type'
            )

    @property
    def description(self):
        """str: User defined description for this webhook"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def enabled(self):
        """bool: Specifies whether webhook is enabled or disabled. Webhooks ca
        n be created disabled, by default they are enabled"""
        return self._enabled

    @enabled.setter
    def enabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._enabled = value
        else:
            raise TypeError(
                'Property "enabled" of type "list<bool>" set to wrong type'
            )

    @property
    def eventTypes(self):
        """ """
        return self._eventTypes

    @eventTypes.setter
    def eventTypes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._eventTypes = value
        else:
            raise TypeError(
                'Property "eventTypes" of type "list<WebhookEventTypeEnum>" s'
                'et to wrong type'
            )

    @property
    def id(self):
        """long: Unique identification for this webhook"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def message(self):
        """str: Message generated for webhook, leave blank for custom message
        """
        return self._message

    @message.setter
    def message(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._message = value
        else:
            raise TypeError(
                'Property "message" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: User defined webhook name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Date at which this webhook was updated"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aggregationType is not None:
            result["aggregationType"] = \
                self._aggregationType
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._deliveryModes:
            result["deliveryModes"] = [
                i.toDict() for i in self._deliveryModes 
            ] if self._deliveryModes else []
        if self._description is not None:
            result["description"] = \
                self._description
        if self._enabled is not None:
            result["enabled"] = \
                self._enabled
        if self._eventTypes is not None:
            result["eventTypes"] = \
                self._eventTypes
        if self._id is not None:
            result["id"] = \
                self._id
        if self._message is not None:
            result["message"] = \
                self._message
        if self._name is not None:
            result["name"] = \
                self._name
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._deliveryModes is not None):
            for obj in self._deliveryModes:
                if (obj is not None): obj.isValid()
        return True
    

