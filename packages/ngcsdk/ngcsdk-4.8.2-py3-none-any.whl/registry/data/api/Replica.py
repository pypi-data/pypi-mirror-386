"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobStatus import JobStatus

# Unused import over optimization prevention
str(repr(JobStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class Replica(object):
    """object that describes submitted job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.aceResourceInstance = (
            None if not fromDict or propDict.get(
                "aceResourceInstance"
            ) is None
            else propDict["aceResourceInstance"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])
        self.lastStatusUpdatedDate = (
            None if not fromDict or propDict.get(
                "lastStatusUpdatedDate"
            ) is None
            else propDict["lastStatusUpdatedDate"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.replicaId = (
            None if not fromDict or propDict.get(
                "replicaId"
            ) is None
            else propDict["replicaId"])
        self.replicaStatus = (
            None if not fromDict or propDict.get(
                "replicaStatus"
            ) is None
            else propDict["replicaStatus"])
        self.submittedByUser = (
            None if not fromDict or propDict.get(
                "submittedByUser"
            ) is None
            else propDict["submittedByUser"])
        self.submittedByUserId = (
            None if not fromDict or propDict.get(
                "submittedByUserId"
            ) is None
            else propDict["submittedByUserId"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])

    @property
    def aceId(self):
        """long: id of ACE that the job belongs to"""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def aceName(self):
        """str: name of ACE that the job belongs to"""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def aceResourceInstance(self):
        """str: Name of instance of ace resources that the job used"""
        return self._aceResourceInstance

    @aceResourceInstance.setter
    def aceResourceInstance(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceResourceInstance = value
        else:
            raise TypeError(
                'Property "aceResourceInstance" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def createdDate(self):
        """str: Created date for this job"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def jobId(self):
        """long: the id of the job"""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<long>" set to wrong type'
            )

    @property
    def lastStatusUpdatedDate(self):
        """str: Last updated status date"""
        return self._lastStatusUpdatedDate

    @lastStatusUpdatedDate.setter
    def lastStatusUpdatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastStatusUpdatedDate = value
        else:
            raise TypeError(
                'Property "lastStatusUpdatedDate" of type "list<str>" set to '
                'wrong type'
            )

    @property
    def orgName(self):
        """str: name of org that the job belongs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def replicaId(self):
        """long: the id of the replica"""
        return self._replicaId

    @replicaId.setter
    def replicaId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._replicaId = value
        else:
            raise TypeError(
                'Property "replicaId" of type "list<long>" set to wrong type'
            )

    @property
    def replicaStatus(self):
        """JobStatus: updates about job status are coming from the nodes"""
        return self._replicaStatus

    @replicaStatus.setter
    def replicaStatus(self, value):
        if value is not None and not isinstance(value, JobStatus):
            value = JobStatus(value)
        if (value is None) or isinstance(value, JobStatus):
            self._replicaStatus = value
        else:
            raise TypeError(
                'Property "replicaStatus" of type "list<JobStatus>" set to wr'
                'ong type'
            )

    @property
    def submittedByUser(self):
        """str: user that submitted this job"""
        return self._submittedByUser

    @submittedByUser.setter
    def submittedByUser(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._submittedByUser = value
        else:
            raise TypeError(
                'Property "submittedByUser" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def submittedByUserId(self):
        """long: User id of the user that submitted this job"""
        return self._submittedByUserId

    @submittedByUserId.setter
    def submittedByUserId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._submittedByUserId = value
        else:
            raise TypeError(
                'Property "submittedByUserId" of type "list<long>" set to wro'
                'ng type'
            )

    @property
    def teamName(self):
        """str: name of team that the job belongs to"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._aceResourceInstance is not None:
            result["aceResourceInstance"] = \
                self._aceResourceInstance
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        if self._lastStatusUpdatedDate is not None:
            result["lastStatusUpdatedDate"] = \
                self._lastStatusUpdatedDate
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._replicaId is not None:
            result["replicaId"] = \
                self._replicaId
        if self._replicaStatus:
            result["replicaStatus"] = \
                self._replicaStatus.toDict() if self._replicaStatus is not None else None
        if self._submittedByUser is not None:
            result["submittedByUser"] = \
                self._submittedByUser
        if self._submittedByUserId is not None:
            result["submittedByUserId"] = \
                self._submittedByUserId
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "Replica.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._lastStatusUpdatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._lastStatusUpdatedDate)):
            raise ValueError(
                "Replica.lastStatusUpdatedDate: " + str(self._lastStatusUpdatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._replicaStatus is not None): self._replicaStatus.isValid()
        return True
    

