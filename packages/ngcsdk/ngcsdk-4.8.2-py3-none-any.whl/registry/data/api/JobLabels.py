"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ReservedLabels import ReservedLabels
from .UserLabels import UserLabels
from .SystemLabels import SystemLabels

# Unused import over optimization prevention
str(repr(UserLabels))
str(repr(SystemLabels))
str(repr(ReservedLabels))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobLabels(object):
    """All the labels specified by user or admin that descibe this job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.isLocked = (
            None if not fromDict or propDict.get(
                "isLocked"
            ) is None
            else propDict["isLocked"])
        self.reservedLabels = (
            None if not fromDict or propDict.get(
                "reservedLabels"
            ) is None
            else propDict["reservedLabels"])
        self.systemLabels = (
            None if not fromDict or propDict.get(
                "systemLabels"
            ) is None
            else propDict["systemLabels"])
        self.userLabels = (
            None if not fromDict or propDict.get(
                "userLabels"
            ) is None
            else propDict["userLabels"])

    @property
    def isLocked(self):
        """bool: Indicates whether the labels of this job are locked or not"""
        return self._isLocked

    @isLocked.setter
    def isLocked(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isLocked = value
        else:
            raise TypeError(
                'Property "isLocked" of type "list<bool>" set to wrong type'
            )

    @property
    def reservedLabels(self):
        """ReservedLabels: Reserved labels specified by the user or admin"""
        return self._reservedLabels

    @reservedLabels.setter
    def reservedLabels(self, value):
        if value is not None and not isinstance(value, ReservedLabels):
            value = ReservedLabels(value)
        if (value is None) or isinstance(value, ReservedLabels):
            self._reservedLabels = value
        else:
            raise TypeError(
                'Property "reservedLabels" of type "list<ReservedLabels>" set'
                ' to wrong type'
            )

    @property
    def systemLabels(self):
        """SystemLabels: System labels specified by admin"""
        return self._systemLabels

    @systemLabels.setter
    def systemLabels(self, value):
        if value is not None and not isinstance(value, SystemLabels):
            value = SystemLabels(value)
        if (value is None) or isinstance(value, SystemLabels):
            self._systemLabels = value
        else:
            raise TypeError(
                'Property "systemLabels" of type "list<SystemLabels>" set to '
                'wrong type'
            )

    @property
    def userLabels(self):
        """UserLabels: User labels specified by the user or admin"""
        return self._userLabels

    @userLabels.setter
    def userLabels(self, value):
        if value is not None and not isinstance(value, UserLabels):
            value = UserLabels(value)
        if (value is None) or isinstance(value, UserLabels):
            self._userLabels = value
        else:
            raise TypeError(
                'Property "userLabels" of type "list<UserLabels>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._isLocked is not None:
            result["isLocked"] = \
                self._isLocked
        if self._reservedLabels:
            result["reservedLabels"] = \
                self._reservedLabels.toDict() if self._reservedLabels is not None else None
        if self._systemLabels:
            result["systemLabels"] = \
                self._systemLabels.toDict() if self._systemLabels is not None else None
        if self._userLabels:
            result["userLabels"] = \
                self._userLabels.toDict() if self._userLabels is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._userLabels is not None): self._userLabels.isValid()
        if (self._reservedLabels is not None): self._reservedLabels.isValid()
        if (self._systemLabels is not None): self._systemLabels.isValid()
        return True
    

