"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class MeteringResourceUtilizationEvent(object):
    """Metering Resource Utilization Event"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.resourceName = (
            None if not fromDict or propDict.get(
                "resourceName"
            ) is None
            else propDict["resourceName"])
        self.resourceType = (
            None if not fromDict or propDict.get(
                "resourceType"
            ) is None
            else propDict["resourceType"])
        self.resourceUsage = (
            None if not fromDict or propDict.get(
                "resourceUsage"
            ) is None
            else propDict["resourceUsage"])
        self.resourceUsageInt = (
            None if not fromDict or propDict.get(
                "resourceUsageInt"
            ) is None
            else propDict["resourceUsageInt"])
        self.resourceUsageUnit = (
            None if not fromDict or propDict.get(
                "resourceUsageUnit"
            ) is None
            else propDict["resourceUsageUnit"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.timestamp = (
            None if not fromDict or propDict.get(
                "timestamp"
            ) is None
            else propDict["timestamp"])

    @property
    def orgName(self):
        """str: The name of the organization"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def resourceName(self):
        """str: Name of the resource - e.g. container name, model name (nvidia
        /jarvis), gpu-type (A1000, RX6000) """
        return self._resourceName

    @resourceName.setter
    def resourceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resourceName = value
        else:
            raise TypeError(
                'Property "resourceName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def resourceType(self):
        """ResourceTypeEnum: When you are sending the event, this defines what
         type you want to use when storing the metric."""
        return self._resourceType

    @resourceType.setter
    def resourceType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._resourceType = value
        else:
            raise TypeError(
                'Property "resourceType" of type "list<ResourceTypeEnum>" set'
                ' to wrong type'
            )

    ResourceTypeEnum=["MODEL","CONTAINER","RESOURCE","HELM_CHART","EGX_GPU","EGX_LOG_STORAGE",]
    str(repr(ResourceTypeEnum))  # Prevent optimizer removing enum

    @property
    def resourceUsage(self):
        """float: Default numerical type. IEEE-754 64-bit floating-point numbe
        rs (except NaN or +/- Inf). Examples: 1, 1.0, 1.e+78, 1.E+78."""
        return self._resourceUsage

    @resourceUsage.setter
    def resourceUsage(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._resourceUsage = value
        else:
            raise TypeError(
                'Property "resourceUsage" of type "list<float>" set to wrong '
                'type'
            )

    @property
    def resourceUsageInt(self):
        """long: Usage of the resource as signed 64-bit integers, Values must 
        have a minimum value of -2^63 and a maximum value of 2^63-1."""
        return self._resourceUsageInt

    @resourceUsageInt.setter
    def resourceUsageInt(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resourceUsageInt = value
        else:
            raise TypeError(
                'Property "resourceUsageInt" of type "list<long>" set to wron'
                'g type'
            )

    @property
    def resourceUsageUnit(self):
        """ResourceUsageUnitEnum: When you are sending the event, this defines
         what unit you want to use when storing the usage."""
        return self._resourceUsageUnit

    @resourceUsageUnit.setter
    def resourceUsageUnit(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._resourceUsageUnit = value
        else:
            raise TypeError(
                'Property "resourceUsageUnit" of type "list<ResourceUsageUnit'
                'Enum>" set to wrong type'
            )

    ResourceUsageUnitEnum=["Bytes","Kilobytes","Megabytes","Gigabytes","None",]
    str(repr(ResourceUsageUnitEnum))  # Prevent optimizer removing enum

    @property
    def teamName(self):
        """str: The name of the team within an organization"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def timestamp(self):
        """str: The timestamp at which the event was created"""
        return self._timestamp

    @timestamp.setter
    def timestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._timestamp = value
        else:
            raise TypeError(
                'Property "timestamp" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._resourceName is not None:
            result["resourceName"] = \
                self._resourceName
        if self._resourceType is not None:
            result["resourceType"] = \
                self._resourceType
        if self._resourceUsage is not None:
            result["resourceUsage"] = \
                self._resourceUsage
        if self._resourceUsageInt is not None:
            result["resourceUsageInt"] = \
                self._resourceUsageInt
        if self._resourceUsageUnit is not None:
            result["resourceUsageUnit"] = \
                self._resourceUsageUnit
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._timestamp is not None:
            result["timestamp"] = \
                self._timestamp
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._orgName is None:
            raise ValueError(
                "MeteringResourceUtilizationEvent.orgName doesnt match requirement:" 
                "required: True"
            )
        if self._timestamp is None:
            raise ValueError(
                "MeteringResourceUtilizationEvent.timestamp doesnt match requirement:" 
                "required: True"
            )
        if self._resourceType is None:
            raise ValueError(
                "MeteringResourceUtilizationEvent.resourceType doesnt match requirement:" 
                "required: True"
            )
        return True
    

