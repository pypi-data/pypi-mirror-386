"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RepoScanSettings import RepoScanSettings
from .InfinityManagerSettings import InfinityManagerSettings

# Unused import over optimization prevention
str(repr(RepoScanSettings))
str(repr(InfinityManagerSettings))


if sys.version_info > (3,):
    long = int
    unicode = str

class TeamUpdateRequest(object):
    """object used to update information about existing team"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.infinityManagerSettings = (
            None if not fromDict or propDict.get(
                "infinityManagerSettings"
            ) is None
            else propDict["infinityManagerSettings"])
        self.repoScanSettings = (
            None if not fromDict or propDict.get(
                "repoScanSettings"
            ) is None
            else propDict["repoScanSettings"])

    @property
    def description(self):
        """str: description of the team"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def infinityManagerSettings(self):
        """InfinityManagerSettings: Infinity manager setting definition"""
        return self._infinityManagerSettings

    @infinityManagerSettings.setter
    def infinityManagerSettings(self, value):
        if value is not None and not isinstance(value, InfinityManagerSettings):
            value = InfinityManagerSettings(value)
        if (value is None) or isinstance(value, InfinityManagerSettings):
            self._infinityManagerSettings = value
        else:
            raise TypeError(
                'Property "infinityManagerSettings" of type "list<InfinityMan'
                'agerSettings>" set to wrong type'
            )

    @property
    def repoScanSettings(self):
        """RepoScanSettings: Repo scan setting definition"""
        return self._repoScanSettings

    @repoScanSettings.setter
    def repoScanSettings(self, value):
        if value is not None and not isinstance(value, RepoScanSettings):
            value = RepoScanSettings(value)
        if (value is None) or isinstance(value, RepoScanSettings):
            self._repoScanSettings = value
        else:
            raise TypeError(
                'Property "repoScanSettings" of type "list<RepoScanSettings>"'
                ' set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._description is not None:
            result["description"] = \
                self._description
        if self._infinityManagerSettings:
            result["infinityManagerSettings"] = \
                self._infinityManagerSettings.toDict() if self._infinityManagerSettings is not None else None
        if self._repoScanSettings:
            result["repoScanSettings"] = \
                self._repoScanSettings.toDict() if self._repoScanSettings is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._description is not None
            and
            len(self._description) > 255):
            raise ValueError(
                "TeamUpdateRequest.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 255")
        if (self._repoScanSettings is not None): self._repoScanSettings.isValid()
        if (self._infinityManagerSettings is not None): self._infinityManagerSettings.isValid()
        return True
    

