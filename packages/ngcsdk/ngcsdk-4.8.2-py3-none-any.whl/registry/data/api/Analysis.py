"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class Analysis(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.detail = (
            None if not fromDict or propDict.get(
                "detail"
            ) is None
            else propDict["detail"])
        self.justification = (
            None if not fromDict or propDict.get(
                "justification"
            ) is None
            else propDict["justification"])
        self.response = (
            None if not fromDict or propDict.get(
                "response"
            ) is None
            else propDict["response"])
        self.state = (
            None if not fromDict or propDict.get(
                "state"
            ) is None
            else propDict["state"])

    @property
    def detail(self):
        """str: Vulnerability detail"""
        return self._detail

    @detail.setter
    def detail(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._detail = value
        else:
            raise TypeError(
                'Property "detail" of type "list<str>" set to wrong type'
            )

    @property
    def justification(self):
        """str: Vulnerability justification"""
        return self._justification

    @justification.setter
    def justification(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._justification = value
        else:
            raise TypeError(
                'Property "justification" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def response(self):
        """str: Vulnerability response"""
        return self._response

    @response.setter
    def response(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._response = value
        else:
            raise TypeError(
                'Property "response" of type "list<str>" set to wrong type'
            )

    @property
    def state(self):
        """StateEnum: Vulnerability state"""
        return self._state

    @state.setter
    def state(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._state = value
        else:
            raise TypeError(
                'Property "state" of type "list<StateEnum>" set to wrong type'
            )

    StateEnum=["not_affected","false_positive",]
    str(repr(StateEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._detail is not None:
            result["detail"] = \
                self._detail
        if self._justification is not None:
            result["justification"] = \
                self._justification
        if self._response is not None:
            result["response"] = \
                self._response
        if self._state is not None:
            result["state"] = \
                self._state
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

