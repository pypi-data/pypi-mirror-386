"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Price import Price

# Unused import over optimization prevention
str(repr(Price))


if sys.version_info > (3,):
    long = int
    unicode = str

class AceInstancePrices(object):
    """Container for ACE instance info and list of localized prices"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.aceInstanceName = (
            None if not fromDict or propDict.get(
                "aceInstanceName"
            ) is None
            else propDict["aceInstanceName"])
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.chargeId = (
            None if not fromDict or propDict.get(
                "chargeId"
            ) is None
            else propDict["chargeId"])
        self.prices = (
            None if not fromDict or propDict.get(
                "prices"
            ) is None
            else [ Price(i)
            for i in propDict["prices"] ])

    @property
    def aceId(self):
        """long: ACE ID"""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def aceInstanceName(self):
        """str: ACE instance name, unique within the ACE"""
        return self._aceInstanceName

    @aceInstanceName.setter
    def aceInstanceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceInstanceName = value
        else:
            raise TypeError(
                'Property "aceInstanceName" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def aceName(self):
        """str: ACE name"""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def chargeId(self):
        """str: Pricing charge ID unique for the ACE instance"""
        return self._chargeId

    @chargeId.setter
    def chargeId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._chargeId = value
        else:
            raise TypeError(
                'Property "chargeId" of type "list<str>" set to wrong type'
            )

    @property
    def prices(self):
        """list: List of localized prices"""
        return self._prices

    @prices.setter
    def prices(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._prices = value
        else:
            raise TypeError(
                'Property "prices" of type "list<Price>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._aceInstanceName is not None:
            result["aceInstanceName"] = \
                self._aceInstanceName
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._chargeId is not None:
            result["chargeId"] = \
                self._chargeId
        if self._prices:
            result["prices"] = [
                i.toDict() for i in self._prices 
            ] if self._prices else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._prices is not None):
            for obj in self._prices:
                if (obj is not None): obj.isValid()
        return True
    

