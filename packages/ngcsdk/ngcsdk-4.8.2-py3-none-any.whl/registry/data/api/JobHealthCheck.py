"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .HttpGet import HttpGet

# Unused import over optimization prevention
str(repr(HttpGet))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobHealthCheck(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.httpGet = (
            None if not fromDict or propDict.get(
                "httpGet"
            ) is None
            else propDict["httpGet"])
        self.initialDelaySeconds = (
            None if not fromDict or propDict.get(
                "initialDelaySeconds"
            ) is None
            else propDict["initialDelaySeconds"])
        self.periodSeconds = (
            None if not fromDict or propDict.get(
                "periodSeconds"
            ) is None
            else propDict["periodSeconds"])
        self.timeoutSeconds = (
            None if not fromDict or propDict.get(
                "timeoutSeconds"
            ) is None
            else propDict["timeoutSeconds"])

    @property
    def httpGet(self):
        """HttpGet: Health check using HTTP Get request"""
        return self._httpGet

    @httpGet.setter
    def httpGet(self, value):
        if value is not None and not isinstance(value, HttpGet):
            value = HttpGet(value)
        if (value is None) or isinstance(value, HttpGet):
            self._httpGet = value
        else:
            raise TypeError(
                'Property "httpGet" of type "list<HttpGet>" set to wrong type'
            )

    @property
    def initialDelaySeconds(self):
        """int: How much to wait (in seconds) for container to initialize befo
        re performing the health check, default is 0."""
        return self._initialDelaySeconds

    @initialDelaySeconds.setter
    def initialDelaySeconds(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._initialDelaySeconds = value
        else:
            raise TypeError(
                'Property "initialDelaySeconds" of type "list<int>" set to wr'
                'ong type'
            )

    @property
    def periodSeconds(self):
        """int: How often (in seconds) to perform the health check, default is
         10."""
        return self._periodSeconds

    @periodSeconds.setter
    def periodSeconds(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._periodSeconds = value
        else:
            raise TypeError(
                'Property "periodSeconds" of type "list<int>" set to wrong ty'
                'pe'
            )

    @property
    def timeoutSeconds(self):
        """int: Number of seconds after which health check times out and consi
        der failed, default is 1."""
        return self._timeoutSeconds

    @timeoutSeconds.setter
    def timeoutSeconds(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._timeoutSeconds = value
        else:
            raise TypeError(
                'Property "timeoutSeconds" of type "list<int>" set to wrong t'
                'ype'
            )

    def toDict(self):
        result = {}
        if self._httpGet:
            result["httpGet"] = \
                self._httpGet.toDict() if self._httpGet is not None else None
        if self._initialDelaySeconds is not None:
            result["initialDelaySeconds"] = \
                self._initialDelaySeconds
        if self._periodSeconds is not None:
            result["periodSeconds"] = \
                self._periodSeconds
        if self._timeoutSeconds is not None:
            result["timeoutSeconds"] = \
                self._timeoutSeconds
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._httpGet is not None): self._httpGet.isValid()
        return True
    

