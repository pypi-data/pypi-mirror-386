"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .BannerEventTypeEnum import BannerEventTypeEnum
from .BannerEventIncident import BannerEventIncident

# Unused import over optimization prevention
str(repr(BannerEventTypeEnum))
str(repr(BannerEventIncident))


if sys.version_info > (3,):
    long = int
    unicode = str

class BannerEvent(object):
    """Object of banner event data"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.bannerEventType = (
            None if not fromDict or propDict.get(
                "bannerEventType"
            ) is None
            else propDict["bannerEventType"])
        self.eventId = (
            None if not fromDict or propDict.get(
                "eventId"
            ) is None
            else propDict["eventId"])
        self.eventUuid = (
            None if not fromDict or propDict.get(
                "eventUuid"
            ) is None
            else propDict["eventUuid"])
        self.incident = (
            None if not fromDict or propDict.get(
                "incident"
            ) is None
            else propDict["incident"])

    @property
    def bannerEventType(self):
        """BannerEventTypeEnum: Banner event type. Default to INCIDENT"""
        return self._bannerEventType

    @bannerEventType.setter
    def bannerEventType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._bannerEventType = value
        else:
            raise TypeError(
                'Property "bannerEventType" of type "list<BannerEventTypeEnum'
                '>" set to wrong type'
            )

    @property
    def eventId(self):
        """str: EventId generated by server. For example U20210610A. The date 
        inside the eventId is UTC 00:00 based"""
        return self._eventId

    @eventId.setter
    def eventId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._eventId = value
        else:
            raise TypeError(
                'Property "eventId" of type "list<str>" set to wrong type'
            )

    @property
    def eventUuid(self):
        """str: Event unique time UUID."""
        return self._eventUuid

    @eventUuid.setter
    def eventUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._eventUuid = value
        else:
            raise TypeError(
                'Property "eventUuid" of type "list<str>" set to wrong type'
            )

    @property
    def incident(self):
        """BannerEventIncident: Object of banner event incident data"""
        return self._incident

    @incident.setter
    def incident(self, value):
        if value is not None and not isinstance(value, BannerEventIncident):
            value = BannerEventIncident(value)
        if (value is None) or isinstance(value, BannerEventIncident):
            self._incident = value
        else:
            raise TypeError(
                'Property "incident" of type "list<BannerEventIncident>" set '
                'to wrong type'
            )

    def toDict(self):
        result = {}
        if self._bannerEventType is not None:
            result["bannerEventType"] = \
                self._bannerEventType
        if self._eventId is not None:
            result["eventId"] = \
                self._eventId
        if self._eventUuid is not None:
            result["eventUuid"] = \
                self._eventUuid
        if self._incident:
            result["incident"] = \
                self._incident.toDict() if self._incident is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._eventUuid is None:
            raise ValueError(
                "BannerEvent.eventUuid doesnt match requirement:" 
                "required: True"
            )
        if self._eventId is None:
            raise ValueError(
                "BannerEvent.eventId doesnt match requirement:" 
                "required: True"
            )
        if (self._incident is not None): self._incident.isValid()
        return True
    

