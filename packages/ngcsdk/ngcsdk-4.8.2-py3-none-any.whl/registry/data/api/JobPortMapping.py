"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class JobPortMapping(object):
    """Port mapping between host and container"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.containerPort = (
            None if not fromDict or propDict.get(
                "containerPort"
            ) is None
            else propDict["containerPort"])
        self.hostIP = (
            None if not fromDict or propDict.get(
                "hostIP"
            ) is None
            else propDict["hostIP"])
        self.hostName = (
            None if not fromDict or propDict.get(
                "hostName"
            ) is None
            else propDict["hostName"])
        self.hostPort = (
            None if not fromDict or propDict.get(
                "hostPort"
            ) is None
            else propDict["hostPort"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.protocol = (
            None if not fromDict or propDict.get(
                "protocol"
            ) is None
            else propDict["protocol"])

    @property
    def containerPort(self):
        """int: container port is provided on job creation"""
        return self._containerPort

    @containerPort.setter
    def containerPort(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._containerPort = value
        else:
            raise TypeError(
                'Property "containerPort" of type "list<int>" set to wrong ty'
                'pe'
            )

    @property
    def hostIP(self):
        """str: Public IP address where the container ports can be accessed"""
        return self._hostIP

    @hostIP.setter
    def hostIP(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._hostIP = value
        else:
            raise TypeError(
                'Property "hostIP" of type "list<str>" set to wrong type'
            )

    @property
    def hostName(self):
        """str: host name is assigned on the node"""
        return self._hostName

    @hostName.setter
    def hostName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._hostName = value
        else:
            raise TypeError(
                'Property "hostName" of type "list<str>" set to wrong type'
            )

    @property
    def hostPort(self):
        """int: host port is assigned on the node"""
        return self._hostPort

    @hostPort.setter
    def hostPort(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._hostPort = value
        else:
            raise TypeError(
                'Property "hostPort" of type "list<int>" set to wrong type'
            )

    @property
    def name(self):
        """str: name for this port"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def protocol(self):
        """str: protocol that the port supports (TCP|UDP)"""
        return self._protocol

    @protocol.setter
    def protocol(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._protocol = value
        else:
            raise TypeError(
                'Property "protocol" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._containerPort is not None:
            result["containerPort"] = \
                self._containerPort
        if self._hostIP is not None:
            result["hostIP"] = \
                self._hostIP
        if self._hostName is not None:
            result["hostName"] = \
                self._hostName
        if self._hostPort is not None:
            result["hostPort"] = \
                self._hostPort
        if self._name is not None:
            result["name"] = \
                self._name
        if self._protocol is not None:
            result["protocol"] = \
                self._protocol
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) > 10):
            raise ValueError(
                "JobPortMapping.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 10")
        if (self._name is not None
            and
            not re.match(
                r"^([a-zA-Z])([a-zA-Z\d])*$",
                 self._name)):
            raise ValueError(
                "JobPortMapping.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^([a-zA-Z])([a-zA-Z\d])*"
                "$")
        return True
    

