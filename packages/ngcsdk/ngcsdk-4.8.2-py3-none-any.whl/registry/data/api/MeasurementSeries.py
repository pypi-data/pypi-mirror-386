"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Measurement import Measurement
from .MeasurementTag import MeasurementTag

# Unused import over optimization prevention
str(repr(MeasurementTag))
str(repr(Measurement))


if sys.version_info > (3,):
    long = int
    unicode = str

class MeasurementSeries(object):
    """object for a single series in the measurement"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.columns = (
            None if not fromDict or propDict.get(
                "columns"
            ) is None
            else propDict["columns"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.tags = (
            None if not fromDict or propDict.get(
                "tags"
            ) is None
            else [ MeasurementTag(i)
            for i in propDict["tags"] ])
        self.values = (
            None if not fromDict or propDict.get(
                "values"
            ) is None
            else [ Measurement(i)
            for i in propDict["values"] ])

    @property
    def columns(self):
        """list: list of columns, in order, for the series."""
        return self._columns

    @columns.setter
    def columns(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._columns = value
        else:
            raise TypeError(
                'Property "columns" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: name for the measurement"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def tags(self):
        """list: list of tags identifying the series."""
        return self._tags

    @tags.setter
    def tags(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._tags = value
        else:
            raise TypeError(
                'Property "tags" of type "list<MeasurementTag>" set to wrong '
                'type'
            )

    @property
    def values(self):
        """list: array of values, in the same order as the columns, for the se
        ries."""
        return self._values

    @values.setter
    def values(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._values = value
        else:
            raise TypeError(
                'Property "values" of type "list<Measurement>" set to wrong t'
                'ype'
            )

    def toDict(self):
        result = {}
        if self._columns is not None:
            result["columns"] = \
                self._columns
        if self._name is not None:
            result["name"] = \
                self._name
        if self._tags:
            result["tags"] = [
                i.toDict() for i in self._tags 
            ] if self._tags else []
        if self._values:
            result["values"] = [
                i.toDict() for i in self._values 
            ] if self._values else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._tags is not None):
            for obj in self._tags:
                if (obj is not None): obj.isValid()
        if (self._values is not None):
            for obj in self._values:
                if (obj is not None): obj.isValid()
        return True
    

