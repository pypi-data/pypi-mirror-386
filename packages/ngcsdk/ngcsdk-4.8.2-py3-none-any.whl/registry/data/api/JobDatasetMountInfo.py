"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class JobDatasetMountInfo(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.containerMountPoint = (
            None if not fromDict or propDict.get(
                "containerMountPoint"
            ) is None
            else propDict["containerMountPoint"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.uuid = (
            None if not fromDict or propDict.get(
                "uuid"
            ) is None
            else propDict["uuid"])

    @property
    def containerMountPoint(self):
        """str: Mount point inside the container to which this dataset will be
         mapped"""
        return self._containerMountPoint

    @containerMountPoint.setter
    def containerMountPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerMountPoint = value
        else:
            raise TypeError(
                'Property "containerMountPoint" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def id(self):
        """long: NGC Dataset ID"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def uuid(self):
        """str: Dataset Service ID"""
        return self._uuid

    @uuid.setter
    def uuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._uuid = value
        else:
            raise TypeError(
                'Property "uuid" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._containerMountPoint is not None:
            result["containerMountPoint"] = \
                self._containerMountPoint
        if self._id is not None:
            result["id"] = \
                self._id
        if self._uuid is not None:
            result["uuid"] = \
                self._uuid
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._containerMountPoint is None:
            raise ValueError(
                "JobDatasetMountInfo.containerMountPoint doesnt match requirement:" 
                "required: True"
            )
        return True
    

