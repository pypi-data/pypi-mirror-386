"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class MeasurementAlertCriteria(object):
    """Measurement Alert"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.comparator = (
            None if not fromDict or propDict.get(
                "comparator"
            ) is None
            else propDict["comparator"])
        self.level = (
            None if not fromDict or propDict.get(
                "level"
            ) is None
            else propDict["level"])
        self.percent = (
            None if not fromDict or propDict.get(
                "percent"
            ) is None
            else propDict["percent"])

    @property
    def comparator(self):
        """ """
        return self._comparator

    @comparator.setter
    def comparator(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._comparator = value
        else:
            raise TypeError(
                'Property "comparator" of type "list<ComparatorEnum>" set to '
                'wrong type'
            )

    ComparatorEnum=["LESS_THAN","LESS_THAN_OR_EQUAL_TO","GREATER_THAN","GREATER_THAN_OR_EQUAL_TO",]
    str(repr(ComparatorEnum))  # Prevent optimizer removing enum

    @property
    def level(self):
        """ """
        return self._level

    @level.setter
    def level(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._level = value
        else:
            raise TypeError(
                'Property "level" of type "list<LevelEnum>" set to wrong type'
            )

    LevelEnum=["INFO","WARN","CRITICAL",]
    str(repr(LevelEnum))  # Prevent optimizer removing enum

    @property
    def percent(self):
        """long: Percentage value used for comparison"""
        return self._percent

    @percent.setter
    def percent(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._percent = value
        else:
            raise TypeError(
                'Property "percent" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._comparator is not None:
            result["comparator"] = \
                self._comparator
        if self._level is not None:
            result["level"] = \
                self._level
        if self._percent is not None:
            result["percent"] = \
                self._percent
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._percent is None:
            raise ValueError(
                "MeasurementAlertCriteria.percent doesnt match requirement:" 
                "required: True"
            )
        if (self._percent is not None
            and
            self._percent < 0):
            raise ValueError(
                "MeasurementAlertCriteria.percent: " + str(self._percent) + 
                " doesnt match requirement: minimum: 0")
        if (self._percent is not None
            and
            self._percent > 100):
            raise ValueError(
                "MeasurementAlertCriteria.percent: " + str(self._percent) + 
                " doesnt match requirement: maximum: 100")
        if self._comparator is None:
            raise ValueError(
                "MeasurementAlertCriteria.comparator doesnt match requirement:" 
                "required: True"
            )
        if self._level is None:
            raise ValueError(
                "MeasurementAlertCriteria.level doesnt match requirement:" 
                "required: True"
            )
        return True
    

