"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .UserInvitation import UserInvitation
from .PaginationInfo import PaginationInfo

# Unused import over optimization prevention
str(repr(PaginationInfo))
str(repr(RequestStatus))
str(repr(UserInvitation))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserInvitationListResponse(object):
    """Response for a list of user invitations."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.invitations = (
            None if not fromDict or propDict.get(
                "invitations"
            ) is None
            else [ UserInvitation(i)
            for i in propDict["invitations"] ])
        self.paginationInfo = (
            None if not fromDict or propDict.get(
                "paginationInfo"
            ) is None
            else propDict["paginationInfo"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def invitations(self):
        """list: List of invitations."""
        return self._invitations

    @invitations.setter
    def invitations(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._invitations = value
        else:
            raise TypeError(
                'Property "invitations" of type "list<UserInvitation>" set to'
                ' wrong type'
            )

    @property
    def paginationInfo(self):
        """PaginationInfo: object that describes the pagination information"""
        return self._paginationInfo

    @paginationInfo.setter
    def paginationInfo(self, value):
        if value is not None and not isinstance(value, PaginationInfo):
            value = PaginationInfo(value)
        if (value is None) or isinstance(value, PaginationInfo):
            self._paginationInfo = value
        else:
            raise TypeError(
                'Property "paginationInfo" of type "list<PaginationInfo>" set'
                ' to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._invitations:
            result["invitations"] = [
                i.toDict() for i in self._invitations 
            ] if self._invitations else []
        if self._paginationInfo:
            result["paginationInfo"] = \
                self._paginationInfo.toDict() if self._paginationInfo is not None else None
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._invitations is not None):
            for obj in self._invitations:
                if (obj is not None): obj.isValid()
        if (self._paginationInfo is not None): self._paginationInfo.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

