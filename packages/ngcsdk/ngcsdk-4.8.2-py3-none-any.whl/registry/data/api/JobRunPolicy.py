"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class JobRunPolicy(object):
    """Kill policy of the job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.expirySeconds = (
            None if not fromDict or propDict.get(
                "expirySeconds"
            ) is None
            else propDict["expirySeconds"])
        self.minTimesliceSeconds = (
            None if not fromDict or propDict.get(
                "minTimesliceSeconds"
            ) is None
            else propDict["minTimesliceSeconds"])
        self.preemptClass = (
            None if not fromDict or propDict.get(
                "preemptClass"
            ) is None
            else propDict["preemptClass"])
        self.totalRuntimeSeconds = (
            None if not fromDict or propDict.get(
                "totalRuntimeSeconds"
            ) is None
            else propDict["totalRuntimeSeconds"])

    @property
    def expirySeconds(self):
        """long: Maximum duration in seconds from submission time during which
         the job will be allowed to run. If not specified, or is 0, th
        en ACE limit will be applied."""
        return self._expirySeconds

    @expirySeconds.setter
    def expirySeconds(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._expirySeconds = value
        else:
            raise TypeError(
                'Property "expirySeconds" of type "list<long>" set to wrong t'
                'ype'
            )

    @property
    def minTimesliceSeconds(self):
        """long: Minimum time in seconds job is expected (not guaranteed) to b
        e in the RUNNING state once scheduled to assure forward progre
        ss."""
        return self._minTimesliceSeconds

    @minTimesliceSeconds.setter
    def minTimesliceSeconds(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._minTimesliceSeconds = value
        else:
            raise TypeError(
                'Property "minTimesliceSeconds" of type "list<long>" set to w'
                'rong type'
            )

    @property
    def preemptClass(self):
        """PreemptClassEnum: Describes the job class for preemption and schedu
        ling behavior. One of RESUMABLE, RESTARTABLE, or RUNONCE (defa
        ult)."""
        return self._preemptClass

    @preemptClass.setter
    def preemptClass(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._preemptClass = value
        else:
            raise TypeError(
                'Property "preemptClass" of type "list<PreemptClassEnum>" set'
                ' to wrong type'
            )

    PreemptClassEnum=["RESUMABLE","RESTARTABLE","RUNONCE",]
    str(repr(PreemptClassEnum))  # Prevent optimizer removing enum

    @property
    def totalRuntimeSeconds(self):
        """long: Maximum duration in seconds after which the job will be kille
        d. If not specified, or is 0, then ACE limit will be applied."""
        return self._totalRuntimeSeconds

    @totalRuntimeSeconds.setter
    def totalRuntimeSeconds(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalRuntimeSeconds = value
        else:
            raise TypeError(
                'Property "totalRuntimeSeconds" of type "list<long>" set to w'
                'rong type'
            )

    def toDict(self):
        result = {}
        if self._expirySeconds is not None:
            result["expirySeconds"] = \
                self._expirySeconds
        if self._minTimesliceSeconds is not None:
            result["minTimesliceSeconds"] = \
                self._minTimesliceSeconds
        if self._preemptClass is not None:
            result["preemptClass"] = \
                self._preemptClass
        if self._totalRuntimeSeconds is not None:
            result["totalRuntimeSeconds"] = \
                self._totalRuntimeSeconds
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._totalRuntimeSeconds is not None
            and
            self._totalRuntimeSeconds < 0):
            raise ValueError(
                "JobRunPolicy.totalRuntimeSeconds: " + str(self._totalRuntimeSeconds) + 
                " doesnt match requirement: minimum: 0")
        if (self._minTimesliceSeconds is not None
            and
            self._minTimesliceSeconds < 0):
            raise ValueError(
                "JobRunPolicy.minTimesliceSeconds: " + str(self._minTimesliceSeconds) + 
                " doesnt match requirement: minimum: 0")
        if (self._expirySeconds is not None
            and
            self._expirySeconds < 0):
            raise ValueError(
                "JobRunPolicy.expirySeconds: " + str(self._expirySeconds) + 
                " doesnt match requirement: minimum: 0")
        return True
    

