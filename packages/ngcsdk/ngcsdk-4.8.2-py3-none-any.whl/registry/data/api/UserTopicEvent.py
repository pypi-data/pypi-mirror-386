"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserTopicEvent(object):
    """User topic event."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.actionBy = (
            None if not fromDict or propDict.get(
                "actionBy"
            ) is None
            else propDict["actionBy"])
        self.clientId = (
            None if not fromDict or propDict.get(
                "clientId"
            ) is None
            else propDict["clientId"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.userId = (
            None if not fromDict or propDict.get(
                "userId"
            ) is None
            else propDict["userId"])

    @property
    def actionBy(self):
        """str: Auth client ID of the user who performed the action"""
        return self._actionBy

    @actionBy.setter
    def actionBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._actionBy = value
        else:
            raise TypeError(
                'Property "actionBy" of type "list<str>" set to wrong type'
            )

    @property
    def clientId(self):
        """str: Unique authentication ID of the user."""
        return self._clientId

    @clientId.setter
    def clientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._clientId = value
        else:
            raise TypeError(
                'Property "clientId" of type "list<str>" set to wrong type'
            )

    @property
    def email(self):
        """str: Email of the user"""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Name of the user's organization."""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def teamName(self):
        """str: Name of the user's team (optional)."""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<TypeEnum>" set to wrong type'
            )

    TypeEnum=["CREATED","REMOVED","PURGED",]
    str(repr(TypeEnum))  # Prevent optimizer removing enum

    @property
    def userId(self):
        """long: Unique ID of the user."""
        return self._userId

    @userId.setter
    def userId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._userId = value
        else:
            raise TypeError(
                'Property "userId" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._actionBy is not None:
            result["actionBy"] = \
                self._actionBy
        if self._clientId is not None:
            result["clientId"] = \
                self._clientId
        if self._email is not None:
            result["email"] = \
                self._email
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._type is not None:
            result["type"] = \
                self._type
        if self._userId is not None:
            result["userId"] = \
                self._userId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

