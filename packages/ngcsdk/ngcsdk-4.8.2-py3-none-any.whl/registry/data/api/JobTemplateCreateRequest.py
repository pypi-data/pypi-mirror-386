"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class JobTemplateCreateRequest(object):
    """request to create a job template"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def description(self):
        """str: optional description of the job, max 512 chars."""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def jobId(self):
        """long: Job id that the template is based on."""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<long>" set to wrong type'
            )

    @property
    def name(self):
        """str: name for the job template, does not need to be unique max 128 
        characters"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._description is not None:
            result["description"] = \
                self._description
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "JobTemplateCreateRequest.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 2):
            raise ValueError(
                "JobTemplateCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 2")
        if (self._name is not None
            and
            len(self._name) > 128):
            raise ValueError(
                "JobTemplateCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 128")
        if (self._name is not None
            and
            not re.match(
                r"^[a-zA-Z\d][a-zA-Z\d\-\. ,_]*$",
                 self._name)):
            raise ValueError(
                "JobTemplateCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-zA-Z\d][a-zA-Z\d\-\."
                " ,_]*$")
        if (self._description is not None
            and
            len(self._description) > 512):
            raise ValueError(
                "JobTemplateCreateRequest.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 512")
        if self._jobId is None:
            raise ValueError(
                "JobTemplateCreateRequest.jobId doesnt match requirement:" 
                "required: True"
            )
        return True
    

