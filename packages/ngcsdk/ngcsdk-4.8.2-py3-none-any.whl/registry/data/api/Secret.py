"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SecretKVEnv import SecretKVEnv

# Unused import over optimization prevention
str(repr(SecretKVEnv))


if sys.version_info > (3,):
    long = int
    unicode = str

class Secret(object):
    """Information about the secret"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allKVs = (
            None if not fromDict or propDict.get(
                "allKVs"
            ) is None
            else propDict["allKVs"])
        self.kvEnvs = (
            None if not fromDict or propDict.get(
                "kvEnvs"
            ) is None
            else [ SecretKVEnv(i)
            for i in propDict["kvEnvs"] ])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def allKVs(self):
        """bool: Indicate that all the KV pairs associated to the secret will 
        be exported as environment variables with key name as env vari
        able name"""
        return self._allKVs

    @allKVs.setter
    def allKVs(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allKVs = value
        else:
            raise TypeError(
                'Property "allKVs" of type "list<bool>" set to wrong type'
            )

    @property
    def kvEnvs(self):
        """list: List of {KeyName,Value,EnvName} tuples associated to the secr
        et"""
        return self._kvEnvs

    @kvEnvs.setter
    def kvEnvs(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._kvEnvs = value
        else:
            raise TypeError(
                'Property "kvEnvs" of type "list<SecretKVEnv>" set to wrong t'
                'ype'
            )

    @property
    def name(self):
        """str: Secret name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._allKVs is not None:
            result["allKVs"] = \
                self._allKVs
        if self._kvEnvs:
            result["kvEnvs"] = [
                i.toDict() for i in self._kvEnvs 
            ] if self._kvEnvs else []
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "Secret.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "Secret.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._kvEnvs is not None):
            for obj in self._kvEnvs:
                if (obj is not None): obj.isValid()
        return True
    

