"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AuditLogs(object):
    """Object of audit logs"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.auditLogsFrom = (
            None if not fromDict or propDict.get(
                "auditLogsFrom"
            ) is None
            else propDict["auditLogsFrom"])
        self.auditLogsId = (
            None if not fromDict or propDict.get(
                "auditLogsId"
            ) is None
            else propDict["auditLogsId"])
        self.auditLogsStatus = (
            None if not fromDict or propDict.get(
                "auditLogsStatus"
            ) is None
            else propDict["auditLogsStatus"])
        self.auditLogsTo = (
            None if not fromDict or propDict.get(
                "auditLogsTo"
            ) is None
            else propDict["auditLogsTo"])
        self.requestedDate = (
            None if not fromDict or propDict.get(
                "requestedDate"
            ) is None
            else propDict["requestedDate"])
        self.requesterEmail = (
            None if not fromDict or propDict.get(
                "requesterEmail"
            ) is None
            else propDict["requesterEmail"])
        self.requesterName = (
            None if not fromDict or propDict.get(
                "requesterName"
            ) is None
            else propDict["requesterName"])
        self.requsterEmail = (
            None if not fromDict or propDict.get(
                "requsterEmail"
            ) is None
            else propDict["requsterEmail"])
        self.requsterName = (
            None if not fromDict or propDict.get(
                "requsterName"
            ) is None
            else propDict["requsterName"])

    @property
    def auditLogsFrom(self):
        """str: Audit logs from date"""
        return self._auditLogsFrom

    @auditLogsFrom.setter
    def auditLogsFrom(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._auditLogsFrom = value
        else:
            raise TypeError(
                'Property "auditLogsFrom" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def auditLogsId(self):
        """str: Unique Id of audit logs"""
        return self._auditLogsId

    @auditLogsId.setter
    def auditLogsId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._auditLogsId = value
        else:
            raise TypeError(
                'Property "auditLogsId" of type "list<str>" set to wrong type'
            )

    @property
    def auditLogsStatus(self):
        """AuditLogsStatusEnum: Status of audit logs"""
        return self._auditLogsStatus

    @auditLogsStatus.setter
    def auditLogsStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._auditLogsStatus = value
        else:
            raise TypeError(
                'Property "auditLogsStatus" of type "list<AuditLogsStatusEnum'
                '>" set to wrong type'
            )

    AuditLogsStatusEnum=["UNKNOWN","REQUESTED","READY",]
    str(repr(AuditLogsStatusEnum))  # Prevent optimizer removing enum

    @property
    def auditLogsTo(self):
        """str: Audit logs to date"""
        return self._auditLogsTo

    @auditLogsTo.setter
    def auditLogsTo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._auditLogsTo = value
        else:
            raise TypeError(
                'Property "auditLogsTo" of type "list<str>" set to wrong type'
            )

    @property
    def requestedDate(self):
        """str: Audit logs requested date"""
        return self._requestedDate

    @requestedDate.setter
    def requestedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requestedDate = value
        else:
            raise TypeError(
                'Property "requestedDate" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def requesterEmail(self):
        """str: Audit logs requester email"""
        return self._requesterEmail

    @requesterEmail.setter
    def requesterEmail(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requesterEmail = value
        else:
            raise TypeError(
                'Property "requesterEmail" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def requesterName(self):
        """str: Audit logs requester name"""
        return self._requesterName

    @requesterName.setter
    def requesterName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requesterName = value
        else:
            raise TypeError(
                'Property "requesterName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def requsterEmail(self):
        """str: [DEPRECATED] Audit logs requester email"""
        return self._requsterEmail

    @requsterEmail.setter
    def requsterEmail(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requsterEmail = value
        else:
            raise TypeError(
                'Property "requsterEmail" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def requsterName(self):
        """str: [DEPRECATED] Audit logs requester name"""
        return self._requsterName

    @requsterName.setter
    def requsterName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requsterName = value
        else:
            raise TypeError(
                'Property "requsterName" of type "list<str>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._auditLogsFrom is not None:
            result["auditLogsFrom"] = \
                self._auditLogsFrom
        if self._auditLogsId is not None:
            result["auditLogsId"] = \
                self._auditLogsId
        if self._auditLogsStatus is not None:
            result["auditLogsStatus"] = \
                self._auditLogsStatus
        if self._auditLogsTo is not None:
            result["auditLogsTo"] = \
                self._auditLogsTo
        if self._requestedDate is not None:
            result["requestedDate"] = \
                self._requestedDate
        if self._requesterEmail is not None:
            result["requesterEmail"] = \
                self._requesterEmail
        if self._requesterName is not None:
            result["requesterName"] = \
                self._requesterName
        if self._requsterEmail is not None:
            result["requsterEmail"] = \
                self._requsterEmail
        if self._requsterName is not None:
            result["requsterName"] = \
                self._requsterName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._requsterEmail is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._requsterEmail)):
            raise ValueError(
                "AuditLogs.requsterEmail: " + str(self._requsterEmail) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        if (self._requesterEmail is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._requesterEmail)):
            raise ValueError(
                "AuditLogs.requesterEmail: " + str(self._requesterEmail) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        return True
    

