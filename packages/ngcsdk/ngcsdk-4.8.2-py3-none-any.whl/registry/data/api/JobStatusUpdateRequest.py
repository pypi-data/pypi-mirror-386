"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobPortMapping import JobPortMapping
from .JobStatus import JobStatus

# Unused import over optimization prevention
str(repr(JobPortMapping))
str(repr(JobStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobStatusUpdateRequest(object):
    """object used by the node to send job/task status updates to the cloud"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.containerName = (
            None if not fromDict or propDict.get(
                "containerName"
            ) is None
            else propDict["containerName"])
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])
        self.jobStatus = (
            None if not fromDict or propDict.get(
                "jobStatus"
            ) is None
            else propDict["jobStatus"])
        self.poolId = (
            None if not fromDict or propDict.get(
                "poolId"
            ) is None
            else propDict["poolId"])
        self.portMappings = (
            None if not fromDict or propDict.get(
                "portMappings"
            ) is None
            else [ JobPortMapping(i)
            for i in propDict["portMappings"] ])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.statusType = (
            None if not fromDict or propDict.get(
                "statusType"
            ) is None
            else propDict["statusType"])
        self.taskId = (
            None if not fromDict or propDict.get(
                "taskId"
            ) is None
            else propDict["taskId"])

    @property
    def containerName(self):
        """str: [DEPRECATED] DO NOT USE, WILL BE REMOVED SOONtm"""
        return self._containerName

    @containerName.setter
    def containerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerName = value
        else:
            raise TypeError(
                'Property "containerName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def jobId(self):
        """long: Id of the job"""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<long>" set to wrong type'
            )

    @property
    def jobStatus(self):
        """JobStatus: updates about job status are coming from the nodes"""
        return self._jobStatus

    @jobStatus.setter
    def jobStatus(self, value):
        if value is not None and not isinstance(value, JobStatus):
            value = JobStatus(value)
        if (value is None) or isinstance(value, JobStatus):
            self._jobStatus = value
        else:
            raise TypeError(
                'Property "jobStatus" of type "list<JobStatus>" set to wrong '
                'type'
            )

    @property
    def poolId(self):
        """str: Infinity Manager's poolId which is the identifier of the pool 
        against which the job runs."""
        return self._poolId

    @poolId.setter
    def poolId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._poolId = value
        else:
            raise TypeError(
                'Property "poolId" of type "list<str>" set to wrong type'
            )

    @property
    def portMappings(self):
        """list: [DEPRECATED] DO NOT USE, WILL BE REMOVED SOONtm"""
        return self._portMappings

    @portMappings.setter
    def portMappings(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._portMappings = value
        else:
            raise TypeError(
                'Property "portMappings" of type "list<JobPortMapping>" set t'
                'o wrong type'
            )

    @property
    def status(self):
        """JobStatus: updates about job status are coming from the nodes"""
        return self._status

    @status.setter
    def status(self, value):
        if value is not None and not isinstance(value, JobStatus):
            value = JobStatus(value)
        if (value is None) or isinstance(value, JobStatus):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<JobStatus>" set to wrong typ'
                'e'
            )

    @property
    def statusType(self):
        """StatusTypeEnum: identifies whether the status is of a job or task i
        n a multinode job"""
        return self._statusType

    @statusType.setter
    def statusType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._statusType = value
        else:
            raise TypeError(
                'Property "statusType" of type "list<StatusTypeEnum>" set to '
                'wrong type'
            )

    StatusTypeEnum=["JOB","TASK",]
    str(repr(StatusTypeEnum))  # Prevent optimizer removing enum

    @property
    def taskId(self):
        """long: Id of the task of the job, beginning with 0, null value means
         status of the job"""
        return self._taskId

    @taskId.setter
    def taskId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._taskId = value
        else:
            raise TypeError(
                'Property "taskId" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._containerName is not None:
            result["containerName"] = \
                self._containerName
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        if self._jobStatus:
            result["jobStatus"] = \
                self._jobStatus.toDict() if self._jobStatus is not None else None
        if self._poolId is not None:
            result["poolId"] = \
                self._poolId
        if self._portMappings:
            result["portMappings"] = [
                i.toDict() for i in self._portMappings 
            ] if self._portMappings else []
        if self._status:
            result["status"] = \
                self._status.toDict() if self._status is not None else None
        if self._statusType is not None:
            result["statusType"] = \
                self._statusType
        if self._taskId is not None:
            result["taskId"] = \
                self._taskId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._statusType is None:
            raise ValueError(
                "JobStatusUpdateRequest.statusType doesnt match requirement:" 
                "required: True"
            )
        if (self._portMappings is not None):
            for obj in self._portMappings:
                if (obj is not None): obj.isValid()
        if (self._jobStatus is not None): self._jobStatus.isValid()
        if (self._status is not None): self._status.isValid()
        return True
    

