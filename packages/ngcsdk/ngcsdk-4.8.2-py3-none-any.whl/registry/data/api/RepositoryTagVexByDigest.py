"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RepositoryTagVexDetail import RepositoryTagVexDetail

# Unused import over optimization prevention
str(repr(RepositoryTagVexDetail))


if sys.version_info > (3,):
    long = int
    unicode = str

class RepositoryTagVexByDigest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.digest = (
            None if not fromDict or propDict.get(
                "digest"
            ) is None
            else propDict["digest"])
        self.vex = (
            None if not fromDict or propDict.get(
                "vex"
            ) is None
            else [ RepositoryTagVexDetail(i)
            for i in propDict["vex"] ])

    @property
    def digest(self):
        """str: Image digest"""
        return self._digest

    @digest.setter
    def digest(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._digest = value
        else:
            raise TypeError(
                'Property "digest" of type "list<str>" set to wrong type'
            )

    @property
    def vex(self):
        """ """
        return self._vex

    @vex.setter
    def vex(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._vex = value
        else:
            raise TypeError(
                'Property "vex" of type "list<RepositoryTagVexDetail>" set to'
                ' wrong type'
            )

    def toDict(self):
        result = {}
        if self._digest is not None:
            result["digest"] = \
                self._digest
        if self._vex:
            result["vex"] = [
                i.toDict() for i in self._vex 
            ] if self._vex else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._vex is not None):
            for obj in self._vex:
                if (obj is not None): obj.isValid()
        return True
    

