"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RoleProduct import RoleProduct
from .ServiceAccess import ServiceAccess

# Unused import over optimization prevention
str(repr(ServiceAccess))
str(repr(RoleProduct))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserRoleDefinition(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allowedActions = (
            None if not fromDict or propDict.get(
                "allowedActions"
            ) is None
            else [ ServiceAccess(i)
            for i in propDict["allowedActions"] ])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.product = (
            None if not fromDict or propDict.get(
                "product"
            ) is None
            else propDict["product"])
        self.shortDisplayName = (
            None if not fromDict or propDict.get(
                "shortDisplayName"
            ) is None
            else propDict["shortDisplayName"])

    @property
    def allowedActions(self):
        """list: List of actions that this role allows"""
        return self._allowedActions

    @allowedActions.setter
    def allowedActions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._allowedActions = value
        else:
            raise TypeError(
                'Property "allowedActions" of type "list<ServiceAccess>" set '
                'to wrong type'
            )

    @property
    def displayName(self):
        """str: Display Name of the role"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Name of the role"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def product(self):
        """RoleProduct: Product information of the role"""
        return self._product

    @product.setter
    def product(self, value):
        if value is not None and not isinstance(value, RoleProduct):
            value = RoleProduct(value)
        if (value is None) or isinstance(value, RoleProduct):
            self._product = value
        else:
            raise TypeError(
                'Property "product" of type "list<RoleProduct>" set to wrong '
                'type'
            )

    @property
    def shortDisplayName(self):
        """str: Short Display Name of the role"""
        return self._shortDisplayName

    @shortDisplayName.setter
    def shortDisplayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDisplayName = value
        else:
            raise TypeError(
                'Property "shortDisplayName" of type "list<str>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._allowedActions:
            result["allowedActions"] = [
                i.toDict() for i in self._allowedActions 
            ] if self._allowedActions else []
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._name is not None:
            result["name"] = \
                self._name
        if self._product:
            result["product"] = \
                self._product.toDict() if self._product is not None else None
        if self._shortDisplayName is not None:
            result["shortDisplayName"] = \
                self._shortDisplayName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._product is not None): self._product.isValid()
        if (self._allowedActions is not None):
            for obj in self._allowedActions:
                if (obj is not None): obj.isValid()
        return True
    

