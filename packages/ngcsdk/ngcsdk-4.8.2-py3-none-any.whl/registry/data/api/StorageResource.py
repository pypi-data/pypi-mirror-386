"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .StorageResourceStatusEnum import StorageResourceStatusEnum
from .StorageLocation import StorageLocation

# Unused import over optimization prevention
str(repr(StorageResourceStatusEnum))
str(repr(StorageLocation))


if sys.version_info > (3,):
    long = int
    unicode = str

class StorageResource(object):
    """Generic Storage Resource for DL jobs."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.aceStorageServiceUrl = (
            None if not fromDict or propDict.get(
                "aceStorageServiceUrl"
            ) is None
            else propDict["aceStorageServiceUrl"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.creatorUserId = (
            None if not fromDict or propDict.get(
                "creatorUserId"
            ) is None
            else propDict["creatorUserId"])
        self.creatorUserName = (
            None if not fromDict or propDict.get(
                "creatorUserName"
            ) is None
            else propDict["creatorUserName"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.owned = (
            None if not fromDict or propDict.get(
                "owned"
            ) is None
            else propDict["owned"])
        self.resourceNumericId = (
            None if not fromDict or propDict.get(
                "resourceNumericId"
            ) is None
            else propDict["resourceNumericId"])
        self.shared = (
            None if not fromDict or propDict.get(
                "shared"
            ) is None
            else propDict["shared"])
        self.sharedWith = (
            None if not fromDict or propDict.get(
                "sharedWith"
            ) is None
            else propDict["sharedWith"])
        self.sizeInBytes = (
            None if not fromDict or propDict.get(
                "sizeInBytes"
            ) is None
            else propDict["sizeInBytes"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.storageLocations = (
            None if not fromDict or propDict.get(
                "storageLocations"
            ) is None
            else [ StorageLocation(i)
            for i in propDict["storageLocations"] ])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def aceName(self):
        """str: Name of the ACE to which the resource is local."""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def aceStorageServiceUrl(self):
        """str: URL of the storage service of given ACE"""
        return self._aceStorageServiceUrl

    @aceStorageServiceUrl.setter
    def aceStorageServiceUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceStorageServiceUrl = value
        else:
            raise TypeError(
                'Property "aceStorageServiceUrl" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def createdDate(self):
        """str: Resource creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def creatorUserId(self):
        """str: ID of the creator of the resource."""
        return self._creatorUserId

    @creatorUserId.setter
    def creatorUserId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creatorUserId = value
        else:
            raise TypeError(
                'Property "creatorUserId" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def creatorUserName(self):
        """str: Name of the creator of the resource."""
        return self._creatorUserName

    @creatorUserName.setter
    def creatorUserName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creatorUserName = value
        else:
            raise TypeError(
                'Property "creatorUserName" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def description(self):
        """str: Resource description."""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """str: Resource unique identifier (UUID)."""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def labels(self):
        """list: list of labels for this resource"""
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Name of the resource. Must not be a valid UUID or start with -
         or _."""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Organization to which resource belongs."""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def owned(self):
        """bool: Indicates whether the resource has been created by the curren
        t user"""
        return self._owned

    @owned.setter
    def owned(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._owned = value
        else:
            raise TypeError(
                'Property "owned" of type "list<bool>" set to wrong type'
            )

    @property
    def resourceNumericId(self):
        """long: Resource unique identifier (LONG)."""
        return self._resourceNumericId

    @resourceNumericId.setter
    def resourceNumericId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resourceNumericId = value
        else:
            raise TypeError(
                'Property "resourceNumericId" of type "list<long>" set to wro'
                'ng type'
            )

    @property
    def shared(self):
        """bool: Indicates whether the resource is shared with any Org or Team
        """
        return self._shared

    @shared.setter
    def shared(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._shared = value
        else:
            raise TypeError(
                'Property "shared" of type "list<bool>" set to wrong type'
            )

    @property
    def sharedWith(self):
        """list: List of teams this resource is shared with."""
        return self._sharedWith

    @sharedWith.setter
    def sharedWith(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sharedWith = value
        else:
            raise TypeError(
                'Property "sharedWith" of type "list<str>" set to wrong type'
            )

    @property
    def sizeInBytes(self):
        """long: Space used by the resource in bytes"""
        return self._sizeInBytes

    @sizeInBytes.setter
    def sizeInBytes(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._sizeInBytes = value
        else:
            raise TypeError(
                'Property "sizeInBytes" of type "list<long>" set to wrong typ'
                'e'
            )

    @property
    def status(self):
        """StorageResourceStatusEnum: Indicates the current status of a storag
        e resource (dataset,result, workspace)."""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<StorageResourceStatusEnum>" '
                'set to wrong type'
            )

    @property
    def storageLocations(self):
        """list: Storage locations of the storage resource"""
        return self._storageLocations

    @storageLocations.setter
    def storageLocations(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._storageLocations = value
        else:
            raise TypeError(
                'Property "storageLocations" of type "list<StorageLocation>" '
                'set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Resource update date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._aceStorageServiceUrl is not None:
            result["aceStorageServiceUrl"] = \
                self._aceStorageServiceUrl
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._creatorUserId is not None:
            result["creatorUserId"] = \
                self._creatorUserId
        if self._creatorUserName is not None:
            result["creatorUserName"] = \
                self._creatorUserName
        if self._description is not None:
            result["description"] = \
                self._description
        if self._id is not None:
            result["id"] = \
                self._id
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._owned is not None:
            result["owned"] = \
                self._owned
        if self._resourceNumericId is not None:
            result["resourceNumericId"] = \
                self._resourceNumericId
        if self._shared is not None:
            result["shared"] = \
                self._shared
        if self._sharedWith is not None:
            result["sharedWith"] = \
                self._sharedWith
        if self._sizeInBytes is not None:
            result["sizeInBytes"] = \
                self._sizeInBytes
        if self._status is not None:
            result["status"] = \
                self._status
        if self._storageLocations:
            result["storageLocations"] = [
                i.toDict() for i in self._storageLocations 
            ] if self._storageLocations else []
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._id is not None
            and
            not re.match(
                r"^(?![-_])[a-zA-Z0-9_-]{22}$",
                 self._id)):
            raise ValueError(
                "StorageResource.id: " + str(self._id) + 
                " doesnt match requirement: pattern: ^(?![-_])[a-zA-Z0-9_-]{2"
                "2}$")
        if (self._name is not None
            and
            not re.match(
                r"^(?![-_])(?![a-zA-Z0-9_-]{22}$)[a-zA-Z0-9_-]*$",
                 self._name)):
            raise ValueError(
                "StorageResource.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^(?![-_])(?![a-zA-Z0-9_-"
                "]{22}$)[a-zA-Z0-9_-]*$")
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "StorageResource.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._updatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._updatedDate)):
            raise ValueError(
                "StorageResource.updatedDate: " + str(self._updatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._storageLocations is not None):
            for obj in self._storageLocations:
                if (obj is not None): obj.isValid()
        return True
    

