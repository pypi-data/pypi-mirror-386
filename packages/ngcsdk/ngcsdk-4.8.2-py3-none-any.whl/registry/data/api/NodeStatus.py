"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .WebSocket import WebSocket

# Unused import over optimization prevention
str(repr(WebSocket))


if sys.version_info > (3,):
    long = int
    unicode = str

class NodeStatus(object):
    """data in this object is populated from the node"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.biosVersion = (
            None if not fromDict or propDict.get(
                "biosVersion"
            ) is None
            else propDict["biosVersion"])
        self.bmcVersion = (
            None if not fromDict or propDict.get(
                "bmcVersion"
            ) is None
            else propDict["bmcVersion"])
        self.cloudManaged = (
            None if not fromDict or propDict.get(
                "cloudManaged"
            ) is None
            else propDict["cloudManaged"])
        self.configTurnId = (
            None if not fromDict or propDict.get(
                "configTurnId"
            ) is None
            else propDict["configTurnId"])
        self.cpuCoresPerSocket = (
            None if not fromDict or propDict.get(
                "cpuCoresPerSocket"
            ) is None
            else propDict["cpuCoresPerSocket"])
        self.cpuModelName = (
            None if not fromDict or propDict.get(
                "cpuModelName"
            ) is None
            else propDict["cpuModelName"])
        self.cpuSockets = (
            None if not fromDict or propDict.get(
                "cpuSockets"
            ) is None
            else propDict["cpuSockets"])
        self.debianRepoURL = (
            None if not fromDict or propDict.get(
                "debianRepoURL"
            ) is None
            else propDict["debianRepoURL"])
        self.diskSpace = (
            None if not fromDict or propDict.get(
                "diskSpace"
            ) is None
            else propDict["diskSpace"])
        self.dockerApiVersion = (
            None if not fromDict or propDict.get(
                "dockerApiVersion"
            ) is None
            else propDict["dockerApiVersion"])
        self.fwVersion = (
            None if not fromDict or propDict.get(
                "fwVersion"
            ) is None
            else propDict["fwVersion"])
        self.gatewayIp = (
            None if not fromDict or propDict.get(
                "gatewayIp"
            ) is None
            else propDict["gatewayIp"])
        self.gpuModelName = (
            None if not fromDict or propDict.get(
                "gpuModelName"
            ) is None
            else propDict["gpuModelName"])
        self.healthStatus = (
            None if not fromDict or propDict.get(
                "healthStatus"
            ) is None
            else propDict["healthStatus"])
        self.ipAddress = (
            None if not fromDict or propDict.get(
                "ipAddress"
            ) is None
            else propDict["ipAddress"])
        self.ipmi = (
            None if not fromDict or propDict.get(
                "ipmi"
            ) is None
            else propDict["ipmi"])
        self.isMarathonLeader = (
            None if not fromDict or propDict.get(
                "isMarathonLeader"
            ) is None
            else propDict["isMarathonLeader"])
        self.isMaster = (
            None if not fromDict or propDict.get(
                "isMaster"
            ) is None
            else propDict["isMaster"])
        self.isMesosLeader = (
            None if not fromDict or propDict.get(
                "isMesosLeader"
            ) is None
            else propDict["isMesosLeader"])
        self.isSchedulerLeader = (
            None if not fromDict or propDict.get(
                "isSchedulerLeader"
            ) is None
            else propDict["isSchedulerLeader"])
        self.isZooKeeperLeader = (
            None if not fromDict or propDict.get(
                "isZooKeeperLeader"
            ) is None
            else propDict["isZooKeeperLeader"])
        self.lastBoot = (
            None if not fromDict or propDict.get(
                "lastBoot"
            ) is None
            else propDict["lastBoot"])
        self.masterIpAddress = (
            None if not fromDict or propDict.get(
                "masterIpAddress"
            ) is None
            else propDict["masterIpAddress"])
        self.memory = (
            None if not fromDict or propDict.get(
                "memory"
            ) is None
            else propDict["memory"])
        self.modelName = (
            None if not fromDict or propDict.get(
                "modelName"
            ) is None
            else propDict["modelName"])
        self.networkType = (
            None if not fromDict or propDict.get(
                "networkType"
            ) is None
            else propDict["networkType"])
        self.numGpus = (
            None if not fromDict or propDict.get(
                "numGpus"
            ) is None
            else propDict["numGpus"])
        self.roleTurnId = (
            None if not fromDict or propDict.get(
                "roleTurnId"
            ) is None
            else propDict["roleTurnId"])
        self.state = (
            None if not fromDict or propDict.get(
                "state"
            ) is None
            else propDict["state"])
        self.subNet = (
            None if not fromDict or propDict.get(
                "subNet"
            ) is None
            else propDict["subNet"])
        self.swVersion = (
            None if not fromDict or propDict.get(
                "swVersion"
            ) is None
            else propDict["swVersion"])
        self.upgradeOnBoot = (
            None if not fromDict or propDict.get(
                "upgradeOnBoot"
            ) is None
            else propDict["upgradeOnBoot"])
        self.webSocket = (
            None if not fromDict or propDict.get(
                "webSocket"
            ) is None
            else propDict["webSocket"])

    @property
    def biosVersion(self):
        """ """
        return self._biosVersion

    @biosVersion.setter
    def biosVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._biosVersion = value
        else:
            raise TypeError(
                'Property "biosVersion" of type "list<str>" set to wrong type'
            )

    @property
    def bmcVersion(self):
        """ """
        return self._bmcVersion

    @bmcVersion.setter
    def bmcVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._bmcVersion = value
        else:
            raise TypeError(
                'Property "bmcVersion" of type "list<str>" set to wrong type'
            )

    @property
    def cloudManaged(self):
        """bool: Represent if the node is managed by the cloud or not. Set at 
        the time of node boot by default and can be turned off by cust
        omer admin."""
        return self._cloudManaged

    @cloudManaged.setter
    def cloudManaged(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._cloudManaged = value
        else:
            raise TypeError(
                'Property "cloudManaged" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def configTurnId(self):
        """str: Turn ID of the ACE configuration which resulted in the current
         configuration. By default this value should be 0"""
        return self._configTurnId

    @configTurnId.setter
    def configTurnId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._configTurnId = value
        else:
            raise TypeError(
                'Property "configTurnId" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def cpuCoresPerSocket(self):
        """int: number of CPU cores per socket"""
        return self._cpuCoresPerSocket

    @cpuCoresPerSocket.setter
    def cpuCoresPerSocket(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._cpuCoresPerSocket = value
        else:
            raise TypeError(
                'Property "cpuCoresPerSocket" of type "list<int>" set to wron'
                'g type'
            )

    @property
    def cpuModelName(self):
        """str: cpu model"""
        return self._cpuModelName

    @cpuModelName.setter
    def cpuModelName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._cpuModelName = value
        else:
            raise TypeError(
                'Property "cpuModelName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def cpuSockets(self):
        """int: number of CPU sockets"""
        return self._cpuSockets

    @cpuSockets.setter
    def cpuSockets(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._cpuSockets = value
        else:
            raise TypeError(
                'Property "cpuSockets" of type "list<int>" set to wrong type'
            )

    @property
    def debianRepoURL(self):
        """str: Debian repo from where SW is upgraded."""
        return self._debianRepoURL

    @debianRepoURL.setter
    def debianRepoURL(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._debianRepoURL = value
        else:
            raise TypeError(
                'Property "debianRepoURL" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def diskSpace(self):
        """ """
        return self._diskSpace

    @diskSpace.setter
    def diskSpace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._diskSpace = value
        else:
            raise TypeError(
                'Property "diskSpace" of type "list<str>" set to wrong type'
            )

    @property
    def dockerApiVersion(self):
        """str: Current docker API version supported by the docker daemon inst
        alled on appliance"""
        return self._dockerApiVersion

    @dockerApiVersion.setter
    def dockerApiVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dockerApiVersion = value
        else:
            raise TypeError(
                'Property "dockerApiVersion" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def fwVersion(self):
        """ """
        return self._fwVersion

    @fwVersion.setter
    def fwVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fwVersion = value
        else:
            raise TypeError(
                'Property "fwVersion" of type "list<str>" set to wrong type'
            )

    @property
    def gatewayIp(self):
        """ """
        return self._gatewayIp

    @gatewayIp.setter
    def gatewayIp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gatewayIp = value
        else:
            raise TypeError(
                'Property "gatewayIp" of type "list<str>" set to wrong type'
            )

    @property
    def gpuModelName(self):
        """str: gpu model"""
        return self._gpuModelName

    @gpuModelName.setter
    def gpuModelName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuModelName = value
        else:
            raise TypeError(
                'Property "gpuModelName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def healthStatus(self):
        """ """
        return self._healthStatus

    @healthStatus.setter
    def healthStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._healthStatus = value
        else:
            raise TypeError(
                'Property "healthStatus" of type "list<HealthStatusEnum>" set'
                ' to wrong type'
            )

    HealthStatusEnum=["UNKNOWN","OK","UNDER_MAINTENANCE","FAILED",]
    str(repr(HealthStatusEnum))  # Prevent optimizer removing enum

    @property
    def ipAddress(self):
        """str: ip address of the node"""
        return self._ipAddress

    @ipAddress.setter
    def ipAddress(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ipAddress = value
        else:
            raise TypeError(
                'Property "ipAddress" of type "list<str>" set to wrong type'
            )

    @property
    def ipmi(self):
        """str: IP address that can be used for IPMI reset"""
        return self._ipmi

    @ipmi.setter
    def ipmi(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ipmi = value
        else:
            raise TypeError(
                'Property "ipmi" of type "list<str>" set to wrong type'
            )

    @property
    def isMarathonLeader(self):
        """bool: true is this node is designated as the leader. job request is
         sent to marathon leader"""
        return self._isMarathonLeader

    @isMarathonLeader.setter
    def isMarathonLeader(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMarathonLeader = value
        else:
            raise TypeError(
                'Property "isMarathonLeader" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def isMaster(self):
        """bool: If not master then it is a slave node."""
        return self._isMaster

    @isMaster.setter
    def isMaster(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMaster = value
        else:
            raise TypeError(
                'Property "isMaster" of type "list<bool>" set to wrong type'
            )

    @property
    def isMesosLeader(self):
        """bool: true is this node is designated as the mesos leader. job stat
        us polling is sent to mesos leader"""
        return self._isMesosLeader

    @isMesosLeader.setter
    def isMesosLeader(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMesosLeader = value
        else:
            raise TypeError(
                'Property "isMesosLeader" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def isSchedulerLeader(self):
        """bool: indicates if this node is the current leader for scheduling j
        obs on ACE. If value is provided, then it will be used instead
         of isMarathonLeader"""
        return self._isSchedulerLeader

    @isSchedulerLeader.setter
    def isSchedulerLeader(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSchedulerLeader = value
        else:
            raise TypeError(
                'Property "isSchedulerLeader" of type "list<bool>" set to wro'
                'ng type'
            )

    @property
    def isZooKeeperLeader(self):
        """bool: true if this node is a master leader designated for schedulin
        g"""
        return self._isZooKeeperLeader

    @isZooKeeperLeader.setter
    def isZooKeeperLeader(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isZooKeeperLeader = value
        else:
            raise TypeError(
                'Property "isZooKeeperLeader" of type "list<bool>" set to wro'
                'ng type'
            )

    @property
    def lastBoot(self):
        """ """
        return self._lastBoot

    @lastBoot.setter
    def lastBoot(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastBoot = value
        else:
            raise TypeError(
                'Property "lastBoot" of type "list<str>" set to wrong type'
            )

    @property
    def masterIpAddress(self):
        """str: ip address of the master, can be the same as IP address of the
         node"""
        return self._masterIpAddress

    @masterIpAddress.setter
    def masterIpAddress(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._masterIpAddress = value
        else:
            raise TypeError(
                'Property "masterIpAddress" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def memory(self):
        """int: memory in MegaBytes"""
        return self._memory

    @memory.setter
    def memory(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._memory = value
        else:
            raise TypeError(
                'Property "memory" of type "list<int>" set to wrong type'
            )

    @property
    def modelName(self):
        """ """
        return self._modelName

    @modelName.setter
    def modelName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._modelName = value
        else:
            raise TypeError(
                'Property "modelName" of type "list<str>" set to wrong type'
            )

    @property
    def networkType(self):
        """ """
        return self._networkType

    @networkType.setter
    def networkType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._networkType = value
        else:
            raise TypeError(
                'Property "networkType" of type "list<NetworkTypeEnum>" set t'
                'o wrong type'
            )

    NetworkTypeEnum=["UNKNOWN","INFINIBAND",]
    str(repr(NetworkTypeEnum))  # Prevent optimizer removing enum

    @property
    def numGpus(self):
        """int: number of GPUs in the node"""
        return self._numGpus

    @numGpus.setter
    def numGpus(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._numGpus = value
        else:
            raise TypeError(
                'Property "numGpus" of type "list<int>" set to wrong type'
            )

    @property
    def roleTurnId(self):
        """str: Turn ID of the ACE configuration which resulted in the current
         role. By default this value should be 0"""
        return self._roleTurnId

    @roleTurnId.setter
    def roleTurnId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._roleTurnId = value
        else:
            raise TypeError(
                'Property "roleTurnId" of type "list<str>" set to wrong type'
            )

    @property
    def state(self):
        """ """
        return self._state

    @state.setter
    def state(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._state = value
        else:
            raise TypeError(
                'Property "state" of type "list<StateEnum>" set to wrong type'
            )

    StateEnum=["UNKNOWN","OK","DEGRADED","FAILED","UNDER_MAINTENANCE",]
    str(repr(StateEnum))  # Prevent optimizer removing enum

    @property
    def subNet(self):
        """ """
        return self._subNet

    @subNet.setter
    def subNet(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subNet = value
        else:
            raise TypeError(
                'Property "subNet" of type "list<str>" set to wrong type'
            )

    @property
    def swVersion(self):
        """ """
        return self._swVersion

    @swVersion.setter
    def swVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._swVersion = value
        else:
            raise TypeError(
                'Property "swVersion" of type "list<str>" set to wrong type'
            )

    @property
    def upgradeOnBoot(self):
        """bool: If set to true, this node will update on boot"""
        return self._upgradeOnBoot

    @upgradeOnBoot.setter
    def upgradeOnBoot(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._upgradeOnBoot = value
        else:
            raise TypeError(
                'Property "upgradeOnBoot" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def webSocket(self):
        """WebSocket: object used to show the status of the websocket between 
        node and the cloud"""
        return self._webSocket

    @webSocket.setter
    def webSocket(self, value):
        if value is not None and not isinstance(value, WebSocket):
            value = WebSocket(value)
        if (value is None) or isinstance(value, WebSocket):
            self._webSocket = value
        else:
            raise TypeError(
                'Property "webSocket" of type "list<WebSocket>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._biosVersion is not None:
            result["biosVersion"] = \
                self._biosVersion
        if self._bmcVersion is not None:
            result["bmcVersion"] = \
                self._bmcVersion
        if self._cloudManaged is not None:
            result["cloudManaged"] = \
                self._cloudManaged
        if self._configTurnId is not None:
            result["configTurnId"] = \
                self._configTurnId
        if self._cpuCoresPerSocket is not None:
            result["cpuCoresPerSocket"] = \
                self._cpuCoresPerSocket
        if self._cpuModelName is not None:
            result["cpuModelName"] = \
                self._cpuModelName
        if self._cpuSockets is not None:
            result["cpuSockets"] = \
                self._cpuSockets
        if self._debianRepoURL is not None:
            result["debianRepoURL"] = \
                self._debianRepoURL
        if self._diskSpace is not None:
            result["diskSpace"] = \
                self._diskSpace
        if self._dockerApiVersion is not None:
            result["dockerApiVersion"] = \
                self._dockerApiVersion
        if self._fwVersion is not None:
            result["fwVersion"] = \
                self._fwVersion
        if self._gatewayIp is not None:
            result["gatewayIp"] = \
                self._gatewayIp
        if self._gpuModelName is not None:
            result["gpuModelName"] = \
                self._gpuModelName
        if self._healthStatus is not None:
            result["healthStatus"] = \
                self._healthStatus
        if self._ipAddress is not None:
            result["ipAddress"] = \
                self._ipAddress
        if self._ipmi is not None:
            result["ipmi"] = \
                self._ipmi
        if self._isMarathonLeader is not None:
            result["isMarathonLeader"] = \
                self._isMarathonLeader
        if self._isMaster is not None:
            result["isMaster"] = \
                self._isMaster
        if self._isMesosLeader is not None:
            result["isMesosLeader"] = \
                self._isMesosLeader
        if self._isSchedulerLeader is not None:
            result["isSchedulerLeader"] = \
                self._isSchedulerLeader
        if self._isZooKeeperLeader is not None:
            result["isZooKeeperLeader"] = \
                self._isZooKeeperLeader
        if self._lastBoot is not None:
            result["lastBoot"] = \
                self._lastBoot
        if self._masterIpAddress is not None:
            result["masterIpAddress"] = \
                self._masterIpAddress
        if self._memory is not None:
            result["memory"] = \
                self._memory
        if self._modelName is not None:
            result["modelName"] = \
                self._modelName
        if self._networkType is not None:
            result["networkType"] = \
                self._networkType
        if self._numGpus is not None:
            result["numGpus"] = \
                self._numGpus
        if self._roleTurnId is not None:
            result["roleTurnId"] = \
                self._roleTurnId
        if self._state is not None:
            result["state"] = \
                self._state
        if self._subNet is not None:
            result["subNet"] = \
                self._subNet
        if self._swVersion is not None:
            result["swVersion"] = \
                self._swVersion
        if self._upgradeOnBoot is not None:
            result["upgradeOnBoot"] = \
                self._upgradeOnBoot
        if self._webSocket:
            result["webSocket"] = \
                self._webSocket.toDict() if self._webSocket is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._webSocket is not None): self._webSocket.isValid()
        return True
    

