"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .StorageServiceConfigDetails import StorageServiceConfigDetails

# Unused import over optimization prevention
str(repr(StorageServiceConfigDetails))


if sys.version_info > (3,):
    long = int
    unicode = str

class StorageServiceConfig(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.datasets = (
            None if not fromDict or propDict.get(
                "datasets"
            ) is None
            else propDict["datasets"])
        self.defaultConfig = (
            None if not fromDict or propDict.get(
                "defaultConfig"
            ) is None
            else propDict["defaultConfig"])
        self.resultsets = (
            None if not fromDict or propDict.get(
                "resultsets"
            ) is None
            else propDict["resultsets"])
        self.workspaces = (
            None if not fromDict or propDict.get(
                "workspaces"
            ) is None
            else propDict["workspaces"])

    @property
    def datasets(self):
        """ """
        return self._datasets

    @datasets.setter
    def datasets(self, value):
        if value is not None and not isinstance(value, StorageServiceConfigDetails):
            value = StorageServiceConfigDetails(value)
        if (value is None) or isinstance(value, StorageServiceConfigDetails):
            self._datasets = value
        else:
            raise TypeError(
                'Property "datasets" of type "list<StorageServiceConfigDetail'
                's>" set to wrong type'
            )

    @property
    def defaultConfig(self):
        """ """
        return self._defaultConfig

    @defaultConfig.setter
    def defaultConfig(self, value):
        if value is not None and not isinstance(value, StorageServiceConfigDetails):
            value = StorageServiceConfigDetails(value)
        if (value is None) or isinstance(value, StorageServiceConfigDetails):
            self._defaultConfig = value
        else:
            raise TypeError(
                'Property "defaultConfig" of type "list<StorageServiceConfigD'
                'etails>" set to wrong type'
            )

    @property
    def resultsets(self):
        """ """
        return self._resultsets

    @resultsets.setter
    def resultsets(self, value):
        if value is not None and not isinstance(value, StorageServiceConfigDetails):
            value = StorageServiceConfigDetails(value)
        if (value is None) or isinstance(value, StorageServiceConfigDetails):
            self._resultsets = value
        else:
            raise TypeError(
                'Property "resultsets" of type "list<StorageServiceConfigDeta'
                'ils>" set to wrong type'
            )

    @property
    def workspaces(self):
        """ """
        return self._workspaces

    @workspaces.setter
    def workspaces(self, value):
        if value is not None and not isinstance(value, StorageServiceConfigDetails):
            value = StorageServiceConfigDetails(value)
        if (value is None) or isinstance(value, StorageServiceConfigDetails):
            self._workspaces = value
        else:
            raise TypeError(
                'Property "workspaces" of type "list<StorageServiceConfigDeta'
                'ils>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._datasets:
            result["datasets"] = \
                self._datasets.toDict() if self._datasets is not None else None
        if self._defaultConfig:
            result["defaultConfig"] = \
                self._defaultConfig.toDict() if self._defaultConfig is not None else None
        if self._resultsets:
            result["resultsets"] = \
                self._resultsets.toDict() if self._resultsets is not None else None
        if self._workspaces:
            result["workspaces"] = \
                self._workspaces.toDict() if self._workspaces is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._defaultConfig is None:
            raise ValueError(
                "StorageServiceConfig.defaultConfig doesnt match requirement:" 
                "required: True"
            )
        if (self._datasets is not None): self._datasets.isValid()
        if (self._resultsets is not None): self._resultsets.isValid()
        if (self._workspaces is not None): self._workspaces.isValid()
        if (self._defaultConfig is not None): self._defaultConfig.isValid()
        return True
    

