"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ConfigRequest(object):
    """Object used to update configuration of different components running on 
    the node. As a result of this message, node is expected to send 'NodeS
    tatus' message back to the cloud when configuration is done."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.authToken = (
            None if not fromDict or propDict.get(
                "authToken"
            ) is None
            else propDict["authToken"])
        self.configService = (
            None if not fromDict or propDict.get(
                "configService"
            ) is None
            else propDict["configService"])
        self.configType = (
            None if not fromDict or propDict.get(
                "configType"
            ) is None
            else propDict["configType"])
        self.dataB64 = (
            None if not fromDict or propDict.get(
                "dataB64"
            ) is None
            else propDict["dataB64"])
        self.turnId = (
            None if not fromDict or propDict.get(
                "turnId"
            ) is None
            else propDict["turnId"])

    @property
    def aceId(self):
        """long: Unique ID of the ACE for which this configuration is sent"""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def authToken(self):
        """str: authentication token to be used when downloading configuration
        . If configuration is provided inline, this token can be empty"""
        return self._authToken

    @authToken.setter
    def authToken(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._authToken = value
        else:
            raise TypeError(
                'Property "authToken" of type "list<str>" set to wrong type'
            )

    @property
    def configService(self):
        """ConfigServiceEnum: identifies the service that would need to update
         its configuration"""
        return self._configService

    @configService.setter
    def configService(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._configService = value
        else:
            raise TypeError(
                'Property "configService" of type "list<ConfigServiceEnum>" s'
                'et to wrong type'
            )

    ConfigServiceEnum=["UNKNOWN","NODE_STATUS","MESOS","MARATHON","ZOOKEPER","RINETD","AUTHZ_NODE_TOKEN","HOST_NAME","UPGRADE_ON_BOOT",]
    str(repr(ConfigServiceEnum))  # Prevent optimizer removing enum

    @property
    def configType(self):
        """ConfigTypeEnum: configuration can be provided as part of this reque
        st in data field - i.e. INLINE, or can be downloaded from a UR
        L"""
        return self._configType

    @configType.setter
    def configType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._configType = value
        else:
            raise TypeError(
                'Property "configType" of type "list<ConfigTypeEnum>" set to '
                'wrong type'
            )

    ConfigTypeEnum=["UNKNOWN","INLINE","URL",]
    str(repr(ConfigTypeEnum))  # Prevent optimizer removing enum

    @property
    def dataB64(self):
        """str: this field contains either the whole configuration as a base64
         encoded value, or it contains the URL from where the configur
        ation needs to be downloaded"""
        return self._dataB64

    @dataB64.setter
    def dataB64(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dataB64 = value
        else:
            raise TypeError(
                'Property "dataB64" of type "list<str>" set to wrong type'
            )

    @property
    def turnId(self):
        """str: Turn ID of the ACE configuration which resulted in the current
         config request. By default this value should be 0"""
        return self._turnId

    @turnId.setter
    def turnId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._turnId = value
        else:
            raise TypeError(
                'Property "turnId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._authToken is not None:
            result["authToken"] = \
                self._authToken
        if self._configService is not None:
            result["configService"] = \
                self._configService
        if self._configType is not None:
            result["configType"] = \
                self._configType
        if self._dataB64 is not None:
            result["dataB64"] = \
                self._dataB64
        if self._turnId is not None:
            result["turnId"] = \
                self._turnId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._aceId is None:
            raise ValueError(
                "ConfigRequest.aceId doesnt match requirement:" 
                "required: True"
            )
        if self._configService is None:
            raise ValueError(
                "ConfigRequest.configService doesnt match requirement:" 
                "required: True"
            )
        if (self._dataB64 is not None
            and
            len(self._dataB64) > 65535):
            raise ValueError(
                "ConfigRequest.dataB64: " + str(self._dataB64) + 
                " doesnt match requirement: maxLength: 65535")
        if (self._authToken is not None
            and
            len(self._authToken) > 128):
            raise ValueError(
                "ConfigRequest.authToken: " + str(self._authToken) + 
                " doesnt match requirement: maxLength: 128")
        if self._turnId is None:
            raise ValueError(
                "ConfigRequest.turnId doesnt match requirement:" 
                "required: True"
            )
        return True
    

