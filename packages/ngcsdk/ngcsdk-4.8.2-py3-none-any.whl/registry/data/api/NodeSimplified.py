"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class NodeSimplified(object):
    """Information about the node"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.ipAddress = (
            None if not fromDict or propDict.get(
                "ipAddress"
            ) is None
            else propDict["ipAddress"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.serialNumber = (
            None if not fromDict or propDict.get(
                "serialNumber"
            ) is None
            else propDict["serialNumber"])

    @property
    def ipAddress(self):
        """str: ip address of the node"""
        return self._ipAddress

    @ipAddress.setter
    def ipAddress(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ipAddress = value
        else:
            raise TypeError(
                'Property "ipAddress" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: hostname for the node"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def serialNumber(self):
        """str: serial number of the server, required while registering the se
        rver"""
        return self._serialNumber

    @serialNumber.setter
    def serialNumber(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._serialNumber = value
        else:
            raise TypeError(
                'Property "serialNumber" of type "list<str>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._ipAddress is not None:
            result["ipAddress"] = \
                self._ipAddress
        if self._name is not None:
            result["name"] = \
                self._name
        if self._serialNumber is not None:
            result["serialNumber"] = \
                self._serialNumber
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

