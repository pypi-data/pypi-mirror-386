"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus

# Unused import over optimization prevention
str(repr(RequestStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserKeyResponse(object):
    """response to a request to access key such as docker token"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.cloudNfsKey = (
            None if not fromDict or propDict.get(
                "cloudNfsKey"
            ) is None
            else propDict["cloudNfsKey"])
        self.cloudNfsKeyPwd = (
            None if not fromDict or propDict.get(
                "cloudNfsKeyPwd"
            ) is None
            else propDict["cloudNfsKeyPwd"])
        self.cloudNfsUserName = (
            None if not fromDict or propDict.get(
                "cloudNfsUserName"
            ) is None
            else propDict["cloudNfsUserName"])
        self.key = (
            None if not fromDict or propDict.get(
                "key"
            ) is None
            else propDict["key"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def cloudNfsKey(self):
        """ """
        return self._cloudNfsKey

    @cloudNfsKey.setter
    def cloudNfsKey(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._cloudNfsKey = value
        else:
            raise TypeError(
                'Property "cloudNfsKey" of type "list<str>" set to wrong type'
            )

    @property
    def cloudNfsKeyPwd(self):
        """ """
        return self._cloudNfsKeyPwd

    @cloudNfsKeyPwd.setter
    def cloudNfsKeyPwd(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._cloudNfsKeyPwd = value
        else:
            raise TypeError(
                'Property "cloudNfsKeyPwd" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def cloudNfsUserName(self):
        """ """
        return self._cloudNfsUserName

    @cloudNfsUserName.setter
    def cloudNfsUserName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._cloudNfsUserName = value
        else:
            raise TypeError(
                'Property "cloudNfsUserName" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def key(self):
        """ """
        return self._key

    @key.setter
    def key(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._key = value
        else:
            raise TypeError(
                'Property "key" of type "list<str>" set to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._cloudNfsKey is not None:
            result["cloudNfsKey"] = \
                self._cloudNfsKey
        if self._cloudNfsKeyPwd is not None:
            result["cloudNfsKeyPwd"] = \
                self._cloudNfsKeyPwd
        if self._cloudNfsUserName is not None:
            result["cloudNfsUserName"] = \
                self._cloudNfsUserName
        if self._key is not None:
            result["key"] = \
                self._key
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._key is None:
            raise ValueError(
                "UserKeyResponse.key doesnt match requirement:" 
                "required: True"
            )
        if (self._key is not None
            and
            len(self._key) > 255):
            raise ValueError(
                "UserKeyResponse.key: " + str(self._key) + 
                " doesnt match requirement: maxLength: 255")
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

