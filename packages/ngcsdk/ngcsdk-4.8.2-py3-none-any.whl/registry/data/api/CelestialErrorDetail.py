"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class CelestialErrorDetail(object):
    """ACE is a collection of nodes that can run jobs"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.errorCode = (
            None if not fromDict or propDict.get(
                "errorCode"
            ) is None
            else propDict["errorCode"])
        self.message = (
            None if not fromDict or propDict.get(
                "message"
            ) is None
            else propDict["message"])

    @property
    def errorCode(self):
        """int: Celestial error code"""
        return self._errorCode

    @errorCode.setter
    def errorCode(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._errorCode = value
        else:
            raise TypeError(
                'Property "errorCode" of type "list<int>" set to wrong type'
            )

    @property
    def message(self):
        """str: error message"""
        return self._message

    @message.setter
    def message(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._message = value
        else:
            raise TypeError(
                'Property "message" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._errorCode is not None:
            result["errorCode"] = \
                self._errorCode
        if self._message is not None:
            result["message"] = \
                self._message
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

