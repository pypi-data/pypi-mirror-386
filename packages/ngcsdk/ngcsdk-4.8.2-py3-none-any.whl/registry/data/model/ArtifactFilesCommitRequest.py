"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ArtifactFileCommitMetadata import ArtifactFileCommitMetadata

# Unused import over optimization prevention
str(repr(ArtifactFileCommitMetadata))


if sys.version_info > (3,):
    long = int
    unicode = str

class ArtifactFilesCommitRequest(object):
    """Request to commit the artifact files metadata to database"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.baseVersion = (
            None if not fromDict or propDict.get(
                "baseVersion"
            ) is None
            else propDict["baseVersion"])
        self.files = (
            None if not fromDict or propDict.get(
                "files"
            ) is None
            else [ ArtifactFileCommitMetadata(i)
            for i in propDict["files"] ])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def artifactType(self):
        """str: Artifact type - could be either model or resource"""
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def baseVersion(self):
        """str: Artifact version that the commit is based on"""
        return self._baseVersion

    @baseVersion.setter
    def baseVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._baseVersion = value
        else:
            raise TypeError(
                'Property "baseVersion" of type "list<str>" set to wrong type'
            )

    @property
    def files(self):
        """list: An array of artifact files identified by their base64 encoded
         SHA256 hash"""
        return self._files

    @files.setter
    def files(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._files = value
        else:
            raise TypeError(
                'Property "files" of type "list<ArtifactFileCommitMetadata>" '
                'set to wrong type'
            )

    @property
    def name(self):
        """str: Artifact name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def version(self):
        """str: Artifact version"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._baseVersion is not None:
            result["baseVersion"] = \
                self._baseVersion
        if self._files:
            result["files"] = [
                i.toDict() for i in self._files 
            ] if self._files else []
        if self._name is not None:
            result["name"] = \
                self._name
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "ArtifactFilesCommitRequest.name doesnt match requirement:" 
                "required: True"
            )
        if self._artifactType is None:
            raise ValueError(
                "ArtifactFilesCommitRequest.artifactType doesnt match requirement:" 
                "required: True"
            )
        if self._version is None:
            raise ValueError(
                "ArtifactFilesCommitRequest.version doesnt match requirement:" 
                "required: True"
            )
        if (self._files is not None):
            for obj in self._files:
                if (obj is not None): obj.isValid()
        return True
    

