"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class PaginationInfo(object):
    """Pagination Information"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.index = (
            None if not fromDict or propDict.get(
                "index"
            ) is None
            else propDict["index"])
        self.nextPage = (
            None if not fromDict or propDict.get(
                "nextPage"
            ) is None
            else propDict["nextPage"])
        self.size = (
            None if not fromDict or propDict.get(
                "size"
            ) is None
            else propDict["size"])
        self.totalPages = (
            None if not fromDict or propDict.get(
                "totalPages"
            ) is None
            else propDict["totalPages"])
        self.totalResults = (
            None if not fromDict or propDict.get(
                "totalResults"
            ) is None
            else propDict["totalResults"])

    @property
    def index(self):
        """int: Page index of results"""
        return self._index

    @index.setter
    def index(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._index = value
        else:
            raise TypeError(
                'Property "index" of type "list<int>" set to wrong type'
            )

    @property
    def nextPage(self):
        """str: Serialized pointer to the next results page. Should be used fo
        r fetching next page. Can be empty"""
        return self._nextPage

    @nextPage.setter
    def nextPage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nextPage = value
        else:
            raise TypeError(
                'Property "nextPage" of type "list<str>" set to wrong type'
            )

    @property
    def size(self):
        """int: Number of results in page"""
        return self._size

    @size.setter
    def size(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._size = value
        else:
            raise TypeError(
                'Property "size" of type "list<int>" set to wrong type'
            )

    @property
    def totalPages(self):
        """long: Total number of pages available"""
        return self._totalPages

    @totalPages.setter
    def totalPages(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalPages = value
        else:
            raise TypeError(
                'Property "totalPages" of type "list<long>" set to wrong type'
            )

    @property
    def totalResults(self):
        """long: Total number of results available"""
        return self._totalResults

    @totalResults.setter
    def totalResults(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalResults = value
        else:
            raise TypeError(
                'Property "totalResults" of type "list<long>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._index is not None:
            result["index"] = \
                self._index
        if self._nextPage is not None:
            result["nextPage"] = \
                self._nextPage
        if self._size is not None:
            result["size"] = \
                self._size
        if self._totalPages is not None:
            result["totalPages"] = \
                self._totalPages
        if self._totalResults is not None:
            result["totalResults"] = \
                self._totalResults
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

