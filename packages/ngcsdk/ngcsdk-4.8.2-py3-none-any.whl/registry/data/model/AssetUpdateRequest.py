"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ArtifactAttribute import ArtifactAttribute

# Unused import over optimization prevention
str(repr(ArtifactAttribute))


if sys.version_info > (3,):
    long = int
    unicode = str

class AssetUpdateRequest(object):
    """Request to update an asset"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else [ ArtifactAttribute(i)
            for i in propDict["attributes"] ])
        self.fileName = (
            None if not fromDict or propDict.get(
                "fileName"
            ) is None
            else propDict["fileName"])
        self.mimeType = (
            None if not fromDict or propDict.get(
                "mimeType"
            ) is None
            else propDict["mimeType"])
        self.originUrl = (
            None if not fromDict or propDict.get(
                "originUrl"
            ) is None
            else propDict["originUrl"])
        self.owner = (
            None if not fromDict or propDict.get(
                "owner"
            ) is None
            else propDict["owner"])
        self.sizeInBytes = (
            None if not fromDict or propDict.get(
                "sizeInBytes"
            ) is None
            else propDict["sizeInBytes"])

    @property
    def attributes(self):
        """list: Attribute key/value pairs"""
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<ArtifactAttribute>" set '
                'to wrong type'
            )

    @property
    def fileName(self):
        """str: Asset file name"""
        return self._fileName

    @fileName.setter
    def fileName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fileName = value
        else:
            raise TypeError(
                'Property "fileName" of type "list<str>" set to wrong type'
            )

    @property
    def mimeType(self):
        """str: MIME type"""
        return self._mimeType

    @mimeType.setter
    def mimeType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mimeType = value
        else:
            raise TypeError(
                'Property "mimeType" of type "list<str>" set to wrong type'
            )

    @property
    def originUrl(self):
        """str: Asset origin URL"""
        return self._originUrl

    @originUrl.setter
    def originUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._originUrl = value
        else:
            raise TypeError(
                'Property "originUrl" of type "list<str>" set to wrong type'
            )

    @property
    def owner(self):
        """str: Owner of asset"""
        return self._owner

    @owner.setter
    def owner(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._owner = value
        else:
            raise TypeError(
                'Property "owner" of type "list<str>" set to wrong type'
            )

    @property
    def sizeInBytes(self):
        """long: Size in bytes"""
        return self._sizeInBytes

    @sizeInBytes.setter
    def sizeInBytes(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._sizeInBytes = value
        else:
            raise TypeError(
                'Property "sizeInBytes" of type "list<long>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._attributes:
            result["attributes"] = [
                i.toDict() for i in self._attributes 
            ] if self._attributes else []
        if self._fileName is not None:
            result["fileName"] = \
                self._fileName
        if self._mimeType is not None:
            result["mimeType"] = \
                self._mimeType
        if self._originUrl is not None:
            result["originUrl"] = \
                self._originUrl
        if self._owner is not None:
            result["owner"] = \
                self._owner
        if self._sizeInBytes is not None:
            result["sizeInBytes"] = \
                self._sizeInBytes
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._originUrl is not None
            and
            len(self._originUrl) > 2000):
            raise ValueError(
                "AssetUpdateRequest.originUrl: " + str(self._originUrl) + 
                " doesnt match requirement: maxLength: 2000")
        if (self._originUrl is not None
            and
            not re.match(
                r"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0"
                "-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)"
                "+$",
                 self._originUrl)):
            raise ValueError(
                "AssetUpdateRequest.originUrl: " + str(self._originUrl) + 
                " doesnt match requirement: pattern: ^https?:\/\/(www\.)?[-a-"
                "zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,"
                "6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)+$")
        if self._fileName is None:
            raise ValueError(
                "AssetUpdateRequest.fileName doesnt match requirement:" 
                "required: True"
            )
        if (self._fileName is not None
            and
            len(self._fileName) > 255):
            raise ValueError(
                "AssetUpdateRequest.fileName: " + str(self._fileName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._attributes is not None):
            for obj in self._attributes:
                if (obj is not None): obj.isValid()
        return True
    

