"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ArtifactTypeEnum import ArtifactTypeEnum

# Unused import over optimization prevention
str(repr(ArtifactTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class ArtifactEvent(object):
    """This event in the topic means that some change happened to the artifact
    """
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.eventType = (
            None if not fromDict or propDict.get(
                "eventType"
            ) is None
            else propDict["eventType"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.namespace = (
            None if not fromDict or propDict.get(
                "namespace"
            ) is None
            else propDict["namespace"])

    @property
    def artifactType(self):
        """ArtifactTypeEnum: Artifact type"""
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<ArtifactTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def eventType(self):
        """EventTypeEnum: Artifact event type"""
        return self._eventType

    @eventType.setter
    def eventType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._eventType = value
        else:
            raise TypeError(
                'Property "eventType" of type "list<EventTypeEnum>" set to wr'
                'ong type'
            )

    EventTypeEnum=["CREATED","UPDATED","DELETED","UNPUBLISHED",]
    str(repr(EventTypeEnum))  # Prevent optimizer removing enum

    @property
    def name(self):
        """str: Artifact name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def namespace(self):
        """str: Artifact namespace"""
        return self._namespace

    @namespace.setter
    def namespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._namespace = value
        else:
            raise TypeError(
                'Property "namespace" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._eventType is not None:
            result["eventType"] = \
                self._eventType
        if self._name is not None:
            result["name"] = \
                self._name
        if self._namespace is not None:
            result["namespace"] = \
                self._namespace
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._namespace is None:
            raise ValueError(
                "ArtifactEvent.namespace doesnt match requirement:" 
                "required: True"
            )
        if (self._namespace is not None
            and
            len(self._namespace) > 255):
            raise ValueError(
                "ArtifactEvent.namespace: " + str(self._namespace) + 
                " doesnt match requirement: maxLength: 255")
        if self._name is None:
            raise ValueError(
                "ArtifactEvent.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) > 255):
            raise ValueError(
                "ArtifactEvent.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 255")
        if self._artifactType is None:
            raise ValueError(
                "ArtifactEvent.artifactType doesnt match requirement:" 
                "required: True"
            )
        if self._eventType is None:
            raise ValueError(
                "ArtifactEvent.eventType doesnt match requirement:" 
                "required: True"
            )
        return True
    

