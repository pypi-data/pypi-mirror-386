"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .LicenseMetadata import LicenseMetadata
from .ApplicationType import ApplicationTypeEnum
from .Dataset import Dataset
from .PrecisionType import PrecisionTypeEnum
from .FrameworkType import FrameworkTypeEnum

# Unused import over optimization prevention
str(repr(LicenseMetadata))
str(repr(PrecisionTypeEnum))
str(repr(Dataset))
str(repr(FrameworkTypeEnum))
str(repr(ApplicationTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class RecipeCreateRequest(object):
    """Request to create a new recipe"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.advanced = (
            None if not fromDict or propDict.get(
                "advanced"
            ) is None
            else propDict["advanced"])
        self.application = (
            None if not fromDict or propDict.get(
                "application"
            ) is None
            else propDict["application"])
        self.builtBy = (
            None if not fromDict or propDict.get(
                "builtBy"
            ) is None
            else propDict["builtBy"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.labelsV2 = (
            None if not fromDict or propDict.get(
                "labelsV2"
            ) is None
            else propDict["labelsV2"])
        self.licenseTerms = (
            None if not fromDict or propDict.get(
                "licenseTerms"
            ) is None
            else [ LicenseMetadata(i)
            for i in propDict["licenseTerms"] ])
        self.logo = (
            None if not fromDict or propDict.get(
                "logo"
            ) is None
            else propDict["logo"])
        self.modelFormat = (
            None if not fromDict or propDict.get(
                "modelFormat"
            ) is None
            else propDict["modelFormat"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.performance = (
            None if not fromDict or propDict.get(
                "performance"
            ) is None
            else propDict["performance"])
        self.precision = (
            None if not fromDict or propDict.get(
                "precision"
            ) is None
            else propDict["precision"])
        self.publicDatasetUsed = (
            None if not fromDict or propDict.get(
                "publicDatasetUsed"
            ) is None
            else propDict["publicDatasetUsed"])
        self.publisher = (
            None if not fromDict or propDict.get(
                "publisher"
            ) is None
            else propDict["publisher"])
        self.quickStartGuide = (
            None if not fromDict or propDict.get(
                "quickStartGuide"
            ) is None
            else propDict["quickStartGuide"])
        self.setup = (
            None if not fromDict or propDict.get(
                "setup"
            ) is None
            else propDict["setup"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])
        self.trainingFramework = (
            None if not fromDict or propDict.get(
                "trainingFramework"
            ) is None
            else propDict["trainingFramework"])

    @property
    def advanced(self):
        """str: Text for describing advanced information"""
        return self._advanced

    @advanced.setter
    def advanced(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._advanced = value
        else:
            raise TypeError(
                'Property "advanced" of type "list<str>" set to wrong type'
            )

    @property
    def application(self):
        """ """
        return self._application

    @application.setter
    def application(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._application = value
        else:
            raise TypeError(
                'Property "application" of type "list<ApplicationTypeEnum>" s'
                'et to wrong type'
            )

    @property
    def builtBy(self):
        """str: organization that built the recipe"""
        return self._builtBy

    @builtBy.setter
    def builtBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._builtBy = value
        else:
            raise TypeError(
                'Property "builtBy" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the recipe"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def labels(self):
        """ """
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def labelsV2(self):
        """ """
        return self._labelsV2

    @labelsV2.setter
    def labelsV2(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labelsV2 = value
        else:
            raise TypeError(
                'Property "labelsV2" of type "list<str>" set to wrong type'
            )

    @property
    def licenseTerms(self):
        """list: License information for the recipe"""
        return self._licenseTerms

    @licenseTerms.setter
    def licenseTerms(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._licenseTerms = value
        else:
            raise TypeError(
                'Property "licenseTerms" of type "list<LicenseMetadata>" set '
                'to wrong type'
            )

    @property
    def logo(self):
        """str: URL for the logo image"""
        return self._logo

    @logo.setter
    def logo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logo = value
        else:
            raise TypeError(
                'Property "logo" of type "list<str>" set to wrong type'
            )

    @property
    def modelFormat(self):
        """str: Format of the model this recipe produces"""
        return self._modelFormat

    @modelFormat.setter
    def modelFormat(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._modelFormat = value
        else:
            raise TypeError(
                'Property "modelFormat" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Unique name of the recipe"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def performance(self):
        """str: Text describing performance of the recipe results"""
        return self._performance

    @performance.setter
    def performance(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._performance = value
        else:
            raise TypeError(
                'Property "performance" of type "list<str>" set to wrong type'
            )

    @property
    def precision(self):
        """ """
        return self._precision

    @precision.setter
    def precision(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._precision = value
        else:
            raise TypeError(
                'Property "precision" of type "list<PrecisionTypeEnum>" set t'
                'o wrong type'
            )

    @property
    def publicDatasetUsed(self):
        """ """
        return self._publicDatasetUsed

    @publicDatasetUsed.setter
    def publicDatasetUsed(self, value):
        if value is not None and not isinstance(value, Dataset):
            value = Dataset(value)
        if (value is None) or isinstance(value, Dataset):
            self._publicDatasetUsed = value
        else:
            raise TypeError(
                'Property "publicDatasetUsed" of type "list<Dataset>" set to '
                'wrong type'
            )

    @property
    def publisher(self):
        """str: organization that published the recipe"""
        return self._publisher

    @publisher.setter
    def publisher(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._publisher = value
        else:
            raise TypeError(
                'Property "publisher" of type "list<str>" set to wrong type'
            )

    @property
    def quickStartGuide(self):
        """str: Text with a guide to getting started"""
        return self._quickStartGuide

    @quickStartGuide.setter
    def quickStartGuide(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._quickStartGuide = value
        else:
            raise TypeError(
                'Property "quickStartGuide" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def setup(self):
        """str: Text describing recipe setup"""
        return self._setup

    @setup.setter
    def setup(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._setup = value
        else:
            raise TypeError(
                'Property "setup" of type "list<str>" set to wrong type'
            )

    @property
    def shortDescription(self):
        """str: Short description of the recipe"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def trainingFramework(self):
        """ """
        return self._trainingFramework

    @trainingFramework.setter
    def trainingFramework(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._trainingFramework = value
        else:
            raise TypeError(
                'Property "trainingFramework" of type "list<FrameworkTypeEnum'
                '>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._advanced is not None:
            result["advanced"] = \
                self._advanced
        if self._application is not None:
            result["application"] = \
                self._application
        if self._builtBy is not None:
            result["builtBy"] = \
                self._builtBy
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._labelsV2 is not None:
            result["labelsV2"] = \
                self._labelsV2
        if self._licenseTerms:
            result["licenseTerms"] = [
                i.toDict() for i in self._licenseTerms 
            ] if self._licenseTerms else []
        if self._logo is not None:
            result["logo"] = \
                self._logo
        if self._modelFormat is not None:
            result["modelFormat"] = \
                self._modelFormat
        if self._name is not None:
            result["name"] = \
                self._name
        if self._performance is not None:
            result["performance"] = \
                self._performance
        if self._precision is not None:
            result["precision"] = \
                self._precision
        if self._publicDatasetUsed:
            result["publicDatasetUsed"] = \
                self._publicDatasetUsed.toDict() if self._publicDatasetUsed is not None else None
        if self._publisher is not None:
            result["publisher"] = \
                self._publisher
        if self._quickStartGuide is not None:
            result["quickStartGuide"] = \
                self._quickStartGuide
        if self._setup is not None:
            result["setup"] = \
                self._setup
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        if self._trainingFramework is not None:
            result["trainingFramework"] = \
                self._trainingFramework
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "RecipeCreateRequest.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "RecipeCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "RecipeCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if (self._name is not None
            and
            not re.match(
                r"^[a-z][a-z\d._-]*$",
                 self._name)):
            raise ValueError(
                "RecipeCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-z][a-z\d._-]*$")
        if self._trainingFramework is None:
            raise ValueError(
                "RecipeCreateRequest.trainingFramework doesnt match requirement:" 
                "required: True"
            )
        if self._modelFormat is None:
            raise ValueError(
                "RecipeCreateRequest.modelFormat doesnt match requirement:" 
                "required: True"
            )
        if (self._modelFormat is not None
            and
            len(self._modelFormat) > 255):
            raise ValueError(
                "RecipeCreateRequest.modelFormat: " + str(self._modelFormat) + 
                " doesnt match requirement: maxLength: 255")
        if self._publicDatasetUsed is None:
            raise ValueError(
                "RecipeCreateRequest.publicDatasetUsed doesnt match requirement:" 
                "required: True"
            )
        if self._shortDescription is None:
            raise ValueError(
                "RecipeCreateRequest.shortDescription doesnt match requirement:" 
                "required: True"
            )
        if (self._shortDescription is not None
            and
            len(self._shortDescription) > 255):
            raise ValueError(
                "RecipeCreateRequest.shortDescription: " + str(self._shortDescription) + 
                " doesnt match requirement: maxLength: 255")
        if (self._displayName is not None
            and
            len(self._displayName) < 2):
            raise ValueError(
                "RecipeCreateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: minLength: 2")
        if (self._displayName is not None
            and
            len(self._displayName) > 64):
            raise ValueError(
                "RecipeCreateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 64")
        if self._precision is None:
            raise ValueError(
                "RecipeCreateRequest.precision doesnt match requirement:" 
                "required: True"
            )
        if self._application is None:
            raise ValueError(
                "RecipeCreateRequest.application doesnt match requirement:" 
                "required: True"
            )
        if (self._logo is not None
            and
            len(self._logo) > 255):
            raise ValueError(
                "RecipeCreateRequest.logo: " + str(self._logo) + 
                " doesnt match requirement: maxLength: 255")
        if (self._builtBy is not None
            and
            len(self._builtBy) > 255):
            raise ValueError(
                "RecipeCreateRequest.builtBy: " + str(self._builtBy) + 
                " doesnt match requirement: maxLength: 255")
        if (self._publisher is not None
            and
            len(self._publisher) > 255):
            raise ValueError(
                "RecipeCreateRequest.publisher: " + str(self._publisher) + 
                " doesnt match requirement: maxLength: 255")
        if (self._publicDatasetUsed is not None): self._publicDatasetUsed.isValid()
        if (self._licenseTerms is not None):
            for obj in self._licenseTerms:
                if (obj is not None): obj.isValid()
        return True
    

