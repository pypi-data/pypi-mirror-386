"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .StatusCode import StatusCodeEnum

# Unused import over optimization prevention
str(repr(StatusCodeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class RequestStatus(object):
    """Request status information"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.requestId = (
            None if not fromDict or propDict.get(
                "requestId"
            ) is None
            else propDict["requestId"])
        self.serverId = (
            None if not fromDict or propDict.get(
                "serverId"
            ) is None
            else propDict["serverId"])
        self.statusCode = (
            None if not fromDict or propDict.get(
                "statusCode"
            ) is None
            else propDict["statusCode"])
        self.statusDescription = (
            None if not fromDict or propDict.get(
                "statusDescription"
            ) is None
            else propDict["statusDescription"])

    @property
    def requestId(self):
        """str: Request ID"""
        return self._requestId

    @requestId.setter
    def requestId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requestId = value
        else:
            raise TypeError(
                'Property "requestId" of type "list<str>" set to wrong type'
            )

    @property
    def serverId(self):
        """str: Server ID"""
        return self._serverId

    @serverId.setter
    def serverId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._serverId = value
        else:
            raise TypeError(
                'Property "serverId" of type "list<str>" set to wrong type'
            )

    @property
    def statusCode(self):
        """StatusCodeEnum: Describes response status reported by the server.
        """
        return self._statusCode

    @statusCode.setter
    def statusCode(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._statusCode = value
        else:
            raise TypeError(
                'Property "statusCode" of type "list<StatusCodeEnum>" set to '
                'wrong type'
            )

    @property
    def statusDescription(self):
        """str: Status description"""
        return self._statusDescription

    @statusDescription.setter
    def statusDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._statusDescription = value
        else:
            raise TypeError(
                'Property "statusDescription" of type "list<str>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._requestId is not None:
            result["requestId"] = \
                self._requestId
        if self._serverId is not None:
            result["serverId"] = \
                self._serverId
        if self._statusCode is not None:
            result["statusCode"] = \
                self._statusCode
        if self._statusDescription is not None:
            result["statusDescription"] = \
                self._statusDescription
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

