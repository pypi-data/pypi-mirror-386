"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class EncryptionKey(object):
    """Customer Managed Key shard configuration for the model"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.encryptionKeyId = (
            None if not fromDict or propDict.get(
                "encryptionKeyId"
            ) is None
            else propDict["encryptionKeyId"])
        self.useExistingKey = (
            None if not fromDict or propDict.get(
                "useExistingKey"
            ) is None
            else propDict["useExistingKey"])

    @property
    def description(self):
        """str: Description for a new customer key shard"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def encryptionKeyId(self):
        """str: ID of the existing customer key shard to use"""
        return self._encryptionKeyId

    @encryptionKeyId.setter
    def encryptionKeyId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._encryptionKeyId = value
        else:
            raise TypeError(
                'Property "encryptionKeyId" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def useExistingKey(self):
        """bool: Whether to use an existing customer key shard or should a new
         one be created"""
        return self._useExistingKey

    @useExistingKey.setter
    def useExistingKey(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._useExistingKey = value
        else:
            raise TypeError(
                'Property "useExistingKey" of type "list<bool>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._description is not None:
            result["description"] = \
                self._description
        if self._encryptionKeyId is not None:
            result["encryptionKeyId"] = \
                self._encryptionKeyId
        if self._useExistingKey is not None:
            result["useExistingKey"] = \
                self._useExistingKey
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._useExistingKey is None:
            raise ValueError(
                "EncryptionKey.useExistingKey doesnt match requirement:" 
                "required: True"
            )
        return True
    

