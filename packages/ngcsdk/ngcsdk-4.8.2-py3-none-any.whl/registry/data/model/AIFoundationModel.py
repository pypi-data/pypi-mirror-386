"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AIFoundationModel(object):
    """Get AI Playground Response"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.artifactName = (
            None if not fromDict or propDict.get(
                "artifactName"
            ) is None
            else propDict["artifactName"])
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else propDict["attributes"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.namespace = (
            None if not fromDict or propDict.get(
                "namespace"
            ) is None
            else propDict["namespace"])
        self.nvcfFunctionId = (
            None if not fromDict or propDict.get(
                "nvcfFunctionId"
            ) is None
            else propDict["nvcfFunctionId"])
        self.openAPISpec = (
            None if not fromDict or propDict.get(
                "openAPISpec"
            ) is None
            else propDict["openAPISpec"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def artifactName(self):
        """str: Unique name of the model"""
        return self._artifactName

    @artifactName.setter
    def artifactName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._artifactName = value
        else:
            raise TypeError(
                'Property "artifactName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def attributes(self):
        """str: Metadata json string"""
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<str>" set to wrong type'
            )

    @property
    def createdDate(self):
        """str: Creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def namespace(self):
        """str: org/team of the model"""
        return self._namespace

    @namespace.setter
    def namespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._namespace = value
        else:
            raise TypeError(
                'Property "namespace" of type "list<str>" set to wrong type'
            )

    @property
    def nvcfFunctionId(self):
        """str: NVCF function id for the model playground"""
        return self._nvcfFunctionId

    @nvcfFunctionId.setter
    def nvcfFunctionId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nvcfFunctionId = value
        else:
            raise TypeError(
                'Property "nvcfFunctionId" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def openAPISpec(self):
        """str: OpenAPI specification for this model"""
        return self._openAPISpec

    @openAPISpec.setter
    def openAPISpec(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._openAPISpec = value
        else:
            raise TypeError(
                'Property "openAPISpec" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Updated date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._artifactName is not None:
            result["artifactName"] = \
                self._artifactName
        if self._attributes is not None:
            result["attributes"] = \
                self._attributes
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._namespace is not None:
            result["namespace"] = \
                self._namespace
        if self._nvcfFunctionId is not None:
            result["nvcfFunctionId"] = \
                self._nvcfFunctionId
        if self._openAPISpec is not None:
            result["openAPISpec"] = \
                self._openAPISpec
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "AIFoundationModel.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._updatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._updatedDate)):
            raise ValueError(
                "AIFoundationModel.updatedDate: " + str(self._updatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        return True
    

