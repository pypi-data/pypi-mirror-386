"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .DeploymentStorageParameters import DeploymentStorageParameters
from .DeploymentGpuParameters import DeploymentGpuParameters
from .DeploymentMemoryParameters import DeploymentMemoryParameters
from .DeploymentArtifactParameters import DeploymentArtifactParameters
from .DeploymentCpuParameters import DeploymentCpuParameters

# Unused import over optimization prevention
str(repr(DeploymentArtifactParameters))
str(repr(DeploymentCpuParameters))
str(repr(DeploymentGpuParameters))
str(repr(DeploymentStorageParameters))
str(repr(DeploymentMemoryParameters))


if sys.version_info > (3,):
    long = int
    unicode = str

class DeploymentParameters(object):
    """Deployment Artifact Parameters object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.container = (
            None if not fromDict or propDict.get(
                "container"
            ) is None
            else propDict["container"])
        self.cpu = (
            None if not fromDict or propDict.get(
                "cpu"
            ) is None
            else propDict["cpu"])
        self.csp = (
            None if not fromDict or propDict.get(
                "csp"
            ) is None
            else propDict["csp"])
        self.gpu = (
            None if not fromDict or propDict.get(
                "gpu"
            ) is None
            else propDict["gpu"])
        self.memory = (
            None if not fromDict or propDict.get(
                "memory"
            ) is None
            else propDict["memory"])
        self.model = (
            None if not fromDict or propDict.get(
                "model"
            ) is None
            else propDict["model"])
        self.resource = (
            None if not fromDict or propDict.get(
                "resource"
            ) is None
            else propDict["resource"])
        self.storage = (
            None if not fromDict or propDict.get(
                "storage"
            ) is None
            else propDict["storage"])

    @property
    def container(self):
        """DeploymentArtifactParameters: Deployment Artifact Parameters object
        """
        return self._container

    @container.setter
    def container(self, value):
        if value is not None and not isinstance(value, DeploymentArtifactParameters):
            value = DeploymentArtifactParameters(value)
        if (value is None) or isinstance(value, DeploymentArtifactParameters):
            self._container = value
        else:
            raise TypeError(
                'Property "container" of type "list<DeploymentArtifactParamet'
                'ers>" set to wrong type'
            )

    @property
    def cpu(self):
        """DeploymentCpuParameters: Deployment CPU Parameters object"""
        return self._cpu

    @cpu.setter
    def cpu(self, value):
        if value is not None and not isinstance(value, DeploymentCpuParameters):
            value = DeploymentCpuParameters(value)
        if (value is None) or isinstance(value, DeploymentCpuParameters):
            self._cpu = value
        else:
            raise TypeError(
                'Property "cpu" of type "list<DeploymentCpuParameters>" set t'
                'o wrong type'
            )

    @property
    def csp(self):
        """str: Cloud Service Provider name"""
        return self._csp

    @csp.setter
    def csp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._csp = value
        else:
            raise TypeError(
                'Property "csp" of type "list<str>" set to wrong type'
            )

    @property
    def gpu(self):
        """DeploymentGpuParameters: Deployment GPU Parameters object"""
        return self._gpu

    @gpu.setter
    def gpu(self, value):
        if value is not None and not isinstance(value, DeploymentGpuParameters):
            value = DeploymentGpuParameters(value)
        if (value is None) or isinstance(value, DeploymentGpuParameters):
            self._gpu = value
        else:
            raise TypeError(
                'Property "gpu" of type "list<DeploymentGpuParameters>" set t'
                'o wrong type'
            )

    @property
    def memory(self):
        """DeploymentMemoryParameters: Deployment Memory Parameters object"""
        return self._memory

    @memory.setter
    def memory(self, value):
        if value is not None and not isinstance(value, DeploymentMemoryParameters):
            value = DeploymentMemoryParameters(value)
        if (value is None) or isinstance(value, DeploymentMemoryParameters):
            self._memory = value
        else:
            raise TypeError(
                'Property "memory" of type "list<DeploymentMemoryParameters>"'
                ' set to wrong type'
            )

    @property
    def model(self):
        """DeploymentArtifactParameters: Deployment Artifact Parameters object
        """
        return self._model

    @model.setter
    def model(self, value):
        if value is not None and not isinstance(value, DeploymentArtifactParameters):
            value = DeploymentArtifactParameters(value)
        if (value is None) or isinstance(value, DeploymentArtifactParameters):
            self._model = value
        else:
            raise TypeError(
                'Property "model" of type "list<DeploymentArtifactParameters>'
                '" set to wrong type'
            )

    @property
    def resource(self):
        """DeploymentArtifactParameters: Deployment Artifact Parameters object
        """
        return self._resource

    @resource.setter
    def resource(self, value):
        if value is not None and not isinstance(value, DeploymentArtifactParameters):
            value = DeploymentArtifactParameters(value)
        if (value is None) or isinstance(value, DeploymentArtifactParameters):
            self._resource = value
        else:
            raise TypeError(
                'Property "resource" of type "list<DeploymentArtifactParamete'
                'rs>" set to wrong type'
            )

    @property
    def storage(self):
        """DeploymentStorageParameters: Deployment Storage Parameters object
        """
        return self._storage

    @storage.setter
    def storage(self, value):
        if value is not None and not isinstance(value, DeploymentStorageParameters):
            value = DeploymentStorageParameters(value)
        if (value is None) or isinstance(value, DeploymentStorageParameters):
            self._storage = value
        else:
            raise TypeError(
                'Property "storage" of type "list<DeploymentStorageParameters'
                '>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._container:
            result["container"] = \
                self._container.toDict() if self._container is not None else None
        if self._cpu:
            result["cpu"] = \
                self._cpu.toDict() if self._cpu is not None else None
        if self._csp is not None:
            result["csp"] = \
                self._csp
        if self._gpu:
            result["gpu"] = \
                self._gpu.toDict() if self._gpu is not None else None
        if self._memory:
            result["memory"] = \
                self._memory.toDict() if self._memory is not None else None
        if self._model:
            result["model"] = \
                self._model.toDict() if self._model is not None else None
        if self._resource:
            result["resource"] = \
                self._resource.toDict() if self._resource is not None else None
        if self._storage:
            result["storage"] = \
                self._storage.toDict() if self._storage is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._cpu is not None): self._cpu.isValid()
        if (self._gpu is not None): self._gpu.isValid()
        if (self._memory is not None): self._memory.isValid()
        if (self._storage is not None): self._storage.isValid()
        if (self._container is not None): self._container.isValid()
        if (self._model is not None): self._model.isValid()
        if (self._resource is not None): self._resource.isValid()
        return True
    

