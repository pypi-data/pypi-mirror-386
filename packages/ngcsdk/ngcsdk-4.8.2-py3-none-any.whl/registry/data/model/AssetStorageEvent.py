"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Asset import Asset

# Unused import over optimization prevention
str(repr(Asset))


if sys.version_info > (3,):
    long = int
    unicode = str

class AssetStorageEvent(object):
    """This event in the topic means that some change happened to the asset st
    orage object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.asset = (
            None if not fromDict or propDict.get(
                "asset"
            ) is None
            else propDict["asset"])
        self.eventType = (
            None if not fromDict or propDict.get(
                "eventType"
            ) is None
            else propDict["eventType"])
        self.timestamp = (
            None if not fromDict or propDict.get(
                "timestamp"
            ) is None
            else propDict["timestamp"])

    @property
    def asset(self):
        """Asset: Asset object"""
        return self._asset

    @asset.setter
    def asset(self, value):
        if value is not None and not isinstance(value, Asset):
            value = Asset(value)
        if (value is None) or isinstance(value, Asset):
            self._asset = value
        else:
            raise TypeError(
                'Property "asset" of type "list<Asset>" set to wrong type'
            )

    @property
    def eventType(self):
        """EventTypeEnum: Asset storage event type"""
        return self._eventType

    @eventType.setter
    def eventType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._eventType = value
        else:
            raise TypeError(
                'Property "eventType" of type "list<EventTypeEnum>" set to wr'
                'ong type'
            )

    EventTypeEnum=["ASSET_OBJECT_CREATED","ASSET_OBJECT_DELETED",]
    str(repr(EventTypeEnum))  # Prevent optimizer removing enum

    @property
    def timestamp(self):
        """str: Timestamp in ISO-8601 format"""
        return self._timestamp

    @timestamp.setter
    def timestamp(self, value):
        if value is not None and not isinstance(value, str):
            value = str(value)
        if (value is None) or isinstance(value, str):
            self._timestamp = value
        else:
            raise TypeError(
                'Property "timestamp" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._asset:
            result["asset"] = \
                self._asset.toDict() if self._asset is not None else None
        if self._eventType is not None:
            result["eventType"] = \
                self._eventType
        if self._timestamp is not None:
            result["timestamp"] = \
                self._timestamp
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._asset is None:
            raise ValueError(
                "AssetStorageEvent.asset doesnt match requirement:" 
                "required: True"
            )
        if self._timestamp is None:
            raise ValueError(
                "AssetStorageEvent.timestamp doesnt match requirement:" 
                "required: True"
            )
        if (self._timestamp is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._timestamp)):
            raise ValueError(
                "AssetStorageEvent.timestamp: " + str(self._timestamp) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if self._eventType is None:
            raise ValueError(
                "AssetStorageEvent.eventType doesnt match requirement:" 
                "required: True"
            )
        if (self._asset is not None): self._asset.isValid()
        return True
    

