"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ArtifactAttribute import ArtifactAttribute
from .CustomMetricGroup import CustomMetricGroup
from .NvcfDeploymentSpecification import NvcfDeploymentSpecification
from .NvcfContainerConfiguration import NvcfContainerConfiguration

# Unused import over optimization prevention
str(repr(NvcfDeploymentSpecification))
str(repr(ArtifactAttribute))
str(repr(NvcfContainerConfiguration))
str(repr(CustomMetricGroup))


if sys.version_info > (3,):
    long = int
    unicode = str

class ModelVersionCreateRequest(object):
    """Request to create a new model version"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accuracyReached = (
            None if not fromDict or propDict.get(
                "accuracyReached"
            ) is None
            else propDict["accuracyReached"])
        self.batchSize = (
            None if not fromDict or propDict.get(
                "batchSize"
            ) is None
            else propDict["batchSize"])
        self.customMetrics = (
            None if not fromDict or propDict.get(
                "customMetrics"
            ) is None
            else [ CustomMetricGroup(i)
            for i in propDict["customMetrics"] ])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.gpuModel = (
            None if not fromDict or propDict.get(
                "gpuModel"
            ) is None
            else propDict["gpuModel"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.memoryFootprint = (
            None if not fromDict or propDict.get(
                "memoryFootprint"
            ) is None
            else propDict["memoryFootprint"])
        self.numberOfEpochs = (
            None if not fromDict or propDict.get(
                "numberOfEpochs"
            ) is None
            else propDict["numberOfEpochs"])
        self.nvcfContainerConfiguration = (
            None if not fromDict or propDict.get(
                "nvcfContainerConfiguration"
            ) is None
            else propDict["nvcfContainerConfiguration"])
        self.nvcfDeploymentSpecification = (
            None if not fromDict or propDict.get(
                "nvcfDeploymentSpecification"
            ) is None
            else propDict["nvcfDeploymentSpecification"])
        self.otherContents = (
            None if not fromDict or propDict.get(
                "otherContents"
            ) is None
            else [ ArtifactAttribute(i)
            for i in propDict["otherContents"] ])
        self.ownerName = (
            None if not fromDict or propDict.get(
                "ownerName"
            ) is None
            else propDict["ownerName"])
        self.versionId = (
            None if not fromDict or propDict.get(
                "versionId"
            ) is None
            else propDict["versionId"])

    @property
    def accuracyReached(self):
        """float: Accuracy this model reached"""
        return self._accuracyReached

    @accuracyReached.setter
    def accuracyReached(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._accuracyReached = value
        else:
            raise TypeError(
                'Property "accuracyReached" of type "list<float>" set to wron'
                'g type'
            )

    @property
    def batchSize(self):
        """long: Batch size this model was trained with"""
        return self._batchSize

    @batchSize.setter
    def batchSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._batchSize = value
        else:
            raise TypeError(
                'Property "batchSize" of type "list<long>" set to wrong type'
            )

    @property
    def customMetrics(self):
        """list: Custom Metrics key/value pairs"""
        return self._customMetrics

    @customMetrics.setter
    def customMetrics(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._customMetrics = value
        else:
            raise TypeError(
                'Property "customMetrics" of type "list<CustomMetricGroup>" s'
                'et to wrong type'
            )

    @property
    def description(self):
        """str: Description of the model version"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def gpuModel(self):
        """str: GPU model and memory"""
        return self._gpuModel

    @gpuModel.setter
    def gpuModel(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuModel = value
        else:
            raise TypeError(
                'Property "gpuModel" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """long: Deprecated: Please use version instead. Unique ID of the vers
        ion"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def memoryFootprint(self):
        """str: Model size/memory footprint for inference"""
        return self._memoryFootprint

    @memoryFootprint.setter
    def memoryFootprint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._memoryFootprint = value
        else:
            raise TypeError(
                'Property "memoryFootprint" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def numberOfEpochs(self):
        """long: Number of epochs this model trained"""
        return self._numberOfEpochs

    @numberOfEpochs.setter
    def numberOfEpochs(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._numberOfEpochs = value
        else:
            raise TypeError(
                'Property "numberOfEpochs" of type "list<long>" set to wrong '
                'type'
            )

    @property
    def nvcfContainerConfiguration(self):
        """NvcfContainerConfiguration: NVCF container configuration parameters
        """
        return self._nvcfContainerConfiguration

    @nvcfContainerConfiguration.setter
    def nvcfContainerConfiguration(self, value):
        if value is not None and not isinstance(value, NvcfContainerConfiguration):
            value = NvcfContainerConfiguration(value)
        if (value is None) or isinstance(value, NvcfContainerConfiguration):
            self._nvcfContainerConfiguration = value
        else:
            raise TypeError(
                'Property "nvcfContainerConfiguration" of type "list<NvcfCont'
                'ainerConfiguration>" set to wrong type'
            )

    @property
    def nvcfDeploymentSpecification(self):
        """NvcfDeploymentSpecification: NVCF deployment specification"""
        return self._nvcfDeploymentSpecification

    @nvcfDeploymentSpecification.setter
    def nvcfDeploymentSpecification(self, value):
        if value is not None and not isinstance(value, NvcfDeploymentSpecification):
            value = NvcfDeploymentSpecification(value)
        if (value is None) or isinstance(value, NvcfDeploymentSpecification):
            self._nvcfDeploymentSpecification = value
        else:
            raise TypeError(
                'Property "nvcfDeploymentSpecification" of type "list<NvcfDep'
                'loymentSpecification>" set to wrong type'
            )

    @property
    def otherContents(self):
        """list: List of external contents"""
        return self._otherContents

    @otherContents.setter
    def otherContents(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._otherContents = value
        else:
            raise TypeError(
                'Property "otherContents" of type "list<ArtifactAttribute>" s'
                'et to wrong type'
            )

    @property
    def ownerName(self):
        """str: Name of the user who owns this version"""
        return self._ownerName

    @ownerName.setter
    def ownerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ownerName = value
        else:
            raise TypeError(
                'Property "ownerName" of type "list<str>" set to wrong type'
            )

    @property
    def versionId(self):
        """str: Unique version id. Please use this instead of 'id'"""
        return self._versionId

    @versionId.setter
    def versionId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._versionId = value
        else:
            raise TypeError(
                'Property "versionId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._accuracyReached is not None:
            result["accuracyReached"] = \
                self._accuracyReached
        if self._batchSize is not None:
            result["batchSize"] = \
                self._batchSize
        if self._customMetrics:
            result["customMetrics"] = [
                i.toDict() for i in self._customMetrics 
            ] if self._customMetrics else []
        if self._description is not None:
            result["description"] = \
                self._description
        if self._gpuModel is not None:
            result["gpuModel"] = \
                self._gpuModel
        if self._id is not None:
            result["id"] = \
                self._id
        if self._memoryFootprint is not None:
            result["memoryFootprint"] = \
                self._memoryFootprint
        if self._numberOfEpochs is not None:
            result["numberOfEpochs"] = \
                self._numberOfEpochs
        if self._nvcfContainerConfiguration:
            result["nvcfContainerConfiguration"] = \
                self._nvcfContainerConfiguration.toDict() if self._nvcfContainerConfiguration is not None else None
        if self._nvcfDeploymentSpecification:
            result["nvcfDeploymentSpecification"] = \
                self._nvcfDeploymentSpecification.toDict() if self._nvcfDeploymentSpecification is not None else None
        if self._otherContents:
            result["otherContents"] = [
                i.toDict() for i in self._otherContents 
            ] if self._otherContents else []
        if self._ownerName is not None:
            result["ownerName"] = \
                self._ownerName
        if self._versionId is not None:
            result["versionId"] = \
                self._versionId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._id is not None
            and
            self._id < 1):
            raise ValueError(
                "ModelVersionCreateRequest.id: " + str(self._id) + 
                " doesnt match requirement: minimum: 1")
        if (self._id is not None
            and
            self._id > 2147483647):
            raise ValueError(
                "ModelVersionCreateRequest.id: " + str(self._id) + 
                " doesnt match requirement: maximum: 2147483647")
        if (self._versionId is not None
            and
            len(self._versionId) > 255):
            raise ValueError(
                "ModelVersionCreateRequest.versionId: " + str(self._versionId) + 
                " doesnt match requirement: maxLength: 255")
        if (self._versionId is not None
            and
            not re.match(
                r"[^/]+",
                 self._versionId)):
            raise ValueError(
                "ModelVersionCreateRequest.versionId: " + str(self._versionId) + 
                " doesnt match requirement: pattern: [^/]+")
        if (self._description is not None
            and
            len(self._description) > 255):
            raise ValueError(
                "ModelVersionCreateRequest.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 255")
        if (self._ownerName is not None
            and
            len(self._ownerName) > 255):
            raise ValueError(
                "ModelVersionCreateRequest.ownerName: " + str(self._ownerName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._accuracyReached is not None
            and
            self._accuracyReached < 0):
            raise ValueError(
                "ModelVersionCreateRequest.accuracyReached: " + str(self._accuracyReached) + 
                " doesnt match requirement: minimum: 0")
        if (self._accuracyReached is not None
            and
            self._accuracyReached > 100):
            raise ValueError(
                "ModelVersionCreateRequest.accuracyReached: " + str(self._accuracyReached) + 
                " doesnt match requirement: maximum: 100")
        if (self._numberOfEpochs is not None
            and
            self._numberOfEpochs < 0):
            raise ValueError(
                "ModelVersionCreateRequest.numberOfEpochs: " + str(self._numberOfEpochs) + 
                " doesnt match requirement: minimum: 0")
        if (self._gpuModel is not None
            and
            len(self._gpuModel) > 255):
            raise ValueError(
                "ModelVersionCreateRequest.gpuModel: " + str(self._gpuModel) + 
                " doesnt match requirement: maxLength: 255")
        if (self._batchSize is not None
            and
            self._batchSize < 0):
            raise ValueError(
                "ModelVersionCreateRequest.batchSize: " + str(self._batchSize) + 
                " doesnt match requirement: minimum: 0")
        if (self._memoryFootprint is not None
            and
            len(self._memoryFootprint) > 255):
            raise ValueError(
                "ModelVersionCreateRequest.memoryFootprint: " + str(self._memoryFootprint) + 
                " doesnt match requirement: maxLength: 255")
        if (self._customMetrics is not None):
            for obj in self._customMetrics:
                if (obj is not None): obj.isValid()
        if (self._nvcfContainerConfiguration is not None): self._nvcfContainerConfiguration.isValid()
        if (self._nvcfDeploymentSpecification is not None): self._nvcfDeploymentSpecification.isValid()
        if (self._otherContents is not None):
            for obj in self._otherContents:
                if (obj is not None): obj.isValid()
        return True
    

