"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class MultipartUploadIDSchema(object):
    """Schema for base64 encoded stringified Upload ID that is relayed during 
    multipart upload of artifacts"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.dekMeta = (
            None if not fromDict or propDict.get(
                "dekMeta"
            ) is None
            else propDict["dekMeta"])
        self.sha256 = (
            None if not fromDict or propDict.get(
                "sha256"
            ) is None
            else propDict["sha256"])
        self.uploadID = (
            None if not fromDict or propDict.get(
                "uploadID"
            ) is None
            else propDict["uploadID"])

    @property
    def dekMeta(self):
        """str: DEK metadata for encrypted enabled orgs"""
        return self._dekMeta

    @dekMeta.setter
    def dekMeta(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dekMeta = value
        else:
            raise TypeError(
                'Property "dekMeta" of type "list<str>" set to wrong type'
            )

    @property
    def sha256(self):
        """str: Base64 encoded sha256 hash of the entire file"""
        return self._sha256

    @sha256.setter
    def sha256(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sha256 = value
        else:
            raise TypeError(
                'Property "sha256" of type "list<str>" set to wrong type'
            )

    @property
    def uploadID(self):
        """str: CSP upload ID"""
        return self._uploadID

    @uploadID.setter
    def uploadID(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._uploadID = value
        else:
            raise TypeError(
                'Property "uploadID" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._dekMeta is not None:
            result["dekMeta"] = \
                self._dekMeta
        if self._sha256 is not None:
            result["sha256"] = \
                self._sha256
        if self._uploadID is not None:
            result["uploadID"] = \
                self._uploadID
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._uploadID is None:
            raise ValueError(
                "MultipartUploadIDSchema.uploadID doesnt match requirement:" 
                "required: True"
            )
        return True
    

