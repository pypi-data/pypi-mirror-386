"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ModelFile(object):
    """Model file object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.path = (
            None if not fromDict or propDict.get(
                "path"
            ) is None
            else propDict["path"])
        self.sha256_base64 = (
            None if not fromDict or propDict.get(
                "sha256_base64"
            ) is None
            else propDict["sha256_base64"])
        self.sizeInBytes = (
            None if not fromDict or propDict.get(
                "sizeInBytes"
            ) is None
            else propDict["sizeInBytes"])

    @property
    def createdDate(self):
        """str: Creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the file"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def path(self):
        """str: Relative file path from the root of the model"""
        return self._path

    @path.setter
    def path(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._path = value
        else:
            raise TypeError(
                'Property "path" of type "list<str>" set to wrong type'
            )

    @property
    def sha256_base64(self):
        """str: Base64 encoded sha256 hash of the artifact file"""
        return self._sha256_base64

    @sha256_base64.setter
    def sha256_base64(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sha256_base64 = value
        else:
            raise TypeError(
                'Property "sha256_base64" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def sizeInBytes(self):
        """long: Size of the file in bytes"""
        return self._sizeInBytes

    @sizeInBytes.setter
    def sizeInBytes(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._sizeInBytes = value
        else:
            raise TypeError(
                'Property "sizeInBytes" of type "list<long>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._description is not None:
            result["description"] = \
                self._description
        if self._path is not None:
            result["path"] = \
                self._path
        if self._sha256_base64 is not None:
            result["sha256_base64"] = \
                self._sha256_base64
        if self._sizeInBytes is not None:
            result["sizeInBytes"] = \
                self._sizeInBytes
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._path is not None
            and
            len(self._path) < 1):
            raise ValueError(
                "ModelFile.path: " + str(self._path) + 
                " doesnt match requirement: minLength: 1")
        if (self._path is not None
            and
            len(self._path) > 1023):
            raise ValueError(
                "ModelFile.path: " + str(self._path) + 
                " doesnt match requirement: maxLength: 1023")
        if (self._sizeInBytes is not None
            and
            self._sizeInBytes < 0):
            raise ValueError(
                "ModelFile.sizeInBytes: " + str(self._sizeInBytes) + 
                " doesnt match requirement: minimum: 0")
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "ModelFile.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        return True
    

