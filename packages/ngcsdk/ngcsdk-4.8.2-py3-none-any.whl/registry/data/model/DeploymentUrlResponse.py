"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .DeploymentParameters import DeploymentParameters

# Unused import over optimization prevention
str(repr(DeploymentParameters))
str(repr(RequestStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class DeploymentUrlResponse(object):
    """Response to create a new deployment url"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.csp = (
            None if not fromDict or propDict.get(
                "csp"
            ) is None
            else propDict["csp"])
        self.deploymentParameters = (
            None if not fromDict or propDict.get(
                "deploymentParameters"
            ) is None
            else propDict["deploymentParameters"])
        self.deploymentUrl = (
            None if not fromDict or propDict.get(
                "deploymentUrl"
            ) is None
            else propDict["deploymentUrl"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def csp(self):
        """str: Cloud Service Provider name"""
        return self._csp

    @csp.setter
    def csp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._csp = value
        else:
            raise TypeError(
                'Property "csp" of type "list<str>" set to wrong type'
            )

    @property
    def deploymentParameters(self):
        """DeploymentParameters: Deployment Artifact Parameters object"""
        return self._deploymentParameters

    @deploymentParameters.setter
    def deploymentParameters(self, value):
        if value is not None and not isinstance(value, DeploymentParameters):
            value = DeploymentParameters(value)
        if (value is None) or isinstance(value, DeploymentParameters):
            self._deploymentParameters = value
        else:
            raise TypeError(
                'Property "deploymentParameters" of type "list<DeploymentPara'
                'meters>" set to wrong type'
            )

    @property
    def deploymentUrl(self):
        """str: Deployment URL"""
        return self._deploymentUrl

    @deploymentUrl.setter
    def deploymentUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._deploymentUrl = value
        else:
            raise TypeError(
                'Property "deploymentUrl" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def requestStatus(self):
        """RequestStatus: Request status information"""
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._csp is not None:
            result["csp"] = \
                self._csp
        if self._deploymentParameters:
            result["deploymentParameters"] = \
                self._deploymentParameters.toDict() if self._deploymentParameters is not None else None
        if self._deploymentUrl is not None:
            result["deploymentUrl"] = \
                self._deploymentUrl
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._deploymentParameters is not None): self._deploymentParameters.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

