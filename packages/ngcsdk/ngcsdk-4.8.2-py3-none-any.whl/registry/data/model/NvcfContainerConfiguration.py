"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MetaData import MetaData
from .NvcfContainerModel import NvcfContainerModel

# Unused import over optimization prevention
str(repr(MetaData))
str(repr(NvcfContainerModel))


if sys.version_info > (3,):
    long = int
    unicode = str

class NvcfContainerConfiguration(object):
    """NVCF container configuration parameters"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.apiBodyFormat = (
            None if not fromDict or propDict.get(
                "apiBodyFormat"
            ) is None
            else propDict["apiBodyFormat"])
        self.containerArgs = (
            None if not fromDict or propDict.get(
                "containerArgs"
            ) is None
            else propDict["containerArgs"])
        self.containerEnvironment = (
            None if not fromDict or propDict.get(
                "containerEnvironment"
            ) is None
            else [ MetaData(i)
            for i in propDict["containerEnvironment"] ])
        self.containerImage = (
            None if not fromDict or propDict.get(
                "containerImage"
            ) is None
            else propDict["containerImage"])
        self.healthUri = (
            None if not fromDict or propDict.get(
                "healthUri"
            ) is None
            else propDict["healthUri"])
        self.inferencePort = (
            None if not fromDict or propDict.get(
                "inferencePort"
            ) is None
            else propDict["inferencePort"])
        self.inferenceUrl = (
            None if not fromDict or propDict.get(
                "inferenceUrl"
            ) is None
            else propDict["inferenceUrl"])
        self.models = (
            None if not fromDict or propDict.get(
                "models"
            ) is None
            else [ NvcfContainerModel(i)
            for i in propDict["models"] ])

    @property
    def apiBodyFormat(self):
        """str: API body format"""
        return self._apiBodyFormat

    @apiBodyFormat.setter
    def apiBodyFormat(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._apiBodyFormat = value
        else:
            raise TypeError(
                'Property "apiBodyFormat" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def containerArgs(self):
        """str: Container arguments"""
        return self._containerArgs

    @containerArgs.setter
    def containerArgs(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerArgs = value
        else:
            raise TypeError(
                'Property "containerArgs" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def containerEnvironment(self):
        """list: Container environment consisting of key value pair"""
        return self._containerEnvironment

    @containerEnvironment.setter
    def containerEnvironment(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._containerEnvironment = value
        else:
            raise TypeError(
                'Property "containerEnvironment" of type "list<MetaData>" set'
                ' to wrong type'
            )

    @property
    def containerImage(self):
        """str: Container Image"""
        return self._containerImage

    @containerImage.setter
    def containerImage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerImage = value
        else:
            raise TypeError(
                'Property "containerImage" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def healthUri(self):
        """str: Health URI"""
        return self._healthUri

    @healthUri.setter
    def healthUri(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._healthUri = value
        else:
            raise TypeError(
                'Property "healthUri" of type "list<str>" set to wrong type'
            )

    @property
    def inferencePort(self):
        """str: Inference port"""
        return self._inferencePort

    @inferencePort.setter
    def inferencePort(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._inferencePort = value
        else:
            raise TypeError(
                'Property "inferencePort" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def inferenceUrl(self):
        """str: Inference url"""
        return self._inferenceUrl

    @inferenceUrl.setter
    def inferenceUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._inferenceUrl = value
        else:
            raise TypeError(
                'Property "inferenceUrl" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def models(self):
        """list: Models version object metadata"""
        return self._models

    @models.setter
    def models(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._models = value
        else:
            raise TypeError(
                'Property "models" of type "list<NvcfContainerModel>" set to '
                'wrong type'
            )

    def toDict(self):
        result = {}
        if self._apiBodyFormat is not None:
            result["apiBodyFormat"] = \
                self._apiBodyFormat
        if self._containerArgs is not None:
            result["containerArgs"] = \
                self._containerArgs
        if self._containerEnvironment:
            result["containerEnvironment"] = [
                i.toDict() for i in self._containerEnvironment 
            ] if self._containerEnvironment else []
        if self._containerImage is not None:
            result["containerImage"] = \
                self._containerImage
        if self._healthUri is not None:
            result["healthUri"] = \
                self._healthUri
        if self._inferencePort is not None:
            result["inferencePort"] = \
                self._inferencePort
        if self._inferenceUrl is not None:
            result["inferenceUrl"] = \
                self._inferenceUrl
        if self._models:
            result["models"] = [
                i.toDict() for i in self._models 
            ] if self._models else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._models is not None):
            for obj in self._models:
                if (obj is not None): obj.isValid()
        if (self._containerEnvironment is not None):
            for obj in self._containerEnvironment:
                if (obj is not None): obj.isValid()
        return True
    

