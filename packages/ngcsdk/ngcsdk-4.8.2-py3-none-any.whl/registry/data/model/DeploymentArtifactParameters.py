"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ArtifactTypeEnum import ArtifactTypeEnum

# Unused import over optimization prevention
str(repr(ArtifactTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class DeploymentArtifactParameters(object):
    """Deployment Artifact Parameters object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.filePath = (
            None if not fromDict or propDict.get(
                "filePath"
            ) is None
            else propDict["filePath"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.versionId = (
            None if not fromDict or propDict.get(
                "versionId"
            ) is None
            else propDict["versionId"])

    @property
    def artifactType(self):
        """ArtifactTypeEnum: Artifact type"""
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<ArtifactTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name of the artifact"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def filePath(self):
        """str: Path to a file in an artifact version"""
        return self._filePath

    @filePath.setter
    def filePath(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._filePath = value
        else:
            raise TypeError(
                'Property "filePath" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Unique name of the artifact"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Name of the org that the artifact belongs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def teamName(self):
        """str: Name of the team that the artifact belongs to"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def versionId(self):
        """str: ID of the version or tag"""
        return self._versionId

    @versionId.setter
    def versionId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._versionId = value
        else:
            raise TypeError(
                'Property "versionId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._filePath is not None:
            result["filePath"] = \
                self._filePath
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._versionId is not None:
            result["versionId"] = \
                self._versionId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "DeploymentArtifactParameters.name doesnt match requirement:" 
                "required: True"
            )
        if self._orgName is None:
            raise ValueError(
                "DeploymentArtifactParameters.orgName doesnt match requirement:" 
                "required: True"
            )
        return True
    

