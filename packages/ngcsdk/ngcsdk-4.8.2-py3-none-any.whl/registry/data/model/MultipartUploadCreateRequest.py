"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class MultipartUploadCreateRequest(object):
    """Request body for creating a multipart upload for artifacts"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.customPartSize = (
            None if not fromDict or propDict.get(
                "customPartSize"
            ) is None
            else propDict["customPartSize"])
        self.filePath = (
            None if not fromDict or propDict.get(
                "filePath"
            ) is None
            else propDict["filePath"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.partNumberList = (
            None if not fromDict or propDict.get(
                "partNumberList"
            ) is None
            else propDict["partNumberList"])
        self.sha256 = (
            None if not fromDict or propDict.get(
                "sha256"
            ) is None
            else propDict["sha256"])
        self.size = (
            None if not fromDict or propDict.get(
                "size"
            ) is None
            else propDict["size"])
        self.uploadID = (
            None if not fromDict or propDict.get(
                "uploadID"
            ) is None
            else propDict["uploadID"])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def artifactType(self):
        """str: Type of artifact"""
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def customPartSize(self):
        """long: Custom chunk size of the file to be uploaded, in bytes. shoul
        d be >= 5MB and <= 500MB. default is 500 in MB."""
        return self._customPartSize

    @customPartSize.setter
    def customPartSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._customPartSize = value
        else:
            raise TypeError(
                'Property "customPartSize" of type "list<long>" set to wrong '
                'type'
            )

    @property
    def filePath(self):
        """str: The file path for the artifact upload"""
        return self._filePath

    @filePath.setter
    def filePath(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._filePath = value
        else:
            raise TypeError(
                'Property "filePath" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Name of the artifact"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def partNumberList(self):
        """list: List of parts to re-generate urls for"""
        return self._partNumberList

    @partNumberList.setter
    def partNumberList(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._partNumberList = value
        else:
            raise TypeError(
                'Property "partNumberList" of type "list<int>" set to wrong t'
                'ype'
            )

    @property
    def sha256(self):
        """str: Base64 encoded sha256 hash of the artifact file to be uploaded
        """
        return self._sha256

    @sha256.setter
    def sha256(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sha256 = value
        else:
            raise TypeError(
                'Property "sha256" of type "list<str>" set to wrong type'
            )

    @property
    def size(self):
        """long: total size of the artifact, in bytes"""
        return self._size

    @size.setter
    def size(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._size = value
        else:
            raise TypeError(
                'Property "size" of type "list<long>" set to wrong type'
            )

    @property
    def uploadID(self):
        """str: Upload id of an already initiated Multipart upload"""
        return self._uploadID

    @uploadID.setter
    def uploadID(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._uploadID = value
        else:
            raise TypeError(
                'Property "uploadID" of type "list<str>" set to wrong type'
            )

    @property
    def version(self):
        """str: Artifact version"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._customPartSize is not None:
            result["customPartSize"] = \
                self._customPartSize
        if self._filePath is not None:
            result["filePath"] = \
                self._filePath
        if self._name is not None:
            result["name"] = \
                self._name
        if self._partNumberList is not None:
            result["partNumberList"] = \
                self._partNumberList
        if self._sha256 is not None:
            result["sha256"] = \
                self._sha256
        if self._size is not None:
            result["size"] = \
                self._size
        if self._uploadID is not None:
            result["uploadID"] = \
                self._uploadID
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "MultipartUploadCreateRequest.name doesnt match requirement:" 
                "required: True"
            )
        if self._version is None:
            raise ValueError(
                "MultipartUploadCreateRequest.version doesnt match requirement:" 
                "required: True"
            )
        if self._artifactType is None:
            raise ValueError(
                "MultipartUploadCreateRequest.artifactType doesnt match requirement:" 
                "required: True"
            )
        if self._filePath is None:
            raise ValueError(
                "MultipartUploadCreateRequest.filePath doesnt match requirement:" 
                "required: True"
            )
        if self._size is None:
            raise ValueError(
                "MultipartUploadCreateRequest.size doesnt match requirement:" 
                "required: True"
            )
        return True
    

