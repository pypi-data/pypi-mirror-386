"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Dataset import Dataset
from .LicenseMetadata import LicenseMetadata

# Unused import over optimization prevention
str(repr(LicenseMetadata))
str(repr(Dataset))


if sys.version_info > (3,):
    long = int
    unicode = str

class ModelUpdateRequest(object):
    """Request to create a new model"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.application = (
            None if not fromDict or propDict.get(
                "application"
            ) is None
            else propDict["application"])
        self.bias = (
            None if not fromDict or propDict.get(
                "bias"
            ) is None
            else propDict["bias"])
        self.builtBy = (
            None if not fromDict or propDict.get(
                "builtBy"
            ) is None
            else propDict["builtBy"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.explainability = (
            None if not fromDict or propDict.get(
                "explainability"
            ) is None
            else propDict["explainability"])
        self.framework = (
            None if not fromDict or propDict.get(
                "framework"
            ) is None
            else propDict["framework"])
        self.hasPlayground = (
            None if not fromDict or propDict.get(
                "hasPlayground"
            ) is None
            else propDict["hasPlayground"])
        self.isPlaygroundEnabled = (
            None if not fromDict or propDict.get(
                "isPlaygroundEnabled"
            ) is None
            else propDict["isPlaygroundEnabled"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.labelsV2 = (
            None if not fromDict or propDict.get(
                "labelsV2"
            ) is None
            else propDict["labelsV2"])
        self.licenseTerms = (
            None if not fromDict or propDict.get(
                "licenseTerms"
            ) is None
            else [ LicenseMetadata(i)
            for i in propDict["licenseTerms"] ])
        self.logo = (
            None if not fromDict or propDict.get(
                "logo"
            ) is None
            else propDict["logo"])
        self.modelFormat = (
            None if not fromDict or propDict.get(
                "modelFormat"
            ) is None
            else propDict["modelFormat"])
        self.ownerName = (
            None if not fromDict or propDict.get(
                "ownerName"
            ) is None
            else propDict["ownerName"])
        self.precision = (
            None if not fromDict or propDict.get(
                "precision"
            ) is None
            else propDict["precision"])
        self.privacy = (
            None if not fromDict or propDict.get(
                "privacy"
            ) is None
            else propDict["privacy"])
        self.publicDatasetUsed = (
            None if not fromDict or propDict.get(
                "publicDatasetUsed"
            ) is None
            else propDict["publicDatasetUsed"])
        self.publisher = (
            None if not fromDict or propDict.get(
                "publisher"
            ) is None
            else propDict["publisher"])
        self.safetyAndSecurity = (
            None if not fromDict or propDict.get(
                "safetyAndSecurity"
            ) is None
            else propDict["safetyAndSecurity"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])

    @property
    def application(self):
        """str: Application of the model"""
        return self._application

    @application.setter
    def application(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._application = value
        else:
            raise TypeError(
                'Property "application" of type "list<str>" set to wrong type'
            )

    @property
    def bias(self):
        """str: Text describing bias in the model"""
        return self._bias

    @bias.setter
    def bias(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._bias = value
        else:
            raise TypeError(
                'Property "bias" of type "list<str>" set to wrong type'
            )

    @property
    def builtBy(self):
        """str: organization that built the repository"""
        return self._builtBy

    @builtBy.setter
    def builtBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._builtBy = value
        else:
            raise TypeError(
                'Property "builtBy" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the model"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def explainability(self):
        """str: Text describing explainability for this model"""
        return self._explainability

    @explainability.setter
    def explainability(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._explainability = value
        else:
            raise TypeError(
                'Property "explainability" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def framework(self):
        """str: Framework used to train this model"""
        return self._framework

    @framework.setter
    def framework(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._framework = value
        else:
            raise TypeError(
                'Property "framework" of type "list<str>" set to wrong type'
            )

    @property
    def hasPlayground(self):
        """bool: indicate if the Model has AI Playground configured"""
        return self._hasPlayground

    @hasPlayground.setter
    def hasPlayground(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasPlayground = value
        else:
            raise TypeError(
                'Property "hasPlayground" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def isPlaygroundEnabled(self):
        """bool: indicate if AI Playground is enabled in the catalog"""
        return self._isPlaygroundEnabled

    @isPlaygroundEnabled.setter
    def isPlaygroundEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isPlaygroundEnabled = value
        else:
            raise TypeError(
                'Property "isPlaygroundEnabled" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def labels(self):
        """ """
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def labelsV2(self):
        """ """
        return self._labelsV2

    @labelsV2.setter
    def labelsV2(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labelsV2 = value
        else:
            raise TypeError(
                'Property "labelsV2" of type "list<str>" set to wrong type'
            )

    @property
    def licenseTerms(self):
        """list: License information for the model"""
        return self._licenseTerms

    @licenseTerms.setter
    def licenseTerms(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._licenseTerms = value
        else:
            raise TypeError(
                'Property "licenseTerms" of type "list<LicenseMetadata>" set '
                'to wrong type'
            )

    @property
    def logo(self):
        """str: URL for the logo image"""
        return self._logo

    @logo.setter
    def logo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logo = value
        else:
            raise TypeError(
                'Property "logo" of type "list<str>" set to wrong type'
            )

    @property
    def modelFormat(self):
        """str: Format of the model"""
        return self._modelFormat

    @modelFormat.setter
    def modelFormat(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._modelFormat = value
        else:
            raise TypeError(
                'Property "modelFormat" of type "list<str>" set to wrong type'
            )

    @property
    def ownerName(self):
        """str: Name of the user who owns this model"""
        return self._ownerName

    @ownerName.setter
    def ownerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ownerName = value
        else:
            raise TypeError(
                'Property "ownerName" of type "list<str>" set to wrong type'
            )

    @property
    def precision(self):
        """str: Precision this model was trained with"""
        return self._precision

    @precision.setter
    def precision(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._precision = value
        else:
            raise TypeError(
                'Property "precision" of type "list<str>" set to wrong type'
            )

    @property
    def privacy(self):
        """str: Text describing the privacy for this model"""
        return self._privacy

    @privacy.setter
    def privacy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._privacy = value
        else:
            raise TypeError(
                'Property "privacy" of type "list<str>" set to wrong type'
            )

    @property
    def publicDatasetUsed(self):
        """ """
        return self._publicDatasetUsed

    @publicDatasetUsed.setter
    def publicDatasetUsed(self, value):
        if value is not None and not isinstance(value, Dataset):
            value = Dataset(value)
        if (value is None) or isinstance(value, Dataset):
            self._publicDatasetUsed = value
        else:
            raise TypeError(
                'Property "publicDatasetUsed" of type "list<Dataset>" set to '
                'wrong type'
            )

    @property
    def publisher(self):
        """str: organization that published the repository"""
        return self._publisher

    @publisher.setter
    def publisher(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._publisher = value
        else:
            raise TypeError(
                'Property "publisher" of type "list<str>" set to wrong type'
            )

    @property
    def safetyAndSecurity(self):
        """str: Text for describing the safety and security in the model"""
        return self._safetyAndSecurity

    @safetyAndSecurity.setter
    def safetyAndSecurity(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._safetyAndSecurity = value
        else:
            raise TypeError(
                'Property "safetyAndSecurity" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def shortDescription(self):
        """str: Short description of the model"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._application is not None:
            result["application"] = \
                self._application
        if self._bias is not None:
            result["bias"] = \
                self._bias
        if self._builtBy is not None:
            result["builtBy"] = \
                self._builtBy
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._explainability is not None:
            result["explainability"] = \
                self._explainability
        if self._framework is not None:
            result["framework"] = \
                self._framework
        if self._hasPlayground is not None:
            result["hasPlayground"] = \
                self._hasPlayground
        if self._isPlaygroundEnabled is not None:
            result["isPlaygroundEnabled"] = \
                self._isPlaygroundEnabled
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._labelsV2 is not None:
            result["labelsV2"] = \
                self._labelsV2
        if self._licenseTerms:
            result["licenseTerms"] = [
                i.toDict() for i in self._licenseTerms 
            ] if self._licenseTerms else []
        if self._logo is not None:
            result["logo"] = \
                self._logo
        if self._modelFormat is not None:
            result["modelFormat"] = \
                self._modelFormat
        if self._ownerName is not None:
            result["ownerName"] = \
                self._ownerName
        if self._precision is not None:
            result["precision"] = \
                self._precision
        if self._privacy is not None:
            result["privacy"] = \
                self._privacy
        if self._publicDatasetUsed:
            result["publicDatasetUsed"] = \
                self._publicDatasetUsed.toDict() if self._publicDatasetUsed is not None else None
        if self._publisher is not None:
            result["publisher"] = \
                self._publisher
        if self._safetyAndSecurity is not None:
            result["safetyAndSecurity"] = \
                self._safetyAndSecurity
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._ownerName is not None
            and
            len(self._ownerName) > 255):
            raise ValueError(
                "ModelUpdateRequest.ownerName: " + str(self._ownerName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._framework is not None
            and
            len(self._framework) > 255):
            raise ValueError(
                "ModelUpdateRequest.framework: " + str(self._framework) + 
                " doesnt match requirement: maxLength: 255")
        if (self._modelFormat is not None
            and
            len(self._modelFormat) > 255):
            raise ValueError(
                "ModelUpdateRequest.modelFormat: " + str(self._modelFormat) + 
                " doesnt match requirement: maxLength: 255")
        if (self._shortDescription is not None
            and
            len(self._shortDescription) > 255):
            raise ValueError(
                "ModelUpdateRequest.shortDescription: " + str(self._shortDescription) + 
                " doesnt match requirement: maxLength: 255")
        if (self._displayName is not None
            and
            len(self._displayName) < 2):
            raise ValueError(
                "ModelUpdateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: minLength: 2")
        if (self._displayName is not None
            and
            len(self._displayName) > 64):
            raise ValueError(
                "ModelUpdateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 64")
        if (self._precision is not None
            and
            len(self._precision) > 255):
            raise ValueError(
                "ModelUpdateRequest.precision: " + str(self._precision) + 
                " doesnt match requirement: maxLength: 255")
        if (self._application is not None
            and
            len(self._application) > 255):
            raise ValueError(
                "ModelUpdateRequest.application: " + str(self._application) + 
                " doesnt match requirement: maxLength: 255")
        if (self._logo is not None
            and
            len(self._logo) > 255):
            raise ValueError(
                "ModelUpdateRequest.logo: " + str(self._logo) + 
                " doesnt match requirement: maxLength: 255")
        if (self._builtBy is not None
            and
            len(self._builtBy) > 255):
            raise ValueError(
                "ModelUpdateRequest.builtBy: " + str(self._builtBy) + 
                " doesnt match requirement: maxLength: 255")
        if (self._publisher is not None
            and
            len(self._publisher) > 255):
            raise ValueError(
                "ModelUpdateRequest.publisher: " + str(self._publisher) + 
                " doesnt match requirement: maxLength: 255")
        if (self._publicDatasetUsed is not None): self._publicDatasetUsed.isValid()
        if (self._licenseTerms is not None):
            for obj in self._licenseTerms:
                if (obj is not None): obj.isValid()
        return True
    

