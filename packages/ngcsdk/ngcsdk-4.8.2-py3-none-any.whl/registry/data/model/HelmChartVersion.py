"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .HelmChartMaintainer import HelmChartMaintainer
from .HelmChartDependency import HelmChartDependency

# Unused import over optimization prevention
str(repr(HelmChartMaintainer))
str(repr(HelmChartDependency))


if sys.version_info > (3,):
    long = int
    unicode = str

class HelmChartVersion(object):
    """Helm chart version object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.apiVersion = (
            None if not fromDict or propDict.get(
                "apiVersion"
            ) is None
            else propDict["apiVersion"])
        self.appVersion = (
            None if not fromDict or propDict.get(
                "appVersion"
            ) is None
            else propDict["appVersion"])
        self.dependencies = (
            None if not fromDict or propDict.get(
                "dependencies"
            ) is None
            else [ HelmChartDependency(i)
            for i in propDict["dependencies"] ])
        self.deprecated = (
            None if not fromDict or propDict.get(
                "deprecated"
            ) is None
            else propDict["deprecated"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.home = (
            None if not fromDict or propDict.get(
                "home"
            ) is None
            else propDict["home"])
        self.icon = (
            None if not fromDict or propDict.get(
                "icon"
            ) is None
            else propDict["icon"])
        self.keywords = (
            None if not fromDict or propDict.get(
                "keywords"
            ) is None
            else propDict["keywords"])
        self.kubeVersion = (
            None if not fromDict or propDict.get(
                "kubeVersion"
            ) is None
            else propDict["kubeVersion"])
        self.maintainers = (
            None if not fromDict or propDict.get(
                "maintainers"
            ) is None
            else [ HelmChartMaintainer(i)
            for i in propDict["maintainers"] ])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.sources = (
            None if not fromDict or propDict.get(
                "sources"
            ) is None
            else propDict["sources"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def apiVersion(self):
        """str: The chart API version (required)"""
        return self._apiVersion

    @apiVersion.setter
    def apiVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._apiVersion = value
        else:
            raise TypeError(
                'Property "apiVersion" of type "list<str>" set to wrong type'
            )

    @property
    def appVersion(self):
        """str: The version of the app that this contains (optional). This nee
        dn't be SemVer."""
        return self._appVersion

    @appVersion.setter
    def appVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._appVersion = value
        else:
            raise TypeError(
                'Property "appVersion" of type "list<str>" set to wrong type'
            )

    @property
    def dependencies(self):
        """list: A list of the chart requirements (optional)"""
        return self._dependencies

    @dependencies.setter
    def dependencies(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._dependencies = value
        else:
            raise TypeError(
                'Property "dependencies" of type "list<HelmChartDependency>" '
                'set to wrong type'
            )

    @property
    def deprecated(self):
        """bool: Whether this chart is deprecated (optional, boolean)"""
        return self._deprecated

    @deprecated.setter
    def deprecated(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._deprecated = value
        else:
            raise TypeError(
                'Property "deprecated" of type "list<bool>" set to wrong type'
            )

    @property
    def description(self):
        """str: A single-sentence description of this project (optional)"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def home(self):
        """str: The URL of this project's home page (optional)"""
        return self._home

    @home.setter
    def home(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._home = value
        else:
            raise TypeError(
                'Property "home" of type "list<str>" set to wrong type'
            )

    @property
    def icon(self):
        """str: A URL to an SVG or PNG image to be used as an icon (optional).
        """
        return self._icon

    @icon.setter
    def icon(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._icon = value
        else:
            raise TypeError(
                'Property "icon" of type "list<str>" set to wrong type'
            )

    @property
    def keywords(self):
        """list: A list of keywords about this project (optional)"""
        return self._keywords

    @keywords.setter
    def keywords(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._keywords = value
        else:
            raise TypeError(
                'Property "keywords" of type "list<str>" set to wrong type'
            )

    @property
    def kubeVersion(self):
        """str: A SemVer range of compatible Kubernetes versions (optional)"""
        return self._kubeVersion

    @kubeVersion.setter
    def kubeVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._kubeVersion = value
        else:
            raise TypeError(
                'Property "kubeVersion" of type "list<str>" set to wrong type'
            )

    @property
    def maintainers(self):
        """ """
        return self._maintainers

    @maintainers.setter
    def maintainers(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._maintainers = value
        else:
            raise TypeError(
                'Property "maintainers" of type "list<HelmChartMaintainer>" s'
                'et to wrong type'
            )

    @property
    def name(self):
        """str: The name of the chart (required)"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def sources(self):
        """list: A list of URLs to source code for this project (optional)"""
        return self._sources

    @sources.setter
    def sources(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sources = value
        else:
            raise TypeError(
                'Property "sources" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """str: It is the type of chart (optional)"""
        return self._type

    @type.setter
    def type(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<str>" set to wrong type'
            )

    @property
    def version(self):
        """str: A SemVer 2 version (required)"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._apiVersion is not None:
            result["apiVersion"] = \
                self._apiVersion
        if self._appVersion is not None:
            result["appVersion"] = \
                self._appVersion
        if self._dependencies:
            result["dependencies"] = [
                i.toDict() for i in self._dependencies 
            ] if self._dependencies else []
        if self._deprecated is not None:
            result["deprecated"] = \
                self._deprecated
        if self._description is not None:
            result["description"] = \
                self._description
        if self._home is not None:
            result["home"] = \
                self._home
        if self._icon is not None:
            result["icon"] = \
                self._icon
        if self._keywords is not None:
            result["keywords"] = \
                self._keywords
        if self._kubeVersion is not None:
            result["kubeVersion"] = \
                self._kubeVersion
        if self._maintainers:
            result["maintainers"] = [
                i.toDict() for i in self._maintainers 
            ] if self._maintainers else []
        if self._name is not None:
            result["name"] = \
                self._name
        if self._sources is not None:
            result["sources"] = \
                self._sources
        if self._type is not None:
            result["type"] = \
                self._type
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._dependencies is not None):
            for obj in self._dependencies:
                if (obj is not None): obj.isValid()
        if (self._maintainers is not None):
            for obj in self._maintainers:
                if (obj is not None): obj.isValid()
        return True
    

