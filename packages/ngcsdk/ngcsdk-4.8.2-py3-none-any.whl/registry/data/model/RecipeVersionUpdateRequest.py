"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .CustomMetricGroup import CustomMetricGroup
from .VersionStatusEnum import VersionStatusEnum
from .ArtifactAttribute import ArtifactAttribute

# Unused import over optimization prevention
str(repr(VersionStatusEnum))
str(repr(ArtifactAttribute))
str(repr(CustomMetricGroup))


if sys.version_info > (3,):
    long = int
    unicode = str

class RecipeVersionUpdateRequest(object):
    """Request to create a new recipe version"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accuracyReached = (
            None if not fromDict or propDict.get(
                "accuracyReached"
            ) is None
            else propDict["accuracyReached"])
        self.batchSize = (
            None if not fromDict or propDict.get(
                "batchSize"
            ) is None
            else propDict["batchSize"])
        self.customMetrics = (
            None if not fromDict or propDict.get(
                "customMetrics"
            ) is None
            else [ CustomMetricGroup(i)
            for i in propDict["customMetrics"] ])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.gpuModel = (
            None if not fromDict or propDict.get(
                "gpuModel"
            ) is None
            else propDict["gpuModel"])
        self.memoryFootprint = (
            None if not fromDict or propDict.get(
                "memoryFootprint"
            ) is None
            else propDict["memoryFootprint"])
        self.numberOfEpochs = (
            None if not fromDict or propDict.get(
                "numberOfEpochs"
            ) is None
            else propDict["numberOfEpochs"])
        self.otherContents = (
            None if not fromDict or propDict.get(
                "otherContents"
            ) is None
            else [ ArtifactAttribute(i)
            for i in propDict["otherContents"] ])
        self.performance = (
            None if not fromDict or propDict.get(
                "performance"
            ) is None
            else propDict["performance"])
        self.quickStartGuide = (
            None if not fromDict or propDict.get(
                "quickStartGuide"
            ) is None
            else propDict["quickStartGuide"])
        self.releaseNotes = (
            None if not fromDict or propDict.get(
                "releaseNotes"
            ) is None
            else propDict["releaseNotes"])
        self.setup = (
            None if not fromDict or propDict.get(
                "setup"
            ) is None
            else propDict["setup"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def accuracyReached(self):
        """float: Accuracy this recipe reached"""
        return self._accuracyReached

    @accuracyReached.setter
    def accuracyReached(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._accuracyReached = value
        else:
            raise TypeError(
                'Property "accuracyReached" of type "list<float>" set to wron'
                'g type'
            )

    @property
    def batchSize(self):
        """long: Batch size this recipe was trained with"""
        return self._batchSize

    @batchSize.setter
    def batchSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._batchSize = value
        else:
            raise TypeError(
                'Property "batchSize" of type "list<long>" set to wrong type'
            )

    @property
    def customMetrics(self):
        """list: Custom Metrics key/value pairs"""
        return self._customMetrics

    @customMetrics.setter
    def customMetrics(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._customMetrics = value
        else:
            raise TypeError(
                'Property "customMetrics" of type "list<CustomMetricGroup>" s'
                'et to wrong type'
            )

    @property
    def description(self):
        """str: Description of the recipe version"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def gpuModel(self):
        """str: GPU model and memory"""
        return self._gpuModel

    @gpuModel.setter
    def gpuModel(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuModel = value
        else:
            raise TypeError(
                'Property "gpuModel" of type "list<str>" set to wrong type'
            )

    @property
    def memoryFootprint(self):
        """str: Recipe size/memory footprint for inference"""
        return self._memoryFootprint

    @memoryFootprint.setter
    def memoryFootprint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._memoryFootprint = value
        else:
            raise TypeError(
                'Property "memoryFootprint" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def numberOfEpochs(self):
        """long: Number of epochs this recipe trained"""
        return self._numberOfEpochs

    @numberOfEpochs.setter
    def numberOfEpochs(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._numberOfEpochs = value
        else:
            raise TypeError(
                'Property "numberOfEpochs" of type "list<long>" set to wrong '
                'type'
            )

    @property
    def otherContents(self):
        """list: List of external contents"""
        return self._otherContents

    @otherContents.setter
    def otherContents(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._otherContents = value
        else:
            raise TypeError(
                'Property "otherContents" of type "list<ArtifactAttribute>" s'
                'et to wrong type'
            )

    @property
    def performance(self):
        """str: Text describing performance of the recipe results"""
        return self._performance

    @performance.setter
    def performance(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._performance = value
        else:
            raise TypeError(
                'Property "performance" of type "list<str>" set to wrong type'
            )

    @property
    def quickStartGuide(self):
        """str: Text with a guide to getting started"""
        return self._quickStartGuide

    @quickStartGuide.setter
    def quickStartGuide(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._quickStartGuide = value
        else:
            raise TypeError(
                'Property "quickStartGuide" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def releaseNotes(self):
        """str: Text describing this release"""
        return self._releaseNotes

    @releaseNotes.setter
    def releaseNotes(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._releaseNotes = value
        else:
            raise TypeError(
                'Property "releaseNotes" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def setup(self):
        """str: Text describing recipe setup"""
        return self._setup

    @setup.setter
    def setup(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._setup = value
        else:
            raise TypeError(
                'Property "setup" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """VersionStatusEnum: Version status"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<VersionStatusEnum>" set to w'
                'rong type'
            )

    def toDict(self):
        result = {}
        if self._accuracyReached is not None:
            result["accuracyReached"] = \
                self._accuracyReached
        if self._batchSize is not None:
            result["batchSize"] = \
                self._batchSize
        if self._customMetrics:
            result["customMetrics"] = [
                i.toDict() for i in self._customMetrics 
            ] if self._customMetrics else []
        if self._description is not None:
            result["description"] = \
                self._description
        if self._gpuModel is not None:
            result["gpuModel"] = \
                self._gpuModel
        if self._memoryFootprint is not None:
            result["memoryFootprint"] = \
                self._memoryFootprint
        if self._numberOfEpochs is not None:
            result["numberOfEpochs"] = \
                self._numberOfEpochs
        if self._otherContents:
            result["otherContents"] = [
                i.toDict() for i in self._otherContents 
            ] if self._otherContents else []
        if self._performance is not None:
            result["performance"] = \
                self._performance
        if self._quickStartGuide is not None:
            result["quickStartGuide"] = \
                self._quickStartGuide
        if self._releaseNotes is not None:
            result["releaseNotes"] = \
                self._releaseNotes
        if self._setup is not None:
            result["setup"] = \
                self._setup
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._accuracyReached is not None
            and
            self._accuracyReached < 0):
            raise ValueError(
                "RecipeVersionUpdateRequest.accuracyReached: " + str(self._accuracyReached) + 
                " doesnt match requirement: minimum: 0")
        if (self._accuracyReached is not None
            and
            self._accuracyReached > 100):
            raise ValueError(
                "RecipeVersionUpdateRequest.accuracyReached: " + str(self._accuracyReached) + 
                " doesnt match requirement: maximum: 100")
        if (self._numberOfEpochs is not None
            and
            self._numberOfEpochs < 0):
            raise ValueError(
                "RecipeVersionUpdateRequest.numberOfEpochs: " + str(self._numberOfEpochs) + 
                " doesnt match requirement: minimum: 0")
        if (self._gpuModel is not None
            and
            len(self._gpuModel) > 255):
            raise ValueError(
                "RecipeVersionUpdateRequest.gpuModel: " + str(self._gpuModel) + 
                " doesnt match requirement: maxLength: 255")
        if (self._batchSize is not None
            and
            self._batchSize < 0):
            raise ValueError(
                "RecipeVersionUpdateRequest.batchSize: " + str(self._batchSize) + 
                " doesnt match requirement: minimum: 0")
        if (self._memoryFootprint is not None
            and
            len(self._memoryFootprint) > 255):
            raise ValueError(
                "RecipeVersionUpdateRequest.memoryFootprint: " + str(self._memoryFootprint) + 
                " doesnt match requirement: maxLength: 255")
        if (self._customMetrics is not None):
            for obj in self._customMetrics:
                if (obj is not None): obj.isValid()
        if (self._otherContents is not None):
            for obj in self._otherContents:
                if (obj is not None): obj.isValid()
        return True
    

