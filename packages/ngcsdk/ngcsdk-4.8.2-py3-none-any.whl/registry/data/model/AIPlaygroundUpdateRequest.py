"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AIPlaygroundUpdateRequest(object):
    """Request to update an AI Playground config"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else propDict["attributes"])
        self.nvcfFunctionId = (
            None if not fromDict or propDict.get(
                "nvcfFunctionId"
            ) is None
            else propDict["nvcfFunctionId"])
        self.openAPISpec = (
            None if not fromDict or propDict.get(
                "openAPISpec"
            ) is None
            else propDict["openAPISpec"])

    @property
    def attributes(self):
        """str: Metadata json string"""
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<str>" set to wrong type'
            )

    @property
    def nvcfFunctionId(self):
        """str: NVCF function id for the model playground"""
        return self._nvcfFunctionId

    @nvcfFunctionId.setter
    def nvcfFunctionId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nvcfFunctionId = value
        else:
            raise TypeError(
                'Property "nvcfFunctionId" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def openAPISpec(self):
        """str: OpenAPI specification for this model"""
        return self._openAPISpec

    @openAPISpec.setter
    def openAPISpec(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._openAPISpec = value
        else:
            raise TypeError(
                'Property "openAPISpec" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._attributes is not None:
            result["attributes"] = \
                self._attributes
        if self._nvcfFunctionId is not None:
            result["nvcfFunctionId"] = \
                self._nvcfFunctionId
        if self._openAPISpec is not None:
            result["openAPISpec"] = \
                self._openAPISpec
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

