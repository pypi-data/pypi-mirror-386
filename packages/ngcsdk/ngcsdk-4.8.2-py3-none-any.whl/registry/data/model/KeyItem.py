"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class KeyItem(object):
    """Key item with ID and create timestamp string"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.created = (
            None if not fromDict or propDict.get(
                "created"
            ) is None
            else propDict["created"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.encryptionKeyId = (
            None if not fromDict or propDict.get(
                "encryptionKeyId"
            ) is None
            else propDict["encryptionKeyId"])

    @property
    def created(self):
        """str: The creation timestamp of the key item in ISO-8601 format. For
        mat: YYYY-MM-DDTHH:mm:ss.sssZ."""
        return self._created

    @created.setter
    def created(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._created = value
        else:
            raise TypeError(
                'Property "created" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the encryption key"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def encryptionKeyId(self):
        """str: The encryption key identifier in UUID format."""
        return self._encryptionKeyId

    @encryptionKeyId.setter
    def encryptionKeyId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._encryptionKeyId = value
        else:
            raise TypeError(
                'Property "encryptionKeyId" of type "list<str>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._created is not None:
            result["created"] = \
                self._created
        if self._description is not None:
            result["description"] = \
                self._description
        if self._encryptionKeyId is not None:
            result["encryptionKeyId"] = \
                self._encryptionKeyId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._encryptionKeyId is None:
            raise ValueError(
                "KeyItem.encryptionKeyId doesnt match requirement:" 
                "required: True"
            )
        if (self._encryptionKeyId is not None
            and
            not re.match(
                r"^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{1"
                "2}$",
                 self._encryptionKeyId)):
            raise ValueError(
                "KeyItem.encryptionKeyId: " + str(self._encryptionKeyId) + 
                " doesnt match requirement: pattern: ^[0-9a-f]{8}-[0-9a-f]{4}"
                "-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$")
        if self._created is None:
            raise ValueError(
                "KeyItem.created doesnt match requirement:" 
                "required: True"
            )
        if (self._created is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._created)):
            raise ValueError(
                "KeyItem.created: " + str(self._created) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._description is not None
            and
            len(self._description) > 255):
            raise ValueError(
                "KeyItem.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 255")
        return True
    

