"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AccessTypeEnum import AccessTypeEnum
from .LicenseMetadata import LicenseMetadata

# Unused import over optimization prevention
str(repr(AccessTypeEnum))
str(repr(LicenseMetadata))


if sys.version_info > (3,):
    long = int
    unicode = str

class ArtifactPublishRequest(object):
    """Request to publish an artifact"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accessType = (
            None if not fromDict or propDict.get(
                "accessType"
            ) is None
            else propDict["accessType"])
        self.canGuestPull = (
            None if not fromDict or propDict.get(
                "canGuestPull"
            ) is None
            else propDict["canGuestPull"])
        self.canPublicList = (
            None if not fromDict or propDict.get(
                "canPublicList"
            ) is None
            else propDict["canPublicList"])
        self.isPublic = (
            None if not fromDict or propDict.get(
                "isPublic"
            ) is None
            else propDict["isPublic"])
        self.licenseTerms = (
            None if not fromDict or propDict.get(
                "licenseTerms"
            ) is None
            else [ LicenseMetadata(i)
            for i in propDict["licenseTerms"] ])
        self.productNames = (
            None if not fromDict or propDict.get(
                "productNames"
            ) is None
            else propDict["productNames"])

    @property
    def accessType(self):
        """ """
        return self._accessType

    @accessType.setter
    def accessType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._accessType = value
        else:
            raise TypeError(
                'Property "accessType" of type "list<AccessTypeEnum>" set to '
                'wrong type'
            )

    @property
    def canGuestPull(self):
        """ """
        return self._canGuestPull

    @canGuestPull.setter
    def canGuestPull(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canGuestPull = value
        else:
            raise TypeError(
                'Property "canGuestPull" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def canPublicList(self):
        """ """
        return self._canPublicList

    @canPublicList.setter
    def canPublicList(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canPublicList = value
        else:
            raise TypeError(
                'Property "canPublicList" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def isPublic(self):
        """ """
        return self._isPublic

    @isPublic.setter
    def isPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isPublic = value
        else:
            raise TypeError(
                'Property "isPublic" of type "list<bool>" set to wrong type'
            )

    @property
    def licenseTerms(self):
        """list: License information for the model"""
        return self._licenseTerms

    @licenseTerms.setter
    def licenseTerms(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._licenseTerms = value
        else:
            raise TypeError(
                'Property "licenseTerms" of type "list<LicenseMetadata>" set '
                'to wrong type'
            )

    @property
    def productNames(self):
        """list: Product names"""
        return self._productNames

    @productNames.setter
    def productNames(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productNames = value
        else:
            raise TypeError(
                'Property "productNames" of type "list<str>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._accessType is not None:
            result["accessType"] = \
                self._accessType
        if self._canGuestPull is not None:
            result["canGuestPull"] = \
                self._canGuestPull
        if self._canPublicList is not None:
            result["canPublicList"] = \
                self._canPublicList
        if self._isPublic is not None:
            result["isPublic"] = \
                self._isPublic
        if self._licenseTerms:
            result["licenseTerms"] = [
                i.toDict() for i in self._licenseTerms 
            ] if self._licenseTerms else []
        if self._productNames is not None:
            result["productNames"] = \
                self._productNames
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._licenseTerms is not None):
            for obj in self._licenseTerms:
                if (obj is not None): obj.isValid()
        return True
    

