"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AccessTypeEnum import AccessTypeEnum
from .ArtifactTypeEnum import ArtifactTypeEnum
from .LicenseMetadata import LicenseMetadata
from .ArtifactAttribute import ArtifactAttribute

# Unused import over optimization prevention
str(repr(AccessTypeEnum))
str(repr(ArtifactAttribute))
str(repr(LicenseMetadata))
str(repr(ArtifactTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Artifact(object):
    """Artifact object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accessType = (
            None if not fromDict or propDict.get(
                "accessType"
            ) is None
            else propDict["accessType"])
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else [ ArtifactAttribute(i)
            for i in propDict["attributes"] ])
        self.bias = (
            None if not fromDict or propDict.get(
                "bias"
            ) is None
            else propDict["bias"])
        self.builtBy = (
            None if not fromDict or propDict.get(
                "builtBy"
            ) is None
            else propDict["builtBy"])
        self.canGuestDownload = (
            None if not fromDict or propDict.get(
                "canGuestDownload"
            ) is None
            else propDict["canGuestDownload"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.encryptionKeyId = (
            None if not fromDict or propDict.get(
                "encryptionKeyId"
            ) is None
            else propDict["encryptionKeyId"])
        self.explainability = (
            None if not fromDict or propDict.get(
                "explainability"
            ) is None
            else propDict["explainability"])
        self.hasSignedVersion = (
            None if not fromDict or propDict.get(
                "hasSignedVersion"
            ) is None
            else propDict["hasSignedVersion"])
        self.isFavourite = (
            None if not fromDict or propDict.get(
                "isFavourite"
            ) is None
            else propDict["isFavourite"])
        self.isPublic = (
            None if not fromDict or propDict.get(
                "isPublic"
            ) is None
            else propDict["isPublic"])
        self.isReadOnly = (
            None if not fromDict or propDict.get(
                "isReadOnly"
            ) is None
            else propDict["isReadOnly"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.latestVersionId = (
            None if not fromDict or propDict.get(
                "latestVersionId"
            ) is None
            else propDict["latestVersionId"])
        self.latestVersionSizeInBytes = (
            None if not fromDict or propDict.get(
                "latestVersionSizeInBytes"
            ) is None
            else propDict["latestVersionSizeInBytes"])
        self.licenseTerms = (
            None if not fromDict or propDict.get(
                "licenseTerms"
            ) is None
            else [ LicenseMetadata(i)
            for i in propDict["licenseTerms"] ])
        self.logo = (
            None if not fromDict or propDict.get(
                "logo"
            ) is None
            else propDict["logo"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.ownerName = (
            None if not fromDict or propDict.get(
                "ownerName"
            ) is None
            else propDict["ownerName"])
        self.policyLabels = (
            None if not fromDict or propDict.get(
                "policyLabels"
            ) is None
            else propDict["policyLabels"])
        self.privacy = (
            None if not fromDict or propDict.get(
                "privacy"
            ) is None
            else propDict["privacy"])
        self.productNames = (
            None if not fromDict or propDict.get(
                "productNames"
            ) is None
            else propDict["productNames"])
        self.publisher = (
            None if not fromDict or propDict.get(
                "publisher"
            ) is None
            else propDict["publisher"])
        self.safetyAndSecurity = (
            None if not fromDict or propDict.get(
                "safetyAndSecurity"
            ) is None
            else propDict["safetyAndSecurity"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def accessType(self):
        """ """
        return self._accessType

    @accessType.setter
    def accessType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._accessType = value
        else:
            raise TypeError(
                'Property "accessType" of type "list<AccessTypeEnum>" set to '
                'wrong type'
            )

    @property
    def artifactType(self):
        """ArtifactTypeEnum: Artifact type"""
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<ArtifactTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def attributes(self):
        """list: Attribute key/value pairs"""
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<ArtifactAttribute>" set '
                'to wrong type'
            )

    @property
    def bias(self):
        """str: Text describing bias in the artifact"""
        return self._bias

    @bias.setter
    def bias(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._bias = value
        else:
            raise TypeError(
                'Property "bias" of type "list<str>" set to wrong type'
            )

    @property
    def builtBy(self):
        """str: Organization that built the helm chart"""
        return self._builtBy

    @builtBy.setter
    def builtBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._builtBy = value
        else:
            raise TypeError(
                'Property "builtBy" of type "list<str>" set to wrong type'
            )

    @property
    def canGuestDownload(self):
        """bool: Indicates if a guest user can download"""
        return self._canGuestDownload

    @canGuestDownload.setter
    def canGuestDownload(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canGuestDownload = value
        else:
            raise TypeError(
                'Property "canGuestDownload" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def createdDate(self):
        """str: Creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the helm chart"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def encryptionKeyId(self):
        """str: ID of the customer managed encryption key associated with this
         artifact"""
        return self._encryptionKeyId

    @encryptionKeyId.setter
    def encryptionKeyId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._encryptionKeyId = value
        else:
            raise TypeError(
                'Property "encryptionKeyId" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def explainability(self):
        """str: Text describing the explainability for this artifact"""
        return self._explainability

    @explainability.setter
    def explainability(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._explainability = value
        else:
            raise TypeError(
                'Property "explainability" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def hasSignedVersion(self):
        """bool: Indicates if the artifact has any signed versions"""
        return self._hasSignedVersion

    @hasSignedVersion.setter
    def hasSignedVersion(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedVersion = value
        else:
            raise TypeError(
                'Property "hasSignedVersion" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def isFavourite(self):
        """bool: Flag indicating if helm chart is user's favorite"""
        return self._isFavourite

    @isFavourite.setter
    def isFavourite(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isFavourite = value
        else:
            raise TypeError(
                'Property "isFavourite" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def isPublic(self):
        """bool: Determines if this helm chart is publicly accessible"""
        return self._isPublic

    @isPublic.setter
    def isPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isPublic = value
        else:
            raise TypeError(
                'Property "isPublic" of type "list<bool>" set to wrong type'
            )

    @property
    def isReadOnly(self):
        """bool: indicate if current user has read only permissions"""
        return self._isReadOnly

    @isReadOnly.setter
    def isReadOnly(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isReadOnly = value
        else:
            raise TypeError(
                'Property "isReadOnly" of type "list<bool>" set to wrong type'
            )

    @property
    def labels(self):
        """ """
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def latestVersionId(self):
        """str: ID of the latest version"""
        return self._latestVersionId

    @latestVersionId.setter
    def latestVersionId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._latestVersionId = value
        else:
            raise TypeError(
                'Property "latestVersionId" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def latestVersionSizeInBytes(self):
        """long: Size of the latest version in bytes"""
        return self._latestVersionSizeInBytes

    @latestVersionSizeInBytes.setter
    def latestVersionSizeInBytes(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._latestVersionSizeInBytes = value
        else:
            raise TypeError(
                'Property "latestVersionSizeInBytes" of type "list<long>" set'
                ' to wrong type'
            )

    @property
    def licenseTerms(self):
        """list: License information for the model"""
        return self._licenseTerms

    @licenseTerms.setter
    def licenseTerms(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._licenseTerms = value
        else:
            raise TypeError(
                'Property "licenseTerms" of type "list<LicenseMetadata>" set '
                'to wrong type'
            )

    @property
    def logo(self):
        """str: URL for the logo image"""
        return self._logo

    @logo.setter
    def logo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logo = value
        else:
            raise TypeError(
                'Property "logo" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Unique name of the helm chart"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Name of the org that the helm chart belongs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def ownerName(self):
        """str: Name of the user who owns this version"""
        return self._ownerName

    @ownerName.setter
    def ownerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ownerName = value
        else:
            raise TypeError(
                'Property "ownerName" of type "list<str>" set to wrong type'
            )

    @property
    def policyLabels(self):
        """list: list of policy labels on the artifact"""
        return self._policyLabels

    @policyLabels.setter
    def policyLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._policyLabels = value
        else:
            raise TypeError(
                'Property "policyLabels" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def privacy(self):
        """str: Text describing the privacy for this artifact"""
        return self._privacy

    @privacy.setter
    def privacy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._privacy = value
        else:
            raise TypeError(
                'Property "privacy" of type "list<str>" set to wrong type'
            )

    @property
    def productNames(self):
        """list: Product names"""
        return self._productNames

    @productNames.setter
    def productNames(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productNames = value
        else:
            raise TypeError(
                'Property "productNames" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def publisher(self):
        """str: Organization that published this helm chart"""
        return self._publisher

    @publisher.setter
    def publisher(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._publisher = value
        else:
            raise TypeError(
                'Property "publisher" of type "list<str>" set to wrong type'
            )

    @property
    def safetyAndSecurity(self):
        """str: Text for describing the safety and security in the artifact"""
        return self._safetyAndSecurity

    @safetyAndSecurity.setter
    def safetyAndSecurity(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._safetyAndSecurity = value
        else:
            raise TypeError(
                'Property "safetyAndSecurity" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def shortDescription(self):
        """str: Short description of the helm chart"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def teamName(self):
        """str: Name of the team that the helm chart belongs to"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Updated date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._accessType is not None:
            result["accessType"] = \
                self._accessType
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._attributes:
            result["attributes"] = [
                i.toDict() for i in self._attributes 
            ] if self._attributes else []
        if self._bias is not None:
            result["bias"] = \
                self._bias
        if self._builtBy is not None:
            result["builtBy"] = \
                self._builtBy
        if self._canGuestDownload is not None:
            result["canGuestDownload"] = \
                self._canGuestDownload
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._encryptionKeyId is not None:
            result["encryptionKeyId"] = \
                self._encryptionKeyId
        if self._explainability is not None:
            result["explainability"] = \
                self._explainability
        if self._hasSignedVersion is not None:
            result["hasSignedVersion"] = \
                self._hasSignedVersion
        if self._isFavourite is not None:
            result["isFavourite"] = \
                self._isFavourite
        if self._isPublic is not None:
            result["isPublic"] = \
                self._isPublic
        if self._isReadOnly is not None:
            result["isReadOnly"] = \
                self._isReadOnly
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._latestVersionId is not None:
            result["latestVersionId"] = \
                self._latestVersionId
        if self._latestVersionSizeInBytes is not None:
            result["latestVersionSizeInBytes"] = \
                self._latestVersionSizeInBytes
        if self._licenseTerms:
            result["licenseTerms"] = [
                i.toDict() for i in self._licenseTerms 
            ] if self._licenseTerms else []
        if self._logo is not None:
            result["logo"] = \
                self._logo
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._ownerName is not None:
            result["ownerName"] = \
                self._ownerName
        if self._policyLabels is not None:
            result["policyLabels"] = \
                self._policyLabels
        if self._privacy is not None:
            result["privacy"] = \
                self._privacy
        if self._productNames is not None:
            result["productNames"] = \
                self._productNames
        if self._publisher is not None:
            result["publisher"] = \
                self._publisher
        if self._safetyAndSecurity is not None:
            result["safetyAndSecurity"] = \
                self._safetyAndSecurity
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "Artifact.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._updatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._updatedDate)):
            raise ValueError(
                "Artifact.updatedDate: " + str(self._updatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._attributes is not None):
            for obj in self._attributes:
                if (obj is not None): obj.isValid()
        if (self._licenseTerms is not None):
            for obj in self._licenseTerms:
                if (obj is not None): obj.isValid()
        return True
    

