"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AssetCdnProviderTypeEnum import AssetCdnProviderTypeEnum
from .AssetStatusTypeEnum import AssetStatusTypeEnum
from .AssetStorageTypeEnum import AssetStorageTypeEnum
from .ArtifactAttribute import ArtifactAttribute
from .ArtifactTypeEnum import ArtifactTypeEnum

# Unused import over optimization prevention
str(repr(AssetStorageTypeEnum))
str(repr(ArtifactAttribute))
str(repr(ArtifactTypeEnum))
str(repr(AssetStatusTypeEnum))
str(repr(AssetCdnProviderTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Asset(object):
    """Asset object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.artifactName = (
            None if not fromDict or propDict.get(
                "artifactName"
            ) is None
            else propDict["artifactName"])
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else [ ArtifactAttribute(i)
            for i in propDict["attributes"] ])
        self.cdnProvider = (
            None if not fromDict or propDict.get(
                "cdnProvider"
            ) is None
            else propDict["cdnProvider"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.fileName = (
            None if not fromDict or propDict.get(
                "fileName"
            ) is None
            else propDict["fileName"])
        self.hostedAt = (
            None if not fromDict or propDict.get(
                "hostedAt"
            ) is None
            else propDict["hostedAt"])
        self.mimeType = (
            None if not fromDict or propDict.get(
                "mimeType"
            ) is None
            else propDict["mimeType"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.originUrl = (
            None if not fromDict or propDict.get(
                "originUrl"
            ) is None
            else propDict["originUrl"])
        self.ownerName = (
            None if not fromDict or propDict.get(
                "ownerName"
            ) is None
            else propDict["ownerName"])
        self.sizeInBytes = (
            None if not fromDict or propDict.get(
                "sizeInBytes"
            ) is None
            else propDict["sizeInBytes"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.storageProvider = (
            None if not fromDict or propDict.get(
                "storageProvider"
            ) is None
            else propDict["storageProvider"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])
        self.uploadUrl = (
            None if not fromDict or propDict.get(
                "uploadUrl"
            ) is None
            else propDict["uploadUrl"])

    @property
    def artifactName(self):
        """str: Artifact name that asset belongs to"""
        return self._artifactName

    @artifactName.setter
    def artifactName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._artifactName = value
        else:
            raise TypeError(
                'Property "artifactName" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def artifactType(self):
        """ArtifactTypeEnum: Artifact type"""
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<ArtifactTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def attributes(self):
        """list: Attribute key/value pairs"""
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<ArtifactAttribute>" set '
                'to wrong type'
            )

    @property
    def cdnProvider(self):
        """AssetCdnProviderTypeEnum: Asset content delivery network provider t
        ype"""
        return self._cdnProvider

    @cdnProvider.setter
    def cdnProvider(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._cdnProvider = value
        else:
            raise TypeError(
                'Property "cdnProvider" of type "list<AssetCdnProviderTypeEnu'
                'm>" set to wrong type'
            )

    @property
    def createdDate(self):
        """str: Creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def fileName(self):
        """str: Asset file name"""
        return self._fileName

    @fileName.setter
    def fileName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fileName = value
        else:
            raise TypeError(
                'Property "fileName" of type "list<str>" set to wrong type'
            )

    @property
    def hostedAt(self):
        """list: URLs where the asset is hosted"""
        return self._hostedAt

    @hostedAt.setter
    def hostedAt(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._hostedAt = value
        else:
            raise TypeError(
                'Property "hostedAt" of type "list<str>" set to wrong type'
            )

    @property
    def mimeType(self):
        """str: Asset mime type"""
        return self._mimeType

    @mimeType.setter
    def mimeType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mimeType = value
        else:
            raise TypeError(
                'Property "mimeType" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Unique name of the asset"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Name of the org that the collection belongs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def originUrl(self):
        """str: Asset origin URL"""
        return self._originUrl

    @originUrl.setter
    def originUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._originUrl = value
        else:
            raise TypeError(
                'Property "originUrl" of type "list<str>" set to wrong type'
            )

    @property
    def ownerName(self):
        """str: Name of the user who owns this version"""
        return self._ownerName

    @ownerName.setter
    def ownerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ownerName = value
        else:
            raise TypeError(
                'Property "ownerName" of type "list<str>" set to wrong type'
            )

    @property
    def sizeInBytes(self):
        """long: Size in bytes"""
        return self._sizeInBytes

    @sizeInBytes.setter
    def sizeInBytes(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._sizeInBytes = value
        else:
            raise TypeError(
                'Property "sizeInBytes" of type "list<long>" set to wrong typ'
                'e'
            )

    @property
    def status(self):
        """AssetStatusTypeEnum: Asset status type"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<AssetStatusTypeEnum>" set to'
                ' wrong type'
            )

    @property
    def storageProvider(self):
        """AssetStorageTypeEnum: Asset storage provider type"""
        return self._storageProvider

    @storageProvider.setter
    def storageProvider(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._storageProvider = value
        else:
            raise TypeError(
                'Property "storageProvider" of type "list<AssetStorageTypeEnu'
                'm>" set to wrong type'
            )

    @property
    def teamName(self):
        """str: Name of the team that the collection belongs to"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Updated date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    @property
    def uploadUrl(self):
        """str: Asset upload URL"""
        return self._uploadUrl

    @uploadUrl.setter
    def uploadUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._uploadUrl = value
        else:
            raise TypeError(
                'Property "uploadUrl" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._artifactName is not None:
            result["artifactName"] = \
                self._artifactName
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._attributes:
            result["attributes"] = [
                i.toDict() for i in self._attributes 
            ] if self._attributes else []
        if self._cdnProvider is not None:
            result["cdnProvider"] = \
                self._cdnProvider
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._fileName is not None:
            result["fileName"] = \
                self._fileName
        if self._hostedAt is not None:
            result["hostedAt"] = \
                self._hostedAt
        if self._mimeType is not None:
            result["mimeType"] = \
                self._mimeType
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._originUrl is not None:
            result["originUrl"] = \
                self._originUrl
        if self._ownerName is not None:
            result["ownerName"] = \
                self._ownerName
        if self._sizeInBytes is not None:
            result["sizeInBytes"] = \
                self._sizeInBytes
        if self._status is not None:
            result["status"] = \
                self._status
        if self._storageProvider is not None:
            result["storageProvider"] = \
                self._storageProvider
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        if self._uploadUrl is not None:
            result["uploadUrl"] = \
                self._uploadUrl
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._artifactType is None:
            raise ValueError(
                "Asset.artifactType doesnt match requirement:" 
                "required: True"
            )
        if self._artifactName is None:
            raise ValueError(
                "Asset.artifactName doesnt match requirement:" 
                "required: True"
            )
        if self._name is None:
            raise ValueError(
                "Asset.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) > 255):
            raise ValueError(
                "Asset.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 255")
        if self._status is None:
            raise ValueError(
                "Asset.status doesnt match requirement:" 
                "required: True"
            )
        if self._fileName is None:
            raise ValueError(
                "Asset.fileName doesnt match requirement:" 
                "required: True"
            )
        if (self._fileName is not None
            and
            len(self._fileName) > 255):
            raise ValueError(
                "Asset.fileName: " + str(self._fileName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._originUrl is not None
            and
            len(self._originUrl) > 2000):
            raise ValueError(
                "Asset.originUrl: " + str(self._originUrl) + 
                " doesnt match requirement: maxLength: 2000")
        if (self._originUrl is not None
            and
            not re.match(
                r"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0"
                "-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)"
                "+$",
                 self._originUrl)):
            raise ValueError(
                "Asset.originUrl: " + str(self._originUrl) + 
                " doesnt match requirement: pattern: ^https?:\/\/(www\.)?[-a-"
                "zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,"
                "6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)+$")
        if (self._uploadUrl is not None
            and
            not re.match(
                r"^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0"
                "-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)"
                "+$",
                 self._uploadUrl)):
            raise ValueError(
                "Asset.uploadUrl: " + str(self._uploadUrl) + 
                " doesnt match requirement: pattern: ^https?:\/\/(www\.)?[-a-"
                "zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,"
                "6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)+$")
        if self._orgName is None:
            raise ValueError(
                "Asset.orgName doesnt match requirement:" 
                "required: True"
            )
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "Asset.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._updatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._updatedDate)):
            raise ValueError(
                "Asset.updatedDate: " + str(self._updatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._attributes is not None):
            for obj in self._attributes:
                if (obj is not None): obj.isValid()
        return True
    

