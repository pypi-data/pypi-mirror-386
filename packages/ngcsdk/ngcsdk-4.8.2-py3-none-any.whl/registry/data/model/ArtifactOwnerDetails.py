"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ArtifactOwnerDetails(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.creatorUserEmail = (
            None if not fromDict or propDict.get(
                "creatorUserEmail"
            ) is None
            else propDict["creatorUserEmail"])
        self.orgAlternateContact = (
            None if not fromDict or propDict.get(
                "orgAlternateContact"
            ) is None
            else propDict["orgAlternateContact"])
        self.orgOwnersEmails = (
            None if not fromDict or propDict.get(
                "orgOwnersEmails"
            ) is None
            else propDict["orgOwnersEmails"])
        self.pushedByUserEmail = (
            None if not fromDict or propDict.get(
                "pushedByUserEmail"
            ) is None
            else propDict["pushedByUserEmail"])
        self.repositoryName = (
            None if not fromDict or propDict.get(
                "repositoryName"
            ) is None
            else propDict["repositoryName"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def createdDate(self):
        """str: Version pushed date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def creatorUserEmail(self):
        """str: Email address of account used to create"""
        return self._creatorUserEmail

    @creatorUserEmail.setter
    def creatorUserEmail(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creatorUserEmail = value
        else:
            raise TypeError(
                'Property "creatorUserEmail" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def orgAlternateContact(self):
        """str: Email address of alternate contact for organization the image 
        was pushed to"""
        return self._orgAlternateContact

    @orgAlternateContact.setter
    def orgAlternateContact(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgAlternateContact = value
        else:
            raise TypeError(
                'Property "orgAlternateContact" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def orgOwnersEmails(self):
        """list: Email addresses of all owners of organization the image was p
        ushed to"""
        return self._orgOwnersEmails

    @orgOwnersEmails.setter
    def orgOwnersEmails(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._orgOwnersEmails = value
        else:
            raise TypeError(
                'Property "orgOwnersEmails" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def pushedByUserEmail(self):
        """str: Email address of account used to create the Version"""
        return self._pushedByUserEmail

    @pushedByUserEmail.setter
    def pushedByUserEmail(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pushedByUserEmail = value
        else:
            raise TypeError(
                'Property "pushedByUserEmail" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def repositoryName(self):
        """str: The repository name"""
        return self._repositoryName

    @repositoryName.setter
    def repositoryName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._repositoryName = value
        else:
            raise TypeError(
                'Property "repositoryName" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def updatedDate(self):
        """str: Version update date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    @property
    def version(self):
        """str: Version"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._creatorUserEmail is not None:
            result["creatorUserEmail"] = \
                self._creatorUserEmail
        if self._orgAlternateContact is not None:
            result["orgAlternateContact"] = \
                self._orgAlternateContact
        if self._orgOwnersEmails is not None:
            result["orgOwnersEmails"] = \
                self._orgOwnersEmails
        if self._pushedByUserEmail is not None:
            result["pushedByUserEmail"] = \
                self._pushedByUserEmail
        if self._repositoryName is not None:
            result["repositoryName"] = \
                self._repositoryName
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

