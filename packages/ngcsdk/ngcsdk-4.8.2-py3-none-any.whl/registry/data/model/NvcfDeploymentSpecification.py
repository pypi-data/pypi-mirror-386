"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class NvcfDeploymentSpecification(object):
    """NVCF deployment specification"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.gpuCount = (
            None if not fromDict or propDict.get(
                "gpuCount"
            ) is None
            else propDict["gpuCount"])
        self.gpuType = (
            None if not fromDict or propDict.get(
                "gpuType"
            ) is None
            else propDict["gpuType"])
        self.instanceType = (
            None if not fromDict or propDict.get(
                "instanceType"
            ) is None
            else propDict["instanceType"])
        self.maxConcurrency = (
            None if not fromDict or propDict.get(
                "maxConcurrency"
            ) is None
            else propDict["maxConcurrency"])

    @property
    def gpuCount(self):
        """int: GPU count"""
        return self._gpuCount

    @gpuCount.setter
    def gpuCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._gpuCount = value
        else:
            raise TypeError(
                'Property "gpuCount" of type "list<int>" set to wrong type'
            )

    @property
    def gpuType(self):
        """str: GPU type"""
        return self._gpuType

    @gpuType.setter
    def gpuType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuType = value
        else:
            raise TypeError(
                'Property "gpuType" of type "list<str>" set to wrong type'
            )

    @property
    def instanceType(self):
        """str: Instance type"""
        return self._instanceType

    @instanceType.setter
    def instanceType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._instanceType = value
        else:
            raise TypeError(
                'Property "instanceType" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def maxConcurrency(self):
        """int: Maximum concurrency"""
        return self._maxConcurrency

    @maxConcurrency.setter
    def maxConcurrency(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._maxConcurrency = value
        else:
            raise TypeError(
                'Property "maxConcurrency" of type "list<int>" set to wrong t'
                'ype'
            )

    def toDict(self):
        result = {}
        if self._gpuCount is not None:
            result["gpuCount"] = \
                self._gpuCount
        if self._gpuType is not None:
            result["gpuType"] = \
                self._gpuType
        if self._instanceType is not None:
            result["instanceType"] = \
                self._instanceType
        if self._maxConcurrency is not None:
            result["maxConcurrency"] = \
                self._maxConcurrency
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

