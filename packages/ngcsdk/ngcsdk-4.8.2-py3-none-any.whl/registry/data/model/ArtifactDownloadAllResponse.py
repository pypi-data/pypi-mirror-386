"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .PaginationInfo import PaginationInfo

# Unused import over optimization prevention
str(repr(PaginationInfo))
str(repr(RequestStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class ArtifactDownloadAllResponse(object):
    """Response body to download all files of an artifact"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.filepath = (
            None if not fromDict or propDict.get(
                "filepath"
            ) is None
            else propDict["filepath"])
        self.paginationInfo = (
            None if not fromDict or propDict.get(
                "paginationInfo"
            ) is None
            else propDict["paginationInfo"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])
        self.sha256_base64 = (
            None if not fromDict or propDict.get(
                "sha256_base64"
            ) is None
            else propDict["sha256_base64"])
        self.urls = (
            None if not fromDict or propDict.get(
                "urls"
            ) is None
            else propDict["urls"])

    @property
    def filepath(self):
        """list: All of the filepath of the artifact"""
        return self._filepath

    @filepath.setter
    def filepath(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._filepath = value
        else:
            raise TypeError(
                'Property "filepath" of type "list<str>" set to wrong type'
            )

    @property
    def paginationInfo(self):
        """PaginationInfo: Pagination Information"""
        return self._paginationInfo

    @paginationInfo.setter
    def paginationInfo(self, value):
        if value is not None and not isinstance(value, PaginationInfo):
            value = PaginationInfo(value)
        if (value is None) or isinstance(value, PaginationInfo):
            self._paginationInfo = value
        else:
            raise TypeError(
                'Property "paginationInfo" of type "list<PaginationInfo>" set'
                ' to wrong type'
            )

    @property
    def requestStatus(self):
        """RequestStatus: Request status information"""
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    @property
    def sha256_base64(self):
        """list: List of base64 encoded sha256 hash of the files"""
        return self._sha256_base64

    @sha256_base64.setter
    def sha256_base64(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sha256_base64 = value
        else:
            raise TypeError(
                'Property "sha256_base64" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def urls(self):
        """list: List of presigned urls of  download"""
        return self._urls

    @urls.setter
    def urls(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._urls = value
        else:
            raise TypeError(
                'Property "urls" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._filepath is not None:
            result["filepath"] = \
                self._filepath
        if self._paginationInfo:
            result["paginationInfo"] = \
                self._paginationInfo.toDict() if self._paginationInfo is not None else None
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        if self._sha256_base64 is not None:
            result["sha256_base64"] = \
                self._sha256_base64
        if self._urls is not None:
            result["urls"] = \
                self._urls
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._urls is None:
            raise ValueError(
                "ArtifactDownloadAllResponse.urls doesnt match requirement:" 
                "required: True"
            )
        if self._filepath is None:
            raise ValueError(
                "ArtifactDownloadAllResponse.filepath doesnt match requirement:" 
                "required: True"
            )
        if (self._paginationInfo is not None): self._paginationInfo.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

