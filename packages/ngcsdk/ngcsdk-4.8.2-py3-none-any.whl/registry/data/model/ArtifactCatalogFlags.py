"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ArtifactCatalogFlags(object):
    """Artifact Catalog Flags object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.canGuestDownload = (
            None if not fromDict or propDict.get(
                "canGuestDownload"
            ) is None
            else propDict["canGuestDownload"])
        self.isListedToPublic = (
            None if not fromDict or propDict.get(
                "isListedToPublic"
            ) is None
            else propDict["isListedToPublic"])
        self.isPublic = (
            None if not fromDict or propDict.get(
                "isPublic"
            ) is None
            else propDict["isPublic"])

    @property
    def canGuestDownload(self):
        """bool: Indicates if a guest user can download"""
        return self._canGuestDownload

    @canGuestDownload.setter
    def canGuestDownload(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canGuestDownload = value
        else:
            raise TypeError(
                'Property "canGuestDownload" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def isListedToPublic(self):
        """bool: Flag indicating if artifact is listed and searchable"""
        return self._isListedToPublic

    @isListedToPublic.setter
    def isListedToPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isListedToPublic = value
        else:
            raise TypeError(
                'Property "isListedToPublic" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def isPublic(self):
        """bool: Determines if this artifact is publicly accessible"""
        return self._isPublic

    @isPublic.setter
    def isPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isPublic = value
        else:
            raise TypeError(
                'Property "isPublic" of type "list<bool>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._canGuestDownload is not None:
            result["canGuestDownload"] = \
                self._canGuestDownload
        if self._isListedToPublic is not None:
            result["isListedToPublic"] = \
                self._isListedToPublic
        if self._isPublic is not None:
            result["isPublic"] = \
                self._isPublic
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

