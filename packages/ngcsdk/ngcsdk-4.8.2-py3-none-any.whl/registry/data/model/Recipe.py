"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .LicenseMetadata import LicenseMetadata
from .ApplicationType import ApplicationTypeEnum
from .Dataset import Dataset
from .PrecisionType import PrecisionTypeEnum
from .AccessTypeEnum import AccessTypeEnum
from .FrameworkType import FrameworkTypeEnum
from .Model import Model

# Unused import over optimization prevention
str(repr(LicenseMetadata))
str(repr(PrecisionTypeEnum))
str(repr(Model))
str(repr(Dataset))
str(repr(FrameworkTypeEnum))
str(repr(AccessTypeEnum))
str(repr(ApplicationTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Recipe(object):
    """Recipe object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accessType = (
            None if not fromDict or propDict.get(
                "accessType"
            ) is None
            else propDict["accessType"])
        self.advanced = (
            None if not fromDict or propDict.get(
                "advanced"
            ) is None
            else propDict["advanced"])
        self.application = (
            None if not fromDict or propDict.get(
                "application"
            ) is None
            else propDict["application"])
        self.builtBy = (
            None if not fromDict or propDict.get(
                "builtBy"
            ) is None
            else propDict["builtBy"])
        self.canGuestDownload = (
            None if not fromDict or propDict.get(
                "canGuestDownload"
            ) is None
            else propDict["canGuestDownload"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.hasSignedVersion = (
            None if not fromDict or propDict.get(
                "hasSignedVersion"
            ) is None
            else propDict["hasSignedVersion"])
        self.isFavourite = (
            None if not fromDict or propDict.get(
                "isFavourite"
            ) is None
            else propDict["isFavourite"])
        self.isPublic = (
            None if not fromDict or propDict.get(
                "isPublic"
            ) is None
            else propDict["isPublic"])
        self.isReadOnly = (
            None if not fromDict or propDict.get(
                "isReadOnly"
            ) is None
            else propDict["isReadOnly"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.latestVersionId = (
            None if not fromDict or propDict.get(
                "latestVersionId"
            ) is None
            else propDict["latestVersionId"])
        self.latestVersionIdStr = (
            None if not fromDict or propDict.get(
                "latestVersionIdStr"
            ) is None
            else propDict["latestVersionIdStr"])
        self.latestVersionSizeInBytes = (
            None if not fromDict or propDict.get(
                "latestVersionSizeInBytes"
            ) is None
            else propDict["latestVersionSizeInBytes"])
        self.licenseTerms = (
            None if not fromDict or propDict.get(
                "licenseTerms"
            ) is None
            else [ LicenseMetadata(i)
            for i in propDict["licenseTerms"] ])
        self.logo = (
            None if not fromDict or propDict.get(
                "logo"
            ) is None
            else propDict["logo"])
        self.modelFormat = (
            None if not fromDict or propDict.get(
                "modelFormat"
            ) is None
            else propDict["modelFormat"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.performance = (
            None if not fromDict or propDict.get(
                "performance"
            ) is None
            else propDict["performance"])
        self.policyLabels = (
            None if not fromDict or propDict.get(
                "policyLabels"
            ) is None
            else propDict["policyLabels"])
        self.precision = (
            None if not fromDict or propDict.get(
                "precision"
            ) is None
            else propDict["precision"])
        self.productNames = (
            None if not fromDict or propDict.get(
                "productNames"
            ) is None
            else propDict["productNames"])
        self.publicDatasetUsed = (
            None if not fromDict or propDict.get(
                "publicDatasetUsed"
            ) is None
            else propDict["publicDatasetUsed"])
        self.publisher = (
            None if not fromDict or propDict.get(
                "publisher"
            ) is None
            else propDict["publisher"])
        self.quickStartGuide = (
            None if not fromDict or propDict.get(
                "quickStartGuide"
            ) is None
            else propDict["quickStartGuide"])
        self.relatedModels = (
            None if not fromDict or propDict.get(
                "relatedModels"
            ) is None
            else [ Model(i)
            for i in propDict["relatedModels"] ])
        self.setup = (
            None if not fromDict or propDict.get(
                "setup"
            ) is None
            else propDict["setup"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.trainingFramework = (
            None if not fromDict or propDict.get(
                "trainingFramework"
            ) is None
            else propDict["trainingFramework"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def accessType(self):
        """ """
        return self._accessType

    @accessType.setter
    def accessType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._accessType = value
        else:
            raise TypeError(
                'Property "accessType" of type "list<AccessTypeEnum>" set to '
                'wrong type'
            )

    @property
    def advanced(self):
        """str: Text for describing advanced information"""
        return self._advanced

    @advanced.setter
    def advanced(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._advanced = value
        else:
            raise TypeError(
                'Property "advanced" of type "list<str>" set to wrong type'
            )

    @property
    def application(self):
        """ """
        return self._application

    @application.setter
    def application(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._application = value
        else:
            raise TypeError(
                'Property "application" of type "list<ApplicationTypeEnum>" s'
                'et to wrong type'
            )

    @property
    def builtBy(self):
        """str: Organization that built the recipe"""
        return self._builtBy

    @builtBy.setter
    def builtBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._builtBy = value
        else:
            raise TypeError(
                'Property "builtBy" of type "list<str>" set to wrong type'
            )

    @property
    def canGuestDownload(self):
        """bool: Indicates if a guest user can download"""
        return self._canGuestDownload

    @canGuestDownload.setter
    def canGuestDownload(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canGuestDownload = value
        else:
            raise TypeError(
                'Property "canGuestDownload" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def createdDate(self):
        """str: Creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the recipe"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def hasSignedVersion(self):
        """bool: Indicates if the recipe has any signed versions"""
        return self._hasSignedVersion

    @hasSignedVersion.setter
    def hasSignedVersion(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedVersion = value
        else:
            raise TypeError(
                'Property "hasSignedVersion" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def isFavourite(self):
        """bool: Flag indicating if recipe is user's favorite"""
        return self._isFavourite

    @isFavourite.setter
    def isFavourite(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isFavourite = value
        else:
            raise TypeError(
                'Property "isFavourite" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def isPublic(self):
        """bool: Determines if this recipe is publicly accessible"""
        return self._isPublic

    @isPublic.setter
    def isPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isPublic = value
        else:
            raise TypeError(
                'Property "isPublic" of type "list<bool>" set to wrong type'
            )

    @property
    def isReadOnly(self):
        """bool: indicate if current user has read only permissions"""
        return self._isReadOnly

    @isReadOnly.setter
    def isReadOnly(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isReadOnly = value
        else:
            raise TypeError(
                'Property "isReadOnly" of type "list<bool>" set to wrong type'
            )

    @property
    def labels(self):
        """ """
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def latestVersionId(self):
        """long: Deprecated: Please use latestVersionIdStr instead. ID of the 
        latest version"""
        return self._latestVersionId

    @latestVersionId.setter
    def latestVersionId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._latestVersionId = value
        else:
            raise TypeError(
                'Property "latestVersionId" of type "list<long>" set to wrong'
                ' type'
            )

    @property
    def latestVersionIdStr(self):
        """str: ID of the latest version"""
        return self._latestVersionIdStr

    @latestVersionIdStr.setter
    def latestVersionIdStr(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._latestVersionIdStr = value
        else:
            raise TypeError(
                'Property "latestVersionIdStr" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def latestVersionSizeInBytes(self):
        """long: Size of the latest version in bytes"""
        return self._latestVersionSizeInBytes

    @latestVersionSizeInBytes.setter
    def latestVersionSizeInBytes(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._latestVersionSizeInBytes = value
        else:
            raise TypeError(
                'Property "latestVersionSizeInBytes" of type "list<long>" set'
                ' to wrong type'
            )

    @property
    def licenseTerms(self):
        """list: License information for the model"""
        return self._licenseTerms

    @licenseTerms.setter
    def licenseTerms(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._licenseTerms = value
        else:
            raise TypeError(
                'Property "licenseTerms" of type "list<LicenseMetadata>" set '
                'to wrong type'
            )

    @property
    def logo(self):
        """str: URL for the logo image"""
        return self._logo

    @logo.setter
    def logo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logo = value
        else:
            raise TypeError(
                'Property "logo" of type "list<str>" set to wrong type'
            )

    @property
    def modelFormat(self):
        """str: Format of the model this recipe produces"""
        return self._modelFormat

    @modelFormat.setter
    def modelFormat(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._modelFormat = value
        else:
            raise TypeError(
                'Property "modelFormat" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Unique name of the recipe"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Name of the org that the recipe belongs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def performance(self):
        """str: Text describing performance of the recipe results"""
        return self._performance

    @performance.setter
    def performance(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._performance = value
        else:
            raise TypeError(
                'Property "performance" of type "list<str>" set to wrong type'
            )

    @property
    def policyLabels(self):
        """list: list of policy labels on the artifact"""
        return self._policyLabels

    @policyLabels.setter
    def policyLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._policyLabels = value
        else:
            raise TypeError(
                'Property "policyLabels" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def precision(self):
        """ """
        return self._precision

    @precision.setter
    def precision(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._precision = value
        else:
            raise TypeError(
                'Property "precision" of type "list<PrecisionTypeEnum>" set t'
                'o wrong type'
            )

    @property
    def productNames(self):
        """list: Product names"""
        return self._productNames

    @productNames.setter
    def productNames(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productNames = value
        else:
            raise TypeError(
                'Property "productNames" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def publicDatasetUsed(self):
        """ """
        return self._publicDatasetUsed

    @publicDatasetUsed.setter
    def publicDatasetUsed(self, value):
        if value is not None and not isinstance(value, Dataset):
            value = Dataset(value)
        if (value is None) or isinstance(value, Dataset):
            self._publicDatasetUsed = value
        else:
            raise TypeError(
                'Property "publicDatasetUsed" of type "list<Dataset>" set to '
                'wrong type'
            )

    @property
    def publisher(self):
        """str: Organization that published this recipe"""
        return self._publisher

    @publisher.setter
    def publisher(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._publisher = value
        else:
            raise TypeError(
                'Property "publisher" of type "list<str>" set to wrong type'
            )

    @property
    def quickStartGuide(self):
        """str: Text with a guide to getting started"""
        return self._quickStartGuide

    @quickStartGuide.setter
    def quickStartGuide(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._quickStartGuide = value
        else:
            raise TypeError(
                'Property "quickStartGuide" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def relatedModels(self):
        """ """
        return self._relatedModels

    @relatedModels.setter
    def relatedModels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._relatedModels = value
        else:
            raise TypeError(
                'Property "relatedModels" of type "list<Model>" set to wrong '
                'type'
            )

    @property
    def setup(self):
        """str: Text describing recipe setup"""
        return self._setup

    @setup.setter
    def setup(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._setup = value
        else:
            raise TypeError(
                'Property "setup" of type "list<str>" set to wrong type'
            )

    @property
    def shortDescription(self):
        """str: Short description of the recipe"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def teamName(self):
        """str: Name of the team that the recipe belongs to"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def trainingFramework(self):
        """ """
        return self._trainingFramework

    @trainingFramework.setter
    def trainingFramework(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._trainingFramework = value
        else:
            raise TypeError(
                'Property "trainingFramework" of type "list<FrameworkTypeEnum'
                '>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Updated date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._accessType is not None:
            result["accessType"] = \
                self._accessType
        if self._advanced is not None:
            result["advanced"] = \
                self._advanced
        if self._application is not None:
            result["application"] = \
                self._application
        if self._builtBy is not None:
            result["builtBy"] = \
                self._builtBy
        if self._canGuestDownload is not None:
            result["canGuestDownload"] = \
                self._canGuestDownload
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._hasSignedVersion is not None:
            result["hasSignedVersion"] = \
                self._hasSignedVersion
        if self._isFavourite is not None:
            result["isFavourite"] = \
                self._isFavourite
        if self._isPublic is not None:
            result["isPublic"] = \
                self._isPublic
        if self._isReadOnly is not None:
            result["isReadOnly"] = \
                self._isReadOnly
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._latestVersionId is not None:
            result["latestVersionId"] = \
                self._latestVersionId
        if self._latestVersionIdStr is not None:
            result["latestVersionIdStr"] = \
                self._latestVersionIdStr
        if self._latestVersionSizeInBytes is not None:
            result["latestVersionSizeInBytes"] = \
                self._latestVersionSizeInBytes
        if self._licenseTerms:
            result["licenseTerms"] = [
                i.toDict() for i in self._licenseTerms 
            ] if self._licenseTerms else []
        if self._logo is not None:
            result["logo"] = \
                self._logo
        if self._modelFormat is not None:
            result["modelFormat"] = \
                self._modelFormat
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._performance is not None:
            result["performance"] = \
                self._performance
        if self._policyLabels is not None:
            result["policyLabels"] = \
                self._policyLabels
        if self._precision is not None:
            result["precision"] = \
                self._precision
        if self._productNames is not None:
            result["productNames"] = \
                self._productNames
        if self._publicDatasetUsed:
            result["publicDatasetUsed"] = \
                self._publicDatasetUsed.toDict() if self._publicDatasetUsed is not None else None
        if self._publisher is not None:
            result["publisher"] = \
                self._publisher
        if self._quickStartGuide is not None:
            result["quickStartGuide"] = \
                self._quickStartGuide
        if self._relatedModels:
            result["relatedModels"] = [
                i.toDict() for i in self._relatedModels 
            ] if self._relatedModels else []
        if self._setup is not None:
            result["setup"] = \
                self._setup
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._trainingFramework is not None:
            result["trainingFramework"] = \
                self._trainingFramework
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "Recipe.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._updatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._updatedDate)):
            raise ValueError(
                "Recipe.updatedDate: " + str(self._updatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._publicDatasetUsed is not None): self._publicDatasetUsed.isValid()
        if (self._relatedModels is not None):
            for obj in self._relatedModels:
                if (obj is not None): obj.isValid()
        if (self._licenseTerms is not None):
            for obj in self._licenseTerms:
                if (obj is not None): obj.isValid()
        return True
    

