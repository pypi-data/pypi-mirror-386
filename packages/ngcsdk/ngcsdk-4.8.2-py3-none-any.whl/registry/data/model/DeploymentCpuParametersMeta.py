"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .CountableResource import CountableResource

# Unused import over optimization prevention
str(repr(CountableResource))


if sys.version_info > (3,):
    long = int
    unicode = str

class DeploymentCpuParametersMeta(object):
    """Cloud Service Provider Deployment CPU Parameters object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.count = (
            None if not fromDict or propDict.get(
                "count"
            ) is None
            else propDict["count"])

    @property
    def count(self):
        """CountableResource: Countable Resource object"""
        return self._count

    @count.setter
    def count(self, value):
        if value is not None and not isinstance(value, CountableResource):
            value = CountableResource(value)
        if (value is None) or isinstance(value, CountableResource):
            self._count = value
        else:
            raise TypeError(
                'Property "count" of type "list<CountableResource>" set to wr'
                'ong type'
            )

    def toDict(self):
        result = {}
        if self._count:
            result["count"] = \
                self._count.toDict() if self._count is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._count is None:
            raise ValueError(
                "DeploymentCpuParametersMeta.count doesnt match requirement:" 
                "required: True"
            )
        if (self._count is not None): self._count.isValid()
        return True
    

