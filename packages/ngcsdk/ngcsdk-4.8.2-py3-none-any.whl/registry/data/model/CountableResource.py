"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class CountableResource(object):
    """Countable Resource object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.defaultValue = (
            None if not fromDict or propDict.get(
                "defaultValue"
            ) is None
            else propDict["defaultValue"])
        self.maxValue = (
            None if not fromDict or propDict.get(
                "maxValue"
            ) is None
            else propDict["maxValue"])
        self.minValue = (
            None if not fromDict or propDict.get(
                "minValue"
            ) is None
            else propDict["minValue"])

    @property
    def defaultValue(self):
        """long: Deprecated: Default value. Please use actual CloudServiceProv
        ider values instead"""
        return self._defaultValue

    @defaultValue.setter
    def defaultValue(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._defaultValue = value
        else:
            raise TypeError(
                'Property "defaultValue" of type "list<long>" set to wrong ty'
                'pe'
            )

    @property
    def maxValue(self):
        """long: Maximum value"""
        return self._maxValue

    @maxValue.setter
    def maxValue(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._maxValue = value
        else:
            raise TypeError(
                'Property "maxValue" of type "list<long>" set to wrong type'
            )

    @property
    def minValue(self):
        """long: Minimum value"""
        return self._minValue

    @minValue.setter
    def minValue(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._minValue = value
        else:
            raise TypeError(
                'Property "minValue" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._defaultValue is not None:
            result["defaultValue"] = \
                self._defaultValue
        if self._maxValue is not None:
            result["maxValue"] = \
                self._maxValue
        if self._minValue is not None:
            result["minValue"] = \
                self._minValue
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

