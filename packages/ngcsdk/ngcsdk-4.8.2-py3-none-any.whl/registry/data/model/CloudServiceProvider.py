"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ArtifactAttribute import ArtifactAttribute

# Unused import over optimization prevention
str(repr(ArtifactAttribute))


if sys.version_info > (3,):
    long = int
    unicode = str

class CloudServiceProvider(object):
    """Cloud Service Provider object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else [ ArtifactAttribute(i)
            for i in propDict["attributes"] ])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.isDeployable = (
            None if not fromDict or propDict.get(
                "isDeployable"
            ) is None
            else propDict["isDeployable"])
        self.isEnabled = (
            None if not fromDict or propDict.get(
                "isEnabled"
            ) is None
            else propDict["isEnabled"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.logo = (
            None if not fromDict or propDict.get(
                "logo"
            ) is None
            else propDict["logo"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def attributes(self):
        """list: Attribute key/value pairs"""
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<ArtifactAttribute>" set '
                'to wrong type'
            )

    @property
    def createdDate(self):
        """str: Creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the Cloud Service Provider"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name of the Cloud Service Provider"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def isDeployable(self):
        """bool: Determines if this Cloud Service Provider can be used to depl
        oy artifacts"""
        return self._isDeployable

    @isDeployable.setter
    def isDeployable(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isDeployable = value
        else:
            raise TypeError(
                'Property "isDeployable" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def isEnabled(self):
        """bool: Determines if this Cloud Service Provider is enabled"""
        return self._isEnabled

    @isEnabled.setter
    def isEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isEnabled = value
        else:
            raise TypeError(
                'Property "isEnabled" of type "list<bool>" set to wrong type'
            )

    @property
    def labels(self):
        """list: Labels that are associated with the Cloud Service Provider"""
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def logo(self):
        """str: URL for the logo image"""
        return self._logo

    @logo.setter
    def logo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logo = value
        else:
            raise TypeError(
                'Property "logo" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Unique name of the Cloud Service Provider"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Updated date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._attributes:
            result["attributes"] = [
                i.toDict() for i in self._attributes 
            ] if self._attributes else []
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._isDeployable is not None:
            result["isDeployable"] = \
                self._isDeployable
        if self._isEnabled is not None:
            result["isEnabled"] = \
                self._isEnabled
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._logo is not None:
            result["logo"] = \
                self._logo
        if self._name is not None:
            result["name"] = \
                self._name
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "CloudServiceProvider.name doesnt match requirement:" 
                "required: True"
            )
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "CloudServiceProvider.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._updatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._updatedDate)):
            raise ValueError(
                "CloudServiceProvider.updatedDate: " + str(self._updatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._attributes is not None):
            for obj in self._attributes:
                if (obj is not None): obj.isValid()
        return True
    

