"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .LicenseMetadata import LicenseMetadata

# Unused import over optimization prevention
str(repr(LicenseMetadata))


if sys.version_info > (3,):
    long = int
    unicode = str

class RepositoryCreateRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.builtBy = (
            None if not fromDict or propDict.get(
                "builtBy"
            ) is None
            else propDict["builtBy"])
        self.categories = (
            None if not fromDict or propDict.get(
                "categories"
            ) is None
            else propDict["categories"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.isMultinodeEnabled = (
            None if not fromDict or propDict.get(
                "isMultinodeEnabled"
            ) is None
            else propDict["isMultinodeEnabled"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.labelsV2 = (
            None if not fromDict or propDict.get(
                "labelsV2"
            ) is None
            else propDict["labelsV2"])
        self.licenseTerms = (
            None if not fromDict or propDict.get(
                "licenseTerms"
            ) is None
            else [ LicenseMetadata(i)
            for i in propDict["licenseTerms"] ])
        self.logo = (
            None if not fromDict or propDict.get(
                "logo"
            ) is None
            else propDict["logo"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.publisher = (
            None if not fromDict or propDict.get(
                "publisher"
            ) is None
            else propDict["publisher"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])

    @property
    def builtBy(self):
        """str: organization that built the repository"""
        return self._builtBy

    @builtBy.setter
    def builtBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._builtBy = value
        else:
            raise TypeError(
                'Property "builtBy" of type "list<str>" set to wrong type'
            )

    @property
    def categories(self):
        """list: list of categories the repository belongs to"""
        return self._categories

    @categories.setter
    def categories(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._categories = value
        else:
            raise TypeError(
                'Property "categories" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: description of the repo"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """ """
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def isMultinodeEnabled(self):
        """bool: indicate if multinode job can be ran using the repo"""
        return self._isMultinodeEnabled

    @isMultinodeEnabled.setter
    def isMultinodeEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMultinodeEnabled = value
        else:
            raise TypeError(
                'Property "isMultinodeEnabled" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def labels(self):
        """list: list of labels on the repository"""
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def labelsV2(self):
        """ """
        return self._labelsV2

    @labelsV2.setter
    def labelsV2(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labelsV2 = value
        else:
            raise TypeError(
                'Property "labelsV2" of type "list<str>" set to wrong type'
            )

    @property
    def licenseTerms(self):
        """list: License information for the model"""
        return self._licenseTerms

    @licenseTerms.setter
    def licenseTerms(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._licenseTerms = value
        else:
            raise TypeError(
                'Property "licenseTerms" of type "list<LicenseMetadata>" set '
                'to wrong type'
            )

    @property
    def logo(self):
        """str: url to repository logo"""
        return self._logo

    @logo.setter
    def logo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logo = value
        else:
            raise TypeError(
                'Property "logo" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: unique name of the repo"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def publisher(self):
        """str: organization that published the repository"""
        return self._publisher

    @publisher.setter
    def publisher(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._publisher = value
        else:
            raise TypeError(
                'Property "publisher" of type "list<str>" set to wrong type'
            )

    @property
    def shortDescription(self):
        """str: short description of the repo"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._builtBy is not None:
            result["builtBy"] = \
                self._builtBy
        if self._categories is not None:
            result["categories"] = \
                self._categories
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._isMultinodeEnabled is not None:
            result["isMultinodeEnabled"] = \
                self._isMultinodeEnabled
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._labelsV2 is not None:
            result["labelsV2"] = \
                self._labelsV2
        if self._licenseTerms:
            result["licenseTerms"] = [
                i.toDict() for i in self._licenseTerms 
            ] if self._licenseTerms else []
        if self._logo is not None:
            result["logo"] = \
                self._logo
        if self._name is not None:
            result["name"] = \
                self._name
        if self._publisher is not None:
            result["publisher"] = \
                self._publisher
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "RepositoryCreateRequest.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "RepositoryCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._name is not None
            and
            len(self._name) > 256):
            raise ValueError(
                "RepositoryCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 256")
        if (self._name is not None
            and
            not re.match(
                r"[a-z0-9]+(?:[._-][a-z0-9]+)*",
                 self._name)):
            raise ValueError(
                "RepositoryCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: pattern: [a-z0-9]+(?:[._-][a-z0-9"
                "]+)*")
        if (self._displayName is not None
            and
            len(self._displayName) < 2):
            raise ValueError(
                "RepositoryCreateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: minLength: 2")
        if (self._displayName is not None
            and
            len(self._displayName) > 64):
            raise ValueError(
                "RepositoryCreateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 64")
        if (self._licenseTerms is not None):
            for obj in self._licenseTerms:
                if (obj is not None): obj.isValid()
        return True
    

