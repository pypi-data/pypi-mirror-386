"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .OciBlobsConfig import OciBlobsConfig
from .OciBlobsHistory import OciBlobsHistory
from .OciBlobsRootfs import OciBlobsRootfs

# Unused import over optimization prevention
str(repr(OciBlobsRootfs))
str(repr(OciBlobsHistory))
str(repr(OciBlobsConfig))


if sys.version_info > (3,):
    long = int
    unicode = str

class OciBlobsResponse(object):
    """Oci blobs response"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.architecture = (
            None if not fromDict or propDict.get(
                "architecture"
            ) is None
            else propDict["architecture"])
        self.config = (
            None if not fromDict or propDict.get(
                "config"
            ) is None
            else propDict["config"])
        self.created = (
            None if not fromDict or propDict.get(
                "created"
            ) is None
            else propDict["created"])
        self.history = (
            None if not fromDict or propDict.get(
                "history"
            ) is None
            else [ OciBlobsHistory(i)
            for i in propDict["history"] ])
        self.os = (
            None if not fromDict or propDict.get(
                "os"
            ) is None
            else propDict["os"])
        self.rootfs = (
            None if not fromDict or propDict.get(
                "rootfs"
            ) is None
            else propDict["rootfs"])

    @property
    def architecture(self):
        """str: CPU info"""
        return self._architecture

    @architecture.setter
    def architecture(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._architecture = value
        else:
            raise TypeError(
                'Property "architecture" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def config(self):
        """ """
        return self._config

    @config.setter
    def config(self, value):
        if value is not None and not isinstance(value, OciBlobsConfig):
            value = OciBlobsConfig(value)
        if (value is None) or isinstance(value, OciBlobsConfig):
            self._config = value
        else:
            raise TypeError(
                'Property "config" of type "list<OciBlobsConfig>" set to wron'
                'g type'
            )

    @property
    def created(self):
        """str: created time"""
        return self._created

    @created.setter
    def created(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._created = value
        else:
            raise TypeError(
                'Property "created" of type "list<str>" set to wrong type'
            )

    @property
    def history(self):
        """ """
        return self._history

    @history.setter
    def history(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._history = value
        else:
            raise TypeError(
                'Property "history" of type "list<OciBlobsHistory>" set to wr'
                'ong type'
            )

    @property
    def os(self):
        """str: OS info"""
        return self._os

    @os.setter
    def os(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._os = value
        else:
            raise TypeError(
                'Property "os" of type "list<str>" set to wrong type'
            )

    @property
    def rootfs(self):
        """ """
        return self._rootfs

    @rootfs.setter
    def rootfs(self, value):
        if value is not None and not isinstance(value, OciBlobsRootfs):
            value = OciBlobsRootfs(value)
        if (value is None) or isinstance(value, OciBlobsRootfs):
            self._rootfs = value
        else:
            raise TypeError(
                'Property "rootfs" of type "list<OciBlobsRootfs>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._architecture is not None:
            result["architecture"] = \
                self._architecture
        if self._config:
            result["config"] = \
                self._config.toDict() if self._config is not None else None
        if self._created is not None:
            result["created"] = \
                self._created
        if self._history:
            result["history"] = [
                i.toDict() for i in self._history 
            ] if self._history else []
        if self._os is not None:
            result["os"] = \
                self._os
        if self._rootfs:
            result["rootfs"] = \
                self._rootfs.toDict() if self._rootfs is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._config is not None): self._config.isValid()
        if (self._history is not None):
            for obj in self._history:
                if (obj is not None): obj.isValid()
        if (self._rootfs is not None): self._rootfs.isValid()
        return True
    

