"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class RepositoryImagesDeletedEvent(object):
    """Event sent when repository images are deleted in metadata service. The 
    primary purpose of this event is to trigger asynchronous cleanup and d
    eletion of manifests in docker container registry"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.deletedByUserId = (
            None if not fromDict or propDict.get(
                "deletedByUserId"
            ) is None
            else propDict["deletedByUserId"])
        self.namespace = (
            None if not fromDict or propDict.get(
                "namespace"
            ) is None
            else propDict["namespace"])
        self.repositoryName = (
            None if not fromDict or propDict.get(
                "repositoryName"
            ) is None
            else propDict["repositoryName"])
        self.tags = (
            None if not fromDict or propDict.get(
                "tags"
            ) is None
            else propDict["tags"])

    @property
    def deletedByUserId(self):
        """str: Authentication ID for the user who deleted the images"""
        return self._deletedByUserId

    @deletedByUserId.setter
    def deletedByUserId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._deletedByUserId = value
        else:
            raise TypeError(
                'Property "deletedByUserId" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def namespace(self):
        """str: Namespace repository belongs to i.e. org or org/team"""
        return self._namespace

    @namespace.setter
    def namespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._namespace = value
        else:
            raise TypeError(
                'Property "namespace" of type "list<str>" set to wrong type'
            )

    @property
    def repositoryName(self):
        """str: Unique name of the repository in the namespace"""
        return self._repositoryName

    @repositoryName.setter
    def repositoryName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._repositoryName = value
        else:
            raise TypeError(
                'Property "repositoryName" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def tags(self):
        """list: List of deleted image tags """
        return self._tags

    @tags.setter
    def tags(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._tags = value
        else:
            raise TypeError(
                'Property "tags" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._deletedByUserId is not None:
            result["deletedByUserId"] = \
                self._deletedByUserId
        if self._namespace is not None:
            result["namespace"] = \
                self._namespace
        if self._repositoryName is not None:
            result["repositoryName"] = \
                self._repositoryName
        if self._tags is not None:
            result["tags"] = \
                self._tags
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

