"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class EventSource(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.addr = (
            None if not fromDict or propDict.get(
                "addr"
            ) is None
            else propDict["addr"])
        self.instanceID = (
            None if not fromDict or propDict.get(
                "instanceID"
            ) is None
            else propDict["instanceID"])

    @property
    def addr(self):
        """str: Addr contains the ip or hostname and the port of the registry 
        node that generated the event. Generally, this will be resolve
        d by os.Hostname() along with the running port."""
        return self._addr

    @addr.setter
    def addr(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._addr = value
        else:
            raise TypeError(
                'Property "addr" of type "list<str>" set to wrong type'
            )

    @property
    def instanceID(self):
        """str: InstanceID identifies a running instance of an application. Ch
        anges after each restart."""
        return self._instanceID

    @instanceID.setter
    def instanceID(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._instanceID = value
        else:
            raise TypeError(
                'Property "instanceID" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._addr is not None:
            result["addr"] = \
                self._addr
        if self._instanceID is not None:
            result["instanceID"] = \
                self._instanceID
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

