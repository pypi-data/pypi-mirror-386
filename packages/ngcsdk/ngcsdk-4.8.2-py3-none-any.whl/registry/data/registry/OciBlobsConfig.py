"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class OciBlobsConfig(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.ArgsEscaped = (
            None if not fromDict or propDict.get(
                "ArgsEscaped"
            ) is None
            else propDict["ArgsEscaped"])
        self.Cmd = (
            None if not fromDict or propDict.get(
                "Cmd"
            ) is None
            else propDict["Cmd"])
        self.Entrypoint = (
            None if not fromDict or propDict.get(
                "Entrypoint"
            ) is None
            else propDict["Entrypoint"])
        self.Env = (
            None if not fromDict or propDict.get(
                "Env"
            ) is None
            else propDict["Env"])
        self.WorkingDir = (
            None if not fromDict or propDict.get(
                "WorkingDir"
            ) is None
            else propDict["WorkingDir"])

    @property
    def ArgsEscaped(self):
        """bool: args escaped info"""
        return self._ArgsEscaped

    @ArgsEscaped.setter
    def ArgsEscaped(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._ArgsEscaped = value
        else:
            raise TypeError(
                'Property "ArgsEscaped" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def Cmd(self):
        """list: Command info"""
        return self._Cmd

    @Cmd.setter
    def Cmd(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._Cmd = value
        else:
            raise TypeError(
                'Property "Cmd" of type "list<str>" set to wrong type'
            )

    @property
    def Entrypoint(self):
        """list: EEntrypoint info"""
        return self._Entrypoint

    @Entrypoint.setter
    def Entrypoint(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._Entrypoint = value
        else:
            raise TypeError(
                'Property "Entrypoint" of type "list<str>" set to wrong type'
            )

    @property
    def Env(self):
        """list: Environment variables"""
        return self._Env

    @Env.setter
    def Env(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._Env = value
        else:
            raise TypeError(
                'Property "Env" of type "list<str>" set to wrong type'
            )

    @property
    def WorkingDir(self):
        """str: working directory"""
        return self._WorkingDir

    @WorkingDir.setter
    def WorkingDir(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._WorkingDir = value
        else:
            raise TypeError(
                'Property "WorkingDir" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._ArgsEscaped is not None:
            result["ArgsEscaped"] = \
                self._ArgsEscaped
        if self._Cmd is not None:
            result["Cmd"] = \
                self._Cmd
        if self._Entrypoint is not None:
            result["Entrypoint"] = \
                self._Entrypoint
        if self._Env is not None:
            result["Env"] = \
                self._Env
        if self._WorkingDir is not None:
            result["WorkingDir"] = \
                self._WorkingDir
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

