"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ReleaseTypeEnum import ReleaseTypeEnum

# Unused import over optimization prevention
str(repr(ReleaseTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateReleaseTypeRequest(object):
    """Request to update release type of a repository tag"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.releaseType = (
            None if not fromDict or propDict.get(
                "releaseType"
            ) is None
            else propDict["releaseType"])
        self.tag = (
            None if not fromDict or propDict.get(
                "tag"
            ) is None
            else propDict["tag"])

    @property
    def releaseType(self):
        """ReleaseTypeEnum: Release type enum for the container image tag in t
        he product lifecycle."""
        return self._releaseType

    @releaseType.setter
    def releaseType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._releaseType = value
        else:
            raise TypeError(
                'Property "releaseType" of type "list<ReleaseTypeEnum>" set t'
                'o wrong type'
            )

    @property
    def tag(self):
        """str: Repository tag name"""
        return self._tag

    @tag.setter
    def tag(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tag = value
        else:
            raise TypeError(
                'Property "tag" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._releaseType is not None:
            result["releaseType"] = \
                self._releaseType
        if self._tag is not None:
            result["tag"] = \
                self._tag
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

