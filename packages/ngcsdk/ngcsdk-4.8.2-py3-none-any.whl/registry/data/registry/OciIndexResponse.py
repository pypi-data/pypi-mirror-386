"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .OciIndexManifest import OciIndexManifest

# Unused import over optimization prevention
str(repr(RequestStatus))
str(repr(OciIndexManifest))


if sys.version_info > (3,):
    long = int
    unicode = str

class OciIndexResponse(object):
    """Oci index response"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.manifests = (
            None if not fromDict or propDict.get(
                "manifests"
            ) is None
            else [ OciIndexManifest(i)
            for i in propDict["manifests"] ])
        self.mediaType = (
            None if not fromDict or propDict.get(
                "mediaType"
            ) is None
            else propDict["mediaType"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])
        self.schemaVersion = (
            None if not fromDict or propDict.get(
                "schemaVersion"
            ) is None
            else propDict["schemaVersion"])

    @property
    def manifests(self):
        """ """
        return self._manifests

    @manifests.setter
    def manifests(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._manifests = value
        else:
            raise TypeError(
                'Property "manifests" of type "list<OciIndexManifest>" set to'
                ' wrong type'
            )

    @property
    def mediaType(self):
        """str: defines version. must be 'application/vnd.oci.image.index.v1+j
        son'"""
        return self._mediaType

    @mediaType.setter
    def mediaType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mediaType = value
        else:
            raise TypeError(
                'Property "mediaType" of type "list<str>" set to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    @property
    def schemaVersion(self):
        """int: Response schema version"""
        return self._schemaVersion

    @schemaVersion.setter
    def schemaVersion(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._schemaVersion = value
        else:
            raise TypeError(
                'Property "schemaVersion" of type "list<int>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._manifests:
            result["manifests"] = [
                i.toDict() for i in self._manifests 
            ] if self._manifests else []
        if self._mediaType is not None:
            result["mediaType"] = \
                self._mediaType
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        if self._schemaVersion is not None:
            result["schemaVersion"] = \
                self._schemaVersion
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._manifests is not None):
            for obj in self._manifests:
                if (obj is not None): obj.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

