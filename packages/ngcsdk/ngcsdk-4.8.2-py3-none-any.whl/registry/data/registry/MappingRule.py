"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ImageRef import ImageRef

# Unused import over optimization prevention
str(repr(ImageRef))


if sys.version_info > (3,):
    long = int
    unicode = str

class MappingRule(object):
    """Mapping rules for defining which policy and allowlist(s) to apply to an
     image based on a match of the image tag or id. Evaluated in order."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allowlist_ids = (
            None if not fromDict or propDict.get(
                "allowlist_ids"
            ) is None
            else propDict["allowlist_ids"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.image = (
            None if not fromDict or propDict.get(
                "image"
            ) is None
            else propDict["image"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.registry = (
            None if not fromDict or propDict.get(
                "registry"
            ) is None
            else propDict["registry"])
        self.repository = (
            None if not fromDict or propDict.get(
                "repository"
            ) is None
            else propDict["repository"])
        self.rule_set_ids = (
            None if not fromDict or propDict.get(
                "rule_set_ids"
            ) is None
            else propDict["rule_set_ids"])

    @property
    def allowlist_ids(self):
        """ """
        return self._allowlist_ids

    @allowlist_ids.setter
    def allowlist_ids(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._allowlist_ids = value
        else:
            raise TypeError(
                'Property "allowlist_ids" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def id(self):
        """ """
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def image(self):
        """ImageRef: A reference to an image"""
        return self._image

    @image.setter
    def image(self, value):
        if value is not None and not isinstance(value, ImageRef):
            value = ImageRef(value)
        if (value is None) or isinstance(value, ImageRef):
            self._image = value
        else:
            raise TypeError(
                'Property "image" of type "list<ImageRef>" set to wrong type'
            )

    @property
    def name(self):
        """ """
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def registry(self):
        """ """
        return self._registry

    @registry.setter
    def registry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._registry = value
        else:
            raise TypeError(
                'Property "registry" of type "list<str>" set to wrong type'
            )

    @property
    def repository(self):
        """ """
        return self._repository

    @repository.setter
    def repository(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._repository = value
        else:
            raise TypeError(
                'Property "repository" of type "list<str>" set to wrong type'
            )

    @property
    def rule_set_ids(self):
        """list: List of ruleSetIds to evaluate in order, to completion"""
        return self._rule_set_ids

    @rule_set_ids.setter
    def rule_set_ids(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._rule_set_ids = value
        else:
            raise TypeError(
                'Property "rule_set_ids" of type "list<str>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._allowlist_ids is not None:
            result["allowlist_ids"] = \
                self._allowlist_ids
        if self._id is not None:
            result["id"] = \
                self._id
        if self._image:
            result["image"] = \
                self._image.toDict() if self._image is not None else None
        if self._name is not None:
            result["name"] = \
                self._name
        if self._registry is not None:
            result["registry"] = \
                self._registry
        if self._repository is not None:
            result["repository"] = \
                self._repository
        if self._rule_set_ids is not None:
            result["rule_set_ids"] = \
                self._rule_set_ids
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._image is not None): self._image.isValid()
        return True
    

