"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MalwareScanStatusEnum import MalwareScanStatusEnum
from .ScanStatus import ScanStatusEnum
from .SecurityRatingType import SecurityRatingTypeEnum

# Unused import over optimization prevention
str(repr(MalwareScanStatusEnum))
str(repr(ScanStatusEnum))
str(repr(SecurityRatingTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class ImageArchitectureVariant(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.architecture = (
            None if not fromDict or propDict.get(
                "architecture"
            ) is None
            else propDict["architecture"])
        self.compressedSize = (
            None if not fromDict or propDict.get(
                "compressedSize"
            ) is None
            else propDict["compressedSize"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.digest = (
            None if not fromDict or propDict.get(
                "digest"
            ) is None
            else propDict["digest"])
        self.malwareScanDate = (
            None if not fromDict or propDict.get(
                "malwareScanDate"
            ) is None
            else propDict["malwareScanDate"])
        self.malwareScanStatus = (
            None if not fromDict or propDict.get(
                "malwareScanStatus"
            ) is None
            else propDict["malwareScanStatus"])
        self.modelNames = (
            None if not fromDict or propDict.get(
                "modelNames"
            ) is None
            else propDict["modelNames"])
        self.os = (
            None if not fromDict or propDict.get(
                "os"
            ) is None
            else propDict["os"])
        self.rating = (
            None if not fromDict or propDict.get(
                "rating"
            ) is None
            else propDict["rating"])
        self.scanDate = (
            None if not fromDict or propDict.get(
                "scanDate"
            ) is None
            else propDict["scanDate"])
        self.scanStatus = (
            None if not fromDict or propDict.get(
                "scanStatus"
            ) is None
            else propDict["scanStatus"])
        self.variant = (
            None if not fromDict or propDict.get(
                "variant"
            ) is None
            else propDict["variant"])

    @property
    def architecture(self):
        """str: The architecture field specifies the CPU architecture, for exa
        mple amd64 or ppc64le."""
        return self._architecture

    @architecture.setter
    def architecture(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._architecture = value
        else:
            raise TypeError(
                'Property "architecture" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def compressedSize(self):
        """long: Total size in bytes of all layers of this image in compressed
         format."""
        return self._compressedSize

    @compressedSize.setter
    def compressedSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._compressedSize = value
        else:
            raise TypeError(
                'Property "compressedSize" of type "list<long>" set to wrong '
                'type'
            )

    @property
    def createdDate(self):
        """str: UTC date/time this image variant was created."""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def digest(self):
        """str: The digest of the content, as defined by the Registry V2 HTTP 
        API Specification."""
        return self._digest

    @digest.setter
    def digest(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._digest = value
        else:
            raise TypeError(
                'Property "digest" of type "list<str>" set to wrong type'
            )

    @property
    def malwareScanDate(self):
        """str: Malware scan date in ISO-8601 format"""
        return self._malwareScanDate

    @malwareScanDate.setter
    def malwareScanDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._malwareScanDate = value
        else:
            raise TypeError(
                'Property "malwareScanDate" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def malwareScanStatus(self):
        """MalwareScanStatusEnum: Malware scan status"""
        return self._malwareScanStatus

    @malwareScanStatus.setter
    def malwareScanStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._malwareScanStatus = value
        else:
            raise TypeError(
                'Property "malwareScanStatus" of type "list<MalwareScanStatus'
                'Enum>" set to wrong type'
            )

    @property
    def modelNames(self):
        """list: Model names associated with the container tag"""
        return self._modelNames

    @modelNames.setter
    def modelNames(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._modelNames = value
        else:
            raise TypeError(
                'Property "modelNames" of type "list<str>" set to wrong type'
            )

    @property
    def os(self):
        """str: The os field specifies the operating system, for example linux
         or windows."""
        return self._os

    @os.setter
    def os(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._os = value
        else:
            raise TypeError(
                'Property "os" of type "list<str>" set to wrong type'
            )

    @property
    def rating(self):
        """SecurityRatingTypeEnum: Security Rating Type"""
        return self._rating

    @rating.setter
    def rating(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._rating = value
        else:
            raise TypeError(
                'Property "rating" of type "list<SecurityRatingTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def scanDate(self):
        """str: Security scan date in ISO-8601 format (yyyy-MM-dd'T'HH:mm:ss.S
        SS'Z'). Example: 2021-08-26T17:29:29.000Z"""
        return self._scanDate

    @scanDate.setter
    def scanDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._scanDate = value
        else:
            raise TypeError(
                'Property "scanDate" of type "list<str>" set to wrong type'
            )

    @property
    def scanStatus(self):
        """ScanStatusEnum: Image scan statuses"""
        return self._scanStatus

    @scanStatus.setter
    def scanStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._scanStatus = value
        else:
            raise TypeError(
                'Property "scanStatus" of type "list<ScanStatusEnum>" set to '
                'wrong type'
            )

    @property
    def variant(self):
        """str: The optional variant field specifies a variant of the CPU, for
         example armv6l to specify a particular CPU variant of the ARM
         CPU."""
        return self._variant

    @variant.setter
    def variant(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._variant = value
        else:
            raise TypeError(
                'Property "variant" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._architecture is not None:
            result["architecture"] = \
                self._architecture
        if self._compressedSize is not None:
            result["compressedSize"] = \
                self._compressedSize
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._digest is not None:
            result["digest"] = \
                self._digest
        if self._malwareScanDate is not None:
            result["malwareScanDate"] = \
                self._malwareScanDate
        if self._malwareScanStatus is not None:
            result["malwareScanStatus"] = \
                self._malwareScanStatus
        if self._modelNames is not None:
            result["modelNames"] = \
                self._modelNames
        if self._os is not None:
            result["os"] = \
                self._os
        if self._rating is not None:
            result["rating"] = \
                self._rating
        if self._scanDate is not None:
            result["scanDate"] = \
                self._scanDate
        if self._scanStatus is not None:
            result["scanStatus"] = \
                self._scanStatus
        if self._variant is not None:
            result["variant"] = \
                self._variant
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._malwareScanDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._malwareScanDate)):
            raise ValueError(
                "ImageArchitectureVariant.malwareScanDate: " + str(self._malwareScanDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        return True
    

