"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ScanStatus import ScanStatusEnum
from .ImageScanDetails import ImageScanDetails

# Unused import over optimization prevention
str(repr(ScanStatusEnum))
str(repr(ImageScanDetails))


if sys.version_info > (3,):
    long = int
    unicode = str

class RepositoryImageScanComplete(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.clientId = (
            None if not fromDict or propDict.get(
                "clientId"
            ) is None
            else propDict["clientId"])
        self.digest = (
            None if not fromDict or propDict.get(
                "digest"
            ) is None
            else propDict["digest"])
        self.image = (
            None if not fromDict or propDict.get(
                "image"
            ) is None
            else propDict["image"])
        self.scanDate = (
            None if not fromDict or propDict.get(
                "scanDate"
            ) is None
            else propDict["scanDate"])
        self.scanDetails = (
            None if not fromDict or propDict.get(
                "scanDetails"
            ) is None
            else propDict["scanDetails"])
        self.scanStatus = (
            None if not fromDict or propDict.get(
                "scanStatus"
            ) is None
            else propDict["scanStatus"])

    @property
    def clientId(self):
        """str: Client id of the person who pushed the image"""
        return self._clientId

    @clientId.setter
    def clientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._clientId = value
        else:
            raise TypeError(
                'Property "clientId" of type "list<str>" set to wrong type'
            )

    @property
    def digest(self):
        """str: Image digest: sha256:dae203fe11646a86937bf04db0079adef295f426d
        a68a92b40e3b181f337daa7"""
        return self._digest

    @digest.setter
    def digest(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._digest = value
        else:
            raise TypeError(
                'Property "digest" of type "list<str>" set to wrong type'
            )

    @property
    def image(self):
        """str: Full image name with tag, ie vulnerables/web-dvwa:latest"""
        return self._image

    @image.setter
    def image(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._image = value
        else:
            raise TypeError(
                'Property "image" of type "list<str>" set to wrong type'
            )

    @property
    def scanDate(self):
        """str: Image scan date in ISO-8601 format"""
        return self._scanDate

    @scanDate.setter
    def scanDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._scanDate = value
        else:
            raise TypeError(
                'Property "scanDate" of type "list<str>" set to wrong type'
            )

    @property
    def scanDetails(self):
        """ """
        return self._scanDetails

    @scanDetails.setter
    def scanDetails(self, value):
        if value is not None and not isinstance(value, ImageScanDetails):
            value = ImageScanDetails(value)
        if (value is None) or isinstance(value, ImageScanDetails):
            self._scanDetails = value
        else:
            raise TypeError(
                'Property "scanDetails" of type "list<ImageScanDetails>" set '
                'to wrong type'
            )

    @property
    def scanStatus(self):
        """ScanStatusEnum: Image scan statuses"""
        return self._scanStatus

    @scanStatus.setter
    def scanStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._scanStatus = value
        else:
            raise TypeError(
                'Property "scanStatus" of type "list<ScanStatusEnum>" set to '
                'wrong type'
            )

    def toDict(self):
        result = {}
        if self._clientId is not None:
            result["clientId"] = \
                self._clientId
        if self._digest is not None:
            result["digest"] = \
                self._digest
        if self._image is not None:
            result["image"] = \
                self._image
        if self._scanDate is not None:
            result["scanDate"] = \
                self._scanDate
        if self._scanDetails:
            result["scanDetails"] = \
                self._scanDetails.toDict() if self._scanDetails is not None else None
        if self._scanStatus is not None:
            result["scanStatus"] = \
                self._scanStatus
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._scanDetails is not None): self._scanDetails.isValid()
        return True
    

