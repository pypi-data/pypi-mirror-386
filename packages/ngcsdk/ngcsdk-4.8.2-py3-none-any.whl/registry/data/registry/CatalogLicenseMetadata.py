"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class CatalogLicenseMetadata(object):
    """License information for the artifact"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.licenseId = (
            None if not fromDict or propDict.get(
                "licenseId"
            ) is None
            else propDict["licenseId"])
        self.licenseVersion = (
            None if not fromDict or propDict.get(
                "licenseVersion"
            ) is None
            else propDict["licenseVersion"])
        self.needsAcceptance = (
            None if not fromDict or propDict.get(
                "needsAcceptance"
            ) is None
            else propDict["needsAcceptance"])

    @property
    def licenseId(self):
        """str: License ID"""
        return self._licenseId

    @licenseId.setter
    def licenseId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._licenseId = value
        else:
            raise TypeError(
                'Property "licenseId" of type "list<str>" set to wrong type'
            )

    @property
    def licenseVersion(self):
        """str: License version ID"""
        return self._licenseVersion

    @licenseVersion.setter
    def licenseVersion(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._licenseVersion = value
        else:
            raise TypeError(
                'Property "licenseVersion" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def needsAcceptance(self):
        """bool: Indicator if user needs to accept this license"""
        return self._needsAcceptance

    @needsAcceptance.setter
    def needsAcceptance(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._needsAcceptance = value
        else:
            raise TypeError(
                'Property "needsAcceptance" of type "list<bool>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._licenseId is not None:
            result["licenseId"] = \
                self._licenseId
        if self._licenseVersion is not None:
            result["licenseVersion"] = \
                self._licenseVersion
        if self._needsAcceptance is not None:
            result["needsAcceptance"] = \
                self._needsAcceptance
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

