"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ScanIssue import ScanIssue
from .ScanStatus import ScanStatusEnum
from .SecurityRatingType import SecurityRatingTypeEnum
from .ScanIssueCount import ScanIssueCount

# Unused import over optimization prevention
str(repr(ScanIssueCount))
str(repr(ScanStatusEnum))
str(repr(SecurityRatingTypeEnum))
str(repr(ScanIssue))


if sys.version_info > (3,):
    long = int
    unicode = str

class ImageScanDetails(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.evaluationProblems = (
            None if not fromDict or propDict.get(
                "evaluationProblems"
            ) is None
            else propDict["evaluationProblems"])
        self.finalAction = (
            None if not fromDict or propDict.get(
                "finalAction"
            ) is None
            else propDict["finalAction"])
        self.finalActionReason = (
            None if not fromDict or propDict.get(
                "finalActionReason"
            ) is None
            else propDict["finalActionReason"])
        self.policyBundleName = (
            None if not fromDict or propDict.get(
                "policyBundleName"
            ) is None
            else propDict["policyBundleName"])
        self.policyLastUpdate = (
            None if not fromDict or propDict.get(
                "policyLastUpdate"
            ) is None
            else propDict["policyLastUpdate"])
        self.rating = (
            None if not fromDict or propDict.get(
                "rating"
            ) is None
            else propDict["rating"])
        self.scanDate = (
            None if not fromDict or propDict.get(
                "scanDate"
            ) is None
            else propDict["scanDate"])
        self.scanIssueCounts = (
            None if not fromDict or propDict.get(
                "scanIssueCounts"
            ) is None
            else [ ScanIssueCount(i)
            for i in propDict["scanIssueCounts"] ])
        self.scanIssues = (
            None if not fromDict or propDict.get(
                "scanIssues"
            ) is None
            else [ ScanIssue(i)
            for i in propDict["scanIssues"] ])
        self.scanOutcome = (
            None if not fromDict or propDict.get(
                "scanOutcome"
            ) is None
            else propDict["scanOutcome"])
        self.scanStatus = (
            None if not fromDict or propDict.get(
                "scanStatus"
            ) is None
            else propDict["scanStatus"])

    @property
    def evaluationProblems(self):
        """list: Problems reported by anchore engine"""
        return self._evaluationProblems

    @evaluationProblems.setter
    def evaluationProblems(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._evaluationProblems = value
        else:
            raise TypeError(
                'Property "evaluationProblems" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def finalAction(self):
        """str: Recommended action, decided by the policy"""
        return self._finalAction

    @finalAction.setter
    def finalAction(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._finalAction = value
        else:
            raise TypeError(
                'Property "finalAction" of type "list<str>" set to wrong type'
            )

    @property
    def finalActionReason(self):
        """str: Reason why final action is returned"""
        return self._finalActionReason

    @finalActionReason.setter
    def finalActionReason(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._finalActionReason = value
        else:
            raise TypeError(
                'Property "finalActionReason" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def policyBundleName(self):
        """str: Name of the policy used to scan the image"""
        return self._policyBundleName

    @policyBundleName.setter
    def policyBundleName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._policyBundleName = value
        else:
            raise TypeError(
                'Property "policyBundleName" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def policyLastUpdate(self):
        """str: Date of the policy last update"""
        return self._policyLastUpdate

    @policyLastUpdate.setter
    def policyLastUpdate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._policyLastUpdate = value
        else:
            raise TypeError(
                'Property "policyLastUpdate" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def rating(self):
        """SecurityRatingTypeEnum: Security Rating Type"""
        return self._rating

    @rating.setter
    def rating(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._rating = value
        else:
            raise TypeError(
                'Property "rating" of type "list<SecurityRatingTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def scanDate(self):
        """str: Date for this scan in ISO-8601 format"""
        return self._scanDate

    @scanDate.setter
    def scanDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._scanDate = value
        else:
            raise TypeError(
                'Property "scanDate" of type "list<str>" set to wrong type'
            )

    @property
    def scanIssueCounts(self):
        """ """
        return self._scanIssueCounts

    @scanIssueCounts.setter
    def scanIssueCounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._scanIssueCounts = value
        else:
            raise TypeError(
                'Property "scanIssueCounts" of type "list<ScanIssueCount>" se'
                't to wrong type'
            )

    @property
    def scanIssues(self):
        """ """
        return self._scanIssues

    @scanIssues.setter
    def scanIssues(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._scanIssues = value
        else:
            raise TypeError(
                'Property "scanIssues" of type "list<ScanIssue>" set to wrong'
                ' type'
            )

    @property
    def scanOutcome(self):
        """ScanOutcomeEnum: If at least 1 critical or high, outcome will be FA
        IL."""
        return self._scanOutcome

    @scanOutcome.setter
    def scanOutcome(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._scanOutcome = value
        else:
            raise TypeError(
                'Property "scanOutcome" of type "list<ScanOutcomeEnum>" set t'
                'o wrong type'
            )

    ScanOutcomeEnum=["PASS","FAIL","NOT_SCANNED",]
    str(repr(ScanOutcomeEnum))  # Prevent optimizer removing enum

    @property
    def scanStatus(self):
        """ScanStatusEnum: Image scan statuses"""
        return self._scanStatus

    @scanStatus.setter
    def scanStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._scanStatus = value
        else:
            raise TypeError(
                'Property "scanStatus" of type "list<ScanStatusEnum>" set to '
                'wrong type'
            )

    def toDict(self):
        result = {}
        if self._evaluationProblems is not None:
            result["evaluationProblems"] = \
                self._evaluationProblems
        if self._finalAction is not None:
            result["finalAction"] = \
                self._finalAction
        if self._finalActionReason is not None:
            result["finalActionReason"] = \
                self._finalActionReason
        if self._policyBundleName is not None:
            result["policyBundleName"] = \
                self._policyBundleName
        if self._policyLastUpdate is not None:
            result["policyLastUpdate"] = \
                self._policyLastUpdate
        if self._rating is not None:
            result["rating"] = \
                self._rating
        if self._scanDate is not None:
            result["scanDate"] = \
                self._scanDate
        if self._scanIssueCounts:
            result["scanIssueCounts"] = [
                i.toDict() for i in self._scanIssueCounts 
            ] if self._scanIssueCounts else []
        if self._scanIssues:
            result["scanIssues"] = [
                i.toDict() for i in self._scanIssues 
            ] if self._scanIssues else []
        if self._scanOutcome is not None:
            result["scanOutcome"] = \
                self._scanOutcome
        if self._scanStatus is not None:
            result["scanStatus"] = \
                self._scanStatus
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._scanIssues is not None):
            for obj in self._scanIssues:
                if (obj is not None): obj.isValid()
        if (self._scanIssueCounts is not None):
            for obj in self._scanIssueCounts:
                if (obj is not None): obj.isValid()
        return True
    

