"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ScanIssueSeverity import ScanIssueSeverityEnum

# Unused import over optimization prevention
str(repr(ScanIssueSeverityEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class ScanIssue(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.checkOutput = (
            None if not fromDict or propDict.get(
                "checkOutput"
            ) is None
            else propDict["checkOutput"])
        self.cveUrl = (
            None if not fromDict or propDict.get(
                "cveUrl"
            ) is None
            else propDict["cveUrl"])
        self.gate = (
            None if not fromDict or propDict.get(
                "gate"
            ) is None
            else propDict["gate"])
        self.gateAction = (
            None if not fromDict or propDict.get(
                "gateAction"
            ) is None
            else propDict["gateAction"])
        self.issueSeverity = (
            None if not fromDict or propDict.get(
                "issueSeverity"
            ) is None
            else propDict["issueSeverity"])
        self.trigger = (
            None if not fromDict or propDict.get(
                "trigger"
            ) is None
            else propDict["trigger"])
        self.triggerId = (
            None if not fromDict or propDict.get(
                "triggerId"
            ) is None
            else propDict["triggerId"])
        self.whitelisted = (
            None if not fromDict or propDict.get(
                "whitelisted"
            ) is None
            else propDict["whitelisted"])

    @property
    def checkOutput(self):
        """str: Anchore engine output"""
        return self._checkOutput

    @checkOutput.setter
    def checkOutput(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._checkOutput = value
        else:
            raise TypeError(
                'Property "checkOutput" of type "list<str>" set to wrong type'
            )

    @property
    def cveUrl(self):
        """str: CVE url for vulnerabilities"""
        return self._cveUrl

    @cveUrl.setter
    def cveUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._cveUrl = value
        else:
            raise TypeError(
                'Property "cveUrl" of type "list<str>" set to wrong type'
            )

    @property
    def gate(self):
        """str: A 'Gate' is a logical grouping of trigger definitions and prov
        ides a broader context for the execution of triggers against i
        mage analysis data."""
        return self._gate

    @gate.setter
    def gate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gate = value
        else:
            raise TypeError(
                'Property "gate" of type "list<str>" set to wrong type'
            )

    @property
    def gateAction(self):
        """str: Action which should be taken"""
        return self._gateAction

    @gateAction.setter
    def gateAction(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gateAction = value
        else:
            raise TypeError(
                'Property "gateAction" of type "list<str>" set to wrong type'
            )

    @property
    def issueSeverity(self):
        """ScanIssueSeverityEnum: Image scan issue severity"""
        return self._issueSeverity

    @issueSeverity.setter
    def issueSeverity(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._issueSeverity = value
        else:
            raise TypeError(
                'Property "issueSeverity" of type "list<ScanIssueSeverityEnum'
                '>" set to wrong type'
            )

    @property
    def trigger(self):
        """str: Triggers define a specific condition to check within the conte
        xt of a gate, optionally with one or more input parameters."""
        return self._trigger

    @trigger.setter
    def trigger(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._trigger = value
        else:
            raise TypeError(
                'Property "trigger" of type "list<str>" set to wrong type'
            )

    @property
    def triggerId(self):
        """str: Unique identifier of the trigger associated with the issue"""
        return self._triggerId

    @triggerId.setter
    def triggerId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._triggerId = value
        else:
            raise TypeError(
                'Property "triggerId" of type "list<str>" set to wrong type'
            )

    @property
    def whitelisted(self):
        """bool: Whether image whitelisted"""
        return self._whitelisted

    @whitelisted.setter
    def whitelisted(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._whitelisted = value
        else:
            raise TypeError(
                'Property "whitelisted" of type "list<bool>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._checkOutput is not None:
            result["checkOutput"] = \
                self._checkOutput
        if self._cveUrl is not None:
            result["cveUrl"] = \
                self._cveUrl
        if self._gate is not None:
            result["gate"] = \
                self._gate
        if self._gateAction is not None:
            result["gateAction"] = \
                self._gateAction
        if self._issueSeverity is not None:
            result["issueSeverity"] = \
                self._issueSeverity
        if self._trigger is not None:
            result["trigger"] = \
                self._trigger
        if self._triggerId is not None:
            result["triggerId"] = \
                self._triggerId
        if self._whitelisted is not None:
            result["whitelisted"] = \
                self._whitelisted
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

