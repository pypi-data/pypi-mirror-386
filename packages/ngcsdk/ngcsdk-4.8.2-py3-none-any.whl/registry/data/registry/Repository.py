"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AccessTypeEnum import AccessTypeEnum
from .ImageArchitectureVariant import ImageArchitectureVariant
from .LicenseMetadata import LicenseMetadata
from .ReleaseTypeEnum import ReleaseTypeEnum

# Unused import over optimization prevention
str(repr(ImageArchitectureVariant))
str(repr(LicenseMetadata))
str(repr(AccessTypeEnum))
str(repr(ReleaseTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Repository(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accessType = (
            None if not fromDict or propDict.get(
                "accessType"
            ) is None
            else propDict["accessType"])
        self.builtBy = (
            None if not fromDict or propDict.get(
                "builtBy"
            ) is None
            else propDict["builtBy"])
        self.canGuestPull = (
            None if not fromDict or propDict.get(
                "canGuestPull"
            ) is None
            else propDict["canGuestPull"])
        self.canPublicList = (
            None if not fromDict or propDict.get(
                "canPublicList"
            ) is None
            else propDict["canPublicList"])
        self.categories = (
            None if not fromDict or propDict.get(
                "categories"
            ) is None
            else propDict["categories"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.hasSignedTag = (
            None if not fromDict or propDict.get(
                "hasSignedTag"
            ) is None
            else propDict["hasSignedTag"])
        self.isFavourite = (
            None if not fromDict or propDict.get(
                "isFavourite"
            ) is None
            else propDict["isFavourite"])
        self.isMultiArchitecture = (
            None if not fromDict or propDict.get(
                "isMultiArchitecture"
            ) is None
            else propDict["isMultiArchitecture"])
        self.isMultinodeEnabled = (
            None if not fromDict or propDict.get(
                "isMultinodeEnabled"
            ) is None
            else propDict["isMultinodeEnabled"])
        self.isPublic = (
            None if not fromDict or propDict.get(
                "isPublic"
            ) is None
            else propDict["isPublic"])
        self.isReadOnly = (
            None if not fromDict or propDict.get(
                "isReadOnly"
            ) is None
            else propDict["isReadOnly"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.latestArchitectureVariants = (
            None if not fromDict or propDict.get(
                "latestArchitectureVariants"
            ) is None
            else [ ImageArchitectureVariant(i)
            for i in propDict["latestArchitectureVariants"] ])
        self.latestImageSize = (
            None if not fromDict or propDict.get(
                "latestImageSize"
            ) is None
            else propDict["latestImageSize"])
        self.latestTag = (
            None if not fromDict or propDict.get(
                "latestTag"
            ) is None
            else propDict["latestTag"])
        self.licenseTerms = (
            None if not fromDict or propDict.get(
                "licenseTerms"
            ) is None
            else [ LicenseMetadata(i)
            for i in propDict["licenseTerms"] ])
        self.logo = (
            None if not fromDict or propDict.get(
                "logo"
            ) is None
            else propDict["logo"])
        self.manualScanEnabled = (
            None if not fromDict or propDict.get(
                "manualScanEnabled"
            ) is None
            else propDict["manualScanEnabled"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.namespace = (
            None if not fromDict or propDict.get(
                "namespace"
            ) is None
            else propDict["namespace"])
        self.policyLabels = (
            None if not fromDict or propDict.get(
                "policyLabels"
            ) is None
            else propDict["policyLabels"])
        self.productNames = (
            None if not fromDict or propDict.get(
                "productNames"
            ) is None
            else propDict["productNames"])
        self.publisher = (
            None if not fromDict or propDict.get(
                "publisher"
            ) is None
            else propDict["publisher"])
        self.releaseType = (
            None if not fromDict or propDict.get(
                "releaseType"
            ) is None
            else propDict["releaseType"])
        self.scanEnabled = (
            None if not fromDict or propDict.get(
                "scanEnabled"
            ) is None
            else propDict["scanEnabled"])
        self.sharedWithOrgs = (
            None if not fromDict or propDict.get(
                "sharedWithOrgs"
            ) is None
            else propDict["sharedWithOrgs"])
        self.sharedWithTeams = (
            None if not fromDict or propDict.get(
                "sharedWithTeams"
            ) is None
            else propDict["sharedWithTeams"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])
        self.showScanResults = (
            None if not fromDict or propDict.get(
                "showScanResults"
            ) is None
            else propDict["showScanResults"])
        self.systemLabels = (
            None if not fromDict or propDict.get(
                "systemLabels"
            ) is None
            else propDict["systemLabels"])
        self.tags = (
            None if not fromDict or propDict.get(
                "tags"
            ) is None
            else propDict["tags"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def accessType(self):
        """ """
        return self._accessType

    @accessType.setter
    def accessType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._accessType = value
        else:
            raise TypeError(
                'Property "accessType" of type "list<AccessTypeEnum>" set to '
                'wrong type'
            )

    @property
    def builtBy(self):
        """str: organization that built the repository"""
        return self._builtBy

    @builtBy.setter
    def builtBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._builtBy = value
        else:
            raise TypeError(
                'Property "builtBy" of type "list<str>" set to wrong type'
            )

    @property
    def canGuestPull(self):
        """ """
        return self._canGuestPull

    @canGuestPull.setter
    def canGuestPull(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canGuestPull = value
        else:
            raise TypeError(
                'Property "canGuestPull" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def canPublicList(self):
        """ """
        return self._canPublicList

    @canPublicList.setter
    def canPublicList(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canPublicList = value
        else:
            raise TypeError(
                'Property "canPublicList" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def categories(self):
        """list: list of categories the repository belongs to"""
        return self._categories

    @categories.setter
    def categories(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._categories = value
        else:
            raise TypeError(
                'Property "categories" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: description of the repo"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """ """
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def hasSignedTag(self):
        """bool: whether the container has any signed tags"""
        return self._hasSignedTag

    @hasSignedTag.setter
    def hasSignedTag(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedTag = value
        else:
            raise TypeError(
                'Property "hasSignedTag" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def isFavourite(self):
        """ """
        return self._isFavourite

    @isFavourite.setter
    def isFavourite(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isFavourite = value
        else:
            raise TypeError(
                'Property "isFavourite" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def isMultiArchitecture(self):
        """ """
        return self._isMultiArchitecture

    @isMultiArchitecture.setter
    def isMultiArchitecture(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMultiArchitecture = value
        else:
            raise TypeError(
                'Property "isMultiArchitecture" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def isMultinodeEnabled(self):
        """ """
        return self._isMultinodeEnabled

    @isMultinodeEnabled.setter
    def isMultinodeEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMultinodeEnabled = value
        else:
            raise TypeError(
                'Property "isMultinodeEnabled" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def isPublic(self):
        """ """
        return self._isPublic

    @isPublic.setter
    def isPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isPublic = value
        else:
            raise TypeError(
                'Property "isPublic" of type "list<bool>" set to wrong type'
            )

    @property
    def isReadOnly(self):
        """ """
        return self._isReadOnly

    @isReadOnly.setter
    def isReadOnly(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isReadOnly = value
        else:
            raise TypeError(
                'Property "isReadOnly" of type "list<bool>" set to wrong type'
            )

    @property
    def labels(self):
        """list: list of user defined labels on the repository"""
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def latestArchitectureVariants(self):
        """list: list of latest tag arch variants which include their specific
         metadata"""
        return self._latestArchitectureVariants

    @latestArchitectureVariants.setter
    def latestArchitectureVariants(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._latestArchitectureVariants = value
        else:
            raise TypeError(
                'Property "latestArchitectureVariants" of type "list<ImageArc'
                'hitectureVariant>" set to wrong type'
            )

    @property
    def latestImageSize(self):
        """long: size of the latest image, in bytes"""
        return self._latestImageSize

    @latestImageSize.setter
    def latestImageSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._latestImageSize = value
        else:
            raise TypeError(
                'Property "latestImageSize" of type "list<long>" set to wrong'
                ' type'
            )

    @property
    def latestTag(self):
        """str: latest tag"""
        return self._latestTag

    @latestTag.setter
    def latestTag(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._latestTag = value
        else:
            raise TypeError(
                'Property "latestTag" of type "list<str>" set to wrong type'
            )

    @property
    def licenseTerms(self):
        """list: License information for the model"""
        return self._licenseTerms

    @licenseTerms.setter
    def licenseTerms(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._licenseTerms = value
        else:
            raise TypeError(
                'Property "licenseTerms" of type "list<LicenseMetadata>" set '
                'to wrong type'
            )

    @property
    def logo(self):
        """ """
        return self._logo

    @logo.setter
    def logo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logo = value
        else:
            raise TypeError(
                'Property "logo" of type "list<str>" set to wrong type'
            )

    @property
    def manualScanEnabled(self):
        """bool: depending on settings, to allow manual trigger of scan from U
        I"""
        return self._manualScanEnabled

    @manualScanEnabled.setter
    def manualScanEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._manualScanEnabled = value
        else:
            raise TypeError(
                'Property "manualScanEnabled" of type "list<bool>" set to wro'
                'ng type'
            )

    @property
    def name(self):
        """ """
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def namespace(self):
        """ """
        return self._namespace

    @namespace.setter
    def namespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._namespace = value
        else:
            raise TypeError(
                'Property "namespace" of type "list<str>" set to wrong type'
            )

    @property
    def policyLabels(self):
        """list: list of policy labels on the repository"""
        return self._policyLabels

    @policyLabels.setter
    def policyLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._policyLabels = value
        else:
            raise TypeError(
                'Property "policyLabels" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def productNames(self):
        """list: Product names"""
        return self._productNames

    @productNames.setter
    def productNames(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productNames = value
        else:
            raise TypeError(
                'Property "productNames" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def publisher(self):
        """str: organization that published the repository"""
        return self._publisher

    @publisher.setter
    def publisher(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._publisher = value
        else:
            raise TypeError(
                'Property "publisher" of type "list<str>" set to wrong type'
            )

    @property
    def releaseType(self):
        """ReleaseTypeEnum: Release type enum for the container image tag in t
        he product lifecycle."""
        return self._releaseType

    @releaseType.setter
    def releaseType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._releaseType = value
        else:
            raise TypeError(
                'Property "releaseType" of type "list<ReleaseTypeEnum>" set t'
                'o wrong type'
            )

    @property
    def scanEnabled(self):
        """bool: whether images in this repository should be scanned"""
        return self._scanEnabled

    @scanEnabled.setter
    def scanEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._scanEnabled = value
        else:
            raise TypeError(
                'Property "scanEnabled" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def sharedWithOrgs(self):
        """list: list org names with which this repository is shared"""
        return self._sharedWithOrgs

    @sharedWithOrgs.setter
    def sharedWithOrgs(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sharedWithOrgs = value
        else:
            raise TypeError(
                'Property "sharedWithOrgs" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def sharedWithTeams(self):
        """list: list teams (in format 'org/team') with which this repository 
        is shared"""
        return self._sharedWithTeams

    @sharedWithTeams.setter
    def sharedWithTeams(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sharedWithTeams = value
        else:
            raise TypeError(
                'Property "sharedWithTeams" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def shortDescription(self):
        """str: description of the repo"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def showScanResults(self):
        """bool: depending on settings, to allow UI to show Security Scan Resu
        lts or not"""
        return self._showScanResults

    @showScanResults.setter
    def showScanResults(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._showScanResults = value
        else:
            raise TypeError(
                'Property "showScanResults" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def systemLabels(self):
        """list: list of system defined labels on the repository, can not be e
        dited"""
        return self._systemLabels

    @systemLabels.setter
    def systemLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._systemLabels = value
        else:
            raise TypeError(
                'Property "systemLabels" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def tags(self):
        """list: list of image tags in the repository"""
        return self._tags

    @tags.setter
    def tags(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._tags = value
        else:
            raise TypeError(
                'Property "tags" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: ISO-8601 format date when the repository was last updated"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._accessType is not None:
            result["accessType"] = \
                self._accessType
        if self._builtBy is not None:
            result["builtBy"] = \
                self._builtBy
        if self._canGuestPull is not None:
            result["canGuestPull"] = \
                self._canGuestPull
        if self._canPublicList is not None:
            result["canPublicList"] = \
                self._canPublicList
        if self._categories is not None:
            result["categories"] = \
                self._categories
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._hasSignedTag is not None:
            result["hasSignedTag"] = \
                self._hasSignedTag
        if self._isFavourite is not None:
            result["isFavourite"] = \
                self._isFavourite
        if self._isMultiArchitecture is not None:
            result["isMultiArchitecture"] = \
                self._isMultiArchitecture
        if self._isMultinodeEnabled is not None:
            result["isMultinodeEnabled"] = \
                self._isMultinodeEnabled
        if self._isPublic is not None:
            result["isPublic"] = \
                self._isPublic
        if self._isReadOnly is not None:
            result["isReadOnly"] = \
                self._isReadOnly
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._latestArchitectureVariants:
            result["latestArchitectureVariants"] = [
                i.toDict() for i in self._latestArchitectureVariants 
            ] if self._latestArchitectureVariants else []
        if self._latestImageSize is not None:
            result["latestImageSize"] = \
                self._latestImageSize
        if self._latestTag is not None:
            result["latestTag"] = \
                self._latestTag
        if self._licenseTerms:
            result["licenseTerms"] = [
                i.toDict() for i in self._licenseTerms 
            ] if self._licenseTerms else []
        if self._logo is not None:
            result["logo"] = \
                self._logo
        if self._manualScanEnabled is not None:
            result["manualScanEnabled"] = \
                self._manualScanEnabled
        if self._name is not None:
            result["name"] = \
                self._name
        if self._namespace is not None:
            result["namespace"] = \
                self._namespace
        if self._policyLabels is not None:
            result["policyLabels"] = \
                self._policyLabels
        if self._productNames is not None:
            result["productNames"] = \
                self._productNames
        if self._publisher is not None:
            result["publisher"] = \
                self._publisher
        if self._releaseType is not None:
            result["releaseType"] = \
                self._releaseType
        if self._scanEnabled is not None:
            result["scanEnabled"] = \
                self._scanEnabled
        if self._sharedWithOrgs is not None:
            result["sharedWithOrgs"] = \
                self._sharedWithOrgs
        if self._sharedWithTeams is not None:
            result["sharedWithTeams"] = \
                self._sharedWithTeams
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        if self._showScanResults is not None:
            result["showScanResults"] = \
                self._showScanResults
        if self._systemLabels is not None:
            result["systemLabels"] = \
                self._systemLabels
        if self._tags is not None:
            result["tags"] = \
                self._tags
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 2):
            raise ValueError(
                "Repository.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 2")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "Repository.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if (self._name is not None
            and
            not re.match(
                r"^[a-zA-Z\d._-]*$",
                 self._name)):
            raise ValueError(
                "Repository.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-zA-Z\d._-]*$")
        if (self._displayName is not None
            and
            len(self._displayName) > 64):
            raise ValueError(
                "Repository.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 64")
        if (self._latestArchitectureVariants is not None):
            for obj in self._latestArchitectureVariants:
                if (obj is not None): obj.isValid()
        if (self._licenseTerms is not None):
            for obj in self._licenseTerms:
                if (obj is not None): obj.isValid()
        return True
    

