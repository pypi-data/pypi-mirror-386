"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ArtifactType import ArtifactTypeEnum
from .Artifact import Artifact

# Unused import over optimization prevention
str(repr(ArtifactTypeEnum))
str(repr(Artifact))


if sys.version_info > (3,):
    long = int
    unicode = str

class ArtifactToCollectionRequest(object):
    """Request to append Artifact to Collection"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.artifactDetails = (
            None if not fromDict or propDict.get(
                "artifactDetails"
            ) is None
            else propDict["artifactDetails"])
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.collectionDetails = (
            None if not fromDict or propDict.get(
                "collectionDetails"
            ) is None
            else propDict["collectionDetails"])

    @property
    def artifactDetails(self):
        """Artifact: NGC Artifact"""
        return self._artifactDetails

    @artifactDetails.setter
    def artifactDetails(self, value):
        if value is not None and not isinstance(value, Artifact):
            value = Artifact(value)
        if (value is None) or isinstance(value, Artifact):
            self._artifactDetails = value
        else:
            raise TypeError(
                'Property "artifactDetails" of type "list<Artifact>" set to w'
                'rong type'
            )

    @property
    def artifactType(self):
        """ """
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<ArtifactTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def collectionDetails(self):
        """Artifact: NGC Artifact"""
        return self._collectionDetails

    @collectionDetails.setter
    def collectionDetails(self, value):
        if value is not None and not isinstance(value, Artifact):
            value = Artifact(value)
        if (value is None) or isinstance(value, Artifact):
            self._collectionDetails = value
        else:
            raise TypeError(
                'Property "collectionDetails" of type "list<Artifact>" set to'
                ' wrong type'
            )

    def toDict(self):
        result = {}
        if self._artifactDetails:
            result["artifactDetails"] = \
                self._artifactDetails.toDict() if self._artifactDetails is not None else None
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._collectionDetails:
            result["collectionDetails"] = \
                self._collectionDetails.toDict() if self._collectionDetails is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._artifactType is None:
            raise ValueError(
                "ArtifactToCollectionRequest.artifactType doesnt match requirement:" 
                "required: True"
            )
        if self._collectionDetails is None:
            raise ValueError(
                "ArtifactToCollectionRequest.collectionDetails doesnt match requirement:" 
                "required: True"
            )
        if self._artifactDetails is None:
            raise ValueError(
                "ArtifactToCollectionRequest.artifactDetails doesnt match requirement:" 
                "required: True"
            )
        if (self._collectionDetails is not None): self._collectionDetails.isValid()
        if (self._artifactDetails is not None): self._artifactDetails.isValid()
        return True
    

