"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .FileCopyStatus import FileCopyStatus
from .FailureDetails import FailureDetails

# Unused import over optimization prevention
str(repr(FileCopyStatus))
str(repr(FailureDetails))


if sys.version_info > (3,):
    long = int
    unicode = str

class WorkflowHistory(object):
    """Workflow details"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.childWorkflows = (
            None if not fromDict or propDict.get(
                "childWorkflows"
            ) is None
            else propDict["childWorkflows"])
        self.completedActivities = (
            None if not fromDict or propDict.get(
                "completedActivities"
            ) is None
            else propDict["completedActivities"])
        self.currentRunningActivity = (
            None if not fromDict or propDict.get(
                "currentRunningActivity"
            ) is None
            else propDict["currentRunningActivity"])
        self.failures = (
            None if not fromDict or propDict.get(
                "failures"
            ) is None
            else [ FailureDetails(i)
            for i in propDict["failures"] ])
        self.fileCopyStatus = (
            None if not fromDict or propDict.get(
                "fileCopyStatus"
            ) is None
            else propDict["fileCopyStatus"])
        self.pendingActivities = (
            None if not fromDict or propDict.get(
                "pendingActivities"
            ) is None
            else propDict["pendingActivities"])

    @property
    def childWorkflows(self):
        """list: Child workflows"""
        return self._childWorkflows

    @childWorkflows.setter
    def childWorkflows(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._childWorkflows = value
        else:
            raise TypeError(
                'Property "childWorkflows" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def completedActivities(self):
        """list: Activities completed in the workflow"""
        return self._completedActivities

    @completedActivities.setter
    def completedActivities(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._completedActivities = value
        else:
            raise TypeError(
                'Property "completedActivities" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def currentRunningActivity(self):
        """str: Current pending activity"""
        return self._currentRunningActivity

    @currentRunningActivity.setter
    def currentRunningActivity(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._currentRunningActivity = value
        else:
            raise TypeError(
                'Property "currentRunningActivity" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def failures(self):
        """list: List of failed activity details"""
        return self._failures

    @failures.setter
    def failures(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._failures = value
        else:
            raise TypeError(
                'Property "failures" of type "list<FailureDetails>" set to wr'
                'ong type'
            )

    @property
    def fileCopyStatus(self):
        """FileCopyStatus: Progress of cloning artifact version files"""
        return self._fileCopyStatus

    @fileCopyStatus.setter
    def fileCopyStatus(self, value):
        if value is not None and not isinstance(value, FileCopyStatus):
            value = FileCopyStatus(value)
        if (value is None) or isinstance(value, FileCopyStatus):
            self._fileCopyStatus = value
        else:
            raise TypeError(
                'Property "fileCopyStatus" of type "list<FileCopyStatus>" set'
                ' to wrong type'
            )

    @property
    def pendingActivities(self):
        """list: Activities to be completed"""
        return self._pendingActivities

    @pendingActivities.setter
    def pendingActivities(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._pendingActivities = value
        else:
            raise TypeError(
                'Property "pendingActivities" of type "list<str>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._childWorkflows is not None:
            result["childWorkflows"] = \
                self._childWorkflows
        if self._completedActivities is not None:
            result["completedActivities"] = \
                self._completedActivities
        if self._currentRunningActivity is not None:
            result["currentRunningActivity"] = \
                self._currentRunningActivity
        if self._failures:
            result["failures"] = [
                i.toDict() for i in self._failures 
            ] if self._failures else []
        if self._fileCopyStatus:
            result["fileCopyStatus"] = \
                self._fileCopyStatus.toDict() if self._fileCopyStatus is not None else None
        if self._pendingActivities is not None:
            result["pendingActivities"] = \
                self._pendingActivities
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._fileCopyStatus is not None): self._fileCopyStatus.isValid()
        if (self._failures is not None):
            for obj in self._failures:
                if (obj is not None): obj.isValid()
        return True
    

