"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class WorkflowDetails(object):
    """Workflow details"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.endTime = (
            None if not fromDict or propDict.get(
                "endTime"
            ) is None
            else propDict["endTime"])
        self.errorCode = (
            None if not fromDict or propDict.get(
                "errorCode"
            ) is None
            else propDict["errorCode"])
        self.errorDescription = (
            None if not fromDict or propDict.get(
                "errorDescription"
            ) is None
            else propDict["errorDescription"])
        self.runId = (
            None if not fromDict or propDict.get(
                "runId"
            ) is None
            else propDict["runId"])
        self.startTime = (
            None if not fromDict or propDict.get(
                "startTime"
            ) is None
            else propDict["startTime"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.workflowId = (
            None if not fromDict or propDict.get(
                "workflowId"
            ) is None
            else propDict["workflowId"])
        self.workflowType = (
            None if not fromDict or propDict.get(
                "workflowType"
            ) is None
            else propDict["workflowType"])

    @property
    def endTime(self):
        """str: Workflow end time"""
        return self._endTime

    @endTime.setter
    def endTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._endTime = value
        else:
            raise TypeError(
                'Property "endTime" of type "list<str>" set to wrong type'
            )

    @property
    def errorCode(self):
        """str: Error status code"""
        return self._errorCode

    @errorCode.setter
    def errorCode(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._errorCode = value
        else:
            raise TypeError(
                'Property "errorCode" of type "list<str>" set to wrong type'
            )

    @property
    def errorDescription(self):
        """str: Error Description"""
        return self._errorDescription

    @errorDescription.setter
    def errorDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._errorDescription = value
        else:
            raise TypeError(
                'Property "errorDescription" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def runId(self):
        """str: Workflow run id"""
        return self._runId

    @runId.setter
    def runId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._runId = value
        else:
            raise TypeError(
                'Property "runId" of type "list<str>" set to wrong type'
            )

    @property
    def startTime(self):
        """str: Workflow start time"""
        return self._startTime

    @startTime.setter
    def startTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._startTime = value
        else:
            raise TypeError(
                'Property "startTime" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """str: Workflow Status"""
        return self._status

    @status.setter
    def status(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<str>" set to wrong type'
            )

    @property
    def workflowId(self):
        """str: Async Workflow Id"""
        return self._workflowId

    @workflowId.setter
    def workflowId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._workflowId = value
        else:
            raise TypeError(
                'Property "workflowId" of type "list<str>" set to wrong type'
            )

    @property
    def workflowType(self):
        """str: Workflow type"""
        return self._workflowType

    @workflowType.setter
    def workflowType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._workflowType = value
        else:
            raise TypeError(
                'Property "workflowType" of type "list<str>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._endTime is not None:
            result["endTime"] = \
                self._endTime
        if self._errorCode is not None:
            result["errorCode"] = \
                self._errorCode
        if self._errorDescription is not None:
            result["errorDescription"] = \
                self._errorDescription
        if self._runId is not None:
            result["runId"] = \
                self._runId
        if self._startTime is not None:
            result["startTime"] = \
                self._startTime
        if self._status is not None:
            result["status"] = \
                self._status
        if self._workflowId is not None:
            result["workflowId"] = \
                self._workflowId
        if self._workflowType is not None:
            result["workflowType"] = \
                self._workflowType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

