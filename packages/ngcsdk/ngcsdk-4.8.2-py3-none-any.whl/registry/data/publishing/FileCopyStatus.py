"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class FileCopyStatus(object):
    """Progress of cloning artifact version files"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.approxTimeRemaining = (
            None if not fromDict or propDict.get(
                "approxTimeRemaining"
            ) is None
            else propDict["approxTimeRemaining"])
        self.filesCopied = (
            None if not fromDict or propDict.get(
                "filesCopied"
            ) is None
            else propDict["filesCopied"])
        self.percentageCloned = (
            None if not fromDict or propDict.get(
                "percentageCloned"
            ) is None
            else propDict["percentageCloned"])
        self.sizeCopied = (
            None if not fromDict or propDict.get(
                "sizeCopied"
            ) is None
            else propDict["sizeCopied"])
        self.totalFiles = (
            None if not fromDict or propDict.get(
                "totalFiles"
            ) is None
            else propDict["totalFiles"])
        self.totalSize = (
            None if not fromDict or propDict.get(
                "totalSize"
            ) is None
            else propDict["totalSize"])

    @property
    def approxTimeRemaining(self):
        """str: Approximate time remaining to complete cloning in seconds"""
        return self._approxTimeRemaining

    @approxTimeRemaining.setter
    def approxTimeRemaining(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._approxTimeRemaining = value
        else:
            raise TypeError(
                'Property "approxTimeRemaining" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def filesCopied(self):
        """long: Number of files copied"""
        return self._filesCopied

    @filesCopied.setter
    def filesCopied(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._filesCopied = value
        else:
            raise TypeError(
                'Property "filesCopied" of type "list<long>" set to wrong typ'
                'e'
            )

    @property
    def percentageCloned(self):
        """str: Percentage of files cloned"""
        return self._percentageCloned

    @percentageCloned.setter
    def percentageCloned(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._percentageCloned = value
        else:
            raise TypeError(
                'Property "percentageCloned" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def sizeCopied(self):
        """long: Combined file size copied"""
        return self._sizeCopied

    @sizeCopied.setter
    def sizeCopied(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._sizeCopied = value
        else:
            raise TypeError(
                'Property "sizeCopied" of type "list<long>" set to wrong type'
            )

    @property
    def totalFiles(self):
        """long: Total files at source"""
        return self._totalFiles

    @totalFiles.setter
    def totalFiles(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalFiles = value
        else:
            raise TypeError(
                'Property "totalFiles" of type "list<long>" set to wrong type'
            )

    @property
    def totalSize(self):
        """long: Combined file size at source"""
        return self._totalSize

    @totalSize.setter
    def totalSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalSize = value
        else:
            raise TypeError(
                'Property "totalSize" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._approxTimeRemaining is not None:
            result["approxTimeRemaining"] = \
                self._approxTimeRemaining
        if self._filesCopied is not None:
            result["filesCopied"] = \
                self._filesCopied
        if self._percentageCloned is not None:
            result["percentageCloned"] = \
                self._percentageCloned
        if self._sizeCopied is not None:
            result["sizeCopied"] = \
                self._sizeCopied
        if self._totalFiles is not None:
            result["totalFiles"] = \
                self._totalFiles
        if self._totalSize is not None:
            result["totalSize"] = \
                self._totalSize
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

