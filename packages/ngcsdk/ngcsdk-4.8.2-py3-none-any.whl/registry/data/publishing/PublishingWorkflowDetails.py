"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .WorkflowHistory import WorkflowHistory
from .WorkflowDetails import WorkflowDetails

# Unused import over optimization prevention
str(repr(WorkflowDetails))
str(repr(WorkflowHistory))


if sys.version_info > (3,):
    long = int
    unicode = str

class PublishingWorkflowDetails(object):
    """Request to fetch the Publishing Async workflow details"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.workflowDetails = (
            None if not fromDict or propDict.get(
                "workflowDetails"
            ) is None
            else propDict["workflowDetails"])
        self.workflowHistory = (
            None if not fromDict or propDict.get(
                "workflowHistory"
            ) is None
            else propDict["workflowHistory"])

    @property
    def workflowDetails(self):
        """WorkflowDetails: Workflow details"""
        return self._workflowDetails

    @workflowDetails.setter
    def workflowDetails(self, value):
        if value is not None and not isinstance(value, WorkflowDetails):
            value = WorkflowDetails(value)
        if (value is None) or isinstance(value, WorkflowDetails):
            self._workflowDetails = value
        else:
            raise TypeError(
                'Property "workflowDetails" of type "list<WorkflowDetails>" s'
                'et to wrong type'
            )

    @property
    def workflowHistory(self):
        """WorkflowHistory: Workflow details"""
        return self._workflowHistory

    @workflowHistory.setter
    def workflowHistory(self, value):
        if value is not None and not isinstance(value, WorkflowHistory):
            value = WorkflowHistory(value)
        if (value is None) or isinstance(value, WorkflowHistory):
            self._workflowHistory = value
        else:
            raise TypeError(
                'Property "workflowHistory" of type "list<WorkflowHistory>" s'
                'et to wrong type'
            )

    def toDict(self):
        result = {}
        if self._workflowDetails:
            result["workflowDetails"] = \
                self._workflowDetails.toDict() if self._workflowDetails is not None else None
        if self._workflowHistory:
            result["workflowHistory"] = \
                self._workflowHistory.toDict() if self._workflowHistory is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._workflowDetails is not None): self._workflowDetails.isValid()
        if (self._workflowHistory is not None): self._workflowHistory.isValid()
        return True
    

