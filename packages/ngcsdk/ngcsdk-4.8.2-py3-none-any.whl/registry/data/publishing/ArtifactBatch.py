"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ArtifactBatch(object):
    """NGC Artifact Batch which allows for publishing a batch of a maximum of 
    10 artifacts. This schema allows batches of different versions of a so
    urce artifact, and batches of different artifacts (by name) in the same so
    urce org/team"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.environmentUri = (
            None if not fromDict or propDict.get(
                "environmentUri"
            ) is None
            else propDict["environmentUri"])
        self.names = (
            None if not fromDict or propDict.get(
                "names"
            ) is None
            else propDict["names"])
        self.org = (
            None if not fromDict or propDict.get(
                "org"
            ) is None
            else propDict["org"])
        self.team = (
            None if not fromDict or propDict.get(
                "team"
            ) is None
            else propDict["team"])
        self.versions = (
            None if not fromDict or propDict.get(
                "versions"
            ) is None
            else propDict["versions"])

    @property
    def environmentUri(self):
        """str: Environment and microservice URI artifact(s) is/are from. Exam
        ples: https://models.ngc.nvidia.com, https://nvcr.io, etc."""
        return self._environmentUri

    @environmentUri.setter
    def environmentUri(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._environmentUri = value
        else:
            raise TypeError(
                'Property "environmentUri" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def names(self):
        """list: Name(s) of the NGC artifact(s) unique to the org or team"""
        return self._names

    @names.setter
    def names(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._names = value
        else:
            raise TypeError(
                'Property "names" of type "list<str>" set to wrong type'
            )

    @property
    def org(self):
        """str: Name of the NGC org that owns the artifact(s)"""
        return self._org

    @org.setter
    def org(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._org = value
        else:
            raise TypeError(
                'Property "org" of type "list<str>" set to wrong type'
            )

    @property
    def team(self):
        """str: (Optional) Name of the NGC team under the specified org that o
        wns the artifact(s)"""
        return self._team

    @team.setter
    def team(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._team = value
        else:
            raise TypeError(
                'Property "team" of type "list<str>" set to wrong type'
            )

    @property
    def versions(self):
        """list: Versions of the NGC artifact(s)"""
        return self._versions

    @versions.setter
    def versions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._versions = value
        else:
            raise TypeError(
                'Property "versions" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._environmentUri is not None:
            result["environmentUri"] = \
                self._environmentUri
        if self._names is not None:
            result["names"] = \
                self._names
        if self._org is not None:
            result["org"] = \
                self._org
        if self._team is not None:
            result["team"] = \
                self._team
        if self._versions is not None:
            result["versions"] = \
                self._versions
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._org is None:
            raise ValueError(
                "ArtifactBatch.org doesnt match requirement:" 
                "required: True"
            )
        if self._names is None:
            raise ValueError(
                "ArtifactBatch.names doesnt match requirement:" 
                "required: True"
            )
        if (self._names is not None
            and
            len(self._names) > 10):
            raise ValueError(
                "ArtifactBatch.names: " + str(self._names) + 
                " doesnt match requirement: maxItems: 10")
        if (self._names is not None
            and
            len(self._names) < 1):
            raise ValueError(
                "ArtifactBatch.names: " + str(self._names) + 
                " doesnt match requirement: minItems: 1")
        if (self._versions is not None
            and
            len(self._versions) > 10):
            raise ValueError(
                "ArtifactBatch.versions: " + str(self._versions) + 
                " doesnt match requirement: maxItems: 10")
        return True
    

