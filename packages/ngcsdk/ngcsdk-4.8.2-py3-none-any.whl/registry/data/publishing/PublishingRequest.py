"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Artifact import Artifact
from .ArtifactType import ArtifactTypeEnum
from .LicenseMetadata import LicenseMetadata
from .AccessTypeEnum import AccessTypeEnum

# Unused import over optimization prevention
str(repr(LicenseMetadata))
str(repr(ArtifactTypeEnum))
str(repr(Artifact))
str(repr(AccessTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class PublishingRequest(object):
    """Request to publish an artifact"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accessType = (
            None if not fromDict or propDict.get(
                "accessType"
            ) is None
            else propDict["accessType"])
        self.artifactType = (
            None if not fromDict or propDict.get(
                "artifactType"
            ) is None
            else propDict["artifactType"])
        self.licenseTerms = (
            None if not fromDict or propDict.get(
                "licenseTerms"
            ) is None
            else [ LicenseMetadata(i)
            for i in propDict["licenseTerms"] ])
        self.nspectId = (
            None if not fromDict or propDict.get(
                "nspectId"
            ) is None
            else propDict["nspectId"])
        self.policy = (
            None if not fromDict or propDict.get(
                "policy"
            ) is None
            else propDict["policy"])
        self.productNames = (
            None if not fromDict or propDict.get(
                "productNames"
            ) is None
            else propDict["productNames"])
        self.publishAsListedToPublic = (
            None if not fromDict or propDict.get(
                "publishAsListedToPublic"
            ) is None
            else propDict["publishAsListedToPublic"])
        self.publishAssetsToCdn = (
            None if not fromDict or propDict.get(
                "publishAssetsToCdn"
            ) is None
            else propDict["publishAssetsToCdn"])
        self.publishToPublic = (
            None if not fromDict or propDict.get(
                "publishToPublic"
            ) is None
            else propDict["publishToPublic"])
        self.publishWithGuestAccess = (
            None if not fromDict or propDict.get(
                "publishWithGuestAccess"
            ) is None
            else propDict["publishWithGuestAccess"])
        self.sign = (
            None if not fromDict or propDict.get(
                "sign"
            ) is None
            else propDict["sign"])
        self.sourceArtifact = (
            None if not fromDict or propDict.get(
                "sourceArtifact"
            ) is None
            else propDict["sourceArtifact"])
        self.targetArtifact = (
            None if not fromDict or propDict.get(
                "targetArtifact"
            ) is None
            else propDict["targetArtifact"])
        self.uploadPending = (
            None if not fromDict or propDict.get(
                "uploadPending"
            ) is None
            else propDict["uploadPending"])

    @property
    def accessType(self):
        """ """
        return self._accessType

    @accessType.setter
    def accessType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._accessType = value
        else:
            raise TypeError(
                'Property "accessType" of type "list<AccessTypeEnum>" set to '
                'wrong type'
            )

    @property
    def artifactType(self):
        """ """
        return self._artifactType

    @artifactType.setter
    def artifactType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._artifactType = value
        else:
            raise TypeError(
                'Property "artifactType" of type "list<ArtifactTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def licenseTerms(self):
        """list: License information for the model"""
        return self._licenseTerms

    @licenseTerms.setter
    def licenseTerms(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._licenseTerms = value
        else:
            raise TypeError(
                'Property "licenseTerms" of type "list<LicenseMetadata>" set '
                'to wrong type'
            )

    @property
    def nspectId(self):
        """str: NSpect ID for this artifact"""
        return self._nspectId

    @nspectId.setter
    def nspectId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nspectId = value
        else:
            raise TypeError(
                'Property "nspectId" of type "list<str>" set to wrong type'
            )

    @property
    def policy(self):
        """list: Policy label to be added to a specific version"""
        return self._policy

    @policy.setter
    def policy(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._policy = value
        else:
            raise TypeError(
                'Property "policy" of type "list<str>" set to wrong type'
            )

    @property
    def productNames(self):
        """list: Product names"""
        return self._productNames

    @productNames.setter
    def productNames(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productNames = value
        else:
            raise TypeError(
                'Property "productNames" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def publishAsListedToPublic(self):
        """bool: Enable public listings including: NGC Search. Default: true. 
        Pre-req: publishToPublic set to true"""
        return self._publishAsListedToPublic

    @publishAsListedToPublic.setter
    def publishAsListedToPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._publishAsListedToPublic = value
        else:
            raise TypeError(
                'Property "publishAsListedToPublic" of type "list<bool>" set '
                'to wrong type'
            )

    @property
    def publishAssetsToCdn(self):
        """bool: Publish detected assets in the README `description` field of 
        the asset to CDN"""
        return self._publishAssetsToCdn

    @publishAssetsToCdn.setter
    def publishAssetsToCdn(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._publishAssetsToCdn = value
        else:
            raise TypeError(
                'Property "publishAssetsToCdn" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def publishToPublic(self):
        """bool: Enable public access to artifact"""
        return self._publishToPublic

    @publishToPublic.setter
    def publishToPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._publishToPublic = value
        else:
            raise TypeError(
                'Property "publishToPublic" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def publishWithGuestAccess(self):
        """bool: Enable public anonymous access to artifact. Pre-req: publishT
        oPublic set to true"""
        return self._publishWithGuestAccess

    @publishWithGuestAccess.setter
    def publishWithGuestAccess(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._publishWithGuestAccess = value
        else:
            raise TypeError(
                'Property "publishWithGuestAccess" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def sign(self):
        """bool: Sign the source container image with Nvidia key before publis
        hing"""
        return self._sign

    @sign.setter
    def sign(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._sign = value
        else:
            raise TypeError(
                'Property "sign" of type "list<bool>" set to wrong type'
            )

    @property
    def sourceArtifact(self):
        """Artifact: NGC Artifact"""
        return self._sourceArtifact

    @sourceArtifact.setter
    def sourceArtifact(self, value):
        if value is not None and not isinstance(value, Artifact):
            value = Artifact(value)
        if (value is None) or isinstance(value, Artifact):
            self._sourceArtifact = value
        else:
            raise TypeError(
                'Property "sourceArtifact" of type "list<Artifact>" set to wr'
                'ong type'
            )

    @property
    def targetArtifact(self):
        """Artifact: NGC Artifact"""
        return self._targetArtifact

    @targetArtifact.setter
    def targetArtifact(self, value):
        if value is not None and not isinstance(value, Artifact):
            value = Artifact(value)
        if (value is None) or isinstance(value, Artifact):
            self._targetArtifact = value
        else:
            raise TypeError(
                'Property "targetArtifact" of type "list<Artifact>" set to wr'
                'ong type'
            )

    @property
    def uploadPending(self):
        """bool: Allow the cloned model version to continue to be updated with
         files. A follow up commit is needed to update status to 'Uplo
        ad Complete'."""
        return self._uploadPending

    @uploadPending.setter
    def uploadPending(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._uploadPending = value
        else:
            raise TypeError(
                'Property "uploadPending" of type "list<bool>" set to wrong t'
                'ype'
            )

    def toDict(self):
        result = {}
        if self._accessType is not None:
            result["accessType"] = \
                self._accessType
        if self._artifactType is not None:
            result["artifactType"] = \
                self._artifactType
        if self._licenseTerms:
            result["licenseTerms"] = [
                i.toDict() for i in self._licenseTerms 
            ] if self._licenseTerms else []
        if self._nspectId is not None:
            result["nspectId"] = \
                self._nspectId
        if self._policy is not None:
            result["policy"] = \
                self._policy
        if self._productNames is not None:
            result["productNames"] = \
                self._productNames
        if self._publishAsListedToPublic is not None:
            result["publishAsListedToPublic"] = \
                self._publishAsListedToPublic
        if self._publishAssetsToCdn is not None:
            result["publishAssetsToCdn"] = \
                self._publishAssetsToCdn
        if self._publishToPublic is not None:
            result["publishToPublic"] = \
                self._publishToPublic
        if self._publishWithGuestAccess is not None:
            result["publishWithGuestAccess"] = \
                self._publishWithGuestAccess
        if self._sign is not None:
            result["sign"] = \
                self._sign
        if self._sourceArtifact:
            result["sourceArtifact"] = \
                self._sourceArtifact.toDict() if self._sourceArtifact is not None else None
        if self._targetArtifact:
            result["targetArtifact"] = \
                self._targetArtifact.toDict() if self._targetArtifact is not None else None
        if self._uploadPending is not None:
            result["uploadPending"] = \
                self._uploadPending
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._sourceArtifact is not None): self._sourceArtifact.isValid()
        if (self._targetArtifact is not None): self._targetArtifact.isValid()
        if (self._licenseTerms is not None):
            for obj in self._licenseTerms:
                if (obj is not None): obj.isValid()
        return True
    

