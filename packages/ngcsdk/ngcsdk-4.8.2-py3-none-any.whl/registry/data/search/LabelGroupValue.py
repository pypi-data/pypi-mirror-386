"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class LabelGroupValue(object):
    """Label group values"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.display = (
            None if not fromDict or propDict.get(
                "display"
            ) is None
            else propDict["display"])
        self.value = (
            None if not fromDict or propDict.get(
                "value"
            ) is None
            else propDict["value"])

    @property
    def display(self):
        """str: Display name of the label to show to end user"""
        return self._display

    @display.setter
    def display(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._display = value
        else:
            raise TypeError(
                'Property "display" of type "list<str>" set to wrong type'
            )

    @property
    def value(self):
        """str: Value of the label to be stored in the db"""
        return self._value

    @value.setter
    def value(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._value = value
        else:
            raise TypeError(
                'Property "value" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._display is not None:
            result["display"] = \
                self._display
        if self._value is not None:
            result["value"] = \
                self._value
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._display is None:
            raise ValueError(
                "LabelGroupValue.display doesnt match requirement:" 
                "required: True"
            )
        if (self._display is not None
            and
            len(self._display) > 64):
            raise ValueError(
                "LabelGroupValue.display: " + str(self._display) + 
                " doesnt match requirement: maxLength: 64")
        if self._value is None:
            raise ValueError(
                "LabelGroupValue.value doesnt match requirement:" 
                "required: True"
            )
        if (self._value is not None
            and
            len(self._value) > 64):
            raise ValueError(
                "LabelGroupValue.value: " + str(self._value) + 
                " doesnt match requirement: maxLength: 64")
        if (self._value is not None
            and
            not re.match(
                r"^[a-z][a-zA-Z0-9-.+_]+",
                 self._value)):
            raise ValueError(
                "LabelGroupValue.value: " + str(self._value) + 
                " doesnt match requirement: pattern: ^[a-z][a-zA-Z0-9-.+_]+")
        return True
    

