"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ResourceLabel import ResourceLabel
from .ResourceAttribute import ResourceAttribute
from .ResourceTypeEnum import ResourceTypeEnum
from .AccessTypeEnum import AccessTypeEnum

# Unused import over optimization prevention
str(repr(ResourceAttribute))
str(repr(ResourceLabel))
str(repr(AccessTypeEnum))
str(repr(ResourceTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchResponseResultResource(object):
    """Resources found from search"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accessType = (
            None if not fromDict or propDict.get(
                "accessType"
            ) is None
            else propDict["accessType"])
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else [ ResourceAttribute(i)
            for i in propDict["attributes"] ])
        self.createdBy = (
            None if not fromDict or propDict.get(
                "createdBy"
            ) is None
            else propDict["createdBy"])
        self.dateCreated = (
            None if not fromDict or propDict.get(
                "dateCreated"
            ) is None
            else propDict["dateCreated"])
        self.dateModified = (
            None if not fromDict or propDict.get(
                "dateModified"
            ) is None
            else propDict["dateModified"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.guestAccess = (
            None if not fromDict or propDict.get(
                "guestAccess"
            ) is None
            else propDict["guestAccess"])
        self.isPublic = (
            None if not fromDict or propDict.get(
                "isPublic"
            ) is None
            else propDict["isPublic"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else [ ResourceLabel(i)
            for i in propDict["labels"] ])
        self.msgTimestamp = (
            None if not fromDict or propDict.get(
                "msgTimestamp"
            ) is None
            else propDict["msgTimestamp"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.resourceId = (
            None if not fromDict or propDict.get(
                "resourceId"
            ) is None
            else propDict["resourceId"])
        self.resourceType = (
            None if not fromDict or propDict.get(
                "resourceType"
            ) is None
            else propDict["resourceType"])
        self.sharedWithOrgs = (
            None if not fromDict or propDict.get(
                "sharedWithOrgs"
            ) is None
            else propDict["sharedWithOrgs"])
        self.sharedWithTeams = (
            None if not fromDict or propDict.get(
                "sharedWithTeams"
            ) is None
            else propDict["sharedWithTeams"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.weightFeatured = (
            None if not fromDict or propDict.get(
                "weightFeatured"
            ) is None
            else propDict["weightFeatured"])
        self.weightPopular = (
            None if not fromDict or propDict.get(
                "weightPopular"
            ) is None
            else propDict["weightPopular"])

    @property
    def accessType(self):
        """ """
        return self._accessType

    @accessType.setter
    def accessType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._accessType = value
        else:
            raise TypeError(
                'Property "accessType" of type "list<AccessTypeEnum>" set to '
                'wrong type'
            )

    @property
    def aceName(self):
        """str: ACE name of the resource, if resource only resides on particul
        ar ACE"""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def attributes(self):
        """list: Resource attributes key/value pairs"""
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<ResourceAttribute>" set '
                'to wrong type'
            )

    @property
    def createdBy(self):
        """str: auth_client_id of user that created resource."""
        return self._createdBy

    @createdBy.setter
    def createdBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdBy = value
        else:
            raise TypeError(
                'Property "createdBy" of type "list<str>" set to wrong type'
            )

    @property
    def dateCreated(self):
        """str: Resource creation date in ISO-8601 format"""
        return self._dateCreated

    @dateCreated.setter
    def dateCreated(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dateCreated = value
        else:
            raise TypeError(
                'Property "dateCreated" of type "list<str>" set to wrong type'
            )

    @property
    def dateModified(self):
        """str: Resource last modified date in ISO-8601 format"""
        return self._dateModified

    @dateModified.setter
    def dateModified(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dateModified = value
        else:
            raise TypeError(
                'Property "dateModified" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def description(self):
        """str: Short description of the resource"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Display name that should be shown to the end user instead of t
        he name field"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def guestAccess(self):
        """bool: Indicates the resource should be visible and accessible to gu
        est users."""
        return self._guestAccess

    @guestAccess.setter
    def guestAccess(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._guestAccess = value
        else:
            raise TypeError(
                'Property "guestAccess" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def isPublic(self):
        """bool: Indicates the resource should be publicly visible and accessi
        ble."""
        return self._isPublic

    @isPublic.setter
    def isPublic(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isPublic = value
        else:
            raise TypeError(
                'Property "isPublic" of type "list<bool>" set to wrong type'
            )

    @property
    def labels(self):
        """list: Resource labels by category"""
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<ResourceLabel>" set to wrong'
                ' type'
            )

    @property
    def msgTimestamp(self):
        """long: Epoch timestamp with milliseconds when resource was sent to s
        earch or local event timestamp. Determines insert order into d
        atabase for out of sequence events."""
        return self._msgTimestamp

    @msgTimestamp.setter
    def msgTimestamp(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._msgTimestamp = value
        else:
            raise TypeError(
                'Property "msgTimestamp" of type "list<long>" set to wrong ty'
                'pe'
            )

    @property
    def name(self):
        """str: Name of the resource"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Name of org the resource belongs to."""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def resourceId(self):
        """str: Unique identifier of the resource containing namespace (option
        al) resource id, uuid or name"""
        return self._resourceId

    @resourceId.setter
    def resourceId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resourceId = value
        else:
            raise TypeError(
                'Property "resourceId" of type "list<str>" set to wrong type'
            )

    @property
    def resourceType(self):
        """ResourceTypeEnum: Type of resource ie job, container, model..."""
        return self._resourceType

    @resourceType.setter
    def resourceType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._resourceType = value
        else:
            raise TypeError(
                'Property "resourceType" of type "list<ResourceTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def sharedWithOrgs(self):
        """list: List of orgs resource is shared with"""
        return self._sharedWithOrgs

    @sharedWithOrgs.setter
    def sharedWithOrgs(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sharedWithOrgs = value
        else:
            raise TypeError(
                'Property "sharedWithOrgs" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def sharedWithTeams(self):
        """list: List of orgName/teamName resource is shared with"""
        return self._sharedWithTeams

    @sharedWithTeams.setter
    def sharedWithTeams(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sharedWithTeams = value
        else:
            raise TypeError(
                'Property "sharedWithTeams" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def status(self):
        """str: status of the resource, could be COMPLETED, CREATED...."""
        return self._status

    @status.setter
    def status(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<str>" set to wrong type'
            )

    @property
    def teamName(self):
        """str: Name of team the resource belongs to."""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def weightFeatured(self):
        """float: Featured score for manual resource ordering from 0.1+"""
        return self._weightFeatured

    @weightFeatured.setter
    def weightFeatured(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._weightFeatured = value
        else:
            raise TypeError(
                'Property "weightFeatured" of type "list<float>" set to wrong'
                ' type'
            )

    @property
    def weightPopular(self):
        """float: Popular score for manual resource ordering from 0.1+"""
        return self._weightPopular

    @weightPopular.setter
    def weightPopular(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._weightPopular = value
        else:
            raise TypeError(
                'Property "weightPopular" of type "list<float>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._accessType is not None:
            result["accessType"] = \
                self._accessType
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._attributes:
            result["attributes"] = [
                i.toDict() for i in self._attributes 
            ] if self._attributes else []
        if self._createdBy is not None:
            result["createdBy"] = \
                self._createdBy
        if self._dateCreated is not None:
            result["dateCreated"] = \
                self._dateCreated
        if self._dateModified is not None:
            result["dateModified"] = \
                self._dateModified
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._guestAccess is not None:
            result["guestAccess"] = \
                self._guestAccess
        if self._isPublic is not None:
            result["isPublic"] = \
                self._isPublic
        if self._labels:
            result["labels"] = [
                i.toDict() for i in self._labels 
            ] if self._labels else []
        if self._msgTimestamp is not None:
            result["msgTimestamp"] = \
                self._msgTimestamp
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._resourceId is not None:
            result["resourceId"] = \
                self._resourceId
        if self._resourceType is not None:
            result["resourceType"] = \
                self._resourceType
        if self._sharedWithOrgs is not None:
            result["sharedWithOrgs"] = \
                self._sharedWithOrgs
        if self._sharedWithTeams is not None:
            result["sharedWithTeams"] = \
                self._sharedWithTeams
        if self._status is not None:
            result["status"] = \
                self._status
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._weightFeatured is not None:
            result["weightFeatured"] = \
                self._weightFeatured
        if self._weightPopular is not None:
            result["weightPopular"] = \
                self._weightPopular
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._resourceType is None:
            raise ValueError(
                "SearchResponseResultResource.resourceType doesnt match requirement:" 
                "required: True"
            )
        if self._resourceId is None:
            raise ValueError(
                "SearchResponseResultResource.resourceId doesnt match requirement:" 
                "required: True"
            )
        if self._msgTimestamp is None:
            raise ValueError(
                "SearchResponseResultResource.msgTimestamp doesnt match requirement:" 
                "required: True"
            )
        if (self._msgTimestamp is not None
            and
            self._msgTimestamp < 1400000000000):
            raise ValueError(
                "SearchResponseResultResource.msgTimestamp: " + str(self._msgTimestamp) + 
                " doesnt match requirement: minimum: 1400000000000")
        if self._createdBy is None:
            raise ValueError(
                "SearchResponseResultResource.createdBy doesnt match requirement:" 
                "required: True"
            )
        if self._orgName is None:
            raise ValueError(
                "SearchResponseResultResource.orgName doesnt match requirement:" 
                "required: True"
            )
        if (self._dateCreated is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._dateCreated)):
            raise ValueError(
                "SearchResponseResultResource.dateCreated: " + str(self._dateCreated) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._dateModified is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._dateModified)):
            raise ValueError(
                "SearchResponseResultResource.dateModified: " + str(self._dateModified) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._weightPopular is not None
            and
            self._weightPopular < 0):
            raise ValueError(
                "SearchResponseResultResource.weightPopular: " + str(self._weightPopular) + 
                " doesnt match requirement: minimum: 0")
        if (self._weightFeatured is not None
            and
            self._weightFeatured < 0):
            raise ValueError(
                "SearchResponseResultResource.weightFeatured: " + str(self._weightFeatured) + 
                " doesnt match requirement: minimum: 0")
        if (self._labels is not None):
            for obj in self._labels:
                if (obj is not None): obj.isValid()
        if (self._attributes is not None):
            for obj in self._attributes:
                if (obj is not None): obj.isValid()
        return True
    

