"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SearchResponseResult import SearchResponseResult
from .SearchParams import SearchParams

# Unused import over optimization prevention
str(repr(SearchResponseResult))
str(repr(SearchParams))


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchResponse(object):
    """listing of all Search Object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.params = (
            None if not fromDict or propDict.get(
                "params"
            ) is None
            else propDict["params"])
        self.resultPageTotal = (
            None if not fromDict or propDict.get(
                "resultPageTotal"
            ) is None
            else propDict["resultPageTotal"])
        self.resultTotal = (
            None if not fromDict or propDict.get(
                "resultTotal"
            ) is None
            else propDict["resultTotal"])
        self.results = (
            None if not fromDict or propDict.get(
                "results"
            ) is None
            else [ SearchResponseResult(i)
            for i in propDict["results"] ])

    @property
    def params(self):
        """SearchParams: All the search parameters used"""
        return self._params

    @params.setter
    def params(self, value):
        if value is not None and not isinstance(value, SearchParams):
            value = SearchParams(value)
        if (value is None) or isinstance(value, SearchParams):
            self._params = value
        else:
            raise TypeError(
                'Property "params" of type "list<SearchParams>" set to wrong '
                'type'
            )

    @property
    def resultPageTotal(self):
        """long: Total number of pages for results based on request size."""
        return self._resultPageTotal

    @resultPageTotal.setter
    def resultPageTotal(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resultPageTotal = value
        else:
            raise TypeError(
                'Property "resultPageTotal" of type "list<long>" set to wrong'
                ' type'
            )

    @property
    def resultTotal(self):
        """long: Total number of results found in the index for the search que
        ry used"""
        return self._resultTotal

    @resultTotal.setter
    def resultTotal(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resultTotal = value
        else:
            raise TypeError(
                'Property "resultTotal" of type "list<long>" set to wrong typ'
                'e'
            )

    @property
    def results(self):
        """list: Results of records matching search query """
        return self._results

    @results.setter
    def results(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._results = value
        else:
            raise TypeError(
                'Property "results" of type "list<SearchResponseResult>" set '
                'to wrong type'
            )

    def toDict(self):
        result = {}
        if self._params:
            result["params"] = \
                self._params.toDict() if self._params is not None else None
        if self._resultPageTotal is not None:
            result["resultPageTotal"] = \
                self._resultPageTotal
        if self._resultTotal is not None:
            result["resultTotal"] = \
                self._resultTotal
        if self._results:
            result["results"] = [
                i.toDict() for i in self._results 
            ] if self._results else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._params is None:
            raise ValueError(
                "SearchResponse.params doesnt match requirement:" 
                "required: True"
            )
        if self._resultPageTotal is None:
            raise ValueError(
                "SearchResponse.resultPageTotal doesnt match requirement:" 
                "required: True"
            )
        if self._resultTotal is None:
            raise ValueError(
                "SearchResponse.resultTotal doesnt match requirement:" 
                "required: True"
            )
        if (self._params is not None): self._params.isValid()
        if (self._results is not None):
            for obj in self._results:
                if (obj is not None): obj.isValid()
        return True
    

