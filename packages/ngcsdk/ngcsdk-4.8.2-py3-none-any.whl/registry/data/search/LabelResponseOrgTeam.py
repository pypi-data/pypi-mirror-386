"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .LabelGroup import LabelGroup

# Unused import over optimization prevention
str(repr(LabelGroup))


if sys.version_info > (3,):
    long = int
    unicode = str

class LabelResponseOrgTeam(object):
    """Available labels by org and team"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.org = (
            None if not fromDict or propDict.get(
                "org"
            ) is None
            else [ LabelGroup(i)
            for i in propDict["org"] ])
        self.team = (
            None if not fromDict or propDict.get(
                "team"
            ) is None
            else [ LabelGroup(i)
            for i in propDict["team"] ])

    @property
    def org(self):
        """list: Label groups for org"""
        return self._org

    @org.setter
    def org(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._org = value
        else:
            raise TypeError(
                'Property "org" of type "list<LabelGroup>" set to wrong type'
            )

    @property
    def team(self):
        """list: Label groups for team"""
        return self._team

    @team.setter
    def team(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._team = value
        else:
            raise TypeError(
                'Property "team" of type "list<LabelGroup>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._org:
            result["org"] = [
                i.toDict() for i in self._org 
            ] if self._org else []
        if self._team:
            result["team"] = [
                i.toDict() for i in self._team 
            ] if self._team else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._org is not None):
            for obj in self._org:
                if (obj is not None): obj.isValid()
        if (self._team is not None):
            for obj in self._team:
                if (obj is not None): obj.isValid()
        return True
    

