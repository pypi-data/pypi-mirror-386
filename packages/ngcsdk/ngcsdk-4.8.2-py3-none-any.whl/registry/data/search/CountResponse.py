"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .CountResponseCount import CountResponseCount
from .CountResponseParams import CountResponseParams

# Unused import over optimization prevention
str(repr(CountResponseCount))
str(repr(CountResponseParams))


if sys.version_info > (3,):
    long = int
    unicode = str

class CountResponse(object):
    """Count response"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.counts = (
            None if not fromDict or propDict.get(
                "counts"
            ) is None
            else [ CountResponseCount(i)
            for i in propDict["counts"] ])
        self.params = (
            None if not fromDict or propDict.get(
                "params"
            ) is None
            else propDict["params"])

    @property
    def counts(self):
        """list: Counts for each field and query"""
        return self._counts

    @counts.setter
    def counts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._counts = value
        else:
            raise TypeError(
                'Property "counts" of type "list<CountResponseCount>" set to '
                'wrong type'
            )

    @property
    def params(self):
        """CountResponseParams: Count Params"""
        return self._params

    @params.setter
    def params(self, value):
        if value is not None and not isinstance(value, CountResponseParams):
            value = CountResponseParams(value)
        if (value is None) or isinstance(value, CountResponseParams):
            self._params = value
        else:
            raise TypeError(
                'Property "params" of type "list<CountResponseParams>" set to'
                ' wrong type'
            )

    def toDict(self):
        result = {}
        if self._counts:
            result["counts"] = [
                i.toDict() for i in self._counts 
            ] if self._counts else []
        if self._params:
            result["params"] = \
                self._params.toDict() if self._params is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._params is None:
            raise ValueError(
                "CountResponse.params doesnt match requirement:" 
                "required: True"
            )
        if self._counts is None:
            raise ValueError(
                "CountResponse.counts doesnt match requirement:" 
                "required: True"
            )
        if (self._params is not None): self._params.isValid()
        if (self._counts is not None):
            for obj in self._counts:
                if (obj is not None): obj.isValid()
        return True
    

