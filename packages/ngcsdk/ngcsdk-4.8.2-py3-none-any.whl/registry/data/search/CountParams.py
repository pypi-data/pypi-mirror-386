"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SearchParamFilter import SearchParamFilter
from .CountParamsField import CountParamsField

# Unused import over optimization prevention
str(repr(CountParamsField))
str(repr(SearchParamFilter))


if sys.version_info > (3,):
    long = int
    unicode = str

class CountParams(object):
    """Find counts for fields based on filter queries and per field query para
    ms"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.fields = (
            None if not fromDict or propDict.get(
                "fields"
            ) is None
            else [ CountParamsField(i)
            for i in propDict["fields"] ])
        self.filters = (
            None if not fromDict or propDict.get(
                "filters"
            ) is None
            else [ SearchParamFilter(i)
            for i in propDict["filters"] ])

    @property
    def fields(self):
        """list: List of fields and queries to use"""
        return self._fields

    @fields.setter
    def fields(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._fields = value
        else:
            raise TypeError(
                'Property "fields" of type "list<CountParamsField>" set to wr'
                'ong type'
            )

    @property
    def filters(self):
        """list: Filters to pre-apply to each of the field queries"""
        return self._filters

    @filters.setter
    def filters(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._filters = value
        else:
            raise TypeError(
                'Property "filters" of type "list<SearchParamFilter>" set to '
                'wrong type'
            )

    def toDict(self):
        result = {}
        if self._fields:
            result["fields"] = [
                i.toDict() for i in self._fields 
            ] if self._fields else []
        if self._filters:
            result["filters"] = [
                i.toDict() for i in self._filters 
            ] if self._filters else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._fields is None:
            raise ValueError(
                "CountParams.fields doesnt match requirement:" 
                "required: True"
            )
        if (self._fields is not None):
            for obj in self._fields:
                if (obj is not None): obj.isValid()
        if (self._filters is not None):
            for obj in self._filters:
                if (obj is not None): obj.isValid()
        return True
    

