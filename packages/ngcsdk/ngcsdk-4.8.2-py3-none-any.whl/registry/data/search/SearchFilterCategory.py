"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SearchFilterValue import SearchFilterValue

# Unused import over optimization prevention
str(repr(SearchFilterValue))


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchFilterCategory(object):
    """Filter Categories and values"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.filterCategory = (
            None if not fromDict or propDict.get(
                "filterCategory"
            ) is None
            else propDict["filterCategory"])
        self.filterValues = (
            None if not fromDict or propDict.get(
                "filterValues"
            ) is None
            else [ SearchFilterValue(i)
            for i in propDict["filterValues"] ])

    @property
    def displayName(self):
        """str: Display name for the filter category"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def filterCategory(self):
        """str: Filter category"""
        return self._filterCategory

    @filterCategory.setter
    def filterCategory(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._filterCategory = value
        else:
            raise TypeError(
                'Property "filterCategory" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def filterValues(self):
        """list: Filter options in this category"""
        return self._filterValues

    @filterValues.setter
    def filterValues(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._filterValues = value
        else:
            raise TypeError(
                'Property "filterValues" of type "list<SearchFilterValue>" se'
                't to wrong type'
            )

    def toDict(self):
        result = {}
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._filterCategory is not None:
            result["filterCategory"] = \
                self._filterCategory
        if self._filterValues:
            result["filterValues"] = [
                i.toDict() for i in self._filterValues 
            ] if self._filterValues else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._filterCategory is None:
            raise ValueError(
                "SearchFilterCategory.filterCategory doesnt match requirement:" 
                "required: True"
            )
        if self._displayName is None:
            raise ValueError(
                "SearchFilterCategory.displayName doesnt match requirement:" 
                "required: True"
            )
        if self._filterValues is None:
            raise ValueError(
                "SearchFilterCategory.filterValues doesnt match requirement:" 
                "required: True"
            )
        if (self._filterValues is not None):
            for obj in self._filterValues:
                if (obj is not None): obj.isValid()
        return True
    

