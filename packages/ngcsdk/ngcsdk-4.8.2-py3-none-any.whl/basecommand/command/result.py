#
# Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. ALL RIGHTS RESERVED.
#
# This software product is a proprietary product of Nvidia Corporation and its affiliates
# (the "Company") and all right, title, and interest in and to the software
# product, including all associated intellectual property rights, are and
# shall remain exclusively with the Company.
#
# This software product is governed by the End User License Agreement
# provided with the software product.

import logging

from basecommand.api.utils import JobTarget
from basecommand.command.args_validation import JobSelector
from basecommand.command.base_command import BaseCommand
from basecommand.command.completers import get_job_id_completer
from basecommand.constants import STATES_BEFORE_RUNNING
from basecommand.data.api.JobStatusEnum import JobStatusEnum
from basecommand.printer.result import ResultPrinter
from ngcbase.command.args_validation import SingleUseAction
from ngcbase.command.clicommand import CLICommand
from ngcbase.constants import CONFIG_TYPE, LONG_MAX_VALUE, STAGING_ENV
from ngcbase.util.utils import get_environ_tag


class ResultCommand(BaseCommand, CLICommand):  # noqa: D101
    CMD_NAME = "result"
    HELP = "Job Result Commands"
    DESC = "Job Result Commands"

    CLI_HELP = CONFIG_TYPE
    COMMAND_DISABLE = False

    WARN_MSG = " (Warning: 'ngc result' is deprecated, use 'ngc base-command result'.)"
    WARN_COND = CLICommand if get_environ_tag() <= STAGING_ENV else None
    CMD_ALIAS = []

    def __init__(self, parser):
        super().__init__(parser)
        self.parser = parser
        self.make_bottom_commands(parser)
        self.config = self.client.config
        self.printer = ResultPrinter(self.client.config)
        self.logger = logging.getLogger(__name__)

    result_list_str = "List result file(s) generated by the successful execution of a job."
    job_id_completer = get_job_id_completer(CLICommand.CLI_CLIENT)

    @CLICommand.command(help=result_list_str, description=result_list_str)
    @CLICommand.arguments(
        "jobid", metavar="<<job id>[:replica_id]>", help="Job ID", type=str, completer=job_id_completer
    )
    @CLICommand.arguments(
        "--files",
        help="Include list of files with result details. The maximum number of files shown is 1000.",
        dest="list_files",
        action="store_true",
        default=False,
    )
    def info(self, args):  # noqa: D102
        job_target = JobTarget(args.jobid)
        resultset_meta = self.client.basecommand.resultset.info(
            job_id=job_target.job_id,
            replica_id=job_target.replica_id,
            org=args.org,
            team=args.team,
            ace=args.ace,
            files=args.list_files,
        )
        self.printer.print_resultset_info(resultset_meta, args.list_files)

    result_download_str = "Download results by job ID."

    @CLICommand.command(help=result_download_str, description=result_download_str)
    @CLICommand.arguments(
        "jobid", metavar="<job_id>[:replica_id]>", help="Job ID", type=str, completer=job_id_completer
    )
    @CLICommand.arguments(
        "--dest",
        metavar="<path>",
        help=" Target destination for the downloaded file(s).  Default: .",
        type=str,
        default=".",
        action=SingleUseAction,
    )
    @CLICommand.arguments(
        "--file",
        metavar="<wildcard>",
        action="append",
        help=(
            "File name(s) to be downloaded from the resultset. This flag can be supplied multiple times,"
            " and supports standard Unix shell-style wildcards like (?, [abc], [!a-z], etc..)."
            " This flag only filters based on the name of the file, not the path."
            " The maximum number of files downloaded per filter is 1000."
        ),
    )
    @CLICommand.arguments(
        "--dir",
        metavar="<wildcard>",
        action="append",
        help=(
            "Directory or directories to be downloaded from the resultset. This flag supports "
            "standard Unix shell-style wildcards like (?, [abc], [!a-z], etc..). "
            "The maximum number of files downloaded per filter is 1000."
        ),
    )
    @CLICommand.arguments(
        "--exclude",
        metavar="<wildcard>",
        action="append",
        help=(
            "The file(s) or directory (directories) to be excluded from the download. This flag can"
            " be supplied multiple times, and supports standard Unix shell-style wildcards like "
            "(?, [abc], [!a-z], etc..)"
        ),
    )
    @CLICommand.arguments(
        "--zip", help="Download the entire result directory as a zip file.", dest="zip", action="store_true"
    )
    @CLICommand.arguments(
        "--dry-run",
        help="List total size of the download without performing the download.",
        action="store_true",
        default=False,
        dest="dry_run",
    )
    @CLICommand.arguments(
        "--resume",
        metavar="<resume>",
        type=str,
        help=(
            "Resume the download for the result. "
            "Specify the file name saved by the download. "
            "Files will be downloaded to the directory of the file name."
        ),
    )
    @CLICommand.mutex(["zip"], ["file", "dir", "exclude"], ["resume"])
    def download(self, args):  # noqa: D102
        job_target = JobTarget(args.jobid)
        self.client.basecommand.resultset.download(
            job_id=job_target.job_id,
            replica_id=job_target.replica_id,
            org=args.org,
            team=args.team,
            ace=args.ace,
            dest=args.dest,
            files=args.file,
            dirs=args.dir,
            exclude=args.exclude,
            do_zip=args.zip,
            dry_run=args.dry_run,
            resume=args.resume,
        )

    remove_resultset_str = "Remove a result for given job ID(s)."

    # Results should not be removed for jobs which hasn't yet started
    STATES_AFTER_RUNNING = set(JobStatusEnum) - STATES_BEFORE_RUNNING

    REMOVE_JOB_ID_DESC = "Job ID(s).  Valid examples: '1-5', '1,10-15', '*', '1?'"

    @CLICommand.command(name="remove", help=remove_resultset_str, description=remove_resultset_str)
    @CLICommand.arguments(
        "jobids",
        metavar="<jobid|jobidrange|jobidlist|jobidpattern>",
        help=REMOVE_JOB_ID_DESC,
        completer=job_id_completer,
        type=str,
        action=JobSelector,
        minimum=0,
        maximum=LONG_MAX_VALUE,
    )
    @CLICommand.arguments(
        "--status",
        metavar="<status>",
        help="Filter jobs matching input status. Multiple --status flags will OR together. Options: %(choices)s",
        action="append",
        const=None,
        type=str,
        choices=STATES_AFTER_RUNNING,
    )
    @CLICommand.arguments(
        "-y",
        "--yes",
        help="Automatically say yes to all interactive questions.",
        dest="default_yes",
        action="store_true",
    )
    @CLICommand.arguments("--dry-run", help="List matching input set without any action.", action="store_true")
    @CLICommand.arguments(
        "--job-name",
        metavar="<wildcard>",
        help=(
            "Filter jobs with names matching specified pattern. Supports standard Unix shell-style "
            "wildcards like (?, [abc], [!a-z], etc..)."
        ),
        type=str,
    )
    def remove(self, args):  # noqa: D102
        self.client.basecommand.resultset.remove(
            job_ids=args.jobids,
            org=args.org,
            team=args.team,
            ace=args.ace,
            status=args.status,
            dry_run=args.dry_run,
            default_yes=args.default_yes,
            job_name=args.job_name,
        )
        print("<---here--->")
