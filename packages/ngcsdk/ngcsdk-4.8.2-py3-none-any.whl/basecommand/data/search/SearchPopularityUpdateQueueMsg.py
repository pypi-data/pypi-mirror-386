"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ResourcePopularityUpdate import ResourcePopularityUpdate

# Unused import over optimization prevention
str(repr(ResourcePopularityUpdate))


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchPopularityUpdateQueueMsg(object):
    """Search popularity update queue message"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.msgTimestamp = (
            None if not fromDict or propDict.get(
                "msgTimestamp"
            ) is None
            else propDict["msgTimestamp"])
        self.resourceUpdateList = (
            None if not fromDict or propDict.get(
                "resourceUpdateList"
            ) is None
            else [ ResourcePopularityUpdate(i)
            for i in propDict["resourceUpdateList"] ])

    @property
    def msgTimestamp(self):
        """long: Epoch timestamp with milliseconds when message was sent to se
        arch or local event timestamp. Determines date period for popu
        larity update."""
        return self._msgTimestamp

    @msgTimestamp.setter
    def msgTimestamp(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._msgTimestamp = value
        else:
            raise TypeError(
                'Property "msgTimestamp" of type "list<long>" set to wrong ty'
                'pe'
            )

    @property
    def resourceUpdateList(self):
        """list: List of resource updates"""
        return self._resourceUpdateList

    @resourceUpdateList.setter
    def resourceUpdateList(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._resourceUpdateList = value
        else:
            raise TypeError(
                'Property "resourceUpdateList" of type "list<ResourcePopulari'
                'tyUpdate>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._msgTimestamp is not None:
            result["msgTimestamp"] = \
                self._msgTimestamp
        if self._resourceUpdateList:
            result["resourceUpdateList"] = [
                i.toDict() for i in self._resourceUpdateList 
            ] if self._resourceUpdateList else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._msgTimestamp is None:
            raise ValueError(
                "SearchPopularityUpdateQueueMsg.msgTimestamp doesnt match requirement:" 
                "required: True"
            )
        if (self._msgTimestamp is not None
            and
            self._msgTimestamp < 1400000000000):
            raise ValueError(
                "SearchPopularityUpdateQueueMsg.msgTimestamp: " + str(self._msgTimestamp) + 
                " doesnt match requirement: minimum: 1400000000000")
        if (self._resourceUpdateList is not None):
            for obj in self._resourceUpdateList:
                if (obj is not None): obj.isValid()
        return True
    

