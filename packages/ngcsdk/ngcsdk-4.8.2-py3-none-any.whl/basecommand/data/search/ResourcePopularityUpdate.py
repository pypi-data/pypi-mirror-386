"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ResourceTypeEnum import ResourceTypeEnum

# Unused import over optimization prevention
str(repr(ResourceTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class ResourcePopularityUpdate(object):
    """Resource popularity update"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.newFileDownloadsCount = (
            None if not fromDict or propDict.get(
                "newFileDownloadsCount"
            ) is None
            else propDict["newFileDownloadsCount"])
        self.newMetadataRequestsCount = (
            None if not fromDict or propDict.get(
                "newMetadataRequestsCount"
            ) is None
            else propDict["newMetadataRequestsCount"])
        self.resourceId = (
            None if not fromDict or propDict.get(
                "resourceId"
            ) is None
            else propDict["resourceId"])
        self.resourceType = (
            None if not fromDict or propDict.get(
                "resourceType"
            ) is None
            else propDict["resourceType"])

    @property
    def newFileDownloadsCount(self):
        """int: Count of new file downloads for the resource"""
        return self._newFileDownloadsCount

    @newFileDownloadsCount.setter
    def newFileDownloadsCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._newFileDownloadsCount = value
        else:
            raise TypeError(
                'Property "newFileDownloadsCount" of type "list<int>" set to '
                'wrong type'
            )

    @property
    def newMetadataRequestsCount(self):
        """int: Count of new metadata requests for the resource"""
        return self._newMetadataRequestsCount

    @newMetadataRequestsCount.setter
    def newMetadataRequestsCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._newMetadataRequestsCount = value
        else:
            raise TypeError(
                'Property "newMetadataRequestsCount" of type "list<int>" set '
                'to wrong type'
            )

    @property
    def resourceId(self):
        """str: ID of the resource"""
        return self._resourceId

    @resourceId.setter
    def resourceId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resourceId = value
        else:
            raise TypeError(
                'Property "resourceId" of type "list<str>" set to wrong type'
            )

    @property
    def resourceType(self):
        """ResourceTypeEnum: Type of resource ie job, container, model..."""
        return self._resourceType

    @resourceType.setter
    def resourceType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._resourceType = value
        else:
            raise TypeError(
                'Property "resourceType" of type "list<ResourceTypeEnum>" set'
                ' to wrong type'
            )

    def toDict(self):
        result = {}
        if self._newFileDownloadsCount is not None:
            result["newFileDownloadsCount"] = \
                self._newFileDownloadsCount
        if self._newMetadataRequestsCount is not None:
            result["newMetadataRequestsCount"] = \
                self._newMetadataRequestsCount
        if self._resourceId is not None:
            result["resourceId"] = \
                self._resourceId
        if self._resourceType is not None:
            result["resourceType"] = \
                self._resourceType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._resourceId is None:
            raise ValueError(
                "ResourcePopularityUpdate.resourceId doesnt match requirement:" 
                "required: True"
            )
        if self._resourceType is None:
            raise ValueError(
                "ResourcePopularityUpdate.resourceType doesnt match requirement:" 
                "required: True"
            )
        if self._newFileDownloadsCount is None:
            raise ValueError(
                "ResourcePopularityUpdate.newFileDownloadsCount doesnt match requirement:" 
                "required: True"
            )
        if self._newMetadataRequestsCount is None:
            raise ValueError(
                "ResourcePopularityUpdate.newMetadataRequestsCount doesnt match requirement:" 
                "required: True"
            )
        return True
    

