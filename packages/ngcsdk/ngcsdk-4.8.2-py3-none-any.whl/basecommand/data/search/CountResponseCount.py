"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class CountResponseCount(object):
    """Field counts based on query"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.count = (
            None if not fromDict or propDict.get(
                "count"
            ) is None
            else propDict["count"])
        self.field = (
            None if not fromDict or propDict.get(
                "field"
            ) is None
            else propDict["field"])
        self.value = (
            None if not fromDict or propDict.get(
                "value"
            ) is None
            else propDict["value"])

    @property
    def count(self):
        """long: Number of records found for field with query"""
        return self._count

    @count.setter
    def count(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._count = value
        else:
            raise TypeError(
                'Property "count" of type "list<long>" set to wrong type'
            )

    @property
    def field(self):
        """str: Field to return count for"""
        return self._field

    @field.setter
    def field(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._field = value
        else:
            raise TypeError(
                'Property "field" of type "list<str>" set to wrong type'
            )

    @property
    def value(self):
        """str: Query to apply for field. Defaults to *"""
        return self._value

    @value.setter
    def value(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._value = value
        else:
            raise TypeError(
                'Property "value" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._count is not None:
            result["count"] = \
                self._count
        if self._field is not None:
            result["field"] = \
                self._field
        if self._value is not None:
            result["value"] = \
                self._value
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._field is None:
            raise ValueError(
                "CountResponseCount.field doesnt match requirement:" 
                "required: True"
            )
        if (self._field is not None
            and
            not re.match(
                r"^[a-z]+[a-zA-Z]+",
                 self._field)):
            raise ValueError(
                "CountResponseCount.field: " + str(self._field) + 
                " doesnt match requirement: pattern: ^[a-z]+[a-zA-Z]+")
        if self._value is None:
            raise ValueError(
                "CountResponseCount.value doesnt match requirement:" 
                "required: True"
            )
        if self._count is None:
            raise ValueError(
                "CountResponseCount.count doesnt match requirement:" 
                "required: True"
            )
        return True
    

