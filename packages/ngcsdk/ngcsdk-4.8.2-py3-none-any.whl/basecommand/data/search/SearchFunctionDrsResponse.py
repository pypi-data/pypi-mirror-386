"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SearchFunctionDrsMetadata import SearchFunctionDrsMetadata
from .InferenceCountData import InferenceCountData

# Unused import over optimization prevention
str(repr(SearchFunctionDrsMetadata))
str(repr(InferenceCountData))


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchFunctionDrsResponse(object):
    """Response for search function DRS operations"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.data = (
            None if not fromDict or propDict.get(
                "data"
            ) is None
            else [ InferenceCountData(i)
            for i in propDict["data"] ])
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])
        self.metadata = (
            None if not fromDict or propDict.get(
                "metadata"
            ) is None
            else propDict["metadata"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def data(self):
        """list: List of inference count data"""
        return self._data

    @data.setter
    def data(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._data = value
        else:
            raise TypeError(
                'Property "data" of type "list<InferenceCountData>" set to wr'
                'ong type'
            )

    @property
    def jobId(self):
        """str: Unique identifier for the job"""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<str>" set to wrong type'
            )

    @property
    def metadata(self):
        """SearchFunctionDrsMetadata: Metadata information for search function
         DRS response"""
        return self._metadata

    @metadata.setter
    def metadata(self, value):
        if value is not None and not isinstance(value, SearchFunctionDrsMetadata):
            value = SearchFunctionDrsMetadata(value)
        if (value is None) or isinstance(value, SearchFunctionDrsMetadata):
            self._metadata = value
        else:
            raise TypeError(
                'Property "metadata" of type "list<SearchFunctionDrsMetadata>'
                '" set to wrong type'
            )

    @property
    def status(self):
        """str: Status of the operation"""
        return self._status

    @status.setter
    def status(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._data:
            result["data"] = [
                i.toDict() for i in self._data 
            ] if self._data else []
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        if self._metadata:
            result["metadata"] = \
                self._metadata.toDict() if self._metadata is not None else None
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._metadata is not None): self._metadata.isValid()
        if (self._data is not None):
            for obj in self._data:
                if (obj is not None): obj.isValid()
        return True
    

