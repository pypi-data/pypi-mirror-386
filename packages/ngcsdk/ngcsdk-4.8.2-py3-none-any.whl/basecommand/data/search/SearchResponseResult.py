"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SearchResponseResultResource import SearchResponseResultResource

# Unused import over optimization prevention
str(repr(SearchResponseResultResource))


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchResponseResult(object):
    """Resource to insert into database and index to be searchable."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.groupValue = (
            None if not fromDict or propDict.get(
                "groupValue"
            ) is None
            else propDict["groupValue"])
        self.resources = (
            None if not fromDict or propDict.get(
                "resources"
            ) is None
            else [ SearchResponseResultResource(i)
            for i in propDict["resources"] ])
        self.totalCount = (
            None if not fromDict or propDict.get(
                "totalCount"
            ) is None
            else propDict["totalCount"])

    @property
    def groupValue(self):
        """str: GroupedBy field value"""
        return self._groupValue

    @groupValue.setter
    def groupValue(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._groupValue = value
        else:
            raise TypeError(
                'Property "groupValue" of type "list<str>" set to wrong type'
            )

    @property
    def resources(self):
        """list: Resources matching search query and groupBy field and value.
        """
        return self._resources

    @resources.setter
    def resources(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._resources = value
        else:
            raise TypeError(
                'Property "resources" of type "list<SearchResponseResultResou'
                'rce>" set to wrong type'
            )

    @property
    def totalCount(self):
        """long: Total count of results found for groupBy field and groupValue
        ."""
        return self._totalCount

    @totalCount.setter
    def totalCount(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalCount = value
        else:
            raise TypeError(
                'Property "totalCount" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._groupValue is not None:
            result["groupValue"] = \
                self._groupValue
        if self._resources:
            result["resources"] = [
                i.toDict() for i in self._resources 
            ] if self._resources else []
        if self._totalCount is not None:
            result["totalCount"] = \
                self._totalCount
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._groupValue is None:
            raise ValueError(
                "SearchResponseResult.groupValue doesnt match requirement:" 
                "required: True"
            )
        if (self._groupValue is not None
            and
            not re.match(
                r"^[a-z]+[a-zA-Z]+",
                 self._groupValue)):
            raise ValueError(
                "SearchResponseResult.groupValue: " + str(self._groupValue) + 
                " doesnt match requirement: pattern: ^[a-z]+[a-zA-Z]+")
        if self._totalCount is None:
            raise ValueError(
                "SearchResponseResult.totalCount doesnt match requirement:" 
                "required: True"
            )
        if self._resources is None:
            raise ValueError(
                "SearchResponseResult.resources doesnt match requirement:" 
                "required: True"
            )
        if (self._resources is not None):
            for obj in self._resources:
                if (obj is not None): obj.isValid()
        return True
    

