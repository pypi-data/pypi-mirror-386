"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SearchParamFilter import SearchParamFilter
from .SearchParamOrderBy import SearchParamOrderBy

# Unused import over optimization prevention
str(repr(SearchParamFilter))
str(repr(SearchParamOrderBy))


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchParams(object):
    """All the search parameters used"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.fields = (
            None if not fromDict or propDict.get(
                "fields"
            ) is None
            else propDict["fields"])
        self.filters = (
            None if not fromDict or propDict.get(
                "filters"
            ) is None
            else [ SearchParamFilter(i)
            for i in propDict["filters"] ])
        self.groupBy = (
            None if not fromDict or propDict.get(
                "groupBy"
            ) is None
            else propDict["groupBy"])
        self.orderBy = (
            None if not fromDict or propDict.get(
                "orderBy"
            ) is None
            else [ SearchParamOrderBy(i)
            for i in propDict["orderBy"] ])
        self.page = (
            None if not fromDict or propDict.get(
                "page"
            ) is None
            else propDict["page"])
        self.pageSize = (
            None if not fromDict or propDict.get(
                "pageSize"
            ) is None
            else propDict["pageSize"])
        self.query = (
            None if not fromDict or propDict.get(
                "query"
            ) is None
            else propDict["query"])
        self.queryFields = (
            None if not fromDict or propDict.get(
                "queryFields"
            ) is None
            else propDict["queryFields"])
        self.scoredSize = (
            None if not fromDict or propDict.get(
                "scoredSize"
            ) is None
            else propDict["scoredSize"])

    @property
    def fields(self):
        """list: Return specific fields in addition to required fields."""
        return self._fields

    @fields.setter
    def fields(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._fields = value
        else:
            raise TypeError(
                'Property "fields" of type "list<str>" set to wrong type'
            )

    @property
    def filters(self):
        """list: Unique identifier of the resource containing namespace (optio
        nal) resource id, uuid or name"""
        return self._filters

    @filters.setter
    def filters(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._filters = value
        else:
            raise TypeError(
                'Property "filters" of type "list<SearchParamFilter>" set to '
                'wrong type'
            )

    @property
    def groupBy(self):
        """str: Field to group results by"""
        return self._groupBy

    @groupBy.setter
    def groupBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._groupBy = value
        else:
            raise TypeError(
                'Property "groupBy" of type "list<str>" set to wrong type'
            )

    @property
    def orderBy(self):
        """list: Unique identifier of the resource containing namespace (optio
        nal) resource id, uuid or name"""
        return self._orderBy

    @orderBy.setter
    def orderBy(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._orderBy = value
        else:
            raise TypeError(
                'Property "orderBy" of type "list<SearchParamOrderBy>" set to'
                ' wrong type'
            )

    @property
    def page(self):
        """long: Page of results to return, starts at 0"""
        return self._page

    @page.setter
    def page(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._page = value
        else:
            raise TypeError(
                'Property "page" of type "list<long>" set to wrong type'
            )

    @property
    def pageSize(self):
        """long: Number of results to return per page (25, 50, 100)"""
        return self._pageSize

    @pageSize.setter
    def pageSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._pageSize = value
        else:
            raise TypeError(
                'Property "pageSize" of type "list<long>" set to wrong type'
            )

    @property
    def query(self):
        """str: User entered search query"""
        return self._query

    @query.setter
    def query(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._query = value
        else:
            raise TypeError(
                'Property "query" of type "list<str>" set to wrong type'
            )

    @property
    def queryFields(self):
        """list: Limit query field search to specific fields"""
        return self._queryFields

    @queryFields.setter
    def queryFields(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._queryFields = value
        else:
            raise TypeError(
                'Property "queryFields" of type "list<str>" set to wrong type'
            )

    @property
    def scoredSize(self):
        """long: Number of scored results to return. Results will be duplicate
        d in other groups. Default: 5"""
        return self._scoredSize

    @scoredSize.setter
    def scoredSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._scoredSize = value
        else:
            raise TypeError(
                'Property "scoredSize" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._fields is not None:
            result["fields"] = \
                self._fields
        if self._filters:
            result["filters"] = [
                i.toDict() for i in self._filters 
            ] if self._filters else []
        if self._groupBy is not None:
            result["groupBy"] = \
                self._groupBy
        if self._orderBy:
            result["orderBy"] = [
                i.toDict() for i in self._orderBy 
            ] if self._orderBy else []
        if self._page is not None:
            result["page"] = \
                self._page
        if self._pageSize is not None:
            result["pageSize"] = \
                self._pageSize
        if self._query is not None:
            result["query"] = \
                self._query
        if self._queryFields is not None:
            result["queryFields"] = \
                self._queryFields
        if self._scoredSize is not None:
            result["scoredSize"] = \
                self._scoredSize
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._query is None:
            raise ValueError(
                "SearchParams.query doesnt match requirement:" 
                "required: True"
            )
        if (self._page is not None
            and
            self._page < 0):
            raise ValueError(
                "SearchParams.page: " + str(self._page) + 
                " doesnt match requirement: minimum: 0")
        if (self._pageSize is not None
            and
            self._pageSize < 1):
            raise ValueError(
                "SearchParams.pageSize: " + str(self._pageSize) + 
                " doesnt match requirement: minimum: 1")
        if (self._scoredSize is not None
            and
            self._scoredSize < 1):
            raise ValueError(
                "SearchParams.scoredSize: " + str(self._scoredSize) + 
                " doesnt match requirement: minimum: 1")
        if (self._scoredSize is not None
            and
            self._scoredSize > 25):
            raise ValueError(
                "SearchParams.scoredSize: " + str(self._scoredSize) + 
                " doesnt match requirement: maximum: 25")
        if (self._groupBy is not None
            and
            not re.match(
                r"^[a-z]+[a-zA-Z]+",
                 self._groupBy)):
            raise ValueError(
                "SearchParams.groupBy: " + str(self._groupBy) + 
                " doesnt match requirement: pattern: ^[a-z]+[a-zA-Z]+")
        if (self._filters is not None):
            for obj in self._filters:
                if (obj is not None): obj.isValid()
        if (self._orderBy is not None):
            for obj in self._orderBy:
                if (obj is not None): obj.isValid()
        return True
    

