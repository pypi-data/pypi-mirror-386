"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .LabelGroupValue import LabelGroupValue

# Unused import over optimization prevention
str(repr(LabelGroupValue))


if sys.version_info > (3,):
    long = int
    unicode = str

class LabelGroup(object):
    """Labels assigned to a label group"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.group = (
            None if not fromDict or propDict.get(
                "group"
            ) is None
            else propDict["group"])
        self.values = (
            None if not fromDict or propDict.get(
                "values"
            ) is None
            else [ LabelGroupValue(i)
            for i in propDict["values"] ])

    @property
    def group(self):
        """str: Label group name (i.e. category, precision, gpuModel etc.."""
        return self._group

    @group.setter
    def group(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._group = value
        else:
            raise TypeError(
                'Property "group" of type "list<str>" set to wrong type'
            )

    @property
    def values(self):
        """list: List of labels available for the group"""
        return self._values

    @values.setter
    def values(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._values = value
        else:
            raise TypeError(
                'Property "values" of type "list<LabelGroupValue>" set to wro'
                'ng type'
            )

    def toDict(self):
        result = {}
        if self._group is not None:
            result["group"] = \
                self._group
        if self._values:
            result["values"] = [
                i.toDict() for i in self._values 
            ] if self._values else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._group is None:
            raise ValueError(
                "LabelGroup.group doesnt match requirement:" 
                "required: True"
            )
        if (self._group is not None
            and
            len(self._group) > 64):
            raise ValueError(
                "LabelGroup.group: " + str(self._group) + 
                " doesnt match requirement: maxLength: 64")
        if (self._group is not None
            and
            not re.match(
                r"^[a-z][a-zA-Z0-9-.+_]+",
                 self._group)):
            raise ValueError(
                "LabelGroup.group: " + str(self._group) + 
                " doesnt match requirement: pattern: ^[a-z][a-zA-Z0-9-.+_]+")
        if self._values is None:
            raise ValueError(
                "LabelGroup.values doesnt match requirement:" 
                "required: True"
            )
        if (self._values is not None):
            for obj in self._values:
                if (obj is not None): obj.isValid()
        return True
    

