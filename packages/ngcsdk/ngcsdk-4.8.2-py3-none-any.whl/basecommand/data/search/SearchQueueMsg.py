"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Resource import Resource
from .ResourceEventEnum import ResourceEventEnum

# Unused import over optimization prevention
str(repr(Resource))
str(repr(ResourceEventEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchQueueMsg(object):
    """Search queue message"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.resource = (
            None if not fromDict or propDict.get(
                "resource"
            ) is None
            else propDict["resource"])
        self.resourceEvent = (
            None if not fromDict or propDict.get(
                "resourceEvent"
            ) is None
            else propDict["resourceEvent"])

    @property
    def resource(self):
        """Resource: Resource to insert into database and index to be searchab
        le."""
        return self._resource

    @resource.setter
    def resource(self, value):
        if value is not None and not isinstance(value, Resource):
            value = Resource(value)
        if (value is None) or isinstance(value, Resource):
            self._resource = value
        else:
            raise TypeError(
                'Property "resource" of type "list<Resource>" set to wrong ty'
                'pe'
            )

    @property
    def resourceEvent(self):
        """ResourceEventEnum: Status of the resource, ie deleted, created or u
        pdated"""
        return self._resourceEvent

    @resourceEvent.setter
    def resourceEvent(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._resourceEvent = value
        else:
            raise TypeError(
                'Property "resourceEvent" of type "list<ResourceEventEnum>" s'
                'et to wrong type'
            )

    def toDict(self):
        result = {}
        if self._resource:
            result["resource"] = \
                self._resource.toDict() if self._resource is not None else None
        if self._resourceEvent is not None:
            result["resourceEvent"] = \
                self._resourceEvent
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._resourceEvent is None:
            raise ValueError(
                "SearchQueueMsg.resourceEvent doesnt match requirement:" 
                "required: True"
            )
        if self._resource is None:
            raise ValueError(
                "SearchQueueMsg.resource doesnt match requirement:" 
                "required: True"
            )
        if (self._resource is not None): self._resource.isValid()
        return True
    

