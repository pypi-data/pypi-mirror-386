"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ResourceTypeEnum import ResourceTypeEnum
from .LabelValue import LabelValue

# Unused import over optimization prevention
str(repr(ResourceTypeEnum))
str(repr(LabelValue))


if sys.version_info > (3,):
    long = int
    unicode = str

class LabelSetUpdateRequest(object):
    """Request to update a label set"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.display = (
            None if not fromDict or propDict.get(
                "display"
            ) is None
            else propDict["display"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else [ LabelValue(i)
            for i in propDict["labels"] ])
        self.resourceType = (
            None if not fromDict or propDict.get(
                "resourceType"
            ) is None
            else propDict["resourceType"])

    @property
    def display(self):
        """str: Display name of the label set to show to end user"""
        return self._display

    @display.setter
    def display(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._display = value
        else:
            raise TypeError(
                'Property "display" of type "list<str>" set to wrong type'
            )

    @property
    def labels(self):
        """list: Labels to be replaced"""
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<LabelValue>" set to wrong ty'
                'pe'
            )

    @property
    def resourceType(self):
        """ResourceTypeEnum: Type of resource ie job, container, model..."""
        return self._resourceType

    @resourceType.setter
    def resourceType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._resourceType = value
        else:
            raise TypeError(
                'Property "resourceType" of type "list<ResourceTypeEnum>" set'
                ' to wrong type'
            )

    def toDict(self):
        result = {}
        if self._display is not None:
            result["display"] = \
                self._display
        if self._labels:
            result["labels"] = [
                i.toDict() for i in self._labels 
            ] if self._labels else []
        if self._resourceType is not None:
            result["resourceType"] = \
                self._resourceType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._display is not None
            and
            len(self._display) > 64):
            raise ValueError(
                "LabelSetUpdateRequest.display: " + str(self._display) + 
                " doesnt match requirement: maxLength: 64")
        if (self._labels is not None
            and
            len(self._labels) > 80):
            raise ValueError(
                "LabelSetUpdateRequest.labels: " + str(self._labels) + 
                " doesnt match requirement: maxItems: 80")
        if (self._labels is not None):
            for obj in self._labels:
                if (obj is not None): obj.isValid()
        return True
    

