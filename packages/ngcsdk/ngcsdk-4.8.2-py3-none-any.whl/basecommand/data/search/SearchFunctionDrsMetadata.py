"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class SearchFunctionDrsMetadata(object):
    """Metadata information for search function DRS response"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.page = (
            None if not fromDict or propDict.get(
                "page"
            ) is None
            else propDict["page"])
        self.pageSize = (
            None if not fromDict or propDict.get(
                "pageSize"
            ) is None
            else propDict["pageSize"])
        self.totalPages = (
            None if not fromDict or propDict.get(
                "totalPages"
            ) is None
            else propDict["totalPages"])
        self.totalRecords = (
            None if not fromDict or propDict.get(
                "totalRecords"
            ) is None
            else propDict["totalRecords"])

    @property
    def page(self):
        """int: Current page number"""
        return self._page

    @page.setter
    def page(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._page = value
        else:
            raise TypeError(
                'Property "page" of type "list<int>" set to wrong type'
            )

    @property
    def pageSize(self):
        """int: Number of records per page"""
        return self._pageSize

    @pageSize.setter
    def pageSize(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._pageSize = value
        else:
            raise TypeError(
                'Property "pageSize" of type "list<int>" set to wrong type'
            )

    @property
    def totalPages(self):
        """int: Total number of pages"""
        return self._totalPages

    @totalPages.setter
    def totalPages(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._totalPages = value
        else:
            raise TypeError(
                'Property "totalPages" of type "list<int>" set to wrong type'
            )

    @property
    def totalRecords(self):
        """int: Total number of records"""
        return self._totalRecords

    @totalRecords.setter
    def totalRecords(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._totalRecords = value
        else:
            raise TypeError(
                'Property "totalRecords" of type "list<int>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._page is not None:
            result["page"] = \
                self._page
        if self._pageSize is not None:
            result["pageSize"] = \
                self._pageSize
        if self._totalPages is not None:
            result["totalPages"] = \
                self._totalPages
        if self._totalRecords is not None:
            result["totalRecords"] = \
                self._totalRecords
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

