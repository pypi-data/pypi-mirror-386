"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AceUpdate import AceUpdate

# Unused import over optimization prevention
str(repr(AceUpdate))


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateAceRequest(object):
    """object used to update information about the ACE"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceUpdate = (
            None if not fromDict or propDict.get(
                "aceUpdate"
            ) is None
            else propDict["aceUpdate"])

    @property
    def aceUpdate(self):
        """ """
        return self._aceUpdate

    @aceUpdate.setter
    def aceUpdate(self, value):
        if value is not None and not isinstance(value, AceUpdate):
            value = AceUpdate(value)
        if (value is None) or isinstance(value, AceUpdate):
            self._aceUpdate = value
        else:
            raise TypeError(
                'Property "aceUpdate" of type "list<AceUpdate>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._aceUpdate:
            result["aceUpdate"] = \
                self._aceUpdate.toDict() if self._aceUpdate is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._aceUpdate is not None): self._aceUpdate.isValid()
        return True
    

