"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MeteringType import MeteringTypeEnum

# Unused import over optimization prevention
str(repr(MeteringTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class MeteringQueryParams(object):
    """object used for sending metering query parameter request"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.fill = (
            None if not fromDict or propDict.get(
                "fill"
            ) is None
            else propDict["fill"])
        self.fromDate = (
            None if not fromDict or propDict.get(
                "fromDate"
            ) is None
            else propDict["fromDate"])
        self.groupBy = (
            None if not fromDict or propDict.get(
                "groupBy"
            ) is None
            else propDict["groupBy"])
        self.periodInSeconds = (
            None if not fromDict or propDict.get(
                "periodInSeconds"
            ) is None
            else propDict["periodInSeconds"])
        self.toDate = (
            None if not fromDict or propDict.get(
                "toDate"
            ) is None
            else propDict["toDate"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def fill(self):
        """float: this replaces all null values in an output stream with a non
        -null value that is provided."""
        return self._fill

    @fill.setter
    def fill(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._fill = value
        else:
            raise TypeError(
                'Property "fill" of type "list<float>" set to wrong type'
            )

    @property
    def fromDate(self):
        """str: end time range for the data, in ISO formate, yyyy-MM-dd'T'HH:m
        m:ss.SSS'Z'"""
        return self._fromDate

    @fromDate.setter
    def fromDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fromDate = value
        else:
            raise TypeError(
                'Property "fromDate" of type "list<str>" set to wrong type'
            )

    @property
    def groupBy(self):
        """list: group by specific tags"""
        return self._groupBy

    @groupBy.setter
    def groupBy(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._groupBy = value
        else:
            raise TypeError(
                'Property "groupBy" of type "list<str>" set to wrong type'
            )

    @property
    def periodInSeconds(self):
        """float: time period to aggregate the data over with, in seconds. If 
        none provided, raw data will be returned."""
        return self._periodInSeconds

    @periodInSeconds.setter
    def periodInSeconds(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._periodInSeconds = value
        else:
            raise TypeError(
                'Property "periodInSeconds" of type "list<float>" set to wron'
                'g type'
            )

    @property
    def toDate(self):
        """str: start time range for the data, in ISO formate, yyyy-MM-dd'T'HH
        :mm:ss.SSS'Z'"""
        return self._toDate

    @toDate.setter
    def toDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._toDate = value
        else:
            raise TypeError(
                'Property "toDate" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<MeteringTypeEnum>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._fill is not None:
            result["fill"] = \
                self._fill
        if self._fromDate is not None:
            result["fromDate"] = \
                self._fromDate
        if self._groupBy is not None:
            result["groupBy"] = \
                self._groupBy
        if self._periodInSeconds is not None:
            result["periodInSeconds"] = \
                self._periodInSeconds
        if self._toDate is not None:
            result["toDate"] = \
                self._toDate
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

