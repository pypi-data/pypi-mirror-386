"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ResultsetFile(object):
    """File in the resultset."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.fileSize = (
            None if not fromDict or propDict.get(
                "fileSize"
            ) is None
            else propDict["fileSize"])
        self.isDir = (
            None if not fromDict or propDict.get(
                "isDir"
            ) is None
            else propDict["isDir"])
        self.path = (
            None if not fromDict or propDict.get(
                "path"
            ) is None
            else propDict["path"])
        self.resultsetId = (
            None if not fromDict or propDict.get(
                "resultsetId"
            ) is None
            else propDict["resultsetId"])

    @property
    def createdDate(self):
        """str: Date when file was created in ISO-8601 format."""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def fileSize(self):
        """long: Size of the file in bytes."""
        return self._fileSize

    @fileSize.setter
    def fileSize(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._fileSize = value
        else:
            raise TypeError(
                'Property "fileSize" of type "list<long>" set to wrong type'
            )

    @property
    def isDir(self):
        """bool: Indicates if this is a directory or not"""
        return self._isDir

    @isDir.setter
    def isDir(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isDir = value
        else:
            raise TypeError(
                'Property "isDir" of type "list<bool>" set to wrong type'
            )

    @property
    def path(self):
        """str: Relative file path from the root of the resultset."""
        return self._path

    @path.setter
    def path(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._path = value
        else:
            raise TypeError(
                'Property "path" of type "list<str>" set to wrong type'
            )

    @property
    def resultsetId(self):
        """long: Resultset ID this file belongs to."""
        return self._resultsetId

    @resultsetId.setter
    def resultsetId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resultsetId = value
        else:
            raise TypeError(
                'Property "resultsetId" of type "list<long>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._fileSize is not None:
            result["fileSize"] = \
                self._fileSize
        if self._isDir is not None:
            result["isDir"] = \
                self._isDir
        if self._path is not None:
            result["path"] = \
                self._path
        if self._resultsetId is not None:
            result["resultsetId"] = \
                self._resultsetId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._resultsetId is None:
            raise ValueError(
                "ResultsetFile.resultsetId doesnt match requirement:" 
                "required: True"
            )
        if (self._resultsetId is not None
            and
            self._resultsetId < 1):
            raise ValueError(
                "ResultsetFile.resultsetId: " + str(self._resultsetId) + 
                " doesnt match requirement: minimum: 1")
        if self._path is None:
            raise ValueError(
                "ResultsetFile.path doesnt match requirement:" 
                "required: True"
            )
        if (self._path is not None
            and
            len(self._path) < 2):
            raise ValueError(
                "ResultsetFile.path: " + str(self._path) + 
                " doesnt match requirement: minLength: 2")
        if (self._path is not None
            and
            len(self._path) > 1024):
            raise ValueError(
                "ResultsetFile.path: " + str(self._path) + 
                " doesnt match requirement: maxLength: 1024")
        if (self._fileSize is not None
            and
            self._fileSize < 0):
            raise ValueError(
                "ResultsetFile.fileSize: " + str(self._fileSize) + 
                " doesnt match requirement: minimum: 0")
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "ResultsetFile.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        return True
    

