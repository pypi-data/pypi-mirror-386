"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .IPAddress import IPAddress
from .AceType import AceTypeEnum
from .AceInstance import AceInstance
from .AceProvider import AceProviderEnum
from .NetworkTypeEnum import NetworkTypeEnum
from .StorageServiceConfigDetails import StorageServiceConfigDetails

# Unused import over optimization prevention
str(repr(AceProviderEnum))
str(repr(AceInstance))
str(repr(StorageServiceConfigDetails))
str(repr(AceTypeEnum))
str(repr(NetworkTypeEnum))
str(repr(IPAddress))


if sys.version_info > (3,):
    long = int
    unicode = str

class AceUpdate(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allowExposedPort = (
            None if not fromDict or propDict.get(
                "allowExposedPort"
            ) is None
            else propDict["allowExposedPort"])
        self.clusterFederatorUrl = (
            None if not fromDict or propDict.get(
                "clusterFederatorUrl"
            ) is None
            else propDict["clusterFederatorUrl"])
        self.dataPlatformEnabled = (
            None if not fromDict or propDict.get(
                "dataPlatformEnabled"
            ) is None
            else propDict["dataPlatformEnabled"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.egressIps = (
            None if not fromDict or propDict.get(
                "egressIps"
            ) is None
            else [ IPAddress(i)
            for i in propDict["egressIps"] ])
        self.grpcEnabled = (
            None if not fromDict or propDict.get(
                "grpcEnabled"
            ) is None
            else propDict["grpcEnabled"])
        self.infinityManagerEnabled = (
            None if not fromDict or propDict.get(
                "infinityManagerEnabled"
            ) is None
            else propDict["infinityManagerEnabled"])
        self.instances = (
            None if not fromDict or propDict.get(
                "instances"
            ) is None
            else [ AceInstance(i)
            for i in propDict["instances"] ])
        self.isUnavailable = (
            None if not fromDict or propDict.get(
                "isUnavailable"
            ) is None
            else propDict["isUnavailable"])
        self.maxActiveJobsPerUser = (
            None if not fromDict or propDict.get(
                "maxActiveJobsPerUser"
            ) is None
            else propDict["maxActiveJobsPerUser"])
        self.maxAllowedReplicas = (
            None if not fromDict or propDict.get(
                "maxAllowedReplicas"
            ) is None
            else propDict["maxAllowedReplicas"])
        self.maxRuntimeSeconds = (
            None if not fromDict or propDict.get(
                "maxRuntimeSeconds"
            ) is None
            else propDict["maxRuntimeSeconds"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.networkTypes = (
            None if not fromDict or propDict.get(
                "networkTypes"
            ) is None
            else propDict["networkTypes"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.provider = (
            None if not fromDict or propDict.get(
                "provider"
            ) is None
            else propDict["provider"])
        self.proxyServiceUrl = (
            None if not fromDict or propDict.get(
                "proxyServiceUrl"
            ) is None
            else propDict["proxyServiceUrl"])
        self.storageServiceConfig = (
            None if not fromDict or propDict.get(
                "storageServiceConfig"
            ) is None
            else [ StorageServiceConfigDetails(i)
            for i in propDict["storageServiceConfig"] ])
        self.storageServiceUrl = (
            None if not fromDict or propDict.get(
                "storageServiceUrl"
            ) is None
            else propDict["storageServiceUrl"])
        self.terminationGracePeriodSeconds = (
            None if not fromDict or propDict.get(
                "terminationGracePeriodSeconds"
            ) is None
            else propDict["terminationGracePeriodSeconds"])
        self.topologyTypes = (
            None if not fromDict or propDict.get(
                "topologyTypes"
            ) is None
            else propDict["topologyTypes"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.unavailableUntil = (
            None if not fromDict or propDict.get(
                "unavailableUntil"
            ) is None
            else propDict["unavailableUntil"])

    @property
    def allowExposedPort(self):
        """bool: Feature toggle for cli/FE to allow --ports feature"""
        return self._allowExposedPort

    @allowExposedPort.setter
    def allowExposedPort(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowExposedPort = value
        else:
            raise TypeError(
                'Property "allowExposedPort" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def clusterFederatorUrl(self):
        """str: URL for cluster federation service hosted inside this ACE"""
        return self._clusterFederatorUrl

    @clusterFederatorUrl.setter
    def clusterFederatorUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._clusterFederatorUrl = value
        else:
            raise TypeError(
                'Property "clusterFederatorUrl" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def dataPlatformEnabled(self):
        """bool: Enable flag for Data Platform. Used along Dataset Service in 
        Create Job"""
        return self._dataPlatformEnabled

    @dataPlatformEnabled.setter
    def dataPlatformEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._dataPlatformEnabled = value
        else:
            raise TypeError(
                'Property "dataPlatformEnabled" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def description(self):
        """str: description of the ACE"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def egressIps(self):
        """list: List of trusted Egress IPs from which the outgoing node traff
        ic will flow. If provided, cloud will accept network traffic f
        rom nodes only if it originates from one of the IP in this list."""
        return self._egressIps

    @egressIps.setter
    def egressIps(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._egressIps = value
        else:
            raise TypeError(
                'Property "egressIps" of type "list<IPAddress>" set to wrong '
                'type'
            )

    @property
    def grpcEnabled(self):
        """bool: Determines whether GRPC Protocol can be used in JobPortMappin
        g for jobs scheduled on this ACE."""
        return self._grpcEnabled

    @grpcEnabled.setter
    def grpcEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._grpcEnabled = value
        else:
            raise TypeError(
                'Property "grpcEnabled" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def infinityManagerEnabled(self):
        """bool: Enable flag of Infinity Manager for this ace"""
        return self._infinityManagerEnabled

    @infinityManagerEnabled.setter
    def infinityManagerEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._infinityManagerEnabled = value
        else:
            raise TypeError(
                'Property "infinityManagerEnabled" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def instances(self):
        """list: Used to indicate the collection of pre-determined resources a
        vailible for use on the ACE, this overwrites existing collecti
        on"""
        return self._instances

    @instances.setter
    def instances(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._instances = value
        else:
            raise TypeError(
                'Property "instances" of type "list<AceInstance>" set to wron'
                'g type'
            )

    @property
    def isUnavailable(self):
        """bool: Indicates if ACE is unavailable (e.g. downtime)."""
        return self._isUnavailable

    @isUnavailable.setter
    def isUnavailable(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isUnavailable = value
        else:
            raise TypeError(
                'Property "isUnavailable" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def maxActiveJobsPerUser(self):
        """int: Maximum number of jobs a user can have QUEUED or RUNNING at an
        y given point in time on this ACE. Users are allowed to submit
         as many jobs as they want, but they will not be sent to the scheduler
        . Default (0) means no restrictions."""
        return self._maxActiveJobsPerUser

    @maxActiveJobsPerUser.setter
    def maxActiveJobsPerUser(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._maxActiveJobsPerUser = value
        else:
            raise TypeError(
                'Property "maxActiveJobsPerUser" of type "list<int>" set to w'
                'rong type'
            )

    @property
    def maxAllowedReplicas(self):
        """int: Maximum number of replicas/tasks that are allowed for multinod
        e job submission to the ACE"""
        return self._maxAllowedReplicas

    @maxAllowedReplicas.setter
    def maxAllowedReplicas(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._maxAllowedReplicas = value
        else:
            raise TypeError(
                'Property "maxAllowedReplicas" of type "list<int>" set to wro'
                'ng type'
            )

    @property
    def maxRuntimeSeconds(self):
        """long: The maximum runtime, in seconds, that any jobs can have on th
        e ACE."""
        return self._maxRuntimeSeconds

    @maxRuntimeSeconds.setter
    def maxRuntimeSeconds(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._maxRuntimeSeconds = value
        else:
            raise TypeError(
                'Property "maxRuntimeSeconds" of type "list<long>" set to wro'
                'ng type'
            )

    @property
    def name(self):
        """str: name for the ACE, must be uniq within the team, max 32 charact
        ers"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def networkTypes(self):
        """list: network types allowed on the instances, used to specify the t
        ype of system network. ex) [infiniband, ethernet/RoCE,..]"""
        return self._networkTypes

    @networkTypes.setter
    def networkTypes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._networkTypes = value
        else:
            raise TypeError(
                'Property "networkTypes" of type "list<NetworkTypeEnum>" set '
                'to wrong type'
            )

    @property
    def orgName(self):
        """str: Organization name that ACE will be reattached to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def provider(self):
        """ """
        return self._provider

    @provider.setter
    def provider(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._provider = value
        else:
            raise TypeError(
                'Property "provider" of type "list<AceProviderEnum>" set to w'
                'rong type'
            )

    @property
    def proxyServiceUrl(self):
        """str: url that exposes proxy for this ACE"""
        return self._proxyServiceUrl

    @proxyServiceUrl.setter
    def proxyServiceUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._proxyServiceUrl = value
        else:
            raise TypeError(
                'Property "proxyServiceUrl" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def storageServiceConfig(self):
        """list: Used to indicate the provider of the ACE"""
        return self._storageServiceConfig

    @storageServiceConfig.setter
    def storageServiceConfig(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._storageServiceConfig = value
        else:
            raise TypeError(
                'Property "storageServiceConfig" of type "list<StorageService'
                'ConfigDetails>" set to wrong type'
            )

    @property
    def storageServiceUrl(self):
        """str: DEPRECATED storage service for the ACE can be accessed at this
         URL, for example: https://css.ngc.nvidia.com"""
        return self._storageServiceUrl

    @storageServiceUrl.setter
    def storageServiceUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageServiceUrl = value
        else:
            raise TypeError(
                'Property "storageServiceUrl" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def terminationGracePeriodSeconds(self):
        """long: The grace period, in seconds, allowed for containers to shut 
        down gracefully. If the shutdown exceeds the grace period, the
        n the container will be forcefully shutdown."""
        return self._terminationGracePeriodSeconds

    @terminationGracePeriodSeconds.setter
    def terminationGracePeriodSeconds(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._terminationGracePeriodSeconds = value
        else:
            raise TypeError(
                'Property "terminationGracePeriodSeconds" of type "list<long>'
                '" set to wrong type'
            )

    @property
    def topologyTypes(self):
        """list: topology type allowed on the instances, used to specify the s
        ystem proxomity. ex) [pack, rackName, podName, rack, megapod]"""
        return self._topologyTypes

    @topologyTypes.setter
    def topologyTypes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._topologyTypes = value
        else:
            raise TypeError(
                'Property "topologyTypes" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<AceTypeEnum>" set to wrong typ'
                'e'
            )

    @property
    def unavailableUntil(self):
        """str: Estimated time after which ace is available. ISO-8601 format
        """
        return self._unavailableUntil

    @unavailableUntil.setter
    def unavailableUntil(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._unavailableUntil = value
        else:
            raise TypeError(
                'Property "unavailableUntil" of type "list<str>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._allowExposedPort is not None:
            result["allowExposedPort"] = \
                self._allowExposedPort
        if self._clusterFederatorUrl is not None:
            result["clusterFederatorUrl"] = \
                self._clusterFederatorUrl
        if self._dataPlatformEnabled is not None:
            result["dataPlatformEnabled"] = \
                self._dataPlatformEnabled
        if self._description is not None:
            result["description"] = \
                self._description
        if self._egressIps:
            result["egressIps"] = [
                i.toDict() for i in self._egressIps 
            ] if self._egressIps else []
        if self._grpcEnabled is not None:
            result["grpcEnabled"] = \
                self._grpcEnabled
        if self._infinityManagerEnabled is not None:
            result["infinityManagerEnabled"] = \
                self._infinityManagerEnabled
        if self._instances:
            result["instances"] = [
                i.toDict() for i in self._instances 
            ] if self._instances else []
        if self._isUnavailable is not None:
            result["isUnavailable"] = \
                self._isUnavailable
        if self._maxActiveJobsPerUser is not None:
            result["maxActiveJobsPerUser"] = \
                self._maxActiveJobsPerUser
        if self._maxAllowedReplicas is not None:
            result["maxAllowedReplicas"] = \
                self._maxAllowedReplicas
        if self._maxRuntimeSeconds is not None:
            result["maxRuntimeSeconds"] = \
                self._maxRuntimeSeconds
        if self._name is not None:
            result["name"] = \
                self._name
        if self._networkTypes is not None:
            result["networkTypes"] = \
                self._networkTypes
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._provider is not None:
            result["provider"] = \
                self._provider
        if self._proxyServiceUrl is not None:
            result["proxyServiceUrl"] = \
                self._proxyServiceUrl
        if self._storageServiceConfig:
            result["storageServiceConfig"] = [
                i.toDict() for i in self._storageServiceConfig 
            ] if self._storageServiceConfig else []
        if self._storageServiceUrl is not None:
            result["storageServiceUrl"] = \
                self._storageServiceUrl
        if self._terminationGracePeriodSeconds is not None:
            result["terminationGracePeriodSeconds"] = \
                self._terminationGracePeriodSeconds
        if self._topologyTypes is not None:
            result["topologyTypes"] = \
                self._topologyTypes
        if self._type is not None:
            result["type"] = \
                self._type
        if self._unavailableUntil is not None:
            result["unavailableUntil"] = \
                self._unavailableUntil
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 2):
            raise ValueError(
                "AceUpdate.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 2")
        if (self._name is not None
            and
            len(self._name) > 32):
            raise ValueError(
                "AceUpdate.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 32")
        if (self._name is not None
            and
            not re.match(
                r"^[a-zA-Z\d_-]*$",
                 self._name)):
            raise ValueError(
                "AceUpdate.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^[a-zA-Z\d_-]*$")
        if (self._description is not None
            and
            len(self._description) > 255):
            raise ValueError(
                "AceUpdate.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 255")
        if (self._instances is not None
            and
            len(self._instances) < 1):
            raise ValueError(
                "AceUpdate.instances: " + str(self._instances) + 
                " doesnt match requirement: minItems: 1")
        if (self._maxRuntimeSeconds is not None
            and
            self._maxRuntimeSeconds < 0):
            raise ValueError(
                "AceUpdate.maxRuntimeSeconds: " + str(self._maxRuntimeSeconds) + 
                " doesnt match requirement: minimum: 0")
        if (self._terminationGracePeriodSeconds is not None
            and
            self._terminationGracePeriodSeconds < 0):
            raise ValueError(
                "AceUpdate.terminationGracePeriodSeconds: " + str(self._terminationGracePeriodSeconds) + 
                " doesnt match requirement: minimum: 0")
        if (self._maxActiveJobsPerUser is not None
            and
            self._maxActiveJobsPerUser < 0):
            raise ValueError(
                "AceUpdate.maxActiveJobsPerUser: " + str(self._maxActiveJobsPerUser) + 
                " doesnt match requirement: minimum: 0")
        if (self._unavailableUntil is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._unavailableUntil)):
            raise ValueError(
                "AceUpdate.unavailableUntil: " + str(self._unavailableUntil) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._orgName is not None
            and
            len(self._orgName) < 2):
            raise ValueError(
                "AceUpdate.orgName: " + str(self._orgName) + 
                " doesnt match requirement: minLength: 2")
        if (self._orgName is not None
            and
            len(self._orgName) > 64):
            raise ValueError(
                "AceUpdate.orgName: " + str(self._orgName) + 
                " doesnt match requirement: maxLength: 64")
        if (self._orgName is not None
            and
            not re.match(
                r"[a-z][a-z\d_-]+",
                 self._orgName)):
            raise ValueError(
                "AceUpdate.orgName: " + str(self._orgName) + 
                " doesnt match requirement: pattern: [a-z][a-z\d_-]+")
        if (self._storageServiceConfig is not None):
            for obj in self._storageServiceConfig:
                if (obj is not None): obj.isValid()
        if (self._instances is not None):
            for obj in self._instances:
                if (obj is not None): obj.isValid()
        if (self._egressIps is not None):
            for obj in self._egressIps:
                if (obj is not None): obj.isValid()
        return True
    

