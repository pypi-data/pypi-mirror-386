"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .StorageLocationStorageTypeEnum import StorageLocationStorageTypeEnum

# Unused import over optimization prevention
str(repr(StorageLocationStorageTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class StorageLocation(object):
    """Storage location information for resources."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.externalEndpointUri = (
            None if not fromDict or propDict.get(
                "externalEndpointUri"
            ) is None
            else propDict["externalEndpointUri"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.storageType = (
            None if not fromDict or propDict.get(
                "storageType"
            ) is None
            else propDict["storageType"])

    @property
    def externalEndpointUri(self):
        """str: Storage location endpoint URI."""
        return self._externalEndpointUri

    @externalEndpointUri.setter
    def externalEndpointUri(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._externalEndpointUri = value
        else:
            raise TypeError(
                'Property "externalEndpointUri" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def id(self):
        """str: Resource unique identifier (UUID)."""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def storageType(self):
        """StorageLocationStorageTypeEnum: Indicates storage type of a storage
         location."""
        return self._storageType

    @storageType.setter
    def storageType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._storageType = value
        else:
            raise TypeError(
                'Property "storageType" of type "list<StorageLocationStorageT'
                'ypeEnum>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._externalEndpointUri is not None:
            result["externalEndpointUri"] = \
                self._externalEndpointUri
        if self._id is not None:
            result["id"] = \
                self._id
        if self._storageType is not None:
            result["storageType"] = \
                self._storageType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._id is None:
            raise ValueError(
                "StorageLocation.id doesnt match requirement:" 
                "required: True"
            )
        if (self._id is not None
            and
            not re.match(
                r"^(?![-_])[a-zA-Z0-9_-]{22}$",
                 self._id)):
            raise ValueError(
                "StorageLocation.id: " + str(self._id) + 
                " doesnt match requirement: pattern: ^(?![-_])[a-zA-Z0-9_-]{2"
                "2}$")
        return True
    

