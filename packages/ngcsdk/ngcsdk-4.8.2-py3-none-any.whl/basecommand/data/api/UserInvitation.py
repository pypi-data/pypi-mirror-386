"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RoleType import RoleTypeEnum

# Unused import over optimization prevention
str(repr(RoleTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserInvitation(object):
    """User invitation to an NGC org or team"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.isProcessed = (
            None if not fromDict or propDict.get(
                "isProcessed"
            ) is None
            else propDict["isProcessed"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.org = (
            None if not fromDict or propDict.get(
                "org"
            ) is None
            else propDict["org"])
        self.roles = (
            None if not fromDict or propDict.get(
                "roles"
            ) is None
            else propDict["roles"])
        self.team = (
            None if not fromDict or propDict.get(
                "team"
            ) is None
            else propDict["team"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def createdDate(self):
        """str: Date on which the invitation was created. (ISO-8601 format)"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def email(self):
        """str: Email address of the user."""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """long: Unique invitation ID"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def isProcessed(self):
        """bool: Flag indicating if the invitation has already been accepted b
        y the user."""
        return self._isProcessed

    @isProcessed.setter
    def isProcessed(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isProcessed = value
        else:
            raise TypeError(
                'Property "isProcessed" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def name(self):
        """str: user name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def org(self):
        """str: Org to which a user was invited."""
        return self._org

    @org.setter
    def org(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._org = value
        else:
            raise TypeError(
                'Property "org" of type "list<str>" set to wrong type'
            )

    @property
    def roles(self):
        """list: List of roles that the user have."""
        return self._roles

    @roles.setter
    def roles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._roles = value
        else:
            raise TypeError(
                'Property "roles" of type "list<RoleTypeEnum>" set to wrong t'
                'ype'
            )

    @property
    def team(self):
        """str: Team to which a user was invited."""
        return self._team

    @team.setter
    def team(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._team = value
        else:
            raise TypeError(
                'Property "team" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """TypeEnum: Type of invitation. The invitation is either to an organi
        zation or to a team within organization."""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<TypeEnum>" set to wrong type'
            )

    TypeEnum=["ORGANIZATION","TEAM",]
    str(repr(TypeEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._email is not None:
            result["email"] = \
                self._email
        if self._id is not None:
            result["id"] = \
                self._id
        if self._isProcessed is not None:
            result["isProcessed"] = \
                self._isProcessed
        if self._name is not None:
            result["name"] = \
                self._name
        if self._org is not None:
            result["org"] = \
                self._org
        if self._roles is not None:
            result["roles"] = \
                self._roles
        if self._team is not None:
            result["team"] = \
                self._team
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._email is not None
            and
            len(self._email) < 7):
            raise ValueError(
                "UserInvitation.email: " + str(self._email) + 
                " doesnt match requirement: minLength: 7")
        if (self._email is not None
            and
            len(self._email) > 128):
            raise ValueError(
                "UserInvitation.email: " + str(self._email) + 
                " doesnt match requirement: maxLength: 128")
        if (self._email is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._email)):
            raise ValueError(
                "UserInvitation.email: " + str(self._email) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "UserInvitation.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "UserInvitation.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "UserInvitation.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        return True
    

