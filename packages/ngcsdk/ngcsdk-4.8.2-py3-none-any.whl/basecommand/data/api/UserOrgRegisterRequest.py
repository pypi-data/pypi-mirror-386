"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserOrgRegisterRequest(object):
    """object used to activate the user and org during user registration"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgCountry = (
            None if not fromDict or propDict.get(
                "orgCountry"
            ) is None
            else propDict["orgCountry"])
        self.orgDesc = (
            None if not fromDict or propDict.get(
                "orgDesc"
            ) is None
            else propDict["orgDesc"])
        self.orgIndustry = (
            None if not fromDict or propDict.get(
                "orgIndustry"
            ) is None
            else propDict["orgIndustry"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.userEmailOptIn = (
            None if not fromDict or propDict.get(
                "userEmailOptIn"
            ) is None
            else propDict["userEmailOptIn"])
        self.userJobTitle = (
            None if not fromDict or propDict.get(
                "userJobTitle"
            ) is None
            else propDict["userJobTitle"])
        self.userName = (
            None if not fromDict or propDict.get(
                "userName"
            ) is None
            else propDict["userName"])

    @property
    def name(self):
        """str: DEPRECATED - please use orgName"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgCountry(self):
        """str: user country"""
        return self._orgCountry

    @orgCountry.setter
    def orgCountry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgCountry = value
        else:
            raise TypeError(
                'Property "orgCountry" of type "list<str>" set to wrong type'
            )

    @property
    def orgDesc(self):
        """str: Company or Organization name or description"""
        return self._orgDesc

    @orgDesc.setter
    def orgDesc(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgDesc = value
        else:
            raise TypeError(
                'Property "orgDesc" of type "list<str>" set to wrong type'
            )

    @property
    def orgIndustry(self):
        """str: industry of the company"""
        return self._orgIndustry

    @orgIndustry.setter
    def orgIndustry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgIndustry = value
        else:
            raise TypeError(
                'Property "orgIndustry" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: org name"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def userEmailOptIn(self):
        """bool: indicates if user has opt in to nvidia emails"""
        return self._userEmailOptIn

    @userEmailOptIn.setter
    def userEmailOptIn(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._userEmailOptIn = value
        else:
            raise TypeError(
                'Property "userEmailOptIn" of type "list<bool>" set to wrong '
                'type'
            )

    @property
    def userJobTitle(self):
        """str: job title of the customer"""
        return self._userJobTitle

    @userJobTitle.setter
    def userJobTitle(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._userJobTitle = value
        else:
            raise TypeError(
                'Property "userJobTitle" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def userName(self):
        """str: user name"""
        return self._userName

    @userName.setter
    def userName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._userName = value
        else:
            raise TypeError(
                'Property "userName" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgCountry is not None:
            result["orgCountry"] = \
                self._orgCountry
        if self._orgDesc is not None:
            result["orgDesc"] = \
                self._orgDesc
        if self._orgIndustry is not None:
            result["orgIndustry"] = \
                self._orgIndustry
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._userEmailOptIn is not None:
            result["userEmailOptIn"] = \
                self._userEmailOptIn
        if self._userJobTitle is not None:
            result["userJobTitle"] = \
                self._userJobTitle
        if self._userName is not None:
            result["userName"] = \
                self._userName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 8):
            raise ValueError(
                "UserOrgRegisterRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 8")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "UserOrgRegisterRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if (self._name is not None
            and
            not re.match(
                r"(?=.*?\d.*\d)[a-z][a-z\d_-]+",
                 self._name)):
            raise ValueError(
                "UserOrgRegisterRequest.name: " + str(self._name) + 
                " doesnt match requirement: pattern: (?=.*?\d.*\d)[a-z][a-z\d"
                "_-]+")
        if (self._orgName is not None
            and
            len(self._orgName) < 8):
            raise ValueError(
                "UserOrgRegisterRequest.orgName: " + str(self._orgName) + 
                " doesnt match requirement: minLength: 8")
        if (self._orgName is not None
            and
            len(self._orgName) > 64):
            raise ValueError(
                "UserOrgRegisterRequest.orgName: " + str(self._orgName) + 
                " doesnt match requirement: maxLength: 64")
        if (self._orgName is not None
            and
            not re.match(
                r"(?=.*?\d.*\d)[a-z][a-z\d_-]+",
                 self._orgName)):
            raise ValueError(
                "UserOrgRegisterRequest.orgName: " + str(self._orgName) + 
                " doesnt match requirement: pattern: (?=.*?\d.*\d)[a-z][a-z\d"
                "_-]+")
        if (self._orgDesc is not None
            and
            len(self._orgDesc) > 512):
            raise ValueError(
                "UserOrgRegisterRequest.orgDesc: " + str(self._orgDesc) + 
                " doesnt match requirement: maxLength: 512")
        if (self._userName is not None
            and
            len(self._userName) < 1):
            raise ValueError(
                "UserOrgRegisterRequest.userName: " + str(self._userName) + 
                " doesnt match requirement: minLength: 1")
        if (self._userName is not None
            and
            len(self._userName) > 64):
            raise ValueError(
                "UserOrgRegisterRequest.userName: " + str(self._userName) + 
                " doesnt match requirement: maxLength: 64")
        return True
    

