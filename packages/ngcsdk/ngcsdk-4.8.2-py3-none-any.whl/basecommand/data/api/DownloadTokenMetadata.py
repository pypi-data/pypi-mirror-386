"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class DownloadTokenMetadata(object):
    """This is the JSON metadata that'll be stored in Redis"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.owner = (
            None if not fromDict or propDict.get(
                "owner"
            ) is None
            else propDict["owner"])
        self.requesterJwt = (
            None if not fromDict or propDict.get(
                "requesterJwt"
            ) is None
            else propDict["requesterJwt"])

    @property
    def orgName(self):
        """str: The owner's org name"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def owner(self):
        """str: The resource owner Auth client id """
        return self._owner

    @owner.setter
    def owner(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._owner = value
        else:
            raise TypeError(
                'Property "owner" of type "list<str>" set to wrong type'
            )

    @property
    def requesterJwt(self):
        """str: JWT of the requester"""
        return self._requesterJwt

    @requesterJwt.setter
    def requesterJwt(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requesterJwt = value
        else:
            raise TypeError(
                'Property "requesterJwt" of type "list<str>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._owner is not None:
            result["owner"] = \
                self._owner
        if self._requesterJwt is not None:
            result["requesterJwt"] = \
                self._requesterJwt
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

