"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class DatasetCreateRequest(object):
    """Dataset creation request."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.nfsRoot = (
            None if not fromDict or propDict.get(
                "nfsRoot"
            ) is None
            else propDict["nfsRoot"])
        self.nfsShare = (
            None if not fromDict or propDict.get(
                "nfsShare"
            ) is None
            else propDict["nfsShare"])
        self.onBehalfOf = (
            None if not fromDict or propDict.get(
                "onBehalfOf"
            ) is None
            else propDict["onBehalfOf"])
        self.resultsetIdForBaseDataSource = (
            None if not fromDict or propDict.get(
                "resultsetIdForBaseDataSource"
            ) is None
            else propDict["resultsetIdForBaseDataSource"])

    @property
    def aceId(self):
        """long: ID of the ACE to which the dataset will belong"""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def aceName(self):
        """str: Name of the ACE to which the dataset will belong"""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the dataset"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Name for the dataset"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def nfsRoot(self):
        """str: Path on the NFS share that indicates root directory for the da
        taset"""
        return self._nfsRoot

    @nfsRoot.setter
    def nfsRoot(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nfsRoot = value
        else:
            raise TypeError(
                'Property "nfsRoot" of type "list<str>" set to wrong type'
            )

    @property
    def nfsShare(self):
        """str: Location of the NFS share"""
        return self._nfsShare

    @nfsShare.setter
    def nfsShare(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nfsShare = value
        else:
            raise TypeError(
                'Property "nfsShare" of type "list<str>" set to wrong type'
            )

    @property
    def onBehalfOf(self):
        """str: Auth client Id that we want to create this dataset on behalf o
        f. Only for dataset admins"""
        return self._onBehalfOf

    @onBehalfOf.setter
    def onBehalfOf(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._onBehalfOf = value
        else:
            raise TypeError(
                'Property "onBehalfOf" of type "list<str>" set to wrong type'
            )

    @property
    def resultsetIdForBaseDataSource(self):
        """long: Id of the resultset which should be used to create the datase
        t. The dataset will contain all the files of the resultset."""
        return self._resultsetIdForBaseDataSource

    @resultsetIdForBaseDataSource.setter
    def resultsetIdForBaseDataSource(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resultsetIdForBaseDataSource = value
        else:
            raise TypeError(
                'Property "resultsetIdForBaseDataSource" of type "list<long>"'
                ' set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._description is not None:
            result["description"] = \
                self._description
        if self._name is not None:
            result["name"] = \
                self._name
        if self._nfsRoot is not None:
            result["nfsRoot"] = \
                self._nfsRoot
        if self._nfsShare is not None:
            result["nfsShare"] = \
                self._nfsShare
        if self._onBehalfOf is not None:
            result["onBehalfOf"] = \
                self._onBehalfOf
        if self._resultsetIdForBaseDataSource is not None:
            result["resultsetIdForBaseDataSource"] = \
                self._resultsetIdForBaseDataSource
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "DatasetCreateRequest.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 2):
            raise ValueError(
                "DatasetCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 2")
        if (self._name is not None
            and
            len(self._name) > 255):
            raise ValueError(
                "DatasetCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 255")
        return True
    

