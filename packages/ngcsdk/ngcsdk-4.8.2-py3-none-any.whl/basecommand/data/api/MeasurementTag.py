"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class MeasurementTag(object):
    """object for measurement tags which identifies a measuurement series"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.tagKey = (
            None if not fromDict or propDict.get(
                "tagKey"
            ) is None
            else propDict["tagKey"])
        self.tagValue = (
            None if not fromDict or propDict.get(
                "tagValue"
            ) is None
            else propDict["tagValue"])

    @property
    def tagKey(self):
        """str: key for the tag, ie)host, job_id, gpu_id"""
        return self._tagKey

    @tagKey.setter
    def tagKey(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tagKey = value
        else:
            raise TypeError(
                'Property "tagKey" of type "list<str>" set to wrong type'
            )

    @property
    def tagValue(self):
        """str: value for the tag, ie)host=foo, job_id=bar, gpu_id=racecar"""
        return self._tagValue

    @tagValue.setter
    def tagValue(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tagValue = value
        else:
            raise TypeError(
                'Property "tagValue" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._tagKey is not None:
            result["tagKey"] = \
                self._tagKey
        if self._tagValue is not None:
            result["tagValue"] = \
                self._tagValue
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

