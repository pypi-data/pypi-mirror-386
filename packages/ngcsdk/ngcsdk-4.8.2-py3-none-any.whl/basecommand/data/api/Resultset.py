"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .StorageLocation import StorageLocation
from .ResultsetFile import ResultsetFile

# Unused import over optimization prevention
str(repr(ResultsetFile))
str(repr(StorageLocation))


if sys.version_info > (3,):
    long = int
    unicode = str

class Resultset(object):
    """Resultset of the job."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.aceStorageServiceUrl = (
            None if not fromDict or propDict.get(
                "aceStorageServiceUrl"
            ) is None
            else propDict["aceStorageServiceUrl"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.fileDownloadUrl = (
            None if not fromDict or propDict.get(
                "fileDownloadUrl"
            ) is None
            else propDict["fileDownloadUrl"])
        self.files = (
            None if not fromDict or propDict.get(
                "files"
            ) is None
            else [ ResultsetFile(i)
            for i in propDict["files"] ])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.replicaId = (
            None if not fromDict or propDict.get(
                "replicaId"
            ) is None
            else propDict["replicaId"])
        self.size = (
            None if not fromDict or propDict.get(
                "size"
            ) is None
            else propDict["size"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.storageLocations = (
            None if not fromDict or propDict.get(
                "storageLocations"
            ) is None
            else [ StorageLocation(i)
            for i in propDict["storageLocations"] ])
        self.token = (
            None if not fromDict or propDict.get(
                "token"
            ) is None
            else propDict["token"])
        self.totalFiles = (
            None if not fromDict or propDict.get(
                "totalFiles"
            ) is None
            else propDict["totalFiles"])

    @property
    def aceId(self):
        """long: Id of the ACE to which the resultset is local."""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def aceStorageServiceUrl(self):
        """str: URL of the storage service of given ACE"""
        return self._aceStorageServiceUrl

    @aceStorageServiceUrl.setter
    def aceStorageServiceUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceStorageServiceUrl = value
        else:
            raise TypeError(
                'Property "aceStorageServiceUrl" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def createdDate(self):
        """str: Resultset creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def fileDownloadUrl(self):
        """str: Base URL for file download from this resultset"""
        return self._fileDownloadUrl

    @fileDownloadUrl.setter
    def fileDownloadUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fileDownloadUrl = value
        else:
            raise TypeError(
                'Property "fileDownloadUrl" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def files(self):
        """list: list of files in this resultset"""
        return self._files

    @files.setter
    def files(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._files = value
        else:
            raise TypeError(
                'Property "files" of type "list<ResultsetFile>" set to wrong '
                'type'
            )

    @property
    def id(self):
        """long: Resultset unique ID (equals to job ID)"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def replicaId(self):
        """long: Resultset replica ID in case of multinode job (equals to repl
        ica ID)"""
        return self._replicaId

    @replicaId.setter
    def replicaId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._replicaId = value
        else:
            raise TypeError(
                'Property "replicaId" of type "list<long>" set to wrong type'
            )

    @property
    def size(self):
        """long: Resultset size in bytes."""
        return self._size

    @size.setter
    def size(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._size = value
        else:
            raise TypeError(
                'Property "size" of type "list<long>" set to wrong type'
            )

    @property
    def status(self):
        """StatusEnum: Indicates the current status of the dataset."""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<StatusEnum>" set to wrong ty'
                'pe'
            )

    StatusEnum=["FETCHING","FETCHED",]
    str(repr(StatusEnum))  # Prevent optimizer removing enum

    @property
    def storageLocations(self):
        """list: Storage locations of the resultset"""
        return self._storageLocations

    @storageLocations.setter
    def storageLocations(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._storageLocations = value
        else:
            raise TypeError(
                'Property "storageLocations" of type "list<StorageLocation>" '
                'set to wrong type'
            )

    @property
    def token(self):
        """str: Token to be used with file download operations"""
        return self._token

    @token.setter
    def token(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._token = value
        else:
            raise TypeError(
                'Property "token" of type "list<str>" set to wrong type'
            )

    @property
    def totalFiles(self):
        """long: Number of files in this resultset."""
        return self._totalFiles

    @totalFiles.setter
    def totalFiles(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalFiles = value
        else:
            raise TypeError(
                'Property "totalFiles" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._aceStorageServiceUrl is not None:
            result["aceStorageServiceUrl"] = \
                self._aceStorageServiceUrl
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._fileDownloadUrl is not None:
            result["fileDownloadUrl"] = \
                self._fileDownloadUrl
        if self._files:
            result["files"] = [
                i.toDict() for i in self._files 
            ] if self._files else []
        if self._id is not None:
            result["id"] = \
                self._id
        if self._replicaId is not None:
            result["replicaId"] = \
                self._replicaId
        if self._size is not None:
            result["size"] = \
                self._size
        if self._status is not None:
            result["status"] = \
                self._status
        if self._storageLocations:
            result["storageLocations"] = [
                i.toDict() for i in self._storageLocations 
            ] if self._storageLocations else []
        if self._token is not None:
            result["token"] = \
                self._token
        if self._totalFiles is not None:
            result["totalFiles"] = \
                self._totalFiles
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._aceId is None:
            raise ValueError(
                "Resultset.aceId doesnt match requirement:" 
                "required: True"
            )
        if (self._aceId is not None
            and
            self._aceId < 1):
            raise ValueError(
                "Resultset.aceId: " + str(self._aceId) + 
                " doesnt match requirement: minimum: 1")
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "Resultset.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._files is not None):
            for obj in self._files:
                if (obj is not None): obj.isValid()
        if (self._storageLocations is not None):
            for obj in self._storageLocations:
                if (obj is not None): obj.isValid()
        return True
    

