"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .AceSimplified import AceSimplified
from .Node import Node

# Unused import over optimization prevention
str(repr(Node))
str(repr(RequestStatus))
str(repr(AceSimplified))


if sys.version_info > (3,):
    long = int
    unicode = str

class NodeResponse(object):
    """Information about Node/Appliance"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.ace = (
            None if not fromDict or propDict.get(
                "ace"
            ) is None
            else propDict["ace"])
        self.node = (
            None if not fromDict or propDict.get(
                "node"
            ) is None
            else propDict["node"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def ace(self):
        """AceSimplified: ACE is a collection of nodes that can run jobs"""
        return self._ace

    @ace.setter
    def ace(self, value):
        if value is not None and not isinstance(value, AceSimplified):
            value = AceSimplified(value)
        if (value is None) or isinstance(value, AceSimplified):
            self._ace = value
        else:
            raise TypeError(
                'Property "ace" of type "list<AceSimplified>" set to wrong ty'
                'pe'
            )

    @property
    def node(self):
        """Node: Information about the node"""
        return self._node

    @node.setter
    def node(self, value):
        if value is not None and not isinstance(value, Node):
            value = Node(value)
        if (value is None) or isinstance(value, Node):
            self._node = value
        else:
            raise TypeError(
                'Property "node" of type "list<Node>" set to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._ace:
            result["ace"] = \
                self._ace.toDict() if self._ace is not None else None
        if self._node:
            result["node"] = \
                self._node.toDict() if self._node is not None else None
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._node is not None): self._node.isValid()
        if (self._ace is not None): self._ace.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

