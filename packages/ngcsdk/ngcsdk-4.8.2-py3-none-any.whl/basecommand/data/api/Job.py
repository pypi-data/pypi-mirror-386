"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobLabels import JobLabels
from .JobDefinition import JobDefinition
from .AceProvider import AceProviderEnum
from .MeasurementSeries import MeasurementSeries
from .JobPriorityEnum import JobPriorityEnum
from .JobStatus import JobStatus
from .StorageResource import StorageResource

# Unused import over optimization prevention
str(repr(AceProviderEnum))
str(repr(JobDefinition))
str(repr(MeasurementSeries))
str(repr(JobLabels))
str(repr(JobPriorityEnum))
str(repr(StorageResource))
str(repr(JobStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class Job(object):
    """object that describes submitted job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.aceProvider = (
            None if not fromDict or propDict.get(
                "aceProvider"
            ) is None
            else propDict["aceProvider"])
        self.aceResourceInstance = (
            None if not fromDict or propDict.get(
                "aceResourceInstance"
            ) is None
            else propDict["aceResourceInstance"])
        self.baseImageName = (
            None if not fromDict or propDict.get(
                "baseImageName"
            ) is None
            else propDict["baseImageName"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.datasets = (
            None if not fromDict or propDict.get(
                "datasets"
            ) is None
            else [ StorageResource(i)
            for i in propDict["datasets"] ])
        self.expTrackingURL = (
            None if not fromDict or propDict.get(
                "expTrackingURL"
            ) is None
            else propDict["expTrackingURL"])
        self.gpuActiveTime = (
            None if not fromDict or propDict.get(
                "gpuActiveTime"
            ) is None
            else propDict["gpuActiveTime"])
        self.gpuUtilization = (
            None if not fromDict or propDict.get(
                "gpuUtilization"
            ) is None
            else propDict["gpuUtilization"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.jobDefinition = (
            None if not fromDict or propDict.get(
                "jobDefinition"
            ) is None
            else propDict["jobDefinition"])
        self.jobOrder = (
            None if not fromDict or propDict.get(
                "jobOrder"
            ) is None
            else propDict["jobOrder"])
        self.jobPriority = (
            None if not fromDict or propDict.get(
                "jobPriority"
            ) is None
            else propDict["jobPriority"])
        self.jobStatus = (
            None if not fromDict or propDict.get(
                "jobStatus"
            ) is None
            else propDict["jobStatus"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.lastStatusUpdatedDate = (
            None if not fromDict or propDict.get(
                "lastStatusUpdatedDate"
            ) is None
            else propDict["lastStatusUpdatedDate"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.preemptionRequestedByUser = (
            None if not fromDict or propDict.get(
                "preemptionRequestedByUser"
            ) is None
            else propDict["preemptionRequestedByUser"])
        self.preemptionRequestedDate = (
            None if not fromDict or propDict.get(
                "preemptionRequestedDate"
            ) is None
            else propDict["preemptionRequestedDate"])
        self.resultset = (
            None if not fromDict or propDict.get(
                "resultset"
            ) is None
            else propDict["resultset"])
        self.resumeRequestedByUser = (
            None if not fromDict or propDict.get(
                "resumeRequestedByUser"
            ) is None
            else propDict["resumeRequestedByUser"])
        self.resumeRequestedDate = (
            None if not fromDict or propDict.get(
                "resumeRequestedDate"
            ) is None
            else propDict["resumeRequestedDate"])
        self.sparklines = (
            None if not fromDict or propDict.get(
                "sparklines"
            ) is None
            else [ MeasurementSeries(i)
            for i in propDict["sparklines"] ])
        self.submittedByUser = (
            None if not fromDict or propDict.get(
                "submittedByUser"
            ) is None
            else propDict["submittedByUser"])
        self.submittedByUserId = (
            None if not fromDict or propDict.get(
                "submittedByUserId"
            ) is None
            else propDict["submittedByUserId"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.tensorCoreActive = (
            None if not fromDict or propDict.get(
                "tensorCoreActive"
            ) is None
            else propDict["tensorCoreActive"])
        self.tensorCoreActiveWhileGpuActive = (
            None if not fromDict or propDict.get(
                "tensorCoreActiveWhileGpuActive"
            ) is None
            else propDict["tensorCoreActiveWhileGpuActive"])
        self.terminationReason = (
            None if not fromDict or propDict.get(
                "terminationReason"
            ) is None
            else propDict["terminationReason"])
        self.terminationRequestedByUser = (
            None if not fromDict or propDict.get(
                "terminationRequestedByUser"
            ) is None
            else propDict["terminationRequestedByUser"])
        self.terminationRequestedByUserName = (
            None if not fromDict or propDict.get(
                "terminationRequestedByUserName"
            ) is None
            else propDict["terminationRequestedByUserName"])
        self.terminationRequestedDate = (
            None if not fromDict or propDict.get(
                "terminationRequestedDate"
            ) is None
            else propDict["terminationRequestedDate"])
        self.workspaces = (
            None if not fromDict or propDict.get(
                "workspaces"
            ) is None
            else [ StorageResource(i)
            for i in propDict["workspaces"] ])

    @property
    def aceId(self):
        """long: id of ACE that the job belongs to"""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def aceName(self):
        """str: name of ACE that the job belongs to"""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def aceProvider(self):
        """ """
        return self._aceProvider

    @aceProvider.setter
    def aceProvider(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._aceProvider = value
        else:
            raise TypeError(
                'Property "aceProvider" of type "list<AceProviderEnum>" set t'
                'o wrong type'
            )

    @property
    def aceResourceInstance(self):
        """str: Name of instance of ace resources that the job used"""
        return self._aceResourceInstance

    @aceResourceInstance.setter
    def aceResourceInstance(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceResourceInstance = value
        else:
            raise TypeError(
                'Property "aceResourceInstance" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def baseImageName(self):
        """str: The base image name of this image"""
        return self._baseImageName

    @baseImageName.setter
    def baseImageName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._baseImageName = value
        else:
            raise TypeError(
                'Property "baseImageName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def createdDate(self):
        """str: Created date for this job"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def datasets(self):
        """list: List of datasets used for this job"""
        return self._datasets

    @datasets.setter
    def datasets(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._datasets = value
        else:
            raise TypeError(
                'Property "datasets" of type "list<StorageResource>" set to w'
                'rong type'
            )

    @property
    def expTrackingURL(self):
        """str: URL to navigate to third-party ML experimentation tracking sys
        tem like Weights&Biases, MLFlow, etc"""
        return self._expTrackingURL

    @expTrackingURL.setter
    def expTrackingURL(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._expTrackingURL = value
        else:
            raise TypeError(
                'Property "expTrackingURL" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def gpuActiveTime(self):
        """float: Total active time, in %, of GPU for the lifetime of the job
        """
        return self._gpuActiveTime

    @gpuActiveTime.setter
    def gpuActiveTime(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._gpuActiveTime = value
        else:
            raise TypeError(
                'Property "gpuActiveTime" of type "list<float>" set to wrong '
                'type'
            )

    @property
    def gpuUtilization(self):
        """float: Total utilization of GPU for the lifetime of the job (gpu ac
        tive)"""
        return self._gpuUtilization

    @gpuUtilization.setter
    def gpuUtilization(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._gpuUtilization = value
        else:
            raise TypeError(
                'Property "gpuUtilization" of type "list<float>" set to wrong'
                ' type'
            )

    @property
    def id(self):
        """long: the id of the job"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def jobDefinition(self):
        """JobDefinition: This object is populated when job request is submitt
        ed by the user"""
        return self._jobDefinition

    @jobDefinition.setter
    def jobDefinition(self, value):
        if value is not None and not isinstance(value, JobDefinition):
            value = JobDefinition(value)
        if (value is None) or isinstance(value, JobDefinition):
            self._jobDefinition = value
        else:
            raise TypeError(
                'Property "jobDefinition" of type "list<JobDefinition>" set t'
                'o wrong type'
            )

    @property
    def jobOrder(self):
        """int: The order of job. Job order is from 1 to 99. Default value is 
        50"""
        return self._jobOrder

    @jobOrder.setter
    def jobOrder(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._jobOrder = value
        else:
            raise TypeError(
                'Property "jobOrder" of type "list<int>" set to wrong type'
            )

    @property
    def jobPriority(self):
        """JobPriorityEnum: Indicates the job priority enum"""
        return self._jobPriority

    @jobPriority.setter
    def jobPriority(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._jobPriority = value
        else:
            raise TypeError(
                'Property "jobPriority" of type "list<JobPriorityEnum>" set t'
                'o wrong type'
            )

    @property
    def jobStatus(self):
        """JobStatus: updates about job status are coming from the nodes"""
        return self._jobStatus

    @jobStatus.setter
    def jobStatus(self, value):
        if value is not None and not isinstance(value, JobStatus):
            value = JobStatus(value)
        if (value is None) or isinstance(value, JobStatus):
            self._jobStatus = value
        else:
            raise TypeError(
                'Property "jobStatus" of type "list<JobStatus>" set to wrong '
                'type'
            )

    @property
    def labels(self):
        """JobLabels: All the labels specified by user or admin that descibe t
        his job"""
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, JobLabels):
            value = JobLabels(value)
        if (value is None) or isinstance(value, JobLabels):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<JobLabels>" set to wrong typ'
                'e'
            )

    @property
    def lastStatusUpdatedDate(self):
        """str: Last updated status date"""
        return self._lastStatusUpdatedDate

    @lastStatusUpdatedDate.setter
    def lastStatusUpdatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastStatusUpdatedDate = value
        else:
            raise TypeError(
                'Property "lastStatusUpdatedDate" of type "list<str>" set to '
                'wrong type'
            )

    @property
    def orgName(self):
        """str: name of org that the job belongs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def preemptionRequestedByUser(self):
        """long: ID of the user who requested preemption of this job"""
        return self._preemptionRequestedByUser

    @preemptionRequestedByUser.setter
    def preemptionRequestedByUser(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._preemptionRequestedByUser = value
        else:
            raise TypeError(
                'Property "preemptionRequestedByUser" of type "list<long>" se'
                't to wrong type'
            )

    @property
    def preemptionRequestedDate(self):
        """str: Date at which preemption of this job was requested"""
        return self._preemptionRequestedDate

    @preemptionRequestedDate.setter
    def preemptionRequestedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._preemptionRequestedDate = value
        else:
            raise TypeError(
                'Property "preemptionRequestedDate" of type "list<str>" set t'
                'o wrong type'
            )

    @property
    def resultset(self):
        """StorageResource: Generic Storage Resource for DL jobs."""
        return self._resultset

    @resultset.setter
    def resultset(self, value):
        if value is not None and not isinstance(value, StorageResource):
            value = StorageResource(value)
        if (value is None) or isinstance(value, StorageResource):
            self._resultset = value
        else:
            raise TypeError(
                'Property "resultset" of type "list<StorageResource>" set to '
                'wrong type'
            )

    @property
    def resumeRequestedByUser(self):
        """long: ID of the user who requested resumption of this job"""
        return self._resumeRequestedByUser

    @resumeRequestedByUser.setter
    def resumeRequestedByUser(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resumeRequestedByUser = value
        else:
            raise TypeError(
                'Property "resumeRequestedByUser" of type "list<long>" set to'
                ' wrong type'
            )

    @property
    def resumeRequestedDate(self):
        """str: Date at which resumption of this job was requested"""
        return self._resumeRequestedDate

    @resumeRequestedDate.setter
    def resumeRequestedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resumeRequestedDate = value
        else:
            raise TypeError(
                'Property "resumeRequestedDate" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def sparklines(self):
        """list: array of series within a measurement"""
        return self._sparklines

    @sparklines.setter
    def sparklines(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._sparklines = value
        else:
            raise TypeError(
                'Property "sparklines" of type "list<MeasurementSeries>" set '
                'to wrong type'
            )

    @property
    def submittedByUser(self):
        """str: user that submitted this job"""
        return self._submittedByUser

    @submittedByUser.setter
    def submittedByUser(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._submittedByUser = value
        else:
            raise TypeError(
                'Property "submittedByUser" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def submittedByUserId(self):
        """long: User id of the user that submitted this job"""
        return self._submittedByUserId

    @submittedByUserId.setter
    def submittedByUserId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._submittedByUserId = value
        else:
            raise TypeError(
                'Property "submittedByUserId" of type "list<long>" set to wro'
                'ng type'
            )

    @property
    def teamName(self):
        """str: name of team that the job belongs to"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def tensorCoreActive(self):
        """float: Total tensor core active for the lifetime of the job (TC act
        ive)"""
        return self._tensorCoreActive

    @tensorCoreActive.setter
    def tensorCoreActive(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._tensorCoreActive = value
        else:
            raise TypeError(
                'Property "tensorCoreActive" of type "list<float>" set to wro'
                'ng type'
            )

    @property
    def tensorCoreActiveWhileGpuActive(self):
        """float: Ratio of tensor core active to gpu active"""
        return self._tensorCoreActiveWhileGpuActive

    @tensorCoreActiveWhileGpuActive.setter
    def tensorCoreActiveWhileGpuActive(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._tensorCoreActiveWhileGpuActive = value
        else:
            raise TypeError(
                'Property "tensorCoreActiveWhileGpuActive" of type "list<floa'
                't>" set to wrong type'
            )

    @property
    def terminationReason(self):
        """str: Reason given by user or admin to terminate this job"""
        return self._terminationReason

    @terminationReason.setter
    def terminationReason(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._terminationReason = value
        else:
            raise TypeError(
                'Property "terminationReason" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def terminationRequestedByUser(self):
        """long: ID of the user who requested termination of this job"""
        return self._terminationRequestedByUser

    @terminationRequestedByUser.setter
    def terminationRequestedByUser(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._terminationRequestedByUser = value
        else:
            raise TypeError(
                'Property "terminationRequestedByUser" of type "list<long>" s'
                'et to wrong type'
            )

    @property
    def terminationRequestedByUserName(self):
        """str: Name of the user who requested termination of this job"""
        return self._terminationRequestedByUserName

    @terminationRequestedByUserName.setter
    def terminationRequestedByUserName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._terminationRequestedByUserName = value
        else:
            raise TypeError(
                'Property "terminationRequestedByUserName" of type "list<str>'
                '" set to wrong type'
            )

    @property
    def terminationRequestedDate(self):
        """str: Date at which termination of this job was requested"""
        return self._terminationRequestedDate

    @terminationRequestedDate.setter
    def terminationRequestedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._terminationRequestedDate = value
        else:
            raise TypeError(
                'Property "terminationRequestedDate" of type "list<str>" set '
                'to wrong type'
            )

    @property
    def workspaces(self):
        """list: List of workspaces used for this job"""
        return self._workspaces

    @workspaces.setter
    def workspaces(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._workspaces = value
        else:
            raise TypeError(
                'Property "workspaces" of type "list<StorageResource>" set to'
                ' wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._aceProvider is not None:
            result["aceProvider"] = \
                self._aceProvider
        if self._aceResourceInstance is not None:
            result["aceResourceInstance"] = \
                self._aceResourceInstance
        if self._baseImageName is not None:
            result["baseImageName"] = \
                self._baseImageName
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._datasets:
            result["datasets"] = [
                i.toDict() for i in self._datasets 
            ] if self._datasets else []
        if self._expTrackingURL is not None:
            result["expTrackingURL"] = \
                self._expTrackingURL
        if self._gpuActiveTime is not None:
            result["gpuActiveTime"] = \
                self._gpuActiveTime
        if self._gpuUtilization is not None:
            result["gpuUtilization"] = \
                self._gpuUtilization
        if self._id is not None:
            result["id"] = \
                self._id
        if self._jobDefinition:
            result["jobDefinition"] = \
                self._jobDefinition.toDict() if self._jobDefinition is not None else None
        if self._jobOrder is not None:
            result["jobOrder"] = \
                self._jobOrder
        if self._jobPriority is not None:
            result["jobPriority"] = \
                self._jobPriority
        if self._jobStatus:
            result["jobStatus"] = \
                self._jobStatus.toDict() if self._jobStatus is not None else None
        if self._labels:
            result["labels"] = \
                self._labels.toDict() if self._labels is not None else None
        if self._lastStatusUpdatedDate is not None:
            result["lastStatusUpdatedDate"] = \
                self._lastStatusUpdatedDate
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._preemptionRequestedByUser is not None:
            result["preemptionRequestedByUser"] = \
                self._preemptionRequestedByUser
        if self._preemptionRequestedDate is not None:
            result["preemptionRequestedDate"] = \
                self._preemptionRequestedDate
        if self._resultset:
            result["resultset"] = \
                self._resultset.toDict() if self._resultset is not None else None
        if self._resumeRequestedByUser is not None:
            result["resumeRequestedByUser"] = \
                self._resumeRequestedByUser
        if self._resumeRequestedDate is not None:
            result["resumeRequestedDate"] = \
                self._resumeRequestedDate
        if self._sparklines:
            result["sparklines"] = [
                i.toDict() for i in self._sparklines 
            ] if self._sparklines else []
        if self._submittedByUser is not None:
            result["submittedByUser"] = \
                self._submittedByUser
        if self._submittedByUserId is not None:
            result["submittedByUserId"] = \
                self._submittedByUserId
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._tensorCoreActive is not None:
            result["tensorCoreActive"] = \
                self._tensorCoreActive
        if self._tensorCoreActiveWhileGpuActive is not None:
            result["tensorCoreActiveWhileGpuActive"] = \
                self._tensorCoreActiveWhileGpuActive
        if self._terminationReason is not None:
            result["terminationReason"] = \
                self._terminationReason
        if self._terminationRequestedByUser is not None:
            result["terminationRequestedByUser"] = \
                self._terminationRequestedByUser
        if self._terminationRequestedByUserName is not None:
            result["terminationRequestedByUserName"] = \
                self._terminationRequestedByUserName
        if self._terminationRequestedDate is not None:
            result["terminationRequestedDate"] = \
                self._terminationRequestedDate
        if self._workspaces:
            result["workspaces"] = [
                i.toDict() for i in self._workspaces 
            ] if self._workspaces else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "Job.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._lastStatusUpdatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._lastStatusUpdatedDate)):
            raise ValueError(
                "Job.lastStatusUpdatedDate: " + str(self._lastStatusUpdatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._terminationRequestedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._terminationRequestedDate)):
            raise ValueError(
                "Job.terminationRequestedDate: " + str(self._terminationRequestedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._terminationReason is not None
            and
            len(self._terminationReason) > 80):
            raise ValueError(
                "Job.terminationReason: " + str(self._terminationReason) + 
                " doesnt match requirement: maxLength: 80")
        if (self._preemptionRequestedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._preemptionRequestedDate)):
            raise ValueError(
                "Job.preemptionRequestedDate: " + str(self._preemptionRequestedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._resumeRequestedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._resumeRequestedDate)):
            raise ValueError(
                "Job.resumeRequestedDate: " + str(self._resumeRequestedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._jobOrder is not None
            and
            self._jobOrder < 1):
            raise ValueError(
                "Job.jobOrder: " + str(self._jobOrder) + 
                " doesnt match requirement: minimum: 1")
        if (self._jobOrder is not None
            and
            self._jobOrder > 99):
            raise ValueError(
                "Job.jobOrder: " + str(self._jobOrder) + 
                " doesnt match requirement: maximum: 99")
        if (self._jobStatus is not None): self._jobStatus.isValid()
        if (self._jobDefinition is not None): self._jobDefinition.isValid()
        if (self._datasets is not None):
            for obj in self._datasets:
                if (obj is not None): obj.isValid()
        if (self._workspaces is not None):
            for obj in self._workspaces:
                if (obj is not None): obj.isValid()
        if (self._resultset is not None): self._resultset.isValid()
        if (self._sparklines is not None):
            for obj in self._sparklines:
                if (obj is not None): obj.isValid()
        if (self._labels is not None): self._labels.isValid()
        return True
    

