"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ServiceAccess(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accessLevels = (
            None if not fromDict or propDict.get(
                "accessLevels"
            ) is None
            else propDict["accessLevels"])
        self.service = (
            None if not fromDict or propDict.get(
                "service"
            ) is None
            else propDict["service"])

    @property
    def accessLevels(self):
        """list: List of access levels that this role allows"""
        return self._accessLevels

    @accessLevels.setter
    def accessLevels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._accessLevels = value
        else:
            raise TypeError(
                'Property "accessLevels" of type "list<AccessLevelsEnum>" set'
                ' to wrong type'
            )

    AccessLevelsEnum=["READ","WRITE","ADMIN","ADMIN_READ","OWNER","READ_SUBSCRIPTION_REQUEST","WRITE_SUBSCRIPTION_REQUEST",]
    str(repr(AccessLevelsEnum))  # Prevent optimizer removing enum


    @property
    def service(self):
        """ServiceEnum: Service that this role allows"""
        return self._service

    @service.setter
    def service(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._service = value
        else:
            raise TypeError(
                'Property "service" of type "list<ServiceEnum>" set to wrong '
                'type'
            )

    ServiceEnum=["DATASET","JOB","WORKSPACE","CONTAINER","MODEL","MODELSCRIPT","HELM","ORG","TEAM","USER","ACE","EGX","COLLECTION","FLEET_COMMAND_LOCATION","FLEET_COMMAND_APPLICATION","FLEET_COMMAND_DEPLOYMENT","FLEET_COMMAND_DASHBOARD","NVAIE","BASE_COMMAND_BANNER","SUBSCRIPTION_REQUEST","OMNIVERSE","RIVA_ENTERPRISE","PYM","TAO_STUDIO","CATALOG","LLM_CUSTOMIZATION_BASIC","LLM_INFERENCE_BASIC","LLM_CUSTOMIZATION_ADVANCED","LLM_INFERENCE_ADVANCED","LLM_INFORM","BIONEMO_INFERENCE","FORGE_ALLOCATION","FORGE_DASHBOARD","FORGE_OPERATING_SYSTEM","FORGE_RESOURCE","FORGE_SITE","FORGE_TENANT","FORGE_VPC","UCL_PROJECT","UCL_CLUSTER","CLOUD_TRUST","NVCF","CUOPT","SECRET","DATA_SERVICES","CHIPNEMO_INFERENCE","DGX_CLOUD","E2","PICASSO","MONAI","MET_SERVICE","MET_UI",]
    str(repr(ServiceEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._accessLevels is not None:
            result["accessLevels"] = \
                self._accessLevels
        if self._service is not None:
            result["service"] = \
                self._service
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

