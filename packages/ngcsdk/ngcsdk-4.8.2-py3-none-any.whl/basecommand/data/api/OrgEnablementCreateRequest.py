"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ProductEnablement import ProductEnablement

# Unused import over optimization prevention
str(repr(ProductEnablement))


if sys.version_info > (3,):
    long = int
    unicode = str

class OrgEnablementCreateRequest(object):
    """Request to create a new org Enablement."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.createSubscription = (
            None if not fromDict or propDict.get(
                "createSubscription"
            ) is None
            else propDict["createSubscription"])
        self.productEnablement = (
            None if not fromDict or propDict.get(
                "productEnablement"
            ) is None
            else propDict["productEnablement"])

    @property
    def createSubscription(self):
        """bool: False only if called by SbMS."""
        return self._createSubscription

    @createSubscription.setter
    def createSubscription(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._createSubscription = value
        else:
            raise TypeError(
                'Property "createSubscription" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def productEnablement(self):
        """ProductEnablement: Product Enablement"""
        return self._productEnablement

    @productEnablement.setter
    def productEnablement(self, value):
        if value is not None and not isinstance(value, ProductEnablement):
            value = ProductEnablement(value)
        if (value is None) or isinstance(value, ProductEnablement):
            self._productEnablement = value
        else:
            raise TypeError(
                'Property "productEnablement" of type "list<ProductEnablement'
                '>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._createSubscription is not None:
            result["createSubscription"] = \
                self._createSubscription
        if self._productEnablement:
            result["productEnablement"] = \
                self._productEnablement.toDict() if self._productEnablement is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._createSubscription is None:
            raise ValueError(
                "OrgEnablementCreateRequest.createSubscription doesnt match requirement:" 
                "required: True"
            )
        if self._productEnablement is None:
            raise ValueError(
                "OrgEnablementCreateRequest.productEnablement doesnt match requirement:" 
                "required: True"
            )
        if (self._productEnablement is not None): self._productEnablement.isValid()
        return True
    

