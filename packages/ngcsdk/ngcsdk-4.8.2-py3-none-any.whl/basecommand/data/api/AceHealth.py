"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AceHealth(object):
    """Describes the health of the ACE"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.percentage = (
            None if not fromDict or propDict.get(
                "percentage"
            ) is None
            else propDict["percentage"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def percentage(self):
        """float: The percentage of healthy node(s) in the ACE"""
        return self._percentage

    @percentage.setter
    def percentage(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._percentage = value
        else:
            raise TypeError(
                'Property "percentage" of type "list<float>" set to wrong typ'
                'e'
            )

    @property
    def status(self):
        """StatusEnum: Used to represent overall health status of the ACE"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<StatusEnum>" set to wrong ty'
                'pe'
            )

    StatusEnum=["UNKNOWN","OK","WARNING","ERROR",]
    str(repr(StatusEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._percentage is not None:
            result["percentage"] = \
                self._percentage
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

