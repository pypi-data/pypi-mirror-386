"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .WebSocket import WebSocket
from .NodeType import NodeTypeEnum
from .NodeStatus import NodeStatus

# Unused import over optimization prevention
str(repr(NodeTypeEnum))
str(repr(NodeStatus))
str(repr(WebSocket))


if sys.version_info > (3,):
    long = int
    unicode = str

class Node(object):
    """Information about the node"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.authClientId = (
            None if not fromDict or propDict.get(
                "authClientId"
            ) is None
            else propDict["authClientId"])
        self.createdBy = (
            None if not fromDict or propDict.get(
                "createdBy"
            ) is None
            else propDict["createdBy"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.eulaAccepted = (
            None if not fromDict or propDict.get(
                "eulaAccepted"
            ) is None
            else propDict["eulaAccepted"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.nodeStatus = (
            None if not fromDict or propDict.get(
                "nodeStatus"
            ) is None
            else propDict["nodeStatus"])
        self.nodeType = (
            None if not fromDict or propDict.get(
                "nodeType"
            ) is None
            else propDict["nodeType"])
        self.serialNumber = (
            None if not fromDict or propDict.get(
                "serialNumber"
            ) is None
            else propDict["serialNumber"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])
        self.webSocket = (
            None if not fromDict or propDict.get(
                "webSocket"
            ) is None
            else propDict["webSocket"])

    @property
    def authClientId(self):
        """str: DEPRECATED - Will be removed soon. Please use NodeCreateRespon
        se JSON."""
        return self._authClientId

    @authClientId.setter
    def authClientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._authClientId = value
        else:
            raise TypeError(
                'Property "authClientId" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def createdBy(self):
        """str: name of user that created the node"""
        return self._createdBy

    @createdBy.setter
    def createdBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdBy = value
        else:
            raise TypeError(
                'Property "createdBy" of type "list<str>" set to wrong type'
            )

    @property
    def createdDate(self):
        """ """
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def eulaAccepted(self):
        """bool: must be set to true to start using this node in the ACE"""
        return self._eulaAccepted

    @eulaAccepted.setter
    def eulaAccepted(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._eulaAccepted = value
        else:
            raise TypeError(
                'Property "eulaAccepted" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def name(self):
        """str: hostname for the node"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def nodeStatus(self):
        """NodeStatus: data in this object is populated from the node"""
        return self._nodeStatus

    @nodeStatus.setter
    def nodeStatus(self, value):
        if value is not None and not isinstance(value, NodeStatus):
            value = NodeStatus(value)
        if (value is None) or isinstance(value, NodeStatus):
            self._nodeStatus = value
        else:
            raise TypeError(
                'Property "nodeStatus" of type "list<NodeStatus>" set to wron'
                'g type'
            )

    @property
    def nodeType(self):
        """ """
        return self._nodeType

    @nodeType.setter
    def nodeType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._nodeType = value
        else:
            raise TypeError(
                'Property "nodeType" of type "list<NodeTypeEnum>" set to wron'
                'g type'
            )

    @property
    def serialNumber(self):
        """str: serial number of the server, required while registering the se
        rver"""
        return self._serialNumber

    @serialNumber.setter
    def serialNumber(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._serialNumber = value
        else:
            raise TypeError(
                'Property "serialNumber" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def updatedDate(self):
        """ """
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    @property
    def webSocket(self):
        """WebSocket: object used to show the status of the websocket between 
        node and the cloud"""
        return self._webSocket

    @webSocket.setter
    def webSocket(self, value):
        if value is not None and not isinstance(value, WebSocket):
            value = WebSocket(value)
        if (value is None) or isinstance(value, WebSocket):
            self._webSocket = value
        else:
            raise TypeError(
                'Property "webSocket" of type "list<WebSocket>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._authClientId is not None:
            result["authClientId"] = \
                self._authClientId
        if self._createdBy is not None:
            result["createdBy"] = \
                self._createdBy
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._eulaAccepted is not None:
            result["eulaAccepted"] = \
                self._eulaAccepted
        if self._name is not None:
            result["name"] = \
                self._name
        if self._nodeStatus:
            result["nodeStatus"] = \
                self._nodeStatus.toDict() if self._nodeStatus is not None else None
        if self._nodeType is not None:
            result["nodeType"] = \
                self._nodeType
        if self._serialNumber is not None:
            result["serialNumber"] = \
                self._serialNumber
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        if self._webSocket:
            result["webSocket"] = \
                self._webSocket.toDict() if self._webSocket is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._serialNumber is not None
            and
            len(self._serialNumber) < 8):
            raise ValueError(
                "Node.serialNumber: " + str(self._serialNumber) + 
                " doesnt match requirement: minLength: 8")
        if (self._serialNumber is not None
            and
            len(self._serialNumber) > 64):
            raise ValueError(
                "Node.serialNumber: " + str(self._serialNumber) + 
                " doesnt match requirement: maxLength: 64")
        if (self._serialNumber is not None
            and
            not re.match(
                r"^[a-zA-Z\d_-]*$",
                 self._serialNumber)):
            raise ValueError(
                "Node.serialNumber: " + str(self._serialNumber) + 
                " doesnt match requirement: pattern: ^[a-zA-Z\d_-]*$")
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "Node.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._name is not None
            and
            len(self._name) > 255):
            raise ValueError(
                "Node.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 255")
        if (self._name is not None
            and
            not re.match(
                r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A"
                "-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0"
                "-9])$",
                 self._name)):
            raise ValueError(
                "Node.name: " + str(self._name) + 
                " doesnt match requirement: pattern: ^(([a-zA-Z0-9]|[a-zA-Z0-"
                "9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9"
                "]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$")
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "Node.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._updatedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._updatedDate)):
            raise ValueError(
                "Node.updatedDate: " + str(self._updatedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._webSocket is not None): self._webSocket.isValid()
        if (self._nodeStatus is not None): self._nodeStatus.isValid()
        return True
    

