"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserMetadata(object):
    """Metadata information about the user."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.company = (
            None if not fromDict or propDict.get(
                "company"
            ) is None
            else propDict["company"])
        self.companyUrl = (
            None if not fromDict or propDict.get(
                "companyUrl"
            ) is None
            else propDict["companyUrl"])
        self.country = (
            None if not fromDict or propDict.get(
                "country"
            ) is None
            else propDict["country"])
        self.firstName = (
            None if not fromDict or propDict.get(
                "firstName"
            ) is None
            else propDict["firstName"])
        self.industry = (
            None if not fromDict or propDict.get(
                "industry"
            ) is None
            else propDict["industry"])
        self.interest = (
            None if not fromDict or propDict.get(
                "interest"
            ) is None
            else propDict["interest"])
        self.lastName = (
            None if not fromDict or propDict.get(
                "lastName"
            ) is None
            else propDict["lastName"])
        self.role = (
            None if not fromDict or propDict.get(
                "role"
            ) is None
            else propDict["role"])

    @property
    def company(self):
        """str: Name of the company"""
        return self._company

    @company.setter
    def company(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._company = value
        else:
            raise TypeError(
                'Property "company" of type "list<str>" set to wrong type'
            )

    @property
    def companyUrl(self):
        """str: Company URL"""
        return self._companyUrl

    @companyUrl.setter
    def companyUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._companyUrl = value
        else:
            raise TypeError(
                'Property "companyUrl" of type "list<str>" set to wrong type'
            )

    @property
    def country(self):
        """str: Country of the user"""
        return self._country

    @country.setter
    def country(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._country = value
        else:
            raise TypeError(
                'Property "country" of type "list<str>" set to wrong type'
            )

    @property
    def firstName(self):
        """str: User's first name"""
        return self._firstName

    @firstName.setter
    def firstName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._firstName = value
        else:
            raise TypeError(
                'Property "firstName" of type "list<str>" set to wrong type'
            )

    @property
    def industry(self):
        """str: Industry segment"""
        return self._industry

    @industry.setter
    def industry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._industry = value
        else:
            raise TypeError(
                'Property "industry" of type "list<str>" set to wrong type'
            )

    @property
    def interest(self):
        """list: List of development areas that user has interest"""
        return self._interest

    @interest.setter
    def interest(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._interest = value
        else:
            raise TypeError(
                'Property "interest" of type "list<str>" set to wrong type'
            )

    @property
    def lastName(self):
        """str: User's last name"""
        return self._lastName

    @lastName.setter
    def lastName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastName = value
        else:
            raise TypeError(
                'Property "lastName" of type "list<str>" set to wrong type'
            )

    @property
    def role(self):
        """str: Role of the user in the company"""
        return self._role

    @role.setter
    def role(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._role = value
        else:
            raise TypeError(
                'Property "role" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._company is not None:
            result["company"] = \
                self._company
        if self._companyUrl is not None:
            result["companyUrl"] = \
                self._companyUrl
        if self._country is not None:
            result["country"] = \
                self._country
        if self._firstName is not None:
            result["firstName"] = \
                self._firstName
        if self._industry is not None:
            result["industry"] = \
                self._industry
        if self._interest is not None:
            result["interest"] = \
                self._interest
        if self._lastName is not None:
            result["lastName"] = \
                self._lastName
        if self._role is not None:
            result["role"] = \
                self._role
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._company is not None
            and
            len(self._company) > 128):
            raise ValueError(
                "UserMetadata.company: " + str(self._company) + 
                " doesnt match requirement: maxLength: 128")
        if (self._company is not None
            and
            not re.match(
                r"^[\w\.\-\s]+$",
                 self._company)):
            raise ValueError(
                "UserMetadata.company: " + str(self._company) + 
                " doesnt match requirement: pattern: ^[\w\.\-\s]+$")
        if (self._firstName is not None
            and
            len(self._firstName) > 255):
            raise ValueError(
                "UserMetadata.firstName: " + str(self._firstName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._lastName is not None
            and
            len(self._lastName) > 255):
            raise ValueError(
                "UserMetadata.lastName: " + str(self._lastName) + 
                " doesnt match requirement: maxLength: 255")
        return True
    

