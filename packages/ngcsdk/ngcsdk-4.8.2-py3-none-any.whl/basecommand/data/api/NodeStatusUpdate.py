"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .NodeStatus import NodeStatus

# Unused import over optimization prevention
str(repr(NodeStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class NodeStatusUpdate(object):
    """This message is sent from the node in order to update node status"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.nodeStatus = (
            None if not fromDict or propDict.get(
                "nodeStatus"
            ) is None
            else propDict["nodeStatus"])
        self.serialNumber = (
            None if not fromDict or propDict.get(
                "serialNumber"
            ) is None
            else propDict["serialNumber"])

    @property
    def nodeStatus(self):
        """NodeStatus: data in this object is populated from the node"""
        return self._nodeStatus

    @nodeStatus.setter
    def nodeStatus(self, value):
        if value is not None and not isinstance(value, NodeStatus):
            value = NodeStatus(value)
        if (value is None) or isinstance(value, NodeStatus):
            self._nodeStatus = value
        else:
            raise TypeError(
                'Property "nodeStatus" of type "list<NodeStatus>" set to wron'
                'g type'
            )

    @property
    def serialNumber(self):
        """str: serial number of the appliance, required while registering the
         appliance"""
        return self._serialNumber

    @serialNumber.setter
    def serialNumber(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._serialNumber = value
        else:
            raise TypeError(
                'Property "serialNumber" of type "list<str>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._nodeStatus:
            result["nodeStatus"] = \
                self._nodeStatus.toDict() if self._nodeStatus is not None else None
        if self._serialNumber is not None:
            result["serialNumber"] = \
                self._serialNumber
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._serialNumber is None:
            raise ValueError(
                "NodeStatusUpdate.serialNumber doesnt match requirement:" 
                "required: True"
            )
        if (self._serialNumber is not None
            and
            len(self._serialNumber) < 8):
            raise ValueError(
                "NodeStatusUpdate.serialNumber: " + str(self._serialNumber) + 
                " doesnt match requirement: minLength: 8")
        if (self._serialNumber is not None
            and
            len(self._serialNumber) > 64):
            raise ValueError(
                "NodeStatusUpdate.serialNumber: " + str(self._serialNumber) + 
                " doesnt match requirement: maxLength: 64")
        if (self._serialNumber is not None
            and
            not re.match(
                r"^[a-zA-Z\d_-]*$",
                 self._serialNumber)):
            raise ValueError(
                "NodeStatusUpdate.serialNumber: " + str(self._serialNumber) + 
                " doesnt match requirement: pattern: ^[a-zA-Z\d_-]*$")
        if self._nodeStatus is None:
            raise ValueError(
                "NodeStatusUpdate.nodeStatus doesnt match requirement:" 
                "required: True"
            )
        if (self._nodeStatus is not None): self._nodeStatus.isValid()
        return True
    

