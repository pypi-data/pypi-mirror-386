"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class WebSocketReceipt(object):
    """Receipt sent to WebSocket server from WebSocket client"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.deliverySuccess = (
            None if not fromDict or propDict.get(
                "deliverySuccess"
            ) is None
            else propDict["deliverySuccess"])
        self.extraData = (
            None if not fromDict or propDict.get(
                "extraData"
            ) is None
            else propDict["extraData"])
        self.receiptNumber = (
            None if not fromDict or propDict.get(
                "receiptNumber"
            ) is None
            else propDict["receiptNumber"])

    @property
    def deliverySuccess(self):
        """bool: boolean response indicating whether message send by WSS reach
        ed client"""
        return self._deliverySuccess

    @deliverySuccess.setter
    def deliverySuccess(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._deliverySuccess = value
        else:
            raise TypeError(
                'Property "deliverySuccess" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def extraData(self):
        """str: Additional data sent by consumer of WebSocket client"""
        return self._extraData

    @extraData.setter
    def extraData(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._extraData = value
        else:
            raise TypeError(
                'Property "extraData" of type "list<str>" set to wrong type'
            )

    @property
    def receiptNumber(self):
        """str: Receipt number sent along with message wo be delivered by WebS
        ocket server"""
        return self._receiptNumber

    @receiptNumber.setter
    def receiptNumber(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._receiptNumber = value
        else:
            raise TypeError(
                'Property "receiptNumber" of type "list<str>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._deliverySuccess is not None:
            result["deliverySuccess"] = \
                self._deliverySuccess
        if self._extraData is not None:
            result["extraData"] = \
                self._extraData
        if self._receiptNumber is not None:
            result["receiptNumber"] = \
                self._receiptNumber
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

