"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SecretKeySpec import SecretKeySpec

# Unused import over optimization prevention
str(repr(SecretKeySpec))


if sys.version_info > (3,):
    long = int
    unicode = str

class SecretSpec(object):
    """Specification about the secret association to the job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allKeys = (
            None if not fromDict or propDict.get(
                "allKeys"
            ) is None
            else propDict["allKeys"])
        self.keysSpec = (
            None if not fromDict or propDict.get(
                "keysSpec"
            ) is None
            else [ SecretKeySpec(i)
            for i in propDict["keysSpec"] ])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def allKeys(self):
        """bool: Indicate that all the KV pairs associated to the secret will 
        be exported as environment variables with key name as env vari
        able name"""
        return self._allKeys

    @allKeys.setter
    def allKeys(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allKeys = value
        else:
            raise TypeError(
                'Property "allKeys" of type "list<bool>" set to wrong type'
            )

    @property
    def keysSpec(self):
        """list: List of {KeyName,EnvName} tuples associated to the secret"""
        return self._keysSpec

    @keysSpec.setter
    def keysSpec(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._keysSpec = value
        else:
            raise TypeError(
                'Property "keysSpec" of type "list<SecretKeySpec>" set to wro'
                'ng type'
            )

    @property
    def name(self):
        """str: Secret name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._allKeys is not None:
            result["allKeys"] = \
                self._allKeys
        if self._keysSpec:
            result["keysSpec"] = [
                i.toDict() for i in self._keysSpec 
            ] if self._keysSpec else []
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "SecretSpec.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "SecretSpec.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._keysSpec is not None):
            for obj in self._keysSpec:
                if (obj is not None): obj.isValid()
        return True
    

