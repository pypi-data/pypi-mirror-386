"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .TargetSystemUserIdentifier import TargetSystemUserIdentifier
from .Team import Team
from .RoleType import RoleTypeEnum
from .Organization import Organization

# Unused import over optimization prevention
str(repr(Team))
str(repr(Organization))
str(repr(RoleTypeEnum))
str(repr(TargetSystemUserIdentifier))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserRole(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.org = (
            None if not fromDict or propDict.get(
                "org"
            ) is None
            else propDict["org"])
        self.orgRoles = (
            None if not fromDict or propDict.get(
                "orgRoles"
            ) is None
            else propDict["orgRoles"])
        self.roleTypes = (
            None if not fromDict or propDict.get(
                "roleTypes"
            ) is None
            else propDict["roleTypes"])
        self.targetSystemUserIdentifier = (
            None if not fromDict or propDict.get(
                "targetSystemUserIdentifier"
            ) is None
            else propDict["targetSystemUserIdentifier"])
        self.team = (
            None if not fromDict or propDict.get(
                "team"
            ) is None
            else propDict["team"])
        self.teamRoles = (
            None if not fromDict or propDict.get(
                "teamRoles"
            ) is None
            else propDict["teamRoles"])

    @property
    def org(self):
        """Organization: Information about the Organization"""
        return self._org

    @org.setter
    def org(self, value):
        if value is not None and not isinstance(value, Organization):
            value = Organization(value)
        if (value is None) or isinstance(value, Organization):
            self._org = value
        else:
            raise TypeError(
                'Property "org" of type "list<Organization>" set to wrong typ'
                'e'
            )

    @property
    def orgRoles(self):
        """list: List of org role types that the user have"""
        return self._orgRoles

    @orgRoles.setter
    def orgRoles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._orgRoles = value
        else:
            raise TypeError(
                'Property "orgRoles" of type "list<RoleTypeEnum>" set to wron'
                'g type'
            )

    @property
    def roleTypes(self):
        """list: DEPRECATED - List of role types that the user have"""
        return self._roleTypes

    @roleTypes.setter
    def roleTypes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._roleTypes = value
        else:
            raise TypeError(
                'Property "roleTypes" of type "list<RoleTypeEnum>" set to wro'
                'ng type'
            )

    @property
    def targetSystemUserIdentifier(self):
        """TargetSystemUserIdentifier: Information about the user who is attem
        pting to run the job"""
        return self._targetSystemUserIdentifier

    @targetSystemUserIdentifier.setter
    def targetSystemUserIdentifier(self, value):
        if value is not None and not isinstance(value, TargetSystemUserIdentifier):
            value = TargetSystemUserIdentifier(value)
        if (value is None) or isinstance(value, TargetSystemUserIdentifier):
            self._targetSystemUserIdentifier = value
        else:
            raise TypeError(
                'Property "targetSystemUserIdentifier" of type "list<TargetSy'
                'stemUserIdentifier>" set to wrong type'
            )

    @property
    def team(self):
        """Team: Information about the team"""
        return self._team

    @team.setter
    def team(self, value):
        if value is not None and not isinstance(value, Team):
            value = Team(value)
        if (value is None) or isinstance(value, Team):
            self._team = value
        else:
            raise TypeError(
                'Property "team" of type "list<Team>" set to wrong type'
            )

    @property
    def teamRoles(self):
        """list: List of team role types that the user have"""
        return self._teamRoles

    @teamRoles.setter
    def teamRoles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._teamRoles = value
        else:
            raise TypeError(
                'Property "teamRoles" of type "list<RoleTypeEnum>" set to wro'
                'ng type'
            )

    def toDict(self):
        result = {}
        if self._org:
            result["org"] = \
                self._org.toDict() if self._org is not None else None
        if self._orgRoles is not None:
            result["orgRoles"] = \
                self._orgRoles
        if self._roleTypes is not None:
            result["roleTypes"] = \
                self._roleTypes
        if self._targetSystemUserIdentifier:
            result["targetSystemUserIdentifier"] = \
                self._targetSystemUserIdentifier.toDict() if self._targetSystemUserIdentifier is not None else None
        if self._team:
            result["team"] = \
                self._team.toDict() if self._team is not None else None
        if self._teamRoles is not None:
            result["teamRoles"] = \
                self._teamRoles
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._org is not None): self._org.isValid()
        if (self._team is not None): self._team.isValid()
        if (self._targetSystemUserIdentifier is not None): self._targetSystemUserIdentifier.isValid()
        return True
    

