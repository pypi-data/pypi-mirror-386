"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .DatasetStatusEnum import DatasetStatusEnum

# Unused import over optimization prevention
str(repr(DatasetStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class DatasetSimplified(object):
    """Dataset for DL jobs."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.aceStorageServiceUrl = (
            None if not fromDict or propDict.get(
                "aceStorageServiceUrl"
            ) is None
            else propDict["aceStorageServiceUrl"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.creatorUserId = (
            None if not fromDict or propDict.get(
                "creatorUserId"
            ) is None
            else propDict["creatorUserId"])
        self.datasetUuid = (
            None if not fromDict or propDict.get(
                "datasetUuid"
            ) is None
            else propDict["datasetUuid"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.fileDownloadUrl = (
            None if not fromDict or propDict.get(
                "fileDownloadUrl"
            ) is None
            else propDict["fileDownloadUrl"])
        self.fileUploadUrl = (
            None if not fromDict or propDict.get(
                "fileUploadUrl"
            ) is None
            else propDict["fileUploadUrl"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.lastAccessDate = (
            None if not fromDict or propDict.get(
                "lastAccessDate"
            ) is None
            else propDict["lastAccessDate"])
        self.modifiedDate = (
            None if not fromDict or propDict.get(
                "modifiedDate"
            ) is None
            else propDict["modifiedDate"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.nfsRoot = (
            None if not fromDict or propDict.get(
                "nfsRoot"
            ) is None
            else propDict["nfsRoot"])
        self.nfsShare = (
            None if not fromDict or propDict.get(
                "nfsShare"
            ) is None
            else propDict["nfsShare"])
        self.owned = (
            None if not fromDict or propDict.get(
                "owned"
            ) is None
            else propDict["owned"])
        self.prepopulated = (
            None if not fromDict or propDict.get(
                "prepopulated"
            ) is None
            else propDict["prepopulated"])
        self.shared = (
            None if not fromDict or propDict.get(
                "shared"
            ) is None
            else propDict["shared"])
        self.size = (
            None if not fromDict or propDict.get(
                "size"
            ) is None
            else propDict["size"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.token = (
            None if not fromDict or propDict.get(
                "token"
            ) is None
            else propDict["token"])
        self.totalFiles = (
            None if not fromDict or propDict.get(
                "totalFiles"
            ) is None
            else propDict["totalFiles"])

    @property
    def aceId(self):
        """long: Id of the ACE to which the dataset is local."""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def aceName(self):
        """str: Name of the ACE to which the dataset is local."""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def aceStorageServiceUrl(self):
        """str: URL of the storage service of given ACE"""
        return self._aceStorageServiceUrl

    @aceStorageServiceUrl.setter
    def aceStorageServiceUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceStorageServiceUrl = value
        else:
            raise TypeError(
                'Property "aceStorageServiceUrl" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def createdDate(self):
        """str: Dataset creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def creatorUserId(self):
        """long: User ID of the creator of the dataset."""
        return self._creatorUserId

    @creatorUserId.setter
    def creatorUserId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._creatorUserId = value
        else:
            raise TypeError(
                'Property "creatorUserId" of type "list<long>" set to wrong t'
                'ype'
            )

    @property
    def datasetUuid(self):
        """str: Dataset unique UUID."""
        return self._datasetUuid

    @datasetUuid.setter
    def datasetUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._datasetUuid = value
        else:
            raise TypeError(
                'Property "datasetUuid" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Dataset description."""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def fileDownloadUrl(self):
        """str: Base URL for file download from this dataset"""
        return self._fileDownloadUrl

    @fileDownloadUrl.setter
    def fileDownloadUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fileDownloadUrl = value
        else:
            raise TypeError(
                'Property "fileDownloadUrl" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def fileUploadUrl(self):
        """str: Base URL for file upload in this dataset"""
        return self._fileUploadUrl

    @fileUploadUrl.setter
    def fileUploadUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fileUploadUrl = value
        else:
            raise TypeError(
                'Property "fileUploadUrl" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def id(self):
        """long: Dataset unique ID."""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def lastAccessDate(self):
        """str: Date when dataset was last accessed in ISO-8601 format"""
        return self._lastAccessDate

    @lastAccessDate.setter
    def lastAccessDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastAccessDate = value
        else:
            raise TypeError(
                'Property "lastAccessDate" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def modifiedDate(self):
        """str: Date when dataset was last modified in ISO-8601 format"""
        return self._modifiedDate

    @modifiedDate.setter
    def modifiedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._modifiedDate = value
        else:
            raise TypeError(
                'Property "modifiedDate" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def name(self):
        """str: Name of the dataset."""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def nfsRoot(self):
        """str: Path on the NFS share that indicates root directory for the da
        taset"""
        return self._nfsRoot

    @nfsRoot.setter
    def nfsRoot(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nfsRoot = value
        else:
            raise TypeError(
                'Property "nfsRoot" of type "list<str>" set to wrong type'
            )

    @property
    def nfsShare(self):
        """str: Location of the NFS share"""
        return self._nfsShare

    @nfsShare.setter
    def nfsShare(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nfsShare = value
        else:
            raise TypeError(
                'Property "nfsShare" of type "list<str>" set to wrong type'
            )

    @property
    def owned(self):
        """bool: Indicates whether the dataset has been created by the current
         user"""
        return self._owned

    @owned.setter
    def owned(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._owned = value
        else:
            raise TypeError(
                'Property "owned" of type "list<bool>" set to wrong type'
            )

    @property
    def prepopulated(self):
        """str: Empty means not prepopulated anywhere. Contain e.g. 'prd0' or 
        'prd0,prd2' or 'all ace', if a roll out is done in stages."""
        return self._prepopulated

    @prepopulated.setter
    def prepopulated(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._prepopulated = value
        else:
            raise TypeError(
                'Property "prepopulated" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def shared(self):
        """bool: Indicates whether or not the dataset has been shared with eit
        her a team or an organization."""
        return self._shared

    @shared.setter
    def shared(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._shared = value
        else:
            raise TypeError(
                'Property "shared" of type "list<bool>" set to wrong type'
            )

    @property
    def size(self):
        """long: Size of the dataset in MB."""
        return self._size

    @size.setter
    def size(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._size = value
        else:
            raise TypeError(
                'Property "size" of type "list<long>" set to wrong type'
            )

    @property
    def status(self):
        """DatasetStatusEnum: Indicates the current status of a dataset."""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<DatasetStatusEnum>" set to w'
                'rong type'
            )

    @property
    def token(self):
        """str: Token to be used with file upload/download operations"""
        return self._token

    @token.setter
    def token(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._token = value
        else:
            raise TypeError(
                'Property "token" of type "list<str>" set to wrong type'
            )

    @property
    def totalFiles(self):
        """long: Number of files in this dataset."""
        return self._totalFiles

    @totalFiles.setter
    def totalFiles(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalFiles = value
        else:
            raise TypeError(
                'Property "totalFiles" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._aceStorageServiceUrl is not None:
            result["aceStorageServiceUrl"] = \
                self._aceStorageServiceUrl
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._creatorUserId is not None:
            result["creatorUserId"] = \
                self._creatorUserId
        if self._datasetUuid is not None:
            result["datasetUuid"] = \
                self._datasetUuid
        if self._description is not None:
            result["description"] = \
                self._description
        if self._fileDownloadUrl is not None:
            result["fileDownloadUrl"] = \
                self._fileDownloadUrl
        if self._fileUploadUrl is not None:
            result["fileUploadUrl"] = \
                self._fileUploadUrl
        if self._id is not None:
            result["id"] = \
                self._id
        if self._lastAccessDate is not None:
            result["lastAccessDate"] = \
                self._lastAccessDate
        if self._modifiedDate is not None:
            result["modifiedDate"] = \
                self._modifiedDate
        if self._name is not None:
            result["name"] = \
                self._name
        if self._nfsRoot is not None:
            result["nfsRoot"] = \
                self._nfsRoot
        if self._nfsShare is not None:
            result["nfsShare"] = \
                self._nfsShare
        if self._owned is not None:
            result["owned"] = \
                self._owned
        if self._prepopulated is not None:
            result["prepopulated"] = \
                self._prepopulated
        if self._shared is not None:
            result["shared"] = \
                self._shared
        if self._size is not None:
            result["size"] = \
                self._size
        if self._status is not None:
            result["status"] = \
                self._status
        if self._token is not None:
            result["token"] = \
                self._token
        if self._totalFiles is not None:
            result["totalFiles"] = \
                self._totalFiles
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._aceId is None:
            raise ValueError(
                "DatasetSimplified.aceId doesnt match requirement:" 
                "required: True"
            )
        if (self._aceId is not None
            and
            self._aceId < 1):
            raise ValueError(
                "DatasetSimplified.aceId: " + str(self._aceId) + 
                " doesnt match requirement: minimum: 1")
        if self._name is None:
            raise ValueError(
                "DatasetSimplified.name doesnt match requirement:" 
                "required: True"
            )
        if (self._createdDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._createdDate)):
            raise ValueError(
                "DatasetSimplified.createdDate: " + str(self._createdDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._modifiedDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._modifiedDate)):
            raise ValueError(
                "DatasetSimplified.modifiedDate: " + str(self._modifiedDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._lastAccessDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._lastAccessDate)):
            raise ValueError(
                "DatasetSimplified.lastAccessDate: " + str(self._lastAccessDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        return True
    

