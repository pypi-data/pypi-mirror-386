"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobDefinition import JobDefinition

# Unused import over optimization prevention
str(repr(JobDefinition))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobTemplate(object):
    """object that describes a template that can be used to submit job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.jobDefinition = (
            None if not fromDict or propDict.get(
                "jobDefinition"
            ) is None
            else propDict["jobDefinition"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])

    @property
    def aceName(self):
        """str: name of ace that the job belongs to"""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: description of this job template"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """str: Id of this job template"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def jobDefinition(self):
        """JobDefinition: This object is populated when job request is submitt
        ed by the user"""
        return self._jobDefinition

    @jobDefinition.setter
    def jobDefinition(self, value):
        if value is not None and not isinstance(value, JobDefinition):
            value = JobDefinition(value)
        if (value is None) or isinstance(value, JobDefinition):
            self._jobDefinition = value
        else:
            raise TypeError(
                'Property "jobDefinition" of type "list<JobDefinition>" set t'
                'o wrong type'
            )

    @property
    def name(self):
        """str: Name of this job template"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: name of org that the job belongs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def teamName(self):
        """str: name of team that the job belongs to"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._description is not None:
            result["description"] = \
                self._description
        if self._id is not None:
            result["id"] = \
                self._id
        if self._jobDefinition:
            result["jobDefinition"] = \
                self._jobDefinition.toDict() if self._jobDefinition is not None else None
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._jobDefinition is not None): self._jobDefinition.isValid()
        return True
    

