"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class OrgAdminUserCreatedEvent(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.actorStarfleetId = (
            None if not fromDict or propDict.get(
                "actorStarfleetId"
            ) is None
            else propDict["actorStarfleetId"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.userAuthClientId = (
            None if not fromDict or propDict.get(
                "userAuthClientId"
            ) is None
            else propDict["userAuthClientId"])

    @property
    def actorStarfleetId(self):
        """str: StarfleetId of actor"""
        return self._actorStarfleetId

    @actorStarfleetId.setter
    def actorStarfleetId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._actorStarfleetId = value
        else:
            raise TypeError(
                'Property "actorStarfleetId" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def orgName(self):
        """str: Unique identifier of the org"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def userAuthClientId(self):
        """str: Unique Auth ClientId"""
        return self._userAuthClientId

    @userAuthClientId.setter
    def userAuthClientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._userAuthClientId = value
        else:
            raise TypeError(
                'Property "userAuthClientId" of type "list<str>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._actorStarfleetId is not None:
            result["actorStarfleetId"] = \
                self._actorStarfleetId
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._userAuthClientId is not None:
            result["userAuthClientId"] = \
                self._userAuthClientId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

