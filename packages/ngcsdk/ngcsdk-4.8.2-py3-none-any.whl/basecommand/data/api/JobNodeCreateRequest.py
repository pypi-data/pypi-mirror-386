"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobDefinition import JobDefinition
from .TargetSystemUserIdentifier import TargetSystemUserIdentifier
from .Secret import Secret
from .JobPriorityEnum import JobPriorityEnum
from .SCPJobDetails import SCPJobDetails

# Unused import over optimization prevention
str(repr(JobDefinition))
str(repr(JobPriorityEnum))
str(repr(TargetSystemUserIdentifier))
str(repr(SCPJobDetails))
str(repr(Secret))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobNodeCreateRequest(object):
    """object used to send request from cloud to node to create a job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.authClientId = (
            None if not fromDict or propDict.get(
                "authClientId"
            ) is None
            else propDict["authClientId"])
        self.authClientSecret = (
            None if not fromDict or propDict.get(
                "authClientSecret"
            ) is None
            else propDict["authClientSecret"])
        self.dockerToken = (
            None if not fromDict or propDict.get(
                "dockerToken"
            ) is None
            else propDict["dockerToken"])
        self.encryptedUserSecrets = (
            None if not fromDict or propDict.get(
                "encryptedUserSecrets"
            ) is None
            else [ Secret(i)
            for i in propDict["encryptedUserSecrets"] ])
        self.jobDefinition = (
            None if not fromDict or propDict.get(
                "jobDefinition"
            ) is None
            else propDict["jobDefinition"])
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])
        self.jobOrder = (
            None if not fromDict or propDict.get(
                "jobOrder"
            ) is None
            else propDict["jobOrder"])
        self.jobPriority = (
            None if not fromDict or propDict.get(
                "jobPriority"
            ) is None
            else propDict["jobPriority"])
        self.scpJobDetails = (
            None if not fromDict or propDict.get(
                "scpJobDetails"
            ) is None
            else propDict["scpJobDetails"])
        self.targetSystemUserIdentifier = (
            None if not fromDict or propDict.get(
                "targetSystemUserIdentifier"
            ) is None
            else propDict["targetSystemUserIdentifier"])

    @property
    def authClientId(self):
        """str: Client ID to be used for this Job"""
        return self._authClientId

    @authClientId.setter
    def authClientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._authClientId = value
        else:
            raise TypeError(
                'Property "authClientId" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def authClientSecret(self):
        """str: Client Secret to be used for this Job"""
        return self._authClientSecret

    @authClientSecret.setter
    def authClientSecret(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._authClientSecret = value
        else:
            raise TypeError(
                'Property "authClientSecret" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def dockerToken(self):
        """str: docker token that is associated with the user requesting a job
        """
        return self._dockerToken

    @dockerToken.setter
    def dockerToken(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dockerToken = value
        else:
            raise TypeError(
                'Property "dockerToken" of type "list<str>" set to wrong type'
            )

    @property
    def encryptedUserSecrets(self):
        """list: List of encrypted user secrets associated to the job"""
        return self._encryptedUserSecrets

    @encryptedUserSecrets.setter
    def encryptedUserSecrets(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._encryptedUserSecrets = value
        else:
            raise TypeError(
                'Property "encryptedUserSecrets" of type "list<Secret>" set t'
                'o wrong type'
            )

    @property
    def jobDefinition(self):
        """JobDefinition: This object is populated when job request is submitt
        ed by the user"""
        return self._jobDefinition

    @jobDefinition.setter
    def jobDefinition(self, value):
        if value is not None and not isinstance(value, JobDefinition):
            value = JobDefinition(value)
        if (value is None) or isinstance(value, JobDefinition):
            self._jobDefinition = value
        else:
            raise TypeError(
                'Property "jobDefinition" of type "list<JobDefinition>" set t'
                'o wrong type'
            )

    @property
    def jobId(self):
        """long: unique identifier of the job"""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<long>" set to wrong type'
            )

    @property
    def jobOrder(self):
        """int: The order of job. Job order is from 1 to 99. Default value is 
        50"""
        return self._jobOrder

    @jobOrder.setter
    def jobOrder(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._jobOrder = value
        else:
            raise TypeError(
                'Property "jobOrder" of type "list<int>" set to wrong type'
            )

    @property
    def jobPriority(self):
        """JobPriorityEnum: Indicates the job priority enum"""
        return self._jobPriority

    @jobPriority.setter
    def jobPriority(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._jobPriority = value
        else:
            raise TypeError(
                'Property "jobPriority" of type "list<JobPriorityEnum>" set t'
                'o wrong type'
            )

    @property
    def scpJobDetails(self):
        """SCPJobDetails: Metadata used by storage control plane during base c
        ommand job submission"""
        return self._scpJobDetails

    @scpJobDetails.setter
    def scpJobDetails(self, value):
        if value is not None and not isinstance(value, SCPJobDetails):
            value = SCPJobDetails(value)
        if (value is None) or isinstance(value, SCPJobDetails):
            self._scpJobDetails = value
        else:
            raise TypeError(
                'Property "scpJobDetails" of type "list<SCPJobDetails>" set t'
                'o wrong type'
            )

    @property
    def targetSystemUserIdentifier(self):
        """TargetSystemUserIdentifier: Information about the user who is attem
        pting to run the job"""
        return self._targetSystemUserIdentifier

    @targetSystemUserIdentifier.setter
    def targetSystemUserIdentifier(self, value):
        if value is not None and not isinstance(value, TargetSystemUserIdentifier):
            value = TargetSystemUserIdentifier(value)
        if (value is None) or isinstance(value, TargetSystemUserIdentifier):
            self._targetSystemUserIdentifier = value
        else:
            raise TypeError(
                'Property "targetSystemUserIdentifier" of type "list<TargetSy'
                'stemUserIdentifier>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._authClientId is not None:
            result["authClientId"] = \
                self._authClientId
        if self._authClientSecret is not None:
            result["authClientSecret"] = \
                self._authClientSecret
        if self._dockerToken is not None:
            result["dockerToken"] = \
                self._dockerToken
        if self._encryptedUserSecrets:
            result["encryptedUserSecrets"] = [
                i.toDict() for i in self._encryptedUserSecrets 
            ] if self._encryptedUserSecrets else []
        if self._jobDefinition:
            result["jobDefinition"] = \
                self._jobDefinition.toDict() if self._jobDefinition is not None else None
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        if self._jobOrder is not None:
            result["jobOrder"] = \
                self._jobOrder
        if self._jobPriority is not None:
            result["jobPriority"] = \
                self._jobPriority
        if self._scpJobDetails:
            result["scpJobDetails"] = \
                self._scpJobDetails.toDict() if self._scpJobDetails is not None else None
        if self._targetSystemUserIdentifier:
            result["targetSystemUserIdentifier"] = \
                self._targetSystemUserIdentifier.toDict() if self._targetSystemUserIdentifier is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._jobId is None:
            raise ValueError(
                "JobNodeCreateRequest.jobId doesnt match requirement:" 
                "required: True"
            )
        if self._dockerToken is None:
            raise ValueError(
                "JobNodeCreateRequest.dockerToken doesnt match requirement:" 
                "required: True"
            )
        if (self._jobOrder is not None
            and
            self._jobOrder < 1):
            raise ValueError(
                "JobNodeCreateRequest.jobOrder: " + str(self._jobOrder) + 
                " doesnt match requirement: minimum: 1")
        if (self._jobOrder is not None
            and
            self._jobOrder > 99):
            raise ValueError(
                "JobNodeCreateRequest.jobOrder: " + str(self._jobOrder) + 
                " doesnt match requirement: maximum: 99")
        if (self._targetSystemUserIdentifier is not None): self._targetSystemUserIdentifier.isValid()
        if (self._encryptedUserSecrets is not None):
            for obj in self._encryptedUserSecrets:
                if (obj is not None): obj.isValid()
        if (self._scpJobDetails is not None): self._scpJobDetails.isValid()
        if (self._jobDefinition is not None): self._jobDefinition.isValid()
        return True
    

