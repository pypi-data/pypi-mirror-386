"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .JobStatus import JobStatus
from .Replica import Replica

# Unused import over optimization prevention
str(repr(RequestStatus))
str(repr(JobStatus))
str(repr(Replica))


if sys.version_info > (3,):
    long = int
    unicode = str

class ReplicaResponse(object):
    """Information about replica for a Job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.replica = (
            None if not fromDict or propDict.get(
                "replica"
            ) is None
            else propDict["replica"])
        self.replicaStatusHistory = (
            None if not fromDict or propDict.get(
                "replicaStatusHistory"
            ) is None
            else [ JobStatus(i)
            for i in propDict["replicaStatusHistory"] ])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def replica(self):
        """Replica: object that describes submitted job"""
        return self._replica

    @replica.setter
    def replica(self, value):
        if value is not None and not isinstance(value, Replica):
            value = Replica(value)
        if (value is None) or isinstance(value, Replica):
            self._replica = value
        else:
            raise TypeError(
                'Property "replica" of type "list<Replica>" set to wrong type'
            )

    @property
    def replicaStatusHistory(self):
        """list: history of replica status, sorted by most recent status first
        """
        return self._replicaStatusHistory

    @replicaStatusHistory.setter
    def replicaStatusHistory(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._replicaStatusHistory = value
        else:
            raise TypeError(
                'Property "replicaStatusHistory" of type "list<JobStatus>" se'
                't to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._replica:
            result["replica"] = \
                self._replica.toDict() if self._replica is not None else None
        if self._replicaStatusHistory:
            result["replicaStatusHistory"] = [
                i.toDict() for i in self._replicaStatusHistory 
            ] if self._replicaStatusHistory else []
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._replica is not None): self._replica.isValid()
        if (self._replicaStatusHistory is not None):
            for obj in self._replicaStatusHistory:
                if (obj is not None): obj.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

