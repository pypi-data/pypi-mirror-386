"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .StorageEngineTypeEnum import StorageEngineTypeEnum

# Unused import over optimization prevention
str(repr(StorageEngineTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class AceStorageInfo(object):
    """ACE storage related information"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.bytesDatasetsUsage = (
            None if not fromDict or propDict.get(
                "bytesDatasetsUsage"
            ) is None
            else propDict["bytesDatasetsUsage"])
        self.bytesResultsetsUsage = (
            None if not fromDict or propDict.get(
                "bytesResultsetsUsage"
            ) is None
            else propDict["bytesResultsetsUsage"])
        self.bytesTotalCapacity = (
            None if not fromDict or propDict.get(
                "bytesTotalCapacity"
            ) is None
            else propDict["bytesTotalCapacity"])
        self.bytesUsed = (
            None if not fromDict or propDict.get(
                "bytesUsed"
            ) is None
            else propDict["bytesUsed"])
        self.bytesWorkspacesUsage = (
            None if not fromDict or propDict.get(
                "bytesWorkspacesUsage"
            ) is None
            else propDict["bytesWorkspacesUsage"])
        self.datasetsCount = (
            None if not fromDict or propDict.get(
                "datasetsCount"
            ) is None
            else propDict["datasetsCount"])
        self.resultsetsCount = (
            None if not fromDict or propDict.get(
                "resultsetsCount"
            ) is None
            else propDict["resultsetsCount"])
        self.storageServiceDest = (
            None if not fromDict or propDict.get(
                "storageServiceDest"
            ) is None
            else propDict["storageServiceDest"])
        self.storageType = (
            None if not fromDict or propDict.get(
                "storageType"
            ) is None
            else propDict["storageType"])
        self.workspacesCount = (
            None if not fromDict or propDict.get(
                "workspacesCount"
            ) is None
            else propDict["workspacesCount"])

    @property
    def bytesDatasetsUsage(self):
        """long: Space used by datasets in bytes"""
        return self._bytesDatasetsUsage

    @bytesDatasetsUsage.setter
    def bytesDatasetsUsage(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._bytesDatasetsUsage = value
        else:
            raise TypeError(
                'Property "bytesDatasetsUsage" of type "list<long>" set to wr'
                'ong type'
            )

    @property
    def bytesResultsetsUsage(self):
        """long: Space used by resultsets in bytes"""
        return self._bytesResultsetsUsage

    @bytesResultsetsUsage.setter
    def bytesResultsetsUsage(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._bytesResultsetsUsage = value
        else:
            raise TypeError(
                'Property "bytesResultsetsUsage" of type "list<long>" set to '
                'wrong type'
            )

    @property
    def bytesTotalCapacity(self):
        """long: Total size of the storage engine in bytes"""
        return self._bytesTotalCapacity

    @bytesTotalCapacity.setter
    def bytesTotalCapacity(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._bytesTotalCapacity = value
        else:
            raise TypeError(
                'Property "bytesTotalCapacity" of type "list<long>" set to wr'
                'ong type'
            )

    @property
    def bytesUsed(self):
        """long: Total space used in bytes"""
        return self._bytesUsed

    @bytesUsed.setter
    def bytesUsed(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._bytesUsed = value
        else:
            raise TypeError(
                'Property "bytesUsed" of type "list<long>" set to wrong type'
            )

    @property
    def bytesWorkspacesUsage(self):
        """long: Space used by workspaces in bytes"""
        return self._bytesWorkspacesUsage

    @bytesWorkspacesUsage.setter
    def bytesWorkspacesUsage(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._bytesWorkspacesUsage = value
        else:
            raise TypeError(
                'Property "bytesWorkspacesUsage" of type "list<long>" set to '
                'wrong type'
            )

    @property
    def datasetsCount(self):
        """long: Number of datasets that are a part of user's used storage"""
        return self._datasetsCount

    @datasetsCount.setter
    def datasetsCount(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._datasetsCount = value
        else:
            raise TypeError(
                'Property "datasetsCount" of type "list<long>" set to wrong t'
                'ype'
            )

    @property
    def resultsetsCount(self):
        """long: Number of resultsets that are a part of user's used storage
        """
        return self._resultsetsCount

    @resultsetsCount.setter
    def resultsetsCount(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resultsetsCount = value
        else:
            raise TypeError(
                'Property "resultsetsCount" of type "list<long>" set to wrong'
                ' type'
            )

    @property
    def storageServiceDest(self):
        """str: The url of the storage service"""
        return self._storageServiceDest

    @storageServiceDest.setter
    def storageServiceDest(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageServiceDest = value
        else:
            raise TypeError(
                'Property "storageServiceDest" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def storageType(self):
        """StorageEngineTypeEnum: All possible storage engine type enums"""
        return self._storageType

    @storageType.setter
    def storageType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._storageType = value
        else:
            raise TypeError(
                'Property "storageType" of type "list<StorageEngineTypeEnum>"'
                ' set to wrong type'
            )

    @property
    def workspacesCount(self):
        """long: Number of workspaces that are a part of user's used storage
        """
        return self._workspacesCount

    @workspacesCount.setter
    def workspacesCount(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._workspacesCount = value
        else:
            raise TypeError(
                'Property "workspacesCount" of type "list<long>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._bytesDatasetsUsage is not None:
            result["bytesDatasetsUsage"] = \
                self._bytesDatasetsUsage
        if self._bytesResultsetsUsage is not None:
            result["bytesResultsetsUsage"] = \
                self._bytesResultsetsUsage
        if self._bytesTotalCapacity is not None:
            result["bytesTotalCapacity"] = \
                self._bytesTotalCapacity
        if self._bytesUsed is not None:
            result["bytesUsed"] = \
                self._bytesUsed
        if self._bytesWorkspacesUsage is not None:
            result["bytesWorkspacesUsage"] = \
                self._bytesWorkspacesUsage
        if self._datasetsCount is not None:
            result["datasetsCount"] = \
                self._datasetsCount
        if self._resultsetsCount is not None:
            result["resultsetsCount"] = \
                self._resultsetsCount
        if self._storageServiceDest is not None:
            result["storageServiceDest"] = \
                self._storageServiceDest
        if self._storageType is not None:
            result["storageType"] = \
                self._storageType
        if self._workspacesCount is not None:
            result["workspacesCount"] = \
                self._workspacesCount
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._storageType is None:
            raise ValueError(
                "AceStorageInfo.storageType doesnt match requirement:" 
                "required: True"
            )
        if self._storageServiceDest is None:
            raise ValueError(
                "AceStorageInfo.storageServiceDest doesnt match requirement:" 
                "required: True"
            )
        if self._bytesUsed is None:
            raise ValueError(
                "AceStorageInfo.bytesUsed doesnt match requirement:" 
                "required: True"
            )
        if self._bytesTotalCapacity is None:
            raise ValueError(
                "AceStorageInfo.bytesTotalCapacity doesnt match requirement:" 
                "required: True"
            )
        return True
    

