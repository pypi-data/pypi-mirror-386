"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class WebSocket(object):
    """object used to show the status of the websocket between node and the cl
    oud"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.connectionStatus = (
            None if not fromDict or propDict.get(
                "connectionStatus"
            ) is None
            else propDict["connectionStatus"])
        self.lastEventDateTime = (
            None if not fromDict or propDict.get(
                "lastEventDateTime"
            ) is None
            else propDict["lastEventDateTime"])

    @property
    def connectionStatus(self):
        """ """
        return self._connectionStatus

    @connectionStatus.setter
    def connectionStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._connectionStatus = value
        else:
            raise TypeError(
                'Property "connectionStatus" of type "list<ConnectionStatusEn'
                'um>" set to wrong type'
            )

    ConnectionStatusEnum=["UNKNOWN","CONNECTED","DISCONNECTED",]
    str(repr(ConnectionStatusEnum))  # Prevent optimizer removing enum

    @property
    def lastEventDateTime(self):
        """str: ISO Date/time of last web socket event (connect or disconnect)
        """
        return self._lastEventDateTime

    @lastEventDateTime.setter
    def lastEventDateTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastEventDateTime = value
        else:
            raise TypeError(
                'Property "lastEventDateTime" of type "list<str>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._connectionStatus is not None:
            result["connectionStatus"] = \
                self._connectionStatus
        if self._lastEventDateTime is not None:
            result["lastEventDateTime"] = \
                self._lastEventDateTime
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

