"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AuditLogsRequest(object):
    """object used to request audit logs"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.auditLogsFrom = (
            None if not fromDict or propDict.get(
                "auditLogsFrom"
            ) is None
            else propDict["auditLogsFrom"])
        self.auditLogsTo = (
            None if not fromDict or propDict.get(
                "auditLogsTo"
            ) is None
            else propDict["auditLogsTo"])

    @property
    def auditLogsFrom(self):
        """str: Audit logs from date in ISO-8601 format"""
        return self._auditLogsFrom

    @auditLogsFrom.setter
    def auditLogsFrom(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._auditLogsFrom = value
        else:
            raise TypeError(
                'Property "auditLogsFrom" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def auditLogsTo(self):
        """str: Audit logs to date in ISO-8601 format"""
        return self._auditLogsTo

    @auditLogsTo.setter
    def auditLogsTo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._auditLogsTo = value
        else:
            raise TypeError(
                'Property "auditLogsTo" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._auditLogsFrom is not None:
            result["auditLogsFrom"] = \
                self._auditLogsFrom
        if self._auditLogsTo is not None:
            result["auditLogsTo"] = \
                self._auditLogsTo
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._auditLogsFrom is None:
            raise ValueError(
                "AuditLogsRequest.auditLogsFrom doesnt match requirement:" 
                "required: True"
            )
        if self._auditLogsTo is None:
            raise ValueError(
                "AuditLogsRequest.auditLogsTo doesnt match requirement:" 
                "required: True"
            )
        return True
    

