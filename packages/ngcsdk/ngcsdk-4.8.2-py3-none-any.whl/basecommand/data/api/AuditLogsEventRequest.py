"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .CelestialFilters import CelestialFilters

# Unused import over optimization prevention
str(repr(CelestialFilters))


if sys.version_info > (3,):
    long = int
    unicode = str

class AuditLogsEventRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.authToken = (
            None if not fromDict or propDict.get(
                "authToken"
            ) is None
            else propDict["authToken"])
        self.filters = (
            None if not fromDict or propDict.get(
                "filters"
            ) is None
            else propDict["filters"])
        self.fromDate = (
            None if not fromDict or propDict.get(
                "fromDate"
            ) is None
            else propDict["fromDate"])
        self.inputId = (
            None if not fromDict or propDict.get(
                "inputId"
            ) is None
            else propDict["inputId"])
        self.logType = (
            None if not fromDict or propDict.get(
                "logType"
            ) is None
            else propDict["logType"])
        self.requestId = (
            None if not fromDict or propDict.get(
                "requestId"
            ) is None
            else propDict["requestId"])
        self.requesterClientId = (
            None if not fromDict or propDict.get(
                "requesterClientId"
            ) is None
            else propDict["requesterClientId"])
        self.toDate = (
            None if not fromDict or propDict.get(
                "toDate"
            ) is None
            else propDict["toDate"])

    @property
    def authToken(self):
        """str: Authentication token"""
        return self._authToken

    @authToken.setter
    def authToken(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._authToken = value
        else:
            raise TypeError(
                'Property "authToken" of type "list<str>" set to wrong type'
            )

    @property
    def filters(self):
        """CelestialFilters: Celestial service filters for Kafka request messa
        ge"""
        return self._filters

    @filters.setter
    def filters(self, value):
        if value is not None and not isinstance(value, CelestialFilters):
            value = CelestialFilters(value)
        if (value is None) or isinstance(value, CelestialFilters):
            self._filters = value
        else:
            raise TypeError(
                'Property "filters" of type "list<CelestialFilters>" set to w'
                'rong type'
            )

    @property
    def fromDate(self):
        """str: Audit logs from date in ISO-8601 format"""
        return self._fromDate

    @fromDate.setter
    def fromDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fromDate = value
        else:
            raise TypeError(
                'Property "fromDate" of type "list<str>" set to wrong type'
            )

    @property
    def inputId(self):
        """str: ID of the input created when onboarded to Heimdall through Sec
        urity Portal"""
        return self._inputId

    @inputId.setter
    def inputId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._inputId = value
        else:
            raise TypeError(
                'Property "inputId" of type "list<str>" set to wrong type'
            )

    @property
    def logType(self):
        """str: Type of logs"""
        return self._logType

    @logType.setter
    def logType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logType = value
        else:
            raise TypeError(
                'Property "logType" of type "list<str>" set to wrong type'
            )

    @property
    def requestId(self):
        """str: The unique identifier of audit logs event"""
        return self._requestId

    @requestId.setter
    def requestId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requestId = value
        else:
            raise TypeError(
                'Property "requestId" of type "list<str>" set to wrong type'
            )

    @property
    def requesterClientId(self):
        """str: which clientId requests audit logs"""
        return self._requesterClientId

    @requesterClientId.setter
    def requesterClientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requesterClientId = value
        else:
            raise TypeError(
                'Property "requesterClientId" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def toDate(self):
        """str: Audit logs to date in ISO-8601 format"""
        return self._toDate

    @toDate.setter
    def toDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._toDate = value
        else:
            raise TypeError(
                'Property "toDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._authToken is not None:
            result["authToken"] = \
                self._authToken
        if self._filters:
            result["filters"] = \
                self._filters.toDict() if self._filters is not None else None
        if self._fromDate is not None:
            result["fromDate"] = \
                self._fromDate
        if self._inputId is not None:
            result["inputId"] = \
                self._inputId
        if self._logType is not None:
            result["logType"] = \
                self._logType
        if self._requestId is not None:
            result["requestId"] = \
                self._requestId
        if self._requesterClientId is not None:
            result["requesterClientId"] = \
                self._requesterClientId
        if self._toDate is not None:
            result["toDate"] = \
                self._toDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._fromDate is None:
            raise ValueError(
                "AuditLogsEventRequest.fromDate doesnt match requirement:" 
                "required: True"
            )
        if self._toDate is None:
            raise ValueError(
                "AuditLogsEventRequest.toDate doesnt match requirement:" 
                "required: True"
            )
        if self._requesterClientId is None:
            raise ValueError(
                "AuditLogsEventRequest.requesterClientId doesnt match requirement:" 
                "required: True"
            )
        if self._requestId is None:
            raise ValueError(
                "AuditLogsEventRequest.requestId doesnt match requirement:" 
                "required: True"
            )
        if self._logType is None:
            raise ValueError(
                "AuditLogsEventRequest.logType doesnt match requirement:" 
                "required: True"
            )
        if (self._filters is not None): self._filters.isValid()
        return True
    

