"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class OrgOwner(object):
    """Org owner."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.fullName = (
            None if not fromDict or propDict.get(
                "fullName"
            ) is None
            else propDict["fullName"])
        self.lastLoginDate = (
            None if not fromDict or propDict.get(
                "lastLoginDate"
            ) is None
            else propDict["lastLoginDate"])

    @property
    def email(self):
        """str: Email address of the org owner."""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def fullName(self):
        """str: Org owner name."""
        return self._fullName

    @fullName.setter
    def fullName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fullName = value
        else:
            raise TypeError(
                'Property "fullName" of type "list<str>" set to wrong type'
            )

    @property
    def lastLoginDate(self):
        """str: Last time the org owner logged in."""
        return self._lastLoginDate

    @lastLoginDate.setter
    def lastLoginDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastLoginDate = value
        else:
            raise TypeError(
                'Property "lastLoginDate" of type "list<str>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._email is not None:
            result["email"] = \
                self._email
        if self._fullName is not None:
            result["fullName"] = \
                self._fullName
        if self._lastLoginDate is not None:
            result["lastLoginDate"] = \
                self._lastLoginDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._email is None:
            raise ValueError(
                "OrgOwner.email doesnt match requirement:" 
                "required: True"
            )
        if (self._email is not None
            and
            len(self._email) > 128):
            raise ValueError(
                "OrgOwner.email: " + str(self._email) + 
                " doesnt match requirement: maxLength: 128")
        if (self._email is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._email)):
            raise ValueError(
                "OrgOwner.email: " + str(self._email) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        if self._fullName is None:
            raise ValueError(
                "OrgOwner.fullName doesnt match requirement:" 
                "required: True"
            )
        if (self._fullName is not None
            and
            len(self._fullName) < 1):
            raise ValueError(
                "OrgOwner.fullName: " + str(self._fullName) + 
                " doesnt match requirement: minLength: 1")
        if (self._fullName is not None
            and
            len(self._fullName) > 64):
            raise ValueError(
                "OrgOwner.fullName: " + str(self._fullName) + 
                " doesnt match requirement: maxLength: 64")
        return True
    

