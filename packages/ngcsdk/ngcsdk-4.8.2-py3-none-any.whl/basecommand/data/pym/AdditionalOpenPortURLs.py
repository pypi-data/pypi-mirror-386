"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AdditionalOpenPortURLs(object):
    """Open port URLS"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.port = (
            None if not fromDict or propDict.get(
                "port"
            ) is None
            else propDict["port"])
        self.url = (
            None if not fromDict or propDict.get(
                "url"
            ) is None
            else propDict["url"])

    @property
    def port(self):
        """int: Open port"""
        return self._port

    @port.setter
    def port(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._port = value
        else:
            raise TypeError(
                'Property "port" of type "list<int>" set to wrong type'
            )

    @property
    def url(self):
        """str: Open port URL"""
        return self._url

    @url.setter
    def url(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._url = value
        else:
            raise TypeError(
                'Property "url" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._port is not None:
            result["port"] = \
                self._port
        if self._url is not None:
            result["url"] = \
                self._url
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._port is None:
            raise ValueError(
                "AdditionalOpenPortURLs.port doesnt match requirement:" 
                "required: True"
            )
        if (self._port is not None
            and
            self._port < 1):
            raise ValueError(
                "AdditionalOpenPortURLs.port: " + str(self._port) + 
                " doesnt match requirement: minimum: 1")
        if (self._port is not None
            and
            self._port > 65535):
            raise ValueError(
                "AdditionalOpenPortURLs.port: " + str(self._port) + 
                " doesnt match requirement: maximum: 65535")
        if self._url is None:
            raise ValueError(
                "AdditionalOpenPortURLs.url doesnt match requirement:" 
                "required: True"
            )
        return True
    

