"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ClusterURLs import ClusterURLs
from .ClusterParams import ClusterParams
from .ClusterTypeEnum import ClusterTypeEnum
from .ClusterTelemetry import ClusterTelemetry
from .ClusterRequestStatus import ClusterRequestStatus
from .ClusterInstanceInfo import ClusterInstanceInfo

# Unused import over optimization prevention
str(repr(ClusterTypeEnum))
str(repr(ClusterInstanceInfo))
str(repr(ClusterURLs))
str(repr(ClusterTelemetry))
str(repr(ClusterRequestStatus))
str(repr(ClusterParams))


if sys.version_info > (3,):
    long = int
    unicode = str

class ClusterInfo(object):
    """Cluster Information"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.URLs = (
            None if not fromDict or propDict.get(
                "URLs"
            ) is None
            else propDict["URLs"])
        self.clusterInstances = (
            None if not fromDict or propDict.get(
                "clusterInstances"
            ) is None
            else [ ClusterInstanceInfo(i)
            for i in propDict["clusterInstances"] ])
        self.clusterStatus = (
            None if not fromDict or propDict.get(
                "clusterStatus"
            ) is None
            else propDict["clusterStatus"])
        self.clusterType = (
            None if not fromDict or propDict.get(
                "clusterType"
            ) is None
            else propDict["clusterType"])
        self.params = (
            None if not fromDict or propDict.get(
                "params"
            ) is None
            else propDict["params"])
        self.telemetry = (
            None if not fromDict or propDict.get(
                "telemetry"
            ) is None
            else propDict["telemetry"])

    @property
    def URLs(self):
        """ClusterURLs: Cluster URLs"""
        return self._URLs

    @URLs.setter
    def URLs(self, value):
        if value is not None and not isinstance(value, ClusterURLs):
            value = ClusterURLs(value)
        if (value is None) or isinstance(value, ClusterURLs):
            self._URLs = value
        else:
            raise TypeError(
                'Property "URLs" of type "list<ClusterURLs>" set to wrong typ'
                'e'
            )

    @property
    def clusterInstances(self):
        """list: List of Cluster Instances"""
        return self._clusterInstances

    @clusterInstances.setter
    def clusterInstances(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._clusterInstances = value
        else:
            raise TypeError(
                'Property "clusterInstances" of type "list<ClusterInstanceInf'
                'o>" set to wrong type'
            )

    @property
    def clusterStatus(self):
        """ClusterRequestStatus: Cluster Request status"""
        return self._clusterStatus

    @clusterStatus.setter
    def clusterStatus(self, value):
        if value is not None and not isinstance(value, ClusterRequestStatus):
            value = ClusterRequestStatus(value)
        if (value is None) or isinstance(value, ClusterRequestStatus):
            self._clusterStatus = value
        else:
            raise TypeError(
                'Property "clusterStatus" of type "list<ClusterRequestStatus>'
                '" set to wrong type'
            )

    @property
    def clusterType(self):
        """ClusterTypeEnum: All supported cluster types"""
        return self._clusterType

    @clusterType.setter
    def clusterType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._clusterType = value
        else:
            raise TypeError(
                'Property "clusterType" of type "list<ClusterTypeEnum>" set t'
                'o wrong type'
            )

    @property
    def params(self):
        """ClusterParams: Cluster params"""
        return self._params

    @params.setter
    def params(self, value):
        if value is not None and not isinstance(value, ClusterParams):
            value = ClusterParams(value)
        if (value is None) or isinstance(value, ClusterParams):
            self._params = value
        else:
            raise TypeError(
                'Property "params" of type "list<ClusterParams>" set to wrong'
                ' type'
            )

    @property
    def telemetry(self):
        """ClusterTelemetry: Cluster Telemetry"""
        return self._telemetry

    @telemetry.setter
    def telemetry(self, value):
        if value is not None and not isinstance(value, ClusterTelemetry):
            value = ClusterTelemetry(value)
        if (value is None) or isinstance(value, ClusterTelemetry):
            self._telemetry = value
        else:
            raise TypeError(
                'Property "telemetry" of type "list<ClusterTelemetry>" set to'
                ' wrong type'
            )

    def toDict(self):
        result = {}
        if self._URLs:
            result["URLs"] = \
                self._URLs.toDict() if self._URLs is not None else None
        if self._clusterInstances:
            result["clusterInstances"] = [
                i.toDict() for i in self._clusterInstances 
            ] if self._clusterInstances else []
        if self._clusterStatus:
            result["clusterStatus"] = \
                self._clusterStatus.toDict() if self._clusterStatus is not None else None
        if self._clusterType is not None:
            result["clusterType"] = \
                self._clusterType
        if self._params:
            result["params"] = \
                self._params.toDict() if self._params is not None else None
        if self._telemetry:
            result["telemetry"] = \
                self._telemetry.toDict() if self._telemetry is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._clusterStatus is None:
            raise ValueError(
                "ClusterInfo.clusterStatus doesnt match requirement:" 
                "required: True"
            )
        if self._params is None:
            raise ValueError(
                "ClusterInfo.params doesnt match requirement:" 
                "required: True"
            )
        if self._URLs is None:
            raise ValueError(
                "ClusterInfo.URLs doesnt match requirement:" 
                "required: True"
            )
        if self._telemetry is None:
            raise ValueError(
                "ClusterInfo.telemetry doesnt match requirement:" 
                "required: True"
            )
        if (self._clusterStatus is not None): self._clusterStatus.isValid()
        if (self._params is not None): self._params.isValid()
        if (self._URLs is not None): self._URLs.isValid()
        if (self._telemetry is not None): self._telemetry.isValid()
        if (self._clusterInstances is not None):
            for obj in self._clusterInstances:
                if (obj is not None): obj.isValid()
        return True
    

