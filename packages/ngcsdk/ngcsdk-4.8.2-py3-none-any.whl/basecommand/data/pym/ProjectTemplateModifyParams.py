"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ClusterModifyParams import ClusterModifyParams

# Unused import over optimization prevention
str(repr(ClusterModifyParams))


if sys.version_info > (3,):
    long = int
    unicode = str

class ProjectTemplateModifyParams(object):
    """Project template modification parameters"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.clusterParams = (
            None if not fromDict or propDict.get(
                "clusterParams"
            ) is None
            else propDict["clusterParams"])
        self.clusterType = (
            None if not fromDict or propDict.get(
                "clusterType"
            ) is None
            else propDict["clusterType"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayImageURL = (
            None if not fromDict or propDict.get(
                "displayImageURL"
            ) is None
            else propDict["displayImageURL"])
        self.isDefault = (
            None if not fromDict or propDict.get(
                "isDefault"
            ) is None
            else propDict["isDefault"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def clusterParams(self):
        """ClusterModifyParams: Cluster modification params"""
        return self._clusterParams

    @clusterParams.setter
    def clusterParams(self, value):
        if value is not None and not isinstance(value, ClusterModifyParams):
            value = ClusterModifyParams(value)
        if (value is None) or isinstance(value, ClusterModifyParams):
            self._clusterParams = value
        else:
            raise TypeError(
                'Property "clusterParams" of type "list<ClusterModifyParams>"'
                ' set to wrong type'
            )

    @property
    def clusterType(self):
        """ """
        return self._clusterType

    @clusterType.setter
    def clusterType(self, value):
        if value is not None and not isinstance(value, str):
            value = str(value)
        if (value is None) or isinstance(value, str):
            self._clusterType = value
        else:
            raise TypeError(
                'Property "clusterType" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Project template description"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayImageURL(self):
        """str: Display Image URL"""
        return self._displayImageURL

    @displayImageURL.setter
    def displayImageURL(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayImageURL = value
        else:
            raise TypeError(
                'Property "displayImageURL" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def isDefault(self):
        """bool: Indicate if template is default"""
        return self._isDefault

    @isDefault.setter
    def isDefault(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isDefault = value
        else:
            raise TypeError(
                'Property "isDefault" of type "list<bool>" set to wrong type'
            )

    @property
    def name(self):
        """str: Project template name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._clusterParams:
            result["clusterParams"] = \
                self._clusterParams.toDict() if self._clusterParams is not None else None
        if self._clusterType is not None:
            result["clusterType"] = \
                self._clusterType
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayImageURL is not None:
            result["displayImageURL"] = \
                self._displayImageURL
        if self._isDefault is not None:
            result["isDefault"] = \
                self._isDefault
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "ProjectTemplateModifyParams.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._description is not None
            and
            len(self._description) < 1):
            raise ValueError(
                "ProjectTemplateModifyParams.description: " + str(self._description) + 
                " doesnt match requirement: minLength: 1")
        if (self._displayImageURL is not None
            and
            len(self._displayImageURL) < 1):
            raise ValueError(
                "ProjectTemplateModifyParams.displayImageURL: " + str(self._displayImageURL) + 
                " doesnt match requirement: minLength: 1")
        if (self._clusterParams is not None): self._clusterParams.isValid()
        return True
    

