"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ProjectRequestStatus(object):
    """Project Request status"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.additionalInfo = (
            None if not fromDict or propDict.get(
                "additionalInfo"
            ) is None
            else propDict["additionalInfo"])
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def additionalInfo(self):
        """str: Any other pertinent information on the status"""
        return self._additionalInfo

    @additionalInfo.setter
    def additionalInfo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._additionalInfo = value
        else:
            raise TypeError(
                'Property "additionalInfo" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def creationTimestamp(self):
        """str: Project creation date time in YYYY-MM-DDThh:mm:ssZ format"""
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def id(self):
        """str: Project ID"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Project name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._additionalInfo is not None:
            result["additionalInfo"] = \
                self._additionalInfo
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._id is not None:
            result["id"] = \
                self._id
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._id is None:
            raise ValueError(
                "ProjectRequestStatus.id doesnt match requirement:" 
                "required: True"
            )
        if self._name is None:
            raise ValueError(
                "ProjectRequestStatus.name doesnt match requirement:" 
                "required: True"
            )
        if self._creationTimestamp is None:
            raise ValueError(
                "ProjectRequestStatus.creationTimestamp doesnt match requirement:" 
                "required: True"
            )
        return True
    

