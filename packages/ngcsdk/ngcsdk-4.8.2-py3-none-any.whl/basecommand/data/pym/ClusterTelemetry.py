"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ClusterTelemetry(object):
    """Cluster Telemetry"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.gpuActiveTime = (
            None if not fromDict or propDict.get(
                "gpuActiveTime"
            ) is None
            else propDict["gpuActiveTime"])
        self.gpuUtilization = (
            None if not fromDict or propDict.get(
                "gpuUtilization"
            ) is None
            else propDict["gpuUtilization"])

    @property
    def gpuActiveTime(self):
        """float: Percentage of time the GPU was active"""
        return self._gpuActiveTime

    @gpuActiveTime.setter
    def gpuActiveTime(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._gpuActiveTime = value
        else:
            raise TypeError(
                'Property "gpuActiveTime" of type "list<float>" set to wrong '
                'type'
            )

    @property
    def gpuUtilization(self):
        """float: Percentage of GPU that was utilized"""
        return self._gpuUtilization

    @gpuUtilization.setter
    def gpuUtilization(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._gpuUtilization = value
        else:
            raise TypeError(
                'Property "gpuUtilization" of type "list<float>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._gpuActiveTime is not None:
            result["gpuActiveTime"] = \
                self._gpuActiveTime
        if self._gpuUtilization is not None:
            result["gpuUtilization"] = \
                self._gpuUtilization
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._gpuUtilization is None:
            raise ValueError(
                "ClusterTelemetry.gpuUtilization doesnt match requirement:" 
                "required: True"
            )
        if self._gpuActiveTime is None:
            raise ValueError(
                "ClusterTelemetry.gpuActiveTime doesnt match requirement:" 
                "required: True"
            )
        return True
    

