"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ProjectParams import ProjectParams

# Unused import over optimization prevention
str(repr(ProjectParams))


if sys.version_info > (3,):
    long = int
    unicode = str

class ProjectDetails(object):
    """Project Details"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.ace = (
            None if not fromDict or propDict.get(
                "ace"
            ) is None
            else propDict["ace"])
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.org = (
            None if not fromDict or propDict.get(
                "org"
            ) is None
            else propDict["org"])
        self.owner = (
            None if not fromDict or propDict.get(
                "owner"
            ) is None
            else propDict["owner"])
        self.params = (
            None if not fromDict or propDict.get(
                "params"
            ) is None
            else propDict["params"])
        self.team = (
            None if not fromDict or propDict.get(
                "team"
            ) is None
            else propDict["team"])

    @property
    def ace(self):
        """str: ACE instance"""
        return self._ace

    @ace.setter
    def ace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ace = value
        else:
            raise TypeError(
                'Property "ace" of type "list<str>" set to wrong type'
            )

    @property
    def creationTimestamp(self):
        """str: Project creation date time in YYYY-MM-DDThh:mm:ssZ format"""
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def id(self):
        """str: Project ID"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def org(self):
        """str: Org name that the project belongs to (only used in LIST and IN
        FO command responses)"""
        return self._org

    @org.setter
    def org(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._org = value
        else:
            raise TypeError(
                'Property "org" of type "list<str>" set to wrong type'
            )

    @property
    def owner(self):
        """str: Project owner"""
        return self._owner

    @owner.setter
    def owner(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._owner = value
        else:
            raise TypeError(
                'Property "owner" of type "list<str>" set to wrong type'
            )

    @property
    def params(self):
        """ProjectParams: Project params"""
        return self._params

    @params.setter
    def params(self, value):
        if value is not None and not isinstance(value, ProjectParams):
            value = ProjectParams(value)
        if (value is None) or isinstance(value, ProjectParams):
            self._params = value
        else:
            raise TypeError(
                'Property "params" of type "list<ProjectParams>" set to wrong'
                ' type'
            )

    @property
    def team(self):
        """str: Team name that the project belongs to (only used in LIST and I
        NFO command responses)"""
        return self._team

    @team.setter
    def team(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._team = value
        else:
            raise TypeError(
                'Property "team" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._ace is not None:
            result["ace"] = \
                self._ace
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._id is not None:
            result["id"] = \
                self._id
        if self._org is not None:
            result["org"] = \
                self._org
        if self._owner is not None:
            result["owner"] = \
                self._owner
        if self._params:
            result["params"] = \
                self._params.toDict() if self._params is not None else None
        if self._team is not None:
            result["team"] = \
                self._team
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._ace is None:
            raise ValueError(
                "ProjectDetails.ace doesnt match requirement:" 
                "required: True"
            )
        if self._owner is None:
            raise ValueError(
                "ProjectDetails.owner doesnt match requirement:" 
                "required: True"
            )
        if self._id is None:
            raise ValueError(
                "ProjectDetails.id doesnt match requirement:" 
                "required: True"
            )
        if self._creationTimestamp is None:
            raise ValueError(
                "ProjectDetails.creationTimestamp doesnt match requirement:" 
                "required: True"
            )
        if self._params is None:
            raise ValueError(
                "ProjectDetails.params doesnt match requirement:" 
                "required: True"
            )
        if (self._params is not None): self._params.isValid()
        return True
    

