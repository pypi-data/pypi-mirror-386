"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class HealthInfoItem(object):
    """Health Indicator"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.component = (
            None if not fromDict or propDict.get(
                "component"
            ) is None
            else propDict["component"])
        self.details = (
            None if not fromDict or propDict.get(
                "details"
            ) is None
            else propDict["details"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def component(self):
        """str: Component Name"""
        return self._component

    @component.setter
    def component(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._component = value
        else:
            raise TypeError(
                'Property "component" of type "list<str>" set to wrong type'
            )

    @property
    def details(self):
        """str: Component details"""
        return self._details

    @details.setter
    def details(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._details = value
        else:
            raise TypeError(
                'Property "details" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """str: Component Status"""
        return self._status

    @status.setter
    def status(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._component is not None:
            result["component"] = \
                self._component
        if self._details is not None:
            result["details"] = \
                self._details
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._component is None:
            raise ValueError(
                "HealthInfoItem.component doesnt match requirement:" 
                "required: True"
            )
        if (self._component is not None
            and
            len(self._component) < 1):
            raise ValueError(
                "HealthInfoItem.component: " + str(self._component) + 
                " doesnt match requirement: minLength: 1")
        if self._status is None:
            raise ValueError(
                "HealthInfoItem.status doesnt match requirement:" 
                "required: True"
            )
        if (self._status is not None
            and
            len(self._status) < 1):
            raise ValueError(
                "HealthInfoItem.status: " + str(self._status) + 
                " doesnt match requirement: minLength: 1")
        if self._details is None:
            raise ValueError(
                "HealthInfoItem.details doesnt match requirement:" 
                "required: True"
            )
        if (self._details is not None
            and
            len(self._details) < 1):
            raise ValueError(
                "HealthInfoItem.details: " + str(self._details) + 
                " doesnt match requirement: minLength: 1")
        return True
    

