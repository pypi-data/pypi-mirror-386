"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ProjectDetails import ProjectDetails
from .ClusterInfo import ClusterInfo

# Unused import over optimization prevention
str(repr(ProjectDetails))
str(repr(ClusterInfo))


if sys.version_info > (3,):
    long = int
    unicode = str

class ProjectInfoResponse(object):
    """Project Info Response"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.clusterInfo = (
            None if not fromDict or propDict.get(
                "clusterInfo"
            ) is None
            else propDict["clusterInfo"])
        self.projectInfo = (
            None if not fromDict or propDict.get(
                "projectInfo"
            ) is None
            else propDict["projectInfo"])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def clusterInfo(self):
        """ClusterInfo: Cluster Information"""
        return self._clusterInfo

    @clusterInfo.setter
    def clusterInfo(self, value):
        if value is not None and not isinstance(value, ClusterInfo):
            value = ClusterInfo(value)
        if (value is None) or isinstance(value, ClusterInfo):
            self._clusterInfo = value
        else:
            raise TypeError(
                'Property "clusterInfo" of type "list<ClusterInfo>" set to wr'
                'ong type'
            )

    @property
    def projectInfo(self):
        """ProjectDetails: Project Details"""
        return self._projectInfo

    @projectInfo.setter
    def projectInfo(self, value):
        if value is not None and not isinstance(value, ProjectDetails):
            value = ProjectDetails(value)
        if (value is None) or isinstance(value, ProjectDetails):
            self._projectInfo = value
        else:
            raise TypeError(
                'Property "projectInfo" of type "list<ProjectDetails>" set to'
                ' wrong type'
            )

    @property
    def version(self):
        """str: Payload version"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._clusterInfo:
            result["clusterInfo"] = \
                self._clusterInfo.toDict() if self._clusterInfo is not None else None
        if self._projectInfo:
            result["projectInfo"] = \
                self._projectInfo.toDict() if self._projectInfo is not None else None
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._version is None:
            raise ValueError(
                "ProjectInfoResponse.version doesnt match requirement:" 
                "required: True"
            )
        if self._projectInfo is None:
            raise ValueError(
                "ProjectInfoResponse.projectInfo doesnt match requirement:" 
                "required: True"
            )
        if (self._projectInfo is not None): self._projectInfo.isValid()
        if (self._clusterInfo is not None): self._clusterInfo.isValid()
        return True
    

