"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ClusterInstance(object):
    """Machine instance type"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.cpuCores = (
            None if not fromDict or propDict.get(
                "cpuCores"
            ) is None
            else propDict["cpuCores"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.gpuMemory = (
            None if not fromDict or propDict.get(
                "gpuMemory"
            ) is None
            else propDict["gpuMemory"])
        self.gpus = (
            None if not fromDict or propDict.get(
                "gpus"
            ) is None
            else propDict["gpus"])
        self.machineType = (
            None if not fromDict or propDict.get(
                "machineType"
            ) is None
            else propDict["machineType"])
        self.systemMemory = (
            None if not fromDict or propDict.get(
                "systemMemory"
            ) is None
            else propDict["systemMemory"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def cpuCores(self):
        """float: Number of CPU cores for a job, user can specify 1.5 cores he
        re"""
        return self._cpuCores

    @cpuCores.setter
    def cpuCores(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._cpuCores = value
        else:
            raise TypeError(
                'Property "cpuCores" of type "list<float>" set to wrong type'
            )

    @property
    def description(self):
        """str: Machine characteristics"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def gpuMemory(self):
        """float: gpu memory in MB"""
        return self._gpuMemory

    @gpuMemory.setter
    def gpuMemory(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._gpuMemory = value
        else:
            raise TypeError(
                'Property "gpuMemory" of type "list<float>" set to wrong type'
            )

    @property
    def gpus(self):
        """int: number of GPUs for a job"""
        return self._gpus

    @gpus.setter
    def gpus(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._gpus = value
        else:
            raise TypeError(
                'Property "gpus" of type "list<int>" set to wrong type'
            )

    @property
    def machineType(self):
        """str: Machine instance short name"""
        return self._machineType

    @machineType.setter
    def machineType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._machineType = value
        else:
            raise TypeError(
                'Property "machineType" of type "list<str>" set to wrong type'
            )

    @property
    def systemMemory(self):
        """float: system memory in MB"""
        return self._systemMemory

    @systemMemory.setter
    def systemMemory(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._systemMemory = value
        else:
            raise TypeError(
                'Property "systemMemory" of type "list<float>" set to wrong t'
                'ype'
            )

    @property
    def type(self):
        """str: The type of instance that will be running the job, GPU, CPU or
         MIG"""
        return self._type

    @type.setter
    def type(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._cpuCores is not None:
            result["cpuCores"] = \
                self._cpuCores
        if self._description is not None:
            result["description"] = \
                self._description
        if self._gpuMemory is not None:
            result["gpuMemory"] = \
                self._gpuMemory
        if self._gpus is not None:
            result["gpus"] = \
                self._gpus
        if self._machineType is not None:
            result["machineType"] = \
                self._machineType
        if self._systemMemory is not None:
            result["systemMemory"] = \
                self._systemMemory
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._machineType is None:
            raise ValueError(
                "ClusterInstance.machineType doesnt match requirement:" 
                "required: True"
            )
        if self._description is None:
            raise ValueError(
                "ClusterInstance.description doesnt match requirement:" 
                "required: True"
            )
        if self._cpuCores is None:
            raise ValueError(
                "ClusterInstance.cpuCores doesnt match requirement:" 
                "required: True"
            )
        if (self._cpuCores is not None
            and
            self._cpuCores < 1):
            raise ValueError(
                "ClusterInstance.cpuCores: " + str(self._cpuCores) + 
                " doesnt match requirement: minimum: 1")
        if (self._cpuCores is not None
            and
            self._cpuCores > 240):
            raise ValueError(
                "ClusterInstance.cpuCores: " + str(self._cpuCores) + 
                " doesnt match requirement: maximum: 240")
        if self._gpus is None:
            raise ValueError(
                "ClusterInstance.gpus doesnt match requirement:" 
                "required: True"
            )
        if (self._gpus is not None
            and
            self._gpus < 0):
            raise ValueError(
                "ClusterInstance.gpus: " + str(self._gpus) + 
                " doesnt match requirement: minimum: 0")
        if (self._gpus is not None
            and
            self._gpus > 16):
            raise ValueError(
                "ClusterInstance.gpus: " + str(self._gpus) + 
                " doesnt match requirement: maximum: 16")
        if self._gpuMemory is None:
            raise ValueError(
                "ClusterInstance.gpuMemory doesnt match requirement:" 
                "required: True"
            )
        if (self._gpuMemory is not None
            and
            self._gpuMemory < 1024):
            raise ValueError(
                "ClusterInstance.gpuMemory: " + str(self._gpuMemory) + 
                " doesnt match requirement: minimum: 1024")
        if (self._gpuMemory is not None
            and
            self._gpuMemory > 1474560):
            raise ValueError(
                "ClusterInstance.gpuMemory: " + str(self._gpuMemory) + 
                " doesnt match requirement: maximum: 1474560")
        if self._systemMemory is None:
            raise ValueError(
                "ClusterInstance.systemMemory doesnt match requirement:" 
                "required: True"
            )
        if (self._systemMemory is not None
            and
            self._systemMemory < 1024):
            raise ValueError(
                "ClusterInstance.systemMemory: " + str(self._systemMemory) + 
                " doesnt match requirement: minimum: 1024")
        if (self._systemMemory is not None
            and
            self._systemMemory > 1474560):
            raise ValueError(
                "ClusterInstance.systemMemory: " + str(self._systemMemory) + 
                " doesnt match requirement: maximum: 1474560")
        return True
    

