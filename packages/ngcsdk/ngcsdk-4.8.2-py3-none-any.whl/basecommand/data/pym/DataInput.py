"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Workspace import Workspace
from .Dataset import Dataset

# Unused import over optimization prevention
str(repr(Workspace))
str(repr(Dataset))


if sys.version_info > (3,):
    long = int
    unicode = str

class DataInput(object):
    """Data Input"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.datasetMounts = (
            None if not fromDict or propDict.get(
                "datasetMounts"
            ) is None
            else [ Dataset(i)
            for i in propDict["datasetMounts"] ])
        self.workspaceMounts = (
            None if not fromDict or propDict.get(
                "workspaceMounts"
            ) is None
            else [ Workspace(i)
            for i in propDict["workspaceMounts"] ])

    @property
    def datasetMounts(self):
        """list: Dataset mounts"""
        return self._datasetMounts

    @datasetMounts.setter
    def datasetMounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._datasetMounts = value
        else:
            raise TypeError(
                'Property "datasetMounts" of type "list<Dataset>" set to wron'
                'g type'
            )

    @property
    def workspaceMounts(self):
        """list: Workspace mounts"""
        return self._workspaceMounts

    @workspaceMounts.setter
    def workspaceMounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._workspaceMounts = value
        else:
            raise TypeError(
                'Property "workspaceMounts" of type "list<Workspace>" set to '
                'wrong type'
            )

    def toDict(self):
        result = {}
        if self._datasetMounts:
            result["datasetMounts"] = [
                i.toDict() for i in self._datasetMounts 
            ] if self._datasetMounts else []
        if self._workspaceMounts:
            result["workspaceMounts"] = [
                i.toDict() for i in self._workspaceMounts 
            ] if self._workspaceMounts else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._datasetMounts is not None):
            for obj in self._datasetMounts:
                if (obj is not None): obj.isValid()
        if (self._workspaceMounts is not None):
            for obj in self._workspaceMounts:
                if (obj is not None): obj.isValid()
        return True
    

