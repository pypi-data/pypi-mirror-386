"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class Dataset(object):
    """Dataset mount"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.mountPoint = (
            None if not fromDict or propDict.get(
                "mountPoint"
            ) is None
            else propDict["mountPoint"])

    @property
    def id(self):
        """long: Dataset id"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def mountPoint(self):
        """str: Dataset mount point"""
        return self._mountPoint

    @mountPoint.setter
    def mountPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mountPoint = value
        else:
            raise TypeError(
                'Property "mountPoint" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._id is not None:
            result["id"] = \
                self._id
        if self._mountPoint is not None:
            result["mountPoint"] = \
                self._mountPoint
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._id is None:
            raise ValueError(
                "Dataset.id doesnt match requirement:" 
                "required: True"
            )
        if self._mountPoint is None:
            raise ValueError(
                "Dataset.mountPoint doesnt match requirement:" 
                "required: True"
            )
        if (self._mountPoint is not None
            and
            len(self._mountPoint) < 1):
            raise ValueError(
                "Dataset.mountPoint: " + str(self._mountPoint) + 
                " doesnt match requirement: minLength: 1")
        return True
    

