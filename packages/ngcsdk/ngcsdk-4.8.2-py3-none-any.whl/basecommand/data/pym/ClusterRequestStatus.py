"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ClusterStatusEnum import ClusterStatusEnum
from .ClusterTypeEnum import ClusterTypeEnum

# Unused import over optimization prevention
str(repr(ClusterStatusEnum))
str(repr(ClusterTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class ClusterRequestStatus(object):
    """Cluster Request status"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.additionalInfo = (
            None if not fromDict or propDict.get(
                "additionalInfo"
            ) is None
            else propDict["additionalInfo"])
        self.clusterRuntimeInSeconds = (
            None if not fromDict or propDict.get(
                "clusterRuntimeInSeconds"
            ) is None
            else propDict["clusterRuntimeInSeconds"])
        self.creationTimestamp = (
            None if not fromDict or propDict.get(
                "creationTimestamp"
            ) is None
            else propDict["creationTimestamp"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])
        self.managerId = (
            None if not fromDict or propDict.get(
                "managerId"
            ) is None
            else propDict["managerId"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.org = (
            None if not fromDict or propDict.get(
                "org"
            ) is None
            else propDict["org"])
        self.startedRunningAt = (
            None if not fromDict or propDict.get(
                "startedRunningAt"
            ) is None
            else propDict["startedRunningAt"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.stoppedRunningAt = (
            None if not fromDict or propDict.get(
                "stoppedRunningAt"
            ) is None
            else propDict["stoppedRunningAt"])
        self.team = (
            None if not fromDict or propDict.get(
                "team"
            ) is None
            else propDict["team"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def additionalInfo(self):
        """str: Any other pertinent information on the status"""
        return self._additionalInfo

    @additionalInfo.setter
    def additionalInfo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._additionalInfo = value
        else:
            raise TypeError(
                'Property "additionalInfo" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def clusterRuntimeInSeconds(self):
        """long: How long the cluster has been running in seconds"""
        return self._clusterRuntimeInSeconds

    @clusterRuntimeInSeconds.setter
    def clusterRuntimeInSeconds(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._clusterRuntimeInSeconds = value
        else:
            raise TypeError(
                'Property "clusterRuntimeInSeconds" of type "list<long>" set '
                'to wrong type'
            )

    @property
    def creationTimestamp(self):
        """str: Cluster creation date time in YYYY-MM-DDThh:mm:ssZ format"""
        return self._creationTimestamp

    @creationTimestamp.setter
    def creationTimestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._creationTimestamp = value
        else:
            raise TypeError(
                'Property "creationTimestamp" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def id(self):
        """str: Cluster ID"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def jobId(self):
        """long: Unique Id of the BCP job"""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<long>" set to wrong type'
            )

    @property
    def managerId(self):
        """str: Manager ID"""
        return self._managerId

    @managerId.setter
    def managerId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._managerId = value
        else:
            raise TypeError(
                'Property "managerId" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Cluster name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def org(self):
        """str: Org name that the cluster belongs to (only used in LIST and IN
        FO command responses)"""
        return self._org

    @org.setter
    def org(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._org = value
        else:
            raise TypeError(
                'Property "org" of type "list<str>" set to wrong type'
            )

    @property
    def startedRunningAt(self):
        """str: Cluster started running date time in YYYY-MM-DDThh:mm:ss.SSSZ 
        format"""
        return self._startedRunningAt

    @startedRunningAt.setter
    def startedRunningAt(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._startedRunningAt = value
        else:
            raise TypeError(
                'Property "startedRunningAt" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def status(self):
        """ClusterStatusEnum: All possible cluster status enums"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<ClusterStatusEnum>" set to w'
                'rong type'
            )

    @property
    def stoppedRunningAt(self):
        """str: Cluster stopped running date time in YYYY-MM-DDThh:mm:ss.SSSZ 
        format"""
        return self._stoppedRunningAt

    @stoppedRunningAt.setter
    def stoppedRunningAt(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._stoppedRunningAt = value
        else:
            raise TypeError(
                'Property "stoppedRunningAt" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def team(self):
        """str: Team name that the cluster belongs to (only used in LIST and I
        NFO command responses)"""
        return self._team

    @team.setter
    def team(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._team = value
        else:
            raise TypeError(
                'Property "team" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """ClusterTypeEnum: All supported cluster types"""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<ClusterTypeEnum>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._additionalInfo is not None:
            result["additionalInfo"] = \
                self._additionalInfo
        if self._clusterRuntimeInSeconds is not None:
            result["clusterRuntimeInSeconds"] = \
                self._clusterRuntimeInSeconds
        if self._creationTimestamp is not None:
            result["creationTimestamp"] = \
                self._creationTimestamp
        if self._id is not None:
            result["id"] = \
                self._id
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        if self._managerId is not None:
            result["managerId"] = \
                self._managerId
        if self._name is not None:
            result["name"] = \
                self._name
        if self._org is not None:
            result["org"] = \
                self._org
        if self._startedRunningAt is not None:
            result["startedRunningAt"] = \
                self._startedRunningAt
        if self._status is not None:
            result["status"] = \
                self._status
        if self._stoppedRunningAt is not None:
            result["stoppedRunningAt"] = \
                self._stoppedRunningAt
        if self._team is not None:
            result["team"] = \
                self._team
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._id is None:
            raise ValueError(
                "ClusterRequestStatus.id doesnt match requirement:" 
                "required: True"
            )
        if self._name is None:
            raise ValueError(
                "ClusterRequestStatus.name doesnt match requirement:" 
                "required: True"
            )
        if self._creationTimestamp is None:
            raise ValueError(
                "ClusterRequestStatus.creationTimestamp doesnt match requirement:" 
                "required: True"
            )
        if self._clusterRuntimeInSeconds is None:
            raise ValueError(
                "ClusterRequestStatus.clusterRuntimeInSeconds doesnt match requirement:" 
                "required: True"
            )
        if self._startedRunningAt is None:
            raise ValueError(
                "ClusterRequestStatus.startedRunningAt doesnt match requirement:" 
                "required: True"
            )
        if self._stoppedRunningAt is None:
            raise ValueError(
                "ClusterRequestStatus.stoppedRunningAt doesnt match requirement:" 
                "required: True"
            )
        return True
    

