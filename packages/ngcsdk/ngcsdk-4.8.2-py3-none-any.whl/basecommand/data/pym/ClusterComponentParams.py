"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Env import Env

# Unused import over optimization prevention
str(repr(Env))


if sys.version_info > (3,):
    long = int
    unicode = str

class ClusterComponentParams(object):
    """Common parameters for scheduler and worker"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.dashboardAddress = (
            None if not fromDict or propDict.get(
                "dashboardAddress"
            ) is None
            else propDict["dashboardAddress"])
        self.envVariables = (
            None if not fromDict or propDict.get(
                "envVariables"
            ) is None
            else [ Env(i)
            for i in propDict["envVariables"] ])
        self.gpuReserved = (
            None if not fromDict or propDict.get(
                "gpuReserved"
            ) is None
            else propDict["gpuReserved"])
        self.instanceType = (
            None if not fromDict or propDict.get(
                "instanceType"
            ) is None
            else propDict["instanceType"])
        self.startupScript = (
            None if not fromDict or propDict.get(
                "startupScript"
            ) is None
            else propDict["startupScript"])

    @property
    def dashboardAddress(self):
        """str: Dashboard address"""
        return self._dashboardAddress

    @dashboardAddress.setter
    def dashboardAddress(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dashboardAddress = value
        else:
            raise TypeError(
                'Property "dashboardAddress" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def envVariables(self):
        """list: List of environment variables to prefix the scheduler or work
        er command"""
        return self._envVariables

    @envVariables.setter
    def envVariables(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._envVariables = value
        else:
            raise TypeError(
                'Property "envVariables" of type "list<Env>" set to wrong typ'
                'e'
            )

    @property
    def gpuReserved(self):
        """int: Number of GPU reserved"""
        return self._gpuReserved

    @gpuReserved.setter
    def gpuReserved(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._gpuReserved = value
        else:
            raise TypeError(
                'Property "gpuReserved" of type "list<int>" set to wrong type'
            )

    @property
    def instanceType(self):
        """str: Instance type"""
        return self._instanceType

    @instanceType.setter
    def instanceType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._instanceType = value
        else:
            raise TypeError(
                'Property "instanceType" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def startupScript(self):
        """str: Startup script"""
        return self._startupScript

    @startupScript.setter
    def startupScript(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._startupScript = value
        else:
            raise TypeError(
                'Property "startupScript" of type "list<str>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._dashboardAddress is not None:
            result["dashboardAddress"] = \
                self._dashboardAddress
        if self._envVariables:
            result["envVariables"] = [
                i.toDict() for i in self._envVariables 
            ] if self._envVariables else []
        if self._gpuReserved is not None:
            result["gpuReserved"] = \
                self._gpuReserved
        if self._instanceType is not None:
            result["instanceType"] = \
                self._instanceType
        if self._startupScript is not None:
            result["startupScript"] = \
                self._startupScript
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._dashboardAddress is not None
            and
            len(self._dashboardAddress) < 1):
            raise ValueError(
                "ClusterComponentParams.dashboardAddress: " + str(self._dashboardAddress) + 
                " doesnt match requirement: minLength: 1")
        if (self._startupScript is not None
            and
            len(self._startupScript) < 1):
            raise ValueError(
                "ClusterComponentParams.startupScript: " + str(self._startupScript) + 
                " doesnt match requirement: minLength: 1")
        if self._instanceType is None:
            raise ValueError(
                "ClusterComponentParams.instanceType doesnt match requirement:" 
                "required: True"
            )
        if (self._instanceType is not None
            and
            len(self._instanceType) < 1):
            raise ValueError(
                "ClusterComponentParams.instanceType: " + str(self._instanceType) + 
                " doesnt match requirement: minLength: 1")
        if (self._gpuReserved is not None
            and
            self._gpuReserved < 0):
            raise ValueError(
                "ClusterComponentParams.gpuReserved: " + str(self._gpuReserved) + 
                " doesnt match requirement: minimum: 0")
        if (self._envVariables is not None):
            for obj in self._envVariables:
                if (obj is not None): obj.isValid()
        return True
    

