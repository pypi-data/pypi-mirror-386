"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .DataInput import DataInput

# Unused import over optimization prevention
str(repr(DataInput))


if sys.version_info > (3,):
    long = int
    unicode = str

class ProjectTemplateParamsDeprecated(object):
    """Project template parameters"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.ace = (
            None if not fromDict or propDict.get(
                "ace"
            ) is None
            else propDict["ace"])
        self.clusterLifetime = (
            None if not fromDict or propDict.get(
                "clusterLifetime"
            ) is None
            else propDict["clusterLifetime"])
        self.containerImage = (
            None if not fromDict or propDict.get(
                "containerImage"
            ) is None
            else propDict["containerImage"])
        self.dataInput = (
            None if not fromDict or propDict.get(
                "dataInput"
            ) is None
            else propDict["dataInput"])
        self.dataOutputMountPoint = (
            None if not fromDict or propDict.get(
                "dataOutputMountPoint"
            ) is None
            else propDict["dataOutputMountPoint"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayImageURL = (
            None if not fromDict or propDict.get(
                "displayImageURL"
            ) is None
            else propDict["displayImageURL"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.nworkers = (
            None if not fromDict or propDict.get(
                "nworkers"
            ) is None
            else propDict["nworkers"])
        self.schedulerInstanceType = (
            None if not fromDict or propDict.get(
                "schedulerInstanceType"
            ) is None
            else propDict["schedulerInstanceType"])
        self.schedulerStartupScript = (
            None if not fromDict or propDict.get(
                "schedulerStartupScript"
            ) is None
            else propDict["schedulerStartupScript"])
        self.workerInstanceType = (
            None if not fromDict or propDict.get(
                "workerInstanceType"
            ) is None
            else propDict["workerInstanceType"])
        self.workerStartupScript = (
            None if not fromDict or propDict.get(
                "workerStartupScript"
            ) is None
            else propDict["workerStartupScript"])

    @property
    def ace(self):
        """str: ACE instance"""
        return self._ace

    @ace.setter
    def ace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ace = value
        else:
            raise TypeError(
                'Property "ace" of type "list<str>" set to wrong type'
            )

    @property
    def clusterLifetime(self):
        """str: Cluster lifetime"""
        return self._clusterLifetime

    @clusterLifetime.setter
    def clusterLifetime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._clusterLifetime = value
        else:
            raise TypeError(
                'Property "clusterLifetime" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def containerImage(self):
        """str: Container image"""
        return self._containerImage

    @containerImage.setter
    def containerImage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerImage = value
        else:
            raise TypeError(
                'Property "containerImage" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def dataInput(self):
        """DataInput: Data Input"""
        return self._dataInput

    @dataInput.setter
    def dataInput(self, value):
        if value is not None and not isinstance(value, DataInput):
            value = DataInput(value)
        if (value is None) or isinstance(value, DataInput):
            self._dataInput = value
        else:
            raise TypeError(
                'Property "dataInput" of type "list<DataInput>" set to wrong '
                'type'
            )

    @property
    def dataOutputMountPoint(self):
        """str: Data output results mount point"""
        return self._dataOutputMountPoint

    @dataOutputMountPoint.setter
    def dataOutputMountPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dataOutputMountPoint = value
        else:
            raise TypeError(
                'Property "dataOutputMountPoint" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def description(self):
        """str: Project template description"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayImageURL(self):
        """str: Display Image URL"""
        return self._displayImageURL

    @displayImageURL.setter
    def displayImageURL(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayImageURL = value
        else:
            raise TypeError(
                'Property "displayImageURL" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def name(self):
        """str: Project template name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def nworkers(self):
        """int: Number of workers"""
        return self._nworkers

    @nworkers.setter
    def nworkers(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._nworkers = value
        else:
            raise TypeError(
                'Property "nworkers" of type "list<int>" set to wrong type'
            )

    @property
    def schedulerInstanceType(self):
        """str: Scheduler Instance type"""
        return self._schedulerInstanceType

    @schedulerInstanceType.setter
    def schedulerInstanceType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._schedulerInstanceType = value
        else:
            raise TypeError(
                'Property "schedulerInstanceType" of type "list<str>" set to '
                'wrong type'
            )

    @property
    def schedulerStartupScript(self):
        """str: Scheduler startup script"""
        return self._schedulerStartupScript

    @schedulerStartupScript.setter
    def schedulerStartupScript(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._schedulerStartupScript = value
        else:
            raise TypeError(
                'Property "schedulerStartupScript" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def workerInstanceType(self):
        """str: Worker Instance type"""
        return self._workerInstanceType

    @workerInstanceType.setter
    def workerInstanceType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._workerInstanceType = value
        else:
            raise TypeError(
                'Property "workerInstanceType" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def workerStartupScript(self):
        """str: Worker startup script"""
        return self._workerStartupScript

    @workerStartupScript.setter
    def workerStartupScript(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._workerStartupScript = value
        else:
            raise TypeError(
                'Property "workerStartupScript" of type "list<str>" set to wr'
                'ong type'
            )

    def toDict(self):
        result = {}
        if self._ace is not None:
            result["ace"] = \
                self._ace
        if self._clusterLifetime is not None:
            result["clusterLifetime"] = \
                self._clusterLifetime
        if self._containerImage is not None:
            result["containerImage"] = \
                self._containerImage
        if self._dataInput:
            result["dataInput"] = \
                self._dataInput.toDict() if self._dataInput is not None else None
        if self._dataOutputMountPoint is not None:
            result["dataOutputMountPoint"] = \
                self._dataOutputMountPoint
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayImageURL is not None:
            result["displayImageURL"] = \
                self._displayImageURL
        if self._name is not None:
            result["name"] = \
                self._name
        if self._nworkers is not None:
            result["nworkers"] = \
                self._nworkers
        if self._schedulerInstanceType is not None:
            result["schedulerInstanceType"] = \
                self._schedulerInstanceType
        if self._schedulerStartupScript is not None:
            result["schedulerStartupScript"] = \
                self._schedulerStartupScript
        if self._workerInstanceType is not None:
            result["workerInstanceType"] = \
                self._workerInstanceType
        if self._workerStartupScript is not None:
            result["workerStartupScript"] = \
                self._workerStartupScript
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "ProjectTemplateParamsDeprecated.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if self._description is None:
            raise ValueError(
                "ProjectTemplateParamsDeprecated.description doesnt match requirement:" 
                "required: True"
            )
        if (self._description is not None
            and
            len(self._description) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.description: " + str(self._description) + 
                " doesnt match requirement: minLength: 1")
        if self._nworkers is None:
            raise ValueError(
                "ProjectTemplateParamsDeprecated.nworkers doesnt match requirement:" 
                "required: True"
            )
        if (self._nworkers is not None
            and
            self._nworkers < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.nworkers: " + str(self._nworkers) + 
                " doesnt match requirement: minimum: 1")
        if self._displayImageURL is None:
            raise ValueError(
                "ProjectTemplateParamsDeprecated.displayImageURL doesnt match requirement:" 
                "required: True"
            )
        if (self._displayImageURL is not None
            and
            len(self._displayImageURL) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.displayImageURL: " + str(self._displayImageURL) + 
                " doesnt match requirement: minLength: 1")
        if self._containerImage is None:
            raise ValueError(
                "ProjectTemplateParamsDeprecated.containerImage doesnt match requirement:" 
                "required: True"
            )
        if (self._containerImage is not None
            and
            len(self._containerImage) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.containerImage: " + str(self._containerImage) + 
                " doesnt match requirement: minLength: 1")
        if (self._containerImage is not None
            and
            not re.match(
                r"[\x20-\x7E]*",
                 self._containerImage)):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.containerImage: " + str(self._containerImage) + 
                " doesnt match requirement: pattern: [\x20-\x7E]*")
        if (self._schedulerStartupScript is not None
            and
            len(self._schedulerStartupScript) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.schedulerStartupScript: " + str(self._schedulerStartupScript) + 
                " doesnt match requirement: minLength: 1")
        if (self._schedulerInstanceType is not None
            and
            len(self._schedulerInstanceType) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.schedulerInstanceType: " + str(self._schedulerInstanceType) + 
                " doesnt match requirement: minLength: 1")
        if (self._workerStartupScript is not None
            and
            len(self._workerStartupScript) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.workerStartupScript: " + str(self._workerStartupScript) + 
                " doesnt match requirement: minLength: 1")
        if (self._workerInstanceType is not None
            and
            len(self._workerInstanceType) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.workerInstanceType: " + str(self._workerInstanceType) + 
                " doesnt match requirement: minLength: 1")
        if self._clusterLifetime is None:
            raise ValueError(
                "ProjectTemplateParamsDeprecated.clusterLifetime doesnt match requirement:" 
                "required: True"
            )
        if (self._clusterLifetime is not None
            and
            not re.match(
                r"[0-9]+[DdHhMmSs]",
                 self._clusterLifetime)):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.clusterLifetime: " + str(self._clusterLifetime) + 
                " doesnt match requirement: pattern: [0-9]+[DdHhMmSs]")
        if (self._ace is not None
            and
            len(self._ace) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.ace: " + str(self._ace) + 
                " doesnt match requirement: minLength: 1")
        if self._dataOutputMountPoint is None:
            raise ValueError(
                "ProjectTemplateParamsDeprecated.dataOutputMountPoint doesnt match requirement:" 
                "required: True"
            )
        if (self._dataOutputMountPoint is not None
            and
            len(self._dataOutputMountPoint) < 1):
            raise ValueError(
                "ProjectTemplateParamsDeprecated.dataOutputMountPoint: " + str(self._dataOutputMountPoint) + 
                " doesnt match requirement: minLength: 1")
        if (self._dataInput is not None): self._dataInput.isValid()
        return True
    

