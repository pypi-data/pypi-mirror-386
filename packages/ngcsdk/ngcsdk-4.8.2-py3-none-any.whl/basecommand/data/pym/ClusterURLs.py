"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AdditionalOpenPortURLs import AdditionalOpenPortURLs

# Unused import over optimization prevention
str(repr(AdditionalOpenPortURLs))


if sys.version_info > (3,):
    long = int
    unicode = str

class ClusterURLs(object):
    """Cluster URLs"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.additionalOpenPorts = (
            None if not fromDict or propDict.get(
                "additionalOpenPorts"
            ) is None
            else [ AdditionalOpenPortURLs(i)
            for i in propDict["additionalOpenPorts"] ])
        self.dashboard = (
            None if not fromDict or propDict.get(
                "dashboard"
            ) is None
            else propDict["dashboard"])
        self.scheduler = (
            None if not fromDict or propDict.get(
                "scheduler"
            ) is None
            else propDict["scheduler"])
        self.telemetry = (
            None if not fromDict or propDict.get(
                "telemetry"
            ) is None
            else propDict["telemetry"])

    @property
    def additionalOpenPorts(self):
        """list: Additional open port URLs"""
        return self._additionalOpenPorts

    @additionalOpenPorts.setter
    def additionalOpenPorts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._additionalOpenPorts = value
        else:
            raise TypeError(
                'Property "additionalOpenPorts" of type "list<AdditionalOpenP'
                'ortURLs>" set to wrong type'
            )

    @property
    def dashboard(self):
        """str: Dashboard endpoint URL"""
        return self._dashboard

    @dashboard.setter
    def dashboard(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dashboard = value
        else:
            raise TypeError(
                'Property "dashboard" of type "list<str>" set to wrong type'
            )

    @property
    def scheduler(self):
        """str: Scheduler endpoint URL"""
        return self._scheduler

    @scheduler.setter
    def scheduler(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._scheduler = value
        else:
            raise TypeError(
                'Property "scheduler" of type "list<str>" set to wrong type'
            )

    @property
    def telemetry(self):
        """str: Cluster telemetry URL"""
        return self._telemetry

    @telemetry.setter
    def telemetry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._telemetry = value
        else:
            raise TypeError(
                'Property "telemetry" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._additionalOpenPorts:
            result["additionalOpenPorts"] = [
                i.toDict() for i in self._additionalOpenPorts 
            ] if self._additionalOpenPorts else []
        if self._dashboard is not None:
            result["dashboard"] = \
                self._dashboard
        if self._scheduler is not None:
            result["scheduler"] = \
                self._scheduler
        if self._telemetry is not None:
            result["telemetry"] = \
                self._telemetry
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._scheduler is None:
            raise ValueError(
                "ClusterURLs.scheduler doesnt match requirement:" 
                "required: True"
            )
        if self._dashboard is None:
            raise ValueError(
                "ClusterURLs.dashboard doesnt match requirement:" 
                "required: True"
            )
        if self._additionalOpenPorts is None:
            raise ValueError(
                "ClusterURLs.additionalOpenPorts doesnt match requirement:" 
                "required: True"
            )
        if self._telemetry is None:
            raise ValueError(
                "ClusterURLs.telemetry doesnt match requirement:" 
                "required: True"
            )
        if (self._additionalOpenPorts is not None):
            for obj in self._additionalOpenPorts:
                if (obj is not None): obj.isValid()
        return True
    

