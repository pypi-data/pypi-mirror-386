"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ClusterInstance import ClusterInstance

# Unused import over optimization prevention
str(repr(ClusterInstance))


if sys.version_info > (3,):
    long = int
    unicode = str

class ClusterComponent(object):
    """Cluster Component"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.componentName = (
            None if not fromDict or propDict.get(
                "componentName"
            ) is None
            else propDict["componentName"])
        self.instanceTypes = (
            None if not fromDict or propDict.get(
                "instanceTypes"
            ) is None
            else [ ClusterInstance(i)
            for i in propDict["instanceTypes"] ])

    @property
    def componentName(self):
        """str: The cluster component for which these instance types are appli
        cable"""
        return self._componentName

    @componentName.setter
    def componentName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._componentName = value
        else:
            raise TypeError(
                'Property "componentName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def instanceTypes(self):
        """ """
        return self._instanceTypes

    @instanceTypes.setter
    def instanceTypes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._instanceTypes = value
        else:
            raise TypeError(
                'Property "instanceTypes" of type "list<ClusterInstance>" set'
                ' to wrong type'
            )

    def toDict(self):
        result = {}
        if self._componentName is not None:
            result["componentName"] = \
                self._componentName
        if self._instanceTypes:
            result["instanceTypes"] = [
                i.toDict() for i in self._instanceTypes 
            ] if self._instanceTypes else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._componentName is None:
            raise ValueError(
                "ClusterComponent.componentName doesnt match requirement:" 
                "required: True"
            )
        if (self._componentName is not None
            and
            len(self._componentName) < 1):
            raise ValueError(
                "ClusterComponent.componentName: " + str(self._componentName) + 
                " doesnt match requirement: minLength: 1")
        if self._instanceTypes is None:
            raise ValueError(
                "ClusterComponent.instanceTypes doesnt match requirement:" 
                "required: True"
            )
        if (self._instanceTypes is not None):
            for obj in self._instanceTypes:
                if (obj is not None): obj.isValid()
        return True
    

