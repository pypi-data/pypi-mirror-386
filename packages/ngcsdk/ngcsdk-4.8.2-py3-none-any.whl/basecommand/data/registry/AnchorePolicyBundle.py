"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ImageSelectionRule import ImageSelectionRule
from .Allowlist import Allowlist
from .RuleSet import RuleSet
from .MappingRule import MappingRule

# Unused import over optimization prevention
str(repr(MappingRule))
str(repr(Allowlist))
str(repr(ImageSelectionRule))
str(repr(RuleSet))


if sys.version_info > (3,):
    long = int
    unicode = str

class AnchorePolicyBundle(object):
    """A bundle containing a set of policies, allowlists, and rules for mappin
    g them to specific images. https://app.swaggerhub.com/apis/anchore/anc
    hore-engine/0.1.8#/PolicyBundleRecord"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allowlisted_images = (
            None if not fromDict or propDict.get(
                "allowlisted_images"
            ) is None
            else [ ImageSelectionRule(i)
            for i in propDict["allowlisted_images"] ])
        self.allowlists = (
            None if not fromDict or propDict.get(
                "allowlists"
            ) is None
            else [ Allowlist(i)
            for i in propDict["allowlists"] ])
        self.denylisted_images = (
            None if not fromDict or propDict.get(
                "denylisted_images"
            ) is None
            else [ ImageSelectionRule(i)
            for i in propDict["denylisted_images"] ])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.mappings = (
            None if not fromDict or propDict.get(
                "mappings"
            ) is None
            else [ MappingRule(i)
            for i in propDict["mappings"] ])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.rule_sets = (
            None if not fromDict or propDict.get(
                "rule_sets"
            ) is None
            else [ RuleSet(i)
            for i in propDict["rule_sets"] ])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def allowlisted_images(self):
        """list: List of mapping rules that define which images should always 
        be passed (unless also on the denylist), regardless of policy 
        result."""
        return self._allowlisted_images

    @allowlisted_images.setter
    def allowlisted_images(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._allowlisted_images = value
        else:
            raise TypeError(
                'Property "allowlisted_images" of type "list<ImageSelectionRu'
                'le>" set to wrong type'
            )

    @property
    def allowlists(self):
        """ """
        return self._allowlists

    @allowlists.setter
    def allowlists(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._allowlists = value
        else:
            raise TypeError(
                'Property "allowlists" of type "list<Allowlist>" set to wrong'
                ' type'
            )

    @property
    def denylisted_images(self):
        """list: List of mapping rules that define which images should always 
        result in a STOP/FAIL policy result regardless of policy conte
        nt or presence in allowlisted_images"""
        return self._denylisted_images

    @denylisted_images.setter
    def denylisted_images(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._denylisted_images = value
        else:
            raise TypeError(
                'Property "denylisted_images" of type "list<ImageSelectionRul'
                'e>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the bundle, human readable"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """str: Id of the bundle"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def mappings(self):
        """ """
        return self._mappings

    @mappings.setter
    def mappings(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._mappings = value
        else:
            raise TypeError(
                'Property "mappings" of type "list<MappingRule>" set to wrong'
                ' type'
            )

    @property
    def name(self):
        """str: Human readable name for the bundle"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def rule_sets(self):
        """ """
        return self._rule_sets

    @rule_sets.setter
    def rule_sets(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._rule_sets = value
        else:
            raise TypeError(
                'Property "rule_sets" of type "list<RuleSet>" set to wrong ty'
                'pe'
            )

    @property
    def version(self):
        """str: Version id for this bundle format"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._allowlisted_images:
            result["allowlisted_images"] = [
                i.toDict() for i in self._allowlisted_images 
            ] if self._allowlisted_images else []
        if self._allowlists:
            result["allowlists"] = [
                i.toDict() for i in self._allowlists 
            ] if self._allowlists else []
        if self._denylisted_images:
            result["denylisted_images"] = [
                i.toDict() for i in self._denylisted_images 
            ] if self._denylisted_images else []
        if self._description is not None:
            result["description"] = \
                self._description
        if self._id is not None:
            result["id"] = \
                self._id
        if self._mappings:
            result["mappings"] = [
                i.toDict() for i in self._mappings 
            ] if self._mappings else []
        if self._name is not None:
            result["name"] = \
                self._name
        if self._rule_sets:
            result["rule_sets"] = [
                i.toDict() for i in self._rule_sets 
            ] if self._rule_sets else []
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._allowlists is not None):
            for obj in self._allowlists:
                if (obj is not None): obj.isValid()
        if (self._rule_sets is not None):
            for obj in self._rule_sets:
                if (obj is not None): obj.isValid()
        if (self._mappings is not None):
            for obj in self._mappings:
                if (obj is not None): obj.isValid()
        if (self._allowlisted_images is not None):
            for obj in self._allowlisted_images:
                if (obj is not None): obj.isValid()
        if (self._denylisted_images is not None):
            for obj in self._denylisted_images:
                if (obj is not None): obj.isValid()
        return True
    

