"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class Jwk(object):
    """JSON Web Key"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.crv = (
            None if not fromDict or propDict.get(
                "crv"
            ) is None
            else propDict["crv"])
        self.kid = (
            None if not fromDict or propDict.get(
                "kid"
            ) is None
            else propDict["kid"])
        self.kty = (
            None if not fromDict or propDict.get(
                "kty"
            ) is None
            else propDict["kty"])
        self.x = (
            None if not fromDict or propDict.get(
                "x"
            ) is None
            else propDict["x"])
        self.y = (
            None if not fromDict or propDict.get(
                "y"
            ) is None
            else propDict["y"])

    @property
    def crv(self):
        """str: Elliptic Curve Public Key's: 'Curve' Parameter"""
        return self._crv

    @crv.setter
    def crv(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._crv = value
        else:
            raise TypeError(
                'Property "crv" of type "list<str>" set to wrong type'
            )

    @property
    def kid(self):
        """str: Key id"""
        return self._kid

    @kid.setter
    def kid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._kid = value
        else:
            raise TypeError(
                'Property "kid" of type "list<str>" set to wrong type'
            )

    @property
    def kty(self):
        """str: Key type"""
        return self._kty

    @kty.setter
    def kty(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._kty = value
        else:
            raise TypeError(
                'Property "kty" of type "list<str>" set to wrong type'
            )

    @property
    def x(self):
        """str: Elliptic Curve Public Key's: 'X Coordinate' Parameter"""
        return self._x

    @x.setter
    def x(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._x = value
        else:
            raise TypeError(
                'Property "x" of type "list<str>" set to wrong type'
            )

    @property
    def y(self):
        """str: Elliptic Curve Public Key's: 'Y Coordinate' Parameter"""
        return self._y

    @y.setter
    def y(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._y = value
        else:
            raise TypeError(
                'Property "y" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._crv is not None:
            result["crv"] = \
                self._crv
        if self._kid is not None:
            result["kid"] = \
                self._kid
        if self._kty is not None:
            result["kty"] = \
                self._kty
        if self._x is not None:
            result["x"] = \
                self._x
        if self._y is not None:
            result["y"] = \
                self._y
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

