"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class BaseImageDetails(object):
    """the details of a base image"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.digest = (
            None if not fromDict or propDict.get(
                "digest"
            ) is None
            else propDict["digest"])
        self.fullImageName = (
            None if not fromDict or propDict.get(
                "fullImageName"
            ) is None
            else propDict["fullImageName"])
        self.modifiedDate = (
            None if not fromDict or propDict.get(
                "modifiedDate"
            ) is None
            else propDict["modifiedDate"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.namespace = (
            None if not fromDict or propDict.get(
                "namespace"
            ) is None
            else propDict["namespace"])
        self.tagName = (
            None if not fromDict or propDict.get(
                "tagName"
            ) is None
            else propDict["tagName"])

    @property
    def digest(self):
        """str: digest of the image"""
        return self._digest

    @digest.setter
    def digest(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._digest = value
        else:
            raise TypeError(
                'Property "digest" of type "list<str>" set to wrong type'
            )

    @property
    def fullImageName(self):
        """str: full image name"""
        return self._fullImageName

    @fullImageName.setter
    def fullImageName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fullImageName = value
        else:
            raise TypeError(
                'Property "fullImageName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def modifiedDate(self):
        """str: date of last modification"""
        return self._modifiedDate

    @modifiedDate.setter
    def modifiedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._modifiedDate = value
        else:
            raise TypeError(
                'Property "modifiedDate" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def name(self):
        """ """
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def namespace(self):
        """ """
        return self._namespace

    @namespace.setter
    def namespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._namespace = value
        else:
            raise TypeError(
                'Property "namespace" of type "list<str>" set to wrong type'
            )

    @property
    def tagName(self):
        """ """
        return self._tagName

    @tagName.setter
    def tagName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tagName = value
        else:
            raise TypeError(
                'Property "tagName" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._digest is not None:
            result["digest"] = \
                self._digest
        if self._fullImageName is not None:
            result["fullImageName"] = \
                self._fullImageName
        if self._modifiedDate is not None:
            result["modifiedDate"] = \
                self._modifiedDate
        if self._name is not None:
            result["name"] = \
                self._name
        if self._namespace is not None:
            result["namespace"] = \
                self._namespace
        if self._tagName is not None:
            result["tagName"] = \
                self._tagName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

