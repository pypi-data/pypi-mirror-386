"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AnchorePolicyBundle import AnchorePolicyBundle

# Unused import over optimization prevention
str(repr(AnchorePolicyBundle))


if sys.version_info > (3,):
    long = int
    unicode = str

class AnchorePolicyBundleRecord(object):
    """A policy bundle plus some metadata"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.active = (
            None if not fromDict or propDict.get(
                "active"
            ) is None
            else propDict["active"])
        self.created_at = (
            None if not fromDict or propDict.get(
                "created_at"
            ) is None
            else propDict["created_at"])
        self.last_updated = (
            None if not fromDict or propDict.get(
                "last_updated"
            ) is None
            else propDict["last_updated"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.policyId = (
            None if not fromDict or propDict.get(
                "policyId"
            ) is None
            else propDict["policyId"])
        self.policy_source = (
            None if not fromDict or propDict.get(
                "policy_source"
            ) is None
            else propDict["policy_source"])
        self.policybundle = (
            None if not fromDict or propDict.get(
                "policybundle"
            ) is None
            else propDict["policybundle"])

    @property
    def active(self):
        """bool: Whether the policy is active"""
        return self._active

    @active.setter
    def active(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._active = value
        else:
            raise TypeError(
                'Property "active" of type "list<bool>" set to wrong type'
            )

    @property
    def created_at(self):
        """str: Policy create date in ISO-8601 format"""
        return self._created_at

    @created_at.setter
    def created_at(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._created_at = value
        else:
            raise TypeError(
                'Property "created_at" of type "list<str>" set to wrong type'
            )

    @property
    def last_updated(self):
        """str: Policy updated date in ISO-8601 format"""
        return self._last_updated

    @last_updated.setter
    def last_updated(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._last_updated = value
        else:
            raise TypeError(
                'Property "last_updated" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def name(self):
        """str: Policy name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def policyId(self):
        """str: Policy unique identifier in anchore engine"""
        return self._policyId

    @policyId.setter
    def policyId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._policyId = value
        else:
            raise TypeError(
                'Property "policyId" of type "list<str>" set to wrong type'
            )

    @property
    def policy_source(self):
        """str: The policy source"""
        return self._policy_source

    @policy_source.setter
    def policy_source(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._policy_source = value
        else:
            raise TypeError(
                'Property "policy_source" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def policybundle(self):
        """AnchorePolicyBundle: A bundle containing a set of policies, allowli
        sts, and rules for mapping them to specific images. https://ap
        p.swaggerhub.com/apis/anchore/anchore-engine/0.1.8#/PolicyBundleRecord
        """
        return self._policybundle

    @policybundle.setter
    def policybundle(self, value):
        if value is not None and not isinstance(value, AnchorePolicyBundle):
            value = AnchorePolicyBundle(value)
        if (value is None) or isinstance(value, AnchorePolicyBundle):
            self._policybundle = value
        else:
            raise TypeError(
                'Property "policybundle" of type "list<AnchorePolicyBundle>" '
                'set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._active is not None:
            result["active"] = \
                self._active
        if self._created_at is not None:
            result["created_at"] = \
                self._created_at
        if self._last_updated is not None:
            result["last_updated"] = \
                self._last_updated
        if self._name is not None:
            result["name"] = \
                self._name
        if self._policyId is not None:
            result["policyId"] = \
                self._policyId
        if self._policy_source is not None:
            result["policy_source"] = \
                self._policy_source
        if self._policybundle:
            result["policybundle"] = \
                self._policybundle.toDict() if self._policybundle is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._policybundle is not None): self._policybundle.isValid()
        return True
    

