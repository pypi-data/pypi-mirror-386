"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .PlatformManifest import PlatformManifest

# Unused import over optimization prevention
str(repr(PlatformManifest))


if sys.version_info > (3,):
    long = int
    unicode = str

class ManifestListByTagV2Response(object):
    """Multi-CPU architecture v2 manifest list. Media type: application/vnd.do
    cker.distribution.manifest.list.v2+json. See: https://github.com/docke
    r/distribution/blob/master/docs/spec/manifest-v2-2.md"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.digest = (
            None if not fromDict or propDict.get(
                "digest"
            ) is None
            else propDict["digest"])
        self.manifests = (
            None if not fromDict or propDict.get(
                "manifests"
            ) is None
            else [ PlatformManifest(i)
            for i in propDict["manifests"] ])
        self.mediaType = (
            None if not fromDict or propDict.get(
                "mediaType"
            ) is None
            else propDict["mediaType"])
        self.schemaVersion = (
            None if not fromDict or propDict.get(
                "schemaVersion"
            ) is None
            else propDict["schemaVersion"])

    @property
    def digest(self):
        """str: Digest of the manifest. Note: this field is not part the appli
        cation/vnd.docker.distribution.manifest.list.v2+json schema de
        finition"""
        return self._digest

    @digest.setter
    def digest(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._digest = value
        else:
            raise TypeError(
                'Property "digest" of type "list<str>" set to wrong type'
            )

    @property
    def manifests(self):
        """ """
        return self._manifests

    @manifests.setter
    def manifests(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._manifests = value
        else:
            raise TypeError(
                'Property "manifests" of type "list<PlatformManifest>" set to'
                ' wrong type'
            )

    @property
    def mediaType(self):
        """str: defines version. must be 'application/vnd.docker.distribution.
        manifest.list.v2+json'"""
        return self._mediaType

    @mediaType.setter
    def mediaType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mediaType = value
        else:
            raise TypeError(
                'Property "mediaType" of type "list<str>" set to wrong type'
            )

    @property
    def schemaVersion(self):
        """int: Response schema version"""
        return self._schemaVersion

    @schemaVersion.setter
    def schemaVersion(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._schemaVersion = value
        else:
            raise TypeError(
                'Property "schemaVersion" of type "list<int>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._digest is not None:
            result["digest"] = \
                self._digest
        if self._manifests:
            result["manifests"] = [
                i.toDict() for i in self._manifests 
            ] if self._manifests else []
        if self._mediaType is not None:
            result["mediaType"] = \
                self._mediaType
        if self._schemaVersion is not None:
            result["schemaVersion"] = \
                self._schemaVersion
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._manifests is not None):
            for obj in self._manifests:
                if (obj is not None): obj.isValid()
        return True
    

