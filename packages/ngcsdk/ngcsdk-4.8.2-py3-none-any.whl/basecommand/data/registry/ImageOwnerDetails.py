"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ImageOwnerDetails(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.isSigned = (
            None if not fromDict or propDict.get(
                "isSigned"
            ) is None
            else propDict["isSigned"])
        self.orgAlternateContact = (
            None if not fromDict or propDict.get(
                "orgAlternateContact"
            ) is None
            else propDict["orgAlternateContact"])
        self.orgOwnersEmails = (
            None if not fromDict or propDict.get(
                "orgOwnersEmails"
            ) is None
            else propDict["orgOwnersEmails"])
        self.pushedByUserEmail = (
            None if not fromDict or propDict.get(
                "pushedByUserEmail"
            ) is None
            else propDict["pushedByUserEmail"])
        self.pushedDate = (
            None if not fromDict or propDict.get(
                "pushedDate"
            ) is None
            else propDict["pushedDate"])
        self.repositoryCreatorUserEmail = (
            None if not fromDict or propDict.get(
                "repositoryCreatorUserEmail"
            ) is None
            else propDict["repositoryCreatorUserEmail"])
        self.repositoryName = (
            None if not fromDict or propDict.get(
                "repositoryName"
            ) is None
            else propDict["repositoryName"])
        self.tag = (
            None if not fromDict or propDict.get(
                "tag"
            ) is None
            else propDict["tag"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def isSigned(self):
        """bool: Whether the tag is signed"""
        return self._isSigned

    @isSigned.setter
    def isSigned(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSigned = value
        else:
            raise TypeError(
                'Property "isSigned" of type "list<bool>" set to wrong type'
            )

    @property
    def orgAlternateContact(self):
        """str: Email address of alternate contact for organization the image 
        was pushed to"""
        return self._orgAlternateContact

    @orgAlternateContact.setter
    def orgAlternateContact(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgAlternateContact = value
        else:
            raise TypeError(
                'Property "orgAlternateContact" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def orgOwnersEmails(self):
        """list: Email addresses of all owners of organization the image was p
        ushed to"""
        return self._orgOwnersEmails

    @orgOwnersEmails.setter
    def orgOwnersEmails(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._orgOwnersEmails = value
        else:
            raise TypeError(
                'Property "orgOwnersEmails" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def pushedByUserEmail(self):
        """str: Email address of account used to push the image"""
        return self._pushedByUserEmail

    @pushedByUserEmail.setter
    def pushedByUserEmail(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pushedByUserEmail = value
        else:
            raise TypeError(
                'Property "pushedByUserEmail" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def pushedDate(self):
        """str: Image pushed date in ISO-8601 format"""
        return self._pushedDate

    @pushedDate.setter
    def pushedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pushedDate = value
        else:
            raise TypeError(
                'Property "pushedDate" of type "list<str>" set to wrong type'
            )

    @property
    def repositoryCreatorUserEmail(self):
        """str: Email address of account used to create the repository the ima
        ge is in"""
        return self._repositoryCreatorUserEmail

    @repositoryCreatorUserEmail.setter
    def repositoryCreatorUserEmail(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._repositoryCreatorUserEmail = value
        else:
            raise TypeError(
                'Property "repositoryCreatorUserEmail" of type "list<str>" se'
                't to wrong type'
            )

    @property
    def repositoryName(self):
        """str: The repository name of this image"""
        return self._repositoryName

    @repositoryName.setter
    def repositoryName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._repositoryName = value
        else:
            raise TypeError(
                'Property "repositoryName" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def tag(self):
        """str: Image tag"""
        return self._tag

    @tag.setter
    def tag(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tag = value
        else:
            raise TypeError(
                'Property "tag" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Image update date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._isSigned is not None:
            result["isSigned"] = \
                self._isSigned
        if self._orgAlternateContact is not None:
            result["orgAlternateContact"] = \
                self._orgAlternateContact
        if self._orgOwnersEmails is not None:
            result["orgOwnersEmails"] = \
                self._orgOwnersEmails
        if self._pushedByUserEmail is not None:
            result["pushedByUserEmail"] = \
                self._pushedByUserEmail
        if self._pushedDate is not None:
            result["pushedDate"] = \
                self._pushedDate
        if self._repositoryCreatorUserEmail is not None:
            result["repositoryCreatorUserEmail"] = \
                self._repositoryCreatorUserEmail
        if self._repositoryName is not None:
            result["repositoryName"] = \
                self._repositoryName
        if self._tag is not None:
            result["tag"] = \
                self._tag
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

