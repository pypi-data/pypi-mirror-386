"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class OciBlobsHistory(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.comment = (
            None if not fromDict or propDict.get(
                "comment"
            ) is None
            else propDict["comment"])
        self.created = (
            None if not fromDict or propDict.get(
                "created"
            ) is None
            else propDict["created"])
        self.created_by = (
            None if not fromDict or propDict.get(
                "created_by"
            ) is None
            else propDict["created_by"])
        self.empty_layer = (
            None if not fromDict or propDict.get(
                "empty_layer"
            ) is None
            else propDict["empty_layer"])

    @property
    def comment(self):
        """str: buildkit comment"""
        return self._comment

    @comment.setter
    def comment(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._comment = value
        else:
            raise TypeError(
                'Property "comment" of type "list<str>" set to wrong type'
            )

    @property
    def created(self):
        """str: created time"""
        return self._created

    @created.setter
    def created(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._created = value
        else:
            raise TypeError(
                'Property "created" of type "list<str>" set to wrong type'
            )

    @property
    def created_by(self):
        """str: created commands"""
        return self._created_by

    @created_by.setter
    def created_by(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._created_by = value
        else:
            raise TypeError(
                'Property "created_by" of type "list<str>" set to wrong type'
            )

    @property
    def empty_layer(self):
        """bool: record if layer is empty"""
        return self._empty_layer

    @empty_layer.setter
    def empty_layer(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._empty_layer = value
        else:
            raise TypeError(
                'Property "empty_layer" of type "list<bool>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._comment is not None:
            result["comment"] = \
                self._comment
        if self._created is not None:
            result["created"] = \
                self._created
        if self._created_by is not None:
            result["created_by"] = \
                self._created_by
        if self._empty_layer is not None:
            result["empty_layer"] = \
                self._empty_layer
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

