"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ReleaseTypeEnum import ReleaseTypeEnum
from .ScanStatus import ScanStatusEnum
from .MalwareScanStatusEnum import MalwareScanStatusEnum
from .ImageArchitectureVariant import ImageArchitectureVariant
from .PolicyEnum import PolicyEnum

# Unused import over optimization prevention
str(repr(ImageArchitectureVariant))
str(repr(ScanStatusEnum))
str(repr(MalwareScanStatusEnum))
str(repr(PolicyEnum))
str(repr(ReleaseTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class MetaImageDetails(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.architectureVariants = (
            None if not fromDict or propDict.get(
                "architectureVariants"
            ) is None
            else [ ImageArchitectureVariant(i)
            for i in propDict["architectureVariants"] ])
        self.baseImageName = (
            None if not fromDict or propDict.get(
                "baseImageName"
            ) is None
            else propDict["baseImageName"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.digest = (
            None if not fromDict or propDict.get(
                "digest"
            ) is None
            else propDict["digest"])
        self.isMultiArchitecture = (
            None if not fromDict or propDict.get(
                "isMultiArchitecture"
            ) is None
            else propDict["isMultiArchitecture"])
        self.isSigned = (
            None if not fromDict or propDict.get(
                "isSigned"
            ) is None
            else propDict["isSigned"])
        self.malwareScanDate = (
            None if not fromDict or propDict.get(
                "malwareScanDate"
            ) is None
            else propDict["malwareScanDate"])
        self.malwareScanStatus = (
            None if not fromDict or propDict.get(
                "malwareScanStatus"
            ) is None
            else propDict["malwareScanStatus"])
        self.policy = (
            None if not fromDict or propDict.get(
                "policy"
            ) is None
            else propDict["policy"])
        self.pushedDate = (
            None if not fromDict or propDict.get(
                "pushedDate"
            ) is None
            else propDict["pushedDate"])
        self.releaseType = (
            None if not fromDict or propDict.get(
                "releaseType"
            ) is None
            else propDict["releaseType"])
        self.scanDate = (
            None if not fromDict or propDict.get(
                "scanDate"
            ) is None
            else propDict["scanDate"])
        self.scanEnabled = (
            None if not fromDict or propDict.get(
                "scanEnabled"
            ) is None
            else propDict["scanEnabled"])
        self.scanStatus = (
            None if not fromDict or propDict.get(
                "scanStatus"
            ) is None
            else propDict["scanStatus"])
        self.size = (
            None if not fromDict or propDict.get(
                "size"
            ) is None
            else propDict["size"])
        self.tag = (
            None if not fromDict or propDict.get(
                "tag"
            ) is None
            else propDict["tag"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])
        self.user = (
            None if not fromDict or propDict.get(
                "user"
            ) is None
            else propDict["user"])

    @property
    def architectureVariants(self):
        """ """
        return self._architectureVariants

    @architectureVariants.setter
    def architectureVariants(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._architectureVariants = value
        else:
            raise TypeError(
                'Property "architectureVariants" of type "list<ImageArchitect'
                'ureVariant>" set to wrong type'
            )

    @property
    def baseImageName(self):
        """str: The base image name of this image"""
        return self._baseImageName

    @baseImageName.setter
    def baseImageName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._baseImageName = value
        else:
            raise TypeError(
                'Property "baseImageName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def description(self):
        """str: Image description, release notes, etc."""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def digest(self):
        """str: Image digest"""
        return self._digest

    @digest.setter
    def digest(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._digest = value
        else:
            raise TypeError(
                'Property "digest" of type "list<str>" set to wrong type'
            )

    @property
    def isMultiArchitecture(self):
        """bool: Flag indicating if this image supports multiple CPU platforms
         and architectures"""
        return self._isMultiArchitecture

    @isMultiArchitecture.setter
    def isMultiArchitecture(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isMultiArchitecture = value
        else:
            raise TypeError(
                'Property "isMultiArchitecture" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def isSigned(self):
        """bool: whether the tag is signed"""
        return self._isSigned

    @isSigned.setter
    def isSigned(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSigned = value
        else:
            raise TypeError(
                'Property "isSigned" of type "list<bool>" set to wrong type'
            )

    @property
    def malwareScanDate(self):
        """str: Scan date in ISO-8601 format"""
        return self._malwareScanDate

    @malwareScanDate.setter
    def malwareScanDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._malwareScanDate = value
        else:
            raise TypeError(
                'Property "malwareScanDate" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def malwareScanStatus(self):
        """MalwareScanStatusEnum: Malware scan status"""
        return self._malwareScanStatus

    @malwareScanStatus.setter
    def malwareScanStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._malwareScanStatus = value
        else:
            raise TypeError(
                'Property "malwareScanStatus" of type "list<MalwareScanStatus'
                'Enum>" set to wrong type'
            )

    @property
    def policy(self):
        """list: Policy label to be added to a specific version"""
        return self._policy

    @policy.setter
    def policy(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._policy = value
        else:
            raise TypeError(
                'Property "policy" of type "list<PolicyEnum>" set to wrong ty'
                'pe'
            )

    @property
    def pushedDate(self):
        """str: Image pushed date in ISO-8601 format"""
        return self._pushedDate

    @pushedDate.setter
    def pushedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pushedDate = value
        else:
            raise TypeError(
                'Property "pushedDate" of type "list<str>" set to wrong type'
            )

    @property
    def releaseType(self):
        """ReleaseTypeEnum: Release type enum for the container image tag in t
        he product lifecycle."""
        return self._releaseType

    @releaseType.setter
    def releaseType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._releaseType = value
        else:
            raise TypeError(
                'Property "releaseType" of type "list<ReleaseTypeEnum>" set t'
                'o wrong type'
            )

    @property
    def scanDate(self):
        """str: Deprecated: Use architectureVariants fields. Image scan date i
        n ISO-8601 format"""
        return self._scanDate

    @scanDate.setter
    def scanDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._scanDate = value
        else:
            raise TypeError(
                'Property "scanDate" of type "list<str>" set to wrong type'
            )

    @property
    def scanEnabled(self):
        """bool: Whether image security scanning is enabled"""
        return self._scanEnabled

    @scanEnabled.setter
    def scanEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._scanEnabled = value
        else:
            raise TypeError(
                'Property "scanEnabled" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def scanStatus(self):
        """ScanStatusEnum: Image scan statuses"""
        return self._scanStatus

    @scanStatus.setter
    def scanStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._scanStatus = value
        else:
            raise TypeError(
                'Property "scanStatus" of type "list<ScanStatusEnum>" set to '
                'wrong type'
            )

    @property
    def size(self):
        """long: Image size in bytes"""
        return self._size

    @size.setter
    def size(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._size = value
        else:
            raise TypeError(
                'Property "size" of type "list<long>" set to wrong type'
            )

    @property
    def tag(self):
        """str: Image tag"""
        return self._tag

    @tag.setter
    def tag(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tag = value
        else:
            raise TypeError(
                'Property "tag" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Image update date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    @property
    def user(self):
        """str: Client id used to push the image"""
        return self._user

    @user.setter
    def user(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._user = value
        else:
            raise TypeError(
                'Property "user" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._architectureVariants:
            result["architectureVariants"] = [
                i.toDict() for i in self._architectureVariants 
            ] if self._architectureVariants else []
        if self._baseImageName is not None:
            result["baseImageName"] = \
                self._baseImageName
        if self._description is not None:
            result["description"] = \
                self._description
        if self._digest is not None:
            result["digest"] = \
                self._digest
        if self._isMultiArchitecture is not None:
            result["isMultiArchitecture"] = \
                self._isMultiArchitecture
        if self._isSigned is not None:
            result["isSigned"] = \
                self._isSigned
        if self._malwareScanDate is not None:
            result["malwareScanDate"] = \
                self._malwareScanDate
        if self._malwareScanStatus is not None:
            result["malwareScanStatus"] = \
                self._malwareScanStatus
        if self._policy is not None:
            result["policy"] = \
                self._policy
        if self._pushedDate is not None:
            result["pushedDate"] = \
                self._pushedDate
        if self._releaseType is not None:
            result["releaseType"] = \
                self._releaseType
        if self._scanDate is not None:
            result["scanDate"] = \
                self._scanDate
        if self._scanEnabled is not None:
            result["scanEnabled"] = \
                self._scanEnabled
        if self._scanStatus is not None:
            result["scanStatus"] = \
                self._scanStatus
        if self._size is not None:
            result["size"] = \
                self._size
        if self._tag is not None:
            result["tag"] = \
                self._tag
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        if self._user is not None:
            result["user"] = \
                self._user
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._malwareScanDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._malwareScanDate)):
            raise ValueError(
                "MetaImageDetails.malwareScanDate: " + str(self._malwareScanDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        if (self._architectureVariants is not None):
            for obj in self._architectureVariants:
                if (obj is not None): obj.isValid()
        return True
    

