"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SecurityRatingType import SecurityRatingTypeEnum

# Unused import over optimization prevention
str(repr(SecurityRatingTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class SecurityRatingDescription(object):
    """Security rating description"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.details = (
            None if not fromDict or propDict.get(
                "details"
            ) is None
            else propDict["details"])
        self.scale = (
            None if not fromDict or propDict.get(
                "scale"
            ) is None
            else propDict["scale"])
        self.vulnerabilities = (
            None if not fromDict or propDict.get(
                "vulnerabilities"
            ) is None
            else propDict["vulnerabilities"])
        self.vulnerabilitiesMaxCount = (
            None if not fromDict or propDict.get(
                "vulnerabilitiesMaxCount"
            ) is None
            else propDict["vulnerabilitiesMaxCount"])
        self.vulnerabilitiesMinCount = (
            None if not fromDict or propDict.get(
                "vulnerabilitiesMinCount"
            ) is None
            else propDict["vulnerabilitiesMinCount"])

    @property
    def description(self):
        """str: Description of the security rating"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def details(self):
        """str: Detailed description relating to the number of packages vulner
        abilities when this security rating is given"""
        return self._details

    @details.setter
    def details(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._details = value
        else:
            raise TypeError(
                'Property "details" of type "list<str>" set to wrong type'
            )

    @property
    def scale(self):
        """SecurityRatingTypeEnum: Security Rating Type"""
        return self._scale

    @scale.setter
    def scale(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._scale = value
        else:
            raise TypeError(
                'Property "scale" of type "list<SecurityRatingTypeEnum>" set '
                'to wrong type'
            )

    @property
    def vulnerabilities(self):
        """str: Numeric description relating to the number of packages vulnera
        bilities when this rating is given"""
        return self._vulnerabilities

    @vulnerabilities.setter
    def vulnerabilities(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._vulnerabilities = value
        else:
            raise TypeError(
                'Property "vulnerabilities" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def vulnerabilitiesMaxCount(self):
        """int: Upper bound for the vulnerability count used for rating calcul
        ation (inclusive)"""
        return self._vulnerabilitiesMaxCount

    @vulnerabilitiesMaxCount.setter
    def vulnerabilitiesMaxCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._vulnerabilitiesMaxCount = value
        else:
            raise TypeError(
                'Property "vulnerabilitiesMaxCount" of type "list<int>" set t'
                'o wrong type'
            )

    @property
    def vulnerabilitiesMinCount(self):
        """int: Lower bound for the vulnerability count used for rating calcul
        ation (inclusive)"""
        return self._vulnerabilitiesMinCount

    @vulnerabilitiesMinCount.setter
    def vulnerabilitiesMinCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._vulnerabilitiesMinCount = value
        else:
            raise TypeError(
                'Property "vulnerabilitiesMinCount" of type "list<int>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._description is not None:
            result["description"] = \
                self._description
        if self._details is not None:
            result["details"] = \
                self._details
        if self._scale is not None:
            result["scale"] = \
                self._scale
        if self._vulnerabilities is not None:
            result["vulnerabilities"] = \
                self._vulnerabilities
        if self._vulnerabilitiesMaxCount is not None:
            result["vulnerabilitiesMaxCount"] = \
                self._vulnerabilitiesMaxCount
        if self._vulnerabilitiesMinCount is not None:
            result["vulnerabilitiesMinCount"] = \
                self._vulnerabilitiesMinCount
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._scale is None:
            raise ValueError(
                "SecurityRatingDescription.scale doesnt match requirement:" 
                "required: True"
            )
        if self._description is None:
            raise ValueError(
                "SecurityRatingDescription.description doesnt match requirement:" 
                "required: True"
            )
        if self._vulnerabilities is None:
            raise ValueError(
                "SecurityRatingDescription.vulnerabilities doesnt match requirement:" 
                "required: True"
            )
        if self._details is None:
            raise ValueError(
                "SecurityRatingDescription.details doesnt match requirement:" 
                "required: True"
            )
        if self._vulnerabilitiesMinCount is None:
            raise ValueError(
                "SecurityRatingDescription.vulnerabilitiesMinCount doesnt match requirement:" 
                "required: True"
            )
        if self._vulnerabilitiesMaxCount is None:
            raise ValueError(
                "SecurityRatingDescription.vulnerabilitiesMaxCount doesnt match requirement:" 
                "required: True"
            )
        return True
    

