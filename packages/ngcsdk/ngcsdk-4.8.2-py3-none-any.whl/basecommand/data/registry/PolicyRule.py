"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AnchoreParameter import AnchoreParameter

# Unused import over optimization prevention
str(repr(AnchoreParameter))


if sys.version_info > (3,):
    long = int
    unicode = str

class PolicyRule(object):
    """A rule that defines and decision value if the match is found true for a
     given image."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.action = (
            None if not fromDict or propDict.get(
                "action"
            ) is None
            else propDict["action"])
        self.gate = (
            None if not fromDict or propDict.get(
                "gate"
            ) is None
            else propDict["gate"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.params = (
            None if not fromDict or propDict.get(
                "params"
            ) is None
            else [ AnchoreParameter(i)
            for i in propDict["params"] ])
        self.trigger = (
            None if not fromDict or propDict.get(
                "trigger"
            ) is None
            else propDict["trigger"])

    @property
    def action(self):
        """ """
        return self._action

    @action.setter
    def action(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._action = value
        else:
            raise TypeError(
                'Property "action" of type "list<str>" set to wrong type'
            )

    @property
    def gate(self):
        """ """
        return self._gate

    @gate.setter
    def gate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gate = value
        else:
            raise TypeError(
                'Property "gate" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """ """
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def params(self):
        """ """
        return self._params

    @params.setter
    def params(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._params = value
        else:
            raise TypeError(
                'Property "params" of type "list<AnchoreParameter>" set to wr'
                'ong type'
            )

    @property
    def trigger(self):
        """ """
        return self._trigger

    @trigger.setter
    def trigger(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._trigger = value
        else:
            raise TypeError(
                'Property "trigger" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._action is not None:
            result["action"] = \
                self._action
        if self._gate is not None:
            result["gate"] = \
                self._gate
        if self._id is not None:
            result["id"] = \
                self._id
        if self._params:
            result["params"] = [
                i.toDict() for i in self._params 
            ] if self._params else []
        if self._trigger is not None:
            result["trigger"] = \
                self._trigger
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._params is not None):
            for obj in self._params:
                if (obj is not None): obj.isValid()
        return True
    

