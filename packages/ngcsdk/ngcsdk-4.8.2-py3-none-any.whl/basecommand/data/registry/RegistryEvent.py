"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .EventSource import EventSource
from .EventTarget import EventTarget
from .EventRequest import EventRequest
from .Actor import Actor

# Unused import over optimization prevention
str(repr(EventSource))
str(repr(EventTarget))
str(repr(EventRequest))
str(repr(Actor))


if sys.version_info > (3,):
    long = int
    unicode = str

class RegistryEvent(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.action = (
            None if not fromDict or propDict.get(
                "action"
            ) is None
            else propDict["action"])
        self.actor = (
            None if not fromDict or propDict.get(
                "actor"
            ) is None
            else propDict["actor"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.request = (
            None if not fromDict or propDict.get(
                "request"
            ) is None
            else propDict["request"])
        self.source = (
            None if not fromDict or propDict.get(
                "source"
            ) is None
            else propDict["source"])
        self.target = (
            None if not fromDict or propDict.get(
                "target"
            ) is None
            else propDict["target"])
        self.timestamp = (
            None if not fromDict or propDict.get(
                "timestamp"
            ) is None
            else propDict["timestamp"])

    @property
    def action(self):
        """str: Action indicates what action encompasses the provided event.
        """
        return self._action

    @action.setter
    def action(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._action = value
        else:
            raise TypeError(
                'Property "action" of type "list<str>" set to wrong type'
            )

    @property
    def actor(self):
        """ """
        return self._actor

    @actor.setter
    def actor(self, value):
        if value is not None and not isinstance(value, Actor):
            value = Actor(value)
        if (value is None) or isinstance(value, Actor):
            self._actor = value
        else:
            raise TypeError(
                'Property "actor" of type "list<Actor>" set to wrong type'
            )

    @property
    def id(self):
        """str: ID provides a unique identifier for the event."""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def request(self):
        """ """
        return self._request

    @request.setter
    def request(self, value):
        if value is not None and not isinstance(value, EventRequest):
            value = EventRequest(value)
        if (value is None) or isinstance(value, EventRequest):
            self._request = value
        else:
            raise TypeError(
                'Property "request" of type "list<EventRequest>" set to wrong'
                ' type'
            )

    @property
    def source(self):
        """ """
        return self._source

    @source.setter
    def source(self, value):
        if value is not None and not isinstance(value, EventSource):
            value = EventSource(value)
        if (value is None) or isinstance(value, EventSource):
            self._source = value
        else:
            raise TypeError(
                'Property "source" of type "list<EventSource>" set to wrong t'
                'ype'
            )

    @property
    def target(self):
        """EventTarget: Target uniquely describes the target of the event."""
        return self._target

    @target.setter
    def target(self, value):
        if value is not None and not isinstance(value, EventTarget):
            value = EventTarget(value)
        if (value is None) or isinstance(value, EventTarget):
            self._target = value
        else:
            raise TypeError(
                'Property "target" of type "list<EventTarget>" set to wrong t'
                'ype'
            )

    @property
    def timestamp(self):
        """str: Timestamp is the time at which the event occurred."""
        return self._timestamp

    @timestamp.setter
    def timestamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._timestamp = value
        else:
            raise TypeError(
                'Property "timestamp" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._action is not None:
            result["action"] = \
                self._action
        if self._actor:
            result["actor"] = \
                self._actor.toDict() if self._actor is not None else None
        if self._id is not None:
            result["id"] = \
                self._id
        if self._request:
            result["request"] = \
                self._request.toDict() if self._request is not None else None
        if self._source:
            result["source"] = \
                self._source.toDict() if self._source is not None else None
        if self._target:
            result["target"] = \
                self._target.toDict() if self._target is not None else None
        if self._timestamp is not None:
            result["timestamp"] = \
                self._timestamp
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._target is not None): self._target.isValid()
        if (self._request is not None): self._request.isValid()
        if (self._actor is not None): self._actor.isValid()
        if (self._source is not None): self._source.isValid()
        return True
    

