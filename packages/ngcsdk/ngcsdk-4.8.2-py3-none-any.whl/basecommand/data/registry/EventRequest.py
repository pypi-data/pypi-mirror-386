"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class EventRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.addr = (
            None if not fromDict or propDict.get(
                "addr"
            ) is None
            else propDict["addr"])
        self.host = (
            None if not fromDict or propDict.get(
                "host"
            ) is None
            else propDict["host"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.method = (
            None if not fromDict or propDict.get(
                "method"
            ) is None
            else propDict["method"])
        self.useragent = (
            None if not fromDict or propDict.get(
                "useragent"
            ) is None
            else propDict["useragent"])

    @property
    def addr(self):
        """str: Addr contains the ip or hostname and possibly port of the clie
        nt connection that initiated the event. This is the RemoteAddr
         from the standard http request."""
        return self._addr

    @addr.setter
    def addr(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._addr = value
        else:
            raise TypeError(
                'Property "addr" of type "list<str>" set to wrong type'
            )

    @property
    def host(self):
        """str: Host is the externally accessible host name of the registry in
        stance, as specified by the http host header on incoming reque
        sts."""
        return self._host

    @host.setter
    def host(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._host = value
        else:
            raise TypeError(
                'Property "host" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """str: ID uniquely identifies the request that initiated the event.
        """
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def method(self):
        """str: Method has the request method that generated the event."""
        return self._method

    @method.setter
    def method(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._method = value
        else:
            raise TypeError(
                'Property "method" of type "list<str>" set to wrong type'
            )

    @property
    def useragent(self):
        """str: UserAgent contains the user agent header of the request."""
        return self._useragent

    @useragent.setter
    def useragent(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._useragent = value
        else:
            raise TypeError(
                'Property "useragent" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._addr is not None:
            result["addr"] = \
                self._addr
        if self._host is not None:
            result["host"] = \
                self._host
        if self._id is not None:
            result["id"] = \
                self._id
        if self._method is not None:
            result["method"] = \
                self._method
        if self._useragent is not None:
            result["useragent"] = \
                self._useragent
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

