"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .PaginationInfo import PaginationInfo
from .MetaImageDetails import MetaImageDetails
from .RequestStatus import RequestStatus

# Unused import over optimization prevention
str(repr(PaginationInfo))
str(repr(MetaImageDetails))
str(repr(RequestStatus))


if sys.version_info > (3,):
    long = int
    unicode = str

class MetaImageDetailsList(object):
    """Repository images list"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.images = (
            None if not fromDict or propDict.get(
                "images"
            ) is None
            else [ MetaImageDetails(i)
            for i in propDict["images"] ])
        self.paginationInfo = (
            None if not fromDict or propDict.get(
                "paginationInfo"
            ) is None
            else propDict["paginationInfo"])
        self.repositoryName = (
            None if not fromDict or propDict.get(
                "repositoryName"
            ) is None
            else propDict["repositoryName"])
        self.repositoryNamespace = (
            None if not fromDict or propDict.get(
                "repositoryNamespace"
            ) is None
            else propDict["repositoryNamespace"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])

    @property
    def images(self):
        """list: Images in repository"""
        return self._images

    @images.setter
    def images(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._images = value
        else:
            raise TypeError(
                'Property "images" of type "list<MetaImageDetails>" set to wr'
                'ong type'
            )

    @property
    def paginationInfo(self):
        """PaginationInfo: object that describes the pagination information"""
        return self._paginationInfo

    @paginationInfo.setter
    def paginationInfo(self, value):
        if value is not None and not isinstance(value, PaginationInfo):
            value = PaginationInfo(value)
        if (value is None) or isinstance(value, PaginationInfo):
            self._paginationInfo = value
        else:
            raise TypeError(
                'Property "paginationInfo" of type "list<PaginationInfo>" set'
                ' to wrong type'
            )

    @property
    def repositoryName(self):
        """str: Repository name"""
        return self._repositoryName

    @repositoryName.setter
    def repositoryName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._repositoryName = value
        else:
            raise TypeError(
                'Property "repositoryName" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def repositoryNamespace(self):
        """str: Repository namespace (org) or (org/team)"""
        return self._repositoryNamespace

    @repositoryNamespace.setter
    def repositoryNamespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._repositoryNamespace = value
        else:
            raise TypeError(
                'Property "repositoryNamespace" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    def toDict(self):
        result = {}
        if self._images:
            result["images"] = [
                i.toDict() for i in self._images 
            ] if self._images else []
        if self._paginationInfo:
            result["paginationInfo"] = \
                self._paginationInfo.toDict() if self._paginationInfo is not None else None
        if self._repositoryName is not None:
            result["repositoryName"] = \
                self._repositoryName
        if self._repositoryNamespace is not None:
            result["repositoryNamespace"] = \
                self._repositoryNamespace
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._images is not None):
            for obj in self._images:
                if (obj is not None): obj.isValid()
        if (self._paginationInfo is not None): self._paginationInfo.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

