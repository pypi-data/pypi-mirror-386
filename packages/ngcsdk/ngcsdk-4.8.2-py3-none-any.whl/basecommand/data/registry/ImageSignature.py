"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Header import Header

# Unused import over optimization prevention
str(repr(Header))


if sys.version_info > (3,):
    long = int
    unicode = str

class ImageSignature(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.header = (
            None if not fromDict or propDict.get(
                "header"
            ) is None
            else propDict["header"])
        self.signature = (
            None if not fromDict or propDict.get(
                "signature"
            ) is None
            else propDict["signature"])

    @property
    def header(self):
        """Header: Signature header"""
        return self._header

    @header.setter
    def header(self, value):
        if value is not None and not isinstance(value, Header):
            value = Header(value)
        if (value is None) or isinstance(value, Header):
            self._header = value
        else:
            raise TypeError(
                'Property "header" of type "list<Header>" set to wrong type'
            )

    @property
    def signature(self):
        """str: Signature"""
        return self._signature

    @signature.setter
    def signature(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._signature = value
        else:
            raise TypeError(
                'Property "signature" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._header:
            result["header"] = \
                self._header.toDict() if self._header is not None else None
        if self._signature is not None:
            result["signature"] = \
                self._signature
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._header is not None): self._header.isValid()
        return True
    

