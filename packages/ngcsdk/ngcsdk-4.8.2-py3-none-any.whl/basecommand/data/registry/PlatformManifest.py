"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Platform import Platform

# Unused import over optimization prevention
str(repr(Platform))


if sys.version_info > (3,):
    long = int
    unicode = str

class PlatformManifest(object):
    """Image manifest specific to a platform i.e. os/architecture. Used for mu
    lti-arch manifest list. For more information see: https://github.com/d
    ocker/distribution/blob/master/docs/spec/manifest-v2-2.md"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.digest = (
            None if not fromDict or propDict.get(
                "digest"
            ) is None
            else propDict["digest"])
        self.mediaType = (
            None if not fromDict or propDict.get(
                "mediaType"
            ) is None
            else propDict["mediaType"])
        self.platform = (
            None if not fromDict or propDict.get(
                "platform"
            ) is None
            else propDict["platform"])
        self.size = (
            None if not fromDict or propDict.get(
                "size"
            ) is None
            else propDict["size"])

    @property
    def digest(self):
        """str: The digest of the content, as defined by the Registry V2 HTTP 
        API Specificiation."""
        return self._digest

    @digest.setter
    def digest(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._digest = value
        else:
            raise TypeError(
                'Property "digest" of type "list<str>" set to wrong type'
            )

    @property
    def mediaType(self):
        """str: The MIME type of the referenced object. This will generally be
         application/vnd.docker.distribution.manifest.v2+json, but it 
        could also be application/vnd.docker.distribution.manifest.v1+json if 
        the manifest list references a legacy schema-1 manifest."""
        return self._mediaType

    @mediaType.setter
    def mediaType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mediaType = value
        else:
            raise TypeError(
                'Property "mediaType" of type "list<str>" set to wrong type'
            )

    @property
    def platform(self):
        """ """
        return self._platform

    @platform.setter
    def platform(self, value):
        if value is not None and not isinstance(value, Platform):
            value = Platform(value)
        if (value is None) or isinstance(value, Platform):
            self._platform = value
        else:
            raise TypeError(
                'Property "platform" of type "list<Platform>" set to wrong ty'
                'pe'
            )

    @property
    def size(self):
        """int: The size in bytes of the object. This field exists so that a c
        lient will have an expected size for the content before valida
        ting. If the length of the retrieved content does not match the specif
        ied length, the content should not be trusted."""
        return self._size

    @size.setter
    def size(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._size = value
        else:
            raise TypeError(
                'Property "size" of type "list<int>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._digest is not None:
            result["digest"] = \
                self._digest
        if self._mediaType is not None:
            result["mediaType"] = \
                self._mediaType
        if self._platform:
            result["platform"] = \
                self._platform.toDict() if self._platform is not None else None
        if self._size is not None:
            result["size"] = \
                self._size
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._platform is not None): self._platform.isValid()
        return True
    

