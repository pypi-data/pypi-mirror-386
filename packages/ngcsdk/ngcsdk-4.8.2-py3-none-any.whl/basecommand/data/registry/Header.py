"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Jwk import Jwk

# Unused import over optimization prevention
str(repr(Jwk))


if sys.version_info > (3,):
    long = int
    unicode = str

class Header(object):
    """Signature header"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.alg = (
            None if not fromDict or propDict.get(
                "alg"
            ) is None
            else propDict["alg"])
        self.jwk = (
            None if not fromDict or propDict.get(
                "jwk"
            ) is None
            else propDict["jwk"])

    @property
    def alg(self):
        """str: Algorithm used for encryption"""
        return self._alg

    @alg.setter
    def alg(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._alg = value
        else:
            raise TypeError(
                'Property "alg" of type "list<str>" set to wrong type'
            )

    @property
    def jwk(self):
        """Jwk: JSON Web Key"""
        return self._jwk

    @jwk.setter
    def jwk(self, value):
        if value is not None and not isinstance(value, Jwk):
            value = Jwk(value)
        if (value is None) or isinstance(value, Jwk):
            self._jwk = value
        else:
            raise TypeError(
                'Property "jwk" of type "list<Jwk>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._alg is not None:
            result["alg"] = \
                self._alg
        if self._jwk:
            result["jwk"] = \
                self._jwk.toDict() if self._jwk is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._jwk is not None): self._jwk.isValid()
        return True
    

