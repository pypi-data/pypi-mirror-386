"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .HistoryLayer import HistoryLayer
from .BlobSum import BlobSum
from .RequestStatus import RequestStatus
from .ImageSignature import ImageSignature

# Unused import over optimization prevention
str(repr(BlobSum))
str(repr(HistoryLayer))
str(repr(RequestStatus))
str(repr(ImageSignature))


if sys.version_info > (3,):
    long = int
    unicode = str

class GetManifestByTagResponse(object):
    """Image's manifest"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.architecture = (
            None if not fromDict or propDict.get(
                "architecture"
            ) is None
            else propDict["architecture"])
        self.fsLayers = (
            None if not fromDict or propDict.get(
                "fsLayers"
            ) is None
            else [ BlobSum(i)
            for i in propDict["fsLayers"] ])
        self.history = (
            None if not fromDict or propDict.get(
                "history"
            ) is None
            else [ HistoryLayer(i)
            for i in propDict["history"] ])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])
        self.schemaVersion = (
            None if not fromDict or propDict.get(
                "schemaVersion"
            ) is None
            else propDict["schemaVersion"])
        self.signatures = (
            None if not fromDict or propDict.get(
                "signatures"
            ) is None
            else [ ImageSignature(i)
            for i in propDict["signatures"] ])
        self.tag = (
            None if not fromDict or propDict.get(
                "tag"
            ) is None
            else propDict["tag"])

    @property
    def architecture(self):
        """str: Image architecture (e.g amd64)"""
        return self._architecture

    @architecture.setter
    def architecture(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._architecture = value
        else:
            raise TypeError(
                'Property "architecture" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def fsLayers(self):
        """ """
        return self._fsLayers

    @fsLayers.setter
    def fsLayers(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._fsLayers = value
        else:
            raise TypeError(
                'Property "fsLayers" of type "list<BlobSum>" set to wrong typ'
                'e'
            )

    @property
    def history(self):
        """ """
        return self._history

    @history.setter
    def history(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._history = value
        else:
            raise TypeError(
                'Property "history" of type "list<HistoryLayer>" set to wrong'
                ' type'
            )

    @property
    def name(self):
        """str: full repository name with namespace"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    @property
    def schemaVersion(self):
        """int: Response schema version"""
        return self._schemaVersion

    @schemaVersion.setter
    def schemaVersion(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._schemaVersion = value
        else:
            raise TypeError(
                'Property "schemaVersion" of type "list<int>" set to wrong ty'
                'pe'
            )

    @property
    def signatures(self):
        """ """
        return self._signatures

    @signatures.setter
    def signatures(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._signatures = value
        else:
            raise TypeError(
                'Property "signatures" of type "list<ImageSignature>" set to '
                'wrong type'
            )

    @property
    def tag(self):
        """str: image tag used to retrieve manifest"""
        return self._tag

    @tag.setter
    def tag(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tag = value
        else:
            raise TypeError(
                'Property "tag" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._architecture is not None:
            result["architecture"] = \
                self._architecture
        if self._fsLayers:
            result["fsLayers"] = [
                i.toDict() for i in self._fsLayers 
            ] if self._fsLayers else []
        if self._history:
            result["history"] = [
                i.toDict() for i in self._history 
            ] if self._history else []
        if self._name is not None:
            result["name"] = \
                self._name
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        if self._schemaVersion is not None:
            result["schemaVersion"] = \
                self._schemaVersion
        if self._signatures:
            result["signatures"] = [
                i.toDict() for i in self._signatures 
            ] if self._signatures else []
        if self._tag is not None:
            result["tag"] = \
                self._tag
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._fsLayers is not None):
            for obj in self._fsLayers:
                if (obj is not None): obj.isValid()
        if (self._history is not None):
            for obj in self._history:
                if (obj is not None): obj.isValid()
        if (self._signatures is not None):
            for obj in self._signatures:
                if (obj is not None): obj.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

