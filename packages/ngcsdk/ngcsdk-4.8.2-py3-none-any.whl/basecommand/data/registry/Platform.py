"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class Platform(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.architecture = (
            None if not fromDict or propDict.get(
                "architecture"
            ) is None
            else propDict["architecture"])
        self.features = (
            None if not fromDict or propDict.get(
                "features"
            ) is None
            else propDict["features"])
        self.os = (
            None if not fromDict or propDict.get(
                "os"
            ) is None
            else propDict["os"])
        self.variant = (
            None if not fromDict or propDict.get(
                "variant"
            ) is None
            else propDict["variant"])

    @property
    def architecture(self):
        """str: The architecture field specifies the CPU architecture, for exa
        mple amd64 or ppc64le."""
        return self._architecture

    @architecture.setter
    def architecture(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._architecture = value
        else:
            raise TypeError(
                'Property "architecture" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def features(self):
        """list: The optional features field specifies an array of strings, ea
        ch listing a required CPU feature (for example sse4 or aes)."""
        return self._features

    @features.setter
    def features(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._features = value
        else:
            raise TypeError(
                'Property "features" of type "list<str>" set to wrong type'
            )

    @property
    def os(self):
        """str: The os field specifies the operating system, for example linux
         or windows."""
        return self._os

    @os.setter
    def os(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._os = value
        else:
            raise TypeError(
                'Property "os" of type "list<str>" set to wrong type'
            )

    @property
    def variant(self):
        """str: The optional variant field specifies a variant of the CPU, for
         example armv6l to specify a particular CPU variant of the ARM
         CPU."""
        return self._variant

    @variant.setter
    def variant(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._variant = value
        else:
            raise TypeError(
                'Property "variant" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._architecture is not None:
            result["architecture"] = \
                self._architecture
        if self._features is not None:
            result["features"] = \
                self._features
        if self._os is not None:
            result["os"] = \
                self._os
        if self._variant is not None:
            result["variant"] = \
                self._variant
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

