"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Analysis import Analysis

# Unused import over optimization prevention
str(repr(Analysis))


if sys.version_info > (3,):
    long = int
    unicode = str

class RepositoryTagVexDetail(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.analysis = (
            None if not fromDict or propDict.get(
                "analysis"
            ) is None
            else propDict["analysis"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])

    @property
    def analysis(self):
        """ """
        return self._analysis

    @analysis.setter
    def analysis(self, value):
        if value is not None and not isinstance(value, Analysis):
            value = Analysis(value)
        if (value is None) or isinstance(value, Analysis):
            self._analysis = value
        else:
            raise TypeError(
                'Property "analysis" of type "list<Analysis>" set to wrong ty'
                'pe'
            )

    @property
    def id(self):
        """str: Vulnerability ID"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._analysis:
            result["analysis"] = \
                self._analysis.toDict() if self._analysis is not None else None
        if self._id is not None:
            result["id"] = \
                self._id
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._analysis is not None): self._analysis.isValid()
        return True
    

