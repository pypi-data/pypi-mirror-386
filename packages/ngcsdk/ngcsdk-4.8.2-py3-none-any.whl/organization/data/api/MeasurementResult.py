"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MeasurementSeries import MeasurementSeries

# Unused import over optimization prevention
str(repr(MeasurementSeries))


if sys.version_info > (3,):
    long = int
    unicode = str

class MeasurementResult(object):
    """result of a single measurement query"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.series = (
            None if not fromDict or propDict.get(
                "series"
            ) is None
            else [ MeasurementSeries(i)
            for i in propDict["series"] ])

    @property
    def series(self):
        """list: array of series within a measurement"""
        return self._series

    @series.setter
    def series(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._series = value
        else:
            raise TypeError(
                'Property "series" of type "list<MeasurementSeries>" set to w'
                'rong type'
            )

    def toDict(self):
        result = {}
        if self._series:
            result["series"] = [
                i.toDict() for i in self._series 
            ] if self._series else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._series is not None):
            for obj in self._series:
                if (obj is not None): obj.isValid()
        return True
    

