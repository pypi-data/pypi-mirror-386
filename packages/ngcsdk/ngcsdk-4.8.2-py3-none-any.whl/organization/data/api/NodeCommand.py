"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class NodeCommand(object):
    """Specifies the command to run on a node."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.command = (
            None if not fromDict or propDict.get(
                "command"
            ) is None
            else propDict["command"])
        self.data = (
            None if not fromDict or propDict.get(
                "data"
            ) is None
            else propDict["data"])
        self.masterIpAddresses = (
            None if not fromDict or propDict.get(
                "masterIpAddresses"
            ) is None
            else propDict["masterIpAddresses"])

    @property
    def command(self):
        """CommandEnum: Specify the type of command."""
        return self._command

    @command.setter
    def command(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._command = value
        else:
            raise TypeError(
                'Property "command" of type "list<CommandEnum>" set to wrong '
                'type'
            )

    CommandEnum=["BASH","MAKE_MASTER","MAKE_SLAVE","GET_NODE_STATUS",]
    str(repr(CommandEnum))  # Prevent optimizer removing enum

    @property
    def data(self):
        """str: Specify the command to execute. For example, if the command is
         a 'BASH' command, then specify the bash command to execute."""
        return self._data

    @data.setter
    def data(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._data = value
        else:
            raise TypeError(
                'Property "data" of type "list<str>" set to wrong type'
            )

    @property
    def masterIpAddresses(self):
        """list: An array of the IP addresses of all the masters in the ACE.
        """
        return self._masterIpAddresses

    @masterIpAddresses.setter
    def masterIpAddresses(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._masterIpAddresses = value
        else:
            raise TypeError(
                'Property "masterIpAddresses" of type "list<str>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._command is not None:
            result["command"] = \
                self._command
        if self._data is not None:
            result["data"] = \
                self._data
        if self._masterIpAddresses is not None:
            result["masterIpAddresses"] = \
                self._masterIpAddresses
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

