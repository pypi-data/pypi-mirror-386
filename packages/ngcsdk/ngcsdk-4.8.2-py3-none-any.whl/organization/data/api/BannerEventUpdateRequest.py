"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .BannerEventIncidentStatusEnum import BannerEventIncidentStatusEnum
from .BannerEventIncidentSeverityEnum import BannerEventIncidentSeverityEnum

# Unused import over optimization prevention
str(repr(BannerEventIncidentSeverityEnum))
str(repr(BannerEventIncidentStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class BannerEventUpdateRequest(object):
    """Update banner event request"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.estimatedUpdateTime = (
            None if not fromDict or propDict.get(
                "estimatedUpdateTime"
            ) is None
            else propDict["estimatedUpdateTime"])
        self.incidentSeverity = (
            None if not fromDict or propDict.get(
                "incidentSeverity"
            ) is None
            else propDict["incidentSeverity"])
        self.incidentStatus = (
            None if not fromDict or propDict.get(
                "incidentStatus"
            ) is None
            else propDict["incidentStatus"])
        self.message = (
            None if not fromDict or propDict.get(
                "message"
            ) is None
            else propDict["message"])

    @property
    def estimatedUpdateTime(self):
        """str: Estimated update time for the banner event"""
        return self._estimatedUpdateTime

    @estimatedUpdateTime.setter
    def estimatedUpdateTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._estimatedUpdateTime = value
        else:
            raise TypeError(
                'Property "estimatedUpdateTime" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def incidentSeverity(self):
        """BannerEventIncidentSeverityEnum: Severity of banner incident"""
        return self._incidentSeverity

    @incidentSeverity.setter
    def incidentSeverity(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._incidentSeverity = value
        else:
            raise TypeError(
                'Property "incidentSeverity" of type "list<BannerEventInciden'
                'tSeverityEnum>" set to wrong type'
            )

    @property
    def incidentStatus(self):
        """BannerEventIncidentStatusEnum: Banner event incident status."""
        return self._incidentStatus

    @incidentStatus.setter
    def incidentStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._incidentStatus = value
        else:
            raise TypeError(
                'Property "incidentStatus" of type "list<BannerEventIncidentS'
                'tatusEnum>" set to wrong type'
            )

    @property
    def message(self):
        """str: User defined message for the banner announcement update, max 1
        024 chars"""
        return self._message

    @message.setter
    def message(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._message = value
        else:
            raise TypeError(
                'Property "message" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._estimatedUpdateTime is not None:
            result["estimatedUpdateTime"] = \
                self._estimatedUpdateTime
        if self._incidentSeverity is not None:
            result["incidentSeverity"] = \
                self._incidentSeverity
        if self._incidentStatus is not None:
            result["incidentStatus"] = \
                self._incidentStatus
        if self._message is not None:
            result["message"] = \
                self._message
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._message is None:
            raise ValueError(
                "BannerEventUpdateRequest.message doesnt match requirement:" 
                "required: True"
            )
        if (self._message is not None
            and
            len(self._message) < 2):
            raise ValueError(
                "BannerEventUpdateRequest.message: " + str(self._message) + 
                " doesnt match requirement: minLength: 2")
        if (self._message is not None
            and
            len(self._message) > 1024):
            raise ValueError(
                "BannerEventUpdateRequest.message: " + str(self._message) + 
                " doesnt match requirement: maxLength: 1024")
        if self._incidentStatus is None:
            raise ValueError(
                "BannerEventUpdateRequest.incidentStatus doesnt match requirement:" 
                "required: True"
            )
        if (self._estimatedUpdateTime is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+Z",
                 self._estimatedUpdateTime)):
            raise ValueError(
                "BannerEventUpdateRequest.estimatedUpdateTime: " + str(self._estimatedUpdateTime) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\dT[0-"
                "2]\d:[0-5]\d:[0-5]\d\.\d+Z")
        return True
    

