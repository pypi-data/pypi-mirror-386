"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .OrgOwner import OrgOwner
from .ProductEnablement import ProductEnablement
from .OrgType import OrgTypeEnum
from .UsersInfo import UsersInfo
from .ProductSubscription import ProductSubscription
from .AlternateContact import AlternateContact
from .RepoScanSettings import RepoScanSettings
from .InfinityManagerSettings import InfinityManagerSettings

# Unused import over optimization prevention
str(repr(InfinityManagerSettings))
str(repr(AlternateContact))
str(repr(RepoScanSettings))
str(repr(ProductSubscription))
str(repr(ProductEnablement))
str(repr(UsersInfo))
str(repr(OrgOwner))
str(repr(OrgTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Organization(object):
    """Information about the Organization"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.alternateContact = (
            None if not fromDict or propDict.get(
                "alternateContact"
            ) is None
            else propDict["alternateContact"])
        self.canAddOn = (
            None if not fromDict or propDict.get(
                "canAddOn"
            ) is None
            else propDict["canAddOn"])
        self.country = (
            None if not fromDict or propDict.get(
                "country"
            ) is None
            else propDict["country"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.idpId = (
            None if not fromDict or propDict.get(
                "idpId"
            ) is None
            else propDict["idpId"])
        self.industry = (
            None if not fromDict or propDict.get(
                "industry"
            ) is None
            else propDict["industry"])
        self.infinityManagerSettings = (
            None if not fromDict or propDict.get(
                "infinityManagerSettings"
            ) is None
            else propDict["infinityManagerSettings"])
        self.isDatasetServiceEnabled = (
            None if not fromDict or propDict.get(
                "isDatasetServiceEnabled"
            ) is None
            else propDict["isDatasetServiceEnabled"])
        self.isQuickStartEnabled = (
            None if not fromDict or propDict.get(
                "isQuickStartEnabled"
            ) is None
            else propDict["isQuickStartEnabled"])
        self.isSecretsManagerServiceEnabled = (
            None if not fromDict or propDict.get(
                "isSecretsManagerServiceEnabled"
            ) is None
            else propDict["isSecretsManagerServiceEnabled"])
        self.isSeparateInfluxDbUsed = (
            None if not fromDict or propDict.get(
                "isSeparateInfluxDbUsed"
            ) is None
            else propDict["isSeparateInfluxDbUsed"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgOwner = (
            None if not fromDict or propDict.get(
                "orgOwner"
            ) is None
            else propDict["orgOwner"])
        self.orgOwners = (
            None if not fromDict or propDict.get(
                "orgOwners"
            ) is None
            else [ OrgOwner(i)
            for i in propDict["orgOwners"] ])
        self.pecSfdcId = (
            None if not fromDict or propDict.get(
                "pecSfdcId"
            ) is None
            else propDict["pecSfdcId"])
        self.productEnablements = (
            None if not fromDict or propDict.get(
                "productEnablements"
            ) is None
            else [ ProductEnablement(i)
            for i in propDict["productEnablements"] ])
        self.productSubscriptions = (
            None if not fromDict or propDict.get(
                "productSubscriptions"
            ) is None
            else [ ProductSubscription(i)
            for i in propDict["productSubscriptions"] ])
        self.repoScanSettings = (
            None if not fromDict or propDict.get(
                "repoScanSettings"
            ) is None
            else propDict["repoScanSettings"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.usersInfo = (
            None if not fromDict or propDict.get(
                "usersInfo"
            ) is None
            else propDict["usersInfo"])

    @property
    def alternateContact(self):
        """AlternateContact: Org Owner Alternate Contact"""
        return self._alternateContact

    @alternateContact.setter
    def alternateContact(self, value):
        if value is not None and not isinstance(value, AlternateContact):
            value = AlternateContact(value)
        if (value is None) or isinstance(value, AlternateContact):
            self._alternateContact = value
        else:
            raise TypeError(
                'Property "alternateContact" of type "list<AlternateContact>"'
                ' set to wrong type'
            )

    @property
    def canAddOn(self):
        """bool: Identifies if the org can be reused."""
        return self._canAddOn

    @canAddOn.setter
    def canAddOn(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canAddOn = value
        else:
            raise TypeError(
                'Property "canAddOn" of type "list<bool>" set to wrong type'
            )

    @property
    def country(self):
        """str: ISO country code of the organization."""
        return self._country

    @country.setter
    def country(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._country = value
        else:
            raise TypeError(
                'Property "country" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: Optional description of the organization."""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Name of the organization that will be shown to users."""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """long: Unique Id of this team."""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<long>" set to wrong type'
            )

    @property
    def idpId(self):
        """str: Identity Provider ID."""
        return self._idpId

    @idpId.setter
    def idpId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._idpId = value
        else:
            raise TypeError(
                'Property "idpId" of type "list<str>" set to wrong type'
            )

    @property
    def industry(self):
        """str: Industry of the organization."""
        return self._industry

    @industry.setter
    def industry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._industry = value
        else:
            raise TypeError(
                'Property "industry" of type "list<str>" set to wrong type'
            )

    @property
    def infinityManagerSettings(self):
        """InfinityManagerSettings: Infinity manager setting definition"""
        return self._infinityManagerSettings

    @infinityManagerSettings.setter
    def infinityManagerSettings(self, value):
        if value is not None and not isinstance(value, InfinityManagerSettings):
            value = InfinityManagerSettings(value)
        if (value is None) or isinstance(value, InfinityManagerSettings):
            self._infinityManagerSettings = value
        else:
            raise TypeError(
                'Property "infinityManagerSettings" of type "list<InfinityMan'
                'agerSettings>" set to wrong type'
            )

    @property
    def isDatasetServiceEnabled(self):
        """bool: Dataset Service enable flag for an organization"""
        return self._isDatasetServiceEnabled

    @isDatasetServiceEnabled.setter
    def isDatasetServiceEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isDatasetServiceEnabled = value
        else:
            raise TypeError(
                'Property "isDatasetServiceEnabled" of type "list<bool>" set '
                'to wrong type'
            )

    @property
    def isQuickStartEnabled(self):
        """bool: Quick Start enable flag for an organization"""
        return self._isQuickStartEnabled

    @isQuickStartEnabled.setter
    def isQuickStartEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isQuickStartEnabled = value
        else:
            raise TypeError(
                'Property "isQuickStartEnabled" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def isSecretsManagerServiceEnabled(self):
        """bool: Secrets Manager Service enable flag for an organization"""
        return self._isSecretsManagerServiceEnabled

    @isSecretsManagerServiceEnabled.setter
    def isSecretsManagerServiceEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSecretsManagerServiceEnabled = value
        else:
            raise TypeError(
                'Property "isSecretsManagerServiceEnabled" of type "list<bool'
                '>" set to wrong type'
            )

    @property
    def isSeparateInfluxDbUsed(self):
        """bool: If a separate influx db used for an organization in BCP for j
        ob telemetry"""
        return self._isSeparateInfluxDbUsed

    @isSeparateInfluxDbUsed.setter
    def isSeparateInfluxDbUsed(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSeparateInfluxDbUsed = value
        else:
            raise TypeError(
                'Property "isSeparateInfluxDbUsed" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def name(self):
        """str: Organization name."""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgOwner(self):
        """OrgOwner: Org owner."""
        return self._orgOwner

    @orgOwner.setter
    def orgOwner(self, value):
        if value is not None and not isinstance(value, OrgOwner):
            value = OrgOwner(value)
        if (value is None) or isinstance(value, OrgOwner):
            self._orgOwner = value
        else:
            raise TypeError(
                'Property "orgOwner" of type "list<OrgOwner>" set to wrong ty'
                'pe'
            )

    @property
    def orgOwners(self):
        """list: Org owners"""
        return self._orgOwners

    @orgOwners.setter
    def orgOwners(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._orgOwners = value
        else:
            raise TypeError(
                'Property "orgOwners" of type "list<OrgOwner>" set to wrong t'
                'ype'
            )

    @property
    def pecSfdcId(self):
        """str: Product end customer salesforce.com Id (external customer Id).
         pecSfdcId is for EMS (entitlement management service) to trac
        k external paid customer."""
        return self._pecSfdcId

    @pecSfdcId.setter
    def pecSfdcId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pecSfdcId = value
        else:
            raise TypeError(
                'Property "pecSfdcId" of type "list<str>" set to wrong type'
            )

    @property
    def productEnablements(self):
        """ """
        return self._productEnablements

    @productEnablements.setter
    def productEnablements(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productEnablements = value
        else:
            raise TypeError(
                'Property "productEnablements" of type "list<ProductEnablemen'
                't>" set to wrong type'
            )

    @property
    def productSubscriptions(self):
        """ """
        return self._productSubscriptions

    @productSubscriptions.setter
    def productSubscriptions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productSubscriptions = value
        else:
            raise TypeError(
                'Property "productSubscriptions" of type "list<ProductSubscri'
                'ption>" set to wrong type'
            )

    @property
    def repoScanSettings(self):
        """RepoScanSettings: Repo scan setting definition"""
        return self._repoScanSettings

    @repoScanSettings.setter
    def repoScanSettings(self, value):
        if value is not None and not isinstance(value, RepoScanSettings):
            value = RepoScanSettings(value)
        if (value is None) or isinstance(value, RepoScanSettings):
            self._repoScanSettings = value
        else:
            raise TypeError(
                'Property "repoScanSettings" of type "list<RepoScanSettings>"'
                ' set to wrong type'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<OrgTypeEnum>" set to wrong typ'
                'e'
            )

    @property
    def usersInfo(self):
        """UsersInfo: Users information."""
        return self._usersInfo

    @usersInfo.setter
    def usersInfo(self, value):
        if value is not None and not isinstance(value, UsersInfo):
            value = UsersInfo(value)
        if (value is None) or isinstance(value, UsersInfo):
            self._usersInfo = value
        else:
            raise TypeError(
                'Property "usersInfo" of type "list<UsersInfo>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._alternateContact:
            result["alternateContact"] = \
                self._alternateContact.toDict() if self._alternateContact is not None else None
        if self._canAddOn is not None:
            result["canAddOn"] = \
                self._canAddOn
        if self._country is not None:
            result["country"] = \
                self._country
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._id is not None:
            result["id"] = \
                self._id
        if self._idpId is not None:
            result["idpId"] = \
                self._idpId
        if self._industry is not None:
            result["industry"] = \
                self._industry
        if self._infinityManagerSettings:
            result["infinityManagerSettings"] = \
                self._infinityManagerSettings.toDict() if self._infinityManagerSettings is not None else None
        if self._isDatasetServiceEnabled is not None:
            result["isDatasetServiceEnabled"] = \
                self._isDatasetServiceEnabled
        if self._isQuickStartEnabled is not None:
            result["isQuickStartEnabled"] = \
                self._isQuickStartEnabled
        if self._isSecretsManagerServiceEnabled is not None:
            result["isSecretsManagerServiceEnabled"] = \
                self._isSecretsManagerServiceEnabled
        if self._isSeparateInfluxDbUsed is not None:
            result["isSeparateInfluxDbUsed"] = \
                self._isSeparateInfluxDbUsed
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgOwner:
            result["orgOwner"] = \
                self._orgOwner.toDict() if self._orgOwner is not None else None
        if self._orgOwners:
            result["orgOwners"] = [
                i.toDict() for i in self._orgOwners 
            ] if self._orgOwners else []
        if self._pecSfdcId is not None:
            result["pecSfdcId"] = \
                self._pecSfdcId
        if self._productEnablements:
            result["productEnablements"] = [
                i.toDict() for i in self._productEnablements 
            ] if self._productEnablements else []
        if self._productSubscriptions:
            result["productSubscriptions"] = [
                i.toDict() for i in self._productSubscriptions 
            ] if self._productSubscriptions else []
        if self._repoScanSettings:
            result["repoScanSettings"] = \
                self._repoScanSettings.toDict() if self._repoScanSettings is not None else None
        if self._type is not None:
            result["type"] = \
                self._type
        if self._usersInfo:
            result["usersInfo"] = \
                self._usersInfo.toDict() if self._usersInfo is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._displayName is not None
            and
            len(self._displayName) < 1):
            raise ValueError(
                "Organization.displayName: " + str(self._displayName) + 
                " doesnt match requirement: minLength: 1")
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "Organization.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._repoScanSettings is not None): self._repoScanSettings.isValid()
        if (self._infinityManagerSettings is not None): self._infinityManagerSettings.isValid()
        if (self._orgOwner is not None): self._orgOwner.isValid()
        if (self._orgOwners is not None):
            for obj in self._orgOwners:
                if (obj is not None): obj.isValid()
        if (self._productSubscriptions is not None):
            for obj in self._productSubscriptions:
                if (obj is not None): obj.isValid()
        if (self._productEnablements is not None):
            for obj in self._productEnablements:
                if (obj is not None): obj.isValid()
        if (self._alternateContact is not None): self._alternateContact.isValid()
        if (self._usersInfo is not None): self._usersInfo.isValid()
        return True
    

