"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .OrgOwner import OrgOwner
from .ProductEnablement import ProductEnablement
from .OrgType import OrgTypeEnum
from .ProductSubscription import ProductSubscription
from .AlternateContact import AlternateContact
from .RepoScanSettings import RepoScanSettings
from .InfinityManagerSettings import InfinityManagerSettings

# Unused import over optimization prevention
str(repr(InfinityManagerSettings))
str(repr(AlternateContact))
str(repr(RepoScanSettings))
str(repr(ProductSubscription))
str(repr(ProductEnablement))
str(repr(OrgOwner))
str(repr(OrgTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class OrgUpdateRequest(object):
    """Object used to update Org information"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.alternateContact = (
            None if not fromDict or propDict.get(
                "alternateContact"
            ) is None
            else propDict["alternateContact"])
        self.companyName = (
            None if not fromDict or propDict.get(
                "companyName"
            ) is None
            else propDict["companyName"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.idpId = (
            None if not fromDict or propDict.get(
                "idpId"
            ) is None
            else propDict["idpId"])
        self.infinityManagerSettings = (
            None if not fromDict or propDict.get(
                "infinityManagerSettings"
            ) is None
            else propDict["infinityManagerSettings"])
        self.isDatasetServiceEnabled = (
            None if not fromDict or propDict.get(
                "isDatasetServiceEnabled"
            ) is None
            else propDict["isDatasetServiceEnabled"])
        self.isQuickStartEnabled = (
            None if not fromDict or propDict.get(
                "isQuickStartEnabled"
            ) is None
            else propDict["isQuickStartEnabled"])
        self.isSecretsManagerServiceEnabled = (
            None if not fromDict or propDict.get(
                "isSecretsManagerServiceEnabled"
            ) is None
            else propDict["isSecretsManagerServiceEnabled"])
        self.isSeparateInfluxDbUsed = (
            None if not fromDict or propDict.get(
                "isSeparateInfluxDbUsed"
            ) is None
            else propDict["isSeparateInfluxDbUsed"])
        self.orgOwner = (
            None if not fromDict or propDict.get(
                "orgOwner"
            ) is None
            else propDict["orgOwner"])
        self.orgOwners = (
            None if not fromDict or propDict.get(
                "orgOwners"
            ) is None
            else [ OrgOwner(i)
            for i in propDict["orgOwners"] ])
        self.pecName = (
            None if not fromDict or propDict.get(
                "pecName"
            ) is None
            else propDict["pecName"])
        self.pecSfdcId = (
            None if not fromDict or propDict.get(
                "pecSfdcId"
            ) is None
            else propDict["pecSfdcId"])
        self.productEnablements = (
            None if not fromDict or propDict.get(
                "productEnablements"
            ) is None
            else [ ProductEnablement(i)
            for i in propDict["productEnablements"] ])
        self.productSubscriptions = (
            None if not fromDict or propDict.get(
                "productSubscriptions"
            ) is None
            else [ ProductSubscription(i)
            for i in propDict["productSubscriptions"] ])
        self.repoScanSettings = (
            None if not fromDict or propDict.get(
                "repoScanSettings"
            ) is None
            else propDict["repoScanSettings"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def alternateContact(self):
        """AlternateContact: Org Owner Alternate Contact"""
        return self._alternateContact

    @alternateContact.setter
    def alternateContact(self, value):
        if value is not None and not isinstance(value, AlternateContact):
            value = AlternateContact(value)
        if (value is None) or isinstance(value, AlternateContact):
            self._alternateContact = value
        else:
            raise TypeError(
                'Property "alternateContact" of type "list<AlternateContact>"'
                ' set to wrong type'
            )

    @property
    def companyName(self):
        """str: Name of the company"""
        return self._companyName

    @companyName.setter
    def companyName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._companyName = value
        else:
            raise TypeError(
                'Property "companyName" of type "list<str>" set to wrong type'
            )

    @property
    def description(self):
        """str: optional description of the organization"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: Name of the organization that will be shown to users."""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def idpId(self):
        """str: Identity Provider ID."""
        return self._idpId

    @idpId.setter
    def idpId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._idpId = value
        else:
            raise TypeError(
                'Property "idpId" of type "list<str>" set to wrong type'
            )

    @property
    def infinityManagerSettings(self):
        """InfinityManagerSettings: Infinity manager setting definition"""
        return self._infinityManagerSettings

    @infinityManagerSettings.setter
    def infinityManagerSettings(self, value):
        if value is not None and not isinstance(value, InfinityManagerSettings):
            value = InfinityManagerSettings(value)
        if (value is None) or isinstance(value, InfinityManagerSettings):
            self._infinityManagerSettings = value
        else:
            raise TypeError(
                'Property "infinityManagerSettings" of type "list<InfinityMan'
                'agerSettings>" set to wrong type'
            )

    @property
    def isDatasetServiceEnabled(self):
        """bool: Dataset Service enable flag for an organization"""
        return self._isDatasetServiceEnabled

    @isDatasetServiceEnabled.setter
    def isDatasetServiceEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isDatasetServiceEnabled = value
        else:
            raise TypeError(
                'Property "isDatasetServiceEnabled" of type "list<bool>" set '
                'to wrong type'
            )

    @property
    def isQuickStartEnabled(self):
        """bool: Quick Start enable flag for an organization"""
        return self._isQuickStartEnabled

    @isQuickStartEnabled.setter
    def isQuickStartEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isQuickStartEnabled = value
        else:
            raise TypeError(
                'Property "isQuickStartEnabled" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def isSecretsManagerServiceEnabled(self):
        """bool: Secrets Manager Service enable flag for an organization"""
        return self._isSecretsManagerServiceEnabled

    @isSecretsManagerServiceEnabled.setter
    def isSecretsManagerServiceEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSecretsManagerServiceEnabled = value
        else:
            raise TypeError(
                'Property "isSecretsManagerServiceEnabled" of type "list<bool'
                '>" set to wrong type'
            )

    @property
    def isSeparateInfluxDbUsed(self):
        """bool: If a separate influx db used for an organization in Base Comm
        and Platform job telemetry"""
        return self._isSeparateInfluxDbUsed

    @isSeparateInfluxDbUsed.setter
    def isSeparateInfluxDbUsed(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSeparateInfluxDbUsed = value
        else:
            raise TypeError(
                'Property "isSeparateInfluxDbUsed" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def orgOwner(self):
        """OrgOwner: Org owner."""
        return self._orgOwner

    @orgOwner.setter
    def orgOwner(self, value):
        if value is not None and not isinstance(value, OrgOwner):
            value = OrgOwner(value)
        if (value is None) or isinstance(value, OrgOwner):
            self._orgOwner = value
        else:
            raise TypeError(
                'Property "orgOwner" of type "list<OrgOwner>" set to wrong ty'
                'pe'
            )

    @property
    def orgOwners(self):
        """list: Org owners"""
        return self._orgOwners

    @orgOwners.setter
    def orgOwners(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._orgOwners = value
        else:
            raise TypeError(
                'Property "orgOwners" of type "list<OrgOwner>" set to wrong t'
                'ype'
            )

    @property
    def pecName(self):
        """str: product end customer name for enterprise(Fleet Command) produc
        t"""
        return self._pecName

    @pecName.setter
    def pecName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pecName = value
        else:
            raise TypeError(
                'Property "pecName" of type "list<str>" set to wrong type'
            )

    @property
    def pecSfdcId(self):
        """str: product end customer salesforce.com Id (external customer Id) 
        for enterprise(Fleet Command) product"""
        return self._pecSfdcId

    @pecSfdcId.setter
    def pecSfdcId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pecSfdcId = value
        else:
            raise TypeError(
                'Property "pecSfdcId" of type "list<str>" set to wrong type'
            )

    @property
    def productEnablements(self):
        """ """
        return self._productEnablements

    @productEnablements.setter
    def productEnablements(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productEnablements = value
        else:
            raise TypeError(
                'Property "productEnablements" of type "list<ProductEnablemen'
                't>" set to wrong type'
            )

    @property
    def productSubscriptions(self):
        """ """
        return self._productSubscriptions

    @productSubscriptions.setter
    def productSubscriptions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productSubscriptions = value
        else:
            raise TypeError(
                'Property "productSubscriptions" of type "list<ProductSubscri'
                'ption>" set to wrong type'
            )

    @property
    def repoScanSettings(self):
        """RepoScanSettings: Repo scan setting definition"""
        return self._repoScanSettings

    @repoScanSettings.setter
    def repoScanSettings(self, value):
        if value is not None and not isinstance(value, RepoScanSettings):
            value = RepoScanSettings(value)
        if (value is None) or isinstance(value, RepoScanSettings):
            self._repoScanSettings = value
        else:
            raise TypeError(
                'Property "repoScanSettings" of type "list<RepoScanSettings>"'
                ' set to wrong type'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<OrgTypeEnum>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._alternateContact:
            result["alternateContact"] = \
                self._alternateContact.toDict() if self._alternateContact is not None else None
        if self._companyName is not None:
            result["companyName"] = \
                self._companyName
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._idpId is not None:
            result["idpId"] = \
                self._idpId
        if self._infinityManagerSettings:
            result["infinityManagerSettings"] = \
                self._infinityManagerSettings.toDict() if self._infinityManagerSettings is not None else None
        if self._isDatasetServiceEnabled is not None:
            result["isDatasetServiceEnabled"] = \
                self._isDatasetServiceEnabled
        if self._isQuickStartEnabled is not None:
            result["isQuickStartEnabled"] = \
                self._isQuickStartEnabled
        if self._isSecretsManagerServiceEnabled is not None:
            result["isSecretsManagerServiceEnabled"] = \
                self._isSecretsManagerServiceEnabled
        if self._isSeparateInfluxDbUsed is not None:
            result["isSeparateInfluxDbUsed"] = \
                self._isSeparateInfluxDbUsed
        if self._orgOwner:
            result["orgOwner"] = \
                self._orgOwner.toDict() if self._orgOwner is not None else None
        if self._orgOwners:
            result["orgOwners"] = [
                i.toDict() for i in self._orgOwners 
            ] if self._orgOwners else []
        if self._pecName is not None:
            result["pecName"] = \
                self._pecName
        if self._pecSfdcId is not None:
            result["pecSfdcId"] = \
                self._pecSfdcId
        if self._productEnablements:
            result["productEnablements"] = [
                i.toDict() for i in self._productEnablements 
            ] if self._productEnablements else []
        if self._productSubscriptions:
            result["productSubscriptions"] = [
                i.toDict() for i in self._productSubscriptions 
            ] if self._productSubscriptions else []
        if self._repoScanSettings:
            result["repoScanSettings"] = \
                self._repoScanSettings.toDict() if self._repoScanSettings is not None else None
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._description is not None
            and
            len(self._description) > 128):
            raise ValueError(
                "OrgUpdateRequest.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 128")
        if (self._displayName is not None
            and
            len(self._displayName) < 1):
            raise ValueError(
                "OrgUpdateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: minLength: 1")
        if (self._displayName is not None
            and
            len(self._displayName) > 255):
            raise ValueError(
                "OrgUpdateRequest.displayName: " + str(self._displayName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._companyName is not None
            and
            len(self._companyName) > 128):
            raise ValueError(
                "OrgUpdateRequest.companyName: " + str(self._companyName) + 
                " doesnt match requirement: maxLength: 128")
        if (self._repoScanSettings is not None): self._repoScanSettings.isValid()
        if (self._infinityManagerSettings is not None): self._infinityManagerSettings.isValid()
        if (self._orgOwner is not None): self._orgOwner.isValid()
        if (self._orgOwners is not None):
            for obj in self._orgOwners:
                if (obj is not None): obj.isValid()
        if (self._productEnablements is not None):
            for obj in self._productEnablements:
                if (obj is not None): obj.isValid()
        if (self._productSubscriptions is not None):
            for obj in self._productSubscriptions:
                if (obj is not None): obj.isValid()
        if (self._alternateContact is not None): self._alternateContact.isValid()
        return True
    

