"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserStorageClusterUpdateRequest(object):
    """Object used to update/create user storage cluster mapping. When dataset
    , resultset, workspace not provided, will use the default"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.datasetStorageClusterUuid = (
            None if not fromDict or propDict.get(
                "datasetStorageClusterUuid"
            ) is None
            else propDict["datasetStorageClusterUuid"])
        self.defaultStorageClusterUuid = (
            None if not fromDict or propDict.get(
                "defaultStorageClusterUuid"
            ) is None
            else propDict["defaultStorageClusterUuid"])
        self.resultsetStorageClusterUuid = (
            None if not fromDict or propDict.get(
                "resultsetStorageClusterUuid"
            ) is None
            else propDict["resultsetStorageClusterUuid"])
        self.workspaceStorageClusterUuid = (
            None if not fromDict or propDict.get(
                "workspaceStorageClusterUuid"
            ) is None
            else propDict["workspaceStorageClusterUuid"])

    @property
    def aceName(self):
        """str: ace name"""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def datasetStorageClusterUuid(self):
        """str: Storage Cluster Uuid that will be mapped to this user's datase
        t"""
        return self._datasetStorageClusterUuid

    @datasetStorageClusterUuid.setter
    def datasetStorageClusterUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._datasetStorageClusterUuid = value
        else:
            raise TypeError(
                'Property "datasetStorageClusterUuid" of type "list<str>" set'
                ' to wrong type'
            )

    @property
    def defaultStorageClusterUuid(self):
        """str: The default Storage Cluster Uuid that will be used for this us
        er"""
        return self._defaultStorageClusterUuid

    @defaultStorageClusterUuid.setter
    def defaultStorageClusterUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._defaultStorageClusterUuid = value
        else:
            raise TypeError(
                'Property "defaultStorageClusterUuid" of type "list<str>" set'
                ' to wrong type'
            )

    @property
    def resultsetStorageClusterUuid(self):
        """str: Storage Cluster Uuid that will be mapped to this user's result
        set"""
        return self._resultsetStorageClusterUuid

    @resultsetStorageClusterUuid.setter
    def resultsetStorageClusterUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resultsetStorageClusterUuid = value
        else:
            raise TypeError(
                'Property "resultsetStorageClusterUuid" of type "list<str>" s'
                'et to wrong type'
            )

    @property
    def workspaceStorageClusterUuid(self):
        """str: Storage Cluster Uuid that will be mapped to this user's worksp
        ace"""
        return self._workspaceStorageClusterUuid

    @workspaceStorageClusterUuid.setter
    def workspaceStorageClusterUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._workspaceStorageClusterUuid = value
        else:
            raise TypeError(
                'Property "workspaceStorageClusterUuid" of type "list<str>" s'
                'et to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._datasetStorageClusterUuid is not None:
            result["datasetStorageClusterUuid"] = \
                self._datasetStorageClusterUuid
        if self._defaultStorageClusterUuid is not None:
            result["defaultStorageClusterUuid"] = \
                self._defaultStorageClusterUuid
        if self._resultsetStorageClusterUuid is not None:
            result["resultsetStorageClusterUuid"] = \
                self._resultsetStorageClusterUuid
        if self._workspaceStorageClusterUuid is not None:
            result["workspaceStorageClusterUuid"] = \
                self._workspaceStorageClusterUuid
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._aceName is None:
            raise ValueError(
                "UserStorageClusterUpdateRequest.aceName doesnt match requirement:" 
                "required: True"
            )
        if self._defaultStorageClusterUuid is None:
            raise ValueError(
                "UserStorageClusterUpdateRequest.defaultStorageClusterUuid doesnt match requirement:" 
                "required: True"
            )
        return True
    

