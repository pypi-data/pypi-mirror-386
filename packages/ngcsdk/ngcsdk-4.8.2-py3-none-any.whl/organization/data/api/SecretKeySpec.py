"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class SecretKeySpec(object):
    """Information about the secret key name and optional env name"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.envName = (
            None if not fromDict or propDict.get(
                "envName"
            ) is None
            else propDict["envName"])
        self.keyName = (
            None if not fromDict or propDict.get(
                "keyName"
            ) is None
            else propDict["keyName"])

    @property
    def envName(self):
        """str: Env variable name to export the secret KV pair"""
        return self._envName

    @envName.setter
    def envName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._envName = value
        else:
            raise TypeError(
                'Property "envName" of type "list<str>" set to wrong type'
            )

    @property
    def keyName(self):
        """str: Secret key name (if no env variable name specified below, the 
        secret KV pair will be exported with key name as env variable 
        name)"""
        return self._keyName

    @keyName.setter
    def keyName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._keyName = value
        else:
            raise TypeError(
                'Property "keyName" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._envName is not None:
            result["envName"] = \
                self._envName
        if self._keyName is not None:
            result["keyName"] = \
                self._keyName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._keyName is None:
            raise ValueError(
                "SecretKeySpec.keyName doesnt match requirement:" 
                "required: True"
            )
        if (self._keyName is not None
            and
            len(self._keyName) < 1):
            raise ValueError(
                "SecretKeySpec.keyName: " + str(self._keyName) + 
                " doesnt match requirement: minLength: 1")
        if (self._envName is not None
            and
            len(self._envName) < 1):
            raise ValueError(
                "SecretKeySpec.envName: " + str(self._envName) + 
                " doesnt match requirement: minLength: 1")
        return True
    

