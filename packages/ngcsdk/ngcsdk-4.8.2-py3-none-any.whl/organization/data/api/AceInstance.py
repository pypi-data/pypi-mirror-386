"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AceInstanceTypeEnum import AceInstanceTypeEnum
from .JobArrayTypeEnum import JobArrayTypeEnum

# Unused import over optimization prevention
str(repr(AceInstanceTypeEnum))
str(repr(JobArrayTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class AceInstance(object):
    """ACE instance is a collection of pre-determined resources"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.GPUType = (
            None if not fromDict or propDict.get(
                "GPUType"
            ) is None
            else propDict["GPUType"])
        self.allowMultinode = (
            None if not fromDict or propDict.get(
                "allowMultinode"
            ) is None
            else propDict["allowMultinode"])
        self.allowMultinodePreemptable = (
            None if not fromDict or propDict.get(
                "allowMultinodePreemptable"
            ) is None
            else propDict["allowMultinodePreemptable"])
        self.architecture = (
            None if not fromDict or propDict.get(
                "architecture"
            ) is None
            else propDict["architecture"])
        self.cpuCores = (
            None if not fromDict or propDict.get(
                "cpuCores"
            ) is None
            else propDict["cpuCores"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.gpuMemory = (
            None if not fromDict or propDict.get(
                "gpuMemory"
            ) is None
            else propDict["gpuMemory"])
        self.gpus = (
            None if not fromDict or propDict.get(
                "gpus"
            ) is None
            else propDict["gpus"])
        self.infinityManagerResourceType = (
            None if not fromDict or propDict.get(
                "infinityManagerResourceType"
            ) is None
            else propDict["infinityManagerResourceType"])
        self.isLegacy = (
            None if not fromDict or propDict.get(
                "isLegacy"
            ) is None
            else propDict["isLegacy"])
        self.maxGPUMemBandWidth = (
            None if not fromDict or propDict.get(
                "maxGPUMemBandWidth"
            ) is None
            else propDict["maxGPUMemBandWidth"])
        self.maxNvlinkBandWidth = (
            None if not fromDict or propDict.get(
                "maxNvlinkBandWidth"
            ) is None
            else propDict["maxNvlinkBandWidth"])
        self.maxPcieReadBandWidth = (
            None if not fromDict or propDict.get(
                "maxPcieReadBandWidth"
            ) is None
            else propDict["maxPcieReadBandWidth"])
        self.maxPcieWriteBandWidth = (
            None if not fromDict or propDict.get(
                "maxPcieWriteBandWidth"
            ) is None
            else propDict["maxPcieWriteBandWidth"])
        self.maxPowerLimit = (
            None if not fromDict or propDict.get(
                "maxPowerLimit"
            ) is None
            else propDict["maxPowerLimit"])
        self.migSlice = (
            None if not fromDict or propDict.get(
                "migSlice"
            ) is None
            else propDict["migSlice"])
        self.migTotalSlice = (
            None if not fromDict or propDict.get(
                "migTotalSlice"
            ) is None
            else propDict["migTotalSlice"])
        self.multiNodeSupportedArrayTypes = (
            None if not fromDict or propDict.get(
                "multiNodeSupportedArrayTypes"
            ) is None
            else propDict["multiNodeSupportedArrayTypes"])
        self.multiNodeSupportedDefaultArrayType = (
            None if not fromDict or propDict.get(
                "multiNodeSupportedDefaultArrayType"
            ) is None
            else propDict["multiNodeSupportedDefaultArrayType"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.os = (
            None if not fromDict or propDict.get(
                "os"
            ) is None
            else propDict["os"])
        self.raidFileSystemGB = (
            None if not fromDict or propDict.get(
                "raidFileSystemGB"
            ) is None
            else propDict["raidFileSystemGB"])
        self.rootFileSystemGB = (
            None if not fromDict or propDict.get(
                "rootFileSystemGB"
            ) is None
            else propDict["rootFileSystemGB"])
        self.systemMemory = (
            None if not fromDict or propDict.get(
                "systemMemory"
            ) is None
            else propDict["systemMemory"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.variant = (
            None if not fromDict or propDict.get(
                "variant"
            ) is None
            else propDict["variant"])

    @property
    def GPUType(self):
        """GPUTypeEnum: Type of GPU architecture"""
        return self._GPUType

    @GPUType.setter
    def GPUType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._GPUType = value
        else:
            raise TypeError(
                'Property "GPUType" of type "list<GPUTypeEnum>" set to wrong '
                'type'
            )

    GPUTypeEnum=["PASCAL","VOLTA",]
    str(repr(GPUTypeEnum))  # Prevent optimizer removing enum

    @property
    def allowMultinode(self):
        """bool: indicates if the instance can be used to start a multinode jo
        b. Default is false"""
        return self._allowMultinode

    @allowMultinode.setter
    def allowMultinode(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowMultinode = value
        else:
            raise TypeError(
                'Property "allowMultinode" of type "list<bool>" set to wrong '
                'type'
            )

    @property
    def allowMultinodePreemptable(self):
        """bool: indicates if the instance can be used to start a preemptable 
        multinode job. Default is false"""
        return self._allowMultinodePreemptable

    @allowMultinodePreemptable.setter
    def allowMultinodePreemptable(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowMultinodePreemptable = value
        else:
            raise TypeError(
                'Property "allowMultinodePreemptable" of type "list<bool>" se'
                't to wrong type'
            )

    @property
    def architecture(self):
        """str: The architecture field specifies the CPU architecture, for exa
        mple amd64 or ppc64le."""
        return self._architecture

    @architecture.setter
    def architecture(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._architecture = value
        else:
            raise TypeError(
                'Property "architecture" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def cpuCores(self):
        """float: Number of CPU cores for a job, user can specify 1.5 cores he
        re"""
        return self._cpuCores

    @cpuCores.setter
    def cpuCores(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._cpuCores = value
        else:
            raise TypeError(
                'Property "cpuCores" of type "list<float>" set to wrong type'
            )

    @property
    def description(self):
        """str: Human Readable description of the ACE Instance"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def gpuMemory(self):
        """float: gpu memory in MB"""
        return self._gpuMemory

    @gpuMemory.setter
    def gpuMemory(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._gpuMemory = value
        else:
            raise TypeError(
                'Property "gpuMemory" of type "list<float>" set to wrong type'
            )

    @property
    def gpus(self):
        """int: number of GPUs for a job"""
        return self._gpus

    @gpus.setter
    def gpus(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._gpus = value
        else:
            raise TypeError(
                'Property "gpus" of type "list<int>" set to wrong type'
            )

    @property
    def infinityManagerResourceType(self):
        """str: resource type managed by infinity manager, which is mapped fro
        m name field, namely ace instance name, in this object"""
        return self._infinityManagerResourceType

    @infinityManagerResourceType.setter
    def infinityManagerResourceType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._infinityManagerResourceType = value
        else:
            raise TypeError(
                'Property "infinityManagerResourceType" of type "list<str>" s'
                'et to wrong type'
            )

    @property
    def isLegacy(self):
        """bool: mark if this instance is an legacy instance or not. Legacy in
        stance are supported for backward compability purposes."""
        return self._isLegacy

    @isLegacy.setter
    def isLegacy(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isLegacy = value
        else:
            raise TypeError(
                'Property "isLegacy" of type "list<bool>" set to wrong type'
            )

    @property
    def maxGPUMemBandWidth(self):
        """float: Max GPU memory bandwidth"""
        return self._maxGPUMemBandWidth

    @maxGPUMemBandWidth.setter
    def maxGPUMemBandWidth(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._maxGPUMemBandWidth = value
        else:
            raise TypeError(
                'Property "maxGPUMemBandWidth" of type "list<float>" set to w'
                'rong type'
            )

    @property
    def maxNvlinkBandWidth(self):
        """float: Max NVLink bandwidth in GB/s"""
        return self._maxNvlinkBandWidth

    @maxNvlinkBandWidth.setter
    def maxNvlinkBandWidth(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._maxNvlinkBandWidth = value
        else:
            raise TypeError(
                'Property "maxNvlinkBandWidth" of type "list<float>" set to w'
                'rong type'
            )

    @property
    def maxPcieReadBandWidth(self):
        """float: Max PCIE Read bandwidth in GB/s"""
        return self._maxPcieReadBandWidth

    @maxPcieReadBandWidth.setter
    def maxPcieReadBandWidth(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._maxPcieReadBandWidth = value
        else:
            raise TypeError(
                'Property "maxPcieReadBandWidth" of type "list<float>" set to'
                ' wrong type'
            )

    @property
    def maxPcieWriteBandWidth(self):
        """float: Max PCIE Write bandwidth in GB/s"""
        return self._maxPcieWriteBandWidth

    @maxPcieWriteBandWidth.setter
    def maxPcieWriteBandWidth(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._maxPcieWriteBandWidth = value
        else:
            raise TypeError(
                'Property "maxPcieWriteBandWidth" of type "list<float>" set t'
                'o wrong type'
            )

    @property
    def maxPowerLimit(self):
        """float: Max Power in Watts"""
        return self._maxPowerLimit

    @maxPowerLimit.setter
    def maxPowerLimit(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._maxPowerLimit = value
        else:
            raise TypeError(
                'Property "maxPowerLimit" of type "list<float>" set to wrong '
                'type'
            )

    @property
    def migSlice(self):
        """int: MIG Slice that'll be used in this ACE Instance"""
        return self._migSlice

    @migSlice.setter
    def migSlice(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._migSlice = value
        else:
            raise TypeError(
                'Property "migSlice" of type "list<int>" set to wrong type'
            )

    @property
    def migTotalSlice(self):
        """int: Total MIG Slice. Default is 7"""
        return self._migTotalSlice

    @migTotalSlice.setter
    def migTotalSlice(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._migTotalSlice = value
        else:
            raise TypeError(
                'Property "migTotalSlice" of type "list<int>" set to wrong ty'
                'pe'
            )

    @property
    def multiNodeSupportedArrayTypes(self):
        """list: array types of multi node job allowed on the instances, used 
        to specify the array type of multi node job. ex) [MPI, PARALLE
        L, PYTORCH, HOROVOD]"""
        return self._multiNodeSupportedArrayTypes

    @multiNodeSupportedArrayTypes.setter
    def multiNodeSupportedArrayTypes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._multiNodeSupportedArrayTypes = value
        else:
            raise TypeError(
                'Property "multiNodeSupportedArrayTypes" of type "list<JobArr'
                'ayTypeEnum>" set to wrong type'
            )

    @property
    def multiNodeSupportedDefaultArrayType(self):
        """JobArrayTypeEnum: Type of array job."""
        return self._multiNodeSupportedDefaultArrayType

    @multiNodeSupportedDefaultArrayType.setter
    def multiNodeSupportedDefaultArrayType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._multiNodeSupportedDefaultArrayType = value
        else:
            raise TypeError(
                'Property "multiNodeSupportedDefaultArrayType" of type "list<'
                'JobArrayTypeEnum>" set to wrong type'
            )

    @property
    def name(self):
        """str: name of ace instance, must be unique within the ACE"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def os(self):
        """str: The os field specifies the operating system, for example linux
         or windows."""
        return self._os

    @os.setter
    def os(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._os = value
        else:
            raise TypeError(
                'Property "os" of type "list<str>" set to wrong type'
            )

    @property
    def raidFileSystemGB(self):
        """int: Total GB allocated for RAID filesystem (/raid)"""
        return self._raidFileSystemGB

    @raidFileSystemGB.setter
    def raidFileSystemGB(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._raidFileSystemGB = value
        else:
            raise TypeError(
                'Property "raidFileSystemGB" of type "list<int>" set to wrong'
                ' type'
            )

    @property
    def rootFileSystemGB(self):
        """int: Total GB allocated for Root filesystem (/)"""
        return self._rootFileSystemGB

    @rootFileSystemGB.setter
    def rootFileSystemGB(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._rootFileSystemGB = value
        else:
            raise TypeError(
                'Property "rootFileSystemGB" of type "list<int>" set to wrong'
                ' type'
            )

    @property
    def systemMemory(self):
        """float: system memory in MB"""
        return self._systemMemory

    @systemMemory.setter
    def systemMemory(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._systemMemory = value
        else:
            raise TypeError(
                'Property "systemMemory" of type "list<float>" set to wrong t'
                'ype'
            )

    @property
    def type(self):
        """AceInstanceTypeEnum: The type of ACE Instance."""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<AceInstanceTypeEnum>" set to w'
                'rong type'
            )

    @property
    def variant(self):
        """str: The optional variant field specifies a variant of the CPU, for
         example armv6l to specify a particular CPU variant of the ARM
         CPU."""
        return self._variant

    @variant.setter
    def variant(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._variant = value
        else:
            raise TypeError(
                'Property "variant" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._GPUType is not None:
            result["GPUType"] = \
                self._GPUType
        if self._allowMultinode is not None:
            result["allowMultinode"] = \
                self._allowMultinode
        if self._allowMultinodePreemptable is not None:
            result["allowMultinodePreemptable"] = \
                self._allowMultinodePreemptable
        if self._architecture is not None:
            result["architecture"] = \
                self._architecture
        if self._cpuCores is not None:
            result["cpuCores"] = \
                self._cpuCores
        if self._description is not None:
            result["description"] = \
                self._description
        if self._gpuMemory is not None:
            result["gpuMemory"] = \
                self._gpuMemory
        if self._gpus is not None:
            result["gpus"] = \
                self._gpus
        if self._infinityManagerResourceType is not None:
            result["infinityManagerResourceType"] = \
                self._infinityManagerResourceType
        if self._isLegacy is not None:
            result["isLegacy"] = \
                self._isLegacy
        if self._maxGPUMemBandWidth is not None:
            result["maxGPUMemBandWidth"] = \
                self._maxGPUMemBandWidth
        if self._maxNvlinkBandWidth is not None:
            result["maxNvlinkBandWidth"] = \
                self._maxNvlinkBandWidth
        if self._maxPcieReadBandWidth is not None:
            result["maxPcieReadBandWidth"] = \
                self._maxPcieReadBandWidth
        if self._maxPcieWriteBandWidth is not None:
            result["maxPcieWriteBandWidth"] = \
                self._maxPcieWriteBandWidth
        if self._maxPowerLimit is not None:
            result["maxPowerLimit"] = \
                self._maxPowerLimit
        if self._migSlice is not None:
            result["migSlice"] = \
                self._migSlice
        if self._migTotalSlice is not None:
            result["migTotalSlice"] = \
                self._migTotalSlice
        if self._multiNodeSupportedArrayTypes is not None:
            result["multiNodeSupportedArrayTypes"] = \
                self._multiNodeSupportedArrayTypes
        if self._multiNodeSupportedDefaultArrayType is not None:
            result["multiNodeSupportedDefaultArrayType"] = \
                self._multiNodeSupportedDefaultArrayType
        if self._name is not None:
            result["name"] = \
                self._name
        if self._os is not None:
            result["os"] = \
                self._os
        if self._raidFileSystemGB is not None:
            result["raidFileSystemGB"] = \
                self._raidFileSystemGB
        if self._rootFileSystemGB is not None:
            result["rootFileSystemGB"] = \
                self._rootFileSystemGB
        if self._systemMemory is not None:
            result["systemMemory"] = \
                self._systemMemory
        if self._type is not None:
            result["type"] = \
                self._type
        if self._variant is not None:
            result["variant"] = \
                self._variant
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "AceInstance.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 4):
            raise ValueError(
                "AceInstance.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 4")
        if (self._name is not None
            and
            len(self._name) > 128):
            raise ValueError(
                "AceInstance.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 128")
        if (self._name is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.]+$)",
                 self._name)):
            raise ValueError(
                "AceInstance.name: " + str(self._name) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.]+$)")
        if (self._description is not None
            and
            len(self._description) > 255):
            raise ValueError(
                "AceInstance.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 255")
        if self._cpuCores is None:
            raise ValueError(
                "AceInstance.cpuCores doesnt match requirement:" 
                "required: True"
            )
        if (self._cpuCores is not None
            and
            self._cpuCores < 1):
            raise ValueError(
                "AceInstance.cpuCores: " + str(self._cpuCores) + 
                " doesnt match requirement: minimum: 1")
        if (self._cpuCores is not None
            and
            self._cpuCores > 240):
            raise ValueError(
                "AceInstance.cpuCores: " + str(self._cpuCores) + 
                " doesnt match requirement: maximum: 240")
        if self._gpus is None:
            raise ValueError(
                "AceInstance.gpus doesnt match requirement:" 
                "required: True"
            )
        if (self._gpus is not None
            and
            self._gpus < 0):
            raise ValueError(
                "AceInstance.gpus: " + str(self._gpus) + 
                " doesnt match requirement: minimum: 0")
        if (self._gpus is not None
            and
            self._gpus > 16):
            raise ValueError(
                "AceInstance.gpus: " + str(self._gpus) + 
                " doesnt match requirement: maximum: 16")
        if self._gpuMemory is None:
            raise ValueError(
                "AceInstance.gpuMemory doesnt match requirement:" 
                "required: True"
            )
        if (self._gpuMemory is not None
            and
            self._gpuMemory < 0):
            raise ValueError(
                "AceInstance.gpuMemory: " + str(self._gpuMemory) + 
                " doesnt match requirement: minimum: 0")
        if (self._gpuMemory is not None
            and
            self._gpuMemory > 1474560):
            raise ValueError(
                "AceInstance.gpuMemory: " + str(self._gpuMemory) + 
                " doesnt match requirement: maximum: 1474560")
        if self._systemMemory is None:
            raise ValueError(
                "AceInstance.systemMemory doesnt match requirement:" 
                "required: True"
            )
        if (self._systemMemory is not None
            and
            self._systemMemory < 1024):
            raise ValueError(
                "AceInstance.systemMemory: " + str(self._systemMemory) + 
                " doesnt match requirement: minimum: 1024")
        if (self._systemMemory is not None
            and
            self._systemMemory > 1998848):
            raise ValueError(
                "AceInstance.systemMemory: " + str(self._systemMemory) + 
                " doesnt match requirement: maximum: 1998848")
        if self._maxPowerLimit is None:
            raise ValueError(
                "AceInstance.maxPowerLimit doesnt match requirement:" 
                "required: True"
            )
        if self._maxGPUMemBandWidth is None:
            raise ValueError(
                "AceInstance.maxGPUMemBandWidth doesnt match requirement:" 
                "required: True"
            )
        if self._maxPcieReadBandWidth is None:
            raise ValueError(
                "AceInstance.maxPcieReadBandWidth doesnt match requirement:" 
                "required: True"
            )
        if self._maxPcieWriteBandWidth is None:
            raise ValueError(
                "AceInstance.maxPcieWriteBandWidth doesnt match requirement:" 
                "required: True"
            )
        if self._maxNvlinkBandWidth is None:
            raise ValueError(
                "AceInstance.maxNvlinkBandWidth doesnt match requirement:" 
                "required: True"
            )
        if (self._rootFileSystemGB is not None
            and
            self._rootFileSystemGB < 1):
            raise ValueError(
                "AceInstance.rootFileSystemGB: " + str(self._rootFileSystemGB) + 
                " doesnt match requirement: minimum: 1")
        if (self._raidFileSystemGB is not None
            and
            self._raidFileSystemGB < 1):
            raise ValueError(
                "AceInstance.raidFileSystemGB: " + str(self._raidFileSystemGB) + 
                " doesnt match requirement: minimum: 1")
        if (self._migSlice is not None
            and
            self._migSlice < 1):
            raise ValueError(
                "AceInstance.migSlice: " + str(self._migSlice) + 
                " doesnt match requirement: minimum: 1")
        if (self._migTotalSlice is not None
            and
            self._migTotalSlice < 1):
            raise ValueError(
                "AceInstance.migTotalSlice: " + str(self._migTotalSlice) + 
                " doesnt match requirement: minimum: 1")
        if (self._infinityManagerResourceType is not None
            and
            len(self._infinityManagerResourceType) < 4):
            raise ValueError(
                "AceInstance.infinityManagerResourceType: " + str(self._infinityManagerResourceType) + 
                " doesnt match requirement: minLength: 4")
        if (self._infinityManagerResourceType is not None
            and
            len(self._infinityManagerResourceType) > 100):
            raise ValueError(
                "AceInstance.infinityManagerResourceType: " + str(self._infinityManagerResourceType) + 
                " doesnt match requirement: maxLength: 100")
        if (self._infinityManagerResourceType is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.]+$)",
                 self._infinityManagerResourceType)):
            raise ValueError(
                "AceInstance.infinityManagerResourceType: " + str(self._infinityManagerResourceType) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.]+$)")
        return True
    

