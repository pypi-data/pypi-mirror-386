"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .BannerEventIncidentStatusEnum import BannerEventIncidentStatusEnum
from .BannerEventIncidentMeta import BannerEventIncidentMeta
from .BannerEventIncidentSeverityEnum import BannerEventIncidentSeverityEnum

# Unused import over optimization prevention
str(repr(BannerEventIncidentMeta))
str(repr(BannerEventIncidentSeverityEnum))
str(repr(BannerEventIncidentStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class BannerEventIncident(object):
    """Object of banner event incident data"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.backfilledTime = (
            None if not fromDict or propDict.get(
                "backfilledTime"
            ) is None
            else propDict["backfilledTime"])
        self.currentIncidentSeverity = (
            None if not fromDict or propDict.get(
                "currentIncidentSeverity"
            ) is None
            else propDict["currentIncidentSeverity"])
        self.currentIncidentStatus = (
            None if not fromDict or propDict.get(
                "currentIncidentStatus"
            ) is None
            else propDict["currentIncidentStatus"])
        self.currentMessage = (
            None if not fromDict or propDict.get(
                "currentMessage"
            ) is None
            else propDict["currentMessage"])
        self.estimatedUpdateTime = (
            None if not fromDict or propDict.get(
                "estimatedUpdateTime"
            ) is None
            else propDict["estimatedUpdateTime"])
        self.incidentHistory = (
            None if not fromDict or propDict.get(
                "incidentHistory"
            ) is None
            else [ BannerEventIncidentMeta(i)
            for i in propDict["incidentHistory"] ])
        self.initialPostTime = (
            None if not fromDict or propDict.get(
                "initialPostTime"
            ) is None
            else propDict["initialPostTime"])
        self.lastUpdatedTime = (
            None if not fromDict or propDict.get(
                "lastUpdatedTime"
            ) is None
            else propDict["lastUpdatedTime"])

    @property
    def backfilledTime(self):
        """str: Backfilled time of the banner event in UTC 00:00"""
        return self._backfilledTime

    @backfilledTime.setter
    def backfilledTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._backfilledTime = value
        else:
            raise TypeError(
                'Property "backfilledTime" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def currentIncidentSeverity(self):
        """BannerEventIncidentSeverityEnum: Severity of banner incident"""
        return self._currentIncidentSeverity

    @currentIncidentSeverity.setter
    def currentIncidentSeverity(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._currentIncidentSeverity = value
        else:
            raise TypeError(
                'Property "currentIncidentSeverity" of type "list<BannerEvent'
                'IncidentSeverityEnum>" set to wrong type'
            )

    @property
    def currentIncidentStatus(self):
        """BannerEventIncidentStatusEnum: Banner event incident status."""
        return self._currentIncidentStatus

    @currentIncidentStatus.setter
    def currentIncidentStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._currentIncidentStatus = value
        else:
            raise TypeError(
                'Property "currentIncidentStatus" of type "list<BannerEventIn'
                'cidentStatusEnum>" set to wrong type'
            )

    @property
    def currentMessage(self):
        """str: Latest user updated message for the banner announcement event,
         max 1024 chars"""
        return self._currentMessage

    @currentMessage.setter
    def currentMessage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._currentMessage = value
        else:
            raise TypeError(
                'Property "currentMessage" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def estimatedUpdateTime(self):
        """str: Estimated next update time of the banner event in UTC 00:00"""
        return self._estimatedUpdateTime

    @estimatedUpdateTime.setter
    def estimatedUpdateTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._estimatedUpdateTime = value
        else:
            raise TypeError(
                'Property "estimatedUpdateTime" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def incidentHistory(self):
        """list: Array of bannerEventIncidentMeta Objects"""
        return self._incidentHistory

    @incidentHistory.setter
    def incidentHistory(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._incidentHistory = value
        else:
            raise TypeError(
                'Property "incidentHistory" of type "list<BannerEventIncident'
                'Meta>" set to wrong type'
            )

    @property
    def initialPostTime(self):
        """str: Initial post time of the banner event in UTC 00:00"""
        return self._initialPostTime

    @initialPostTime.setter
    def initialPostTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._initialPostTime = value
        else:
            raise TypeError(
                'Property "initialPostTime" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def lastUpdatedTime(self):
        """str: Last updated time of the banner event in UTC 00:00"""
        return self._lastUpdatedTime

    @lastUpdatedTime.setter
    def lastUpdatedTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastUpdatedTime = value
        else:
            raise TypeError(
                'Property "lastUpdatedTime" of type "list<str>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._backfilledTime is not None:
            result["backfilledTime"] = \
                self._backfilledTime
        if self._currentIncidentSeverity is not None:
            result["currentIncidentSeverity"] = \
                self._currentIncidentSeverity
        if self._currentIncidentStatus is not None:
            result["currentIncidentStatus"] = \
                self._currentIncidentStatus
        if self._currentMessage is not None:
            result["currentMessage"] = \
                self._currentMessage
        if self._estimatedUpdateTime is not None:
            result["estimatedUpdateTime"] = \
                self._estimatedUpdateTime
        if self._incidentHistory:
            result["incidentHistory"] = [
                i.toDict() for i in self._incidentHistory 
            ] if self._incidentHistory else []
        if self._initialPostTime is not None:
            result["initialPostTime"] = \
                self._initialPostTime
        if self._lastUpdatedTime is not None:
            result["lastUpdatedTime"] = \
                self._lastUpdatedTime
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._currentMessage is None:
            raise ValueError(
                "BannerEventIncident.currentMessage doesnt match requirement:" 
                "required: True"
            )
        if (self._currentMessage is not None
            and
            len(self._currentMessage) < 2):
            raise ValueError(
                "BannerEventIncident.currentMessage: " + str(self._currentMessage) + 
                " doesnt match requirement: minLength: 2")
        if (self._currentMessage is not None
            and
            len(self._currentMessage) > 1024):
            raise ValueError(
                "BannerEventIncident.currentMessage: " + str(self._currentMessage) + 
                " doesnt match requirement: maxLength: 1024")
        if (self._incidentHistory is not None):
            for obj in self._incidentHistory:
                if (obj is not None): obj.isValid()
        return True
    

