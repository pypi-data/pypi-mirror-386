"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobDataLocation import JobDataLocation
from .JobStatusEnum import JobStatusEnum
from .NodeSimplified import NodeSimplified
from .JobPortMapping import JobPortMapping

# Unused import over optimization prevention
str(repr(JobPortMapping))
str(repr(NodeSimplified))
str(repr(JobDataLocation))
str(repr(JobStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobStatus(object):
    """updates about job status are coming from the nodes"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aggregatedPreviousRunTimeSeconds = (
            None if not fromDict or propDict.get(
                "aggregatedPreviousRunTimeSeconds"
            ) is None
            else propDict["aggregatedPreviousRunTimeSeconds"])
        self.containerName = (
            None if not fromDict or propDict.get(
                "containerName"
            ) is None
            else propDict["containerName"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.endedAt = (
            None if not fromDict or propDict.get(
                "endedAt"
            ) is None
            else propDict["endedAt"])
        self.jobDataLocations = (
            None if not fromDict or propDict.get(
                "jobDataLocations"
            ) is None
            else [ JobDataLocation(i)
            for i in propDict["jobDataLocations"] ])
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])
        self.logUrlError = (
            None if not fromDict or propDict.get(
                "logUrlError"
            ) is None
            else propDict["logUrlError"])
        self.logUrlOutput = (
            None if not fromDict or propDict.get(
                "logUrlOutput"
            ) is None
            else propDict["logUrlOutput"])
        self.portMappings = (
            None if not fromDict or propDict.get(
                "portMappings"
            ) is None
            else [ JobPortMapping(i)
            for i in propDict["portMappings"] ])
        self.preemptedAt = (
            None if not fromDict or propDict.get(
                "preemptedAt"
            ) is None
            else propDict["preemptedAt"])
        self.queuedAt = (
            None if not fromDict or propDict.get(
                "queuedAt"
            ) is None
            else propDict["queuedAt"])
        self.resubmitId = (
            None if not fromDict or propDict.get(
                "resubmitId"
            ) is None
            else propDict["resubmitId"])
        self.selectedNodes = (
            None if not fromDict or propDict.get(
                "selectedNodes"
            ) is None
            else [ NodeSimplified(i)
            for i in propDict["selectedNodes"] ])
        self.startedAt = (
            None if not fromDict or propDict.get(
                "startedAt"
            ) is None
            else propDict["startedAt"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.statusDetails = (
            None if not fromDict or propDict.get(
                "statusDetails"
            ) is None
            else propDict["statusDetails"])
        self.statusType = (
            None if not fromDict or propDict.get(
                "statusType"
            ) is None
            else propDict["statusType"])
        self.timestamp = (
            None if not fromDict or propDict.get(
                "timestamp"
            ) is None
            else propDict["timestamp"])
        self.timestampStateEntry = (
            None if not fromDict or propDict.get(
                "timestampStateEntry"
            ) is None
            else propDict["timestampStateEntry"])
        self.totalRuntimeSeconds = (
            None if not fromDict or propDict.get(
                "totalRuntimeSeconds"
            ) is None
            else propDict["totalRuntimeSeconds"])

    @property
    def aggregatedPreviousRunTimeSeconds(self):
        """long: Total time that job ran during the last submission (/preempti
        on) in seconds, If the job was not resubmitted (/preempted), t
        hen this field will be either 0 or null"""
        return self._aggregatedPreviousRunTimeSeconds

    @aggregatedPreviousRunTimeSeconds.setter
    def aggregatedPreviousRunTimeSeconds(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aggregatedPreviousRunTimeSeconds = value
        else:
            raise TypeError(
                'Property "aggregatedPreviousRunTimeSeconds" of type "list<lo'
                'ng>" set to wrong type'
            )

    @property
    def containerName(self):
        """str: Name of the docker container running this job. Only set for a 
        RUNNING job."""
        return self._containerName

    @containerName.setter
    def containerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerName = value
        else:
            raise TypeError(
                'Property "containerName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def createdDate(self):
        """str: ISO date time describing create time of this job status"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def endedAt(self):
        """str: ISO date time describing end of the job, null if job is still 
        running"""
        return self._endedAt

    @endedAt.setter
    def endedAt(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._endedAt = value
        else:
            raise TypeError(
                'Property "endedAt" of type "list<str>" set to wrong type'
            )

    @property
    def jobDataLocations(self):
        """list: Actual data localtions used for the job"""
        return self._jobDataLocations

    @jobDataLocations.setter
    def jobDataLocations(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._jobDataLocations = value
        else:
            raise TypeError(
                'Property "jobDataLocations" of type "list<JobDataLocation>" '
                'set to wrong type'
            )

    @property
    def jobId(self):
        """long: [DEPRECATED] Unique Id of the job"""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<long>" set to wrong type'
            )

    @property
    def logUrlError(self):
        """str: [DEPRECATED] The URL for std error logging."""
        return self._logUrlError

    @logUrlError.setter
    def logUrlError(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logUrlError = value
        else:
            raise TypeError(
                'Property "logUrlError" of type "list<str>" set to wrong type'
            )

    @property
    def logUrlOutput(self):
        """str: [DEPRECATED] The URL for std output logging."""
        return self._logUrlOutput

    @logUrlOutput.setter
    def logUrlOutput(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._logUrlOutput = value
        else:
            raise TypeError(
                'Property "logUrlOutput" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def portMappings(self):
        """list: Actual port mappings used for the job"""
        return self._portMappings

    @portMappings.setter
    def portMappings(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._portMappings = value
        else:
            raise TypeError(
                'Property "portMappings" of type "list<JobPortMapping>" set t'
                'o wrong type'
            )

    @property
    def preemptedAt(self):
        """str: ISO date time describing when job got preempted"""
        return self._preemptedAt

    @preemptedAt.setter
    def preemptedAt(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._preemptedAt = value
        else:
            raise TypeError(
                'Property "preemptedAt" of type "list<str>" set to wrong type'
            )

    @property
    def queuedAt(self):
        """str: ISO date time describing queued time of the job"""
        return self._queuedAt

    @queuedAt.setter
    def queuedAt(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._queuedAt = value
        else:
            raise TypeError(
                'Property "queuedAt" of type "list<str>" set to wrong type'
            )

    @property
    def resubmitId(self):
        """long: Id of the submission of the job, beginning with 0"""
        return self._resubmitId

    @resubmitId.setter
    def resubmitId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resubmitId = value
        else:
            raise TypeError(
                'Property "resubmitId" of type "list<long>" set to wrong type'
            )

    @property
    def selectedNodes(self):
        """list: an array of nodes that uniquely identify nodes this job is ru
        nning on"""
        return self._selectedNodes

    @selectedNodes.setter
    def selectedNodes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._selectedNodes = value
        else:
            raise TypeError(
                'Property "selectedNodes" of type "list<NodeSimplified>" set '
                'to wrong type'
            )

    @property
    def startedAt(self):
        """str: ISO date time describing start of the job"""
        return self._startedAt

    @startedAt.setter
    def startedAt(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._startedAt = value
        else:
            raise TypeError(
                'Property "startedAt" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """JobStatusEnum: All possible job status enums"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<JobStatusEnum>" set to wrong'
                ' type'
            )

    @property
    def statusDetails(self):
        """str: Error information for a terminated job (finished/killed/failed
        )"""
        return self._statusDetails

    @statusDetails.setter
    def statusDetails(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._statusDetails = value
        else:
            raise TypeError(
                'Property "statusDetails" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def statusType(self):
        """ """
        return self._statusType

    @statusType.setter
    def statusType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._statusType = value
        else:
            raise TypeError(
                'Property "statusType" of type "list<StatusTypeEnum>" set to '
                'wrong type'
            )

    StatusTypeEnum=["UNKNOWN","OK","APPLICATION_ERROR","DOCKER_ERROR","CONTAINER_ERROR","SYSTEM_ERROR",]
    str(repr(StatusTypeEnum))  # Prevent optimizer removing enum

    @property
    def timestamp(self):
        """long: Unix timestamp in milliseconds, when the status was sent from
         appliance"""
        return self._timestamp

    @timestamp.setter
    def timestamp(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._timestamp = value
        else:
            raise TypeError(
                'Property "timestamp" of type "list<long>" set to wrong type'
            )

    @property
    def timestampStateEntry(self):
        """long: Unix timestamp in milliseconds, when job entered current stat
        e for current resubmitId"""
        return self._timestampStateEntry

    @timestampStateEntry.setter
    def timestampStateEntry(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._timestampStateEntry = value
        else:
            raise TypeError(
                'Property "timestampStateEntry" of type "list<long>" set to w'
                'rong type'
            )

    @property
    def totalRuntimeSeconds(self):
        """long: Total runtime of the job in seconds"""
        return self._totalRuntimeSeconds

    @totalRuntimeSeconds.setter
    def totalRuntimeSeconds(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._totalRuntimeSeconds = value
        else:
            raise TypeError(
                'Property "totalRuntimeSeconds" of type "list<long>" set to w'
                'rong type'
            )

    def toDict(self):
        result = {}
        if self._aggregatedPreviousRunTimeSeconds is not None:
            result["aggregatedPreviousRunTimeSeconds"] = \
                self._aggregatedPreviousRunTimeSeconds
        if self._containerName is not None:
            result["containerName"] = \
                self._containerName
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._endedAt is not None:
            result["endedAt"] = \
                self._endedAt
        if self._jobDataLocations:
            result["jobDataLocations"] = [
                i.toDict() for i in self._jobDataLocations 
            ] if self._jobDataLocations else []
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        if self._logUrlError is not None:
            result["logUrlError"] = \
                self._logUrlError
        if self._logUrlOutput is not None:
            result["logUrlOutput"] = \
                self._logUrlOutput
        if self._portMappings:
            result["portMappings"] = [
                i.toDict() for i in self._portMappings 
            ] if self._portMappings else []
        if self._preemptedAt is not None:
            result["preemptedAt"] = \
                self._preemptedAt
        if self._queuedAt is not None:
            result["queuedAt"] = \
                self._queuedAt
        if self._resubmitId is not None:
            result["resubmitId"] = \
                self._resubmitId
        if self._selectedNodes:
            result["selectedNodes"] = [
                i.toDict() for i in self._selectedNodes 
            ] if self._selectedNodes else []
        if self._startedAt is not None:
            result["startedAt"] = \
                self._startedAt
        if self._status is not None:
            result["status"] = \
                self._status
        if self._statusDetails is not None:
            result["statusDetails"] = \
                self._statusDetails
        if self._statusType is not None:
            result["statusType"] = \
                self._statusType
        if self._timestamp is not None:
            result["timestamp"] = \
                self._timestamp
        if self._timestampStateEntry is not None:
            result["timestampStateEntry"] = \
                self._timestampStateEntry
        if self._totalRuntimeSeconds is not None:
            result["totalRuntimeSeconds"] = \
                self._totalRuntimeSeconds
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._selectedNodes is not None):
            for obj in self._selectedNodes:
                if (obj is not None): obj.isValid()
        if (self._portMappings is not None):
            for obj in self._portMappings:
                if (obj is not None): obj.isValid()
        if (self._jobDataLocations is not None):
            for obj in self._jobDataLocations:
                if (obj is not None): obj.isValid()
        return True
    

