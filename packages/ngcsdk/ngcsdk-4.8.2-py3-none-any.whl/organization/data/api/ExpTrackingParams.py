"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobFlowTypeEnum import JobFlowTypeEnum

# Unused import over optimization prevention
str(repr(JobFlowTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class ExpTrackingParams(object):
    """ML experimentation tracking params associated to the job, when the job 
    is submitted for a third-party ML experimentation tracking system like
     Weights&Biases, MLFlow, etc"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.projectName = (
            None if not fromDict or propDict.get(
                "projectName"
            ) is None
            else propDict["projectName"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def name(self):
        """str: Optional Third-party experiment name to group the jobs/runs"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def projectName(self):
        """str: Third-party project/environment name to associate the current 
        job/run"""
        return self._projectName

    @projectName.setter
    def projectName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._projectName = value
        else:
            raise TypeError(
                'Property "projectName" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """JobFlowTypeEnum: Type of ML experiment flow"""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<JobFlowTypeEnum>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._name is not None:
            result["name"] = \
                self._name
        if self._projectName is not None:
            result["projectName"] = \
                self._projectName
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._projectName is None:
            raise ValueError(
                "ExpTrackingParams.projectName doesnt match requirement:" 
                "required: True"
            )
        if self._type is None:
            raise ValueError(
                "ExpTrackingParams.type doesnt match requirement:" 
                "required: True"
            )
        return True
    

