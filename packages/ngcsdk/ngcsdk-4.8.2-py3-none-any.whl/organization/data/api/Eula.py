"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class Eula(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.details = (
            None if not fromDict or propDict.get(
                "details"
            ) is None
            else propDict["details"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def details(self):
        """str: Full EULA  including file name, content, and name/type"""
        return self._details

    @details.setter
    def details(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._details = value
        else:
            raise TypeError(
                'Property "details" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """TypeEnum: End User License Agreement supported types"""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<TypeEnum>" set to wrong type'
            )

    TypeEnum=["UNKNOWN","CUSTOMER_EULA","APPLIANCE_EULA",]
    str(repr(TypeEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._details is not None:
            result["details"] = \
                self._details
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._details is not None
            and
            len(self._details) < 1):
            raise ValueError(
                "Eula.details: " + str(self._details) + 
                " doesnt match requirement: minLength: 1")
        if (self._details is not None
            and
            len(self._details) > 128000):
            raise ValueError(
                "Eula.details: " + str(self._details) + 
                " doesnt match requirement: maxLength: 128000")
        return True
    

