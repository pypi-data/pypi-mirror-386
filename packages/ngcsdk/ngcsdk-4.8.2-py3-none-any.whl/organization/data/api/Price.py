"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .CurrencyCode import CurrencyCodeEnum
from .PriceType import PriceTypeEnum

# Unused import over optimization prevention
str(repr(CurrencyCodeEnum))
str(repr(PriceTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Price(object):
    """Localized price"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.amount = (
            None if not fromDict or propDict.get(
                "amount"
            ) is None
            else propDict["amount"])
        self.currencyCode = (
            None if not fromDict or propDict.get(
                "currencyCode"
            ) is None
            else propDict["currencyCode"])
        self.currencySymbol = (
            None if not fromDict or propDict.get(
                "currencySymbol"
            ) is None
            else propDict["currencySymbol"])
        self.priceType = (
            None if not fromDict or propDict.get(
                "priceType"
            ) is None
            else propDict["priceType"])

    @property
    def amount(self):
        """float: Price amount"""
        return self._amount

    @amount.setter
    def amount(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._amount = value
        else:
            raise TypeError(
                'Property "amount" of type "list<float>" set to wrong type'
            )

    @property
    def currencyCode(self):
        """CurrencyCodeEnum: Currency code"""
        return self._currencyCode

    @currencyCode.setter
    def currencyCode(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._currencyCode = value
        else:
            raise TypeError(
                'Property "currencyCode" of type "list<CurrencyCodeEnum>" set'
                ' to wrong type'
            )

    @property
    def currencySymbol(self):
        """str: Currency symbol"""
        return self._currencySymbol

    @currencySymbol.setter
    def currencySymbol(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._currencySymbol = value
        else:
            raise TypeError(
                'Property "currencySymbol" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def priceType(self):
        """PriceTypeEnum: Price types"""
        return self._priceType

    @priceType.setter
    def priceType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._priceType = value
        else:
            raise TypeError(
                'Property "priceType" of type "list<PriceTypeEnum>" set to wr'
                'ong type'
            )

    def toDict(self):
        result = {}
        if self._amount is not None:
            result["amount"] = \
                self._amount
        if self._currencyCode is not None:
            result["currencyCode"] = \
                self._currencyCode
        if self._currencySymbol is not None:
            result["currencySymbol"] = \
                self._currencySymbol
        if self._priceType is not None:
            result["priceType"] = \
                self._priceType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

