"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserRegisterRequest(object):
    """object used to register an user for user sign up"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.consentedToShareInfo = (
            None if not fromDict or propDict.get(
                "consentedToShareInfo"
            ) is None
            else propDict["consentedToShareInfo"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.hasEmailOptIn = (
            None if not fromDict or propDict.get(
                "hasEmailOptIn"
            ) is None
            else propDict["hasEmailOptIn"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.nvidiaAccountEulaAccepted = (
            None if not fromDict or propDict.get(
                "nvidiaAccountEulaAccepted"
            ) is None
            else propDict["nvidiaAccountEulaAccepted"])

    @property
    def consentedToShareInfo(self):
        """bool: indicates if user has consented to share their registration i
        nfo with other parties"""
        return self._consentedToShareInfo

    @consentedToShareInfo.setter
    def consentedToShareInfo(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._consentedToShareInfo = value
        else:
            raise TypeError(
                'Property "consentedToShareInfo" of type "list<bool>" set to '
                'wrong type'
            )

    @property
    def email(self):
        """str: Email address of the user. This should be unique."""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def hasEmailOptIn(self):
        """bool: indicates if user has opt in to nvidia emails"""
        return self._hasEmailOptIn

    @hasEmailOptIn.setter
    def hasEmailOptIn(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasEmailOptIn = value
        else:
            raise TypeError(
                'Property "hasEmailOptIn" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def name(self):
        """str: user name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def nvidiaAccountEulaAccepted(self):
        """bool: indicates if user has accepted NVIDIA account EULA"""
        return self._nvidiaAccountEulaAccepted

    @nvidiaAccountEulaAccepted.setter
    def nvidiaAccountEulaAccepted(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._nvidiaAccountEulaAccepted = value
        else:
            raise TypeError(
                'Property "nvidiaAccountEulaAccepted" of type "list<bool>" se'
                't to wrong type'
            )

    def toDict(self):
        result = {}
        if self._consentedToShareInfo is not None:
            result["consentedToShareInfo"] = \
                self._consentedToShareInfo
        if self._email is not None:
            result["email"] = \
                self._email
        if self._hasEmailOptIn is not None:
            result["hasEmailOptIn"] = \
                self._hasEmailOptIn
        if self._name is not None:
            result["name"] = \
                self._name
        if self._nvidiaAccountEulaAccepted is not None:
            result["nvidiaAccountEulaAccepted"] = \
                self._nvidiaAccountEulaAccepted
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "UserRegisterRequest.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "UserRegisterRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "UserRegisterRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if self._email is None:
            raise ValueError(
                "UserRegisterRequest.email doesnt match requirement:" 
                "required: True"
            )
        if (self._email is not None
            and
            len(self._email) < 6):
            raise ValueError(
                "UserRegisterRequest.email: " + str(self._email) + 
                " doesnt match requirement: minLength: 6")
        if (self._email is not None
            and
            len(self._email) > 128):
            raise ValueError(
                "UserRegisterRequest.email: " + str(self._email) + 
                " doesnt match requirement: maxLength: 128")
        if (self._email is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._email)):
            raise ValueError(
                "UserRegisterRequest.email: " + str(self._email) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        return True
    

