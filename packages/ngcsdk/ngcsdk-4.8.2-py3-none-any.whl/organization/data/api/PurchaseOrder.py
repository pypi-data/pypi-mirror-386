"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class PurchaseOrder(object):
    """Purchase Order."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.entitlementId = (
            None if not fromDict or propDict.get(
                "entitlementId"
            ) is None
            else propDict["entitlementId"])
        self.pkId = (
            None if not fromDict or propDict.get(
                "pkId"
            ) is None
            else propDict["pkId"])

    @property
    def entitlementId(self):
        """str: Entitlement identifier."""
        return self._entitlementId

    @entitlementId.setter
    def entitlementId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._entitlementId = value
        else:
            raise TypeError(
                'Property "entitlementId" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def pkId(self):
        """str: PAK (Product Activation Key) identifier."""
        return self._pkId

    @pkId.setter
    def pkId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pkId = value
        else:
            raise TypeError(
                'Property "pkId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._entitlementId is not None:
            result["entitlementId"] = \
                self._entitlementId
        if self._pkId is not None:
            result["pkId"] = \
                self._pkId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

