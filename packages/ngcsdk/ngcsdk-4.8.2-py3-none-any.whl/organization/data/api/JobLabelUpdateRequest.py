"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class JobLabelUpdateRequest(object):
    """request to update labels of a job."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.lockLabels = (
            None if not fromDict or propDict.get(
                "lockLabels"
            ) is None
            else propDict["lockLabels"])
        self.reservedLabels = (
            None if not fromDict or propDict.get(
                "reservedLabels"
            ) is None
            else propDict["reservedLabels"])
        self.systemLabels = (
            None if not fromDict or propDict.get(
                "systemLabels"
            ) is None
            else propDict["systemLabels"])
        self.userLabels = (
            None if not fromDict or propDict.get(
                "userLabels"
            ) is None
            else propDict["userLabels"])

    @property
    def lockLabels(self):
        """bool: Indicates whether the labels will be locked or not"""
        return self._lockLabels

    @lockLabels.setter
    def lockLabels(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._lockLabels = value
        else:
            raise TypeError(
                'Property "lockLabels" of type "list<bool>" set to wrong type'
            )

    @property
    def reservedLabels(self):
        """list: An array of reserved labels"""
        return self._reservedLabels

    @reservedLabels.setter
    def reservedLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._reservedLabels = value
        else:
            raise TypeError(
                'Property "reservedLabels" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def systemLabels(self):
        """list: An array of system labels"""
        return self._systemLabels

    @systemLabels.setter
    def systemLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._systemLabels = value
        else:
            raise TypeError(
                'Property "systemLabels" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def userLabels(self):
        """list: An array of user labels that describe this job"""
        return self._userLabels

    @userLabels.setter
    def userLabels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._userLabels = value
        else:
            raise TypeError(
                'Property "userLabels" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._lockLabels is not None:
            result["lockLabels"] = \
                self._lockLabels
        if self._reservedLabels is not None:
            result["reservedLabels"] = \
                self._reservedLabels
        if self._systemLabels is not None:
            result["systemLabels"] = \
                self._systemLabels
        if self._userLabels is not None:
            result["userLabels"] = \
                self._userLabels
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

