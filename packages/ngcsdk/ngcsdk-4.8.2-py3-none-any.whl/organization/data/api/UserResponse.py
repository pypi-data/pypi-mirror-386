"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RequestStatus import RequestStatus
from .UserRole import UserRole
from .User import User

# Unused import over optimization prevention
str(repr(UserRole))
str(repr(RequestStatus))
str(repr(User))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserResponse(object):
    """ about one user"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.activationToken = (
            None if not fromDict or propDict.get(
                "activationToken"
            ) is None
            else propDict["activationToken"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])
        self.user = (
            None if not fromDict or propDict.get(
                "user"
            ) is None
            else propDict["user"])
        self.userRoles = (
            None if not fromDict or propDict.get(
                "userRoles"
            ) is None
            else [ UserRole(i)
            for i in propDict["userRoles"] ])

    @property
    def activationToken(self):
        """str: token needed to activate the user to enable login and other fe
        atures"""
        return self._activationToken

    @activationToken.setter
    def activationToken(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._activationToken = value
        else:
            raise TypeError(
                'Property "activationToken" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    @property
    def user(self):
        """User: information about the user"""
        return self._user

    @user.setter
    def user(self, value):
        if value is not None and not isinstance(value, User):
            value = User(value)
        if (value is None) or isinstance(value, User):
            self._user = value
        else:
            raise TypeError(
                'Property "user" of type "list<User>" set to wrong type'
            )

    @property
    def userRoles(self):
        """list: DEPRECATED - Please use roles inside user"""
        return self._userRoles

    @userRoles.setter
    def userRoles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._userRoles = value
        else:
            raise TypeError(
                'Property "userRoles" of type "list<UserRole>" set to wrong t'
                'ype'
            )

    def toDict(self):
        result = {}
        if self._activationToken is not None:
            result["activationToken"] = \
                self._activationToken
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        if self._user:
            result["user"] = \
                self._user.toDict() if self._user is not None else None
        if self._userRoles:
            result["userRoles"] = [
                i.toDict() for i in self._userRoles 
            ] if self._userRoles else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._user is not None): self._user.isValid()
        if (self._userRoles is not None):
            for obj in self._userRoles:
                if (obj is not None): obj.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

