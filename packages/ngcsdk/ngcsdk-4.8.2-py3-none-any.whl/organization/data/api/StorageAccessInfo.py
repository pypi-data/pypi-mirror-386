"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class StorageAccessInfo(object):
    """Describes the information required to access and mount the storage reso
    urce"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.mountPoint = (
            None if not fromDict or propDict.get(
                "mountPoint"
            ) is None
            else propDict["mountPoint"])
        self.protocol = (
            None if not fromDict or propDict.get(
                "protocol"
            ) is None
            else propDict["protocol"])
        self.shareHost = (
            None if not fromDict or propDict.get(
                "shareHost"
            ) is None
            else propDict["shareHost"])
        self.sharePath = (
            None if not fromDict or propDict.get(
                "sharePath"
            ) is None
            else propDict["sharePath"])

    @property
    def mountPoint(self):
        """str: Path on the local system where the remote path will be mounted
        """
        return self._mountPoint

    @mountPoint.setter
    def mountPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mountPoint = value
        else:
            raise TypeError(
                'Property "mountPoint" of type "list<str>" set to wrong type'
            )

    @property
    def protocol(self):
        """ """
        return self._protocol

    @protocol.setter
    def protocol(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._protocol = value
        else:
            raise TypeError(
                'Property "protocol" of type "list<ProtocolEnum>" set to wron'
                'g type'
            )

    ProtocolEnum=["UNKNOWN","NFSV3","CEPH","LOCAL","LUSTRE","ZFS","YAROFS","PROXYFS",]
    str(repr(ProtocolEnum))  # Prevent optimizer removing enum

    @property
    def shareHost(self):
        """str: IP address or host name or URL where the share is"""
        return self._shareHost

    @shareHost.setter
    def shareHost(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shareHost = value
        else:
            raise TypeError(
                'Property "shareHost" of type "list<str>" set to wrong type'
            )

    @property
    def sharePath(self):
        """str: Path that should be used when mounting this storage end point
        """
        return self._sharePath

    @sharePath.setter
    def sharePath(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sharePath = value
        else:
            raise TypeError(
                'Property "sharePath" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._mountPoint is not None:
            result["mountPoint"] = \
                self._mountPoint
        if self._protocol is not None:
            result["protocol"] = \
                self._protocol
        if self._shareHost is not None:
            result["shareHost"] = \
                self._shareHost
        if self._sharePath is not None:
            result["sharePath"] = \
                self._sharePath
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

