"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .DatasetStatusEnum import DatasetStatusEnum

# Unused import over optimization prevention
str(repr(DatasetStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class DatasetUpdateRequest(object):
    """Dataset update request."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.convertToDatasetFromResultsetUuid = (
            None if not fromDict or propDict.get(
                "convertToDatasetFromResultsetUuid"
            ) is None
            else propDict["convertToDatasetFromResultsetUuid"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.nfsRoot = (
            None if not fromDict or propDict.get(
                "nfsRoot"
            ) is None
            else propDict["nfsRoot"])
        self.nfsShare = (
            None if not fromDict or propDict.get(
                "nfsShare"
            ) is None
            else propDict["nfsShare"])
        self.prepopulated = (
            None if not fromDict or propDict.get(
                "prepopulated"
            ) is None
            else propDict["prepopulated"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def convertToDatasetFromResultsetUuid(self):
        """str: UUID to convert resultset in dataset service to dataset resour
        ce type. This is only applicable for dataset service enabled A
        CEs"""
        return self._convertToDatasetFromResultsetUuid

    @convertToDatasetFromResultsetUuid.setter
    def convertToDatasetFromResultsetUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._convertToDatasetFromResultsetUuid = value
        else:
            raise TypeError(
                'Property "convertToDatasetFromResultsetUuid" of type "list<s'
                'tr>" set to wrong type'
            )

    @property
    def description(self):
        """str: Description of the dataset"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Name for the dataset"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def nfsRoot(self):
        """str: Path on the NFS share that indicates root directory for the da
        taset"""
        return self._nfsRoot

    @nfsRoot.setter
    def nfsRoot(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nfsRoot = value
        else:
            raise TypeError(
                'Property "nfsRoot" of type "list<str>" set to wrong type'
            )

    @property
    def nfsShare(self):
        """str: Location of the NFS share"""
        return self._nfsShare

    @nfsShare.setter
    def nfsShare(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._nfsShare = value
        else:
            raise TypeError(
                'Property "nfsShare" of type "list<str>" set to wrong type'
            )

    @property
    def prepopulated(self):
        """str: Empty means not prepopulated anywhere. Contain e.g. 'prd0' or 
        'prd0,prd2' or 'all ace', if a roll out is done in stages."""
        return self._prepopulated

    @prepopulated.setter
    def prepopulated(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._prepopulated = value
        else:
            raise TypeError(
                'Property "prepopulated" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def status(self):
        """DatasetStatusEnum: Indicates the current status of a dataset."""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<DatasetStatusEnum>" set to w'
                'rong type'
            )

    def toDict(self):
        result = {}
        if self._convertToDatasetFromResultsetUuid is not None:
            result["convertToDatasetFromResultsetUuid"] = \
                self._convertToDatasetFromResultsetUuid
        if self._description is not None:
            result["description"] = \
                self._description
        if self._name is not None:
            result["name"] = \
                self._name
        if self._nfsRoot is not None:
            result["nfsRoot"] = \
                self._nfsRoot
        if self._nfsShare is not None:
            result["nfsShare"] = \
                self._nfsShare
        if self._prepopulated is not None:
            result["prepopulated"] = \
                self._prepopulated
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 2):
            raise ValueError(
                "DatasetUpdateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 2")
        if (self._name is not None
            and
            len(self._name) > 255):
            raise ValueError(
                "DatasetUpdateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 255")
        return True
    

