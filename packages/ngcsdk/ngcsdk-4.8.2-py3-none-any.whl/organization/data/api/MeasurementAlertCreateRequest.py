"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MeasurementAlertCriteria import MeasurementAlertCriteria
from .AlertDeliveryMode import AlertDeliveryMode
from .MeasurementType import MeasurementTypeEnum

# Unused import over optimization prevention
str(repr(MeasurementAlertCriteria))
str(repr(MeasurementTypeEnum))
str(repr(AlertDeliveryMode))


if sys.version_info > (3,):
    long = int
    unicode = str

class MeasurementAlertCreateRequest(object):
    """Request to create measurement alert"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.criteria = (
            None if not fromDict or propDict.get(
                "criteria"
            ) is None
            else [ MeasurementAlertCriteria(i)
            for i in propDict["criteria"] ])
        self.deliveryModes = (
            None if not fromDict or propDict.get(
                "deliveryModes"
            ) is None
            else [ AlertDeliveryMode(i)
            for i in propDict["deliveryModes"] ])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.enabled = (
            None if not fromDict or propDict.get(
                "enabled"
            ) is None
            else propDict["enabled"])
        self.eventType = (
            None if not fromDict or propDict.get(
                "eventType"
            ) is None
            else propDict["eventType"])
        self.message = (
            None if not fromDict or propDict.get(
                "message"
            ) is None
            else propDict["message"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def criteria(self):
        """list: List of criterion at which alerts will be fired"""
        return self._criteria

    @criteria.setter
    def criteria(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._criteria = value
        else:
            raise TypeError(
                'Property "criteria" of type "list<MeasurementAlertCriteria>"'
                ' set to wrong type'
            )

    @property
    def deliveryModes(self):
        """ """
        return self._deliveryModes

    @deliveryModes.setter
    def deliveryModes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._deliveryModes = value
        else:
            raise TypeError(
                'Property "deliveryModes" of type "list<AlertDeliveryMode>" s'
                'et to wrong type'
            )

    @property
    def description(self):
        """str: User defined description for this alert"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def enabled(self):
        """bool: Specifies whether is alert is enabled or disabled. Alerts are
         enabled by default, but can be created disabled"""
        return self._enabled

    @enabled.setter
    def enabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._enabled = value
        else:
            raise TypeError(
                'Property "enabled" of type "list<bool>" set to wrong type'
            )

    @property
    def eventType(self):
        """ """
        return self._eventType

    @eventType.setter
    def eventType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._eventType = value
        else:
            raise TypeError(
                'Property "eventType" of type "list<MeasurementTypeEnum>" set'
                ' to wrong type'
            )

    @property
    def message(self):
        """str: Message generated for alert, leave blank for custom message"""
        return self._message

    @message.setter
    def message(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._message = value
        else:
            raise TypeError(
                'Property "message" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: User defined alert name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._criteria:
            result["criteria"] = [
                i.toDict() for i in self._criteria 
            ] if self._criteria else []
        if self._deliveryModes:
            result["deliveryModes"] = [
                i.toDict() for i in self._deliveryModes 
            ] if self._deliveryModes else []
        if self._description is not None:
            result["description"] = \
                self._description
        if self._enabled is not None:
            result["enabled"] = \
                self._enabled
        if self._eventType is not None:
            result["eventType"] = \
                self._eventType
        if self._message is not None:
            result["message"] = \
                self._message
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "MeasurementAlertCreateRequest.name doesnt match requirement:" 
                "required: True"
            )
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "MeasurementAlertCreateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if (self._description is not None
            and
            len(self._description) > 128):
            raise ValueError(
                "MeasurementAlertCreateRequest.description: " + str(self._description) + 
                " doesnt match requirement: maxLength: 128")
        if (self._message is not None
            and
            len(self._message) > 255):
            raise ValueError(
                "MeasurementAlertCreateRequest.message: " + str(self._message) + 
                " doesnt match requirement: maxLength: 255")
        if self._eventType is None:
            raise ValueError(
                "MeasurementAlertCreateRequest.eventType doesnt match requirement:" 
                "required: True"
            )
        if self._criteria is None:
            raise ValueError(
                "MeasurementAlertCreateRequest.criteria doesnt match requirement:" 
                "required: True"
            )
        if (self._criteria is not None
            and
            len(self._criteria) < 1):
            raise ValueError(
                "MeasurementAlertCreateRequest.criteria: " + str(self._criteria) + 
                " doesnt match requirement: minItems: 1")
        if self._deliveryModes is None:
            raise ValueError(
                "MeasurementAlertCreateRequest.deliveryModes doesnt match requirement:" 
                "required: True"
            )
        if (self._criteria is not None):
            for obj in self._criteria:
                if (obj is not None): obj.isValid()
        if (self._deliveryModes is not None):
            for obj in self._deliveryModes:
                if (obj is not None): obj.isValid()
        return True
    

