"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .NodeCommand import NodeCommand

# Unused import over optimization prevention
str(repr(NodeCommand))


if sys.version_info > (3,):
    long = int
    unicode = str

class NodeCommandRequest(object):
    """Request to execute a command on a node."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.nodeCommand = (
            None if not fromDict or propDict.get(
                "nodeCommand"
            ) is None
            else propDict["nodeCommand"])
        self.output = (
            None if not fromDict or propDict.get(
                "output"
            ) is None
            else propDict["output"])

    @property
    def nodeCommand(self):
        """NodeCommand: Specifies the command to run on a node."""
        return self._nodeCommand

    @nodeCommand.setter
    def nodeCommand(self, value):
        if value is not None and not isinstance(value, NodeCommand):
            value = NodeCommand(value)
        if (value is None) or isinstance(value, NodeCommand):
            self._nodeCommand = value
        else:
            raise TypeError(
                'Property "nodeCommand" of type "list<NodeCommand>" set to wr'
                'ong type'
            )

    @property
    def output(self):
        """str: The output corresponding to the node command execution."""
        return self._output

    @output.setter
    def output(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._output = value
        else:
            raise TypeError(
                'Property "output" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._nodeCommand:
            result["nodeCommand"] = \
                self._nodeCommand.toDict() if self._nodeCommand is not None else None
        if self._output is not None:
            result["output"] = \
                self._output
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._nodeCommand is not None): self._nodeCommand.isValid()
        return True
    

