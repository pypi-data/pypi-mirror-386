"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class RepoScanSettings(object):
    """Repo scan setting definition"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.repoScanAllowOverride = (
            None if not fromDict or propDict.get(
                "repoScanAllowOverride"
            ) is None
            else propDict["repoScanAllowOverride"])
        self.repoScanByDefault = (
            None if not fromDict or propDict.get(
                "repoScanByDefault"
            ) is None
            else propDict["repoScanByDefault"])
        self.repoScanEnableNotifications = (
            None if not fromDict or propDict.get(
                "repoScanEnableNotifications"
            ) is None
            else propDict["repoScanEnableNotifications"])
        self.repoScanEnableTeamOverride = (
            None if not fromDict or propDict.get(
                "repoScanEnableTeamOverride"
            ) is None
            else propDict["repoScanEnableTeamOverride"])
        self.repoScanEnabled = (
            None if not fromDict or propDict.get(
                "repoScanEnabled"
            ) is None
            else propDict["repoScanEnabled"])
        self.repoScanShowResults = (
            None if not fromDict or propDict.get(
                "repoScanShowResults"
            ) is None
            else propDict["repoScanShowResults"])

    @property
    def repoScanAllowOverride(self):
        """bool: Allow org admin to override the org level repo scan settings
        """
        return self._repoScanAllowOverride

    @repoScanAllowOverride.setter
    def repoScanAllowOverride(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._repoScanAllowOverride = value
        else:
            raise TypeError(
                'Property "repoScanAllowOverride" of type "list<bool>" set to'
                ' wrong type'
            )

    @property
    def repoScanByDefault(self):
        """bool: Allow repository scanning by default"""
        return self._repoScanByDefault

    @repoScanByDefault.setter
    def repoScanByDefault(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._repoScanByDefault = value
        else:
            raise TypeError(
                'Property "repoScanByDefault" of type "list<bool>" set to wro'
                'ng type'
            )

    @property
    def repoScanEnableNotifications(self):
        """bool: Sends notification to end user after scanning is done"""
        return self._repoScanEnableNotifications

    @repoScanEnableNotifications.setter
    def repoScanEnableNotifications(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._repoScanEnableNotifications = value
        else:
            raise TypeError(
                'Property "repoScanEnableNotifications" of type "list<bool>" '
                'set to wrong type'
            )

    @property
    def repoScanEnableTeamOverride(self):
        """bool: Allow override settings at team level. Only used in org level
         object"""
        return self._repoScanEnableTeamOverride

    @repoScanEnableTeamOverride.setter
    def repoScanEnableTeamOverride(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._repoScanEnableTeamOverride = value
        else:
            raise TypeError(
                'Property "repoScanEnableTeamOverride" of type "list<bool>" s'
                'et to wrong type'
            )

    @property
    def repoScanEnabled(self):
        """bool: Enable the repository scan or not. Only used in org level obj
        ect"""
        return self._repoScanEnabled

    @repoScanEnabled.setter
    def repoScanEnabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._repoScanEnabled = value
        else:
            raise TypeError(
                'Property "repoScanEnabled" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def repoScanShowResults(self):
        """bool: Allow showing scan results to CLI or UI"""
        return self._repoScanShowResults

    @repoScanShowResults.setter
    def repoScanShowResults(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._repoScanShowResults = value
        else:
            raise TypeError(
                'Property "repoScanShowResults" of type "list<bool>" set to w'
                'rong type'
            )

    def toDict(self):
        result = {}
        if self._repoScanAllowOverride is not None:
            result["repoScanAllowOverride"] = \
                self._repoScanAllowOverride
        if self._repoScanByDefault is not None:
            result["repoScanByDefault"] = \
                self._repoScanByDefault
        if self._repoScanEnableNotifications is not None:
            result["repoScanEnableNotifications"] = \
                self._repoScanEnableNotifications
        if self._repoScanEnableTeamOverride is not None:
            result["repoScanEnableTeamOverride"] = \
                self._repoScanEnableTeamOverride
        if self._repoScanEnabled is not None:
            result["repoScanEnabled"] = \
                self._repoScanEnabled
        if self._repoScanShowResults is not None:
            result["repoScanShowResults"] = \
                self._repoScanShowResults
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

