"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class TargetSystemUserIdentifier(object):
    """Information about the user who is attempting to run the job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.gid = (
            None if not fromDict or propDict.get(
                "gid"
            ) is None
            else propDict["gid"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.starfleetId = (
            None if not fromDict or propDict.get(
                "starfleetId"
            ) is None
            else propDict["starfleetId"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])
        self.uid = (
            None if not fromDict or propDict.get(
                "uid"
            ) is None
            else propDict["uid"])
        self.userId = (
            None if not fromDict or propDict.get(
                "userId"
            ) is None
            else propDict["userId"])

    @property
    def gid(self):
        """long: gid of the user on this team"""
        return self._gid

    @gid.setter
    def gid(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._gid = value
        else:
            raise TypeError(
                'Property "gid" of type "list<long>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Org context for the job"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def starfleetId(self):
        """str: Starfleet ID of the user creating the job."""
        return self._starfleetId

    @starfleetId.setter
    def starfleetId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._starfleetId = value
        else:
            raise TypeError(
                'Property "starfleetId" of type "list<str>" set to wrong type'
            )

    @property
    def teamName(self):
        """str: Team context for the job"""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    @property
    def uid(self):
        """long: uid of the user on this team"""
        return self._uid

    @uid.setter
    def uid(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._uid = value
        else:
            raise TypeError(
                'Property "uid" of type "list<long>" set to wrong type'
            )

    @property
    def userId(self):
        """long: Unique ID of the user who submitted the job"""
        return self._userId

    @userId.setter
    def userId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._userId = value
        else:
            raise TypeError(
                'Property "userId" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._gid is not None:
            result["gid"] = \
                self._gid
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._starfleetId is not None:
            result["starfleetId"] = \
                self._starfleetId
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        if self._uid is not None:
            result["uid"] = \
                self._uid
        if self._userId is not None:
            result["userId"] = \
                self._userId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._uid is not None
            and
            self._uid < 1):
            raise ValueError(
                "TargetSystemUserIdentifier.uid: " + str(self._uid) + 
                " doesnt match requirement: minimum: 1")
        if (self._uid is not None
            and
            self._uid > 4294967296):
            raise ValueError(
                "TargetSystemUserIdentifier.uid: " + str(self._uid) + 
                " doesnt match requirement: maximum: 4294967296")
        if (self._gid is not None
            and
            self._gid < 1):
            raise ValueError(
                "TargetSystemUserIdentifier.gid: " + str(self._gid) + 
                " doesnt match requirement: minimum: 1")
        if (self._gid is not None
            and
            self._gid > 4294967296):
            raise ValueError(
                "TargetSystemUserIdentifier.gid: " + str(self._gid) + 
                " doesnt match requirement: maximum: 4294967296")
        return True
    

