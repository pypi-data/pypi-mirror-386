"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .StorageAccessInfo import StorageAccessInfo

# Unused import over optimization prevention
str(repr(StorageAccessInfo))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobDataLocation(object):
    """describes the data used for this job"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accessRights = (
            None if not fromDict or propDict.get(
                "accessRights"
            ) is None
            else propDict["accessRights"])
        self.mountPoint = (
            None if not fromDict or propDict.get(
                "mountPoint"
            ) is None
            else propDict["mountPoint"])
        self.protocol = (
            None if not fromDict or propDict.get(
                "protocol"
            ) is None
            else propDict["protocol"])
        self.resourceId = (
            None if not fromDict or propDict.get(
                "resourceId"
            ) is None
            else propDict["resourceId"])
        self.shareClientId = (
            None if not fromDict or propDict.get(
                "shareClientId"
            ) is None
            else propDict["shareClientId"])
        self.shareHost = (
            None if not fromDict or propDict.get(
                "shareHost"
            ) is None
            else propDict["shareHost"])
        self.sharePath = (
            None if not fromDict or propDict.get(
                "sharePath"
            ) is None
            else propDict["sharePath"])
        self.shareSecret = (
            None if not fromDict or propDict.get(
                "shareSecret"
            ) is None
            else propDict["shareSecret"])
        self.storageAccessInfo = (
            None if not fromDict or propDict.get(
                "storageAccessInfo"
            ) is None
            else propDict["storageAccessInfo"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def accessRights(self):
        """AccessRightsEnum: Permissions for the volume when mounted"""
        return self._accessRights

    @accessRights.setter
    def accessRights(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._accessRights = value
        else:
            raise TypeError(
                'Property "accessRights" of type "list<AccessRightsEnum>" set'
                ' to wrong type'
            )

    AccessRightsEnum=["RO","RW",]
    str(repr(AccessRightsEnum))  # Prevent optimizer removing enum

    @property
    def mountPoint(self):
        """str: [DEPRECATED] Set this in StorageAccessInfo"""
        return self._mountPoint

    @mountPoint.setter
    def mountPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._mountPoint = value
        else:
            raise TypeError(
                'Property "mountPoint" of type "list<str>" set to wrong type'
            )

    @property
    def protocol(self):
        """ProtocolEnum: [DEPRECATED] Set this in StorageAccessInfo"""
        return self._protocol

    @protocol.setter
    def protocol(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._protocol = value
        else:
            raise TypeError(
                'Property "protocol" of type "list<ProtocolEnum>" set to wron'
                'g type'
            )

    ProtocolEnum=["UNKNOWN","NFSV3","CEPH","LOCAL","ZFS","YAROFS","LUSTRE","PROXYFS",]
    str(repr(ProtocolEnum))  # Prevent optimizer removing enum

    @property
    def resourceId(self):
        """str: Unique identifier for the resource data"""
        return self._resourceId

    @resourceId.setter
    def resourceId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resourceId = value
        else:
            raise TypeError(
                'Property "resourceId" of type "list<str>" set to wrong type'
            )

    @property
    def shareClientId(self):
        """str: [DEPRECATED] Ceph specific field. Set this in StorageCephInfo
        """
        return self._shareClientId

    @shareClientId.setter
    def shareClientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shareClientId = value
        else:
            raise TypeError(
                'Property "shareClientId" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def shareHost(self):
        """str: [DEPRECATED] Set this in StorageAccessInfo"""
        return self._shareHost

    @shareHost.setter
    def shareHost(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shareHost = value
        else:
            raise TypeError(
                'Property "shareHost" of type "list<str>" set to wrong type'
            )

    @property
    def sharePath(self):
        """str: [DEPRECATED] Set this in StorageAccessInfo"""
        return self._sharePath

    @sharePath.setter
    def sharePath(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sharePath = value
        else:
            raise TypeError(
                'Property "sharePath" of type "list<str>" set to wrong type'
            )

    @property
    def shareSecret(self):
        """str: [DEPRECATED] Ceph specific field. Set this in StorageCephInfo
        """
        return self._shareSecret

    @shareSecret.setter
    def shareSecret(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shareSecret = value
        else:
            raise TypeError(
                'Property "shareSecret" of type "list<str>" set to wrong type'
            )

    @property
    def storageAccessInfo(self):
        """StorageAccessInfo: Describes the information required to access and
         mount the storage resource"""
        return self._storageAccessInfo

    @storageAccessInfo.setter
    def storageAccessInfo(self, value):
        if value is not None and not isinstance(value, StorageAccessInfo):
            value = StorageAccessInfo(value)
        if (value is None) or isinstance(value, StorageAccessInfo):
            self._storageAccessInfo = value
        else:
            raise TypeError(
                'Property "storageAccessInfo" of type "list<StorageAccessInfo'
                '>" set to wrong type'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<TypeEnum>" set to wrong type'
            )

    TypeEnum=["DATASET","RESULTSET","WORKSPACE","LOGSPACE","SCRATCHSPACE",]
    str(repr(TypeEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._accessRights is not None:
            result["accessRights"] = \
                self._accessRights
        if self._mountPoint is not None:
            result["mountPoint"] = \
                self._mountPoint
        if self._protocol is not None:
            result["protocol"] = \
                self._protocol
        if self._resourceId is not None:
            result["resourceId"] = \
                self._resourceId
        if self._shareClientId is not None:
            result["shareClientId"] = \
                self._shareClientId
        if self._shareHost is not None:
            result["shareHost"] = \
                self._shareHost
        if self._sharePath is not None:
            result["sharePath"] = \
                self._sharePath
        if self._shareSecret is not None:
            result["shareSecret"] = \
                self._shareSecret
        if self._storageAccessInfo:
            result["storageAccessInfo"] = \
                self._storageAccessInfo.toDict() if self._storageAccessInfo is not None else None
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._storageAccessInfo is not None): self._storageAccessInfo.isValid()
        return True
    

