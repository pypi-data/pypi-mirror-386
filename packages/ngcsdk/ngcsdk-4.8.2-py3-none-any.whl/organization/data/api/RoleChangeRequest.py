"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class RoleChangeRequest(object):
    """Object used to update the role of the node. Node can be a master or a w
    orker. Node shoudl send node status update after processing this messa
    ge"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.masterIps = (
            None if not fromDict or propDict.get(
                "masterIps"
            ) is None
            else propDict["masterIps"])
        self.setRole = (
            None if not fromDict or propDict.get(
                "setRole"
            ) is None
            else propDict["setRole"])
        self.turnId = (
            None if not fromDict or propDict.get(
                "turnId"
            ) is None
            else propDict["turnId"])

    @property
    def masterIps(self):
        """list: IP addresses of all masters for the ACE that this node belong
        s to"""
        return self._masterIps

    @masterIps.setter
    def masterIps(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._masterIps = value
        else:
            raise TypeError(
                'Property "masterIps" of type "list<str>" set to wrong type'
            )

    @property
    def setRole(self):
        """SetRoleEnum: identifies the service that would need to update its c
        onfiguration"""
        return self._setRole

    @setRole.setter
    def setRole(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._setRole = value
        else:
            raise TypeError(
                'Property "setRole" of type "list<SetRoleEnum>" set to wrong '
                'type'
            )

    SetRoleEnum=["UNKNOWN","MASTER","WORKER",]
    str(repr(SetRoleEnum))  # Prevent optimizer removing enum

    @property
    def turnId(self):
        """str: Turn ID of the ACE configuration which resulted in the current
         role. By default this value should be 0"""
        return self._turnId

    @turnId.setter
    def turnId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._turnId = value
        else:
            raise TypeError(
                'Property "turnId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._masterIps is not None:
            result["masterIps"] = \
                self._masterIps
        if self._setRole is not None:
            result["setRole"] = \
                self._setRole
        if self._turnId is not None:
            result["turnId"] = \
                self._turnId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._turnId is None:
            raise ValueError(
                "RoleChangeRequest.turnId doesnt match requirement:" 
                "required: True"
            )
        if self._setRole is None:
            raise ValueError(
                "RoleChangeRequest.setRole doesnt match requirement:" 
                "required: True"
            )
        if self._masterIps is None:
            raise ValueError(
                "RoleChangeRequest.masterIps doesnt match requirement:" 
                "required: True"
            )
        if (self._masterIps is not None
            and
            len(self._masterIps) < 7):
            raise ValueError(
                "RoleChangeRequest.masterIps: " + str(self._masterIps) + 
                " doesnt match requirement: minLength: 7")
        if (self._masterIps is not None
            and
            len(self._masterIps) > 15):
            raise ValueError(
                "RoleChangeRequest.masterIps: " + str(self._masterIps) + 
                " doesnt match requirement: maxLength: 15")
        if (self._masterIps is not None
            and
            len(self._masterIps) > 3):
            raise ValueError(
                "RoleChangeRequest.masterIps: " + str(self._masterIps) + 
                " doesnt match requirement: maxItems: 3")
        if (self._masterIps is not None
            and
            len(self._masterIps) < 1):
            raise ValueError(
                "RoleChangeRequest.masterIps: " + str(self._masterIps) + 
                " doesnt match requirement: minItems: 1")
        return True
    

