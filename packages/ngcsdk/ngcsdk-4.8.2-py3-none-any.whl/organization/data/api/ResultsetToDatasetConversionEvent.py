"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ResultsetToDatasetConversionEvent(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.datasetId = (
            None if not fromDict or propDict.get(
                "datasetId"
            ) is None
            else propDict["datasetId"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.resultsetId = (
            None if not fromDict or propDict.get(
                "resultsetId"
            ) is None
            else propDict["resultsetId"])

    @property
    def datasetId(self):
        """long: Unique identifier of the dataset that we'll be copying the da
        ta to"""
        return self._datasetId

    @datasetId.setter
    def datasetId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._datasetId = value
        else:
            raise TypeError(
                'Property "datasetId" of type "list<long>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Unique identifier of the org that the resultset and dataset be
        longs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def resultsetId(self):
        """long: Unique identifier of the resultset that we'll be copying the 
        data from"""
        return self._resultsetId

    @resultsetId.setter
    def resultsetId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resultsetId = value
        else:
            raise TypeError(
                'Property "resultsetId" of type "list<long>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._datasetId is not None:
            result["datasetId"] = \
                self._datasetId
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._resultsetId is not None:
            result["resultsetId"] = \
                self._resultsetId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

