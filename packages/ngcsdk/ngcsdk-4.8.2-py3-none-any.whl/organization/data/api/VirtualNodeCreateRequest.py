"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class VirtualNodeCreateRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.isParsec = (
            None if not fromDict or propDict.get(
                "isParsec"
            ) is None
            else propDict["isParsec"])

    @property
    def aceId(self):
        """long: The Id for the ACE."""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def isParsec(self):
        """bool: Indicates if the node is managed by parsec"""
        return self._isParsec

    @isParsec.setter
    def isParsec(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isParsec = value
        else:
            raise TypeError(
                'Property "isParsec" of type "list<bool>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._isParsec is not None:
            result["isParsec"] = \
                self._isParsec
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._isParsec is None:
            raise ValueError(
                "VirtualNodeCreateRequest.isParsec doesnt match requirement:" 
                "required: True"
            )
        return True
    

