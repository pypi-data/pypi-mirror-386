"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class PasswordChangeRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.password = (
            None if not fromDict or propDict.get(
                "password"
            ) is None
            else propDict["password"])

    @property
    def email(self):
        """ """
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def password(self):
        """ """
        return self._password

    @password.setter
    def password(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._password = value
        else:
            raise TypeError(
                'Property "password" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._email is not None:
            result["email"] = \
                self._email
        if self._password is not None:
            result["password"] = \
                self._password
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._password is None:
            raise ValueError(
                "PasswordChangeRequest.password doesnt match requirement:" 
                "required: True"
            )
        if (self._password is not None
            and
            len(self._password) < 9):
            raise ValueError(
                "PasswordChangeRequest.password: " + str(self._password) + 
                " doesnt match requirement: minLength: 9")
        if (self._password is not None
            and
            len(self._password) > 64):
            raise ValueError(
                "PasswordChangeRequest.password: " + str(self._password) + 
                " doesnt match requirement: maxLength: 64")
        if (self._password is not None
            and
            not re.match(
                r"^(?=.*[\p{Nd}])(?=.*[\p{Ll}])(?=.*[\p{Lu}\p{Lt}])(?=.*[~!@#"
                "$%^&*_\-+=`|\\(){}\[\]:;\\\"'<>,.?/]).*$",
                 self._password)):
            raise ValueError(
                "PasswordChangeRequest.password: " + str(self._password) + 
                " doesnt match requirement: pattern: ^(?=.*[\p{Nd}])(?=.*[\p{"
                "Ll}])(?=.*[\p{Lu}\p{Lt}])(?=.*[~!@#$%^&*_\-"
                "+=`|\\(){}\[\]:;\\\"'<>,.?/]).*$")
        return True
    

