"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class HttpGet(object):
    """Health check using HTTP Get request"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.path = (
            None if not fromDict or propDict.get(
                "path"
            ) is None
            else propDict["path"])
        self.port = (
            None if not fromDict or propDict.get(
                "port"
            ) is None
            else propDict["port"])

    @property
    def path(self):
        """str: Path to access on the HTTP server."""
        return self._path

    @path.setter
    def path(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._path = value
        else:
            raise TypeError(
                'Property "path" of type "list<str>" set to wrong type'
            )

    @property
    def port(self):
        """int: Number of the port to access on the container."""
        return self._port

    @port.setter
    def port(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._port = value
        else:
            raise TypeError(
                'Property "port" of type "list<int>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._path is not None:
            result["path"] = \
                self._path
        if self._port is not None:
            result["port"] = \
                self._port
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

