"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobStatusEnum import JobStatusEnum

# Unused import over optimization prevention
str(repr(JobStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobStatusChangedEvent(object):
    """This event in the queue means a job status has been updated"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.jobId = (
            None if not fromDict or propDict.get(
                "jobId"
            ) is None
            else propDict["jobId"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def jobId(self):
        """long: Unique identifier of the job."""
        return self._jobId

    @jobId.setter
    def jobId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._jobId = value
        else:
            raise TypeError(
                'Property "jobId" of type "list<long>" set to wrong type'
            )

    @property
    def status(self):
        """JobStatusEnum: All possible job status enums"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<JobStatusEnum>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._jobId is not None:
            result["jobId"] = \
                self._jobId
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

