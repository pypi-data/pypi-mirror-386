"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MeasurementAggregationType import MeasurementAggregationTypeEnum
from .PoolMeasurementType import PoolMeasurementTypeEnum

# Unused import over optimization prevention
str(repr(PoolMeasurementTypeEnum))
str(repr(MeasurementAggregationTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class PoolMeasurementQueryParams(object):
    """object for defining params to a single series in the measurement"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aggregation = (
            None if not fromDict or propDict.get(
                "aggregation"
            ) is None
            else propDict["aggregation"])
        self.fromDate = (
            None if not fromDict or propDict.get(
                "fromDate"
            ) is None
            else propDict["fromDate"])
        self.period = (
            None if not fromDict or propDict.get(
                "period"
            ) is None
            else propDict["period"])
        self.toDate = (
            None if not fromDict or propDict.get(
                "toDate"
            ) is None
            else propDict["toDate"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def aggregation(self):
        """ """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._aggregation = value
        else:
            raise TypeError(
                'Property "aggregation" of type "list<MeasurementAggregationT'
                'ypeEnum>" set to wrong type'
            )

    @property
    def fromDate(self):
        """str: end time range for the data, in ISO formate, yyyy-MM-dd'T'HH:m
        m:ss.SSS'Z'"""
        return self._fromDate

    @fromDate.setter
    def fromDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fromDate = value
        else:
            raise TypeError(
                'Property "fromDate" of type "list<str>" set to wrong type'
            )

    @property
    def period(self):
        """float: time period to aggregate the data over with, in seconds. If 
        none provided, raw data will be returned."""
        return self._period

    @period.setter
    def period(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._period = value
        else:
            raise TypeError(
                'Property "period" of type "list<float>" set to wrong type'
            )

    @property
    def toDate(self):
        """str: start time range for the data, in ISO formate, yyyy-MM-dd'T'HH
        :mm:ss.SSS'Z'"""
        return self._toDate

    @toDate.setter
    def toDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._toDate = value
        else:
            raise TypeError(
                'Property "toDate" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<PoolMeasurementTypeEnum>" set '
                'to wrong type'
            )

    def toDict(self):
        result = {}
        if self._aggregation is not None:
            result["aggregation"] = \
                self._aggregation
        if self._fromDate is not None:
            result["fromDate"] = \
                self._fromDate
        if self._period is not None:
            result["period"] = \
                self._period
        if self._toDate is not None:
            result["toDate"] = \
                self._toDate
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._toDate is not None
            and
            not re.match(
                r"^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])T([01]\d|2[0-3]"
                "):[0-5]\d:[0-5]\d\.\d{3}Z$",
                 self._toDate)):
            raise ValueError(
                "PoolMeasurementQueryParams.toDate: " + str(self._toDate) + 
                " doesnt match requirement: pattern: ^\d{4}-(0[1-9]|1[0-2])-("
                "0[1-9]|[12]\d|3[01])T([01]\d|2[0-3]):[0-5]"
                "\d:[0-5]\d\.\d{3}Z$")
        if (self._fromDate is not None
            and
            not re.match(
                r"^\d{4}-(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])T([01]\d|2[0-3]"
                "):[0-5]\d:[0-5]\d\.\d{3}Z$",
                 self._fromDate)):
            raise ValueError(
                "PoolMeasurementQueryParams.fromDate: " + str(self._fromDate) + 
                " doesnt match requirement: pattern: ^\d{4}-(0[1-9]|1[0-2])-("
                "0[1-9]|[12]\d|3[01])T([01]\d|2[0-3]):[0-5]"
                "\d:[0-5]\d\.\d{3}Z$")
        return True
    

