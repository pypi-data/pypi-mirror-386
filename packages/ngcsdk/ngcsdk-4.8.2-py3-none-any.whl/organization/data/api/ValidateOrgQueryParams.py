"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .OrgOwner import OrgOwner
from .ProductSubscription import ProductSubscription

# Unused import over optimization prevention
str(repr(OrgOwner))
str(repr(ProductSubscription))


if sys.version_info > (3,):
    long = int
    unicode = str

class ValidateOrgQueryParams(object):
    """Object for defining params to validate org."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.orgOwner = (
            None if not fromDict or propDict.get(
                "orgOwner"
            ) is None
            else propDict["orgOwner"])
        self.pecSfdcId = (
            None if not fromDict or propDict.get(
                "pecSfdcId"
            ) is None
            else propDict["pecSfdcId"])
        self.productSubscriptions = (
            None if not fromDict or propDict.get(
                "productSubscriptions"
            ) is None
            else [ ProductSubscription(i)
            for i in propDict["productSubscriptions"] ])

    @property
    def orgOwner(self):
        """OrgOwner: Org owner."""
        return self._orgOwner

    @orgOwner.setter
    def orgOwner(self, value):
        if value is not None and not isinstance(value, OrgOwner):
            value = OrgOwner(value)
        if (value is None) or isinstance(value, OrgOwner):
            self._orgOwner = value
        else:
            raise TypeError(
                'Property "orgOwner" of type "list<OrgOwner>" set to wrong ty'
                'pe'
            )

    @property
    def pecSfdcId(self):
        """str: Product end customer salesforce.com id (external customer id) 
        for enterprise product."""
        return self._pecSfdcId

    @pecSfdcId.setter
    def pecSfdcId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._pecSfdcId = value
        else:
            raise TypeError(
                'Property "pecSfdcId" of type "list<str>" set to wrong type'
            )

    @property
    def productSubscriptions(self):
        """list: Product Subscriptions."""
        return self._productSubscriptions

    @productSubscriptions.setter
    def productSubscriptions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._productSubscriptions = value
        else:
            raise TypeError(
                'Property "productSubscriptions" of type "list<ProductSubscri'
                'ption>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._orgOwner:
            result["orgOwner"] = \
                self._orgOwner.toDict() if self._orgOwner is not None else None
        if self._pecSfdcId is not None:
            result["pecSfdcId"] = \
                self._pecSfdcId
        if self._productSubscriptions:
            result["productSubscriptions"] = [
                i.toDict() for i in self._productSubscriptions 
            ] if self._productSubscriptions else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._orgOwner is None:
            raise ValueError(
                "ValidateOrgQueryParams.orgOwner doesnt match requirement:" 
                "required: True"
            )
        if self._pecSfdcId is None:
            raise ValueError(
                "ValidateOrgQueryParams.pecSfdcId doesnt match requirement:" 
                "required: True"
            )
        if self._productSubscriptions is None:
            raise ValueError(
                "ValidateOrgQueryParams.productSubscriptions doesnt match requirement:" 
                "required: True"
            )
        if (self._orgOwner is not None): self._orgOwner.isValid()
        if (self._productSubscriptions is not None):
            for obj in self._productSubscriptions:
                if (obj is not None): obj.isValid()
        return True
    

