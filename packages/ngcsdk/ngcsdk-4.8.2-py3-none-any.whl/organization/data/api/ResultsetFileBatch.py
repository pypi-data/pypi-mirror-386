"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ResultsetFile import ResultsetFile

# Unused import over optimization prevention
str(repr(ResultsetFile))


if sys.version_info > (3,):
    long = int
    unicode = str

class ResultsetFileBatch(object):
    """Batch of resultset files"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.files = (
            None if not fromDict or propDict.get(
                "files"
            ) is None
            else [ ResultsetFile(i)
            for i in propDict["files"] ])

    @property
    def files(self):
        """list: Batch of files belonging to same resultset."""
        return self._files

    @files.setter
    def files(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._files = value
        else:
            raise TypeError(
                'Property "files" of type "list<ResultsetFile>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._files:
            result["files"] = [
                i.toDict() for i in self._files 
            ] if self._files else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._files is not None):
            for obj in self._files:
                if (obj is not None): obj.isValid()
        return True
    

