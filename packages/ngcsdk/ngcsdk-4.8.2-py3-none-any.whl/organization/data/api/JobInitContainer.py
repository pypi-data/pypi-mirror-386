"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .JobDatasetMountInfo import JobDatasetMountInfo
from .Env import Env
from .JobVolumeMount import JobVolumeMount
from .JobWorkspaceMountInfo import JobWorkspaceMountInfo
from .ContainerResources import ContainerResources

# Unused import over optimization prevention
str(repr(Env))
str(repr(JobDatasetMountInfo))
str(repr(ContainerResources))
str(repr(JobVolumeMount))
str(repr(JobWorkspaceMountInfo))


if sys.version_info > (3,):
    long = int
    unicode = str

class JobInitContainer(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.command = (
            None if not fromDict or propDict.get(
                "command"
            ) is None
            else propDict["command"])
        self.containerName = (
            None if not fromDict or propDict.get(
                "containerName"
            ) is None
            else propDict["containerName"])
        self.containerResources = (
            None if not fromDict or propDict.get(
                "containerResources"
            ) is None
            else propDict["containerResources"])
        self.datasetMounts = (
            None if not fromDict or propDict.get(
                "datasetMounts"
            ) is None
            else [ JobDatasetMountInfo(i)
            for i in propDict["datasetMounts"] ])
        self.dockerImageName = (
            None if not fromDict or propDict.get(
                "dockerImageName"
            ) is None
            else propDict["dockerImageName"])
        self.entryPoint = (
            None if not fromDict or propDict.get(
                "entryPoint"
            ) is None
            else propDict["entryPoint"])
        self.envs = (
            None if not fromDict or propDict.get(
                "envs"
            ) is None
            else [ Env(i)
            for i in propDict["envs"] ])
        self.jobVolumeMounts = (
            None if not fromDict or propDict.get(
                "jobVolumeMounts"
            ) is None
            else [ JobVolumeMount(i)
            for i in propDict["jobVolumeMounts"] ])
        self.resultContainerMountPoint = (
            None if not fromDict or propDict.get(
                "resultContainerMountPoint"
            ) is None
            else propDict["resultContainerMountPoint"])
        self.useImageEntryPoint = (
            None if not fromDict or propDict.get(
                "useImageEntryPoint"
            ) is None
            else propDict["useImageEntryPoint"])
        self.workspaceMounts = (
            None if not fromDict or propDict.get(
                "workspaceMounts"
            ) is None
            else [ JobWorkspaceMountInfo(i)
            for i in propDict["workspaceMounts"] ])

    @property
    def command(self):
        """str: Run command to be associated with the container."""
        return self._command

    @command.setter
    def command(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._command = value
        else:
            raise TypeError(
                'Property "command" of type "list<str>" set to wrong type'
            )

    @property
    def containerName(self):
        """str: Name of the init container, MUST be unique among all helper co
        ntainers."""
        return self._containerName

    @containerName.setter
    def containerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._containerName = value
        else:
            raise TypeError(
                'Property "containerName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def containerResources(self):
        """ """
        return self._containerResources

    @containerResources.setter
    def containerResources(self, value):
        if value is not None and not isinstance(value, ContainerResources):
            value = ContainerResources(value)
        if (value is None) or isinstance(value, ContainerResources):
            self._containerResources = value
        else:
            raise TypeError(
                'Property "containerResources" of type "list<ContainerResourc'
                'es>" set to wrong type'
            )

    @property
    def datasetMounts(self):
        """ """
        return self._datasetMounts

    @datasetMounts.setter
    def datasetMounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._datasetMounts = value
        else:
            raise TypeError(
                'Property "datasetMounts" of type "list<JobDatasetMountInfo>"'
                ' set to wrong type'
            )

    @property
    def dockerImageName(self):
        """str: Docker container image name to use when submitting this job. P
        rovide full namespace - org/team/repo:tag. If tag is not speci
        fied, latest will be used by default."""
        return self._dockerImageName

    @dockerImageName.setter
    def dockerImageName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._dockerImageName = value
        else:
            raise TypeError(
                'Property "dockerImageName" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def entryPoint(self):
        """str: Overwrite the default ENTRYPOINT of the image"""
        return self._entryPoint

    @entryPoint.setter
    def entryPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._entryPoint = value
        else:
            raise TypeError(
                'Property "entryPoint" of type "list<str>" set to wrong type'
            )

    @property
    def envs(self):
        """list: List of environment variables associated to the job"""
        return self._envs

    @envs.setter
    def envs(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._envs = value
        else:
            raise TypeError(
                'Property "envs" of type "list<Env>" set to wrong type'
            )

    @property
    def jobVolumeMounts(self):
        """list: A list of job volume mount points in the init container."""
        return self._jobVolumeMounts

    @jobVolumeMounts.setter
    def jobVolumeMounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._jobVolumeMounts = value
        else:
            raise TypeError(
                'Property "jobVolumeMounts" of type "list<JobVolumeMount>" se'
                't to wrong type'
            )

    @property
    def resultContainerMountPoint(self):
        """str: Mount Point inside container to which result set mount will be
         mapped"""
        return self._resultContainerMountPoint

    @resultContainerMountPoint.setter
    def resultContainerMountPoint(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resultContainerMountPoint = value
        else:
            raise TypeError(
                'Property "resultContainerMountPoint" of type "list<str>" set'
                ' to wrong type'
            )

    @property
    def useImageEntryPoint(self):
        """bool: opt-in flag for enabling image entrypoint."""
        return self._useImageEntryPoint

    @useImageEntryPoint.setter
    def useImageEntryPoint(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._useImageEntryPoint = value
        else:
            raise TypeError(
                'Property "useImageEntryPoint" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def workspaceMounts(self):
        """ """
        return self._workspaceMounts

    @workspaceMounts.setter
    def workspaceMounts(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._workspaceMounts = value
        else:
            raise TypeError(
                'Property "workspaceMounts" of type "list<JobWorkspaceMountIn'
                'fo>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._command is not None:
            result["command"] = \
                self._command
        if self._containerName is not None:
            result["containerName"] = \
                self._containerName
        if self._containerResources:
            result["containerResources"] = \
                self._containerResources.toDict() if self._containerResources is not None else None
        if self._datasetMounts:
            result["datasetMounts"] = [
                i.toDict() for i in self._datasetMounts 
            ] if self._datasetMounts else []
        if self._dockerImageName is not None:
            result["dockerImageName"] = \
                self._dockerImageName
        if self._entryPoint is not None:
            result["entryPoint"] = \
                self._entryPoint
        if self._envs:
            result["envs"] = [
                i.toDict() for i in self._envs 
            ] if self._envs else []
        if self._jobVolumeMounts:
            result["jobVolumeMounts"] = [
                i.toDict() for i in self._jobVolumeMounts 
            ] if self._jobVolumeMounts else []
        if self._resultContainerMountPoint is not None:
            result["resultContainerMountPoint"] = \
                self._resultContainerMountPoint
        if self._useImageEntryPoint is not None:
            result["useImageEntryPoint"] = \
                self._useImageEntryPoint
        if self._workspaceMounts:
            result["workspaceMounts"] = [
                i.toDict() for i in self._workspaceMounts 
            ] if self._workspaceMounts else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._dockerImageName is None:
            raise ValueError(
                "JobInitContainer.dockerImageName doesnt match requirement:" 
                "required: True"
            )
        if (self._dockerImageName is not None
            and
            not re.match(
                r"[\x20-\x7E]*",
                 self._dockerImageName)):
            raise ValueError(
                "JobInitContainer.dockerImageName: " + str(self._dockerImageName) + 
                " doesnt match requirement: pattern: [\x20-\x7E]*")
        if self._resultContainerMountPoint is None:
            raise ValueError(
                "JobInitContainer.resultContainerMountPoint doesnt match requirement:" 
                "required: True"
            )
        if (self._datasetMounts is not None):
            for obj in self._datasetMounts:
                if (obj is not None): obj.isValid()
        if (self._workspaceMounts is not None):
            for obj in self._workspaceMounts:
                if (obj is not None): obj.isValid()
        if (self._envs is not None):
            for obj in self._envs:
                if (obj is not None): obj.isValid()
        if (self._jobVolumeMounts is not None):
            for obj in self._jobVolumeMounts:
                if (obj is not None): obj.isValid()
        if (self._containerResources is not None): self._containerResources.isValid()
        return True
    

