"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Secret import Secret

# Unused import over optimization prevention
str(repr(Secret))


if sys.version_info > (3,):
    long = int
    unicode = str

class SecretGetResponse(object):
    """Secret Fetch Response"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.secrets = (
            None if not fromDict or propDict.get(
                "secrets"
            ) is None
            else [ Secret(i)
            for i in propDict["secrets"] ])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def secrets(self):
        """ """
        return self._secrets

    @secrets.setter
    def secrets(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._secrets = value
        else:
            raise TypeError(
                'Property "secrets" of type "list<Secret>" set to wrong type'
            )

    @property
    def version(self):
        """str: Payload version"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._secrets:
            result["secrets"] = [
                i.toDict() for i in self._secrets 
            ] if self._secrets else []
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._version is None:
            raise ValueError(
                "SecretGetResponse.version doesnt match requirement:" 
                "required: True"
            )
        if self._secrets is None:
            raise ValueError(
                "SecretGetResponse.secrets doesnt match requirement:" 
                "required: True"
            )
        if (self._secrets is not None):
            for obj in self._secrets:
                if (obj is not None): obj.isValid()
        return True
    

