"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .KV import KV

# Unused import over optimization prevention
str(repr(KV))


if sys.version_info > (3,):
    long = int
    unicode = str

class SecretCreateRequest(object):
    """Secret create request"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.disabled = (
            None if not fromDict or propDict.get(
                "disabled"
            ) is None
            else propDict["disabled"])
        self.kv = (
            None if not fromDict or propDict.get(
                "kv"
            ) is None
            else [ KV(i)
            for i in propDict["kv"] ])
        self.version = (
            None if not fromDict or propDict.get(
                "version"
            ) is None
            else propDict["version"])

    @property
    def description(self):
        """str: Secret description"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def disabled(self):
        """bool: Secret enabled/disabled (default: enabled)"""
        return self._disabled

    @disabled.setter
    def disabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._disabled = value
        else:
            raise TypeError(
                'Property "disabled" of type "list<bool>" set to wrong type'
            )

    @property
    def kv(self):
        """ """
        return self._kv

    @kv.setter
    def kv(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._kv = value
        else:
            raise TypeError(
                'Property "kv" of type "list<KV>" set to wrong type'
            )

    @property
    def version(self):
        """str: Payload version"""
        return self._version

    @version.setter
    def version(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._version = value
        else:
            raise TypeError(
                'Property "version" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._description is not None:
            result["description"] = \
                self._description
        if self._disabled is not None:
            result["disabled"] = \
                self._disabled
        if self._kv:
            result["kv"] = [
                i.toDict() for i in self._kv 
            ] if self._kv else []
        if self._version is not None:
            result["version"] = \
                self._version
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._version is None:
            raise ValueError(
                "SecretCreateRequest.version doesnt match requirement:" 
                "required: True"
            )
        if self._description is None:
            raise ValueError(
                "SecretCreateRequest.description doesnt match requirement:" 
                "required: True"
            )
        if (self._description is not None
            and
            len(self._description) < 1):
            raise ValueError(
                "SecretCreateRequest.description: " + str(self._description) + 
                " doesnt match requirement: minLength: 1")
        if self._kv is None:
            raise ValueError(
                "SecretCreateRequest.kv doesnt match requirement:" 
                "required: True"
            )
        if (self._kv is not None):
            for obj in self._kv:
                if (obj is not None): obj.isValid()
        return True
    

