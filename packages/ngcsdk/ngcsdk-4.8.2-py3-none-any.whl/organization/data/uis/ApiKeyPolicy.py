"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Resource import Resource

# Unused import over optimization prevention
str(repr(Resource))


if sys.version_info > (3,):
    long = int
    unicode = str

class ApiKeyPolicy(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.product = (
            None if not fromDict or propDict.get(
                "product"
            ) is None
            else propDict["product"])
        self.resources = (
            None if not fromDict or propDict.get(
                "resources"
            ) is None
            else [ Resource(i)
            for i in propDict["resources"] ])
        self.roles = (
            None if not fromDict or propDict.get(
                "roles"
            ) is None
            else propDict["roles"])
        self.scopes = (
            None if not fromDict or propDict.get(
                "scopes"
            ) is None
            else propDict["scopes"])
        self.team = (
            None if not fromDict or propDict.get(
                "team"
            ) is None
            else propDict["team"])

    @property
    def product(self):
        """str: Name of the service/product"""
        return self._product

    @product.setter
    def product(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._product = value
        else:
            raise TypeError(
                'Property "product" of type "list<str>" set to wrong type'
            )

    @property
    def resources(self):
        """ """
        return self._resources

    @resources.setter
    def resources(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._resources = value
        else:
            raise TypeError(
                'Property "resources" of type "list<Resource>" set to wrong t'
                'ype'
            )

    @property
    def roles(self):
        """list: List of roles for the team/org context"""
        return self._roles

    @roles.setter
    def roles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._roles = value
        else:
            raise TypeError(
                'Property "roles" of type "list<str>" set to wrong type'
            )

    @property
    def scopes(self):
        """list: List of scopes"""
        return self._scopes

    @scopes.setter
    def scopes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._scopes = value
        else:
            raise TypeError(
                'Property "scopes" of type "list<str>" set to wrong type'
            )

    @property
    def team(self):
        """ """
        return self._team

    @team.setter
    def team(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._team = value
        else:
            raise TypeError(
                'Property "team" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._product is not None:
            result["product"] = \
                self._product
        if self._resources:
            result["resources"] = [
                i.toDict() for i in self._resources 
            ] if self._resources else []
        if self._roles is not None:
            result["roles"] = \
                self._roles
        if self._scopes is not None:
            result["scopes"] = \
                self._scopes
        if self._team is not None:
            result["team"] = \
                self._team
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._product is None:
            raise ValueError(
                "ApiKeyPolicy.product doesnt match requirement:" 
                "required: True"
            )
        if (self._resources is not None):
            for obj in self._resources:
                if (obj is not None): obj.isValid()
        return True
    

