"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .UserProfileOrgInfo import UserProfileOrgInfo

# Unused import over optimization prevention
str(repr(UserProfileOrgInfo))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserProfile(object):
    """The profile of user."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.country = (
            None if not fromDict or propDict.get(
                "country"
            ) is None
            else propDict["country"])
        self.devEmailable = (
            None if not fromDict or propDict.get(
                "devEmailable"
            ) is None
            else propDict["devEmailable"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.entEmailable = (
            None if not fromDict or propDict.get(
                "entEmailable"
            ) is None
            else propDict["entEmailable"])
        self.firstName = (
            None if not fromDict or propDict.get(
                "firstName"
            ) is None
            else propDict["firstName"])
        self.gender = (
            None if not fromDict or propDict.get(
                "gender"
            ) is None
            else propDict["gender"])
        self.lastName = (
            None if not fromDict or propDict.get(
                "lastName"
            ) is None
            else propDict["lastName"])
        self.locale = (
            None if not fromDict or propDict.get(
                "locale"
            ) is None
            else propDict["locale"])
        self.orgInfo = (
            None if not fromDict or propDict.get(
                "orgInfo"
            ) is None
            else [ UserProfileOrgInfo(i)
            for i in propDict["orgInfo"] ])
        self.preferences = (
            None if not fromDict or propDict.get(
                "preferences"
            ) is None
            else propDict["preferences"])
        self.starfleetId = (
            None if not fromDict or propDict.get(
                "starfleetId"
            ) is None
            else propDict["starfleetId"])

    @property
    def country(self):
        """str: Country of the user"""
        return self._country

    @country.setter
    def country(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._country = value
        else:
            raise TypeError(
                'Property "country" of type "list<str>" set to wrong type'
            )

    @property
    def devEmailable(self):
        """bool: User want to receive development promotions"""
        return self._devEmailable

    @devEmailable.setter
    def devEmailable(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._devEmailable = value
        else:
            raise TypeError(
                'Property "devEmailable" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def email(self):
        """str: Email of the user"""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def entEmailable(self):
        """bool: User want to receive enterprise promotions"""
        return self._entEmailable

    @entEmailable.setter
    def entEmailable(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._entEmailable = value
        else:
            raise TypeError(
                'Property "entEmailable" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def firstName(self):
        """str: User's first name"""
        return self._firstName

    @firstName.setter
    def firstName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._firstName = value
        else:
            raise TypeError(
                'Property "firstName" of type "list<str>" set to wrong type'
            )

    @property
    def gender(self):
        """str: User's gender"""
        return self._gender

    @gender.setter
    def gender(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gender = value
        else:
            raise TypeError(
                'Property "gender" of type "list<str>" set to wrong type'
            )

    @property
    def lastName(self):
        """str: User's last name"""
        return self._lastName

    @lastName.setter
    def lastName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastName = value
        else:
            raise TypeError(
                'Property "lastName" of type "list<str>" set to wrong type'
            )

    @property
    def locale(self):
        """str: Locale of the user"""
        return self._locale

    @locale.setter
    def locale(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._locale = value
        else:
            raise TypeError(
                'Property "locale" of type "list<str>" set to wrong type'
            )

    @property
    def orgInfo(self):
        """list: organization information about the user"""
        return self._orgInfo

    @orgInfo.setter
    def orgInfo(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._orgInfo = value
        else:
            raise TypeError(
                'Property "orgInfo" of type "list<UserProfileOrgInfo>" set to'
                ' wrong type'
            )

    @property
    def preferences(self):
        """list: List of development areas that user has preference"""
        return self._preferences

    @preferences.setter
    def preferences(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._preferences = value
        else:
            raise TypeError(
                'Property "preferences" of type "list<str>" set to wrong type'
            )

    @property
    def starfleetId(self):
        """str: User's starfleet id"""
        return self._starfleetId

    @starfleetId.setter
    def starfleetId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._starfleetId = value
        else:
            raise TypeError(
                'Property "starfleetId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._country is not None:
            result["country"] = \
                self._country
        if self._devEmailable is not None:
            result["devEmailable"] = \
                self._devEmailable
        if self._email is not None:
            result["email"] = \
                self._email
        if self._entEmailable is not None:
            result["entEmailable"] = \
                self._entEmailable
        if self._firstName is not None:
            result["firstName"] = \
                self._firstName
        if self._gender is not None:
            result["gender"] = \
                self._gender
        if self._lastName is not None:
            result["lastName"] = \
                self._lastName
        if self._locale is not None:
            result["locale"] = \
                self._locale
        if self._orgInfo:
            result["orgInfo"] = [
                i.toDict() for i in self._orgInfo 
            ] if self._orgInfo else []
        if self._preferences is not None:
            result["preferences"] = \
                self._preferences
        if self._starfleetId is not None:
            result["starfleetId"] = \
                self._starfleetId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._email is None:
            raise ValueError(
                "UserProfile.email doesnt match requirement:" 
                "required: True"
            )
        if (self._firstName is not None
            and
            len(self._firstName) > 255):
            raise ValueError(
                "UserProfile.firstName: " + str(self._firstName) + 
                " doesnt match requirement: maxLength: 255")
        if (self._lastName is not None
            and
            len(self._lastName) > 255):
            raise ValueError(
                "UserProfile.lastName: " + str(self._lastName) + 
                " doesnt match requirement: maxLength: 255")
        if self._country is None:
            raise ValueError(
                "UserProfile.country doesnt match requirement:" 
                "required: True"
            )
        if self._locale is None:
            raise ValueError(
                "UserProfile.locale doesnt match requirement:" 
                "required: True"
            )
        if self._starfleetId is None:
            raise ValueError(
                "UserProfile.starfleetId doesnt match requirement:" 
                "required: True"
            )
        if self._devEmailable is None:
            raise ValueError(
                "UserProfile.devEmailable doesnt match requirement:" 
                "required: True"
            )
        if self._entEmailable is None:
            raise ValueError(
                "UserProfile.entEmailable doesnt match requirement:" 
                "required: True"
            )
        if (self._orgInfo is not None):
            for obj in self._orgInfo:
                if (obj is not None): obj.isValid()
        return True
    

