"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class RoleScopes(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.role = (
            None if not fromDict or propDict.get(
                "role"
            ) is None
            else propDict["role"])
        self.scopes = (
            None if not fromDict or propDict.get(
                "scopes"
            ) is None
            else propDict["scopes"])

    @property
    def description(self):
        """ """
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """ """
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def role(self):
        """ """
        return self._role

    @role.setter
    def role(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._role = value
        else:
            raise TypeError(
                'Property "role" of type "list<str>" set to wrong type'
            )

    @property
    def scopes(self):
        """list: List of scopes for the role"""
        return self._scopes

    @scopes.setter
    def scopes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._scopes = value
        else:
            raise TypeError(
                'Property "scopes" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._role is not None:
            result["role"] = \
                self._role
        if self._scopes is not None:
            result["scopes"] = \
                self._scopes
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

