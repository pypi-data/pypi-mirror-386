"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AccountInfo(object):
    """information about the account"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.addressLineOne = (
            None if not fromDict or propDict.get(
                "addressLineOne"
            ) is None
            else propDict["addressLineOne"])
        self.addressLineTwo = (
            None if not fromDict or propDict.get(
                "addressLineTwo"
            ) is None
            else propDict["addressLineTwo"])
        self.city = (
            None if not fromDict or propDict.get(
                "city"
            ) is None
            else propDict["city"])
        self.country = (
            None if not fromDict or propDict.get(
                "country"
            ) is None
            else propDict["country"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.firstName = (
            None if not fromDict or propDict.get(
                "firstName"
            ) is None
            else propDict["firstName"])
        self.lastName = (
            None if not fromDict or propDict.get(
                "lastName"
            ) is None
            else propDict["lastName"])
        self.phoneNumber = (
            None if not fromDict or propDict.get(
                "phoneNumber"
            ) is None
            else propDict["phoneNumber"])
        self.state = (
            None if not fromDict or propDict.get(
                "state"
            ) is None
            else propDict["state"])
        self.zipCode = (
            None if not fromDict or propDict.get(
                "zipCode"
            ) is None
            else propDict["zipCode"])

    @property
    def addressLineOne(self):
        """str: Address line one"""
        return self._addressLineOne

    @addressLineOne.setter
    def addressLineOne(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._addressLineOne = value
        else:
            raise TypeError(
                'Property "addressLineOne" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def addressLineTwo(self):
        """str: Address line two"""
        return self._addressLineTwo

    @addressLineTwo.setter
    def addressLineTwo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._addressLineTwo = value
        else:
            raise TypeError(
                'Property "addressLineTwo" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def city(self):
        """str: city"""
        return self._city

    @city.setter
    def city(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._city = value
        else:
            raise TypeError(
                'Property "city" of type "list<str>" set to wrong type'
            )

    @property
    def country(self):
        """str: ISO-3166-1 alpha-2 country code"""
        return self._country

    @country.setter
    def country(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._country = value
        else:
            raise TypeError(
                'Property "country" of type "list<str>" set to wrong type'
            )

    @property
    def email(self):
        """str: Email address of the user. This should be unique."""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def firstName(self):
        """str: First name"""
        return self._firstName

    @firstName.setter
    def firstName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._firstName = value
        else:
            raise TypeError(
                'Property "firstName" of type "list<str>" set to wrong type'
            )

    @property
    def lastName(self):
        """str: Last name"""
        return self._lastName

    @lastName.setter
    def lastName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastName = value
        else:
            raise TypeError(
                'Property "lastName" of type "list<str>" set to wrong type'
            )

    @property
    def phoneNumber(self):
        """str: Phone number"""
        return self._phoneNumber

    @phoneNumber.setter
    def phoneNumber(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._phoneNumber = value
        else:
            raise TypeError(
                'Property "phoneNumber" of type "list<str>" set to wrong type'
            )

    @property
    def state(self):
        """str: state"""
        return self._state

    @state.setter
    def state(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._state = value
        else:
            raise TypeError(
                'Property "state" of type "list<str>" set to wrong type'
            )

    @property
    def zipCode(self):
        """str: Zip code"""
        return self._zipCode

    @zipCode.setter
    def zipCode(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._zipCode = value
        else:
            raise TypeError(
                'Property "zipCode" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._addressLineOne is not None:
            result["addressLineOne"] = \
                self._addressLineOne
        if self._addressLineTwo is not None:
            result["addressLineTwo"] = \
                self._addressLineTwo
        if self._city is not None:
            result["city"] = \
                self._city
        if self._country is not None:
            result["country"] = \
                self._country
        if self._email is not None:
            result["email"] = \
                self._email
        if self._firstName is not None:
            result["firstName"] = \
                self._firstName
        if self._lastName is not None:
            result["lastName"] = \
                self._lastName
        if self._phoneNumber is not None:
            result["phoneNumber"] = \
                self._phoneNumber
        if self._state is not None:
            result["state"] = \
                self._state
        if self._zipCode is not None:
            result["zipCode"] = \
                self._zipCode
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._email is not None
            and
            len(self._email) < 7):
            raise ValueError(
                "AccountInfo.email: " + str(self._email) + 
                " doesnt match requirement: minLength: 7")
        if (self._email is not None
            and
            len(self._email) > 128):
            raise ValueError(
                "AccountInfo.email: " + str(self._email) + 
                " doesnt match requirement: maxLength: 128")
        if (self._email is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._email)):
            raise ValueError(
                "AccountInfo.email: " + str(self._email) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        return True
    

