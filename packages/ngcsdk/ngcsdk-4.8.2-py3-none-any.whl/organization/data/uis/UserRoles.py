"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserRoles(object):
    """The model class that store User and its Roles information"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.clientId = (
            None if not fromDict or propDict.get(
                "clientId"
            ) is None
            else propDict["clientId"])
        self.clientIdType = (
            None if not fromDict or propDict.get(
                "clientIdType"
            ) is None
            else propDict["clientIdType"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.roles = (
            None if not fromDict or propDict.get(
                "roles"
            ) is None
            else propDict["roles"])
        self.teamName = (
            None if not fromDict or propDict.get(
                "teamName"
            ) is None
            else propDict["teamName"])

    @property
    def clientId(self):
        """str: Unique authentication client id of this user"""
        return self._clientId

    @clientId.setter
    def clientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._clientId = value
        else:
            raise TypeError(
                'Property "clientId" of type "list<str>" set to wrong type'
            )

    @property
    def clientIdType(self):
        """ClientIdTypeEnum: Type of ClientId, i.e. STARFLEET, AUTH"""
        return self._clientIdType

    @clientIdType.setter
    def clientIdType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._clientIdType = value
        else:
            raise TypeError(
                'Property "clientIdType" of type "list<ClientIdTypeEnum>" set'
                ' to wrong type'
            )

    ClientIdTypeEnum=["STARFLEET","AUTH",]
    str(repr(ClientIdTypeEnum))  # Prevent optimizer removing enum

    @property
    def orgName(self):
        """str: The name of the organization that the list query is targeting 
        to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def roles(self):
        """list: A list of roles which belongs to the user"""
        return self._roles

    @roles.setter
    def roles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._roles = value
        else:
            raise TypeError(
                'Property "roles" of type "list<str>" set to wrong type'
            )

    @property
    def teamName(self):
        """str: The name of team that the list query is targeting to. Nullable
        ."""
        return self._teamName

    @teamName.setter
    def teamName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._teamName = value
        else:
            raise TypeError(
                'Property "teamName" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._clientId is not None:
            result["clientId"] = \
                self._clientId
        if self._clientIdType is not None:
            result["clientIdType"] = \
                self._clientIdType
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._roles is not None:
            result["roles"] = \
                self._roles
        if self._teamName is not None:
            result["teamName"] = \
                self._teamName
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

