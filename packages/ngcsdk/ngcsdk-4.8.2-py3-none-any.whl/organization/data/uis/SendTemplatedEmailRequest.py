"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MetaData import MetaData
from .EmailTemplateDataSourceEnum import EmailTemplateDataSourceEnum
from .EmailTemplateTypeEnum import EmailTemplateTypeEnum

# Unused import over optimization prevention
str(repr(EmailTemplateTypeEnum))
str(repr(MetaData))
str(repr(EmailTemplateDataSourceEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class SendTemplatedEmailRequest(object):
    """Send templated email request"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.bccAddresses = (
            None if not fromDict or propDict.get(
                "bccAddresses"
            ) is None
            else propDict["bccAddresses"])
        self.ccAddresses = (
            None if not fromDict or propDict.get(
                "ccAddresses"
            ) is None
            else propDict["ccAddresses"])
        self.dataSource = (
            None if not fromDict or propDict.get(
                "dataSource"
            ) is None
            else propDict["dataSource"])
        self.fromAddress = (
            None if not fromDict or propDict.get(
                "fromAddress"
            ) is None
            else propDict["fromAddress"])
        self.metaData = (
            None if not fromDict or propDict.get(
                "metaData"
            ) is None
            else [ MetaData(i)
            for i in propDict["metaData"] ])
        self.subject = (
            None if not fromDict or propDict.get(
                "subject"
            ) is None
            else propDict["subject"])
        self.templateContent = (
            None if not fromDict or propDict.get(
                "templateContent"
            ) is None
            else propDict["templateContent"])
        self.templateName = (
            None if not fromDict or propDict.get(
                "templateName"
            ) is None
            else propDict["templateName"])
        self.title = (
            None if not fromDict or propDict.get(
                "title"
            ) is None
            else propDict["title"])
        self.toAddresses = (
            None if not fromDict or propDict.get(
                "toAddresses"
            ) is None
            else propDict["toAddresses"])

    @property
    def bccAddresses(self):
        """list: bcc Email of the receivers"""
        return self._bccAddresses

    @bccAddresses.setter
    def bccAddresses(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._bccAddresses = value
        else:
            raise TypeError(
                'Property "bccAddresses" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def ccAddresses(self):
        """list: cc Email of the receivers"""
        return self._ccAddresses

    @ccAddresses.setter
    def ccAddresses(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._ccAddresses = value
        else:
            raise TypeError(
                'Property "ccAddresses" of type "list<str>" set to wrong type'
            )

    @property
    def dataSource(self):
        """EmailTemplateDataSourceEnum: Possible email template data source"""
        return self._dataSource

    @dataSource.setter
    def dataSource(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._dataSource = value
        else:
            raise TypeError(
                'Property "dataSource" of type "list<EmailTemplateDataSourceE'
                'num>" set to wrong type'
            )

    @property
    def fromAddress(self):
        """str: Email of the sender"""
        return self._fromAddress

    @fromAddress.setter
    def fromAddress(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._fromAddress = value
        else:
            raise TypeError(
                'Property "fromAddress" of type "list<str>" set to wrong type'
            )

    @property
    def metaData(self):
        """ """
        return self._metaData

    @metaData.setter
    def metaData(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._metaData = value
        else:
            raise TypeError(
                'Property "metaData" of type "list<MetaData>" set to wrong ty'
                'pe'
            )

    @property
    def subject(self):
        """str: Subject of the email"""
        return self._subject

    @subject.setter
    def subject(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subject = value
        else:
            raise TypeError(
                'Property "subject" of type "list<str>" set to wrong type'
            )

    @property
    def templateContent(self):
        """str: Template content to include to the email"""
        return self._templateContent

    @templateContent.setter
    def templateContent(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._templateContent = value
        else:
            raise TypeError(
                'Property "templateContent" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def templateName(self):
        """EmailTemplateTypeEnum: Possible email template types"""
        return self._templateName

    @templateName.setter
    def templateName(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._templateName = value
        else:
            raise TypeError(
                'Property "templateName" of type "list<EmailTemplateTypeEnum>'
                '" set to wrong type'
            )

    @property
    def title(self):
        """str: Title for the email"""
        return self._title

    @title.setter
    def title(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._title = value
        else:
            raise TypeError(
                'Property "title" of type "list<str>" set to wrong type'
            )

    @property
    def toAddresses(self):
        """list: Email of the receiver"""
        return self._toAddresses

    @toAddresses.setter
    def toAddresses(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._toAddresses = value
        else:
            raise TypeError(
                'Property "toAddresses" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._bccAddresses is not None:
            result["bccAddresses"] = \
                self._bccAddresses
        if self._ccAddresses is not None:
            result["ccAddresses"] = \
                self._ccAddresses
        if self._dataSource is not None:
            result["dataSource"] = \
                self._dataSource
        if self._fromAddress is not None:
            result["fromAddress"] = \
                self._fromAddress
        if self._metaData:
            result["metaData"] = [
                i.toDict() for i in self._metaData 
            ] if self._metaData else []
        if self._subject is not None:
            result["subject"] = \
                self._subject
        if self._templateContent is not None:
            result["templateContent"] = \
                self._templateContent
        if self._templateName is not None:
            result["templateName"] = \
                self._templateName
        if self._title is not None:
            result["title"] = \
                self._title
        if self._toAddresses is not None:
            result["toAddresses"] = \
                self._toAddresses
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._templateName is None:
            raise ValueError(
                "SendTemplatedEmailRequest.templateName doesnt match requirement:" 
                "required: True"
            )
        if self._templateContent is None:
            raise ValueError(
                "SendTemplatedEmailRequest.templateContent doesnt match requirement:" 
                "required: True"
            )
        if (self._metaData is not None):
            for obj in self._metaData:
                if (obj is not None): obj.isValid()
        return True
    

