"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ApiKeyTypeEnum import ApiKeyTypeEnum
from .ApiKeyPolicy import ApiKeyPolicy

# Unused import over optimization prevention
str(repr(ApiKeyPolicy))
str(repr(ApiKeyTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class ApiKeyRequest(object):
    """Create api key request"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.expiryDate = (
            None if not fromDict or propDict.get(
                "expiryDate"
            ) is None
            else propDict["expiryDate"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.policies = (
            None if not fromDict or propDict.get(
                "policies"
            ) is None
            else [ ApiKeyPolicy(i)
            for i in propDict["policies"] ])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def expiryDate(self):
        """str: Expiration date of the key"""
        return self._expiryDate

    @expiryDate.setter
    def expiryDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._expiryDate = value
        else:
            raise TypeError(
                'Property "expiryDate" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Name of the key"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def policies(self):
        """list: Access permissions of the key"""
        return self._policies

    @policies.setter
    def policies(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._policies = value
        else:
            raise TypeError(
                'Property "policies" of type "list<ApiKeyPolicy>" set to wron'
                'g type'
            )

    @property
    def type(self):
        """ApiKeyTypeEnum: Possible api key types"""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<ApiKeyTypeEnum>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._expiryDate is not None:
            result["expiryDate"] = \
                self._expiryDate
        if self._name is not None:
            result["name"] = \
                self._name
        if self._policies:
            result["policies"] = [
                i.toDict() for i in self._policies 
            ] if self._policies else []
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "ApiKeyRequest.name doesnt match requirement:" 
                "required: True"
            )
        if self._type is None:
            raise ValueError(
                "ApiKeyRequest.type doesnt match requirement:" 
                "required: True"
            )
        if self._expiryDate is None:
            raise ValueError(
                "ApiKeyRequest.expiryDate doesnt match requirement:" 
                "required: True"
            )
        if self._policies is None:
            raise ValueError(
                "ApiKeyRequest.policies doesnt match requirement:" 
                "required: True"
            )
        if (self._policies is not None):
            for obj in self._policies:
                if (obj is not None): obj.isValid()
        return True
    

