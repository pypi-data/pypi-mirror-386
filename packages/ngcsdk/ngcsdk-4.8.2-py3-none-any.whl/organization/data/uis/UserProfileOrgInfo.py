"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserProfileOrgInfo(object):
    """The organization information of user."""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.industry = (
            None if not fromDict or propDict.get(
                "industry"
            ) is None
            else propDict["industry"])
        self.jobRole = (
            None if not fromDict or propDict.get(
                "jobRole"
            ) is None
            else propDict["jobRole"])
        self.jobTitle = (
            None if not fromDict or propDict.get(
                "jobTitle"
            ) is None
            else propDict["jobTitle"])
        self.organization = (
            None if not fromDict or propDict.get(
                "organization"
            ) is None
            else propDict["organization"])
        self.organizationUrl = (
            None if not fromDict or propDict.get(
                "organizationUrl"
            ) is None
            else propDict["organizationUrl"])

    @property
    def industry(self):
        """str: Industry segment"""
        return self._industry

    @industry.setter
    def industry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._industry = value
        else:
            raise TypeError(
                'Property "industry" of type "list<str>" set to wrong type'
            )

    @property
    def jobRole(self):
        """str: Role of the user in the organization"""
        return self._jobRole

    @jobRole.setter
    def jobRole(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._jobRole = value
        else:
            raise TypeError(
                'Property "jobRole" of type "list<str>" set to wrong type'
            )

    @property
    def jobTitle(self):
        """str: Title of the user in the organization"""
        return self._jobTitle

    @jobTitle.setter
    def jobTitle(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._jobTitle = value
        else:
            raise TypeError(
                'Property "jobTitle" of type "list<str>" set to wrong type'
            )

    @property
    def organization(self):
        """str: Name of the organization"""
        return self._organization

    @organization.setter
    def organization(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._organization = value
        else:
            raise TypeError(
                'Property "organization" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def organizationUrl(self):
        """str: Organization URL"""
        return self._organizationUrl

    @organizationUrl.setter
    def organizationUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._organizationUrl = value
        else:
            raise TypeError(
                'Property "organizationUrl" of type "list<str>" set to wrong '
                'type'
            )

    def toDict(self):
        result = {}
        if self._industry is not None:
            result["industry"] = \
                self._industry
        if self._jobRole is not None:
            result["jobRole"] = \
                self._jobRole
        if self._jobTitle is not None:
            result["jobTitle"] = \
                self._jobTitle
        if self._organization is not None:
            result["organization"] = \
                self._organization
        if self._organizationUrl is not None:
            result["organizationUrl"] = \
                self._organizationUrl
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._organization is None:
            raise ValueError(
                "UserProfileOrgInfo.organization doesnt match requirement:" 
                "required: True"
            )
        return True
    

