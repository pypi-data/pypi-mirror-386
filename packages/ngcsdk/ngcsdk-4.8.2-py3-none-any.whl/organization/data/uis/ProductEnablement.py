"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .PurchaseOrder import PurchaseOrder

# Unused import over optimization prevention
str(repr(PurchaseOrder))


if sys.version_info > (3,):
    long = int
    unicode = str

class ProductEnablement(object):
    """Product Enablement"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.expirationDate = (
            None if not fromDict or propDict.get(
                "expirationDate"
            ) is None
            else propDict["expirationDate"])
        self.poDetails = (
            None if not fromDict or propDict.get(
                "poDetails"
            ) is None
            else [ PurchaseOrder(i)
            for i in propDict["poDetails"] ])
        self.productName = (
            None if not fromDict or propDict.get(
                "productName"
            ) is None
            else propDict["productName"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def expirationDate(self):
        """str: Date on which the subscription expires. The subscription is in
        valid after this date. (yyyy-MM-dd)"""
        return self._expirationDate

    @expirationDate.setter
    def expirationDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._expirationDate = value
        else:
            raise TypeError(
                'Property "expirationDate" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def poDetails(self):
        """ """
        return self._poDetails

    @poDetails.setter
    def poDetails(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._poDetails = value
        else:
            raise TypeError(
                'Property "poDetails" of type "list<PurchaseOrder>" set to wr'
                'ong type'
            )

    @property
    def productName(self):
        """str: Product Name (NVAIE, BASE_COMMAND, REGISTRY, etc)"""
        return self._productName

    @productName.setter
    def productName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productName = value
        else:
            raise TypeError(
                'Property "productName" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """str: Product Enablement Types (NGC_ADMIN_EVAL, EMS_EVAL, EMS_NFR, e
        tc)."""
        return self._type

    @type.setter
    def type(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._expirationDate is not None:
            result["expirationDate"] = \
                self._expirationDate
        if self._poDetails:
            result["poDetails"] = [
                i.toDict() for i in self._poDetails 
            ] if self._poDetails else []
        if self._productName is not None:
            result["productName"] = \
                self._productName
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._type is None:
            raise ValueError(
                "ProductEnablement.type doesnt match requirement:" 
                "required: True"
            )
        if self._productName is None:
            raise ValueError(
                "ProductEnablement.productName doesnt match requirement:" 
                "required: True"
            )
        if (self._expirationDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\d",
                 self._expirationDate)):
            raise ValueError(
                "ProductEnablement.expirationDate: " + str(self._expirationDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\d")
        if (self._poDetails is not None):
            for obj in self._poDetails:
                if (obj is not None): obj.isValid()
        return True
    

