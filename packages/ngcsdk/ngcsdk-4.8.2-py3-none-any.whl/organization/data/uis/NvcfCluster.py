"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class NvcfCluster(object):
    """Information about the NVCF Clusters for an organization"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.cluster = (
            None if not fromDict or propDict.get(
                "cluster"
            ) is None
            else propDict["cluster"])
        self.currentInstances = (
            None if not fromDict or propDict.get(
                "currentInstances"
            ) is None
            else propDict["currentInstances"])
        self.gpuType = (
            None if not fromDict or propDict.get(
                "gpuType"
            ) is None
            else propDict["gpuType"])
        self.instanceType = (
            None if not fromDict or propDict.get(
                "instanceType"
            ) is None
            else propDict["instanceType"])
        self.maxInstances = (
            None if not fromDict or propDict.get(
                "maxInstances"
            ) is None
            else propDict["maxInstances"])

    @property
    def cluster(self):
        """ """
        return self._cluster

    @cluster.setter
    def cluster(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._cluster = value
        else:
            raise TypeError(
                'Property "cluster" of type "list<str>" set to wrong type'
            )

    @property
    def currentInstances(self):
        """ """
        return self._currentInstances

    @currentInstances.setter
    def currentInstances(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._currentInstances = value
        else:
            raise TypeError(
                'Property "currentInstances" of type "list<int>" set to wrong'
                ' type'
            )

    @property
    def gpuType(self):
        """ """
        return self._gpuType

    @gpuType.setter
    def gpuType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gpuType = value
        else:
            raise TypeError(
                'Property "gpuType" of type "list<str>" set to wrong type'
            )

    @property
    def instanceType(self):
        """ """
        return self._instanceType

    @instanceType.setter
    def instanceType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._instanceType = value
        else:
            raise TypeError(
                'Property "instanceType" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def maxInstances(self):
        """ """
        return self._maxInstances

    @maxInstances.setter
    def maxInstances(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._maxInstances = value
        else:
            raise TypeError(
                'Property "maxInstances" of type "list<int>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._cluster is not None:
            result["cluster"] = \
                self._cluster
        if self._currentInstances is not None:
            result["currentInstances"] = \
                self._currentInstances
        if self._gpuType is not None:
            result["gpuType"] = \
                self._gpuType
        if self._instanceType is not None:
            result["instanceType"] = \
                self._instanceType
        if self._maxInstances is not None:
            result["maxInstances"] = \
                self._maxInstances
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

