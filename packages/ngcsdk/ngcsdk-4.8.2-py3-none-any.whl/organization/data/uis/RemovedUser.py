"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .UserGdprStatus import UserGdprStatusEnum
from .UserStatus import UserStatusEnum

# Unused import over optimization prevention
str(repr(UserStatusEnum))
str(repr(UserGdprStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class RemovedUser(object):
    """information about a user removed from an org"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.clientId = (
            None if not fromDict or propDict.get(
                "clientId"
            ) is None
            else propDict["clientId"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.gdprDeletedDate = (
            None if not fromDict or propDict.get(
                "gdprDeletedDate"
            ) is None
            else propDict["gdprDeletedDate"])
        self.gdprRequestedDate = (
            None if not fromDict or propDict.get(
                "gdprRequestedDate"
            ) is None
            else propDict["gdprRequestedDate"])
        self.gdprStatus = (
            None if not fromDict or propDict.get(
                "gdprStatus"
            ) is None
            else propDict["gdprStatus"])
        self.modifiedDate = (
            None if not fromDict or propDict.get(
                "modifiedDate"
            ) is None
            else propDict["modifiedDate"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.removedDate = (
            None if not fromDict or propDict.get(
                "removedDate"
            ) is None
            else propDict["removedDate"])
        self.starfleetId = (
            None if not fromDict or propDict.get(
                "starfleetId"
            ) is None
            else propDict["starfleetId"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def clientId(self):
        """str: user's unique auth client id"""
        return self._clientId

    @clientId.setter
    def clientId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._clientId = value
        else:
            raise TypeError(
                'Property "clientId" of type "list<str>" set to wrong type'
            )

    @property
    def createdDate(self):
        """str: date on which the user the joined the org for the first time
        """
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def email(self):
        """str: user's email. this should be unique"""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def gdprDeletedDate(self):
        """str: date on which the user's gdpr data was deleted"""
        return self._gdprDeletedDate

    @gdprDeletedDate.setter
    def gdprDeletedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gdprDeletedDate = value
        else:
            raise TypeError(
                'Property "gdprDeletedDate" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def gdprRequestedDate(self):
        """str: date on which the user requested their gdpr data"""
        return self._gdprRequestedDate

    @gdprRequestedDate.setter
    def gdprRequestedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._gdprRequestedDate = value
        else:
            raise TypeError(
                'Property "gdprRequestedDate" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def gdprStatus(self):
        """ """
        return self._gdprStatus

    @gdprStatus.setter
    def gdprStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._gdprStatus = value
        else:
            raise TypeError(
                'Property "gdprStatus" of type "list<UserGdprStatusEnum>" set'
                ' to wrong type'
            )

    @property
    def modifiedDate(self):
        """str: date on which the user was last modified"""
        return self._modifiedDate

    @modifiedDate.setter
    def modifiedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._modifiedDate = value
        else:
            raise TypeError(
                'Property "modifiedDate" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def name(self):
        """str: user's name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: name of the org that the user was removed from"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def removedDate(self):
        """str: date on which the user was removed from the org"""
        return self._removedDate

    @removedDate.setter
    def removedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._removedDate = value
        else:
            raise TypeError(
                'Property "removedDate" of type "list<str>" set to wrong type'
            )

    @property
    def starfleetId(self):
        """str: user's starfleet id"""
        return self._starfleetId

    @starfleetId.setter
    def starfleetId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._starfleetId = value
        else:
            raise TypeError(
                'Property "starfleetId" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """ """
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<UserStatusEnum>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._clientId is not None:
            result["clientId"] = \
                self._clientId
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._email is not None:
            result["email"] = \
                self._email
        if self._gdprDeletedDate is not None:
            result["gdprDeletedDate"] = \
                self._gdprDeletedDate
        if self._gdprRequestedDate is not None:
            result["gdprRequestedDate"] = \
                self._gdprRequestedDate
        if self._gdprStatus is not None:
            result["gdprStatus"] = \
                self._gdprStatus
        if self._modifiedDate is not None:
            result["modifiedDate"] = \
                self._modifiedDate
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._removedDate is not None:
            result["removedDate"] = \
                self._removedDate
        if self._starfleetId is not None:
            result["starfleetId"] = \
                self._starfleetId
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._email is not None
            and
            len(self._email) < 7):
            raise ValueError(
                "RemovedUser.email: " + str(self._email) + 
                " doesnt match requirement: minLength: 7")
        if (self._email is not None
            and
            len(self._email) > 128):
            raise ValueError(
                "RemovedUser.email: " + str(self._email) + 
                " doesnt match requirement: maxLength: 128")
        if (self._email is not None
            and
            not re.match(
                r"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$)",
                 self._email)):
            raise ValueError(
                "RemovedUser.email: " + str(self._email) + 
                " doesnt match requirement: pattern: (^[a-zA-Z0-9_.+-]+@[a-zA"
                "-Z0-9-]+\.[a-zA-Z0-9-.]+$)")
        return True
    

