"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ApiKeyTypeEnum import ApiKeyTypeEnum
from .RequestStatus import RequestStatus
from .User import User

# Unused import over optimization prevention
str(repr(RequestStatus))
str(repr(User))
str(repr(ApiKeyTypeEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class SakCallerInfoResponse(object):
    """info about key used and user"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.products = (
            None if not fromDict or propDict.get(
                "products"
            ) is None
            else propDict["products"])
        self.requestStatus = (
            None if not fromDict or propDict.get(
                "requestStatus"
            ) is None
            else propDict["requestStatus"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.user = (
            None if not fromDict or propDict.get(
                "user"
            ) is None
            else propDict["user"])
        self.userId = (
            None if not fromDict or propDict.get(
                "userId"
            ) is None
            else propDict["userId"])

    @property
    def orgName(self):
        """str: Org in which the key was created"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def products(self):
        """list: A list of products"""
        return self._products

    @products.setter
    def products(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._products = value
        else:
            raise TypeError(
                'Property "products" of type "list<str>" set to wrong type'
            )

    @property
    def requestStatus(self):
        """ """
        return self._requestStatus

    @requestStatus.setter
    def requestStatus(self, value):
        if value is not None and not isinstance(value, RequestStatus):
            value = RequestStatus(value)
        if (value is None) or isinstance(value, RequestStatus):
            self._requestStatus = value
        else:
            raise TypeError(
                'Property "requestStatus" of type "list<RequestStatus>" set t'
                'o wrong type'
            )

    @property
    def type(self):
        """ApiKeyTypeEnum: Possible api key types"""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<ApiKeyTypeEnum>" set to wrong '
                'type'
            )

    @property
    def user(self):
        """User: information about the user"""
        return self._user

    @user.setter
    def user(self, value):
        if value is not None and not isinstance(value, User):
            value = User(value)
        if (value is None) or isinstance(value, User):
            self._user = value
        else:
            raise TypeError(
                'Property "user" of type "list<User>" set to wrong type'
            )

    @property
    def userId(self):
        """str: Starfleet ID of the user if personal key is used"""
        return self._userId

    @userId.setter
    def userId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._userId = value
        else:
            raise TypeError(
                'Property "userId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._products is not None:
            result["products"] = \
                self._products
        if self._requestStatus:
            result["requestStatus"] = \
                self._requestStatus.toDict() if self._requestStatus is not None else None
        if self._type is not None:
            result["type"] = \
                self._type
        if self._user:
            result["user"] = \
                self._user.toDict() if self._user is not None else None
        if self._userId is not None:
            result["userId"] = \
                self._userId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._user is not None): self._user.isValid()
        if (self._requestStatus is not None): self._requestStatus.isValid()
        return True
    

