"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .UserMetadata import UserMetadata

# Unused import over optimization prevention
str(repr(UserMetadata))


if sys.version_info > (3,):
    long = int
    unicode = str

class UserUpdateRequest(object):
    """object used to request user update"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.externalId = (
            None if not fromDict or propDict.get(
                "externalId"
            ) is None
            else propDict["externalId"])
        self.firstLoginTime = (
            None if not fromDict or propDict.get(
                "firstLoginTime"
            ) is None
            else propDict["firstLoginTime"])
        self.hasEmailOptIn = (
            None if not fromDict or propDict.get(
                "hasEmailOptIn"
            ) is None
            else propDict["hasEmailOptIn"])
        self.hasSignedBaseCommandEULA = (
            None if not fromDict or propDict.get(
                "hasSignedBaseCommandEULA"
            ) is None
            else propDict["hasSignedBaseCommandEULA"])
        self.hasSignedBioNeMoEULA = (
            None if not fromDict or propDict.get(
                "hasSignedBioNeMoEULA"
            ) is None
            else propDict["hasSignedBioNeMoEULA"])
        self.hasSignedContainerPublishingEULA = (
            None if not fromDict or propDict.get(
                "hasSignedContainerPublishingEULA"
            ) is None
            else propDict["hasSignedContainerPublishingEULA"])
        self.hasSignedCuOptEULA = (
            None if not fromDict or propDict.get(
                "hasSignedCuOptEULA"
            ) is None
            else propDict["hasSignedCuOptEULA"])
        self.hasSignedEULA = (
            None if not fromDict or propDict.get(
                "hasSignedEULA"
            ) is None
            else propDict["hasSignedEULA"])
        self.hasSignedEgxEULA = (
            None if not fromDict or propDict.get(
                "hasSignedEgxEULA"
            ) is None
            else propDict["hasSignedEgxEULA"])
        self.hasSignedFleetCommandEULA = (
            None if not fromDict or propDict.get(
                "hasSignedFleetCommandEULA"
            ) is None
            else propDict["hasSignedFleetCommandEULA"])
        self.hasSignedLlmEULA = (
            None if not fromDict or propDict.get(
                "hasSignedLlmEULA"
            ) is None
            else propDict["hasSignedLlmEULA"])
        self.hasSignedNVAIEEULA = (
            None if not fromDict or propDict.get(
                "hasSignedNVAIEEULA"
            ) is None
            else propDict["hasSignedNVAIEEULA"])
        self.hasSignedNvidiaEULA = (
            None if not fromDict or propDict.get(
                "hasSignedNvidiaEULA"
            ) is None
            else propDict["hasSignedNvidiaEULA"])
        self.hasSignedOmniverseEULA = (
            None if not fromDict or propDict.get(
                "hasSignedOmniverseEULA"
            ) is None
            else propDict["hasSignedOmniverseEULA"])
        self.hasSignedPrivacyPolicy = (
            None if not fromDict or propDict.get(
                "hasSignedPrivacyPolicy"
            ) is None
            else propDict["hasSignedPrivacyPolicy"])
        self.hasSignedThirdPartyRegistryShareEULA = (
            None if not fromDict or propDict.get(
                "hasSignedThirdPartyRegistryShareEULA"
            ) is None
            else propDict["hasSignedThirdPartyRegistryShareEULA"])
        self.idpId = (
            None if not fromDict or propDict.get(
                "idpId"
            ) is None
            else propDict["idpId"])
        self.idpName = (
            None if not fromDict or propDict.get(
                "idpName"
            ) is None
            else propDict["idpName"])
        self.lastLoginTime = (
            None if not fromDict or propDict.get(
                "lastLoginTime"
            ) is None
            else propDict["lastLoginTime"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.starfleetId = (
            None if not fromDict or propDict.get(
                "starfleetId"
            ) is None
            else propDict["starfleetId"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])
        self.userMetadata = (
            None if not fromDict or propDict.get(
                "userMetadata"
            ) is None
            else propDict["userMetadata"])

    @property
    def externalId(self):
        """str: Unique identifier from external system (e.g. Active Directory)
        """
        return self._externalId

    @externalId.setter
    def externalId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._externalId = value
        else:
            raise TypeError(
                'Property "externalId" of type "list<str>" set to wrong type'
            )

    @property
    def firstLoginTime(self):
        """str: First login time into NGC"""
        return self._firstLoginTime

    @firstLoginTime.setter
    def firstLoginTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._firstLoginTime = value
        else:
            raise TypeError(
                'Property "firstLoginTime" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def hasEmailOptIn(self):
        """bool: indicates if user has opt in to nvidia emails"""
        return self._hasEmailOptIn

    @hasEmailOptIn.setter
    def hasEmailOptIn(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasEmailOptIn = value
        else:
            raise TypeError(
                'Property "hasEmailOptIn" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def hasSignedBaseCommandEULA(self):
        """bool: indicates if user has accepted Base Command EULA"""
        return self._hasSignedBaseCommandEULA

    @hasSignedBaseCommandEULA.setter
    def hasSignedBaseCommandEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedBaseCommandEULA = value
        else:
            raise TypeError(
                'Property "hasSignedBaseCommandEULA" of type "list<bool>" set'
                ' to wrong type'
            )

    @property
    def hasSignedBioNeMoEULA(self):
        """bool: indicates if user has accepted BioNeMo End User License Agree
        ment."""
        return self._hasSignedBioNeMoEULA

    @hasSignedBioNeMoEULA.setter
    def hasSignedBioNeMoEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedBioNeMoEULA = value
        else:
            raise TypeError(
                'Property "hasSignedBioNeMoEULA" of type "list<bool>" set to '
                'wrong type'
            )

    @property
    def hasSignedContainerPublishingEULA(self):
        """bool: indicates if user has accepted container publishing eula"""
        return self._hasSignedContainerPublishingEULA

    @hasSignedContainerPublishingEULA.setter
    def hasSignedContainerPublishingEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedContainerPublishingEULA = value
        else:
            raise TypeError(
                'Property "hasSignedContainerPublishingEULA" of type "list<bo'
                'ol>" set to wrong type'
            )

    @property
    def hasSignedCuOptEULA(self):
        """bool: indicates if user has accepted CuOpt End User License Agreeme
        nt."""
        return self._hasSignedCuOptEULA

    @hasSignedCuOptEULA.setter
    def hasSignedCuOptEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedCuOptEULA = value
        else:
            raise TypeError(
                'Property "hasSignedCuOptEULA" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def hasSignedEULA(self):
        """bool: indicates if user has accepted NGC EULA"""
        return self._hasSignedEULA

    @hasSignedEULA.setter
    def hasSignedEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedEULA = value
        else:
            raise TypeError(
                'Property "hasSignedEULA" of type "list<bool>" set to wrong t'
                'ype'
            )

    @property
    def hasSignedEgxEULA(self):
        """bool: indicates if user has accepted EGX EULA"""
        return self._hasSignedEgxEULA

    @hasSignedEgxEULA.setter
    def hasSignedEgxEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedEgxEULA = value
        else:
            raise TypeError(
                'Property "hasSignedEgxEULA" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def hasSignedFleetCommandEULA(self):
        """bool: indicates if user has accepted Fleet Command End User License
         Agreement."""
        return self._hasSignedFleetCommandEULA

    @hasSignedFleetCommandEULA.setter
    def hasSignedFleetCommandEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedFleetCommandEULA = value
        else:
            raise TypeError(
                'Property "hasSignedFleetCommandEULA" of type "list<bool>" se'
                't to wrong type'
            )

    @property
    def hasSignedLlmEULA(self):
        """bool: indicates if user has accepted LLM End User License Agreement
        ."""
        return self._hasSignedLlmEULA

    @hasSignedLlmEULA.setter
    def hasSignedLlmEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedLlmEULA = value
        else:
            raise TypeError(
                'Property "hasSignedLlmEULA" of type "list<bool>" set to wron'
                'g type'
            )

    @property
    def hasSignedNVAIEEULA(self):
        """bool: indicates if user has accepted Fleet Command End User License
         Agreement."""
        return self._hasSignedNVAIEEULA

    @hasSignedNVAIEEULA.setter
    def hasSignedNVAIEEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedNVAIEEULA = value
        else:
            raise TypeError(
                'Property "hasSignedNVAIEEULA" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def hasSignedNvidiaEULA(self):
        """bool: indicates if user has accepted NVIDIA EULA"""
        return self._hasSignedNvidiaEULA

    @hasSignedNvidiaEULA.setter
    def hasSignedNvidiaEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedNvidiaEULA = value
        else:
            raise TypeError(
                'Property "hasSignedNvidiaEULA" of type "list<bool>" set to w'
                'rong type'
            )

    @property
    def hasSignedOmniverseEULA(self):
        """bool: indicates if user has accepted Omniverse End User License Agr
        eement."""
        return self._hasSignedOmniverseEULA

    @hasSignedOmniverseEULA.setter
    def hasSignedOmniverseEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedOmniverseEULA = value
        else:
            raise TypeError(
                'Property "hasSignedOmniverseEULA" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def hasSignedPrivacyPolicy(self):
        """bool: indicates if the user has signed the Privacy Policy"""
        return self._hasSignedPrivacyPolicy

    @hasSignedPrivacyPolicy.setter
    def hasSignedPrivacyPolicy(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedPrivacyPolicy = value
        else:
            raise TypeError(
                'Property "hasSignedPrivacyPolicy" of type "list<bool>" set t'
                'o wrong type'
            )

    @property
    def hasSignedThirdPartyRegistryShareEULA(self):
        """bool: indicates if user has consented to share their registration i
        nfo with other parties"""
        return self._hasSignedThirdPartyRegistryShareEULA

    @hasSignedThirdPartyRegistryShareEULA.setter
    def hasSignedThirdPartyRegistryShareEULA(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._hasSignedThirdPartyRegistryShareEULA = value
        else:
            raise TypeError(
                'Property "hasSignedThirdPartyRegistryShareEULA" of type "lis'
                't<bool>" set to wrong type'
            )

    @property
    def idpId(self):
        """str: IDP id"""
        return self._idpId

    @idpId.setter
    def idpId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._idpId = value
        else:
            raise TypeError(
                'Property "idpId" of type "list<str>" set to wrong type'
            )

    @property
    def idpName(self):
        """str: IDP name"""
        return self._idpName

    @idpName.setter
    def idpName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._idpName = value
        else:
            raise TypeError(
                'Property "idpName" of type "list<str>" set to wrong type'
            )

    @property
    def lastLoginTime(self):
        """str: Last login time into NGC"""
        return self._lastLoginTime

    @lastLoginTime.setter
    def lastLoginTime(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastLoginTime = value
        else:
            raise TypeError(
                'Property "lastLoginTime" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def name(self):
        """str: user name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def starfleetId(self):
        """str: Unique identifier from Starfleet"""
        return self._starfleetId

    @starfleetId.setter
    def starfleetId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._starfleetId = value
        else:
            raise TypeError(
                'Property "starfleetId" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Date when user record was last time updated"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    @property
    def userMetadata(self):
        """UserMetadata: Metadata information about the user."""
        return self._userMetadata

    @userMetadata.setter
    def userMetadata(self, value):
        if value is not None and not isinstance(value, UserMetadata):
            value = UserMetadata(value)
        if (value is None) or isinstance(value, UserMetadata):
            self._userMetadata = value
        else:
            raise TypeError(
                'Property "userMetadata" of type "list<UserMetadata>" set to '
                'wrong type'
            )

    def toDict(self):
        result = {}
        if self._externalId is not None:
            result["externalId"] = \
                self._externalId
        if self._firstLoginTime is not None:
            result["firstLoginTime"] = \
                self._firstLoginTime
        if self._hasEmailOptIn is not None:
            result["hasEmailOptIn"] = \
                self._hasEmailOptIn
        if self._hasSignedBaseCommandEULA is not None:
            result["hasSignedBaseCommandEULA"] = \
                self._hasSignedBaseCommandEULA
        if self._hasSignedBioNeMoEULA is not None:
            result["hasSignedBioNeMoEULA"] = \
                self._hasSignedBioNeMoEULA
        if self._hasSignedContainerPublishingEULA is not None:
            result["hasSignedContainerPublishingEULA"] = \
                self._hasSignedContainerPublishingEULA
        if self._hasSignedCuOptEULA is not None:
            result["hasSignedCuOptEULA"] = \
                self._hasSignedCuOptEULA
        if self._hasSignedEULA is not None:
            result["hasSignedEULA"] = \
                self._hasSignedEULA
        if self._hasSignedEgxEULA is not None:
            result["hasSignedEgxEULA"] = \
                self._hasSignedEgxEULA
        if self._hasSignedFleetCommandEULA is not None:
            result["hasSignedFleetCommandEULA"] = \
                self._hasSignedFleetCommandEULA
        if self._hasSignedLlmEULA is not None:
            result["hasSignedLlmEULA"] = \
                self._hasSignedLlmEULA
        if self._hasSignedNVAIEEULA is not None:
            result["hasSignedNVAIEEULA"] = \
                self._hasSignedNVAIEEULA
        if self._hasSignedNvidiaEULA is not None:
            result["hasSignedNvidiaEULA"] = \
                self._hasSignedNvidiaEULA
        if self._hasSignedOmniverseEULA is not None:
            result["hasSignedOmniverseEULA"] = \
                self._hasSignedOmniverseEULA
        if self._hasSignedPrivacyPolicy is not None:
            result["hasSignedPrivacyPolicy"] = \
                self._hasSignedPrivacyPolicy
        if self._hasSignedThirdPartyRegistryShareEULA is not None:
            result["hasSignedThirdPartyRegistryShareEULA"] = \
                self._hasSignedThirdPartyRegistryShareEULA
        if self._idpId is not None:
            result["idpId"] = \
                self._idpId
        if self._idpName is not None:
            result["idpName"] = \
                self._idpName
        if self._lastLoginTime is not None:
            result["lastLoginTime"] = \
                self._lastLoginTime
        if self._name is not None:
            result["name"] = \
                self._name
        if self._starfleetId is not None:
            result["starfleetId"] = \
                self._starfleetId
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        if self._userMetadata:
            result["userMetadata"] = \
                self._userMetadata.toDict() if self._userMetadata is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._name is not None
            and
            len(self._name) < 1):
            raise ValueError(
                "UserUpdateRequest.name: " + str(self._name) + 
                " doesnt match requirement: minLength: 1")
        if (self._name is not None
            and
            len(self._name) > 64):
            raise ValueError(
                "UserUpdateRequest.name: " + str(self._name) + 
                " doesnt match requirement: maxLength: 64")
        if (self._userMetadata is not None): self._userMetadata.isValid()
        return True
    

