"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .ApiKeyStatusEnum import ApiKeyStatusEnum
from .ApiKeyPolicy import ApiKeyPolicy

# Unused import over optimization prevention
str(repr(ApiKeyPolicy))
str(repr(ApiKeyStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateApiKeyRequest(object):
    """Update api key request"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.policies = (
            None if not fromDict or propDict.get(
                "policies"
            ) is None
            else [ ApiKeyPolicy(i)
            for i in propDict["policies"] ])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def policies(self):
        """list: Access permissions of the key"""
        return self._policies

    @policies.setter
    def policies(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._policies = value
        else:
            raise TypeError(
                'Property "policies" of type "list<ApiKeyPolicy>" set to wron'
                'g type'
            )

    @property
    def status(self):
        """ApiKeyStatusEnum: Possible api key statuses"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<ApiKeyStatusEnum>" set to wr'
                'ong type'
            )

    def toDict(self):
        result = {}
        if self._policies:
            result["policies"] = [
                i.toDict() for i in self._policies 
            ] if self._policies else []
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._policies is not None):
            for obj in self._policies:
                if (obj is not None): obj.isValid()
        return True
    

