"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ProductSubscription(object):
    """Product Subsciption"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.emsEntitlementType = (
            None if not fromDict or propDict.get(
                "emsEntitlementType"
            ) is None
            else propDict["emsEntitlementType"])
        self.expirationDate = (
            None if not fromDict or propDict.get(
                "expirationDate"
            ) is None
            else propDict["expirationDate"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.productName = (
            None if not fromDict or propDict.get(
                "productName"
            ) is None
            else propDict["productName"])
        self.startDate = (
            None if not fromDict or propDict.get(
                "startDate"
            ) is None
            else propDict["startDate"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def emsEntitlementType(self):
        """EmsEntitlementTypeEnum: EMS Subscription type. (options: EMS_EVAL, 
        EMS_NFR and EMS_COMMERICAL)"""
        return self._emsEntitlementType

    @emsEntitlementType.setter
    def emsEntitlementType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._emsEntitlementType = value
        else:
            raise TypeError(
                'Property "emsEntitlementType" of type "list<EmsEntitlementTy'
                'peEnum>" set to wrong type'
            )

    EmsEntitlementTypeEnum=["EMS_EVAL","EMS_NFR","EMS_COMMERICAL","EMS_COMMERCIAL",]
    str(repr(EmsEntitlementTypeEnum))  # Prevent optimizer removing enum

    @property
    def expirationDate(self):
        """str: Date on which the subscription expires. The subscription is in
        valid after this date. (yyyy-MM-dd)"""
        return self._expirationDate

    @expirationDate.setter
    def expirationDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._expirationDate = value
        else:
            raise TypeError(
                'Property "expirationDate" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def id(self):
        """str: Unique entitlement identifier"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def productName(self):
        """ProductNameEnum: Product Name. (options: NVAIE, BASE_COMMAND, Fleet
        Command, REGISTRY)"""
        return self._productName

    @productName.setter
    def productName(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._productName = value
        else:
            raise TypeError(
                'Property "productName" of type "list<ProductNameEnum>" set t'
                'o wrong type'
            )

    ProductNameEnum=["NVAIE","BASE_COMMAND","FleetCommand","REGISTRY","OMNIVERSE","RIVA_ENTEPRISE","TAO_STUDIO","PYM",]
    str(repr(ProductNameEnum))  # Prevent optimizer removing enum

    @property
    def startDate(self):
        """str: Date on which the subscription becomes active. (yyyy-MM-dd)"""
        return self._startDate

    @startDate.setter
    def startDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._startDate = value
        else:
            raise TypeError(
                'Property "startDate" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """TypeEnum: Subscription type. (options: NGC_ADMIN_EVAL, NGC_ADMIN_NF
        R, NGC_ADMIN_COMMERCIAL)"""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<TypeEnum>" set to wrong type'
            )

    TypeEnum=["NGC_ADMIN_EVAL","NGC_ADMIN_NFR","NGC_ADMIN_COMMERCIAL",]
    str(repr(TypeEnum))  # Prevent optimizer removing enum

    def toDict(self):
        result = {}
        if self._emsEntitlementType is not None:
            result["emsEntitlementType"] = \
                self._emsEntitlementType
        if self._expirationDate is not None:
            result["expirationDate"] = \
                self._expirationDate
        if self._id is not None:
            result["id"] = \
                self._id
        if self._productName is not None:
            result["productName"] = \
                self._productName
        if self._startDate is not None:
            result["startDate"] = \
                self._startDate
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._productName is None:
            raise ValueError(
                "ProductSubscription.productName doesnt match requirement:" 
                "required: True"
            )
        if (self._startDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\d",
                 self._startDate)):
            raise ValueError(
                "ProductSubscription.startDate: " + str(self._startDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\d")
        if (self._expirationDate is not None
            and
            not re.match(
                r"\d{4}-[01]\d-[0-3]\d",
                 self._expirationDate)):
            raise ValueError(
                "ProductSubscription.expirationDate: " + str(self._expirationDate) + 
                " doesnt match requirement: pattern: \d{4}-[01]\d-[0-3]\d")
        return True
    

