"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateUisOrgInfoRequest(object):
    """Update the info about an organizations"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.emsOrgUniqueIdentifier = (
            None if not fromDict or propDict.get(
                "emsOrgUniqueIdentifier"
            ) is None
            else propDict["emsOrgUniqueIdentifier"])
        self.isInternal = (
            None if not fromDict or propDict.get(
                "isInternal"
            ) is None
            else propDict["isInternal"])
        self.orgOwnerIds = (
            None if not fromDict or propDict.get(
                "orgOwnerIds"
            ) is None
            else propDict["orgOwnerIds"])
        self.productAccessTier = (
            None if not fromDict or propDict.get(
                "productAccessTier"
            ) is None
            else propDict["productAccessTier"])

    @property
    def emsOrgUniqueIdentifier(self):
        """ """
        return self._emsOrgUniqueIdentifier

    @emsOrgUniqueIdentifier.setter
    def emsOrgUniqueIdentifier(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._emsOrgUniqueIdentifier = value
        else:
            raise TypeError(
                'Property "emsOrgUniqueIdentifier" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def isInternal(self):
        """bool: Is NVIDIA internal org or not"""
        return self._isInternal

    @isInternal.setter
    def isInternal(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isInternal = value
        else:
            raise TypeError(
                'Property "isInternal" of type "list<bool>" set to wrong type'
            )

    @property
    def orgOwnerIds(self):
        """list: List of Org owner ids."""
        return self._orgOwnerIds

    @orgOwnerIds.setter
    def orgOwnerIds(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._orgOwnerIds = value
        else:
            raise TypeError(
                'Property "orgOwnerIds" of type "list<long>" set to wrong typ'
                'e'
            )

    @property
    def productAccessTier(self):
        """ """
        return self._productAccessTier

    @productAccessTier.setter
    def productAccessTier(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productAccessTier = value
        else:
            raise TypeError(
                'Property "productAccessTier" of type "list<str>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._emsOrgUniqueIdentifier is not None:
            result["emsOrgUniqueIdentifier"] = \
                self._emsOrgUniqueIdentifier
        if self._isInternal is not None:
            result["isInternal"] = \
                self._isInternal
        if self._orgOwnerIds is not None:
            result["orgOwnerIds"] = \
                self._orgOwnerIds
        if self._productAccessTier is not None:
            result["productAccessTier"] = \
                self._productAccessTier
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

