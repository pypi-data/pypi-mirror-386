"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AccountInfo import AccountInfo

# Unused import over optimization prevention
str(repr(AccountInfo))


if sys.version_info > (3,):
    long = int
    unicode = str

class CreateBillingAccountRequest(object):
    """Create billing account request"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.accountContact = (
            None if not fromDict or propDict.get(
                "accountContact"
            ) is None
            else propDict["accountContact"])
        self.billToContact = (
            None if not fromDict or propDict.get(
                "billToContact"
            ) is None
            else propDict["billToContact"])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])

    @property
    def accountContact(self):
        """AccountInfo: information about the account"""
        return self._accountContact

    @accountContact.setter
    def accountContact(self, value):
        if value is not None and not isinstance(value, AccountInfo):
            value = AccountInfo(value)
        if (value is None) or isinstance(value, AccountInfo):
            self._accountContact = value
        else:
            raise TypeError(
                'Property "accountContact" of type "list<AccountInfo>" set to'
                ' wrong type'
            )

    @property
    def billToContact(self):
        """AccountInfo: information about the account"""
        return self._billToContact

    @billToContact.setter
    def billToContact(self, value):
        if value is not None and not isinstance(value, AccountInfo):
            value = AccountInfo(value)
        if (value is None) or isinstance(value, AccountInfo):
            self._billToContact = value
        else:
            raise TypeError(
                'Property "billToContact" of type "list<AccountInfo>" set to '
                'wrong type'
            )

    @property
    def description(self):
        """ """
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: Account name"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._accountContact:
            result["accountContact"] = \
                self._accountContact.toDict() if self._accountContact is not None else None
        if self._billToContact:
            result["billToContact"] = \
                self._billToContact.toDict() if self._billToContact is not None else None
        if self._description is not None:
            result["description"] = \
                self._description
        if self._name is not None:
            result["name"] = \
                self._name
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._name is None:
            raise ValueError(
                "CreateBillingAccountRequest.name doesnt match requirement:" 
                "required: True"
            )
        if self._description is None:
            raise ValueError(
                "CreateBillingAccountRequest.description doesnt match requirement:" 
                "required: True"
            )
        if (self._accountContact is not None): self._accountContact.isValid()
        if (self._billToContact is not None): self._billToContact.isValid()
        return True
    

