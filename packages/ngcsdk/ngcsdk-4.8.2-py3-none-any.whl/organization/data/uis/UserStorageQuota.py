"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserStorageQuota(object):
    """represents user storage quota for a given ace and available unused stor
    age"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.aceId = (
            None if not fromDict or propDict.get(
                "aceId"
            ) is None
            else propDict["aceId"])
        self.aceName = (
            None if not fromDict or propDict.get(
                "aceName"
            ) is None
            else propDict["aceName"])
        self.available = (
            None if not fromDict or propDict.get(
                "available"
            ) is None
            else propDict["available"])
        self.datasetCount = (
            None if not fromDict or propDict.get(
                "datasetCount"
            ) is None
            else propDict["datasetCount"])
        self.datasetsUsage = (
            None if not fromDict or propDict.get(
                "datasetsUsage"
            ) is None
            else propDict["datasetsUsage"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.quota = (
            None if not fromDict or propDict.get(
                "quota"
            ) is None
            else propDict["quota"])
        self.resultsetCount = (
            None if not fromDict or propDict.get(
                "resultsetCount"
            ) is None
            else propDict["resultsetCount"])
        self.resultsetsUsage = (
            None if not fromDict or propDict.get(
                "resultsetsUsage"
            ) is None
            else propDict["resultsetsUsage"])
        self.storageClusterDescription = (
            None if not fromDict or propDict.get(
                "storageClusterDescription"
            ) is None
            else propDict["storageClusterDescription"])
        self.storageClusterName = (
            None if not fromDict or propDict.get(
                "storageClusterName"
            ) is None
            else propDict["storageClusterName"])
        self.storageClusterUuid = (
            None if not fromDict or propDict.get(
                "storageClusterUuid"
            ) is None
            else propDict["storageClusterUuid"])
        self.workspacesCount = (
            None if not fromDict or propDict.get(
                "workspacesCount"
            ) is None
            else propDict["workspacesCount"])
        self.workspacesUsage = (
            None if not fromDict or propDict.get(
                "workspacesUsage"
            ) is None
            else propDict["workspacesUsage"])

    @property
    def aceId(self):
        """long: id of the ace"""
        return self._aceId

    @aceId.setter
    def aceId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._aceId = value
        else:
            raise TypeError(
                'Property "aceId" of type "list<long>" set to wrong type'
            )

    @property
    def aceName(self):
        """str: name of the ace"""
        return self._aceName

    @aceName.setter
    def aceName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._aceName = value
        else:
            raise TypeError(
                'Property "aceName" of type "list<str>" set to wrong type'
            )

    @property
    def available(self):
        """long: Available space in bytes"""
        return self._available

    @available.setter
    def available(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._available = value
        else:
            raise TypeError(
                'Property "available" of type "list<long>" set to wrong type'
            )

    @property
    def datasetCount(self):
        """long: Number of datasets that are a part of user's used storage"""
        return self._datasetCount

    @datasetCount.setter
    def datasetCount(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._datasetCount = value
        else:
            raise TypeError(
                'Property "datasetCount" of type "list<long>" set to wrong ty'
                'pe'
            )

    @property
    def datasetsUsage(self):
        """long: Space used by datasets in bytes"""
        return self._datasetsUsage

    @datasetsUsage.setter
    def datasetsUsage(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._datasetsUsage = value
        else:
            raise TypeError(
                'Property "datasetsUsage" of type "list<long>" set to wrong t'
                'ype'
            )

    @property
    def orgName(self):
        """str: The org name that this user quota tied to. This is needed for 
        analytics"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def quota(self):
        """long: Assigned quota in bytes"""
        return self._quota

    @quota.setter
    def quota(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._quota = value
        else:
            raise TypeError(
                'Property "quota" of type "list<long>" set to wrong type'
            )

    @property
    def resultsetCount(self):
        """long: Number of resultsets that are a part of user's used storage
        """
        return self._resultsetCount

    @resultsetCount.setter
    def resultsetCount(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resultsetCount = value
        else:
            raise TypeError(
                'Property "resultsetCount" of type "list<long>" set to wrong '
                'type'
            )

    @property
    def resultsetsUsage(self):
        """long: Space used by resultsets in bytes"""
        return self._resultsetsUsage

    @resultsetsUsage.setter
    def resultsetsUsage(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._resultsetsUsage = value
        else:
            raise TypeError(
                'Property "resultsetsUsage" of type "list<long>" set to wrong'
                ' type'
            )

    @property
    def storageClusterDescription(self):
        """str: Description of this storage cluster"""
        return self._storageClusterDescription

    @storageClusterDescription.setter
    def storageClusterDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageClusterDescription = value
        else:
            raise TypeError(
                'Property "storageClusterDescription" of type "list<str>" set'
                ' to wrong type'
            )

    @property
    def storageClusterName(self):
        """str: Name of storage cluster"""
        return self._storageClusterName

    @storageClusterName.setter
    def storageClusterName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageClusterName = value
        else:
            raise TypeError(
                'Property "storageClusterName" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def storageClusterUuid(self):
        """str: Identifier to this storage cluster"""
        return self._storageClusterUuid

    @storageClusterUuid.setter
    def storageClusterUuid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._storageClusterUuid = value
        else:
            raise TypeError(
                'Property "storageClusterUuid" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def workspacesCount(self):
        """long: Number of workspaces that are a part of user's used storage
        """
        return self._workspacesCount

    @workspacesCount.setter
    def workspacesCount(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._workspacesCount = value
        else:
            raise TypeError(
                'Property "workspacesCount" of type "list<long>" set to wrong'
                ' type'
            )

    @property
    def workspacesUsage(self):
        """long: Space used by workspaces in bytes"""
        return self._workspacesUsage

    @workspacesUsage.setter
    def workspacesUsage(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._workspacesUsage = value
        else:
            raise TypeError(
                'Property "workspacesUsage" of type "list<long>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._aceId is not None:
            result["aceId"] = \
                self._aceId
        if self._aceName is not None:
            result["aceName"] = \
                self._aceName
        if self._available is not None:
            result["available"] = \
                self._available
        if self._datasetCount is not None:
            result["datasetCount"] = \
                self._datasetCount
        if self._datasetsUsage is not None:
            result["datasetsUsage"] = \
                self._datasetsUsage
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._quota is not None:
            result["quota"] = \
                self._quota
        if self._resultsetCount is not None:
            result["resultsetCount"] = \
                self._resultsetCount
        if self._resultsetsUsage is not None:
            result["resultsetsUsage"] = \
                self._resultsetsUsage
        if self._storageClusterDescription is not None:
            result["storageClusterDescription"] = \
                self._storageClusterDescription
        if self._storageClusterName is not None:
            result["storageClusterName"] = \
                self._storageClusterName
        if self._storageClusterUuid is not None:
            result["storageClusterUuid"] = \
                self._storageClusterUuid
        if self._workspacesCount is not None:
            result["workspacesCount"] = \
                self._workspacesCount
        if self._workspacesUsage is not None:
            result["workspacesUsage"] = \
                self._workspacesUsage
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

