"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UserCreatedEvent(object):
    """This event in the queue means an user should be created/updated in thir
    d party CRM"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.userId = (
            None if not fromDict or propDict.get(
                "userId"
            ) is None
            else propDict["userId"])

    @property
    def orgName(self):
        """str: org name that the user should belong to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def userId(self):
        """long: Unique identifier of the user."""
        return self._userId

    @userId.setter
    def userId(self, value):
        if value is not None and not isinstance(value, long):
            value = long(value)
        if (value is None) or isinstance(value, long):
            self._userId = value
        else:
            raise TypeError(
                'Property "userId" of type "list<long>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._userId is not None:
            result["userId"] = \
                self._userId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

