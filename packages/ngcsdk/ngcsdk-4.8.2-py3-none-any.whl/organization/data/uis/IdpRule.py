"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class IdpRule(object):
    """Information about the IDP rule"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.createdBy = (
            None if not fromDict or propDict.get(
                "createdBy"
            ) is None
            else propDict["createdBy"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.idpId = (
            None if not fromDict or propDict.get(
                "idpId"
            ) is None
            else propDict["idpId"])
        self.namespace = (
            None if not fromDict or propDict.get(
                "namespace"
            ) is None
            else propDict["namespace"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.queryString = (
            None if not fromDict or propDict.get(
                "queryString"
            ) is None
            else propDict["queryString"])
        self.roles = (
            None if not fromDict or propDict.get(
                "roles"
            ) is None
            else propDict["roles"])
        self.ruleId = (
            None if not fromDict or propDict.get(
                "ruleId"
            ) is None
            else propDict["ruleId"])
        self.ruleName = (
            None if not fromDict or propDict.get(
                "ruleName"
            ) is None
            else propDict["ruleName"])
        self.updatedBy = (
            None if not fromDict or propDict.get(
                "updatedBy"
            ) is None
            else propDict["updatedBy"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def createdBy(self):
        """str: Email of user creating the rule"""
        return self._createdBy

    @createdBy.setter
    def createdBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdBy = value
        else:
            raise TypeError(
                'Property "createdBy" of type "list<str>" set to wrong type'
            )

    @property
    def createdDate(self):
        """str: Creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def idpId(self):
        """str: Unique IDP ID"""
        return self._idpId

    @idpId.setter
    def idpId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._idpId = value
        else:
            raise TypeError(
                'Property "idpId" of type "list<str>" set to wrong type'
            )

    @property
    def namespace(self):
        """str: Namespace to add users to if the rule applies"""
        return self._namespace

    @namespace.setter
    def namespace(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._namespace = value
        else:
            raise TypeError(
                'Property "namespace" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Organization name"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def queryString(self):
        """str: Query to use to determine if rule applies"""
        return self._queryString

    @queryString.setter
    def queryString(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._queryString = value
        else:
            raise TypeError(
                'Property "queryString" of type "list<str>" set to wrong type'
            )

    @property
    def roles(self):
        """list: A list of roles to be added"""
        return self._roles

    @roles.setter
    def roles(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._roles = value
        else:
            raise TypeError(
                'Property "roles" of type "list<str>" set to wrong type'
            )

    @property
    def ruleId(self):
        """str: Unique IDP rule UUID"""
        return self._ruleId

    @ruleId.setter
    def ruleId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ruleId = value
        else:
            raise TypeError(
                'Property "ruleId" of type "list<str>" set to wrong type'
            )

    @property
    def ruleName(self):
        """str: User readable name of the IDP rule"""
        return self._ruleName

    @ruleName.setter
    def ruleName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ruleName = value
        else:
            raise TypeError(
                'Property "ruleName" of type "list<str>" set to wrong type'
            )

    @property
    def updatedBy(self):
        """str: Email of user updating the rule"""
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedBy = value
        else:
            raise TypeError(
                'Property "updatedBy" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Update date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._createdBy is not None:
            result["createdBy"] = \
                self._createdBy
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._idpId is not None:
            result["idpId"] = \
                self._idpId
        if self._namespace is not None:
            result["namespace"] = \
                self._namespace
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._queryString is not None:
            result["queryString"] = \
                self._queryString
        if self._roles is not None:
            result["roles"] = \
                self._roles
        if self._ruleId is not None:
            result["ruleId"] = \
                self._ruleId
        if self._ruleName is not None:
            result["ruleName"] = \
                self._ruleName
        if self._updatedBy is not None:
            result["updatedBy"] = \
                self._updatedBy
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._idpId is None:
            raise ValueError(
                "IdpRule.idpId doesnt match requirement:" 
                "required: True"
            )
        if self._orgName is None:
            raise ValueError(
                "IdpRule.orgName doesnt match requirement:" 
                "required: True"
            )
        if self._ruleId is None:
            raise ValueError(
                "IdpRule.ruleId doesnt match requirement:" 
                "required: True"
            )
        if self._ruleName is None:
            raise ValueError(
                "IdpRule.ruleName doesnt match requirement:" 
                "required: True"
            )
        if self._namespace is None:
            raise ValueError(
                "IdpRule.namespace doesnt match requirement:" 
                "required: True"
            )
        if self._queryString is None:
            raise ValueError(
                "IdpRule.queryString doesnt match requirement:" 
                "required: True"
            )
        if self._roles is None:
            raise ValueError(
                "IdpRule.roles doesnt match requirement:" 
                "required: True"
            )
        if self._createdDate is None:
            raise ValueError(
                "IdpRule.createdDate doesnt match requirement:" 
                "required: True"
            )
        return True
    

