"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class InfinityManagerSettings(object):
    """Infinity manager setting definition"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.enableTeamOverride = (
            None if not fromDict or propDict.get(
                "enableTeamOverride"
            ) is None
            else propDict["enableTeamOverride"])
        self.enabled = (
            None if not fromDict or propDict.get(
                "enabled"
            ) is None
            else propDict["enabled"])

    @property
    def enableTeamOverride(self):
        """bool: Allow override settings at team level. Only used in org level
         object"""
        return self._enableTeamOverride

    @enableTeamOverride.setter
    def enableTeamOverride(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._enableTeamOverride = value
        else:
            raise TypeError(
                'Property "enableTeamOverride" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def enabled(self):
        """bool: Enable the infinity manager or not. Used both in org and team
         level object"""
        return self._enabled

    @enabled.setter
    def enabled(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._enabled = value
        else:
            raise TypeError(
                'Property "enabled" of type "list<bool>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._enableTeamOverride is not None:
            result["enableTeamOverride"] = \
                self._enableTeamOverride
        if self._enabled is not None:
            result["enabled"] = \
                self._enabled
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

