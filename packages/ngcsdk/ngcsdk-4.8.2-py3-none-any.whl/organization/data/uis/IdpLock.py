"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class IdpLock(object):
    """Information about the IDP lock for an organization"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.createdBy = (
            None if not fromDict or propDict.get(
                "createdBy"
            ) is None
            else propDict["createdBy"])
        self.createdDate = (
            None if not fromDict or propDict.get(
                "createdDate"
            ) is None
            else propDict["createdDate"])
        self.idpId = (
            None if not fromDict or propDict.get(
                "idpId"
            ) is None
            else propDict["idpId"])
        self.locked = (
            None if not fromDict or propDict.get(
                "locked"
            ) is None
            else propDict["locked"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.updatedBy = (
            None if not fromDict or propDict.get(
                "updatedBy"
            ) is None
            else propDict["updatedBy"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])

    @property
    def createdBy(self):
        """str: Email of user creating the lock"""
        return self._createdBy

    @createdBy.setter
    def createdBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdBy = value
        else:
            raise TypeError(
                'Property "createdBy" of type "list<str>" set to wrong type'
            )

    @property
    def createdDate(self):
        """str: Creation date in ISO-8601 format"""
        return self._createdDate

    @createdDate.setter
    def createdDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdDate = value
        else:
            raise TypeError(
                'Property "createdDate" of type "list<str>" set to wrong type'
            )

    @property
    def idpId(self):
        """str: Unique IDP ID"""
        return self._idpId

    @idpId.setter
    def idpId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._idpId = value
        else:
            raise TypeError(
                'Property "idpId" of type "list<str>" set to wrong type'
            )

    @property
    def locked(self):
        """bool: Indicates if the IDP is locked for the organization"""
        return self._locked

    @locked.setter
    def locked(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._locked = value
        else:
            raise TypeError(
                'Property "locked" of type "list<bool>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: Organization name"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def updatedBy(self):
        """str: Email of user updating the lock"""
        return self._updatedBy

    @updatedBy.setter
    def updatedBy(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedBy = value
        else:
            raise TypeError(
                'Property "updatedBy" of type "list<str>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: Update date in ISO-8601 format"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._createdBy is not None:
            result["createdBy"] = \
                self._createdBy
        if self._createdDate is not None:
            result["createdDate"] = \
                self._createdDate
        if self._idpId is not None:
            result["idpId"] = \
                self._idpId
        if self._locked is not None:
            result["locked"] = \
                self._locked
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._updatedBy is not None:
            result["updatedBy"] = \
                self._updatedBy
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._orgName is None:
            raise ValueError(
                "IdpLock.orgName doesnt match requirement:" 
                "required: True"
            )
        if self._idpId is None:
            raise ValueError(
                "IdpLock.idpId doesnt match requirement:" 
                "required: True"
            )
        if self._locked is None:
            raise ValueError(
                "IdpLock.locked doesnt match requirement:" 
                "required: True"
            )
        if self._createdDate is None:
            raise ValueError(
                "IdpLock.createdDate doesnt match requirement:" 
                "required: True"
            )
        return True
    

