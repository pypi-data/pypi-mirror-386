"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .OrderSummary import OrderSummary
from .LineItem import LineItem
from .SubscriptionStatusEnum import SubscriptionStatusEnum

# Unused import over optimization prevention
str(repr(OrderSummary))
str(repr(LineItem))
str(repr(SubscriptionStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class PreviewOrder(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.lineItems = (
            None if not fromDict or propDict.get(
                "lineItems"
            ) is None
            else [ LineItem(i)
            for i in propDict["lineItems"] ])
        self.orderDate = (
            None if not fromDict or propDict.get(
                "orderDate"
            ) is None
            else propDict["orderDate"])
        self.orderSummary = (
            None if not fromDict or propDict.get(
                "orderSummary"
            ) is None
            else propDict["orderSummary"])
        self.renewalDate = (
            None if not fromDict or propDict.get(
                "renewalDate"
            ) is None
            else propDict["renewalDate"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])

    @property
    def lineItems(self):
        """ """
        return self._lineItems

    @lineItems.setter
    def lineItems(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._lineItems = value
        else:
            raise TypeError(
                'Property "lineItems" of type "list<LineItem>" set to wrong t'
                'ype'
            )

    @property
    def orderDate(self):
        """str: order date for the product"""
        return self._orderDate

    @orderDate.setter
    def orderDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orderDate = value
        else:
            raise TypeError(
                'Property "orderDate" of type "list<str>" set to wrong type'
            )

    @property
    def orderSummary(self):
        """ """
        return self._orderSummary

    @orderSummary.setter
    def orderSummary(self, value):
        if value is not None and not isinstance(value, OrderSummary):
            value = OrderSummary(value)
        if (value is None) or isinstance(value, OrderSummary):
            self._orderSummary = value
        else:
            raise TypeError(
                'Property "orderSummary" of type "list<OrderSummary>" set to '
                'wrong type'
            )

    @property
    def renewalDate(self):
        """str: renewal date for the product subscription"""
        return self._renewalDate

    @renewalDate.setter
    def renewalDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._renewalDate = value
        else:
            raise TypeError(
                'Property "renewalDate" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """SubscriptionStatusEnum: All possible subscription status enums"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<SubscriptionStatusEnum>" set'
                ' to wrong type'
            )

    def toDict(self):
        result = {}
        if self._lineItems:
            result["lineItems"] = [
                i.toDict() for i in self._lineItems 
            ] if self._lineItems else []
        if self._orderDate is not None:
            result["orderDate"] = \
                self._orderDate
        if self._orderSummary:
            result["orderSummary"] = \
                self._orderSummary.toDict() if self._orderSummary is not None else None
        if self._renewalDate is not None:
            result["renewalDate"] = \
                self._renewalDate
        if self._status is not None:
            result["status"] = \
                self._status
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._lineItems is not None):
            for obj in self._lineItems:
                if (obj is not None): obj.isValid()
        if (self._orderSummary is not None): self._orderSummary.isValid()
        return True
    

