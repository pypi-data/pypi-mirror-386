"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MetaData import MetaData

# Unused import over optimization prevention
str(repr(MetaData))


if sys.version_info > (3,):
    long = int
    unicode = str

class RelatedArtifact(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else [ MetaData(i)
            for i in propDict["attributes"] ])
        self.description = (
            None if not fromDict or propDict.get(
                "description"
            ) is None
            else propDict["description"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.productName = (
            None if not fromDict or propDict.get(
                "productName"
            ) is None
            else propDict["productName"])
        self.resourceType = (
            None if not fromDict or propDict.get(
                "resourceType"
            ) is None
            else propDict["resourceType"])

    @property
    def attributes(self):
        """ """
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<MetaData>" set to wrong '
                'type'
            )

    @property
    def description(self):
        """str: shortDescription of the artifact"""
        return self._description

    @description.setter
    def description(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._description = value
        else:
            raise TypeError(
                'Property "description" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: display name of the artifact"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def labels(self):
        """ """
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: name of the artifact"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def productName(self):
        """str: product name of the artifact"""
        return self._productName

    @productName.setter
    def productName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productName = value
        else:
            raise TypeError(
                'Property "productName" of type "list<str>" set to wrong type'
            )

    @property
    def resourceType(self):
        """str: resource type of the artifact"""
        return self._resourceType

    @resourceType.setter
    def resourceType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._resourceType = value
        else:
            raise TypeError(
                'Property "resourceType" of type "list<str>" set to wrong typ'
                'e'
            )

    def toDict(self):
        result = {}
        if self._attributes:
            result["attributes"] = [
                i.toDict() for i in self._attributes 
            ] if self._attributes else []
        if self._description is not None:
            result["description"] = \
                self._description
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._name is not None:
            result["name"] = \
                self._name
        if self._productName is not None:
            result["productName"] = \
                self._productName
        if self._resourceType is not None:
            result["resourceType"] = \
                self._resourceType
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._attributes is not None):
            for obj in self._attributes:
                if (obj is not None): obj.isValid()
        return True
    

