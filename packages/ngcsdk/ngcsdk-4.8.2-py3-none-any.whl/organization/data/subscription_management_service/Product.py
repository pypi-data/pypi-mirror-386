"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .RelatedItem import RelatedItem
from .Tou import Tou
from .MetaData import MetaData
from .Action import Action
from .Tab import Tab

# Unused import over optimization prevention
str(repr(MetaData))
str(repr(Action))
str(repr(RelatedItem))
str(repr(Tab))
str(repr(Tou))


if sys.version_info > (3,):
    long = int
    unicode = str

class Product(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.actions = (
            None if not fromDict or propDict.get(
                "actions"
            ) is None
            else [ Action(i)
            for i in propDict["actions"] ])
        self.allowCreditCard = (
            None if not fromDict or propDict.get(
                "allowCreditCard"
            ) is None
            else propDict["allowCreditCard"])
        self.allowPurchaseOrder = (
            None if not fromDict or propDict.get(
                "allowPurchaseOrder"
            ) is None
            else propDict["allowPurchaseOrder"])
        self.allowTrials = (
            None if not fromDict or propDict.get(
                "allowTrials"
            ) is None
            else propDict["allowTrials"])
        self.applicationType = (
            None if not fromDict or propDict.get(
                "applicationType"
            ) is None
            else propDict["applicationType"])
        self.attributes = (
            None if not fromDict or propDict.get(
                "attributes"
            ) is None
            else [ MetaData(i)
            for i in propDict["attributes"] ])
        self.category = (
            None if not fromDict or propDict.get(
                "category"
            ) is None
            else propDict["category"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.imageUrl = (
            None if not fromDict or propDict.get(
                "imageUrl"
            ) is None
            else propDict["imageUrl"])
        self.labels = (
            None if not fromDict or propDict.get(
                "labels"
            ) is None
            else propDict["labels"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.productFamily = (
            None if not fromDict or propDict.get(
                "productFamily"
            ) is None
            else propDict["productFamily"])
        self.productIcon = (
            None if not fromDict or propDict.get(
                "productIcon"
            ) is None
            else propDict["productIcon"])
        self.productSku = (
            None if not fromDict or propDict.get(
                "productSku"
            ) is None
            else propDict["productSku"])
        self.productTier = (
            None if not fromDict or propDict.get(
                "productTier"
            ) is None
            else propDict["productTier"])
        self.productType = (
            None if not fromDict or propDict.get(
                "productType"
            ) is None
            else propDict["productType"])
        self.purchasable = (
            None if not fromDict or propDict.get(
                "purchasable"
            ) is None
            else propDict["purchasable"])
        self.relatedItems = (
            None if not fromDict or propDict.get(
                "relatedItems"
            ) is None
            else [ RelatedItem(i)
            for i in propDict["relatedItems"] ])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])
        self.tabs = (
            None if not fromDict or propDict.get(
                "tabs"
            ) is None
            else [ Tab(i)
            for i in propDict["tabs"] ])
        self.tou = (
            None if not fromDict or propDict.get(
                "tou"
            ) is None
            else propDict["tou"])
        self.ucpDisplayName = (
            None if not fromDict or propDict.get(
                "ucpDisplayName"
            ) is None
            else propDict["ucpDisplayName"])
        self.usage = (
            None if not fromDict or propDict.get(
                "usage"
            ) is None
            else propDict["usage"])

    @property
    def actions(self):
        """ """
        return self._actions

    @actions.setter
    def actions(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._actions = value
        else:
            raise TypeError(
                'Property "actions" of type "list<Action>" set to wrong type'
            )

    @property
    def allowCreditCard(self):
        """ """
        return self._allowCreditCard

    @allowCreditCard.setter
    def allowCreditCard(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowCreditCard = value
        else:
            raise TypeError(
                'Property "allowCreditCard" of type "list<bool>" set to wrong'
                ' type'
            )

    @property
    def allowPurchaseOrder(self):
        """ """
        return self._allowPurchaseOrder

    @allowPurchaseOrder.setter
    def allowPurchaseOrder(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowPurchaseOrder = value
        else:
            raise TypeError(
                'Property "allowPurchaseOrder" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def allowTrials(self):
        """ """
        return self._allowTrials

    @allowTrials.setter
    def allowTrials(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowTrials = value
        else:
            raise TypeError(
                'Property "allowTrials" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def applicationType(self):
        """str: type of the industry of application"""
        return self._applicationType

    @applicationType.setter
    def applicationType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._applicationType = value
        else:
            raise TypeError(
                'Property "applicationType" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def attributes(self):
        """ """
        return self._attributes

    @attributes.setter
    def attributes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._attributes = value
        else:
            raise TypeError(
                'Property "attributes" of type "list<MetaData>" set to wrong '
                'type'
            )

    @property
    def category(self):
        """str: category of the product"""
        return self._category

    @category.setter
    def category(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._category = value
        else:
            raise TypeError(
                'Property "category" of type "list<str>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: display name from user input"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def imageUrl(self):
        """ """
        return self._imageUrl

    @imageUrl.setter
    def imageUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._imageUrl = value
        else:
            raise TypeError(
                'Property "imageUrl" of type "list<str>" set to wrong type'
            )

    @property
    def labels(self):
        """ """
        return self._labels

    @labels.setter
    def labels(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._labels = value
        else:
            raise TypeError(
                'Property "labels" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: name of the product"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def productFamily(self):
        """ """
        return self._productFamily

    @productFamily.setter
    def productFamily(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productFamily = value
        else:
            raise TypeError(
                'Property "productFamily" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def productIcon(self):
        """ """
        return self._productIcon

    @productIcon.setter
    def productIcon(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productIcon = value
        else:
            raise TypeError(
                'Property "productIcon" of type "list<str>" set to wrong type'
            )

    @property
    def productSku(self):
        """str: product SKU of the product"""
        return self._productSku

    @productSku.setter
    def productSku(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productSku = value
        else:
            raise TypeError(
                'Property "productSku" of type "list<str>" set to wrong type'
            )

    @property
    def productTier(self):
        """ """
        return self._productTier

    @productTier.setter
    def productTier(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productTier = value
        else:
            raise TypeError(
                'Property "productTier" of type "list<str>" set to wrong type'
            )

    @property
    def productType(self):
        """ """
        return self._productType

    @productType.setter
    def productType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productType = value
        else:
            raise TypeError(
                'Property "productType" of type "list<str>" set to wrong type'
            )

    @property
    def purchasable(self):
        """ """
        return self._purchasable

    @purchasable.setter
    def purchasable(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._purchasable = value
        else:
            raise TypeError(
                'Property "purchasable" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def relatedItems(self):
        """ """
        return self._relatedItems

    @relatedItems.setter
    def relatedItems(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._relatedItems = value
        else:
            raise TypeError(
                'Property "relatedItems" of type "list<RelatedItem>" set to w'
                'rong type'
            )

    @property
    def shortDescription(self):
        """str: short description of the product"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def tabs(self):
        """ """
        return self._tabs

    @tabs.setter
    def tabs(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._tabs = value
        else:
            raise TypeError(
                'Property "tabs" of type "list<Tab>" set to wrong type'
            )

    @property
    def tou(self):
        """ """
        return self._tou

    @tou.setter
    def tou(self, value):
        if value is not None and not isinstance(value, Tou):
            value = Tou(value)
        if (value is None) or isinstance(value, Tou):
            self._tou = value
        else:
            raise TypeError(
                'Property "tou" of type "list<Tou>" set to wrong type'
            )

    @property
    def ucpDisplayName(self):
        """str: display name from UCP product catalog"""
        return self._ucpDisplayName

    @ucpDisplayName.setter
    def ucpDisplayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._ucpDisplayName = value
        else:
            raise TypeError(
                'Property "ucpDisplayName" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def usage(self):
        """ """
        return self._usage

    @usage.setter
    def usage(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._usage = value
        else:
            raise TypeError(
                'Property "usage" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._actions:
            result["actions"] = [
                i.toDict() for i in self._actions 
            ] if self._actions else []
        if self._allowCreditCard is not None:
            result["allowCreditCard"] = \
                self._allowCreditCard
        if self._allowPurchaseOrder is not None:
            result["allowPurchaseOrder"] = \
                self._allowPurchaseOrder
        if self._allowTrials is not None:
            result["allowTrials"] = \
                self._allowTrials
        if self._applicationType is not None:
            result["applicationType"] = \
                self._applicationType
        if self._attributes:
            result["attributes"] = [
                i.toDict() for i in self._attributes 
            ] if self._attributes else []
        if self._category is not None:
            result["category"] = \
                self._category
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._imageUrl is not None:
            result["imageUrl"] = \
                self._imageUrl
        if self._labels is not None:
            result["labels"] = \
                self._labels
        if self._name is not None:
            result["name"] = \
                self._name
        if self._productFamily is not None:
            result["productFamily"] = \
                self._productFamily
        if self._productIcon is not None:
            result["productIcon"] = \
                self._productIcon
        if self._productSku is not None:
            result["productSku"] = \
                self._productSku
        if self._productTier is not None:
            result["productTier"] = \
                self._productTier
        if self._productType is not None:
            result["productType"] = \
                self._productType
        if self._purchasable is not None:
            result["purchasable"] = \
                self._purchasable
        if self._relatedItems:
            result["relatedItems"] = [
                i.toDict() for i in self._relatedItems 
            ] if self._relatedItems else []
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        if self._tabs:
            result["tabs"] = [
                i.toDict() for i in self._tabs 
            ] if self._tabs else []
        if self._tou:
            result["tou"] = \
                self._tou.toDict() if self._tou is not None else None
        if self._ucpDisplayName is not None:
            result["ucpDisplayName"] = \
                self._ucpDisplayName
        if self._usage is not None:
            result["usage"] = \
                self._usage
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._tou is not None): self._tou.isValid()
        if (self._relatedItems is not None):
            for obj in self._relatedItems:
                if (obj is not None): obj.isValid()
        if (self._actions is not None):
            for obj in self._actions:
                if (obj is not None): obj.isValid()
        if (self._attributes is not None):
            for obj in self._attributes:
                if (obj is not None): obj.isValid()
        if (self._tabs is not None):
            for obj in self._tabs:
                if (obj is not None): obj.isValid()
        return True
    

