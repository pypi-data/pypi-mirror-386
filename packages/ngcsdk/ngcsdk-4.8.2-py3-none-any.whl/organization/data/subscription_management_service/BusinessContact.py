"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class BusinessContact(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.addressLine1 = (
            None if not fromDict or propDict.get(
                "addressLine1"
            ) is None
            else propDict["addressLine1"])
        self.addressLine2 = (
            None if not fromDict or propDict.get(
                "addressLine2"
            ) is None
            else propDict["addressLine2"])
        self.city = (
            None if not fromDict or propDict.get(
                "city"
            ) is None
            else propDict["city"])
        self.companyName = (
            None if not fromDict or propDict.get(
                "companyName"
            ) is None
            else propDict["companyName"])
        self.countryISO = (
            None if not fromDict or propDict.get(
                "countryISO"
            ) is None
            else propDict["countryISO"])
        self.countryName = (
            None if not fromDict or propDict.get(
                "countryName"
            ) is None
            else propDict["countryName"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.firstName = (
            None if not fromDict or propDict.get(
                "firstName"
            ) is None
            else propDict["firstName"])
        self.industry = (
            None if not fromDict or propDict.get(
                "industry"
            ) is None
            else propDict["industry"])
        self.isSystemIntegrator = (
            None if not fromDict or propDict.get(
                "isSystemIntegrator"
            ) is None
            else propDict["isSystemIntegrator"])
        self.lastName = (
            None if not fromDict or propDict.get(
                "lastName"
            ) is None
            else propDict["lastName"])
        self.phoneNumber = (
            None if not fromDict or propDict.get(
                "phoneNumber"
            ) is None
            else propDict["phoneNumber"])
        self.role = (
            None if not fromDict or propDict.get(
                "role"
            ) is None
            else propDict["role"])
        self.state = (
            None if not fromDict or propDict.get(
                "state"
            ) is None
            else propDict["state"])
        self.zipCode = (
            None if not fromDict or propDict.get(
                "zipCode"
            ) is None
            else propDict["zipCode"])

    @property
    def addressLine1(self):
        """ """
        return self._addressLine1

    @addressLine1.setter
    def addressLine1(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._addressLine1 = value
        else:
            raise TypeError(
                'Property "addressLine1" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def addressLine2(self):
        """ """
        return self._addressLine2

    @addressLine2.setter
    def addressLine2(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._addressLine2 = value
        else:
            raise TypeError(
                'Property "addressLine2" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def city(self):
        """ """
        return self._city

    @city.setter
    def city(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._city = value
        else:
            raise TypeError(
                'Property "city" of type "list<str>" set to wrong type'
            )

    @property
    def companyName(self):
        """ """
        return self._companyName

    @companyName.setter
    def companyName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._companyName = value
        else:
            raise TypeError(
                'Property "companyName" of type "list<str>" set to wrong type'
            )

    @property
    def countryISO(self):
        """ """
        return self._countryISO

    @countryISO.setter
    def countryISO(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._countryISO = value
        else:
            raise TypeError(
                'Property "countryISO" of type "list<str>" set to wrong type'
            )

    @property
    def countryName(self):
        """ """
        return self._countryName

    @countryName.setter
    def countryName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._countryName = value
        else:
            raise TypeError(
                'Property "countryName" of type "list<str>" set to wrong type'
            )

    @property
    def email(self):
        """ """
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def firstName(self):
        """ """
        return self._firstName

    @firstName.setter
    def firstName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._firstName = value
        else:
            raise TypeError(
                'Property "firstName" of type "list<str>" set to wrong type'
            )

    @property
    def industry(self):
        """ """
        return self._industry

    @industry.setter
    def industry(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._industry = value
        else:
            raise TypeError(
                'Property "industry" of type "list<str>" set to wrong type'
            )

    @property
    def isSystemIntegrator(self):
        """ """
        return self._isSystemIntegrator

    @isSystemIntegrator.setter
    def isSystemIntegrator(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isSystemIntegrator = value
        else:
            raise TypeError(
                'Property "isSystemIntegrator" of type "list<bool>" set to wr'
                'ong type'
            )

    @property
    def lastName(self):
        """ """
        return self._lastName

    @lastName.setter
    def lastName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastName = value
        else:
            raise TypeError(
                'Property "lastName" of type "list<str>" set to wrong type'
            )

    @property
    def phoneNumber(self):
        """ """
        return self._phoneNumber

    @phoneNumber.setter
    def phoneNumber(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._phoneNumber = value
        else:
            raise TypeError(
                'Property "phoneNumber" of type "list<str>" set to wrong type'
            )

    @property
    def role(self):
        """ """
        return self._role

    @role.setter
    def role(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._role = value
        else:
            raise TypeError(
                'Property "role" of type "list<str>" set to wrong type'
            )

    @property
    def state(self):
        """ """
        return self._state

    @state.setter
    def state(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._state = value
        else:
            raise TypeError(
                'Property "state" of type "list<str>" set to wrong type'
            )

    @property
    def zipCode(self):
        """ """
        return self._zipCode

    @zipCode.setter
    def zipCode(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._zipCode = value
        else:
            raise TypeError(
                'Property "zipCode" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._addressLine1 is not None:
            result["addressLine1"] = \
                self._addressLine1
        if self._addressLine2 is not None:
            result["addressLine2"] = \
                self._addressLine2
        if self._city is not None:
            result["city"] = \
                self._city
        if self._companyName is not None:
            result["companyName"] = \
                self._companyName
        if self._countryISO is not None:
            result["countryISO"] = \
                self._countryISO
        if self._countryName is not None:
            result["countryName"] = \
                self._countryName
        if self._email is not None:
            result["email"] = \
                self._email
        if self._firstName is not None:
            result["firstName"] = \
                self._firstName
        if self._industry is not None:
            result["industry"] = \
                self._industry
        if self._isSystemIntegrator is not None:
            result["isSystemIntegrator"] = \
                self._isSystemIntegrator
        if self._lastName is not None:
            result["lastName"] = \
                self._lastName
        if self._phoneNumber is not None:
            result["phoneNumber"] = \
                self._phoneNumber
        if self._role is not None:
            result["role"] = \
                self._role
        if self._state is not None:
            result["state"] = \
                self._state
        if self._zipCode is not None:
            result["zipCode"] = \
                self._zipCode
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._companyName is not None
            and
            not re.match(
                r"^[^\\\"\\\[]*$",
                 self._companyName)):
            raise ValueError(
                "BusinessContact.companyName: " + str(self._companyName) + 
                " doesnt match requirement: pattern: ^[^\\\"\\\[]*$")
        if (self._firstName is not None
            and
            not re.match(
                r"(^[a-zA-Z'\-]*$)",
                 self._firstName)):
            raise ValueError(
                "BusinessContact.firstName: " + str(self._firstName) + 
                " doesnt match requirement: pattern: (^[a-zA-Z'\-]*$)")
        if (self._lastName is not None
            and
            not re.match(
                r"(^[a-zA-Z'\-]*$)",
                 self._lastName)):
            raise ValueError(
                "BusinessContact.lastName: " + str(self._lastName) + 
                " doesnt match requirement: pattern: (^[a-zA-Z'\-]*$)")
        return True
    

