"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AzureMarketplaceSubscriptionUser(object):
    """Subscription User Object in AzureMarketplace-webhook-event"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.emailId = (
            None if not fromDict or propDict.get(
                "emailId"
            ) is None
            else propDict["emailId"])
        self.objectId = (
            None if not fromDict or propDict.get(
                "objectId"
            ) is None
            else propDict["objectId"])
        self.puid = (
            None if not fromDict or propDict.get(
                "puid"
            ) is None
            else propDict["puid"])
        self.tenantId = (
            None if not fromDict or propDict.get(
                "tenantId"
            ) is None
            else propDict["tenantId"])

    @property
    def emailId(self):
        """str: email address of the user"""
        return self._emailId

    @emailId.setter
    def emailId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._emailId = value
        else:
            raise TypeError(
                'Property "emailId" of type "list<str>" set to wrong type'
            )

    @property
    def objectId(self):
        """str: object id of the user"""
        return self._objectId

    @objectId.setter
    def objectId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._objectId = value
        else:
            raise TypeError(
                'Property "objectId" of type "list<str>" set to wrong type'
            )

    @property
    def puid(self):
        """str: id of the user"""
        return self._puid

    @puid.setter
    def puid(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._puid = value
        else:
            raise TypeError(
                'Property "puid" of type "list<str>" set to wrong type'
            )

    @property
    def tenantId(self):
        """str: tenant id of the user"""
        return self._tenantId

    @tenantId.setter
    def tenantId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._tenantId = value
        else:
            raise TypeError(
                'Property "tenantId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._emailId is not None:
            result["emailId"] = \
                self._emailId
        if self._objectId is not None:
            result["objectId"] = \
                self._objectId
        if self._puid is not None:
            result["puid"] = \
                self._puid
        if self._tenantId is not None:
            result["tenantId"] = \
                self._tenantId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

