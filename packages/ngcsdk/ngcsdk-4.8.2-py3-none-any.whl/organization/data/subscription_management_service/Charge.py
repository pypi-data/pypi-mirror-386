"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Pricing import Pricing

# Unused import over optimization prevention
str(repr(Pricing))


if sys.version_info > (3,):
    long = int
    unicode = str

class Charge(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.billCycleType = (
            None if not fromDict or propDict.get(
                "billCycleType"
            ) is None
            else propDict["billCycleType"])
        self.billingDay = (
            None if not fromDict or propDict.get(
                "billingDay"
            ) is None
            else propDict["billingDay"])
        self.billingPeriod = (
            None if not fromDict or propDict.get(
                "billingPeriod"
            ) is None
            else propDict["billingPeriod"])
        self.chargeName = (
            None if not fromDict or propDict.get(
                "chargeName"
            ) is None
            else propDict["chargeName"])
        self.chargeType = (
            None if not fromDict or propDict.get(
                "chargeType"
            ) is None
            else propDict["chargeType"])
        self.pricing = (
            None if not fromDict or propDict.get(
                "pricing"
            ) is None
            else [ Pricing(i)
            for i in propDict["pricing"] ])
        self.productRatePlanChargeSku = (
            None if not fromDict or propDict.get(
                "productRatePlanChargeSku"
            ) is None
            else propDict["productRatePlanChargeSku"])
        self.unitOfMeasure = (
            None if not fromDict or propDict.get(
                "unitOfMeasure"
            ) is None
            else propDict["unitOfMeasure"])

    @property
    def billCycleType(self):
        """ """
        return self._billCycleType

    @billCycleType.setter
    def billCycleType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._billCycleType = value
        else:
            raise TypeError(
                'Property "billCycleType" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def billingDay(self):
        """ """
        return self._billingDay

    @billingDay.setter
    def billingDay(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._billingDay = value
        else:
            raise TypeError(
                'Property "billingDay" of type "list<int>" set to wrong type'
            )

    @property
    def billingPeriod(self):
        """ """
        return self._billingPeriod

    @billingPeriod.setter
    def billingPeriod(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._billingPeriod = value
        else:
            raise TypeError(
                'Property "billingPeriod" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def chargeName(self):
        """ """
        return self._chargeName

    @chargeName.setter
    def chargeName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._chargeName = value
        else:
            raise TypeError(
                'Property "chargeName" of type "list<str>" set to wrong type'
            )

    @property
    def chargeType(self):
        """ """
        return self._chargeType

    @chargeType.setter
    def chargeType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._chargeType = value
        else:
            raise TypeError(
                'Property "chargeType" of type "list<str>" set to wrong type'
            )

    @property
    def pricing(self):
        """ """
        return self._pricing

    @pricing.setter
    def pricing(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._pricing = value
        else:
            raise TypeError(
                'Property "pricing" of type "list<Pricing>" set to wrong type'
            )

    @property
    def productRatePlanChargeSku(self):
        """ """
        return self._productRatePlanChargeSku

    @productRatePlanChargeSku.setter
    def productRatePlanChargeSku(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productRatePlanChargeSku = value
        else:
            raise TypeError(
                'Property "productRatePlanChargeSku" of type "list<str>" set '
                'to wrong type'
            )

    @property
    def unitOfMeasure(self):
        """ """
        return self._unitOfMeasure

    @unitOfMeasure.setter
    def unitOfMeasure(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._unitOfMeasure = value
        else:
            raise TypeError(
                'Property "unitOfMeasure" of type "list<str>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._billCycleType is not None:
            result["billCycleType"] = \
                self._billCycleType
        if self._billingDay is not None:
            result["billingDay"] = \
                self._billingDay
        if self._billingPeriod is not None:
            result["billingPeriod"] = \
                self._billingPeriod
        if self._chargeName is not None:
            result["chargeName"] = \
                self._chargeName
        if self._chargeType is not None:
            result["chargeType"] = \
                self._chargeType
        if self._pricing:
            result["pricing"] = [
                i.toDict() for i in self._pricing 
            ] if self._pricing else []
        if self._productRatePlanChargeSku is not None:
            result["productRatePlanChargeSku"] = \
                self._productRatePlanChargeSku
        if self._unitOfMeasure is not None:
            result["unitOfMeasure"] = \
                self._unitOfMeasure
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._pricing is not None):
            for obj in self._pricing:
                if (obj is not None): obj.isValid()
        return True
    

