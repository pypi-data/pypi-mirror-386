"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class CreateOrderRequest(object):
    """Create order request object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.productName = (
            None if not fromDict or propDict.get(
                "productName"
            ) is None
            else propDict["productName"])
        self.productRatePlanSku = (
            None if not fromDict or propDict.get(
                "productRatePlanSku"
            ) is None
            else propDict["productRatePlanSku"])
        self.quantity = (
            None if not fromDict or propDict.get(
                "quantity"
            ) is None
            else propDict["quantity"])

    @property
    def productName(self):
        """str: name of the product"""
        return self._productName

    @productName.setter
    def productName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productName = value
        else:
            raise TypeError(
                'Property "productName" of type "list<str>" set to wrong type'
            )

    @property
    def productRatePlanSku(self):
        """str: product rate plan sku of the product"""
        return self._productRatePlanSku

    @productRatePlanSku.setter
    def productRatePlanSku(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productRatePlanSku = value
        else:
            raise TypeError(
                'Property "productRatePlanSku" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def quantity(self):
        """int: quantity selected for quantity based products"""
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._quantity = value
        else:
            raise TypeError(
                'Property "quantity" of type "list<int>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._productName is not None:
            result["productName"] = \
                self._productName
        if self._productRatePlanSku is not None:
            result["productRatePlanSku"] = \
                self._productRatePlanSku
        if self._quantity is not None:
            result["quantity"] = \
                self._quantity
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._productName is None:
            raise ValueError(
                "CreateOrderRequest.productName doesnt match requirement:" 
                "required: True"
            )
        if self._productRatePlanSku is None:
            raise ValueError(
                "CreateOrderRequest.productRatePlanSku doesnt match requirement:" 
                "required: True"
            )
        return True
    

