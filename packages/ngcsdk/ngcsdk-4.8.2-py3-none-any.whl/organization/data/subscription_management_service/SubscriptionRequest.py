"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SubscriptionRequestStatusEnum import SubscriptionRequestStatusEnum
from .SubscriptionRequestTermUnitEnum import SubscriptionRequestTermUnitEnum

# Unused import over optimization prevention
str(repr(SubscriptionRequestTermUnitEnum))
str(repr(SubscriptionRequestStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class SubscriptionRequest(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.autoRenew = (
            None if not fromDict or propDict.get(
                "autoRenew"
            ) is None
            else propDict["autoRenew"])
        self.doesCallerHaveWriteAccess = (
            None if not fromDict or propDict.get(
                "doesCallerHaveWriteAccess"
            ) is None
            else propDict["doesCallerHaveWriteAccess"])
        self.email = (
            None if not fromDict or propDict.get(
                "email"
            ) is None
            else propDict["email"])
        self.expirationDate = (
            None if not fromDict or propDict.get(
                "expirationDate"
            ) is None
            else propDict["expirationDate"])
        self.offerId = (
            None if not fromDict or propDict.get(
                "offerId"
            ) is None
            else propDict["offerId"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.planId = (
            None if not fromDict or propDict.get(
                "planId"
            ) is None
            else propDict["planId"])
        self.productName = (
            None if not fromDict or propDict.get(
                "productName"
            ) is None
            else propDict["productName"])
        self.quantity = (
            None if not fromDict or propDict.get(
                "quantity"
            ) is None
            else propDict["quantity"])
        self.requestDate = (
            None if not fromDict or propDict.get(
                "requestDate"
            ) is None
            else propDict["requestDate"])
        self.requestId = (
            None if not fromDict or propDict.get(
                "requestId"
            ) is None
            else propDict["requestId"])
        self.retailer = (
            None if not fromDict or propDict.get(
                "retailer"
            ) is None
            else propDict["retailer"])
        self.startDate = (
            None if not fromDict or propDict.get(
                "startDate"
            ) is None
            else propDict["startDate"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.subscriptionId = (
            None if not fromDict or propDict.get(
                "subscriptionId"
            ) is None
            else propDict["subscriptionId"])
        self.termUnit = (
            None if not fromDict or propDict.get(
                "termUnit"
            ) is None
            else propDict["termUnit"])
        self.updatedDate = (
            None if not fromDict or propDict.get(
                "updatedDate"
            ) is None
            else propDict["updatedDate"])
        self.updaterId = (
            None if not fromDict or propDict.get(
                "updaterId"
            ) is None
            else propDict["updaterId"])
        self.updaterName = (
            None if not fromDict or propDict.get(
                "updaterName"
            ) is None
            else propDict["updaterName"])
        self.userId = (
            None if not fromDict or propDict.get(
                "userId"
            ) is None
            else propDict["userId"])

    @property
    def autoRenew(self):
        """bool: if the requested subscription is autoRenewable or not"""
        return self._autoRenew

    @autoRenew.setter
    def autoRenew(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._autoRenew = value
        else:
            raise TypeError(
                'Property "autoRenew" of type "list<bool>" set to wrong type'
            )

    @property
    def doesCallerHaveWriteAccess(self):
        """bool: does caller has write permission for this subscription reques
        t"""
        return self._doesCallerHaveWriteAccess

    @doesCallerHaveWriteAccess.setter
    def doesCallerHaveWriteAccess(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._doesCallerHaveWriteAccess = value
        else:
            raise TypeError(
                'Property "doesCallerHaveWriteAccess" of type "list<bool>" se'
                't to wrong type'
            )

    @property
    def email(self):
        """str: email of the customer in CSP marketplace"""
        return self._email

    @email.setter
    def email(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._email = value
        else:
            raise TypeError(
                'Property "email" of type "list<str>" set to wrong type'
            )

    @property
    def expirationDate(self):
        """str: expiration date timestamp for the requested subscription"""
        return self._expirationDate

    @expirationDate.setter
    def expirationDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._expirationDate = value
        else:
            raise TypeError(
                'Property "expirationDate" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def offerId(self):
        """str: id of the CSP marketplace offer"""
        return self._offerId

    @offerId.setter
    def offerId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._offerId = value
        else:
            raise TypeError(
                'Property "offerId" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: name of the org this request belongs to"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def planId(self):
        """str: plan id of the CSP marketplace offer"""
        return self._planId

    @planId.setter
    def planId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._planId = value
        else:
            raise TypeError(
                'Property "planId" of type "list<str>" set to wrong type'
            )

    @property
    def productName(self):
        """str: name of the NGC product"""
        return self._productName

    @productName.setter
    def productName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productName = value
        else:
            raise TypeError(
                'Property "productName" of type "list<str>" set to wrong type'
            )

    @property
    def quantity(self):
        """int: quantity in the subscription request"""
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._quantity = value
        else:
            raise TypeError(
                'Property "quantity" of type "list<int>" set to wrong type'
            )

    @property
    def requestDate(self):
        """str: request date timestamp of the subscription request"""
        return self._requestDate

    @requestDate.setter
    def requestDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requestDate = value
        else:
            raise TypeError(
                'Property "requestDate" of type "list<str>" set to wrong type'
            )

    @property
    def requestId(self):
        """str: id of the subscription request"""
        return self._requestId

    @requestId.setter
    def requestId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requestId = value
        else:
            raise TypeError(
                'Property "requestId" of type "list<str>" set to wrong type'
            )

    @property
    def retailer(self):
        """str: name of the retailer"""
        return self._retailer

    @retailer.setter
    def retailer(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._retailer = value
        else:
            raise TypeError(
                'Property "retailer" of type "list<str>" set to wrong type'
            )

    @property
    def startDate(self):
        """str: start date timestamp for the requested subscription"""
        return self._startDate

    @startDate.setter
    def startDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._startDate = value
        else:
            raise TypeError(
                'Property "startDate" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """SubscriptionRequestStatusEnum: All possible status enums for subscr
        iption request"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<SubscriptionRequestStatusEnu'
                'm>" set to wrong type'
            )

    @property
    def subscriptionId(self):
        """str: id of ngc subscription which created from this request"""
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subscriptionId = value
        else:
            raise TypeError(
                'Property "subscriptionId" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def termUnit(self):
        """SubscriptionRequestTermUnitEnum: All possible term unit enums for s
        ubscription request"""
        return self._termUnit

    @termUnit.setter
    def termUnit(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._termUnit = value
        else:
            raise TypeError(
                'Property "termUnit" of type "list<SubscriptionRequestTermUni'
                'tEnum>" set to wrong type'
            )

    @property
    def updatedDate(self):
        """str: last updated date timestamp of the subscription request"""
        return self._updatedDate

    @updatedDate.setter
    def updatedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updatedDate = value
        else:
            raise TypeError(
                'Property "updatedDate" of type "list<str>" set to wrong type'
            )

    @property
    def updaterId(self):
        """str: user starfleet id of the updater"""
        return self._updaterId

    @updaterId.setter
    def updaterId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updaterId = value
        else:
            raise TypeError(
                'Property "updaterId" of type "list<str>" set to wrong type'
            )

    @property
    def updaterName(self):
        """str: user name of the updater"""
        return self._updaterName

    @updaterName.setter
    def updaterName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._updaterName = value
        else:
            raise TypeError(
                'Property "updaterName" of type "list<str>" set to wrong type'
            )

    @property
    def userId(self):
        """str: id of the customer in CSP marketplace"""
        return self._userId

    @userId.setter
    def userId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._userId = value
        else:
            raise TypeError(
                'Property "userId" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._autoRenew is not None:
            result["autoRenew"] = \
                self._autoRenew
        if self._doesCallerHaveWriteAccess is not None:
            result["doesCallerHaveWriteAccess"] = \
                self._doesCallerHaveWriteAccess
        if self._email is not None:
            result["email"] = \
                self._email
        if self._expirationDate is not None:
            result["expirationDate"] = \
                self._expirationDate
        if self._offerId is not None:
            result["offerId"] = \
                self._offerId
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._planId is not None:
            result["planId"] = \
                self._planId
        if self._productName is not None:
            result["productName"] = \
                self._productName
        if self._quantity is not None:
            result["quantity"] = \
                self._quantity
        if self._requestDate is not None:
            result["requestDate"] = \
                self._requestDate
        if self._requestId is not None:
            result["requestId"] = \
                self._requestId
        if self._retailer is not None:
            result["retailer"] = \
                self._retailer
        if self._startDate is not None:
            result["startDate"] = \
                self._startDate
        if self._status is not None:
            result["status"] = \
                self._status
        if self._subscriptionId is not None:
            result["subscriptionId"] = \
                self._subscriptionId
        if self._termUnit is not None:
            result["termUnit"] = \
                self._termUnit
        if self._updatedDate is not None:
            result["updatedDate"] = \
                self._updatedDate
        if self._updaterId is not None:
            result["updaterId"] = \
                self._updaterId
        if self._updaterName is not None:
            result["updaterName"] = \
                self._updaterName
        if self._userId is not None:
            result["userId"] = \
                self._userId
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

