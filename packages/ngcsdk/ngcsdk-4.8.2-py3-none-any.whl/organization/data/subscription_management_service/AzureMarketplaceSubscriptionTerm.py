"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class AzureMarketplaceSubscriptionTerm(object):
    """Subscription Term Object in AzureMarketplace-webhook-event"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.chargeDuration = (
            None if not fromDict or propDict.get(
                "chargeDuration"
            ) is None
            else propDict["chargeDuration"])
        self.endDate = (
            None if not fromDict or propDict.get(
                "endDate"
            ) is None
            else propDict["endDate"])
        self.startDate = (
            None if not fromDict or propDict.get(
                "startDate"
            ) is None
            else propDict["startDate"])
        self.termUnit = (
            None if not fromDict or propDict.get(
                "termUnit"
            ) is None
            else propDict["termUnit"])

    @property
    def chargeDuration(self):
        """str: chargeDuration of the subscription"""
        return self._chargeDuration

    @chargeDuration.setter
    def chargeDuration(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._chargeDuration = value
        else:
            raise TypeError(
                'Property "chargeDuration" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def endDate(self):
        """str: endDate timestamp id of the subscription"""
        return self._endDate

    @endDate.setter
    def endDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._endDate = value
        else:
            raise TypeError(
                'Property "endDate" of type "list<str>" set to wrong type'
            )

    @property
    def startDate(self):
        """str: startDate timestamp of the subscription"""
        return self._startDate

    @startDate.setter
    def startDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._startDate = value
        else:
            raise TypeError(
                'Property "startDate" of type "list<str>" set to wrong type'
            )

    @property
    def termUnit(self):
        """str: termUnit of the subscription"""
        return self._termUnit

    @termUnit.setter
    def termUnit(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._termUnit = value
        else:
            raise TypeError(
                'Property "termUnit" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._chargeDuration is not None:
            result["chargeDuration"] = \
                self._chargeDuration
        if self._endDate is not None:
            result["endDate"] = \
                self._endDate
        if self._startDate is not None:
            result["startDate"] = \
                self._startDate
        if self._termUnit is not None:
            result["termUnit"] = \
                self._termUnit
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

