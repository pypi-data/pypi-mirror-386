"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AzureMarketplaceSubscription import AzureMarketplaceSubscription

# Unused import over optimization prevention
str(repr(AzureMarketplaceSubscription))


if sys.version_info > (3,):
    long = int
    unicode = str

class AzureMarketplaceSubscriptionNotificationEvent(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.action = (
            None if not fromDict or propDict.get(
                "action"
            ) is None
            else propDict["action"])
        self.activityId = (
            None if not fromDict or propDict.get(
                "activityId"
            ) is None
            else propDict["activityId"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.offerId = (
            None if not fromDict or propDict.get(
                "offerId"
            ) is None
            else propDict["offerId"])
        self.operationRequestSource = (
            None if not fromDict or propDict.get(
                "operationRequestSource"
            ) is None
            else propDict["operationRequestSource"])
        self.planId = (
            None if not fromDict or propDict.get(
                "planId"
            ) is None
            else propDict["planId"])
        self.publisherId = (
            None if not fromDict or propDict.get(
                "publisherId"
            ) is None
            else propDict["publisherId"])
        self.purchaseToken = (
            None if not fromDict or propDict.get(
                "purchaseToken"
            ) is None
            else propDict["purchaseToken"])
        self.quantity = (
            None if not fromDict or propDict.get(
                "quantity"
            ) is None
            else propDict["quantity"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.subscription = (
            None if not fromDict or propDict.get(
                "subscription"
            ) is None
            else propDict["subscription"])
        self.subscriptionId = (
            None if not fromDict or propDict.get(
                "subscriptionId"
            ) is None
            else propDict["subscriptionId"])
        self.timeStamp = (
            None if not fromDict or propDict.get(
                "timeStamp"
            ) is None
            else propDict["timeStamp"])

    @property
    def action(self):
        """str: action of the event"""
        return self._action

    @action.setter
    def action(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._action = value
        else:
            raise TypeError(
                'Property "action" of type "list<str>" set to wrong type'
            )

    @property
    def activityId(self):
        """str: id of the activity"""
        return self._activityId

    @activityId.setter
    def activityId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._activityId = value
        else:
            raise TypeError(
                'Property "activityId" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """str: id of the event"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def offerId(self):
        """str: id of the Azure marketplace offer"""
        return self._offerId

    @offerId.setter
    def offerId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._offerId = value
        else:
            raise TypeError(
                'Property "offerId" of type "list<str>" set to wrong type'
            )

    @property
    def operationRequestSource(self):
        """str: source of the operation"""
        return self._operationRequestSource

    @operationRequestSource.setter
    def operationRequestSource(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._operationRequestSource = value
        else:
            raise TypeError(
                'Property "operationRequestSource" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def planId(self):
        """str: plan id of the Azure marketplace offer"""
        return self._planId

    @planId.setter
    def planId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._planId = value
        else:
            raise TypeError(
                'Property "planId" of type "list<str>" set to wrong type'
            )

    @property
    def publisherId(self):
        """str: id of the Azure marketplace publisher"""
        return self._publisherId

    @publisherId.setter
    def publisherId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._publisherId = value
        else:
            raise TypeError(
                'Property "publisherId" of type "list<str>" set to wrong type'
            )

    @property
    def purchaseToken(self):
        """str: purchase token"""
        return self._purchaseToken

    @purchaseToken.setter
    def purchaseToken(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._purchaseToken = value
        else:
            raise TypeError(
                'Property "purchaseToken" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def quantity(self):
        """int: quantity in the Azure marketplace subscription"""
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._quantity = value
        else:
            raise TypeError(
                'Property "quantity" of type "list<int>" set to wrong type'
            )

    @property
    def status(self):
        """str: status of the action"""
        return self._status

    @status.setter
    def status(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<str>" set to wrong type'
            )

    @property
    def subscription(self):
        """AzureMarketplaceSubscription: Subscription Object in AzureMarketpla
        ce-webhook-event"""
        return self._subscription

    @subscription.setter
    def subscription(self, value):
        if value is not None and not isinstance(value, AzureMarketplaceSubscription):
            value = AzureMarketplaceSubscription(value)
        if (value is None) or isinstance(value, AzureMarketplaceSubscription):
            self._subscription = value
        else:
            raise TypeError(
                'Property "subscription" of type "list<AzureMarketplaceSubscr'
                'iption>" set to wrong type'
            )

    @property
    def subscriptionId(self):
        """str: id of the subscription in Azure marketplace"""
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subscriptionId = value
        else:
            raise TypeError(
                'Property "subscriptionId" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def timeStamp(self):
        """str: timestamp of the event"""
        return self._timeStamp

    @timeStamp.setter
    def timeStamp(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._timeStamp = value
        else:
            raise TypeError(
                'Property "timeStamp" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._action is not None:
            result["action"] = \
                self._action
        if self._activityId is not None:
            result["activityId"] = \
                self._activityId
        if self._id is not None:
            result["id"] = \
                self._id
        if self._offerId is not None:
            result["offerId"] = \
                self._offerId
        if self._operationRequestSource is not None:
            result["operationRequestSource"] = \
                self._operationRequestSource
        if self._planId is not None:
            result["planId"] = \
                self._planId
        if self._publisherId is not None:
            result["publisherId"] = \
                self._publisherId
        if self._purchaseToken is not None:
            result["purchaseToken"] = \
                self._purchaseToken
        if self._quantity is not None:
            result["quantity"] = \
                self._quantity
        if self._status is not None:
            result["status"] = \
                self._status
        if self._subscription:
            result["subscription"] = \
                self._subscription.toDict() if self._subscription is not None else None
        if self._subscriptionId is not None:
            result["subscriptionId"] = \
                self._subscriptionId
        if self._timeStamp is not None:
            result["timeStamp"] = \
                self._timeStamp
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._subscription is not None): self._subscription.isValid()
        return True
    

