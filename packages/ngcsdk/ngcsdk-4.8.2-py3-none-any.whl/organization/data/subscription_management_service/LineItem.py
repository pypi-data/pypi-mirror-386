"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .OrderActionTypeEnum import OrderActionTypeEnum
from .Charge import Charge
from .LineItemTypeEnum import LineItemTypeEnum

# Unused import over optimization prevention
str(repr(OrderActionTypeEnum))
str(repr(LineItemTypeEnum))
str(repr(Charge))


if sys.version_info > (3,):
    long = int
    unicode = str

class LineItem(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.charges = (
            None if not fromDict or propDict.get(
                "charges"
            ) is None
            else [ Charge(i)
            for i in propDict["charges"] ])
        self.orderActionType = (
            None if not fromDict or propDict.get(
                "orderActionType"
            ) is None
            else propDict["orderActionType"])
        self.productName = (
            None if not fromDict or propDict.get(
                "productName"
            ) is None
            else propDict["productName"])
        self.productRatePlanName = (
            None if not fromDict or propDict.get(
                "productRatePlanName"
            ) is None
            else propDict["productRatePlanName"])
        self.productRatePlanSku = (
            None if not fromDict or propDict.get(
                "productRatePlanSku"
            ) is None
            else propDict["productRatePlanSku"])
        self.quantity = (
            None if not fromDict or propDict.get(
                "quantity"
            ) is None
            else propDict["quantity"])
        self.subscriptionEndDate = (
            None if not fromDict or propDict.get(
                "subscriptionEndDate"
            ) is None
            else propDict["subscriptionEndDate"])
        self.subscriptionStartDate = (
            None if not fromDict or propDict.get(
                "subscriptionStartDate"
            ) is None
            else propDict["subscriptionStartDate"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def charges(self):
        """ """
        return self._charges

    @charges.setter
    def charges(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._charges = value
        else:
            raise TypeError(
                'Property "charges" of type "list<Charge>" set to wrong type'
            )

    @property
    def orderActionType(self):
        """OrderActionTypeEnum: All possible types of order action"""
        return self._orderActionType

    @orderActionType.setter
    def orderActionType(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._orderActionType = value
        else:
            raise TypeError(
                'Property "orderActionType" of type "list<OrderActionTypeEnum'
                '>" set to wrong type'
            )

    @property
    def productName(self):
        """str: name of the product"""
        return self._productName

    @productName.setter
    def productName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productName = value
        else:
            raise TypeError(
                'Property "productName" of type "list<str>" set to wrong type'
            )

    @property
    def productRatePlanName(self):
        """str: product rate plan name of the product"""
        return self._productRatePlanName

    @productRatePlanName.setter
    def productRatePlanName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productRatePlanName = value
        else:
            raise TypeError(
                'Property "productRatePlanName" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def productRatePlanSku(self):
        """str: product rate plan sku of the product"""
        return self._productRatePlanSku

    @productRatePlanSku.setter
    def productRatePlanSku(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productRatePlanSku = value
        else:
            raise TypeError(
                'Property "productRatePlanSku" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def quantity(self):
        """int: quantity of product ordered"""
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._quantity = value
        else:
            raise TypeError(
                'Property "quantity" of type "list<int>" set to wrong type'
            )

    @property
    def subscriptionEndDate(self):
        """str: end date of the subscription"""
        return self._subscriptionEndDate

    @subscriptionEndDate.setter
    def subscriptionEndDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subscriptionEndDate = value
        else:
            raise TypeError(
                'Property "subscriptionEndDate" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def subscriptionStartDate(self):
        """str: start date of the subscription"""
        return self._subscriptionStartDate

    @subscriptionStartDate.setter
    def subscriptionStartDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subscriptionStartDate = value
        else:
            raise TypeError(
                'Property "subscriptionStartDate" of type "list<str>" set to '
                'wrong type'
            )

    @property
    def type(self):
        """LineItemTypeEnum: All possible line item types"""
        return self._type

    @type.setter
    def type(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<LineItemTypeEnum>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._charges:
            result["charges"] = [
                i.toDict() for i in self._charges 
            ] if self._charges else []
        if self._orderActionType is not None:
            result["orderActionType"] = \
                self._orderActionType
        if self._productName is not None:
            result["productName"] = \
                self._productName
        if self._productRatePlanName is not None:
            result["productRatePlanName"] = \
                self._productRatePlanName
        if self._productRatePlanSku is not None:
            result["productRatePlanSku"] = \
                self._productRatePlanSku
        if self._quantity is not None:
            result["quantity"] = \
                self._quantity
        if self._subscriptionEndDate is not None:
            result["subscriptionEndDate"] = \
                self._subscriptionEndDate
        if self._subscriptionStartDate is not None:
            result["subscriptionStartDate"] = \
                self._subscriptionStartDate
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._charges is not None):
            for obj in self._charges:
                if (obj is not None): obj.isValid()
        return True
    

