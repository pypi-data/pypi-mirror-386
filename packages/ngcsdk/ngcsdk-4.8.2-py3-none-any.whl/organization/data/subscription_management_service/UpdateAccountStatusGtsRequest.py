"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class UpdateAccountStatusGtsRequest(object):
    """Request for updating account status for redemption from GTS"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.orderNo = (
            None if not fromDict or propDict.get(
                "orderNo"
            ) is None
            else propDict["orderNo"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.statusCode = (
            None if not fromDict or propDict.get(
                "statusCode"
            ) is None
            else propDict["statusCode"])

    @property
    def orderNo(self):
        """ """
        return self._orderNo

    @orderNo.setter
    def orderNo(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orderNo = value
        else:
            raise TypeError(
                'Property "orderNo" of type "list<str>" set to wrong type'
            )

    @property
    def status(self):
        """ """
        return self._status

    @status.setter
    def status(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<str>" set to wrong type'
            )

    @property
    def statusCode(self):
        """ """
        return self._statusCode

    @statusCode.setter
    def statusCode(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._statusCode = value
        else:
            raise TypeError(
                'Property "statusCode" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._orderNo is not None:
            result["orderNo"] = \
                self._orderNo
        if self._status is not None:
            result["status"] = \
                self._status
        if self._statusCode is not None:
            result["statusCode"] = \
                self._statusCode
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if self._orderNo is None:
            raise ValueError(
                "UpdateAccountStatusGtsRequest.orderNo doesnt match requirement:" 
                "required: True"
            )
        if self._status is None:
            raise ValueError(
                "UpdateAccountStatusGtsRequest.status doesnt match requirement:" 
                "required: True"
            )
        if self._statusCode is None:
            raise ValueError(
                "UpdateAccountStatusGtsRequest.statusCode doesnt match requirement:" 
                "required: True"
            )
        return True
    

