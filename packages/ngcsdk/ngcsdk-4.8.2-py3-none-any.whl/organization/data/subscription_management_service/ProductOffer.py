"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class ProductOffer(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.canRedeem = (
            None if not fromDict or propDict.get(
                "canRedeem"
            ) is None
            else propDict["canRedeem"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.imageUrl = (
            None if not fromDict or propDict.get(
                "imageUrl"
            ) is None
            else propDict["imageUrl"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])

    @property
    def canRedeem(self):
        """ """
        return self._canRedeem

    @canRedeem.setter
    def canRedeem(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canRedeem = value
        else:
            raise TypeError(
                'Property "canRedeem" of type "list<bool>" set to wrong type'
            )

    @property
    def displayName(self):
        """str: display name of the product offer"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def imageUrl(self):
        """str: link of the image for the offer"""
        return self._imageUrl

    @imageUrl.setter
    def imageUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._imageUrl = value
        else:
            raise TypeError(
                'Property "imageUrl" of type "list<str>" set to wrong type'
            )

    @property
    def name(self):
        """str: name of the product offer"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def shortDescription(self):
        """str: short description of the product offer"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    def toDict(self):
        result = {}
        if self._canRedeem is not None:
            result["canRedeem"] = \
                self._canRedeem
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._imageUrl is not None:
            result["imageUrl"] = \
                self._imageUrl
        if self._name is not None:
            result["name"] = \
                self._name
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

