"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .PriceFormatEnum import PriceFormatEnum

# Unused import over optimization prevention
str(repr(PriceFormatEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Pricing(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.currency = (
            None if not fromDict or propDict.get(
                "currency"
            ) is None
            else propDict["currency"])
        self.discountAmount = (
            None if not fromDict or propDict.get(
                "discountAmount"
            ) is None
            else propDict["discountAmount"])
        self.discountPercentage = (
            None if not fromDict or propDict.get(
                "discountPercentage"
            ) is None
            else propDict["discountPercentage"])
        self.endingUnit = (
            None if not fromDict or propDict.get(
                "endingUnit"
            ) is None
            else propDict["endingUnit"])
        self.overagePrice = (
            None if not fromDict or propDict.get(
                "overagePrice"
            ) is None
            else propDict["overagePrice"])
        self.price = (
            None if not fromDict or propDict.get(
                "price"
            ) is None
            else propDict["price"])
        self.priceFormat = (
            None if not fromDict or propDict.get(
                "priceFormat"
            ) is None
            else propDict["priceFormat"])
        self.startingUnit = (
            None if not fromDict or propDict.get(
                "startingUnit"
            ) is None
            else propDict["startingUnit"])

    @property
    def currency(self):
        """str: the currency that the price is displayed in"""
        return self._currency

    @currency.setter
    def currency(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._currency = value
        else:
            raise TypeError(
                'Property "currency" of type "list<str>" set to wrong type'
            )

    @property
    def discountAmount(self):
        """float: the amount discounted from the price"""
        return self._discountAmount

    @discountAmount.setter
    def discountAmount(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._discountAmount = value
        else:
            raise TypeError(
                'Property "discountAmount" of type "list<float>" set to wrong'
                ' type'
            )

    @property
    def discountPercentage(self):
        """float: the percentage discount on the price"""
        return self._discountPercentage

    @discountPercentage.setter
    def discountPercentage(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._discountPercentage = value
        else:
            raise TypeError(
                'Property "discountPercentage" of type "list<float>" set to w'
                'rong type'
            )

    @property
    def endingUnit(self):
        """float: the ending unit of the price"""
        return self._endingUnit

    @endingUnit.setter
    def endingUnit(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._endingUnit = value
        else:
            raise TypeError(
                'Property "endingUnit" of type "list<float>" set to wrong typ'
                'e'
            )

    @property
    def overagePrice(self):
        """float: the overage price being charged"""
        return self._overagePrice

    @overagePrice.setter
    def overagePrice(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._overagePrice = value
        else:
            raise TypeError(
                'Property "overagePrice" of type "list<float>" set to wrong t'
                'ype'
            )

    @property
    def price(self):
        """float: the price being charged"""
        return self._price

    @price.setter
    def price(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._price = value
        else:
            raise TypeError(
                'Property "price" of type "list<float>" set to wrong type'
            )

    @property
    def priceFormat(self):
        """PriceFormatEnum: All possible price format types"""
        return self._priceFormat

    @priceFormat.setter
    def priceFormat(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._priceFormat = value
        else:
            raise TypeError(
                'Property "priceFormat" of type "list<PriceFormatEnum>" set t'
                'o wrong type'
            )

    @property
    def startingUnit(self):
        """float: the starting unit of the price"""
        return self._startingUnit

    @startingUnit.setter
    def startingUnit(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._startingUnit = value
        else:
            raise TypeError(
                'Property "startingUnit" of type "list<float>" set to wrong t'
                'ype'
            )

    def toDict(self):
        result = {}
        if self._currency is not None:
            result["currency"] = \
                self._currency
        if self._discountAmount is not None:
            result["discountAmount"] = \
                self._discountAmount
        if self._discountPercentage is not None:
            result["discountPercentage"] = \
                self._discountPercentage
        if self._endingUnit is not None:
            result["endingUnit"] = \
                self._endingUnit
        if self._overagePrice is not None:
            result["overagePrice"] = \
                self._overagePrice
        if self._price is not None:
            result["price"] = \
                self._price
        if self._priceFormat is not None:
            result["priceFormat"] = \
                self._priceFormat
        if self._startingUnit is not None:
            result["startingUnit"] = \
                self._startingUnit
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

