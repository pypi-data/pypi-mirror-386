"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Product import Product

# Unused import over optimization prevention
str(repr(Product))


if sys.version_info > (3,):
    long = int
    unicode = str

class CreateProductRequest(object):
    """Create product request object"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.product = (
            None if not fromDict or propDict.get(
                "product"
            ) is None
            else propDict["product"])

    @property
    def product(self):
        """ """
        return self._product

    @product.setter
    def product(self, value):
        if value is not None and not isinstance(value, Product):
            value = Product(value)
        if (value is None) or isinstance(value, Product):
            self._product = value
        else:
            raise TypeError(
                'Property "product" of type "list<Product>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._product:
            result["product"] = \
                self._product.toDict() if self._product is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._product is not None): self._product.isValid()
        return True
    

