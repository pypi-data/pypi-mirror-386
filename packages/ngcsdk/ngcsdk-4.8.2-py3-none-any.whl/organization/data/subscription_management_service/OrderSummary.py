"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class OrderSummary(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.currency = (
            None if not fromDict or propDict.get(
                "currency"
            ) is None
            else propDict["currency"])
        self.refundAmount = (
            None if not fromDict or propDict.get(
                "refundAmount"
            ) is None
            else propDict["refundAmount"])
        self.subtotal = (
            None if not fromDict or propDict.get(
                "subtotal"
            ) is None
            else propDict["subtotal"])
        self.tax = (
            None if not fromDict or propDict.get(
                "tax"
            ) is None
            else propDict["tax"])
        self.taxExclusive = (
            None if not fromDict or propDict.get(
                "taxExclusive"
            ) is None
            else propDict["taxExclusive"])
        self.total = (
            None if not fromDict or propDict.get(
                "total"
            ) is None
            else propDict["total"])

    @property
    def currency(self):
        """str: currency that the order was placed with"""
        return self._currency

    @currency.setter
    def currency(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._currency = value
        else:
            raise TypeError(
                'Property "currency" of type "list<str>" set to wrong type'
            )

    @property
    def refundAmount(self):
        """float: amount refunded in the order"""
        return self._refundAmount

    @refundAmount.setter
    def refundAmount(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._refundAmount = value
        else:
            raise TypeError(
                'Property "refundAmount" of type "list<float>" set to wrong t'
                'ype'
            )

    @property
    def subtotal(self):
        """float: subtotal of the order"""
        return self._subtotal

    @subtotal.setter
    def subtotal(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._subtotal = value
        else:
            raise TypeError(
                'Property "subtotal" of type "list<float>" set to wrong type'
            )

    @property
    def tax(self):
        """float: tax applied to the order"""
        return self._tax

    @tax.setter
    def tax(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._tax = value
        else:
            raise TypeError(
                'Property "tax" of type "list<float>" set to wrong type'
            )

    @property
    def taxExclusive(self):
        """ """
        return self._taxExclusive

    @taxExclusive.setter
    def taxExclusive(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._taxExclusive = value
        else:
            raise TypeError(
                'Property "taxExclusive" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def total(self):
        """float: total cost of the order"""
        return self._total

    @total.setter
    def total(self, value):
        if value is not None and not isinstance(value, float):
            value = float(value)
        if (value is None) or isinstance(value, float):
            self._total = value
        else:
            raise TypeError(
                'Property "total" of type "list<float>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._currency is not None:
            result["currency"] = \
                self._currency
        if self._refundAmount is not None:
            result["refundAmount"] = \
                self._refundAmount
        if self._subtotal is not None:
            result["subtotal"] = \
                self._subtotal
        if self._tax is not None:
            result["tax"] = \
                self._tax
        if self._taxExclusive is not None:
            result["taxExclusive"] = \
                self._taxExclusive
        if self._total is not None:
            result["total"] = \
                self._total
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

