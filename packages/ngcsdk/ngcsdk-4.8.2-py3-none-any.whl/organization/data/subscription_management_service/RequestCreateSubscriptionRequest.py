"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types

# Unused import over optimization prevention


if sys.version_info > (3,):
    long = int
    unicode = str

class RequestCreateSubscriptionRequest(object):
    """Request of request to create subscription API"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.retailer = (
            None if not fromDict or propDict.get(
                "retailer"
            ) is None
            else propDict["retailer"])
        self.subscriptionToken = (
            None if not fromDict or propDict.get(
                "subscriptionToken"
            ) is None
            else propDict["subscriptionToken"])

    @property
    def retailer(self):
        """str: name of the retailer"""
        return self._retailer

    @retailer.setter
    def retailer(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._retailer = value
        else:
            raise TypeError(
                'Property "retailer" of type "list<str>" set to wrong type'
            )

    @property
    def subscriptionToken(self):
        """str: a token which can be used to exchange subscription details fro
        m CSP"""
        return self._subscriptionToken

    @subscriptionToken.setter
    def subscriptionToken(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subscriptionToken = value
        else:
            raise TypeError(
                'Property "subscriptionToken" of type "list<str>" set to wron'
                'g type'
            )

    def toDict(self):
        result = {}
        if self._retailer is not None:
            result["retailer"] = \
                self._retailer
        if self._subscriptionToken is not None:
            result["subscriptionToken"] = \
                self._subscriptionToken
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

