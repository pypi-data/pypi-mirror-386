"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .AzureMarketplaceSubscriptionUser import AzureMarketplaceSubscriptionUser
from .AzureMarketplaceSubscriptionTerm import AzureMarketplaceSubscriptionTerm

# Unused import over optimization prevention
str(repr(AzureMarketplaceSubscriptionUser))
str(repr(AzureMarketplaceSubscriptionTerm))


if sys.version_info > (3,):
    long = int
    unicode = str

class AzureMarketplaceSubscription(object):
    """Subscription Object in AzureMarketplace-webhook-event"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allowedCustomerOperations = (
            None if not fromDict or propDict.get(
                "allowedCustomerOperations"
            ) is None
            else propDict["allowedCustomerOperations"])
        self.autoRenew = (
            None if not fromDict or propDict.get(
                "autoRenew"
            ) is None
            else propDict["autoRenew"])
        self.beneficiary = (
            None if not fromDict or propDict.get(
                "beneficiary"
            ) is None
            else propDict["beneficiary"])
        self.created = (
            None if not fromDict or propDict.get(
                "created"
            ) is None
            else propDict["created"])
        self.id = (
            None if not fromDict or propDict.get(
                "id"
            ) is None
            else propDict["id"])
        self.isFreeTrial = (
            None if not fromDict or propDict.get(
                "isFreeTrial"
            ) is None
            else propDict["isFreeTrial"])
        self.isTest = (
            None if not fromDict or propDict.get(
                "isTest"
            ) is None
            else propDict["isTest"])
        self.lastModified = (
            None if not fromDict or propDict.get(
                "lastModified"
            ) is None
            else propDict["lastModified"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.offerId = (
            None if not fromDict or propDict.get(
                "offerId"
            ) is None
            else propDict["offerId"])
        self.planId = (
            None if not fromDict or propDict.get(
                "planId"
            ) is None
            else propDict["planId"])
        self.publisherId = (
            None if not fromDict or propDict.get(
                "publisherId"
            ) is None
            else propDict["publisherId"])
        self.purchaser = (
            None if not fromDict or propDict.get(
                "purchaser"
            ) is None
            else propDict["purchaser"])
        self.quantity = (
            None if not fromDict or propDict.get(
                "quantity"
            ) is None
            else propDict["quantity"])
        self.saasSubscriptionStatus = (
            None if not fromDict or propDict.get(
                "saasSubscriptionStatus"
            ) is None
            else propDict["saasSubscriptionStatus"])
        self.sandboxType = (
            None if not fromDict or propDict.get(
                "sandboxType"
            ) is None
            else propDict["sandboxType"])
        self.sessionMode = (
            None if not fromDict or propDict.get(
                "sessionMode"
            ) is None
            else propDict["sessionMode"])
        self.term = (
            None if not fromDict or propDict.get(
                "term"
            ) is None
            else propDict["term"])

    @property
    def allowedCustomerOperations(self):
        """list: array of allowed customer operations"""
        return self._allowedCustomerOperations

    @allowedCustomerOperations.setter
    def allowedCustomerOperations(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._allowedCustomerOperations = value
        else:
            raise TypeError(
                'Property "allowedCustomerOperations" of type "list<str>" set'
                ' to wrong type'
            )

    @property
    def autoRenew(self):
        """bool: is auto-renew or not"""
        return self._autoRenew

    @autoRenew.setter
    def autoRenew(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._autoRenew = value
        else:
            raise TypeError(
                'Property "autoRenew" of type "list<bool>" set to wrong type'
            )

    @property
    def beneficiary(self):
        """AzureMarketplaceSubscriptionUser: Subscription User Object in Azure
        Marketplace-webhook-event"""
        return self._beneficiary

    @beneficiary.setter
    def beneficiary(self, value):
        if value is not None and not isinstance(value, AzureMarketplaceSubscriptionUser):
            value = AzureMarketplaceSubscriptionUser(value)
        if (value is None) or isinstance(value, AzureMarketplaceSubscriptionUser):
            self._beneficiary = value
        else:
            raise TypeError(
                'Property "beneficiary" of type "list<AzureMarketplaceSubscri'
                'ptionUser>" set to wrong type'
            )

    @property
    def created(self):
        """str: creation timestamp of the subscription"""
        return self._created

    @created.setter
    def created(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._created = value
        else:
            raise TypeError(
                'Property "created" of type "list<str>" set to wrong type'
            )

    @property
    def id(self):
        """str: id of the azure subscription"""
        return self._id

    @id.setter
    def id(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._id = value
        else:
            raise TypeError(
                'Property "id" of type "list<str>" set to wrong type'
            )

    @property
    def isFreeTrial(self):
        """bool: is free trial or not"""
        return self._isFreeTrial

    @isFreeTrial.setter
    def isFreeTrial(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isFreeTrial = value
        else:
            raise TypeError(
                'Property "isFreeTrial" of type "list<bool>" set to wrong typ'
                'e'
            )

    @property
    def isTest(self):
        """bool: is test subscription or not"""
        return self._isTest

    @isTest.setter
    def isTest(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isTest = value
        else:
            raise TypeError(
                'Property "isTest" of type "list<bool>" set to wrong type'
            )

    @property
    def lastModified(self):
        """str: last modified timestamp of the subscription"""
        return self._lastModified

    @lastModified.setter
    def lastModified(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lastModified = value
        else:
            raise TypeError(
                'Property "lastModified" of type "list<str>" set to wrong typ'
                'e'
            )

    @property
    def name(self):
        """str: name of the azure subscription"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def offerId(self):
        """str: id of the Azure marketplace offer"""
        return self._offerId

    @offerId.setter
    def offerId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._offerId = value
        else:
            raise TypeError(
                'Property "offerId" of type "list<str>" set to wrong type'
            )

    @property
    def planId(self):
        """str: plan id of the Azure marketplace offer"""
        return self._planId

    @planId.setter
    def planId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._planId = value
        else:
            raise TypeError(
                'Property "planId" of type "list<str>" set to wrong type'
            )

    @property
    def publisherId(self):
        """str: publisher id of the azure subscription in Azure marketplace"""
        return self._publisherId

    @publisherId.setter
    def publisherId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._publisherId = value
        else:
            raise TypeError(
                'Property "publisherId" of type "list<str>" set to wrong type'
            )

    @property
    def purchaser(self):
        """AzureMarketplaceSubscriptionUser: Subscription User Object in Azure
        Marketplace-webhook-event"""
        return self._purchaser

    @purchaser.setter
    def purchaser(self, value):
        if value is not None and not isinstance(value, AzureMarketplaceSubscriptionUser):
            value = AzureMarketplaceSubscriptionUser(value)
        if (value is None) or isinstance(value, AzureMarketplaceSubscriptionUser):
            self._purchaser = value
        else:
            raise TypeError(
                'Property "purchaser" of type "list<AzureMarketplaceSubscript'
                'ionUser>" set to wrong type'
            )

    @property
    def quantity(self):
        """int: quantity in the azure subscription"""
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._quantity = value
        else:
            raise TypeError(
                'Property "quantity" of type "list<int>" set to wrong type'
            )

    @property
    def saasSubscriptionStatus(self):
        """str: status of the Azure Marketplace SaaS subscription"""
        return self._saasSubscriptionStatus

    @saasSubscriptionStatus.setter
    def saasSubscriptionStatus(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._saasSubscriptionStatus = value
        else:
            raise TypeError(
                'Property "saasSubscriptionStatus" of type "list<str>" set to'
                ' wrong type'
            )

    @property
    def sandboxType(self):
        """str: sandboxType"""
        return self._sandboxType

    @sandboxType.setter
    def sandboxType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sandboxType = value
        else:
            raise TypeError(
                'Property "sandboxType" of type "list<str>" set to wrong type'
            )

    @property
    def sessionMode(self):
        """str: sessionMode"""
        return self._sessionMode

    @sessionMode.setter
    def sessionMode(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._sessionMode = value
        else:
            raise TypeError(
                'Property "sessionMode" of type "list<str>" set to wrong type'
            )

    @property
    def term(self):
        """AzureMarketplaceSubscriptionTerm: Subscription Term Object in Azure
        Marketplace-webhook-event"""
        return self._term

    @term.setter
    def term(self, value):
        if value is not None and not isinstance(value, AzureMarketplaceSubscriptionTerm):
            value = AzureMarketplaceSubscriptionTerm(value)
        if (value is None) or isinstance(value, AzureMarketplaceSubscriptionTerm):
            self._term = value
        else:
            raise TypeError(
                'Property "term" of type "list<AzureMarketplaceSubscriptionTe'
                'rm>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._allowedCustomerOperations is not None:
            result["allowedCustomerOperations"] = \
                self._allowedCustomerOperations
        if self._autoRenew is not None:
            result["autoRenew"] = \
                self._autoRenew
        if self._beneficiary:
            result["beneficiary"] = \
                self._beneficiary.toDict() if self._beneficiary is not None else None
        if self._created is not None:
            result["created"] = \
                self._created
        if self._id is not None:
            result["id"] = \
                self._id
        if self._isFreeTrial is not None:
            result["isFreeTrial"] = \
                self._isFreeTrial
        if self._isTest is not None:
            result["isTest"] = \
                self._isTest
        if self._lastModified is not None:
            result["lastModified"] = \
                self._lastModified
        if self._name is not None:
            result["name"] = \
                self._name
        if self._offerId is not None:
            result["offerId"] = \
                self._offerId
        if self._planId is not None:
            result["planId"] = \
                self._planId
        if self._publisherId is not None:
            result["publisherId"] = \
                self._publisherId
        if self._purchaser:
            result["purchaser"] = \
                self._purchaser.toDict() if self._purchaser is not None else None
        if self._quantity is not None:
            result["quantity"] = \
                self._quantity
        if self._saasSubscriptionStatus is not None:
            result["saasSubscriptionStatus"] = \
                self._saasSubscriptionStatus
        if self._sandboxType is not None:
            result["sandboxType"] = \
                self._sandboxType
        if self._sessionMode is not None:
            result["sessionMode"] = \
                self._sessionMode
        if self._term:
            result["term"] = \
                self._term.toDict() if self._term is not None else None
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._beneficiary is not None): self._beneficiary.isValid()
        if (self._purchaser is not None): self._purchaser.isValid()
        if (self._term is not None): self._term.isValid()
        return True
    

