"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Pricing import Pricing

# Unused import over optimization prevention
str(repr(Pricing))


if sys.version_info > (3,):
    long = int
    unicode = str

class ProductPlan(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.allowMultipleQuantities = (
            None if not fromDict or propDict.get(
                "allowMultipleQuantities"
            ) is None
            else propDict["allowMultipleQuantities"])
        self.downgradeSkus = (
            None if not fromDict or propDict.get(
                "downgradeSkus"
            ) is None
            else propDict["downgradeSkus"])
        self.effectiveEndDate = (
            None if not fromDict or propDict.get(
                "effectiveEndDate"
            ) is None
            else propDict["effectiveEndDate"])
        self.effectiveStartDate = (
            None if not fromDict or propDict.get(
                "effectiveStartDate"
            ) is None
            else propDict["effectiveStartDate"])
        self.initialPeriod = (
            None if not fromDict or propDict.get(
                "initialPeriod"
            ) is None
            else propDict["initialPeriod"])
        self.initialPeriodType = (
            None if not fromDict or propDict.get(
                "initialPeriodType"
            ) is None
            else propDict["initialPeriodType"])
        self.longDescription = (
            None if not fromDict or propDict.get(
                "longDescription"
            ) is None
            else propDict["longDescription"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.pricing = (
            None if not fromDict or propDict.get(
                "pricing"
            ) is None
            else [ Pricing(i)
            for i in propDict["pricing"] ])
        self.productRatePlanSku = (
            None if not fromDict or propDict.get(
                "productRatePlanSku"
            ) is None
            else propDict["productRatePlanSku"])
        self.productRatePlanType = (
            None if not fromDict or propDict.get(
                "productRatePlanType"
            ) is None
            else propDict["productRatePlanType"])
        self.renewalPeriodType = (
            None if not fromDict or propDict.get(
                "renewalPeriodType"
            ) is None
            else propDict["renewalPeriodType"])
        self.renewalSetting = (
            None if not fromDict or propDict.get(
                "renewalSetting"
            ) is None
            else propDict["renewalSetting"])
        self.renewalTermsPeriod = (
            None if not fromDict or propDict.get(
                "renewalTermsPeriod"
            ) is None
            else propDict["renewalTermsPeriod"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])
        self.termType = (
            None if not fromDict or propDict.get(
                "termType"
            ) is None
            else propDict["termType"])
        self.upgradeSkus = (
            None if not fromDict or propDict.get(
                "upgradeSkus"
            ) is None
            else propDict["upgradeSkus"])

    @property
    def allowMultipleQuantities(self):
        """ """
        return self._allowMultipleQuantities

    @allowMultipleQuantities.setter
    def allowMultipleQuantities(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._allowMultipleQuantities = value
        else:
            raise TypeError(
                'Property "allowMultipleQuantities" of type "list<bool>" set '
                'to wrong type'
            )

    @property
    def downgradeSkus(self):
        """ """
        return self._downgradeSkus

    @downgradeSkus.setter
    def downgradeSkus(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._downgradeSkus = value
        else:
            raise TypeError(
                'Property "downgradeSkus" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def effectiveEndDate(self):
        """ """
        return self._effectiveEndDate

    @effectiveEndDate.setter
    def effectiveEndDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._effectiveEndDate = value
        else:
            raise TypeError(
                'Property "effectiveEndDate" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def effectiveStartDate(self):
        """ """
        return self._effectiveStartDate

    @effectiveStartDate.setter
    def effectiveStartDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._effectiveStartDate = value
        else:
            raise TypeError(
                'Property "effectiveStartDate" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def initialPeriod(self):
        """ """
        return self._initialPeriod

    @initialPeriod.setter
    def initialPeriod(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._initialPeriod = value
        else:
            raise TypeError(
                'Property "initialPeriod" of type "list<int>" set to wrong ty'
                'pe'
            )

    @property
    def initialPeriodType(self):
        """ """
        return self._initialPeriodType

    @initialPeriodType.setter
    def initialPeriodType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._initialPeriodType = value
        else:
            raise TypeError(
                'Property "initialPeriodType" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def longDescription(self):
        """str: long description of the rate plan"""
        return self._longDescription

    @longDescription.setter
    def longDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._longDescription = value
        else:
            raise TypeError(
                'Property "longDescription" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def name(self):
        """str: name of the rate plan"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def pricing(self):
        """ """
        return self._pricing

    @pricing.setter
    def pricing(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._pricing = value
        else:
            raise TypeError(
                'Property "pricing" of type "list<Pricing>" set to wrong type'
            )

    @property
    def productRatePlanSku(self):
        """ """
        return self._productRatePlanSku

    @productRatePlanSku.setter
    def productRatePlanSku(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productRatePlanSku = value
        else:
            raise TypeError(
                'Property "productRatePlanSku" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def productRatePlanType(self):
        """ """
        return self._productRatePlanType

    @productRatePlanType.setter
    def productRatePlanType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productRatePlanType = value
        else:
            raise TypeError(
                'Property "productRatePlanType" of type "list<str>" set to wr'
                'ong type'
            )

    @property
    def renewalPeriodType(self):
        """ """
        return self._renewalPeriodType

    @renewalPeriodType.setter
    def renewalPeriodType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._renewalPeriodType = value
        else:
            raise TypeError(
                'Property "renewalPeriodType" of type "list<str>" set to wron'
                'g type'
            )

    @property
    def renewalSetting(self):
        """ """
        return self._renewalSetting

    @renewalSetting.setter
    def renewalSetting(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._renewalSetting = value
        else:
            raise TypeError(
                'Property "renewalSetting" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def renewalTermsPeriod(self):
        """ """
        return self._renewalTermsPeriod

    @renewalTermsPeriod.setter
    def renewalTermsPeriod(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._renewalTermsPeriod = value
        else:
            raise TypeError(
                'Property "renewalTermsPeriod" of type "list<int>" set to wro'
                'ng type'
            )

    @property
    def shortDescription(self):
        """str: short description of the rate plan"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def termType(self):
        """ """
        return self._termType

    @termType.setter
    def termType(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._termType = value
        else:
            raise TypeError(
                'Property "termType" of type "list<str>" set to wrong type'
            )

    @property
    def upgradeSkus(self):
        """ """
        return self._upgradeSkus

    @upgradeSkus.setter
    def upgradeSkus(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._upgradeSkus = value
        else:
            raise TypeError(
                'Property "upgradeSkus" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._allowMultipleQuantities is not None:
            result["allowMultipleQuantities"] = \
                self._allowMultipleQuantities
        if self._downgradeSkus is not None:
            result["downgradeSkus"] = \
                self._downgradeSkus
        if self._effectiveEndDate is not None:
            result["effectiveEndDate"] = \
                self._effectiveEndDate
        if self._effectiveStartDate is not None:
            result["effectiveStartDate"] = \
                self._effectiveStartDate
        if self._initialPeriod is not None:
            result["initialPeriod"] = \
                self._initialPeriod
        if self._initialPeriodType is not None:
            result["initialPeriodType"] = \
                self._initialPeriodType
        if self._longDescription is not None:
            result["longDescription"] = \
                self._longDescription
        if self._name is not None:
            result["name"] = \
                self._name
        if self._pricing:
            result["pricing"] = [
                i.toDict() for i in self._pricing 
            ] if self._pricing else []
        if self._productRatePlanSku is not None:
            result["productRatePlanSku"] = \
                self._productRatePlanSku
        if self._productRatePlanType is not None:
            result["productRatePlanType"] = \
                self._productRatePlanType
        if self._renewalPeriodType is not None:
            result["renewalPeriodType"] = \
                self._renewalPeriodType
        if self._renewalSetting is not None:
            result["renewalSetting"] = \
                self._renewalSetting
        if self._renewalTermsPeriod is not None:
            result["renewalTermsPeriod"] = \
                self._renewalTermsPeriod
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        if self._termType is not None:
            result["termType"] = \
                self._termType
        if self._upgradeSkus is not None:
            result["upgradeSkus"] = \
                self._upgradeSkus
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._pricing is not None):
            for obj in self._pricing:
                if (obj is not None): obj.isValid()
        return True
    

