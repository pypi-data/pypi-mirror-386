"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .MetaData import MetaData

# Unused import over optimization prevention
str(repr(MetaData))


if sys.version_info > (3,):
    long = int
    unicode = str

class Health(object):
    """object that describes health of the service"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.healthCode = (
            None if not fromDict or propDict.get(
                "healthCode"
            ) is None
            else propDict["healthCode"])
        self.healthCodeDescription = (
            None if not fromDict or propDict.get(
                "healthCodeDescription"
            ) is None
            else propDict["healthCodeDescription"])
        self.metaData = (
            None if not fromDict or propDict.get(
                "metaData"
            ) is None
            else [ MetaData(i)
            for i in propDict["metaData"] ])

    @property
    def healthCode(self):
        """HealthCodeEnum: Enum that describes health of the service"""
        return self._healthCode

    @healthCode.setter
    def healthCode(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._healthCode = value
        else:
            raise TypeError(
                'Property "healthCode" of type "list<HealthCodeEnum>" set to '
                'wrong type'
            )

    HealthCodeEnum=["UNKNOWN","OK","UNDER_MAINTENANCE","WARNING","FAILED",]
    str(repr(HealthCodeEnum))  # Prevent optimizer removing enum

    @property
    def healthCodeDescription(self):
        """str: Human readable description"""
        return self._healthCodeDescription

    @healthCodeDescription.setter
    def healthCodeDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._healthCodeDescription = value
        else:
            raise TypeError(
                'Property "healthCodeDescription" of type "list<str>" set to '
                'wrong type'
            )

    @property
    def metaData(self):
        """ """
        return self._metaData

    @metaData.setter
    def metaData(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._metaData = value
        else:
            raise TypeError(
                'Property "metaData" of type "list<MetaData>" set to wrong ty'
                'pe'
            )

    def toDict(self):
        result = {}
        if self._healthCode is not None:
            result["healthCode"] = \
                self._healthCode
        if self._healthCodeDescription is not None:
            result["healthCodeDescription"] = \
                self._healthCodeDescription
        if self._metaData:
            result["metaData"] = [
                i.toDict() for i in self._metaData 
            ] if self._metaData else []
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._healthCodeDescription is not None
            and
            len(self._healthCodeDescription) < 1):
            raise ValueError(
                "Health.healthCodeDescription: " + str(self._healthCodeDescription) + 
                " doesnt match requirement: minLength: 1")
        if (self._healthCodeDescription is not None
            and
            len(self._healthCodeDescription) > 255):
            raise ValueError(
                "Health.healthCodeDescription: " + str(self._healthCodeDescription) + 
                " doesnt match requirement: maxLength: 255")
        if (self._metaData is not None):
            for obj in self._metaData:
                if (obj is not None): obj.isValid()
        return True
    

