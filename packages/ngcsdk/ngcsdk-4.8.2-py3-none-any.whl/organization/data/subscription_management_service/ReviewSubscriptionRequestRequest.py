"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SubscriptionRequestActionEnum import SubscriptionRequestActionEnum

# Unused import over optimization prevention
str(repr(SubscriptionRequestActionEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class ReviewSubscriptionRequestRequest(object):
    """Request for review SubscriptionRequest API"""
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.action = (
            None if not fromDict or propDict.get(
                "action"
            ) is None
            else propDict["action"])
        self.performerId = (
            None if not fromDict or propDict.get(
                "performerId"
            ) is None
            else propDict["performerId"])
        self.performerName = (
            None if not fromDict or propDict.get(
                "performerName"
            ) is None
            else propDict["performerName"])
        self.requestId = (
            None if not fromDict or propDict.get(
                "requestId"
            ) is None
            else propDict["requestId"])
        self.retailer = (
            None if not fromDict or propDict.get(
                "retailer"
            ) is None
            else propDict["retailer"])

    @property
    def action(self):
        """SubscriptionRequestActionEnum: All possible action enums for subscr
        iption request"""
        return self._action

    @action.setter
    def action(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._action = value
        else:
            raise TypeError(
                'Property "action" of type "list<SubscriptionRequestActionEnu'
                'm>" set to wrong type'
            )

    @property
    def performerId(self):
        """str: Starfleet id of the people who are doing the review"""
        return self._performerId

    @performerId.setter
    def performerId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._performerId = value
        else:
            raise TypeError(
                'Property "performerId" of type "list<str>" set to wrong type'
            )

    @property
    def performerName(self):
        """str: name of the people who are doing the review"""
        return self._performerName

    @performerName.setter
    def performerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._performerName = value
        else:
            raise TypeError(
                'Property "performerName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def requestId(self):
        """str: id of the subscription request"""
        return self._requestId

    @requestId.setter
    def requestId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requestId = value
        else:
            raise TypeError(
                'Property "requestId" of type "list<str>" set to wrong type'
            )

    @property
    def retailer(self):
        """str: name of the retailer"""
        return self._retailer

    @retailer.setter
    def retailer(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._retailer = value
        else:
            raise TypeError(
                'Property "retailer" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._action is not None:
            result["action"] = \
                self._action
        if self._performerId is not None:
            result["performerId"] = \
                self._performerId
        if self._performerName is not None:
            result["performerName"] = \
                self._performerName
        if self._requestId is not None:
            result["requestId"] = \
                self._requestId
        if self._retailer is not None:
            result["retailer"] = \
                self._retailer
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

