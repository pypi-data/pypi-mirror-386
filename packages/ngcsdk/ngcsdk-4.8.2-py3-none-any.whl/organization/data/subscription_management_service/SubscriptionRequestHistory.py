"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SubscriptionRequestActionStatusEnum import SubscriptionRequestActionStatusEnum
from .SubscriptionRequestActionEnum import SubscriptionRequestActionEnum

# Unused import over optimization prevention
str(repr(SubscriptionRequestActionEnum))
str(repr(SubscriptionRequestActionStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class SubscriptionRequestHistory(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.action = (
            None if not fromDict or propDict.get(
                "action"
            ) is None
            else propDict["action"])
        self.actionDetails = (
            None if not fromDict or propDict.get(
                "actionDetails"
            ) is None
            else propDict["actionDetails"])
        self.actionStatus = (
            None if not fromDict or propDict.get(
                "actionStatus"
            ) is None
            else propDict["actionStatus"])
        self.performedDate = (
            None if not fromDict or propDict.get(
                "performedDate"
            ) is None
            else propDict["performedDate"])
        self.performerId = (
            None if not fromDict or propDict.get(
                "performerId"
            ) is None
            else propDict["performerId"])
        self.performerName = (
            None if not fromDict or propDict.get(
                "performerName"
            ) is None
            else propDict["performerName"])
        self.productName = (
            None if not fromDict or propDict.get(
                "productName"
            ) is None
            else propDict["productName"])
        self.requestId = (
            None if not fromDict or propDict.get(
                "requestId"
            ) is None
            else propDict["requestId"])
        self.retailer = (
            None if not fromDict or propDict.get(
                "retailer"
            ) is None
            else propDict["retailer"])

    @property
    def action(self):
        """SubscriptionRequestActionEnum: All possible action enums for subscr
        iption request"""
        return self._action

    @action.setter
    def action(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._action = value
        else:
            raise TypeError(
                'Property "action" of type "list<SubscriptionRequestActionEnu'
                'm>" set to wrong type'
            )

    @property
    def actionDetails(self):
        """str: detailed explanation of the action"""
        return self._actionDetails

    @actionDetails.setter
    def actionDetails(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._actionDetails = value
        else:
            raise TypeError(
                'Property "actionDetails" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def actionStatus(self):
        """SubscriptionRequestActionStatusEnum: All possible status enums for 
        subscription request action"""
        return self._actionStatus

    @actionStatus.setter
    def actionStatus(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._actionStatus = value
        else:
            raise TypeError(
                'Property "actionStatus" of type "list<SubscriptionRequestAct'
                'ionStatusEnum>" set to wrong type'
            )

    @property
    def performedDate(self):
        """str: timestamp of the request modification"""
        return self._performedDate

    @performedDate.setter
    def performedDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._performedDate = value
        else:
            raise TypeError(
                'Property "performedDate" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def performerId(self):
        """str: starfleet id of the user who are doing the modification"""
        return self._performerId

    @performerId.setter
    def performerId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._performerId = value
        else:
            raise TypeError(
                'Property "performerId" of type "list<str>" set to wrong type'
            )

    @property
    def performerName(self):
        """str: name of the user who are doing the modification"""
        return self._performerName

    @performerName.setter
    def performerName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._performerName = value
        else:
            raise TypeError(
                'Property "performerName" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def productName(self):
        """str: name of the NGC product"""
        return self._productName

    @productName.setter
    def productName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productName = value
        else:
            raise TypeError(
                'Property "productName" of type "list<str>" set to wrong type'
            )

    @property
    def requestId(self):
        """str: id of the subscription request"""
        return self._requestId

    @requestId.setter
    def requestId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._requestId = value
        else:
            raise TypeError(
                'Property "requestId" of type "list<str>" set to wrong type'
            )

    @property
    def retailer(self):
        """str: name of the retailer"""
        return self._retailer

    @retailer.setter
    def retailer(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._retailer = value
        else:
            raise TypeError(
                'Property "retailer" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._action is not None:
            result["action"] = \
                self._action
        if self._actionDetails is not None:
            result["actionDetails"] = \
                self._actionDetails
        if self._actionStatus is not None:
            result["actionStatus"] = \
                self._actionStatus
        if self._performedDate is not None:
            result["performedDate"] = \
                self._performedDate
        if self._performerId is not None:
            result["performerId"] = \
                self._performerId
        if self._performerName is not None:
            result["performerName"] = \
                self._performerName
        if self._productName is not None:
            result["productName"] = \
                self._productName
        if self._requestId is not None:
            result["requestId"] = \
                self._requestId
        if self._retailer is not None:
            result["retailer"] = \
                self._retailer
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

