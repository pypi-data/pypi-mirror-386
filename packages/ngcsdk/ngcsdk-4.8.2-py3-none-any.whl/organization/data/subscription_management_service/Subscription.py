"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .SubscriptionStatusEnum import SubscriptionStatusEnum

# Unused import over optimization prevention
str(repr(SubscriptionStatusEnum))


if sys.version_info > (3,):
    long = int
    unicode = str

class Subscription(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.autoRenew = (
            None if not fromDict or propDict.get(
                "autoRenew"
            ) is None
            else propDict["autoRenew"])
        self.canCancel = (
            None if not fromDict or propDict.get(
                "canCancel"
            ) is None
            else propDict["canCancel"])
        self.canRenew = (
            None if not fromDict or propDict.get(
                "canRenew"
            ) is None
            else propDict["canRenew"])
        self.createdByStarfleetId = (
            None if not fromDict or propDict.get(
                "createdByStarfleetId"
            ) is None
            else propDict["createdByStarfleetId"])
        self.displayName = (
            None if not fromDict or propDict.get(
                "displayName"
            ) is None
            else propDict["displayName"])
        self.entitlementId = (
            None if not fromDict or propDict.get(
                "entitlementId"
            ) is None
            else propDict["entitlementId"])
        self.expirationDate = (
            None if not fromDict or propDict.get(
                "expirationDate"
            ) is None
            else propDict["expirationDate"])
        self.imageUrl = (
            None if not fromDict or propDict.get(
                "imageUrl"
            ) is None
            else propDict["imageUrl"])
        self.isAlreadyTaken = (
            None if not fromDict or propDict.get(
                "isAlreadyTaken"
            ) is None
            else propDict["isAlreadyTaken"])
        self.isRedemption = (
            None if not fromDict or propDict.get(
                "isRedemption"
            ) is None
            else propDict["isRedemption"])
        self.lifecycleManager = (
            None if not fromDict or propDict.get(
                "lifecycleManager"
            ) is None
            else propDict["lifecycleManager"])
        self.name = (
            None if not fromDict or propDict.get(
                "name"
            ) is None
            else propDict["name"])
        self.orderDate = (
            None if not fromDict or propDict.get(
                "orderDate"
            ) is None
            else propDict["orderDate"])
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.productIcon = (
            None if not fromDict or propDict.get(
                "productIcon"
            ) is None
            else propDict["productIcon"])
        self.productRatePlanSku = (
            None if not fromDict or propDict.get(
                "productRatePlanSku"
            ) is None
            else propDict["productRatePlanSku"])
        self.productTier = (
            None if not fromDict or propDict.get(
                "productTier"
            ) is None
            else propDict["productTier"])
        self.shortDescription = (
            None if not fromDict or propDict.get(
                "shortDescription"
            ) is None
            else propDict["shortDescription"])
        self.status = (
            None if not fromDict or propDict.get(
                "status"
            ) is None
            else propDict["status"])
        self.statusDetails = (
            None if not fromDict or propDict.get(
                "statusDetails"
            ) is None
            else propDict["statusDetails"])
        self.subscriptionId = (
            None if not fromDict or propDict.get(
                "subscriptionId"
            ) is None
            else propDict["subscriptionId"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])

    @property
    def autoRenew(self):
        """bool: auto renew subscription is allowed or not"""
        return self._autoRenew

    @autoRenew.setter
    def autoRenew(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._autoRenew = value
        else:
            raise TypeError(
                'Property "autoRenew" of type "list<bool>" set to wrong type'
            )

    @property
    def canCancel(self):
        """bool: cancel subscription is allowed or not"""
        return self._canCancel

    @canCancel.setter
    def canCancel(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canCancel = value
        else:
            raise TypeError(
                'Property "canCancel" of type "list<bool>" set to wrong type'
            )

    @property
    def canRenew(self):
        """bool: renew subscription is allowed or not"""
        return self._canRenew

    @canRenew.setter
    def canRenew(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._canRenew = value
        else:
            raise TypeError(
                'Property "canRenew" of type "list<bool>" set to wrong type'
            )

    @property
    def createdByStarfleetId(self):
        """ """
        return self._createdByStarfleetId

    @createdByStarfleetId.setter
    def createdByStarfleetId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._createdByStarfleetId = value
        else:
            raise TypeError(
                'Property "createdByStarfleetId" of type "list<str>" set to w'
                'rong type'
            )

    @property
    def displayName(self):
        """str: name of the product from UCP product catalog"""
        return self._displayName

    @displayName.setter
    def displayName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._displayName = value
        else:
            raise TypeError(
                'Property "displayName" of type "list<str>" set to wrong type'
            )

    @property
    def entitlementId(self):
        """ """
        return self._entitlementId

    @entitlementId.setter
    def entitlementId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._entitlementId = value
        else:
            raise TypeError(
                'Property "entitlementId" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def expirationDate(self):
        """str: expiry date of the subscription"""
        return self._expirationDate

    @expirationDate.setter
    def expirationDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._expirationDate = value
        else:
            raise TypeError(
                'Property "expirationDate" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def imageUrl(self):
        """ """
        return self._imageUrl

    @imageUrl.setter
    def imageUrl(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._imageUrl = value
        else:
            raise TypeError(
                'Property "imageUrl" of type "list<str>" set to wrong type'
            )

    @property
    def isAlreadyTaken(self):
        """bool: if entitlement is already taken by an org or not"""
        return self._isAlreadyTaken

    @isAlreadyTaken.setter
    def isAlreadyTaken(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isAlreadyTaken = value
        else:
            raise TypeError(
                'Property "isAlreadyTaken" of type "list<bool>" set to wrong '
                'type'
            )

    @property
    def isRedemption(self):
        """bool: if the subscription is redeemed/purchased"""
        return self._isRedemption

    @isRedemption.setter
    def isRedemption(self, value):
        if value is not None and not isinstance(value, bool):
            value = bool(value)
        if (value is None) or isinstance(value, bool):
            self._isRedemption = value
        else:
            raise TypeError(
                'Property "isRedemption" of type "list<bool>" set to wrong ty'
                'pe'
            )

    @property
    def lifecycleManager(self):
        """ """
        return self._lifecycleManager

    @lifecycleManager.setter
    def lifecycleManager(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._lifecycleManager = value
        else:
            raise TypeError(
                'Property "lifecycleManager" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def name(self):
        """str: name of the product"""
        return self._name

    @name.setter
    def name(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._name = value
        else:
            raise TypeError(
                'Property "name" of type "list<str>" set to wrong type'
            )

    @property
    def orderDate(self):
        """str: order date of the subscription"""
        return self._orderDate

    @orderDate.setter
    def orderDate(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orderDate = value
        else:
            raise TypeError(
                'Property "orderDate" of type "list<str>" set to wrong type'
            )

    @property
    def orgName(self):
        """str: name of the org"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def productIcon(self):
        """ """
        return self._productIcon

    @productIcon.setter
    def productIcon(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productIcon = value
        else:
            raise TypeError(
                'Property "productIcon" of type "list<str>" set to wrong type'
            )

    @property
    def productRatePlanSku(self):
        """str: product rate plan sku of the subscription"""
        return self._productRatePlanSku

    @productRatePlanSku.setter
    def productRatePlanSku(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productRatePlanSku = value
        else:
            raise TypeError(
                'Property "productRatePlanSku" of type "list<str>" set to wro'
                'ng type'
            )

    @property
    def productTier(self):
        """ """
        return self._productTier

    @productTier.setter
    def productTier(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._productTier = value
        else:
            raise TypeError(
                'Property "productTier" of type "list<str>" set to wrong type'
            )

    @property
    def shortDescription(self):
        """str: short description of the product"""
        return self._shortDescription

    @shortDescription.setter
    def shortDescription(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._shortDescription = value
        else:
            raise TypeError(
                'Property "shortDescription" of type "list<str>" set to wrong'
                ' type'
            )

    @property
    def status(self):
        """SubscriptionStatusEnum: All possible subscription status enums"""
        return self._status

    @status.setter
    def status(self, value):
        if (value is None) or isinstance(value, str) or isinstance(value, unicode):
            self._status = value
        else:
            raise TypeError(
                'Property "status" of type "list<SubscriptionStatusEnum>" set'
                ' to wrong type'
            )

    @property
    def statusDetails(self):
        """ """
        return self._statusDetails

    @statusDetails.setter
    def statusDetails(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._statusDetails = value
        else:
            raise TypeError(
                'Property "statusDetails" of type "list<str>" set to wrong ty'
                'pe'
            )

    @property
    def subscriptionId(self):
        """str: subscription id for the subscription"""
        return self._subscriptionId

    @subscriptionId.setter
    def subscriptionId(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._subscriptionId = value
        else:
            raise TypeError(
                'Property "subscriptionId" of type "list<str>" set to wrong t'
                'ype'
            )

    @property
    def type(self):
        """ """
        return self._type

    @type.setter
    def type(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<str>" set to wrong type'
            )

    def toDict(self):
        result = {}
        if self._autoRenew is not None:
            result["autoRenew"] = \
                self._autoRenew
        if self._canCancel is not None:
            result["canCancel"] = \
                self._canCancel
        if self._canRenew is not None:
            result["canRenew"] = \
                self._canRenew
        if self._createdByStarfleetId is not None:
            result["createdByStarfleetId"] = \
                self._createdByStarfleetId
        if self._displayName is not None:
            result["displayName"] = \
                self._displayName
        if self._entitlementId is not None:
            result["entitlementId"] = \
                self._entitlementId
        if self._expirationDate is not None:
            result["expirationDate"] = \
                self._expirationDate
        if self._imageUrl is not None:
            result["imageUrl"] = \
                self._imageUrl
        if self._isAlreadyTaken is not None:
            result["isAlreadyTaken"] = \
                self._isAlreadyTaken
        if self._isRedemption is not None:
            result["isRedemption"] = \
                self._isRedemption
        if self._lifecycleManager is not None:
            result["lifecycleManager"] = \
                self._lifecycleManager
        if self._name is not None:
            result["name"] = \
                self._name
        if self._orderDate is not None:
            result["orderDate"] = \
                self._orderDate
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._productIcon is not None:
            result["productIcon"] = \
                self._productIcon
        if self._productRatePlanSku is not None:
            result["productRatePlanSku"] = \
                self._productRatePlanSku
        if self._productTier is not None:
            result["productTier"] = \
                self._productTier
        if self._shortDescription is not None:
            result["shortDescription"] = \
                self._shortDescription
        if self._status is not None:
            result["status"] = \
                self._status
        if self._statusDetails is not None:
            result["statusDetails"] = \
                self._statusDetails
        if self._subscriptionId is not None:
            result["subscriptionId"] = \
                self._subscriptionId
        if self._type is not None:
            result["type"] = \
                self._type
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        return True
    

