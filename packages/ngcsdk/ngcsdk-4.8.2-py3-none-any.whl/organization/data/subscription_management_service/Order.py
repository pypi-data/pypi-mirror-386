"""
------------------------------------------------------------------------------
<auto-generated>
    This code was auto-generated by main/tools/jsonparser.
    Do not change this file.
</auto-generated>
------------------------------------------------------------------------------
"""
import json
import sys
import re
from six import string_types
from .Product import Product

# Unused import over optimization prevention
str(repr(Product))


if sys.version_info > (3,):
    long = int
    unicode = str

class Order(object):
    def __init__(self, propDict=None):
        fromDict = propDict is not None and isinstance(propDict, dict)
        self.orgName = (
            None if not fromDict or propDict.get(
                "orgName"
            ) is None
            else propDict["orgName"])
        self.products = (
            None if not fromDict or propDict.get(
                "products"
            ) is None
            else [ Product(i)
            for i in propDict["products"] ])
        self.term = (
            None if not fromDict or propDict.get(
                "term"
            ) is None
            else propDict["term"])
        self.type = (
            None if not fromDict or propDict.get(
                "type"
            ) is None
            else propDict["type"])
        self.unverifiedCodes = (
            None if not fromDict or propDict.get(
                "unverifiedCodes"
            ) is None
            else propDict["unverifiedCodes"])
        self.unverifiedCodesCount = (
            None if not fromDict or propDict.get(
                "unverifiedCodesCount"
            ) is None
            else propDict["unverifiedCodesCount"])
        self.verifiedCodesCount = (
            None if not fromDict or propDict.get(
                "verifiedCodesCount"
            ) is None
            else propDict["verifiedCodesCount"])

    @property
    def orgName(self):
        """str: name of the org"""
        return self._orgName

    @orgName.setter
    def orgName(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._orgName = value
        else:
            raise TypeError(
                'Property "orgName" of type "list<str>" set to wrong type'
            )

    @property
    def products(self):
        """ """
        return self._products

    @products.setter
    def products(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._products = value
        else:
            raise TypeError(
                'Property "products" of type "list<Product>" set to wrong typ'
                'e'
            )

    @property
    def term(self):
        """str: term of the order, e.g. 5 Years, Monthly, Yearly, etc"""
        return self._term

    @term.setter
    def term(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._term = value
        else:
            raise TypeError(
                'Property "term" of type "list<str>" set to wrong type'
            )

    @property
    def type(self):
        """str: type of order, e.g. H100"""
        return self._type

    @type.setter
    def type(self, value):
        if value is not None and not isinstance(value, string_types):
            value = repr(value)
        if (value is None) or isinstance(value, string_types):
            self._type = value
        else:
            raise TypeError(
                'Property "type" of type "list<str>" set to wrong type'
            )

    @property
    def unverifiedCodes(self):
        """ """
        return self._unverifiedCodes

    @unverifiedCodes.setter
    def unverifiedCodes(self, value):
        if value is not None and not isinstance(value, list):
            value = list(value)
        if (value is None) or isinstance(value, list):
            self._unverifiedCodes = value
        else:
            raise TypeError(
                'Property "unverifiedCodes" of type "list<str>" set to wrong '
                'type'
            )

    @property
    def unverifiedCodesCount(self):
        """int: count of unverified codes"""
        return self._unverifiedCodesCount

    @unverifiedCodesCount.setter
    def unverifiedCodesCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._unverifiedCodesCount = value
        else:
            raise TypeError(
                'Property "unverifiedCodesCount" of type "list<int>" set to w'
                'rong type'
            )

    @property
    def verifiedCodesCount(self):
        """int: count of verified codes"""
        return self._verifiedCodesCount

    @verifiedCodesCount.setter
    def verifiedCodesCount(self, value):
        if value is not None and not isinstance(value, int):
            value = int(value)
        if (value is None) or isinstance(value, int):
            self._verifiedCodesCount = value
        else:
            raise TypeError(
                'Property "verifiedCodesCount" of type "list<int>" set to wro'
                'ng type'
            )

    def toDict(self):
        result = {}
        if self._orgName is not None:
            result["orgName"] = \
                self._orgName
        if self._products:
            result["products"] = [
                i.toDict() for i in self._products 
            ] if self._products else []
        if self._term is not None:
            result["term"] = \
                self._term
        if self._type is not None:
            result["type"] = \
                self._type
        if self._unverifiedCodes is not None:
            result["unverifiedCodes"] = \
                self._unverifiedCodes
        if self._unverifiedCodesCount is not None:
            result["unverifiedCodesCount"] = \
                self._unverifiedCodesCount
        if self._verifiedCodesCount is not None:
            result["verifiedCodesCount"] = \
                self._verifiedCodesCount
        return result

    def toJSON(self, pretty=False):
        if pretty:
            return json.dumps(self.toDict(), sort_keys=True, indent=4)
        else:
            return json.dumps(self.toDict(), sort_keys=True)

    def isValid(self):
        if (self._products is not None):
            for obj in self._products:
                if (obj is not None): obj.isValid()
        return True
    

