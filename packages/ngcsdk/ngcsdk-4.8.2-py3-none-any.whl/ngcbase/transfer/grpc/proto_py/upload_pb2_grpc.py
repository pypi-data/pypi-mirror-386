#
# Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
#
# NVIDIA CORPORATION and its licensors retain all intellectual property
# and proprietary rights in and to this software, related documentation
# and any modifications thereto.  Any use, reproduction, disclosure or
# distribution of this software and related documentation without an express
# license agreement from NVIDIA CORPORATION is strictly prohibited.
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
try:
    # pylint: disable=import-error
    import grpc

    from . import upload_pb2 as upload__pb2
except ModuleNotFoundError:
    grpc = None


class DataSetServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Put = channel.stream_stream(
            "/com.nvidia.ngc.storageservice.grpc.DataSetService/Put",
            request_serializer=upload__pb2.PutRequest.SerializeToString,
            response_deserializer=upload__pb2.PutResponse.FromString,
        )
        self.Download = channel.stream_stream(
            "/com.nvidia.ngc.storageservice.grpc.DataSetService/Download",
            request_serializer=upload__pb2.DownloadRequest.SerializeToString,
            response_deserializer=upload__pb2.DownloadResponse.FromString,
        )


class DataSetServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Put(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Download(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DataSetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Put": grpc.stream_stream_rpc_method_handler(
            servicer.Put,
            request_deserializer=upload__pb2.PutRequest.FromString,
            response_serializer=upload__pb2.PutResponse.SerializeToString,
        ),
        "Download": grpc.stream_stream_rpc_method_handler(
            servicer.Download,
            request_deserializer=upload__pb2.DownloadRequest.FromString,
            response_serializer=upload__pb2.DownloadResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "com.nvidia.ngc.storageservice.grpc.DataSetService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class DataSetService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Put(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/com.nvidia.ngc.storageservice.grpc.DataSetService/Put",
            upload__pb2.PutRequest.SerializeToString,
            upload__pb2.PutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Download(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/com.nvidia.ngc.storageservice.grpc.DataSetService/Download",
            upload__pb2.DownloadRequest.SerializeToString,
            upload__pb2.DownloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class HealthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
            "/com.nvidia.ngc.storageservice.grpc.HealthService/HealthCheck",
            request_serializer=upload__pb2.HealthCheckRequest.SerializeToString,
            response_deserializer=upload__pb2.HealthCheckResponse.FromString,
        )


class HealthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_HealthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "HealthCheck": grpc.unary_unary_rpc_method_handler(
            servicer.HealthCheck,
            request_deserializer=upload__pb2.HealthCheckRequest.FromString,
            response_serializer=upload__pb2.HealthCheckResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "com.nvidia.ngc.storageservice.grpc.HealthService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class HealthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def HealthCheck(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/com.nvidia.ngc.storageservice.grpc.HealthService/HealthCheck",
            upload__pb2.HealthCheckRequest.SerializeToString,
            upload__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
