## pyproject.toml -*- mode: Toml -*-

[project]
name            = "bibtex-bibble"
version = "0.3.3"
description     = ""
readme          = "README.md"
requires-python = ">=3.12"
license-files   = ["LICENSE"]
keywords        = []
authors         = [
  {name         = "John Grey", email = "jgrey.n.plus.one@gmail.com"},
]
classifiers     = [
  "Programming Language :: Python"
]

dependencies   = [
    "bibtexparser>=2.0.0b8",
    "internetarchive>=5.3.1",
    "isbn-hyphenate>=1.0.4",
    "jgdv>=1.0",
    "jinja2>=3.1.6",
    "jsonlines>=4.0.0",
    "pyisbn>=1.3.1",
    "selenium>=4.30.0",
    "tqdm>=4.67.1",
    "waybackpy>=3.0.6",
]

##-- urls
[project.urls]
homepage      = "https://jgrey4296.github.io/bibble"
documentation = "https://bibble.readthedocs.io/en/latest"
repository    = "https://github.com/jgrey4296/bibble"
changelog     = "https://github.com/bibble/blob/master/CHANGELOG.md"

##-- end urls

##-- scripts
[project.scripts]
# bibble = "bibble.__main__:main"

[project.gui-scripts]
# spam-gui      = "spam:main_gui"

# [project.entry-points."nothing"]
# tomatoes      = "spam:main_tomatoes"

##-- end scripts

##-- build-system
[build-system]
requires       = ["hatchling>=1.13"]
build-backend  = "hatchling.build"

[tool.hatch.build]
skip-excluded-dirs  = true
# directory           = ".temp/build"  # or HATCH_BUILD_LOCATION

[tool.hatch.build.targets.sdist]
packages   = ["bibble"]
artifacts  = ["*.so"]
exclude    = [
    ".temp", "**.rst",
    "bibble/*/__tests", "bibble/_docs", "bibble/__tests",
]

[tool.hatch.build.targets.wheel]
packages   = ["bibble"]
artifacts  = ["*.so"]
exclude    = [
    ".temp", "**.rst",
    "bibble/*/__tests", "bibble/__tests",
    "bibble/_docs",
]

##-- end build-system


# Tools #######################################################################

##-- mypy
# https://mypy.readthedocs.io/en/stable/config_file.html#config-file
[tool.mypy]
python_version          = "3.12"
follow_imports          = "skip"
cache_dir               = ".temp/mypy_cache"
enable_error_code       = ["explicit-override"]
disable_error_code      = []
incremental             = true

warn_unused_configs     = true
ignore_missing_imports  = true

##-- end mypy

##-- pytest
[tool.pytest.ini_options]
addopts         = ["--ignore-glob=related_/*"]
cache_dir       = ".temp/pytest_cache"
log_file        = ".temp/logs/pytest.log"

log_cli         = false
log_level       = "DEBUG"
log_cli_level   = "DEBUG"
##-- end pytest

##-- coverage
# https://pytest-cov.readthedocs.io/en/latest/config.html
# add "addopts = '--cov-report xml --cov={}' " for pytest
[tool.coverage.run]
branch            = true  # measure branch coverage
cover_pylib       = false # measure stdlib
relative_files    = false 
data_file         = ".temp/coverage/coverage_cache" # cache
disable_warnings  = []
omit              = [ # files to not measure
    "*/__tests/*",
    "*__init__.py",
    "*_interface.py",
    
] 

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",
    "^import",
    "^from",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
# fail_under  = 20 # coverage percentage
format        = "text" # or "markdown", "total"
show_missing  = true # for in the report
skip_empty    = true # skip files like __init__.py

[tool.coverage.html]
directory = ".temp/coverage/html_report" # where to write output

[tool.coverage.xml]
output    = ".temp/coverage/coverage.xml" # where to write output

[tool.coverage.json]
output        = ".temp/coverage/coverage.json"  # where to write output
pretty_print  = true
##-- end coverage

##-- isort
# https://pycqa.github.io/isort/docs/configuration/options.html
[tool.isort]
color_output           = false
py_version             = 311
# profile                = "hug"
comment_prefix         = "# "
sections               = [
"FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
default_section        = "THIRDPARTY"
lines_after_imports    = -1
lines_between_sections = 1
lines_between_types    = 0

import_heading_future      = "Imports:"
import_heading_stdlib      = "##-- stdlib imports"
import_heading_thirdparty  = "##-- 3rd party imports"
import_heading_firstparty  = "##-- 1st party imports"
import_heading_localfolder = ""

import_footer_future      = ""
import_footer_stdlib      = "##-- end stdlib imports"
import_footer_thirdparty  = "##-- end 3rd party imports"
import_footer_firstparty  = "##-- end 1st party imports"
import_footer_localfolder = ""

add_imports            = []
##-- end isort

##-- uv
[tool.uv]

[dependency-groups]
dev = [
    "ipython>=9.4.0",
    "sh>=2.2.2",
    "towncrier>=24.8.0",
    ]
test =[
    "pydot>=4.0.1",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "tox>=4.28.4",
    "tox-uv>=1.27.0",
    "ruff>=0.12.8",
]
docs = [
    "myst-parser>=4.0.1",
    "sphinx>=8.2.3",
    "sphinx-autoapi>=3.6.0",
    "sphinx-rtd-theme>=3.0.2",
    "pydot>=4.0.1",
    "tox>=4.28.4",
    "tox-uv>=1.27.0",
]

##-- end uv
