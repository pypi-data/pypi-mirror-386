import time
import struct
from cryptography.hazmat.primitives.asymmetric import ed25519
from cryptography.exceptions import InvalidSignature

# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ Ed25519
back_prv = ed25519.Ed25519PrivateKey.generate()
back_pub = back_prv.public_key()
sender_prv = ed25519.Ed25519PrivateKey.generate()
sender_pub = sender_prv.public_key()
sender_id = 2
receiver_id = 5
cur_id = 1


def transfer_pack(receiver: int, amount: int, cur: int, timestamp: int) -> bytes:
    """–£–ø–∞–∫–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ 18 –±–∞–π—Ç –±–µ–∑ –∏–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"""
    return struct.pack(">LQHL", receiver, amount, cur, timestamp)


# def create_proof(trans_packed: bytes, sender_signature: bytes) -> bytes:
#     """–°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (18 + 64 = 82 bytes)"""
#     # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
#     data_with_sender_sig = trans_packed + sender_signature
#
#     print(f"DEBUG: –†–∞–∑–º–µ—Ä data_with_sender_sig: {len(data_with_sender_sig)} –±–∞–π—Ç")
#
#     # –ë—ç–∫–µ–Ω–¥ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –≤–µ—Å—å –ø–∞–∫–µ—Ç –¥–∞–Ω–Ω—ã—Ö
#     backend_signature = back_prv.sign(data_with_sender_sig)
#
#     # –§–∏–Ω–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
#     proof = data_with_sender_sig + backend_signature
#
#     print(f"DEBUG: –†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–≥–æ proof: {len(proof)} –±–∞–π—Ç")
#
#     return proof


# def verify_proof(proof: bytes, sender_public_key, backend_public_key) -> dict:
#     """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
#     try:
#         print(f"DEBUG: –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏: {len(proof)} –±–∞–π—Ç")
#
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (4+8+2+4 = 18 –±–∞–π—Ç)
#         receiver, amount, cur, timestamp = struct.unpack(">LQHL", proof[0:18])
#
#         # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
#         sender_signature = proof[18 : 18 + 64]
#
#         # –û—Å—Ç–∞–ª—å–Ω–æ–µ - –ø–æ–¥–ø–∏—Å—å –±—ç–∫–µ–Ω–¥–∞
#         backend_signature = proof[18 + 64 : 18 + 64 + 64]
#
#         print(f"DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ - receiver_id: {receiver}, amount: {amount}, cur_id: {cur}")
#         print(f"DEBUG: timestamp: {timestamp}")
#
#         # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –±—ç–∫–µ–Ω–¥–∞
#         compact_data = transfer_pack(receiver, amount, cur, timestamp)
#         data_with_sender_sig = compact_data + sender_signature
#         backend_public_key.verify(backend_signature, data_with_sender_sig)
#         print("DEBUG: –ü–æ–¥–ø–∏—Å—å –±—ç–∫–µ–Ω–¥–∞ –≤–µ—Ä–Ω–∞")
#
#         # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É amount
#         sender_public_key.verify(sender_signature, compact_data)
#         print("DEBUG: –ü–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤–µ—Ä–Ω–∞!")
#
#         return {
#             "valid": True,
#             "transaction_details": {
#                 # "sender_id": sender_id,
#                 "receiver_id": receiver,
#                 "amount": amount,
#                 "cur_id": cur,
#                 "timestamp": timestamp,
#             },
#         }
#
#     except InvalidSignature as e:
#         print(f"DEBUG: InvalidSignature –æ—à–∏–±–∫–∞: {e}")
#         return {"valid": False, "error": f"–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {str(e)}"}


def create_proof_minimal(receiver: int, amount: int, cur: int, timestamp: int, sender_signature: bytes) -> bytes:
    """–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ - —Ç–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å–∏"""
    trans_packed = transfer_pack(receiver, amount, cur, timestamp)

    # –¢–æ–ª—å–∫–æ –¥–≤–µ –ø–æ–¥–ø–∏—Å–∏: –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è + –±—ç–∫–µ–Ω–¥–∞ (128 –±–∞–π—Ç)
    backend_signature = back_prv.sign(trans_packed + sender_signature)

    return sender_signature + backend_signature


def verify_proof_minimal(
    proof: bytes,
    sender_public_key,
    backend_public_key,
    trans_packed: bytes,
) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞"""
    try:
        if len(proof) != 128:  # 64 + 64
            return False  # wrong size

        sender_signature = proof[:64]
        backend_signature = proof[64:128]

        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_public_key.verify(sender_signature, trans_packed)

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –±—ç–∫–µ–Ω–¥–∞
        backend_public_key.verify(backend_signature, trans_packed + sender_signature)

        return True

    except InvalidSignature:
        return False  # wring sign


def demo():
    print("=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ ===\n")

    amount = 10050
    timestamp = int(time.time())

    print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {sender_id} ‚Üí {receiver_id}: {amount}")

    # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    # transaction_hash = create_transaction_hash(sender_id, receiver_id, amount, timestamp)
    # print(f"DEBUG: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π transaction_hash (hex): {transaction_hash.hex()}")
    trans_packed = transfer_pack(receiver_id, amount, cur_id, timestamp)
    sender_signature = sender_prv.sign(trans_packed)
    print(f"DEBUG: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è sender_signature (hex): {sender_signature.hex()}")

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤
    print("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤:")

    # # 1. –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    # proof = create_proof(trans_packed, sender_signature)
    # result = verify_proof(proof, sender_pub, back_pub)
    # print(f"1. –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ:        {len(proof):3d} –±–∞–π—Ç - {'‚úÖ' if result['valid'] else '‚ùå'}")
    # if not result["valid"]:
    #     print(f"   –û—à–∏–±–∫–∞: {result['error']}")

    # 3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ
    proof_minimal = create_proof_minimal(receiver_id, amount, cur_id, timestamp, sender_signature)
    result_minimal = verify_proof_minimal(proof_minimal, sender_pub, back_pub, trans_packed)
    print(f"3. –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ:       {len(proof_minimal):3d} –±–∞–π—Ç - {'‚úÖ' if result_minimal else '‚ùå'}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    print(f"\n‚ú®–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ ({len(proof_minimal)} –±–∞–π—Ç):")
    print("   ‚Ä¢ –°–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–≤–µ –ø–æ–¥–ø–∏—Å–∏ Ed25519")
    print("   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç –∑–Ω–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    print("   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ —Å zlib")


if __name__ == "__main__":
    demo()
