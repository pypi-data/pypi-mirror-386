name: Build Wheels
permissions:
  contents: read

on:
  workflow_call:
    inputs:
      matrix_config:
        required: true
        type: string
        description: "JSON string containing the matrix configuration"
      use_cached_builds:
        description: 'Whether to cache and use cached builds'
        required: false
        type: boolean
        default: false

jobs:
  build-wheels:
    name: "Build wheels on ${{ matrix.os }} :: platform=${{ matrix.platform }} arch=${{ matrix.arch }}"
    runs-on: ${{ matrix.os }}

    strategy:
      matrix: ${{ fromJSON(inputs.matrix_config) }}

    steps:
      - uses: actions/checkout@v5

      - name: Support long paths
        if: runner.os == 'Windows'
        run: git config --system core.longpaths true

      - name: Set up msvc on Windows
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      - name: Export macOS SDKROOT
        if: runner.os == 'macOS'
        run: echo SDKROOT=$(xcrun --sdk macosx --show-sdk-path) >> $GITHUB_ENV

      - name: Get version from file
        id: get_version
        shell: bash
        run: |
          LLVM_VERSION=$(cat clangd_version.txt)
          echo "Building llvm version $LLVM_VERSION"
          echo "LLVM_VERSION=$LLVM_VERSION" >> "$GITHUB_OUTPUT"

      # Speeding up non release builds
      - name: Setup sccache
        if: inputs.use_cached_builds
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ steps.get_version.outputs.LLVM_VERSION }}
          max-size: 2G
          variant: sccache

      # We don't want these to be defined on release builds
      - name: Configure sccache parameters for build
        shell: bash
        if: inputs.use_cached_builds
        env:
          CIBW_BEFORE_ALL_LINUX: >-
            set -euxo pipefail
            && (yum install -y openssl-devel || apk add --no-cache openssl-dev openssl-libs-static)
            && curl https://sh.rustup.rs -sSf
            | sh -s -- --default-toolchain stable --profile minimal -y
            && . "$HOME/.cargo/env"
            && cargo install sccache
            && sccache --start-server
            && sccache -z
          CIBW_ENVIRONMENT_LINUX: >-
            PATH=$PATH:$HOME/.cargo/bin
            SCCACHE_DIR=/host${{ github.workspace }}/.sccache
            SCCACHE_ERROR_LOG=/host${{ github.workspace }}/ccache-inner.log
          CIBW_ENVIRONMENT_PASS_LINUX: >-
            SCCACHE_ENABLE
            SCCACHE_CACHE_SIZE
            SCCACHE_IDLE_TIMEOUT          
        run: |
          echo "SCCACHE_ENABLE=ON" >> $GITHUB_ENV
          echo "CIBW_BEFORE_ALL_LINUX=$CIBW_BEFORE_ALL_LINUX" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_LINUX=$CIBW_ENVIRONMENT_LINUX" >> $GITHUB_ENV
          echo "CIBW_ENVIRONMENT_PASS_LINUX=$CIBW_ENVIRONMENT_PASS_LINUX" >> $GITHUB_ENV

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_BUILD: "cp311-${{ matrix.platform }}*"
          MACOSX_DEPLOYMENT_TARGET: ${{ runner.os == 'macOS' && '10.13' || '' }}


      # sccache uses evil permissions and the cibw container uses a different user
      - name: Take ownership of sccache directory
        if: inputs.use_cached_builds && (matrix.platform == 'manylinux' || matrix.platform == 'musllinux')
        run: sudo chown -R $USER:$USER ${{ github.workspace }}/.sccache

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-wheels-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            ./wheelhouse/*.whl

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          path: dist/*.tar.gz
          name: artifacts-sdist

  test-sdist:
    name: Test build from source distribution
    needs: [build-sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        name: Install Python
        with:
          python-version: "3.13"

      - uses: actions/download-artifact@v5
        with:
          name: artifacts-sdist
          path: sdist

      - name: Get version from file
        id: get_version
        shell: bash
        run: |
          LLVM_VERSION=$(cat clangd_version.txt)
          echo "Building llvm version $LLVM_VERSION"
          echo "LLVM_VERSION=$LLVM_VERSION" >> "$GITHUB_OUTPUT"

      # Speeding up non release builds
      - name: Setup sccache
        if: inputs.use_cached_builds
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: sdist-${{ steps.get_version.outputs.LLVM_VERSION }}
          max-size: 2G
          variant: sccache

      - name: Set SCCACHE_ENABLE on PRs
        shell: bash
        if: inputs.use_cached_builds
        run: echo "SCCACHE_ENABLE=ON" >> $GITHUB_ENV

      - name: Install from SDist
        run: |
          pip install -v sdist/*.tar.gz

      - name: Install test requirements
        run: python -m pip install -r dev-requirements.txt

      - name: Run test suite
        run: python -m pytest
