# Licensed under the MIT License
# https://github.com/craigahobbs/markdown-up/blob/main/LICENSE


# Include sentinel
if systemGlobalGet('pagerSentinel'):
    return
endif
pagerSentinel = true


include <args.bare>


# The pager model
pagerTypes = schemaParse( \
    'group "pager.bare"', \
    '', \
    '', \
    '# A pager application model', \
    'struct Pager', \
    '', \
    "    # The application's pages", \
    '    PagerPage[len > 0] pages', \
    '', \
    '', \
    '# A page model', \
    'struct PagerPage', \
    '', \
    '    # The page name', \
    '    string name', \
    '', \
    '    # If true, the page is hidden', \
    '    optional bool hidden', \
    '', \
    '    # The page type', \
    '    PagerPageType type', \
    '', \
    '', \
    '# The page type', \
    'union PagerPageType', \
    '', \
    '    # A function page', \
    '    PagerPageFunction function', \
    '', \
    '    # A markdown resource page', \
    '    PagerPageMarkdown markdown', \
    '', \
    '    # A navigation link', \
    '    PagerPageLink link', \
    '', \
    '', \
    '# A page function', \
    'struct PagerPageFunction', \
    '', \
    '    # The page function', \
    '    object function', \
    '', \
    '    # The page title', \
    '    optional string title', \
    '', \
    '', \
    '# A Markdown resource page', \
    'struct PagerPageMarkdown', \
    '', \
    '    # The Markdown resource URL', \
    '    string url', \
    '', \
    '', \
    '# A page link', \
    'struct PagerPageLink', \
    '', \
    '    # The link URL', \
    '    string url' \
)


# $function: pagerValidate
# $group: pager.bare
# $doc: Validate a pager model
# $arg pagerModel: The [pager model](includeModel.html#var.vName='Pager')
# $return: The validated [pager model](includeModel.html#var.vName='Pager') or null if validation fails
function pagerValidate(pagerModel):
    return schemaValidate(pagerTypes, 'Pager', pagerModel)
endfunction


# $function: pagerMain
# $group: pager.bare
# $doc: The pager application main entry point
# $arg pagerModel: The [pager model](includeModel.html#var.vName='Pager')
# $arg options: The pager application options. The following options are available:
# $arg options: - **arguments** - The [arguments model](includeModel.html#var.vName='ArgsArguments').
# $arg options:   Must contain a string argument named "page".
# $arg options: - **hideMenu** - Hide the menu links
# $arg options: - **hideNav** - Hide the navigation links
# $arg options: - **start** - The start page name
# $arg options: - **keyboard** - Enable keyboard commands ('n' for next, 'p' for previous, 's' for start, 'e' for end)
async function pagerMain(pagerModel, options):
    options = if(options != null, options, {})
    optionArguments = objectGet(options, 'arguments')
    optionHideMenu = objectGet(options, 'hideMenu')
    optionHideNav = objectGet(options, 'hideNav')
    optionStart = objectGet(options, 'start')
    optionKeyboard = objectGet(options, 'keyboard')

    # Validate the pager model
    pagerModel = pagerValidate(pagerModel)
    if pagerModel == null:
        return
    endif
    pages = objectGet(pagerModel, 'pages')
    pagesLength = arrayLength(pages)

    # Find the start page and end page
    startPageName = null
    startPageIndex = null
    startPageExplicit = null
    endPageName = null
    for page, ixPage in pages:
        pageName = objectGet(page, 'name')
        pageHidden = objectGet(page, 'hidden')
        pageTypeKey = arrayGet(objectKeys(objectGet(page, 'type')), 0)
        pageNavigable = pageTypeKey != 'link'

        # Start page?
        if pageNavigable && !pageHidden && startPageName == null:
            startPageName = pageName
            startPageIndex = ixPage
        elif !startPageExplicit && pageName == optionStart:
            startPageName = pageName
            startPageIndex = ixPage
            startPageExplicit = true
        endif

        # Update the end page
        if pageNavigable && !pageHidden:
            endPageName = pageName
        endif
    endfor
    if startPageName == null:
        systemLogDebug('pager.bare: No visible and navigable pages')
        return
    endif
    if optionStart && !startPageExplicit:
        systemLogDebug('pager.bare: Unknown start page "' + optionStart + '"')
        return
    endif

    # Parse arguments
    if optionArguments:
        arguments = argsValidate(optionArguments)
        if arguments == null:
            return
        endif
    else:
        arguments = [{'name': 'page', 'default': startPageName}]
    endif
    args = argsParse(arguments)
    argPage = objectGet(args, 'page')

    # Find the current page
    curPage = arrayGet(pages, startPageIndex)
    curPageName = startPageName
    curPageIndex = startPageIndex
    for page, ixPage in pages:
        pageName = objectGet(page, 'name')
        pageTypeKey = arrayGet(objectKeys(objectGet(page, 'type')), 0)
        pageNavigable = pageTypeKey != 'link'

        # Current page?
        if pageNavigable && pageName == argPage:
            curPage = page
            curPageName = pageName
            curPageIndex = ixPage
            break
        endif
    endfor

    # Find the next page
    nextPageName = null
    ixPage = curPageIndex + 1
    while ixPage < pagesLength:
        page = arrayGet(pages, ixPage)
        pageName = objectGet(page, 'name')
        pageHidden = objectGet(page, 'hidden')
        pageTypeKey = arrayGet(objectKeys(objectGet(page, 'type')), 0)
        pageNavigable = pageTypeKey != 'link'
        if !pageHidden && pageNavigable:
            nextPageName = pageName
            break
        endif
        ixPage = ixPage + 1
    endwhile

    # Find the previous page
    prevPageName = null
    ixPage = curPageIndex - 1
    while ixPage >= 0:
        page = arrayGet(pages, ixPage)
        pageName = objectGet(page, 'name')
        pageHidden = objectGet(page, 'hidden')
        pageTypeKey = arrayGet(objectKeys(objectGet(page, 'type')), 0)
        pageNavigable = pageTypeKey != 'link'
        if !pageHidden && pageNavigable:
            prevPageName = pageName
            break
        endif
        ixPage = ixPage - 1
    endwhile

    # Render the menu
    if !optionHideMenu:
        menuItems = []
        for page in pages:
            pageName = objectGet(page, 'name')
            pageHidden = objectGet(page, 'hidden')
            pageType = objectGet(page, 'type')
            pageTypeKey = arrayGet(objectKeys(pageType), 0)
            pageNavigable = pageTypeKey != 'link'

            # Hidden page?
            if pageHidden:
                continue
            endif

            # Render the menu link
            if pageTypeKey == 'link':
                pageLinkURL = objectGet(objectGet(pageType, 'link'), 'url')
                arrayPush(menuItems, '[' + markdownEscape(pageName) + '](' + urlEncode(pageLinkURL) + ')')
            elif pageName == objectGet(curPage, 'name'):
                arrayPush(menuItems, markdownEscape(pageName))
            else:
                arrayPush(menuItems, argsLink(arguments, pageName, {'page': pageName}))
            endif
        endfor
        markdownPrint(arrayJoin(menuItems, '&nbsp;|&nbsp;'), '')
    endif

    # Render the start/next/prev buttons
    if !optionHideNav && (nextPageName != null || prevPageName != null):
        navItems = []
        arrayPush(navItems, \
            if(startPageName != curPageName, argsLink(arguments, 'Start', {'page': startPageName}), 'Start'))
        arrayPush(navItems, \
            if(prevPageName != null, argsLink(arguments, 'Previous', {'page': prevPageName}), 'Previous'))
        arrayPush(navItems, \
            if(nextPageName != null, argsLink(arguments, 'Next', {'page': nextPageName}), 'Next'))
        markdownPrint('(&nbsp;' + arrayJoin(navItems, '&nbsp;|&nbsp;') + '&nbsp;)', '')
    endif

    # Function page?
    curPageType = objectGet(curPage, 'type')
    curPageTypeKey = arrayGet(objectKeys(curPageType), 0)
    if curPageTypeKey == 'function':
        # Set the title
        title = objectGet(objectGet(curPageType, 'function'), 'title')
        if title != null:
            documentSetTitle(title)
            markdownPrint('# ' + markdownEscape(title), '')
        endif

        # Call the page function
        pageFn = objectGet(objectGet(curPageType, 'function'), 'function')
        pageFn(args)
    elif curPageTypeKey == 'markdown':
        # Fetch the Markdown text
        url = objectGet(objectGet(curPageType, 'markdown'), 'url')
        markdownText = systemFetch(url)
        if markdownText == null:
            markdownPrint('**Error:** Failed to load "' + url + '"')
        else:
            # Compute and set the page title
            markdownModel = markdownParse(markdownText)
            title = markdownTitle(markdownModel)
            if title == null:
                title = 'No Title'
            endif
            documentSetTitle(title)

            # Render the Markdown text
            markdownPrint('', markdownText)
        endif
    endif

    # Set the keydown handler
    if optionKeyboard:
        documentSetKeyDown(systemPartial(pagerKeyDown, arguments, curPageName, startPageName, endPageName, nextPageName, prevPageName))
    endif
endfunction


function pagerKeyDown(arguments, curPageName, startPageName, endPageName, nextPageName, prevPageName, event):
    key = objectGet(event, 'key')
    if key == 's' && startPageName != curPageName:
        # Start slide
        windowSetLocation(argsURL(arguments, {'page': startPageName}))
    elif key == 'e' && endPageName != curPageName:
        # End slide
        windowSetLocation(argsURL(arguments, {'page': endPageName}))
    elif key == 'n' && nextPageName:
        # Next page
        windowSetLocation(argsURL(arguments, {'page': nextPageName}))
    elif key == 'p' && prevPageName:
        # Previous page
        windowSetLocation(argsURL(arguments, {'page': prevPageName}))
    endif
endfunction
