"""Types for instrument monitor streaming updates."""

from __future__ import annotations

from collections.abc import Callable
from dataclasses import dataclass
from typing import TYPE_CHECKING, Literal

if TYPE_CHECKING:
    from quantify.visualization.instrument_monitor.models import ChangeEvent, Reading

# Differentiate between full warmup snapshots and incremental callback updates
InstrumentMonitorUpdateMode = Literal["snapshot", "delta"]


@dataclass(frozen=True, slots=True)
class InstrumentMonitorUpdate:
    """Bundle of readings produced by the ingestion pipeline.

    Parameters
    ----------
    mode
        ``"snapshot"`` for warmup snapshot passes, ``"delta"`` after warmup when
        updates originate from QCoDeS callbacks.
    readings
        The readings that were ingested in this batch.
    change_events
        Change events generated by the state store for this batch.
    current_state
        Callable that returns the latest full state when invoked. The callable is
        provided to allow lazy evaluation by consumers, avoiding unnecessary copies
        when the full state is not required.

    """

    mode: InstrumentMonitorUpdateMode
    readings: list[Reading]
    change_events: list[ChangeEvent]
    current_state: Callable[[], list[Reading]]


# Handler signature used when streaming updates to external consumers
InstrumentMonitorUpdateHandler = Callable[[InstrumentMonitorUpdate], None]
