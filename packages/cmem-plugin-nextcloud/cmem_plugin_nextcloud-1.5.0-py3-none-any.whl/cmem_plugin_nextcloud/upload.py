"""Upload files workflow task"""

import mimetypes
import tempfile
from collections.abc import Sequence
from pathlib import Path

from cmem.cmempy.workspace.projects.resources.resource import get_resource_response
from cmem_plugin_base.dataintegration.context import (
    ExecutionContext,
    ExecutionReport,
)
from cmem_plugin_base.dataintegration.description import Icon, Plugin, PluginParameter
from cmem_plugin_base.dataintegration.entity import Entities
from cmem_plugin_base.dataintegration.parameter.password import Password, PasswordParameterType
from cmem_plugin_base.dataintegration.parameter.resource import ResourceParameterType
from cmem_plugin_base.dataintegration.plugins import WorkflowPlugin
from cmem_plugin_base.dataintegration.ports import (
    FixedNumberOfInputs,
    FixedSchemaPort,
    InputPorts,
)
from cmem_plugin_base.dataintegration.typed_entities.file import (
    File,
    FileEntitySchema,
    LocalFile,
    ProjectFile,
)
from cmem_plugin_base.dataintegration.utils import setup_cmempy_user_access
from nc_py_api import Nextcloud

from cmem_plugin_nextcloud.autocomplete import DirectoryParameterType


@Plugin(
    label="Upload files to Nextcloud",
    plugin_id="cmem_plugin_nextcloud-Upload",
    description="Upload files to a given Nextcloud instance.",
    documentation="""
This workflow task uploads files to a specified Nextcloud service instance.

Given the URL of the target Nextcloud instance along with your credentials, you can specify any
directory to which files should be uploaded.

### Input
If this workflow has an input, it will take the data that comes in instead of the selected source
file.

#### Important:
To establish a secure connection, you must generate a dedicated [app-specific password and username](https://docs.nextcloud.com/server/latest/user_manual/de/session_management.html)
in the Security section of your Nextcloud account settings. Do not use your standard login
credentials.
    """,
    icon=Icon(file_name="nextcloud-upload.svg", package=__package__),
    parameters=[
        PluginParameter(
            name="base_url",
            label="Nextcloud URL",
            description="The Base URL of your Nextcloud service, e.g. `https://cloud.example.com`.",
        ),
        PluginParameter(
            name="user",
            label="API identification",
            description="The identification generated by the app-password function in Nextcloud.",
        ),
        PluginParameter(
            name="token",
            label="API token",
            description="The token generated by the app-password function in Nextcloud.",
            param_type=PasswordParameterType(),
        ),
        PluginParameter(
            name="path",
            label="File or directory path",
            description="The path to a specific directory to which to upload files."
            "Leave empty or type '/' for root directory."
            "When pasting a directory path, select 'Custom entry:' to trigger autocompletion and"
            "check if the folder is recognized.",
            default_value="",
            param_type=DirectoryParameterType("directories", "Folder"),
        ),
        PluginParameter(
            name="source_file",
            label="File",
            description="The file which you would like to upload. If this is set, no connections "
            "in the workflow are allowed",
            param_type=ResourceParameterType(),
            advanced=True,
            default_value="",
        ),
    ],
)
class UploadFiles(WorkflowPlugin):
    """Nextcloud Workflow Plugin: Data uploading"""

    def __init__(
        self, base_url: str, user: str, token: Password | str, path: str, source_file: str
    ):
        self.base_url = base_url
        self.user = user
        self.token = token if isinstance(token, str) else token.decrypt()
        self.path = path
        self.source_file = source_file
        self.input_ports = self.initialise_input_ports()
        self.output_port = None
        self.no_upload = False
        self._nc = None

    @property
    def nc(self) -> Nextcloud:
        """Lazily initialize Nextcloud connection"""
        if self._nc is None:
            self._nc = Nextcloud(
                nextcloud_url=self.base_url, nc_auth_user=self.user, nc_auth_pass=str(self.token)
            )
        return self._nc

    def initialise_input_ports(self) -> InputPorts:
        """Initialise the input ports depending on weather a source file is given or not"""
        return (
            FixedNumberOfInputs([FixedSchemaPort(schema=FileEntitySchema())])
            if self.source_file == ""
            else FixedNumberOfInputs([])
        )

    def execute(self, inputs: Sequence[Entities], context: ExecutionContext) -> Entities:
        """Run the workflow operator"""
        schema = FileEntitySchema()
        files: list[File] = []

        if len(inputs) == 0:
            self.upload_no_input_port(context, files)

        else:
            self.upload_with_input_port(context, files, inputs)

        entities = [schema.to_entity(file) for file in files]

        context.report.update(
            ExecutionReport(
                entity_count=len(entities),
                operation="write",
                operation_desc="files uploaded",
                sample_entities=Entities(entities=iter(entities[:10]), schema=schema),
            )
        )

        return Entities(entities=iter(entities), schema=schema)

    def upload_with_input_port(
        self, context: ExecutionContext, files: list[File], inputs: Sequence[Entities]
    ) -> None:
        """Upload files from incoming connection in the workflow"""
        schema = FileEntitySchema()
        for entity in inputs[0].entities:
            try:
                if context.workflow.status() == "Canceling":
                    break
            except AttributeError:
                pass

            entity_file = schema.from_entity(entity)
            file_path = Path(entity_file.path)

            context.report.update(
                ExecutionReport(
                    entity_count=len(files),
                    operation="upload",
                    operation_desc=f"uploading {file_path}",
                )
            )

            if entity_file.file_type != "Local":
                setup_cmempy_user_access(context.user)
                file = get_resource_response(context.task.project_id(), str(file_path))
                if not self.no_upload:
                    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                        tmp_file.write(file.content)
                        tmp_file.seek(0)
                        with Path(tmp_file.name).open("rb") as f:
                            self.nc.files.upload_stream(path=f"{self.path}/{file_path.name}", fp=f)

            elif not self.no_upload:
                self.nc.files.upload_stream(path=f"{self.path}/{file_path.name}", fp=file_path)

            if entity_file.file_type == "Local":
                files.append(LocalFile(path=str(file_path), mime=entity_file.mime))
            elif entity_file.file_type == "Project":
                files.append(ProjectFile(path=str(file_path), mime=entity_file.mime))

    def upload_no_input_port(self, context: ExecutionContext, files: list[File]) -> None:
        """Upload file from selected source file"""
        if self.source_file != "":
            setup_cmempy_user_access(context.user)
            file = get_resource_response(context.task.project_id(), self.source_file)
            mime_type, _ = mimetypes.guess_type(self.source_file)
            context.report.update(
                ExecutionReport(
                    entity_count=len(files),
                    operation="upload",
                    operation_desc=f"uploading {self.source_file}",
                )
            )
            with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
                tmp_file.write(file.content)
                tmp_file.seek(0)
                with Path(tmp_file.name).open("rb") as f:
                    self.nc.files.upload_stream(path=f"{self.path}/{self.source_file}", fp=f)

            files.append(LocalFile(path=str(self.source_file), mime=mime_type))

        else:
            raise ValueError("No input was given to upload!")
