"""List files and directories workflow task"""

from collections.abc import Sequence

from cmem_plugin_base.dataintegration.context import (
    ExecutionContext,
    ExecutionReport,
)
from cmem_plugin_base.dataintegration.description import Icon, Plugin, PluginAction, PluginParameter
from cmem_plugin_base.dataintegration.entity import Entities, Entity, EntityPath, EntitySchema
from cmem_plugin_base.dataintegration.parameter.password import Password, PasswordParameterType
from cmem_plugin_base.dataintegration.plugins import WorkflowPlugin
from cmem_plugin_base.dataintegration.ports import (
    FixedNumberOfInputs,
    FixedSchemaPort,
)
from nc_py_api import Nextcloud

from cmem_plugin_nextcloud.actions import ResultPreview
from cmem_plugin_nextcloud.autocomplete import DirectoryParameterType
from cmem_plugin_nextcloud.retrieval import NextcloudRetrieval


@Plugin(
    label="List Nextcloud files",
    plugin_id="cmem_plugin_nextcloud-List",
    description="List directories and files from a given Nextcloud folder.",
    documentation="""
This workflow task creates a structured output from a specified Nextcloud
service instance.

Given the URL of the target Nextcloud instance along with your credentials, you can specify any
directory from which data should be extracted. Additionally, you may define file patterns to
include or exclude specific files within the selected directory.

#### Important:
To establish a secure connection, you must generate a dedicated [app-specific password and username](https://docs.nextcloud.com/server/latest/user_manual/de/session_management.html)
in the Security section of your Nextcloud account settings. Do not use your standard login
credentials.
    """,
    icon=Icon(file_name="nextcloud-list.svg", package=__package__),
    actions=[
        PluginAction(
            name="result_preview",
            label="Preview (max. 10)",
            description="Lists 10 entries based on the current configuration.",
        )
    ],
    parameters=[
        PluginParameter(
            name="base_url",
            label="Nextcloud URL",
            description="The Base URL of your Nextcloud service, e.g. `https://cloud.example.com`.",
        ),
        PluginParameter(
            name="user",
            label="API identification",
            description="The identification generated by the app-password function in Nextcloud.",
        ),
        PluginParameter(
            name="token",
            label="API token",
            description="The token generated by the app-password function in Nextcloud.",
            param_type=PasswordParameterType(),
        ),
        PluginParameter(
            name="path",
            label="File or directory path",
            description="The path of a specific file or directory that needs to be transformed. "
            "Includes all the subdirectories. Leave empty or type '/' for root directory."
            "When pasting a directory path, select 'Custom entry:' to trigger autocompletion and"
            "check if the folder is recognized.",
            default_value="",
            param_type=DirectoryParameterType("directories", "Folder"),
        ),
        PluginParameter(
            name="file_expression",
            label="File expression using *",
            description="A filepath for searching specified files through the given path."
            "Leave blank for all file types."
            "E.g. searching for *.txt results in all .txt files under the given "
            "directory and its subdirectories.",
            default_value="",
        ),
        PluginParameter(
            name="error_on_empty_result",
            label="Error on empty result",
            description="A flag indicating weather an empty output will throw an error.",
        ),
        PluginParameter(
            name="no_subfolder",
            label="Exclude files in subfolders.",
            description="A flag indicating whether files located in subfolders should be excluded"
            " from the workflow.",
        ),
    ],
)
class ListFiles(WorkflowPlugin):
    """Nextcloud Workflow Plugin: Data loading"""

    def __init__(  # noqa: PLR0913
        self,
        base_url: str,
        user: str,
        token: Password | str,
        path: str,
        file_expression: str,
        error_on_empty_result: bool = False,
        no_subfolder: bool = False,
    ) -> None:
        self.base_url = base_url
        self.user = user
        self.token = token if isinstance(token, str) else token.decrypt()
        self.path = path
        self.file_expression = file_expression
        self.input_ports = FixedNumberOfInputs([])
        self.output_port = FixedSchemaPort(schema=self.generate_schema())
        self.error_on_empty_result = error_on_empty_result
        self.no_subfolder = no_subfolder
        self._nc = None

    @property
    def nc(self) -> Nextcloud:
        """Lazily initialize Nextcloud connection"""
        if self._nc is None:
            self._nc = Nextcloud(
                nextcloud_url=self.base_url, nc_auth_user=self.user, nc_auth_pass=str(self.token)
            )
        return self._nc

    def result_preview(self) -> str:
        """Plugin Action to preview the results"""
        rp = ResultPreview(
            nc=self.nc,
            path=self.path,
            file_expression=self.file_expression,
            no_subfolder=self.no_subfolder,
            error_on_empty_result=self.error_on_empty_result,
            only_files=self.file_expression != "",
        )
        return rp.result_preview()

    @staticmethod
    def generate_schema() -> EntitySchema:
        """Provide the schema. Very important that linksTo stays as last argument"""
        return EntitySchema(
            type_uri="",
            paths=[
                EntityPath(path="id"),
                EntityPath(path="type"),
                EntityPath(path="user_path"),
                EntityPath(path="name"),
                EntityPath(path="is_shared"),
                EntityPath(path="full_path"),
                EntityPath(path="is_creatable"),
                EntityPath(path="is_deletable"),
                EntityPath(path="is_mounted"),
                EntityPath(path="is_readable"),
                EntityPath(path="is_shareable"),
                EntityPath(path="is_updatable"),
                EntityPath(path="size"),
                EntityPath(path="content_length"),
                EntityPath(path="creation_date"),
                EntityPath(path="last_modified"),
                EntityPath(path="permissions"),
                EntityPath(path="mimetype"),
                EntityPath(path="child_of"),
            ],
        )

    def execute(self, inputs: Sequence[Entities], context: ExecutionContext) -> Entities:  # noqa: ARG002
        """Run the workflow operator."""
        entities = []
        context.report.update(
            ExecutionReport(entity_count=0, operation="wait", operation_desc="files listed.")
        )
        ncr = NextcloudRetrieval(
            nc=self.nc,
            file_expression=self.file_expression,
            error_on_empty_result=self.error_on_empty_result,
        )
        files = ncr.listdir_parallel(
            files=[],
            context=context,
            directory=self.path,
            depth=1 if self.no_subfolder else -1,
        )

        context.report.update(
            ExecutionReport(
                entity_count=len(files), operation="wait", operation_desc="files listed."
            )
        )

        for result in files:
            entity_uri = f"{self.base_url}/index.php/apps/files?dir={result.user_path}"
            values = [
                [result.file_id],
                ["Folder" if result.is_dir else "File"],
                [result.user_path],
                [result.name],
                ["True" if result.is_shared else "False"],
                [result.full_path],
                ["True" if result.is_creatable else "False"],
                ["True" if result.is_deletable else "False"],
                ["True" if result.is_mounted else "False"],
                ["True" if result.is_readable else "False"],
                ["True" if result.is_shareable else "False"],
                ["True" if result.is_updatable else "False"],
                [str(result.info.size)],
                [str(result.info.content_length)],
                [str(result.info.creation_date)],
                [str(result.info.last_modified)],
                [str(result.info.permissions)],
                [str(result.info.mimetype)],
                [
                    result.user_path.replace(f"{result.name}/", "")
                    if result.is_dir
                    else result.user_path.replace(result.name, "")
                ],
            ]

            entities.append(Entity(uri=entity_uri, values=values))
            context.report.update(
                ExecutionReport(
                    entity_count=len(entities),
                    operation="write",
                    operation_desc="entities generated",
                )
            )

        context.report.update(
            ExecutionReport(
                entity_count=len(entities),
                operation="done",
                operation_desc="entities generated",
                sample_entities=Entities(
                    entities=iter(entities[:10]), schema=self.generate_schema()
                ),
            )
        )

        return Entities(entities=iter(entities), schema=self.generate_schema())
