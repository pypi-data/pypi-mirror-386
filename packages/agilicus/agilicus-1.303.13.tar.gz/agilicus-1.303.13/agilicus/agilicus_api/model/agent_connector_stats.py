"""
    Agilicus API

    Agilicus is API-first. Modern software is controlled by other software, is open, is available for you to use the way you want, securely, simply.  The OpenAPI Specification in YAML format is available on [www](https://www.agilicus.com/www/api/agilicus-openapi.yaml) for importing to other tools.  A rendered, online viewable and usable version of this specification is available at [api](https://www.agilicus.com/api). You may try the API inline directly in the web page. To do so, first obtain an Authentication Token (the simplest way is to install the Python SDK, and then run `agilicus-cli --issuer https://MYISSUER get-token`). You will need an org-id for most calls (and can obtain from `agilicus-cli --issuer https://MYISSUER list-orgs`). The `MYISSUER` will typically be `auth.MYDOMAIN`, and you will see it as you sign-in to the administrative UI.  This API releases on Bearer-Token authentication. To obtain a valid bearer token you will need to Authenticate to an Issuer with OpenID Connect (a superset of OAUTH2).  Your \"issuer\" will look like https://auth.MYDOMAIN. For example, when you signed-up, if you said \"use my own domain name\" and assigned a CNAME of cloud.example.com, then your issuer would be https://auth.cloud.example.com.  If you selected \"use an Agilicus supplied domain name\", your issuer would look like https://auth.myorg.agilicus.cloud.  For test purposes you can use our [Python SDK](https://pypi.org/project/agilicus/) and run `agilicus-cli --issuer https://auth.MYDOMAIN get-token`.  This API may be used in any language runtime that supports OpenAPI 3.0, or, you may use our [Python SDK](https://pypi.org/project/agilicus/), our [Typescript SDK](https://www.npmjs.com/package/@agilicus/angular), or our [Golang SDK](https://git.agilicus.com/pub/sdk-go).  100% of the activities in our system our API-driven, from our web-admin, through our progressive web applications, to all internals: there is nothing that is not accessible.  For more information, see [developer resources](https://www.agilicus.com/developer).   # noqa: E501

    The version of the OpenAPI document: 2025.10.21
    Contact: dev@agilicus.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from agilicus_api.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from agilicus_api.exceptions import ApiAttributeError


def lazy_import():
    from agilicus_api.model.agent_connector_authz_stats import AgentConnectorAuthzStats
    from agilicus_api.model.agent_connector_proxy_stats import AgentConnectorProxyStats
    from agilicus_api.model.agent_connector_share_stats import AgentConnectorShareStats
    from agilicus_api.model.agent_connector_specific_stats import AgentConnectorSpecificStats
    from agilicus_api.model.agent_connector_system_stats import AgentConnectorSystemStats
    from agilicus_api.model.agent_connector_transport_stats import AgentConnectorTransportStats
    from agilicus_api.model.agent_connector_user_stats import AgentConnectorUserStats
    from agilicus_api.model.application_service_stats_group import ApplicationServiceStatsGroup
    from agilicus_api.model.application_stats_list import ApplicationStatsList
    from agilicus_api.model.connector_diagnostic_stats import ConnectorDiagnosticStats
    from agilicus_api.model.connector_stats import ConnectorStats
    from agilicus_api.model.connector_stats_metadata import ConnectorStatsMetadata
    from agilicus_api.model.file_share_service_stats_group import FileShareServiceStatsGroup
    from agilicus_api.model.service_forwarder_stats_group import ServiceForwarderStatsGroup
    globals()['AgentConnectorAuthzStats'] = AgentConnectorAuthzStats
    globals()['AgentConnectorProxyStats'] = AgentConnectorProxyStats
    globals()['AgentConnectorShareStats'] = AgentConnectorShareStats
    globals()['AgentConnectorSpecificStats'] = AgentConnectorSpecificStats
    globals()['AgentConnectorSystemStats'] = AgentConnectorSystemStats
    globals()['AgentConnectorTransportStats'] = AgentConnectorTransportStats
    globals()['AgentConnectorUserStats'] = AgentConnectorUserStats
    globals()['ApplicationServiceStatsGroup'] = ApplicationServiceStatsGroup
    globals()['ApplicationStatsList'] = ApplicationStatsList
    globals()['ConnectorDiagnosticStats'] = ConnectorDiagnosticStats
    globals()['ConnectorStats'] = ConnectorStats
    globals()['ConnectorStatsMetadata'] = ConnectorStatsMetadata
    globals()['FileShareServiceStatsGroup'] = FileShareServiceStatsGroup
    globals()['ServiceForwarderStatsGroup'] = ServiceForwarderStatsGroup


class AgentConnectorStats(ModelComposed):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('overall_status',): {
            'GOOD': "good",
            'WARN': "warn",
            'DOWN': "down",
            'STALE': "stale",
        },
    }

    validations = {
    }

    @property
    def metadata(self):
       return self.get("metadata")

    @metadata.setter
    def metadata(self, new_value):
       self.metadata = new_value

    @property
    def overall_status(self):
       return self.get("overall_status")

    @overall_status.setter
    def overall_status(self, new_value):
       self.overall_status = new_value

    @property
    def overall_status_info(self):
       return self.get("overall_status_info")

    @overall_status_info.setter
    def overall_status_info(self, new_value):
       self.overall_status_info = new_value

    @property
    def forwarder_stats(self):
       return self.get("forwarder_stats")

    @forwarder_stats.setter
    def forwarder_stats(self, new_value):
       self.forwarder_stats = new_value

    @property
    def app_service_stats(self):
       return self.get("app_service_stats")

    @app_service_stats.setter
    def app_service_stats(self, new_value):
       self.app_service_stats = new_value

    @property
    def share_service_stats(self):
       return self.get("share_service_stats")

    @share_service_stats.setter
    def share_service_stats(self, new_value):
       self.share_service_stats = new_value

    @property
    def diagnostic_stats(self):
       return self.get("diagnostic_stats")

    @diagnostic_stats.setter
    def diagnostic_stats(self, new_value):
       self.diagnostic_stats = new_value

    @property
    def system(self):
       return self.get("system")

    @system.setter
    def system(self, new_value):
       self.system = new_value

    @property
    def transport(self):
       return self.get("transport")

    @transport.setter
    def transport(self, new_value):
       self.transport = new_value

    @property
    def shares(self):
       return self.get("shares")

    @shares.setter
    def shares(self, new_value):
       self.shares = new_value

    @property
    def authz(self):
       return self.get("authz")

    @authz.setter
    def authz(self, new_value):
       self.authz = new_value

    @property
    def proxy(self):
       return self.get("proxy")

    @proxy.setter
    def proxy(self, new_value):
       self.proxy = new_value

    @property
    def user(self):
       return self.get("user")

    @user.setter
    def user(self, new_value):
       self.user = new_value

    @property
    def application_stats(self):
       return self.get("application_stats")

    @application_stats.setter
    def application_stats(self, new_value):
       self.application_stats = new_value

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'metadata': (ConnectorStatsMetadata,),  # noqa: E501
            'overall_status': (str,),  # noqa: E501
            'system': (AgentConnectorSystemStats,),  # noqa: E501
            'transport': (AgentConnectorTransportStats,),  # noqa: E501
            'overall_status_info': ([str],),  # noqa: E501
            'forwarder_stats': (ServiceForwarderStatsGroup,),  # noqa: E501
            'app_service_stats': (ApplicationServiceStatsGroup,),  # noqa: E501
            'share_service_stats': (FileShareServiceStatsGroup,),  # noqa: E501
            'diagnostic_stats': (ConnectorDiagnosticStats,),  # noqa: E501
            'shares': (AgentConnectorShareStats,),  # noqa: E501
            'authz': (AgentConnectorAuthzStats,),  # noqa: E501
            'proxy': (AgentConnectorProxyStats,),  # noqa: E501
            'user': (AgentConnectorUserStats,),  # noqa: E501
            'application_stats': (ApplicationStatsList,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None



    attribute_map = {
        'metadata': 'metadata',  # noqa: E501
        'overall_status': 'overall_status',  # noqa: E501
        'system': 'system',  # noqa: E501
        'transport': 'transport',  # noqa: E501
        'overall_status_info': 'overall_status_info',  # noqa: E501
        'forwarder_stats': 'forwarder_stats',  # noqa: E501
        'app_service_stats': 'app_service_stats',  # noqa: E501
        'share_service_stats': 'share_service_stats',  # noqa: E501
        'diagnostic_stats': 'diagnostic_stats',  # noqa: E501
        'shares': 'shares',  # noqa: E501
        'authz': 'authz',  # noqa: E501
        'proxy': 'proxy',  # noqa: E501
        'user': 'user',  # noqa: E501
        'application_stats': 'application_stats',  # noqa: E501
    }

    read_only_vars = {
    }

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """AgentConnectorStats - a model defined in OpenAPI

        Keyword Args:
            metadata (ConnectorStatsMetadata):
            overall_status (str): The summary status of the Connector. - A `good` status means that no action is neccessary on this Connector - A `warn` status means that there is an issue that should be dealt with   Examples include connections restarting frequently. - A `down` status indicates that there is a service accessibility problem   that should be dealt with as soon as possible. This could mean that there is a   problem with the Connector's configuration, or the platform. - A `stale` status indicates that although there may not be anything wrong,   we haven't been able to update the status recently. This may indicate   a communications issue between Agilicus and the Connector. 
            system (AgentConnectorSystemStats):
            transport (AgentConnectorTransportStats):
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            overall_status_info ([str]): A list of strings that provide more info to further identify the reason for a particular overall_status. For example, if the overall_status is `warn`, an entry in this array would provide more details as to its reason. . [optional]  # noqa: E501
            forwarder_stats (ServiceForwarderStatsGroup): [optional]  # noqa: E501
            app_service_stats (ApplicationServiceStatsGroup): [optional]  # noqa: E501
            share_service_stats (FileShareServiceStatsGroup): [optional]  # noqa: E501
            diagnostic_stats (ConnectorDiagnosticStats): [optional]  # noqa: E501
            shares (AgentConnectorShareStats): [optional]  # noqa: E501
            authz (AgentConnectorAuthzStats): [optional]  # noqa: E501
            proxy (AgentConnectorProxyStats): [optional]  # noqa: E501
            user (AgentConnectorUserStats): [optional]  # noqa: E501
            application_stats (ApplicationStatsList): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self, from_openapi_data=True)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)

        return self


    def __python_set(val):
        return set(val)
 
    required_properties = __python_set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
        '_composed_instances',
        '_var_name_to_model_instances',
        '_additional_properties_model_instances',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """AgentConnectorStats - a model defined in OpenAPI

        Keyword Args:
            metadata (ConnectorStatsMetadata):
            overall_status (str): The summary status of the Connector. - A `good` status means that no action is neccessary on this Connector - A `warn` status means that there is an issue that should be dealt with   Examples include connections restarting frequently. - A `down` status indicates that there is a service accessibility problem   that should be dealt with as soon as possible. This could mean that there is a   problem with the Connector's configuration, or the platform. - A `stale` status indicates that although there may not be anything wrong,   we haven't been able to update the status recently. This may indicate   a communications issue between Agilicus and the Connector. 
            system (AgentConnectorSystemStats):
            transport (AgentConnectorTransportStats):
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            overall_status_info ([str]): A list of strings that provide more info to further identify the reason for a particular overall_status. For example, if the overall_status is `warn`, an entry in this array would provide more details as to its reason. . [optional]  # noqa: E501
            forwarder_stats (ServiceForwarderStatsGroup): [optional]  # noqa: E501
            app_service_stats (ApplicationServiceStatsGroup): [optional]  # noqa: E501
            share_service_stats (FileShareServiceStatsGroup): [optional]  # noqa: E501
            diagnostic_stats (ConnectorDiagnosticStats): [optional]  # noqa: E501
            shares (AgentConnectorShareStats): [optional]  # noqa: E501
            authz (AgentConnectorAuthzStats): [optional]  # noqa: E501
            proxy (AgentConnectorProxyStats): [optional]  # noqa: E501
            user (AgentConnectorUserStats): [optional]  # noqa: E501
            application_stats (ApplicationStatsList): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        constant_args = {
            '_check_type': _check_type,
            '_path_to_item': _path_to_item,
            '_spec_property_naming': _spec_property_naming,
            '_configuration': _configuration,
            '_visited_composed_classes': self._visited_composed_classes,
        }
        composed_info = validate_get_composed_info(
            constant_args, kwargs, self)
        self._composed_instances = composed_info[0]
        self._var_name_to_model_instances = composed_info[1]
        self._additional_properties_model_instances = composed_info[2]
        discarded_args = composed_info[3]

        for var_name, var_value in kwargs.items():
            if var_name in discarded_args and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self._additional_properties_model_instances:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")


    @cached_property
    def _composed_schemas():
        # we need this here to make our import statements work
        # we must store _composed_schemas in here so the code is only run
        # when we invoke this method. If we kept this at the class
        # level we would get an error beause the class level
        # code would be run when this module is imported, and these composed
        # classes don't exist yet because their module has not finished
        # loading
        lazy_import()
        return {
          'anyOf': [
          ],
          'allOf': [
              AgentConnectorSpecificStats,
              ConnectorStats,
          ],
          'oneOf': [
          ],
        }
