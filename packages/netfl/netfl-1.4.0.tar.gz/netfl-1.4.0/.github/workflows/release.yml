name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: read
  id-token: write
  packages: write

concurrency:
  group: pypi-pipeline-${{ github.ref }}
  cancel-in-progress: true

jobs:
  verify-ci:
    name: Verify CI Passed
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Check CI status
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Checking CI status for commit ${{ github.sha }}..."
          
          for i in {1..6}; do
            echo "Attempt $i/6: Checking CI status..."
            
            RUNS=$(gh run list --commit ${{ github.sha }} --json name,conclusion,status | jq -c '[.[] | select(.name | test("CI|ci|test|build"; "i"))]')
            
            echo "CI runs: $RUNS"
            
            if [ "$(echo "$RUNS" | jq 'length')" -eq 0 ]; then
              echo "No CI runs found, retrying in 60s (attempt $i/6)"
              sleep 60
            elif echo "$RUNS" | jq -e 'any(.conclusion == "success")' > /dev/null; then
              echo "CI passed successfully"
              exit 0
            elif echo "$RUNS" | jq -e 'any(.status == "in_progress" or .status == "queued")' > /dev/null; then
              echo "CI still running... retrying in 60s (attempt $i/6)"
              sleep 60
            else
              echo "CI did not pass or was not found"
              exit 1
            fi
          done
          
          echo "CI did not complete within the timeout period"
          exit 1

  pypi-publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: verify-ci
    if: startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-publish-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-publish-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  docker-publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: pypi-publish
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/netfl:latest
          ${{ secrets.DOCKER_USERNAME }}/netfl:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.source=${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/netfl:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/netfl:buildcache,mode=max
