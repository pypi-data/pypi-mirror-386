name: CI Pipeline

on:
  push:
    branches: ['**']
    tags: ['v*.*.*']
  pull_request:
    branches: ['**']

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ]; then
            echo "Installing dependencies from pyproject.toml..."
            pip install .
          else
            echo "No dependency file found, skipping project dependencies"
          fi

      - name: Install linting
        run: |
          pip install flake8 black

      - name: Run linting
        run: |
          echo "Running flake8 linter..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=12 --ignore=E501,F541 --statistics

      - name: Run formatting
        run: |
          echo "Checking code formatting with Black..."
          black --check --diff --color .

  test:
    name: Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f pyproject.toml ]; then
            echo "Installing package and dependencies from pyproject.toml..."
            pip install .
          else
            echo "No dependency configuration found"
          fi

      - name: Run tests
        run: |
          set +e
          echo "Running pytest with coverage..."
          pytest --cov=netfl --cov-report=term --cov-report=xml --cov-report=html -v
          EXIT_CODE=$?
          if [ $EXIT_CODE -eq 5 ]; then
            echo "No tests found, passing pipeline."
            exit 0
          elif [ $EXIT_CODE -ne 0 ]; then
            echo "Tests failed with exit code $EXIT_CODE"
            exit $EXIT_CODE
          else
            echo "All tests passed!"
            exit 0
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-build-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-build-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f pyproject.toml ]; then
            echo "Installing package from pyproject.toml..."
            pip install .
          fi

      - name: Build package
        run: |
          echo "Detecting build system..."
          
          if [ -f pyproject.toml ] && grep -q "poetry" pyproject.toml; then
            echo "Poetry project detected"
            pip install poetry
            poetry build
            echo "BUILD_SYSTEM=poetry" >> $GITHUB_ENV
            echo "DIST_PATH=dist/" >> $GITHUB_ENV
          elif [ -f pyproject.toml ]; then
            echo "PEP 517 project detected (pyproject.toml)"
            pip install build
            python -m build
            echo "BUILD_SYSTEM=build" >> $GITHUB_ENV
            echo "DIST_PATH=dist/" >> $GITHUB_ENV
          elif [ -f setup.py ]; then
            echo "Setuptools project detected (setup.py)"
            pip install wheel setuptools
            python setup.py sdist bdist_wheel
            echo "BUILD_SYSTEM=setuptools" >> $GITHUB_ENV
            echo "DIST_PATH=dist/" >> $GITHUB_ENV
          else
            echo "No build configuration found (setup.py or pyproject.toml)"
            echo "Skipping package build"
            echo "BUILD_SYSTEM=none" >> $GITHUB_ENV
          fi
