"""Helper functions for BYOK system"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utils/helpers.ipynb.

# %% auto 0
__all__ = ['get_provider_info', 'format_provider_name', 'format_key_age', 'format_expiration', 'get_key_summary', 'get_env_key',
           'import_from_env']

# %% ../../nbs/utils/helpers.ipynb 3
from typing import Dict, List, Optional, Any
from datetime import datetime, timedelta
import re

from ..core.security import mask_key, get_key_fingerprint

# %% ../../nbs/utils/helpers.ipynb 5
def get_provider_info(
    provider: str,  # Provider identifier
    provider_config: Optional[Dict[str, Any]] = None  # Optional provider configuration
) -> Dict[str, Any]:  # Provider info dict with defaults
    """Get provider information from config or generate defaults."""
    if provider_config and provider in provider_config:
        return provider_config[provider]
    
    # Generate sensible defaults based on provider name
    return {
        'name': provider.replace('_', ' ').replace('-', ' ').title(),
        'key_prefix': None,
        'docs_url': None,
        'placeholder': f'Enter your {provider.replace("_", " ").replace("-", " ").title()} API key'
    }

# %% ../../nbs/utils/helpers.ipynb 7
def format_provider_name(
    provider: str,  # Provider identifier
    provider_config: Optional[Dict[str, Any]] = None  # Optional provider configuration
) -> str:  # Formatted provider name
    """Format provider name for display."""
    info = get_provider_info(provider, provider_config)
    return info['name']

# %% ../../nbs/utils/helpers.ipynb 8
def format_key_age(
    created_at: datetime  # When the key was created
) -> str:  # Human-readable age string
    """Format the age of a key for display."""
    age = datetime.now() - created_at
    
    if age.days > 30:
        months = age.days // 30
        return f"{months} month{'s' if months > 1 else ''} ago"
    elif age.days > 0:
        return f"{age.days} day{'s' if age.days > 1 else ''} ago"
    elif age.seconds > 3600:
        hours = age.seconds // 3600
        return f"{hours} hour{'s' if hours > 1 else ''} ago"
    elif age.seconds > 60:
        minutes = age.seconds // 60
        return f"{minutes} minute{'s' if minutes > 1 else ''} ago"
    else:
        return "Just now"

# %% ../../nbs/utils/helpers.ipynb 9
def format_expiration(
    expires_at: Optional[datetime]  # Expiration datetime
) -> str:  # Human-readable expiration string
    """Format expiration time for display."""
    if not expires_at:
        return "Never"
    
    if expires_at <= datetime.now():
        return "Expired"
    
    remaining = expires_at - datetime.now()
    
    if remaining.days > 0:
        return f"Expires in {remaining.days} day{'s' if remaining.days > 1 else ''}"
    elif remaining.seconds > 3600:
        hours = remaining.seconds // 3600
        return f"Expires in {hours} hour{'s' if hours > 1 else ''}"
    else:
        minutes = remaining.seconds // 60
        return f"Expires in {minutes} minute{'s' if minutes > 1 else ''}"

# %% ../../nbs/utils/helpers.ipynb 11
def get_key_summary(
    byok_manager,  # BYOK manager instance
    request,  # FastHTML request
    user_id: Optional[str] = None,  # Optional user ID
    provider_config: Optional[Dict[str, Any]] = None  # Optional provider configuration
) -> Dict[str, Any]:  # Summary dictionary with provider info
    """Get a summary of all stored keys."""
    providers = byok_manager.list_providers(request, user_id)
    summary = []
    
    for provider in providers:
        # Get the key metadata (without decrypting)
        key_obj = byok_manager.storage.retrieve(request, provider, user_id)
        if key_obj:
            # Get the actual key for masking
            actual_key = byok_manager.get_key(request, provider, user_id)
            
            summary.append({
                'provider': provider,
                'display_name': format_provider_name(provider, provider_config),
                'masked_key': mask_key(actual_key) if actual_key else 'N/A',
                'fingerprint': get_key_fingerprint(actual_key) if actual_key else 'N/A',
                'created': format_key_age(key_obj.created_at),
                'expires': format_expiration(key_obj.expires_at),
                'is_expired': key_obj.is_expired
            })
    
    return {
        'count': len(summary),
        'keys': summary
    }

# %% ../../nbs/utils/helpers.ipynb 13
def get_env_key(
    provider: str,  # Provider name
    env_prefix: str = "API_KEY_"  # Environment variable prefix
) -> Optional[str]:  # API key from environment or None
    """Get an API key from environment variables."""
    import os
    env_var = f"{env_prefix}{provider.upper()}"
    return os.environ.get(env_var)

# %% ../../nbs/utils/helpers.ipynb 14
def import_from_env(
    byok_manager,  # BYOK manager instance
    request,  # FastHTML request
    providers: List[str],  # List of providers to check
    user_id: Optional[str] = None,  # Optional user ID
    env_prefix: str = "API_KEY_"  # Environment variable prefix
) -> Dict[str, bool]:  # Dict of provider: success status
    """Import API keys from environment variables."""
    results = {}
    
    for provider in providers:
        key = get_env_key(provider, env_prefix)
        if key:
            try:
                byok_manager.set_key(request, provider, key, user_id)
                results[provider] = True
            except Exception:
                results[provider] = False
        else:
            results[provider] = False
    
    return results
