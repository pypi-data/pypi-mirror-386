"""FastHTML alert and notification components for user feedback"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/components/alerts.ipynb.

# %% auto 0
__all__ = ['InfoIcon', 'SuccessIcon', 'WarningIcon', 'ErrorIcon', 'Alert', 'SecurityAlert', 'KeyStatusNotification',
           'ToastContainer', 'Toast', 'ValidationMessage', 'AlertStack']

# %% ../../nbs/components/alerts.ipynb 3
from typing import Optional, Literal, Union
from fasthtml.common import Div, Span, Button, P, FT
from fasthtml.svg import Svg, Path, Circle, Polyline, Line, G

# daisyUI imports
from cjm_fasthtml_daisyui.components.feedback.alert import alert, alert_colors, alert_styles
from cjm_fasthtml_daisyui.components.feedback.toast import toast, toast_placement
from cjm_fasthtml_daisyui.components.actions.button import btn, btn_sizes, btn_colors, btn_styles
from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors

# Tailwind imports  
from cjm_fasthtml_tailwind.utilities.sizing import h, w
from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import shrink, gap, flex_display, items, justify
from cjm_fasthtml_tailwind.utilities.effects import opacity
from cjm_fasthtml_tailwind.core.base import combine_classes

# daisyUI semantic colors for SVG icons
from cjm_fasthtml_daisyui.utilities.semantic_colors import stroke_dui, fill_dui

# %% ../../nbs/components/alerts.ipynb 4
from fasthtml.jupyter import HTMX
from cjm_fasthtml_daisyui.core.testing import create_test_app, create_test_page, start_test_server
from cjm_fasthtml_daisyui.core.themes import DaisyUITheme
from IPython.display import display

# %% ../../nbs/components/alerts.ipynb 6
def InfoIcon(
    size: str = "6"  # Size of the icon (matches Tailwind h-{size} and w-{size} classes)
) -> FT:  # SVG element for the info icon
    """Create an info icon SVG."""
    return Svg(
        Path(
            stroke_linecap="round",
            stroke_linejoin="round",
            stroke_width="2",
            d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
        ),
        xmlns="http://www.w3.org/2000/svg",
        fill="none",
        viewBox="0 0 24 24",
        cls=combine_classes(stroke_dui.info_content, h(size), w(size), shrink._0)
    )

def SuccessIcon(
    size: str = "6"  # Size of the icon (matches Tailwind h-{size} and w-{size} classes)
) -> FT:  # SVG element for the success icon
    """Create a success/check icon SVG."""
    return Svg(
        Path(
            stroke_linecap="round",
            stroke_linejoin="round",
            stroke_width="2",
            d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
        ),
        xmlns="http://www.w3.org/2000/svg",
        fill="none",
        viewBox="0 0 24 24",
        cls=combine_classes(stroke_dui.success_content, h(size), w(size), shrink._0)
    )

def WarningIcon(
    size: str = "6"  # Size of the icon (matches Tailwind h-{size} and w-{size} classes)
) -> FT:  # SVG element for the warning icon
    """Create a warning/exclamation icon SVG."""
    return Svg(
        Path(
            stroke_linecap="round",
            stroke_linejoin="round",
            stroke_width="2",
            d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
        ),
        xmlns="http://www.w3.org/2000/svg",
        fill="none",
        viewBox="0 0 24 24",
        cls=combine_classes(stroke_dui.warning_content, h(size), w(size), shrink._0)
    )

def ErrorIcon(
    size: str = "6"  # Size of the icon (matches Tailwind h-{size} and w-{size} classes)
) -> FT:  # SVG element for the error icon
    """Create an error/X icon SVG."""
    return Svg(
        Path(
            stroke_linecap="round",
            stroke_linejoin="round",
            stroke_width="2",
            d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
        ),
        xmlns="http://www.w3.org/2000/svg",
        fill="none",
        viewBox="0 0 24 24",
        cls=combine_classes(stroke_dui.error_content, h(size), w(size), shrink._0)
    )

# %% ../../nbs/components/alerts.ipynb 8
def Alert(
    message: str,  # The alert message
    kind: Literal["info", "success", "warning", "error"] = "info",
    title: Optional[str] = None,  # Optional title for the alert
    dismissible: bool = False,  # Whether the alert can be dismissed
    show_icon: bool = True,  # Whether to show an icon
    style: Optional[str] = None,  # Alert style ("soft", "outline", or None for default)
    id: Optional[str] = None  # HTML ID for the alert element
) -> FT:  # Alert component
    """Create an alert component for displaying messages."""
    # Select appropriate icon
    icon = None
    if show_icon:
        if kind == "success":
            icon = SuccessIcon()
        elif kind == "warning":
            icon = WarningIcon()
        elif kind == "error":
            icon = ErrorIcon()
        else:
            icon = InfoIcon()
    
    # Select color
    color_class = getattr(alert_colors, kind, alert_colors.info)
    
    # Select style
    style_class = None
    if style == "soft":
        style_class = alert_styles.soft
    elif style == "outline":
        style_class = alert_styles.outline
    
    # Build content
    content = []
    if icon:
        content.append(icon)
    
    # Add title and message
    text_content = []
    if title:
        from cjm_fasthtml_tailwind.utilities.typography import font_weight
        text_content.append(Div(title, cls=str(font_weight.bold)))
    text_content.append(Span(message))
    
    content.append(Div(*text_content))
    
    # Add dismiss button if needed
    if dismissible:
        from cjm_fasthtml_tailwind.utilities.svg import stroke
        dismiss_btn = Button(
            Svg(
                Path(
                    stroke_linecap="round",
                    stroke_linejoin="round",
                    stroke_width="2",
                    d="M6 18L18 6M6 6l12 12"
                ),
                xmlns="http://www.w3.org/2000/svg",
                fill="none",
                viewBox="0 0 24 24",
                cls=combine_classes(stroke.current, h._4, w._4)
            ),
            cls=combine_classes(btn, btn_styles.ghost, btn_sizes.xs),
            onclick=f"document.getElementById('{id or 'alert'}').remove()" if id else "this.parentElement.remove()"
        )
        content.append(dismiss_btn)
    
    # Combine classes
    classes = [alert]
    if color_class:
        classes.append(color_class)
    if style_class:
        classes.append(style_class)
    
    return Div(
        *content,
        role="alert",
        cls=combine_classes(*classes),
        id=id
    )

# %% ../../nbs/components/alerts.ipynb 11
def SecurityAlert(
    message: str,  # Security alert message
    severity: Literal["low", "medium", "high", "critical"] = "medium",
    action_url: Optional[str] = None,  # Optional URL for remediation action
    action_text: str = "Fix Now"  # Text for the action button
) -> FT:  # Security alert component
    """Create a security-focused alert with severity levels."""
    from cjm_fasthtml_tailwind.utilities.typography import font_weight
    from cjm_fasthtml_tailwind.utilities.spacing import m
    
    # Map severity to alert type
    severity_map = {
        "low": "info",
        "medium": "warning",
        "high": "error",
        "critical": "error"
    }
    
    kind = severity_map.get(severity, "warning")
    
    # Build content
    content = [
        Div(
            Span("Security Alert", cls=str(font_weight.bold)),
            Span(f" - {severity.upper()}", cls=combine_classes(
                badge,
                badge_colors.error if severity in ["high", "critical"] else badge_colors.warning,
                m.l(2)
            ))
        ),
        P(message, cls=str(m.t(2)))
    ]
    
    # Add action button if URL provided
    if action_url:
        content.append(
            Div(
                Button(
                    action_text,
                    cls=combine_classes(
                        btn,
                        btn_colors.error if severity in ["high", "critical"] else btn_colors.warning,
                        btn_sizes.sm,
                        m.t(2)
                    ),
                    onclick=f"window.location.href='{action_url}'"
                )
            )
        )
    
    # Build custom alert directly instead of modifying Alert
    icon = WarningIcon() if severity != "critical" else ErrorIcon()
    
    return Div(
        icon,
        Div(*content),
        role="alert",
        cls=combine_classes(
            alert,
            alert_colors.error if severity in ["high", "critical"] else alert_colors.warning
        )
    )

# %% ../../nbs/components/alerts.ipynb 14
def KeyStatusNotification(
    provider: str,  # Provider name
    status: Literal["added", "updated", "deleted", "expired", "invalid"],
    masked_key: Optional[str] = None,  # Masked version of the key
    auto_dismiss: bool = True,  # Whether to auto-dismiss
    dismiss_after: int = 5000  # Milliseconds before auto-dismiss
) -> FT:  # Key status notification component
    """Create a notification for API key status changes."""
    from cjm_fasthtml_byok.utils.helpers import format_provider_name
    
    provider_name = format_provider_name(provider)
    
    # Define status configurations
    status_config = {
        "added": ("success", f"{provider_name} API key added successfully", SuccessIcon),
        "updated": ("success", f"{provider_name} API key updated", SuccessIcon),
        "deleted": ("info", f"{provider_name} API key removed", InfoIcon),
        "expired": ("warning", f"{provider_name} API key has expired", WarningIcon),
        "invalid": ("error", f"{provider_name} API key is invalid", ErrorIcon)
    }
    
    kind, message, icon_func = status_config.get(status, ("info", "Key status changed", InfoIcon))
    
    # Add masked key if provided
    if masked_key and status in ["added", "updated"]:
        message += f" ({masked_key})"
    
    notification_id = f"notification-{provider}-{status}"
    
    # Create the alert element
    alert_elem = Alert(
        message,
        kind=kind,
        dismissible=True,
        show_icon=True,
        id=notification_id
    )
    
    # Add auto-dismiss functionality if enabled
    if auto_dismiss:
        from fasthtml.common import Script
        # Create a script element that runs immediately
        auto_dismiss_script = Script(
            f"setTimeout(() => document.getElementById('{notification_id}')?.remove(), {dismiss_after});"
        )
        
        # Return a new Div containing both the alert and the script
        return Div(
            alert_elem,
            auto_dismiss_script,
            id=f"{notification_id}-wrapper"
        )
    
    return alert_elem

# %% ../../nbs/components/alerts.ipynb 17
def ToastContainer(
    position: Literal["top", "middle", "bottom"] = "top",
    align: Literal["start", "center", "end"] = "end",
    id: str = "toast-container"  # HTML ID for the container
) -> FT:  # Toast container component
    """Create a container for toast notifications."""
    # Build position classes
    position_classes = []
    
    if position == "top":
        position_classes.append(toast_placement.top)
    elif position == "middle":
        position_classes.append(toast_placement.middle)
    else:
        position_classes.append(toast_placement.bottom)
    
    if align == "start":
        position_classes.append(toast_placement.start)
    elif align == "center":
        position_classes.append(toast_placement.center)
    else:
        position_classes.append(toast_placement.end)
    
    return Div(
        cls=combine_classes(toast, *position_classes),
        id=id
    )

# %% ../../nbs/components/alerts.ipynb 18
def Toast(
    message: str,  # Toast message
    kind: Literal["info", "success", "warning", "error"] = "info",
    duration: int = 3000  # Duration in milliseconds
) -> FT:  # Toast notification component
    """Create a toast notification."""
    from fasthtml.common import Script
    
    toast_id = f"toast-{id(message)}"
    
    return Div(
        Alert(
            message,
            kind=kind,
            dismissible=False,
            show_icon=True
        ),
        Script(
            f"setTimeout(() => document.getElementById('{toast_id}')?.remove(), {duration});"
        ),
        id=toast_id
    )

# %% ../../nbs/components/alerts.ipynb 22
def ValidationMessage(
    message: str,  # Validation message
    is_valid: bool = False,  # Whether the validation passed
    show_icon: bool = True  # Whether to show an icon
) -> FT:  # Validation message component
    """Create an inline validation message for form fields."""
    from cjm_fasthtml_daisyui.utilities.semantic_colors import text_dui, stroke_dui
    from cjm_fasthtml_tailwind.utilities.typography import font_size
    from cjm_fasthtml_tailwind.utilities.spacing import m
    from cjm_fasthtml_tailwind.utilities.svg import stroke as stroke_tw
    
    icon = None
    if show_icon:
        if is_valid:
            icon = Svg(
                Polyline(
                    points="20 6 9 17 4 12",
                    stroke_linecap="round",
                    stroke_linejoin="round",
                    stroke_width="2"
                ),
                xmlns="http://www.w3.org/2000/svg",
                fill="none",
                viewBox="0 0 24 24",
                cls=combine_classes(stroke_dui.success, h._4, w._4)
            )
        else:
            icon = Svg(
                Circle(cx="12", cy="12", r="10"),
                Line(x1="12", y1="8", x2="12", y2="12"),
                Line(x1="12", y1="16", x2="12.01", y2="16"),
                xmlns="http://www.w3.org/2000/svg",
                fill="none",
                viewBox="0 0 24 24",
                stroke="currentColor",
                stroke_width="2",
                cls=combine_classes(stroke_dui.error, h._4, w._4)
            )
    
    content = []
    if icon:
        content.append(icon)
    content.append(Span(message))
    
    return Div(
        *content,
        cls=combine_classes(
            flex_display,
            items.center,
            gap._1,
            font_size.sm,
            m.t(1),
            text_dui.success if is_valid else text_dui.error
        )
    )

# %% ../../nbs/components/alerts.ipynb 25
def AlertStack(
    alerts: list,  # List of alert components
    max_visible: int = 3,  # Maximum number of visible alerts
    spacing: str = "4"  # Gap between alerts
) -> FT:  # Alert stack component
    """Create a stack of alerts with optional limit."""
    from cjm_fasthtml_tailwind.utilities.typography import font_size, text_align
    from cjm_fasthtml_tailwind.utilities.interactivity import cursor
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import flex_direction
    from cjm_fasthtml_tailwind.utilities.layout import display_tw
    
    visible_alerts = alerts[:max_visible]
    hidden_count = len(alerts) - max_visible
    
    stack_content = visible_alerts.copy()
    
    if hidden_count > 0:
        stack_content.append(
            Div(
                f"+{hidden_count} more",
                cls=combine_classes(
                    font_size.sm,
                    text_align.center,
                    opacity._70,
                    cursor.pointer,
                    opacity._100.hover
                ),
                onclick="this.parentElement.querySelectorAll('.hidden').forEach(el => el.classList.remove('hidden')); this.remove();"
            )
        )
        
        # Add hidden alerts
        for alert in alerts[max_visible:]:
            alert.attrs['class'] = combine_classes(alert.attrs.get('class', ''), display_tw.hidden)
            stack_content.append(alert)
    
    return Div(
        *stack_content,
        cls=combine_classes(
            flex_display,
            flex_direction.col,
            gap(spacing)
        )
    )
