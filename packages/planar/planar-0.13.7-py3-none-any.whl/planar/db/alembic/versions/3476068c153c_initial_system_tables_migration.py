"""Initial system tables migration

Revision ID: 3476068c153c
Revises:
Create Date: 2025-06-16 20:53:26.711664

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op

import planar.object_config.models

# revision identifiers, used by Alembic.
revision: str = "3476068c153c"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "human_task",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("created_by", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("updated_by", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("workflow_id", sa.Uuid(), nullable=False),
        sa.Column("workflow_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("input_schema", sa.JSON(), nullable=True),
        sa.Column("input_data", sa.JSON(), nullable=True),
        sa.Column("message", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("output_schema", sa.JSON(), nullable=True),
        sa.Column("output_data", sa.JSON(), nullable=True),
        sa.Column("suggested_data", sa.JSON(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "COMPLETED",
                "CANCELLED",
                "EXPIRED",
                name="humantaskstatus",
            ),
            nullable=False,
        ),
        sa.Column("completed_by", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("completed_at", sa.DateTime(), nullable=True),
        sa.Column("deadline", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        schema="planar",
        if_not_exists=True,
    )
    with op.batch_alter_table("human_task", schema="planar") as batch_op:
        batch_op.create_index(
            batch_op.f("ix_planar_human_task_name"),
            ["name"],
            unique=False,
            if_not_exists=True,
        )
        batch_op.create_index(
            batch_op.f("ix_planar_human_task_workflow_id"),
            ["workflow_id"],
            unique=False,
            if_not_exists=True,
        )

    op.create_table(
        "locked_resource",
        sa.Column("lock_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("lock_until", sa.DateTime(), nullable=True),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("lock_key"),
        schema="planar",
        if_not_exists=True,
    )
    with op.batch_alter_table("locked_resource", schema="planar") as batch_op:
        batch_op.create_index(
            batch_op.f("ix_planar_locked_resource_lock_until"),
            ["lock_until"],
            unique=False,
            if_not_exists=True,
        )

    op.create_table(
        "object_configuration",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("object_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "object_type",
            sa.Enum("RULE", "AGENT", name="configurableobjecttype"),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("data", planar.object_config.models.JSONEncodedDict(), nullable=True),
        sa.Column("active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "object_name",
            "object_type",
            "version",
            name="uq_object_config_name_type_version",
        ),
        schema="planar",
        if_not_exists=True,
    )
    with op.batch_alter_table("object_configuration", schema="planar") as batch_op:
        batch_op.create_index(
            batch_op.f("ix_planar_object_configuration_object_name"),
            ["object_name"],
            unique=False,
            if_not_exists=True,
        )
        batch_op.create_index(
            batch_op.f("ix_planar_object_configuration_object_type"),
            ["object_type"],
            unique=False,
            if_not_exists=True,
        )

    op.create_table(
        "planar_file_metadata",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("filename", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("content_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("size", sa.Integer(), nullable=False),
        sa.Column("storage_ref", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="planar",
        if_not_exists=True,
    )
    with op.batch_alter_table("planar_file_metadata", schema="planar") as batch_op:
        batch_op.create_index(
            batch_op.f("ix_planar_planar_file_metadata_storage_ref"),
            ["storage_ref"],
            unique=False,
            if_not_exists=True,
        )

    op.create_table(
        "workflow",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("function_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("parent_id", sa.Uuid(), nullable=True),
        sa.Column(
            "status",
            sa.Enum(
                "PENDING",
                "SUCCEEDED",
                "FAILED",
                name="workflowstatus",
            ),
            nullable=False,
        ),
        sa.Column("args", sa.JSON(), nullable=True),
        sa.Column("kwargs", sa.JSON(), nullable=True),
        sa.Column("result", sa.JSON(), nullable=True),
        sa.Column("error", sa.JSON(), nullable=True),
        sa.Column("wakeup_at", sa.DateTime(), nullable=True),
        sa.Column(
            "waiting_for_event", sqlmodel.sql.sqltypes.AutoString(), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["parent_id"],
            ["planar.workflow.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="planar",
        if_not_exists=True,
    )
    with op.batch_alter_table("workflow", schema="planar") as batch_op:
        batch_op.create_index(
            batch_op.f("ix_planar_workflow_parent_id"),
            ["parent_id"],
            unique=False,
            if_not_exists=True,
        )
        batch_op.create_index(
            batch_op.f("ix_planar_workflow_status"),
            ["status"],
            unique=False,
            if_not_exists=True,
        )
        batch_op.create_index(
            batch_op.f("ix_planar_workflow_waiting_for_event"),
            ["waiting_for_event"],
            unique=False,
            if_not_exists=True,
        )
        batch_op.create_index(
            batch_op.f("ix_planar_workflow_wakeup_at"),
            ["wakeup_at"],
            unique=False,
            if_not_exists=True,
        )

    op.create_table(
        "workflow_event",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("event_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("workflow_id", sa.Uuid(), nullable=True),
        sa.Column("payload", sa.JSON(), nullable=True),
        sa.Column("timestamp", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["workflow_id"],
            ["planar.workflow.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="planar",
        if_not_exists=True,
    )
    with op.batch_alter_table("workflow_event", schema="planar") as batch_op:
        batch_op.create_index(
            batch_op.f("ix_planar_workflow_event_event_key"),
            ["event_key"],
            unique=False,
            if_not_exists=True,
        )
        batch_op.create_index(
            batch_op.f("ix_planar_workflow_event_timestamp"),
            ["timestamp"],
            unique=False,
            if_not_exists=True,
        )
        batch_op.create_index(
            batch_op.f("ix_planar_workflow_event_workflow_id"),
            ["workflow_id"],
            unique=False,
            if_not_exists=True,
        )

    op.create_table(
        "workflow_step",
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("step_id", sa.Integer(), nullable=False),
        sa.Column("workflow_id", sa.Uuid(), nullable=False),
        sa.Column("parent_step_id", sa.Integer(), nullable=True),
        sa.Column("function_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("display_name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column(
            "status",
            sa.Enum("SUCCEEDED", "RUNNING", "FAILED", name="stepstatus"),
            nullable=False,
        ),
        sa.Column(
            "step_type",
            sa.Enum(
                "COMPUTE",
                "AGENT",
                "RULE",
                "HUMAN_IN_THE_LOOP",
                "TOOL_CALL",
                name="steptype",
            ),
            nullable=False,
        ),
        sa.Column("args", sa.JSON(), nullable=True),
        sa.Column("kwargs", sa.JSON(), nullable=True),
        sa.Column("result", sa.JSON(), nullable=True),
        sa.Column("sub_step_count", sa.Integer(), nullable=False),
        sa.Column("error", sa.JSON(), nullable=True),
        sa.Column("retry_count", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["workflow_id"],
            ["planar.workflow.id"],
        ),
        sa.PrimaryKeyConstraint("step_id", "workflow_id"),
        schema="planar",
        if_not_exists=True,
    )
    with op.batch_alter_table("workflow_step", schema="planar") as batch_op:
        batch_op.create_index(
            batch_op.f("ix_planar_workflow_step_parent_step_id"),
            ["parent_step_id"],
            unique=False,
            if_not_exists=True,
        )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("workflow_step", schema="planar") as batch_op:
        batch_op.drop_index(batch_op.f("ix_planar_workflow_step_parent_step_id"))

    op.drop_table("workflow_step", schema="planar")
    with op.batch_alter_table("workflow_event", schema="planar") as batch_op:
        batch_op.drop_index(batch_op.f("ix_planar_workflow_event_workflow_id"))
        batch_op.drop_index(batch_op.f("ix_planar_workflow_event_timestamp"))
        batch_op.drop_index(batch_op.f("ix_planar_workflow_event_event_key"))

    op.drop_table("workflow_event", schema="planar")
    with op.batch_alter_table("workflow", schema="planar") as batch_op:
        batch_op.drop_index(batch_op.f("ix_planar_workflow_wakeup_at"))
        batch_op.drop_index(batch_op.f("ix_planar_workflow_waiting_for_event"))
        batch_op.drop_index(batch_op.f("ix_planar_workflow_status"))
        batch_op.drop_index(batch_op.f("ix_planar_workflow_parent_id"))

    op.drop_table("workflow", schema="planar")
    with op.batch_alter_table("planar_file_metadata", schema="planar") as batch_op:
        batch_op.drop_index(batch_op.f("ix_planar_planar_file_metadata_storage_ref"))

    op.drop_table("planar_file_metadata", schema="planar")
    with op.batch_alter_table("object_configuration", schema="planar") as batch_op:
        batch_op.drop_index(batch_op.f("ix_planar_object_configuration_object_type"))
        batch_op.drop_index(batch_op.f("ix_planar_object_configuration_object_name"))

    op.drop_table("object_configuration", schema="planar")
    with op.batch_alter_table("locked_resource", schema="planar") as batch_op:
        batch_op.drop_index(batch_op.f("ix_planar_locked_resource_lock_until"))

    op.drop_table("locked_resource", schema="planar")
    with op.batch_alter_table("human_task", schema="planar") as batch_op:
        batch_op.drop_index(batch_op.f("ix_planar_human_task_workflow_id"))
        batch_op.drop_index(batch_op.f("ix_planar_human_task_name"))

    op.drop_table("human_task", schema="planar")

    # Drop ENUM types if they exist
    op.execute("DROP TYPE IF EXISTS humantaskstatus;")
    op.execute("DROP TYPE IF EXISTS configurableobjecttype;")
    op.execute("DROP TYPE IF EXISTS workflowstatus;")
    op.execute("DROP TYPE IF EXISTS stepstatus;")
    op.execute("DROP TYPE IF EXISTS steptype;")
