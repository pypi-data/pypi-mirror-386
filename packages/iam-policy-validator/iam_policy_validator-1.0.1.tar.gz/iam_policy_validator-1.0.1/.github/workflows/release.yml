name: Release

on:
  push:
    tags:
      - "v*.*.*" # Triggers on version tags like v0.1.0, v1.2.3, etc.

permissions:
  contents: write
  id-token: write

jobs:
  build-and-release:
    name: Build and Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Full history for changelog generation

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync

      - name: Build package
        run: uv build

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            # First release - get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since previous tag
            CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Save to file for multiline output
          echo "$CHANGELOG" > CHANGELOG.txt

          # Also create a summary
          COMMIT_COUNT=$(echo "$CHANGELOG" | wc -l)
          echo "Generated changelog with $COMMIT_COUNT commits"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.tag }}
          body_path: CHANGELOG.txt
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.version, 'rc') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'alpha') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: |
          !contains(steps.get_version.outputs.version, 'rc') &&
          !contains(steps.get_version.outputs.version, 'beta') &&
          !contains(steps.get_version.outputs.version, 'alpha')
        run: uv publish
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

  update-action-versions:
    name: Update Major/Minor Tag References
    runs-on: ubuntu-latest
    needs: build-and-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update major and minor version tags
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f1-2)

          # Update vX tag (e.g., v1)
          git tag -fa "v$MAJOR" -m "Update v$MAJOR to $VERSION"
          git push origin "v$MAJOR" --force

          # Update vX.Y tag (e.g., v1.2)
          git tag -fa "v$MINOR" -m "Update v$MINOR to $VERSION"
          git push origin "v$MINOR" --force

          echo "Updated tags: v$MAJOR and v$MINOR to point to $VERSION"
