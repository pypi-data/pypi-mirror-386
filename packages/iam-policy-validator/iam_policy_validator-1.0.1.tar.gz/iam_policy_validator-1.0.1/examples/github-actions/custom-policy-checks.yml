name: IAM Policy Validation with Custom Checks

on:
  pull_request:
    paths:
      - 'policies/**/*.json'
      - 'iam/**/*.json'

jobs:
  # Example 1: Check that policies don't grant dangerous actions
  check-dangerous-actions:
    name: Prevent Dangerous Actions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Validate Policies - No Dangerous Actions
        uses: ./
        with:
          path: |
            policies/
            iam/
          use-access-analyzer: true
          policy-type: IDENTITY_POLICY
          check-access-not-granted: "s3:DeleteBucket iam:CreateAccessKey iam:AttachUserPolicy iam:PutUserPolicy"
          post-comment: true
          fail-on-warnings: true

  # Example 2: Check policies with resource scoping
  check-production-access:
    name: Prevent Production Resource Access
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Validate Policies - No Production Access
        uses: ./
        with:
          path: policies/
          use-access-analyzer: true
          policy-type: IDENTITY_POLICY
          check-access-not-granted: "s3:PutObject s3:DeleteObject dynamodb:DeleteItem"
          check-access-resources: "arn:aws:s3:::production-* arn:aws:dynamodb:*:*:table/prod-*"
          post-comment: true
          create-review: true
          fail-on-warnings: true

  # Example 3: Check for new access (compare against baseline)
  check-no-new-access:
    name: Verify No New Permissions
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Checkout baseline policies from main
        uses: actions/checkout@v4
        with:
          ref: main
          path: baseline

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Check for New Access
        uses: ./
        with:
          path: policies/user-policy.json
          use-access-analyzer: true
          policy-type: IDENTITY_POLICY
          check-no-new-access: baseline/policies/user-policy.json
          post-comment: true
          fail-on-warnings: true

  # Example 4: Check S3 bucket policies for public access
  check-public-s3-access:
    name: Prevent Public S3 Access
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Validate S3 Bucket Policies
        uses: ./
        with:
          path: s3-policies/
          use-access-analyzer: true
          policy-type: RESOURCE_POLICY
          check-no-public-access: true
          public-access-resource-type: "AWS::S3::Bucket"
          post-comment: true
          create-review: true
          fail-on-warnings: true

  # Example 5a: Check ALL resource types with "all"
  check-all-resource-types:
    name: Comprehensive Public Access Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Check All 29 Resource Types for Public Access
        uses: ./
        with:
          path: resource-policies/
          use-access-analyzer: true
          policy-type: RESOURCE_POLICY
          check-no-public-access: true
          # Use "all" to check all 29 supported resource types
          public-access-resource-type: all
          post-comment: true
          fail-on-warnings: true

  # Example 5b: Check specific multiple resource types
  check-multiple-resource-types:
    name: Check Multiple Specific Types
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Check Selected Resource Types for Public Access
        uses: ./
        with:
          path: resource-policies/
          use-access-analyzer: true
          policy-type: RESOURCE_POLICY
          check-no-public-access: true
          # Check specific resource types (space-separated)
          public-access-resource-type: "AWS::S3::Bucket AWS::Lambda::Function AWS::KMS::Key AWS::SNS::Topic AWS::SQS::Queue"
          post-comment: true
          fail-on-warnings: true

  # Example 5b: Matrix approach for separate jobs per resource type
  check-public-access-matrix:
    name: Check Resource Type (Matrix)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    strategy:
      matrix:
        resource:
          - type: "AWS::Lambda::Function"
            path: "lambda-policies/"
          - type: "AWS::KMS::Key"
            path: "kms-policies/"
          - type: "AWS::SNS::Topic"
            path: "sns-policies/"
          - type: "AWS::SQS::Queue"
            path: "sqs-policies/"
          - type: "AWS::SecretsManager::Secret"
            path: "secrets-policies/"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Check ${{ matrix.resource.type }} for Public Access
        uses: ./
        with:
          path: ${{ matrix.resource.path }}
          use-access-analyzer: true
          policy-type: RESOURCE_POLICY
          check-no-public-access: true
          public-access-resource-type: ${{ matrix.resource.type }}
          post-comment: true
          fail-on-warnings: true

  # Example 6: Comprehensive validation with multiple checks
  comprehensive-validation:
    name: Full Security Validation
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      id-token: write

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4

      - name: Checkout baseline from main
        uses: actions/checkout@v4
        with:
          ref: main
          path: baseline

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Comprehensive Security Validation
        uses: ./
        with:
          path: |
            policies/
            iam/
          use-access-analyzer: true
          policy-type: IDENTITY_POLICY
          # Check 1: No dangerous actions
          check-access-not-granted: "iam:CreateAccessKey iam:DeleteUser s3:DeleteBucket"
          # Check 2: No new access vs baseline
          check-no-new-access: baseline/policies/
          # Run all additional validation checks
          run-all-checks: true
          post-comment: true
          create-review: true
          fail-on-warnings: true
          format: json
          output-file: validation-report.json

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-report
          path: validation-report.json
