# ============================================================================
# UNIFIED Action Condition Enforcement - Complete Examples
# ============================================================================
#
# This configuration shows all capabilities of the unified action_condition_enforcement check.
# This check now handles ALL condition types in one place:
#   - MFA requirements
#   - IP/VPC restrictions
#   - Tag enforcement (replaces old action_tag_enforcement)
#   - Time-based access
#   - Encryption requirements
#   - Service-specific conditions
#   - Any AWS condition key
#
# Supports:
#   - all_of / any_of logic for actions
#   - all_of / any_of logic for conditions
#   - Wildcard patterns for actions
#   - Operator specification for precise matching
#   - Principal-to-resource tag matching via ${aws:PrincipalTag/...}
#
# ============================================================================

checks:
  action_condition_enforcement:
    enabled: true
    severity: error
    description: "Unified condition enforcement for all condition types"

    action_condition_requirements:
      # ========================================================================
      # EXAMPLE 1: Simple action with required condition (backward compatible)
      # ========================================================================
      - actions:
          - "iam:PassRole"
        required_conditions:
          - condition_key: "iam:PassedToService"
            description: "Specify which AWS services can use the passed role"

      # ========================================================================
      # EXAMPLE 2: MFA + IP Restrictions (all_of logic)
      # ========================================================================
      - actions:
          - "iam:DeleteUser"
          - "iam:DeleteRole"
        required_conditions:
          all_of:
            - condition_key: "aws:MultiFactorAuthPresent"
              expected_value: true
              description: "MFA required for deleting users/roles"
            - condition_key: "aws:SourceIp"
              description: "Must be from approved IP ranges"

      # ========================================================================
      # EXAMPLE 3: Tag Enforcement with all_of
      # EC2 with required tags + MFA + Region restrictions
      # ========================================================================
      - actions:
          - "ec2:RunInstances"
        required_conditions:
          all_of:
            - condition_key: "aws:MultiFactorAuthPresent"
              expected_value: true

            - condition_key: "aws:RequestTag/Environment"
              operator: "StringEquals"
              expected_value: ["Production", "Staging", "Development"]
              description: "Must specify valid environment"

            - condition_key: "aws:RequestTag/Owner"
              operator: "StringEquals"
              description: "Must specify owner tag"

            - condition_key: "aws:RequestedRegion"
              operator: "StringEquals"
              expected_value: ["us-east-1", "us-west-2"]
              description: "Only allowed in specific regions"

      # ========================================================================
      # EXAMPLE 4: Principal-to-Resource Tag Matching
      # Resource owner must match principal's owner tag
      # ========================================================================
      - actions:
          - "s3:PutObject"
          - "s3:GetObject"
        required_conditions:
          - condition_key: "aws:ResourceTag/owner"
            operator: "StringEquals"
            expected_value: "${aws:PrincipalTag/owner}"
            description: "Resource owner must match principal's owner tag"

      # ========================================================================
      # EXAMPLE 5: Complex all_of + any_of
      # CloudFormation stacks require MFA + Tags + (IP OR VPC Endpoint)
      # ========================================================================
      - actions:
          any_of:
            - "cloudformation:CreateStack"
            - "cloudformation:UpdateStack"
        required_conditions:
          all_of:
            - condition_key: "aws:MultiFactorAuthPresent"
              expected_value: true
              description: "MFA required"

            - condition_key: "aws:RequestTag/Environment"
              operator: "StringEquals"
              description: "Must tag with environment"

          any_of:
            - condition_key: "aws:SourceIp"
              description: "From approved IP ranges"
            - condition_key: "aws:SourceVpce"
              description: "From approved VPC endpoints"

      # ========================================================================
      # EXAMPLE 6: Wildcard Actions with Patterns
      # All IAM delete actions require MFA
      # ========================================================================
      - action_patterns:
          - "^iam:Delete.*"
          - "^iam:Remove.*"
        required_conditions:
          - condition_key: "aws:MultiFactorAuthPresent"
            expected_value: true
            description: "MFA required for destructive IAM operations"

      # ========================================================================
      # EXAMPLE 7: RDS Database Tag Requirements
      # RDS must have data classification and backup policy tags
      # ========================================================================
      - action_patterns:
          - "^rds:Create.*"
          - "^rds:Modify.*"
        required_conditions:
          all_of:
            - condition_key: "aws:RequestTag/DataClassification"
              operator: "StringEquals"
              expected_value: ["Public", "Internal", "Confidential", "Restricted"]
              description: "Must specify data classification level"

            - condition_key: "aws:RequestTag/BackupPolicy"
              operator: "StringEquals"
              expected_value: ["Daily", "Weekly", "None"]
              description: "Must specify backup policy"

            - condition_key: "aws:RequestTag/Owner"
              description: "Must specify resource owner"

      # ========================================================================
      # EXAMPLE 8: S3 Encryption Requirements
      # S3 PutObject must use server-side encryption
      # ========================================================================
      - actions:
          - "s3:PutObject"
        required_conditions:
          - condition_key: "s3:x-amz-server-side-encryption"
            operator: "StringEquals"
            expected_value: ["AES256", "aws:kms"]
            description: "Objects must be encrypted at rest"

      # ========================================================================
      # EXAMPLE 9: Time-Based Access Control
      # Production deployments only during business hours
      # ========================================================================
      - actions:
          - "lambda:UpdateFunctionCode"
          - "ecs:UpdateService"
        required_conditions:
          all_of:
            - condition_key: "aws:CurrentTime"
              operator: "DateGreaterThan"
              description: "After 9 AM UTC"

            - condition_key: "aws:CurrentTime"
              operator: "DateLessThan"
              description: "Before 5 PM UTC"

      # ========================================================================
      # EXAMPLE 10: Multi-Tag Enforcement with Principal Matching
      # EC2 instances must match multiple principal tags
      # ========================================================================
      - actions:
          - "ec2:RunInstances"
        required_conditions:
          all_of:
            - condition_key: "aws:ResourceTag/owner"
              operator: "StringEquals"
              expected_value: "${aws:PrincipalTag/owner}"
              description: "Owner must match"

            - condition_key: "aws:ResourceTag/department"
              operator: "StringEquals"
              expected_value: "${aws:PrincipalTag/department}"
              description: "Department must match"

            - condition_key: "aws:ResourceTag/cost-center"
              operator: "StringEquals"
              expected_value: "${aws:PrincipalTag/cost-center}"
              description: "Cost center must match"

      # ========================================================================
      # EXAMPLE 11: VPC Endpoint Restrictions
      # S3 access must be through VPC endpoints
      # ========================================================================
      - action_patterns:
          - "^s3:.*"
        required_conditions:
          any_of:
            - condition_key: "aws:SourceVpce"
              description: "Access via VPC endpoint"
            - condition_key: "aws:SourceVpc"
              description: "Access from specific VPC"

      # ========================================================================
      # EXAMPLE 12: KMS Key Usage Restrictions
      # KMS operations must specify approved encryption context
      # ========================================================================
      - actions:
          - "kms:Encrypt"
          - "kms:Decrypt"
          - "kms:GenerateDataKey"
        required_conditions:
          - condition_key: "kms:EncryptionContext:Project"
            operator: "StringEquals"
            description: "Must specify project in encryption context"

      # ========================================================================
      # EXAMPLE 13: DynamoDB Table Tag Requirements
      # DynamoDB tables must have cost allocation tags
      # ========================================================================
      - actions:
          - "dynamodb:CreateTable"
        required_conditions:
          all_of:
            - condition_key: "aws:RequestTag/CostCenter"
              description: "Must specify cost center"

            - condition_key: "aws:RequestTag/Application"
              description: "Must specify application name"

            - condition_key: "aws:RequestTag/Environment"
              operator: "StringEquals"
              expected_value: ["dev", "staging", "prod"]
              description: "Must specify environment"

      # ========================================================================
      # EXAMPLE 14: Cross-Account Access with External ID
      # AssumeRole for cross-account must use external ID
      # ========================================================================
      - actions:
          - "sts:AssumeRole"
        required_conditions:
          - condition_key: "sts:ExternalId"
            description: "External ID required for cross-account assume role"

# ============================================================================
# MIGRATION FROM OLD action_tag_enforcement
# ============================================================================
#
# If you were using the old action_tag_enforcement check, migrate like this:
#
# OLD (action_tag_enforcement):
#   action_tag_enforcement:
#     action_tag_requirements:
#       - actions:
#           - "ec2:RunInstances"
#         required_tag_conditions:
#           - condition_key: "aws:ResourceTag/owner"
#             operator: "StringEquals"
#             expected_value: "${aws:PrincipalTag/owner}"
#
# NEW (action_condition_enforcement):
#   action_condition_enforcement:
#     action_condition_requirements:
#       - actions:
#           - "ec2:RunInstances"
#         required_conditions:
#           - condition_key: "aws:ResourceTag/owner"
#             operator: "StringEquals"
#             expected_value: "${aws:PrincipalTag/owner}"
#
# The only change needed:
#   action_tag_requirements → action_condition_requirements
#   required_tag_conditions → required_conditions
#
# ============================================================================
