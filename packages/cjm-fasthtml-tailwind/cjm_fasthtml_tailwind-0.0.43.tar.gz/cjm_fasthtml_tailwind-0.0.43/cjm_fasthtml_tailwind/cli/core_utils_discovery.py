"""Functions to discover and display core utility functions like combine_classes:"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/cli/core_utils_discovery.ipynb.

# %% auto 0
__all__ = ['CoreUtilityInfo', 'get_core_utilities']

# %% ../../nbs/cli/core_utils_discovery.ipynb 3
from dataclasses import dataclass
import importlib
import inspect
from typing import Dict, List, Tuple, Any, Optional
from .cli_config import LibraryConfig, get_active_config

# %% ../../nbs/cli/core_utils_discovery.ipynb 4
@dataclass
class CoreUtilityInfo:
    """Information about a core utility function."""
    name: str  # Function name
    module: str  # Module path (e.g., 'cjm_fasthtml_tailwind.core.base')
    function: Any  # The actual function object
    signature: str  # Function signature
    docstring: str  # Function docstring
    source: str  # Source code
    import_statement: str  # How to import this utility

# %% ../../nbs/cli/core_utils_discovery.ipynb 5
def get_core_utilities(
    config:Optional[LibraryConfig]=None # Library configuration (uses active config if not provided)
) -> List[CoreUtilityInfo]: # List of core utility information objects
    """Get information about core utility functions."""
    if config is None:
        config = get_active_config()
        
    utilities = []
    
    # Use core utilities from configuration
    for util_name, module_path in config.core_utilities:
        try:
            module = importlib.import_module(module_path)
            if hasattr(module, util_name):
                func = getattr(module, util_name)
                if callable(func):
                    signature = str(inspect.signature(func)) if hasattr(inspect, 'signature') else ""
                    docstring = inspect.getdoc(func) or "No documentation available"
                    source = inspect.getsource(func) if hasattr(inspect, 'getsource') else ""
                    
                    utilities.append(CoreUtilityInfo(
                        name=util_name,
                        module=module_path,
                        function=func,
                        signature=signature,
                        docstring=docstring,
                        source=source,
                        import_statement=f"from {module_path} import {util_name}"
                    ))
        except (ImportError, AttributeError, OSError):
            pass
    
    return utilities
