"""Configuration system for multi-library CLI support"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/cli/cli_config.ipynb.

# %% auto 0
__all__ = ['LibraryConfig', 'get_tailwind_config', 'set_active_config', 'get_active_config', 'reset_config', 'get_config_by_name',
           'list_available_configs', 'get_config_info']

# %% ../../nbs/cli/cli_config.ipynb 3
from dataclasses import dataclass, field
from typing import List, Optional, Tuple, Dict, Any
import os

# %% ../../nbs/cli/cli_config.ipynb 5
@dataclass
class LibraryConfig:
    """Configuration for a specific library's CLI tool."""
    # Package names
    package_name: str  # e.g., 'cjm_fasthtml_tailwind'
    cli_command: str  # e.g., 'cjm-tailwind-explore'
    display_name: str  # e.g., 'Tailwind'
    
    # Module discovery configuration
    module_discovery_paths: List[str]  # e.g., ['utilities'] or ['components', 'builders']
    
    # Core package locations
    core_package: str  # e.g., 'cjm_fasthtml_tailwind.core'
    
    # Core utilities to expose
    core_utilities: List[Tuple[str, str]]  # [(name, module_path), ...]
    
    # Import generation
    base_imports: List[str] = field(default_factory=list)  # Additional base imports
    
    # Pattern matching specifics (optional)
    css_class_prefix: Optional[str] = None
    
    # Test patterns (for finding test examples)
    test_pattern_prefix: str = 'test_'  # Prefix for test functions
    test_pattern_suffix: str = '_examples'  # Suffix for test functions
    
    # Helper patterns
    helper_test_suffix: str = 'helper_examples'  # Suffix for helper test functions
    
    def get_test_function_pattern(
        self,
        module_name:str, # Name of the module (e.g., 'spacing', 'sizing')
        feature:str # Feature name (e.g., 'basic', 'directional')
    ) -> str: # Test function name pattern (e.g., 'test_spacing_basic_examples')
        """Get the expected test function name for a module and feature."""
        return f"{self.test_pattern_prefix}{module_name}_{feature}_{self.test_pattern_suffix}"
    
    def get_helper_test_function(
        self,
        module_name:str # Name of the module (e.g., 'spacing', 'sizing')
    ) -> str: # Helper test function name (e.g., 'test_spacing_helper_examples')
        """Get the expected helper test function name for a module."""
        return f"{self.test_pattern_prefix}{module_name}_{self.helper_test_suffix}"

# %% ../../nbs/cli/cli_config.ipynb 7
def get_tailwind_config() -> LibraryConfig: # Configuration for cjm-fasthtml-tailwind library
    """Get configuration for cjm-fasthtml-tailwind library."""
    return LibraryConfig(
        package_name='cjm_fasthtml_tailwind',
        cli_command='cjm-tailwind-explore',
        display_name='Tailwind CSS v4',
        module_discovery_paths=['utilities'],
        core_package='cjm_fasthtml_tailwind.core',
        core_utilities=[
            ('combine_classes', 'cjm_fasthtml_tailwind.core.base'),
            ('get_tailwind_headers', 'cjm_fasthtml_tailwind.core.resources'),
        ],
        base_imports=['from fasthtml.common import *']
    )

# %% ../../nbs/cli/cli_config.ipynb 9
# Global variable to store the active configuration
_active_config: Optional[LibraryConfig] = None

def set_active_config(
    config:LibraryConfig # The library configuration to set as active
): # Returns None
    """Set the active library configuration."""
    global _active_config
    _active_config = config

def get_active_config() -> LibraryConfig: # The active library configuration (defaults to Tailwind)
    """Get the active library configuration. If no configuration is set, returns the Tailwind config."""
    global _active_config
    
    if _active_config is not None:
        return _active_config
    
    # Default to tailwind config for this library
    _active_config = get_tailwind_config()
    
    return _active_config

# %% ../../nbs/cli/cli_config.ipynb 10
def reset_config(): # Returns None
    """Reset the active configuration to force re-detection."""
    global _active_config
    _active_config = None

# %% ../../nbs/cli/cli_config.ipynb 12
def get_config_by_name(
    name:str # Library name ('tailwind')
) -> Optional[LibraryConfig]: # LibraryConfig or None if not found
    """Get a library configuration by name."""
    configs = {
        'tailwind': get_tailwind_config,
    }
    
    factory = configs.get(name.lower())
    return factory() if factory else None

# %% ../../nbs/cli/cli_config.ipynb 14
def list_available_configs() -> List[str]: # List of available library configuration names
    """List all available library configurations."""
    return ['tailwind']

# %% ../../nbs/cli/cli_config.ipynb 15
def get_config_info(
    config:LibraryConfig # The library configuration to get information about
) -> Dict[str, Any]: # Dictionary with configuration details
    """Get information about a configuration."""
    return {
        'library': config.display_name,
        'package': config.package_name,
        'cli_command': config.cli_command,
        'module_paths': config.module_discovery_paths,
        'core_utilities': [name for name, _ in config.core_utilities],
        'has_css_prefix': config.css_class_prefix is not None
    }
