"""Functions to discover and extract test example functions:"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/cli/example_discovery.ipynb.

# %% auto 0
__all__ = ['ExampleInfo', 'get_example_pattern', 'extract_test_examples_from_module', 'list_all_examples', 'list_module_examples',
           'get_example_by_name']

# %% ../../nbs/cli/example_discovery.ipynb 3
from dataclasses import dataclass
import inspect
from typing import Dict, List, Tuple, Any, Optional
import re

from .utils import iterate_all_modules_with_items, list_utility_modules, discover_utility_modules

# %% ../../nbs/cli/example_discovery.ipynb 4
@dataclass
class ExampleInfo:
    """Information about a discovered test example function."""
    name: str  # Function name (e.g., 'test_spacing_basic_examples')
    module_name: str  # Module where it was found (e.g., 'spacing')
    feature: str  # Feature being demonstrated (e.g., 'basic')
    function: Any  # The actual function object
    source: str  # Source code of the function
    docstring: str  # Docstring of the function

# %% ../../nbs/cli/example_discovery.ipynb 5
def get_example_pattern(module_name:str):
    if "." in module_name:
        # print("Submodule detected.")
        submodule_name = module_name.split(".")[-1]
        # print(f"Submodule: {submodule_name}")
        # Pattern to match test functions: test_<submodule>_<feature>_examples
        pattern = re.compile(rf'^test_{submodule_name}_(\w+)_examples$')
    else:    
        # Pattern to match test functions: test_<module>_<feature>_examples
        pattern = re.compile(rf'^test_{module_name}_(\w+)_examples$')

    return pattern

# %% ../../nbs/cli/example_discovery.ipynb 6
def extract_test_examples_from_module(
    module: Any,  # The module to extract test examples from
    module_name: str  # The name of the module
) -> List[ExampleInfo]:  # List of ExampleInfo objects
    """Extract all test example functions from a module."""
    examples = []
    
    for name in dir(module):
        match = get_example_pattern(module_name).match(name)
        if match:
            try:
                func = getattr(module, name)
                if callable(func):
                    feature = match.group(1)
                    source = inspect.getsource(func) if hasattr(inspect, 'getsource') else ""
                    docstring = inspect.getdoc(func) or "No description available"
                    
                    examples.append(ExampleInfo(
                        name=name,
                        module_name=module_name,
                        feature=feature,
                        function=func,
                        source=source,
                        docstring=docstring
                    ))
            except (AttributeError, OSError):
                pass  # Skip if we can't get the function or its source
    
    return sorted(examples, key=lambda x: x.name)  # Sort by function name

# %% ../../nbs/cli/example_discovery.ipynb 7
def list_all_examples(
) -> Dict[str, List[ExampleInfo]]:  # Dictionary mapping module names to their examples
    """List all test example functions across all utility modules."""
    return iterate_all_modules_with_items(extract_test_examples_from_module)

# %% ../../nbs/cli/example_discovery.ipynb 8
def list_module_examples(
    module_name: str  # Name of the module to inspect
) -> List[ExampleInfo]:  # List of ExampleInfo objects
    """List all test example functions in a specific utility module."""
    # Find the module
    for name, module in discover_utility_modules():
        if name == module_name:
            return extract_test_examples_from_module(module, module_name)
    
    return []  # Module not found

# %% ../../nbs/cli/example_discovery.ipynb 9
def get_example_by_name(
    module_name: str,  # Name of the module
    feature: str  # Feature name (e.g., 'basic', 'directional')
) -> Optional[ExampleInfo]:  # ExampleInfo object or None if not found
    """Get a specific example by module name and feature."""
    examples = list_module_examples(module_name)
    
    for example in examples:
        if example.feature == feature:
            return example
    
    return None
