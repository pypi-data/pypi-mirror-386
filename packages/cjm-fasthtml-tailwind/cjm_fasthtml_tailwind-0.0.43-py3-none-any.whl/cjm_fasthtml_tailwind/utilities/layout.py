"""Display, position, overflow, z-index and other layout utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/layout.ipynb.

# %% auto 0
__all__ = ['DISPLAY_VALUES', 'display_tw', 'POSITION_VALUES', 'position', 'inset', 'top', 'right', 'bottom', 'left', 'start',
           'end', 'OVERFLOW_VALUES', 'overflow', 'Z_INDEX_CONFIG', 'z', 'FLOAT_VALUES', 'float_tw', 'CLEAR_VALUES',
           'clear', 'OBJECT_FIT_VALUES', 'object_fit', 'OBJECT_POSITION_VALUES', 'object_position', 'VISIBILITY_VALUES',
           'visibility', 'BOX_SIZING_VALUES', 'box', 'ISOLATION_VALUES', 'isolation', 'ASPECT_RATIO_VALUES', 'aspect',
           'COLUMNS_CONFIG', 'columns', 'BREAK_BEFORE_VALUES', 'BREAK_AFTER_VALUES', 'BREAK_INSIDE_VALUES',
           'break_util', 'BOX_DECORATION_VALUES', 'box_decoration', 'OVERSCROLL_VALUES', 'overscroll',
           'test_layout_display_examples', 'test_layout_position_examples', 'InsetDirectionalFactory',
           'test_layout_inset_examples', 'OverflowFactory', 'test_layout_overflow_examples',
           'test_layout_z_index_examples', 'test_layout_float_clear_examples', 'ObjectPositionFactory',
           'test_layout_object_examples', 'test_layout_visibility_examples', 'AspectRatioFactory',
           'test_layout_aspect_columns_examples', 'test_layout_columns_examples', 'BreakFactory', 'OverscrollFactory',
           'test_layout_other_utilities_examples', 'test_layout_fasthtml_examples',
           'test_layout_enhanced_factories_fasthtml_examples', 'test_layout_modifier_examples', 'center_absolute',
           'stack_context', 'sticky_top', 'full_bleed', 'test_layout_helper_examples']

# %% ../../nbs/utilities/layout.ipynb 3
from typing import Optional, Union, Literal, List, Dict, Any
from dataclasses import dataclass
from cjm_fasthtml_tailwind.core.base import (
    TailwindScale, combine_classes, StandardUtility, UtilityFactory,
    is_numeric_scale, is_fraction, is_custom_property, is_arbitrary_value,
    BaseFactory, SingleValueFactory, SingleValueUtility, CONTAINER_SCALES
)
from cjm_fasthtml_tailwind.builders.scales import (
    ScaledFactory, DirectionalScaledFactory, ScaleConfig, INSET_CONFIG,
    ScaledUtility, NegativeFactory, SimpleFactory
)

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ..core.testing import create_test_app, create_test_page, start_test_server
from IPython.display import display

# %% ../../nbs/utilities/layout.ipynb 5
DISPLAY_VALUES = { # Display utilities for general display types (not flex/grid/table)
    "inline": "inline",
    "block": "block", 
    "inline-block": "inline-block",
    "flow-root": "flow-root",
    "contents": "contents",
    "list-item": "list-item",
    "hidden": "hidden",
    "none": "none"
}

display_tw = SimpleFactory(DISPLAY_VALUES, "Display utilities for controlling the display box type of an element") # The display factory for general display types

# %% ../../nbs/utilities/layout.ipynb 6
def test_layout_display_examples(
):
    """Test display utilities with various values."""
    # Test display utilities with dot notation
    assert str(display_tw.block) == "block"
    assert str(display_tw.inline) == "inline"
    assert str(display_tw.hidden) == "hidden"
    assert str(display_tw.inline_block) == "inline-block"
    assert str(display_tw.flow_root) == "flow-root"
    assert str(display_tw.contents) == "contents"
    assert str(display_tw.list_item) == "list-item"
    assert str(display_tw.none) == "none"

# Run the tests
test_layout_display_examples()

# %% ../../nbs/utilities/layout.ipynb 8
POSITION_VALUES = { # Position utilities
    "static": "static",
    "fixed": "fixed",
    "absolute": "absolute",
    "relative": "relative",
    "sticky": "sticky"
}

position = SimpleFactory(POSITION_VALUES, "Position utilities for controlling how an element is positioned in the document") # The position factory

# %% ../../nbs/utilities/layout.ipynb 9
def test_layout_position_examples(
):
    """Test position utilities."""
    # Test position utilities with dot notation
    assert str(position.static) == "static"
    assert str(position.relative) == "relative"
    assert str(position.absolute) == "absolute"
    assert str(position.fixed) == "fixed"
    assert str(position.sticky) == "sticky"

# Run the tests
test_layout_position_examples()

# %% ../../nbs/utilities/layout.ipynb 12
# For inset, we need special handling because it uses hyphens in directional variants
class InsetDirectionalFactory(BaseFactory):
    """Special factory for inset utilities that use hyphenated directions."""
    
    def __init__(
        self,
        prefix: str,  # The base prefix ('inset')
        config: ScaleConfig  # Configuration defining valid scales and values
    ):
        "Initialize with prefix and scale configuration."
        super().__init__("Inset utilities for controlling the placement of positioned elements")
        self.prefix = prefix
        self.config = config
        
        # Create direction-specific factories with hyphens
        self.x = ScaledFactory(f"{prefix}-x", config, "Horizontal inset utilities")  # horizontal
        self.y = ScaledFactory(f"{prefix}-y", config, "Vertical inset utilities")  # vertical
    
    def __call__(
        self,
        value: Optional[TailwindScale] = None,  # The value to apply to the inset
        negative: bool = False  # Whether to create a negative variant
    ) -> ScaledUtility:  # A new scaled utility instance
        """Create a utility instance for all directions."""
        return ScaledFactory(self.prefix, self.config)(value, negative)
    
    def __getattr__(
        self,
        name: str  # The attribute name to convert to a utility value
    ) -> ScaledUtility:  # A new scaled utility instance
        """Handle attribute access for named values."""
        return ScaledFactory(self.prefix, self.config).__getattr__(name)
    
    @property
    def negative(
        self
    ) -> 'NegativeFactory':  # A factory for creating negative variants
        """Return a negative variant factory."""
        return NegativeFactory(self.prefix, self.config)
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get detailed information about this inset factory."""
        # Get valid inputs from the config (similar to ScaledFactory)
        from cjm_fasthtml_tailwind.builders.scales import NUMERIC_SCALE, FRACTIONS
        
        valid_inputs = []
        
        if self.config.numeric:
            valid_inputs.append(f"Numeric scales: 0-{max(NUMERIC_SCALE)}")
        
        if self.config.fractions:
            valid_inputs.append(f"Fractions: {len(FRACTIONS)} supported (e.g., 1/2, 2/3, 3/4)")
        
        if self.config.special:
            valid_inputs.append(f"Special values: {', '.join(self.config.special.keys())}")
        
        valid_inputs.append("Arbitrary values: Any string with CSS units (e.g., '10px', '2.5rem')")
        valid_inputs.append("Custom properties: CSS variables starting with -- (e.g., '--spacing')")
        
        options = {
            'prefix': self.prefix,
            'supports_negative': self.config.negative,
            'directional_variants': {
                'x': 'horizontal (left and right)',
                'y': 'vertical (top and bottom)'
            },
            'note': 'Also available as individual directions: top, right, bottom, left, start, end'
        }
        
        if self.config.negative:
            options['negative_access'] = 'Use .negative property or negative=True parameter'
        
        return {
            'description': self._doc,
            'valid_inputs': valid_inputs,
            'options': options
        }

# %% ../../nbs/utilities/layout.ipynb 13
# Inset utilities (top, right, bottom, left)
inset = InsetDirectionalFactory("inset", INSET_CONFIG) # The inset factory for positioning

# Individual direction utilities don't need special handling
top = ScaledFactory("top", INSET_CONFIG, "Top position utilities for controlling vertical placement")
right = ScaledFactory("right", INSET_CONFIG, "Right position utilities for controlling horizontal placement")
bottom = ScaledFactory("bottom", INSET_CONFIG, "Bottom position utilities for controlling vertical placement")
left = ScaledFactory("left", INSET_CONFIG, "Left position utilities for controlling horizontal placement")
start = ScaledFactory("start", INSET_CONFIG, "Logical start position utilities (left in LTR, right in RTL)")
end = ScaledFactory("end", INSET_CONFIG, "Logical end position utilities (right in LTR, left in RTL)")

# %% ../../nbs/utilities/layout.ipynb 14
def test_layout_inset_examples(
):
    """Test inset utilities for positioning elements."""
    # Test inset utilities
    assert str(inset(0)) == "inset-0"
    assert str(inset(4)) == "inset-4"
    assert str(inset("1/2")) == "inset-1/2"
    assert str(inset.auto) == "inset-auto"
    assert str(inset.full) == "inset-full"
    assert str(inset.negative(4)) == "-inset-4"
    
    # Test directional inset
    assert str(inset.x(4)) == "inset-x-4"
    assert str(inset.y(8)) == "inset-y-8"
    
    # Test individual directions
    assert str(top(0)) == "top-0"
    assert str(right(4)) == "right-4"
    assert str(bottom.auto) == "bottom-auto"
    assert str(left.negative(2)) == "-left-2"

# Run the tests
test_layout_inset_examples()

# %% ../../nbs/utilities/layout.ipynb 16
OVERFLOW_VALUES = ["auto", "hidden", "clip", "visible", "scroll"] # Overflow values

# %% ../../nbs/utilities/layout.ipynb 17
class OverflowFactory(BaseFactory):
    """Factory for overflow utilities with directional support."""
    
    def __init__(self):
        "Initialize with overflow values and directional sub-factories."
        super().__init__("Overflow utilities for controlling how an element handles content that is too large")
        # Create base overflow utilities
        self._values = {value: f"overflow-{value}" for value in OVERFLOW_VALUES}
        
        # Cache for utility instances
        self._utility_cache = {}
        
        # Create x and y sub-factories using SimpleFactory for modifier support
        from cjm_fasthtml_tailwind.builders.scales import SimpleFactory
        self.x = SimpleFactory(
            {value: f"overflow-x-{value}" for value in OVERFLOW_VALUES},
            "Horizontal overflow utilities"
        )
        self.y = SimpleFactory(
            {value: f"overflow-y-{value}" for value in OVERFLOW_VALUES},
            "Vertical overflow utilities"
        )
    
    def __getattr__(
        self,
        name: str  # The attribute name to look up in overflow values
    ) -> SingleValueUtility:  # A utility instance with the overflow class
        "Get overflow utility by attribute name."
        if name in self._values:
            css_value = self._values[name]
            # Return cached utility instance or create new one
            if css_value not in self._utility_cache:
                self._utility_cache[css_value] = SingleValueUtility(css_value)
            return self._utility_cache[css_value]
        raise AttributeError(f"'OverflowFactory' object has no attribute '{name}'")
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get information about the overflow factory."""
        return {
            'description': self._doc,
            'valid_inputs': 'Access values as attributes with modifier support',
            'options': {
                'available_values': OVERFLOW_VALUES,
                'directional_variants': {
                    'x': 'horizontal overflow',
                    'y': 'vertical overflow'
                },
                'supports_modifiers': True
            }
        }

# %% ../../nbs/utilities/layout.ipynb 18
overflow = OverflowFactory() # The overflow factory

# %% ../../nbs/utilities/layout.ipynb 19
def test_layout_overflow_examples(
):
    """Test overflow utilities for content handling."""
    # Test overflow utilities
    assert str(overflow.auto) == "overflow-auto"
    assert str(overflow.hidden) == "overflow-hidden"
    assert str(overflow.visible) == "overflow-visible"
    
    # Directional overflow utilities
    assert str(overflow.x.auto) == "overflow-x-auto"
    assert str(overflow.y.scroll) == "overflow-y-scroll"
    assert str(overflow.x.visible) == "overflow-x-visible"
    assert str(overflow.y.visible) == "overflow-y-visible"
    assert str(overflow.y.clip) == "overflow-y-clip"

# Run the tests
test_layout_overflow_examples()

# %% ../../nbs/utilities/layout.ipynb 21
Z_INDEX_CONFIG = ScaleConfig( # Z-index configuration
    numeric=True,  # Support numeric values 0-50
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto"
    },
    negative=True  # Support negative z-index
)

# Create z-index factory
z = ScaledFactory("z", Z_INDEX_CONFIG, "Z-index utilities for controlling the stack order of an element") # The z-index factory

# %% ../../nbs/utilities/layout.ipynb 22
def test_layout_z_index_examples(
):
    """Test z-index utilities for stack ordering."""
    # Test z-index utilities
    assert str(z(0)) == "z-0"
    assert str(z(10)) == "z-10"
    assert str(z(20)) == "z-20"
    assert str(z(50)) == "z-50"
    assert str(z.auto) == "z-auto"
    assert str(z.negative(10)) == "-z-10"
    assert str(z("999")) == "z-[999]" # (string number without units)
    assert str(z("[999]")) == "z-[999]" # (explicit arbitrary value)

# Run the tests
test_layout_z_index_examples()

# %% ../../nbs/utilities/layout.ipynb 24
# Float utilities
FLOAT_VALUES = {
    "right": "float-right",
    "left": "float-left",
    "start": "float-start",
    "end": "float-end",
    "none": "float-none"
}

float_tw = SimpleFactory(FLOAT_VALUES, "Float utilities for controlling the wrapping of content around an element")  # Renamed to avoid conflict with Python's float

# %% ../../nbs/utilities/layout.ipynb 26
# Clear utilities
CLEAR_VALUES = {
    "left": "clear-left",
    "right": "clear-right",
    "both": "clear-both",
    "start": "clear-start",
    "end": "clear-end",
    "none": "clear-none"
}

# Create clear factory
clear = SimpleFactory(CLEAR_VALUES, "Clear utilities for controlling wrapping behavior after floating elements") # The clear factory

# %% ../../nbs/utilities/layout.ipynb 27
def test_layout_float_clear_examples(
):
    """Test float and clear utilities for content wrapping."""
    # Test float utilities
    assert str(float_tw.right) == "float-right"
    assert str(float_tw.left) == "float-left"
    assert str(float_tw.start) == "float-start"
    assert str(float_tw.end) == "float-end"
    assert str(float_tw.none) == "float-none"
    
    # Test clear utilities
    assert str(clear.left) == "clear-left"
    assert str(clear.right) == "clear-right"
    assert str(clear.both) == "clear-both"
    assert str(clear.start) == "clear-start"
    assert str(clear.end) == "clear-end"
    assert str(clear.none) == "clear-none"

# Run the tests
test_layout_float_clear_examples()

# %% ../../nbs/utilities/layout.ipynb 29
# Object fit utilities
OBJECT_FIT_VALUES = {
    "contain": "object-contain",
    "cover": "object-cover",
    "fill": "object-fill",
    "none": "object-none",
    "scale-down": "object-scale-down"
}

# Create object fit factory
object_fit = SimpleFactory(OBJECT_FIT_VALUES, "Object fit utilities for controlling how replaced element content should be resized") # The object fit factory

# %% ../../nbs/utilities/layout.ipynb 31
# Object position utilities - combines fixed positions with custom value support
OBJECT_POSITION_VALUES = {
    "top-left": "object-top-left",
    "top": "object-top",
    "top-right": "object-top-right",
    "left": "object-left",
    "center": "object-center",
    "right": "object-right",
    "bottom-left": "object-bottom-left",
    "bottom": "object-bottom",
    "bottom-right": "object-bottom-right"
}

# %% ../../nbs/utilities/layout.ipynb 32
# Enhanced factory that supports both fixed values and custom positions
class ObjectPositionFactory(SimpleFactory):
    """Factory for object position with both fixed and custom values."""
    
    def __call__(
        self,
        value: str  # Custom position value (e.g., '50% 25%' or CSS variable)
    ) -> str:  # The formatted object position CSS class
        """Handle custom position values like '50% 25%'."""
        if is_custom_property(value):
            return f"object-({value})"
        elif is_arbitrary_value(value) or " " in value:
            return f"object-[{value}]"
        return f"object-{value}"
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get information about the object position factory."""
        return {
            'description': self._doc,
            'valid_inputs': [
                'Access fixed positions as attributes',
                'Call with custom position (e.g., "50% 25%")',
                'CSS custom properties (e.g., "--custom-position")'
            ],
            'options': {
                'fixed_positions': list(self._values.keys()),
                'custom_usage': 'Call factory with position string: object_position("50% 25%")'
            }
        }

# %% ../../nbs/utilities/layout.ipynb 33
# Create object position factory
object_position = ObjectPositionFactory(
    OBJECT_POSITION_VALUES, 
    "Object position utilities for controlling content positioning within its container"
) # The object position factory

# %% ../../nbs/utilities/layout.ipynb 34
def test_layout_object_examples(
):
    """Test object fit and position utilities."""
    # Test object fit utilities
    assert str(object_fit.contain) == "object-contain"
    assert str(object_fit.cover) == "object-cover"
    assert str(object_fit.fill) == "object-fill"
    assert str(object_fit.none) == "object-none"
    assert str(object_fit.scale_down) == "object-scale-down"
    
    # Test object position utilities with dot notation
    assert str(object_position.center) == "object-center"
    assert str(object_position.top) == "object-top"
    assert str(object_position.bottom_right) == "object-bottom-right"
    assert str(object_position("50% 25%")) == "object-[50% 25%]"
    assert str(object_position("--custom-position")) == "object-(--custom-position)"

# Run the tests
test_layout_object_examples()

# %% ../../nbs/utilities/layout.ipynb 36
# Visibility utilities
VISIBILITY_VALUES = {
    "visible": "visible",
    "invisible": "invisible",
    "collapse": "collapse"
}

# Create visibility factory
visibility = SimpleFactory(VISIBILITY_VALUES, "Visibility utilities for controlling the visibility of an element") # The visibility factory

# %% ../../nbs/utilities/layout.ipynb 38
# Box sizing utilities
BOX_SIZING_VALUES = {
    "border": "box-border",
    "content": "box-content"
}

# Create box sizing factory
box = SimpleFactory(BOX_SIZING_VALUES, "Box sizing utilities for controlling how the browser calculates element size") # The box sizing factory

# %% ../../nbs/utilities/layout.ipynb 39
def test_layout_visibility_examples(
):
    """Test visibility and box sizing utilities."""
    # Test visibility utilities
    assert str(visibility.visible) == "visible"
    assert str(visibility.invisible) == "invisible"
    assert str(visibility.collapse) == "collapse"
    
    # Test box sizing utilities
    assert str(box.border) == "box-border"
    assert str(box.content) == "box-content"

# Run the tests
test_layout_visibility_examples()

# %% ../../nbs/utilities/layout.ipynb 41
# Isolation utilities
ISOLATION_VALUES = {
    "isolate": "isolate",
    "auto": "isolation-auto"
}

# Create isolation factory
isolation = SimpleFactory(ISOLATION_VALUES, "Isolation utilities for creating a new stacking context") # The isolation factory

# %% ../../nbs/utilities/layout.ipynb 43
# Aspect ratio utilities - fixed values with custom ratio support
ASPECT_RATIO_VALUES = {
    "auto": "aspect-auto",
    "square": "aspect-square",
    "video": "aspect-video"
}

# %% ../../nbs/utilities/layout.ipynb 44
# Enhanced factory that supports both fixed values and custom ratios
class AspectRatioFactory(SimpleFactory):
    """Factory for aspect ratio with both fixed and custom values."""
    
    def __call__(
        self,
        value: str  # Custom aspect ratio (e.g., '16/9', '4/3', or CSS variable)
    ) -> str:  # The formatted aspect ratio CSS class
        """Handle custom ratio values like '16/9' or '4/3'."""
        # Handle ratio format
        if "/" in value and not is_arbitrary_value(value):
            return f"aspect-{value}"
        # Handle custom properties
        elif is_custom_property(value):
            return f"aspect-({value})"
        # Handle arbitrary values
        elif is_arbitrary_value(value):
            return f"aspect-[{value}]"
        return f"aspect-{value}"
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get information about the aspect ratio factory."""
        return {
            'description': self._doc,
            'valid_inputs': [
                'Access fixed ratios as attributes',
                'Call with ratio (e.g., "16/9", "4/3")',
                'CSS custom properties (e.g., "--custom-ratio")'
            ],
            'options': {
                'fixed_ratios': list(self._values.keys()),
                'custom_usage': 'Call factory with ratio: aspect("16/9")'
            }
        }

# %% ../../nbs/utilities/layout.ipynb 45
# Create aspect ratio factory
aspect = AspectRatioFactory(ASPECT_RATIO_VALUES, "Aspect ratio utilities for controlling element proportions") # The aspect ratio factory

# %% ../../nbs/utilities/layout.ipynb 46
def test_layout_aspect_columns_examples(
):
    """Test aspect ratio and columns utilities."""
    # Test aspect ratio utilities with dot notation
    assert str(aspect.auto) == "aspect-auto"
    assert str(aspect.square) == "aspect-square"
    assert str(aspect.video) == "aspect-video"
    assert str(aspect("16/9")) == "aspect-16/9"
    assert str(aspect("4/3")) == "aspect-4/3"
    assert str(aspect("--custom")) == "aspect-(--custom)"

# Run the tests
test_layout_aspect_columns_examples()

# %% ../../nbs/utilities/layout.ipynb 48
COLUMNS_CONFIG = ScaleConfig( # Columns configuration with container sizes
    numeric=True,  # Support columns-1 through columns-12
    decimals=False,
    fractions=False,
    named=CONTAINER_SCALES,  # Use all container scales (3xs through 7xl)
    special={
        "auto": "auto"
    },
    negative=False
)

# Create columns factory
columns = ScaledFactory("columns", COLUMNS_CONFIG, "Columns utilities for controlling the number of columns within an element") # The columns factory

# %% ../../nbs/utilities/layout.ipynb 49
def test_layout_columns_examples(
):
    """Test columns utilities."""
    # Test columns utilities
    assert str(columns(1)) == "columns-1"
    assert str(columns(2)) == "columns-2"
    assert str(columns(3)) == "columns-3"
    assert str(columns.auto) == "columns-auto"
    assert str(columns.xs) == "columns-xs"
    assert str(columns.sm) == "columns-sm"
    assert str(columns.lg) == "columns-lg"
    assert str(columns._3xl) == "columns-3xl"
    assert str(columns._4xl) == "columns-4xl"
    assert str(columns._5xl) == "columns-5xl"
    assert str(columns._6xl) == "columns-6xl"
    assert str(columns._7xl) == "columns-7xl"

# Run the tests
test_layout_columns_examples()

# %% ../../nbs/utilities/layout.ipynb 51
# Break utilities - organized by type
BREAK_BEFORE_VALUES = {
    "auto": "break-before-auto",
    "avoid": "break-before-avoid",
    "all": "break-before-all",
    "avoid-page": "break-before-avoid-page",
    "page": "break-before-page",
    "left": "break-before-left",
    "right": "break-before-right",
    "column": "break-before-column"
}

BREAK_AFTER_VALUES = {
    "auto": "break-after-auto",
    "avoid": "break-after-avoid",
    "all": "break-after-all",
    "avoid-page": "break-after-avoid-page",
    "page": "break-after-page",
    "left": "break-after-left",
    "right": "break-after-right",
    "column": "break-after-column"
}

BREAK_INSIDE_VALUES = {
    "auto": "break-inside-auto",
    "avoid": "break-inside-avoid",
    "avoid-page": "break-inside-avoid-page",
    "avoid-column": "break-inside-avoid-column"
}

# %% ../../nbs/utilities/layout.ipynb 52
# Create break factories with sub-properties
class BreakFactory(BaseFactory):
    """Factory for break utilities with before, after, and inside sub-factories."""
    
    def __init__(self):
        "Initialize with sub-factories for before, after, and inside breaks."
        super().__init__("Break utilities for controlling column and page breaks")
        self.before = SimpleFactory(BREAK_BEFORE_VALUES, "Break-before utilities for controlling breaks before an element")
        self.after = SimpleFactory(BREAK_AFTER_VALUES, "Break-after utilities for controlling breaks after an element")
        self.inside = SimpleFactory(BREAK_INSIDE_VALUES, "Break-inside utilities for controlling breaks within an element")
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get information about the break factory."""
        return {
            'description': self._doc,
            'valid_inputs': 'Access sub-factories as attributes (before, after, inside)',
            'options': {
                'sub_factories': {
                    'before': 'Control breaks before an element',
                    'after': 'Control breaks after an element',
                    'inside': 'Control breaks within an element'
                },
                'before_values': list(BREAK_BEFORE_VALUES.keys()),
                'after_values': list(BREAK_AFTER_VALUES.keys()),
                'inside_values': list(BREAK_INSIDE_VALUES.keys())
            }
        }

# %% ../../nbs/utilities/layout.ipynb 53
# Create the break factory
break_util = BreakFactory() # The break factory

# %% ../../nbs/utilities/layout.ipynb 55
# Box decoration break utilities
BOX_DECORATION_VALUES = {
    "clone": "box-decoration-clone",
    "slice": "box-decoration-slice"
}

# Create box decoration factory
box_decoration = SimpleFactory(
    BOX_DECORATION_VALUES, 
    "Box decoration break utilities for controlling element fragment rendering across breaks"
) # The box decoration factory

# %% ../../nbs/utilities/layout.ipynb 57
# Overscroll behavior values
OVERSCROLL_VALUES = ["auto", "contain", "none"]

# %% ../../nbs/utilities/layout.ipynb 58
class OverscrollFactory(BaseFactory):
    """Factory for overscroll behavior utilities with directional support."""
    
    def __init__(self):
        "Initialize with overscroll values and directional sub-factories."
        super().__init__("Overscroll behavior utilities for controlling browser behavior at scroll boundaries")
        # Create base overscroll utilities
        self._values = {value: f"overscroll-{value}" for value in OVERSCROLL_VALUES}
        
        # Create x and y sub-factories
        self.x = type('OverscrollX', (), {
            value: f"overscroll-x-{value}" for value in OVERSCROLL_VALUES
        })()
        self.y = type('OverscrollY', (), {
            value: f"overscroll-y-{value}" for value in OVERSCROLL_VALUES
        })()
    
    def __getattr__(
        self,
        name: str  # The attribute name to look up in overscroll values
    ) -> str:  # The corresponding overscroll CSS class
        "Get overscroll utility by attribute name."
        if name in self._values:
            return self._values[name]
        raise AttributeError(f"'OverscrollFactory' object has no attribute '{name}'")
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get information about the overscroll factory."""
        return {
            'description': self._doc,
            'valid_inputs': 'Access values as attributes',
            'options': {
                'available_values': OVERSCROLL_VALUES,
                'directional_variants': {
                    'x': 'horizontal overscroll behavior',
                    'y': 'vertical overscroll behavior'
                }
            }
        }

# %% ../../nbs/utilities/layout.ipynb 59
# Create the overscroll factory
overscroll = OverscrollFactory() # The overscroll factory

# %% ../../nbs/utilities/layout.ipynb 60
def test_layout_other_utilities_examples(
):
    """Test isolation, break, box decoration, and overscroll utilities."""
    # Test isolation utilities
    assert str(isolation.isolate) == "isolate"
    assert str(isolation.auto) == "isolation-auto"
    
    # Test break utilities
    assert str(break_util.before.auto) == "break-before-auto"
    assert str(break_util.before.page) == "break-before-page"
    assert str(break_util.after.column) == "break-after-column"
    assert str(break_util.inside.avoid) == "break-inside-avoid"
    
    # Test box decoration break utilities
    assert str(box_decoration.clone) == "box-decoration-clone"
    assert str(box_decoration.slice) == "box-decoration-slice"
    
    # Test overscroll behavior utilities
    assert str(overscroll.auto) == "overscroll-auto"
    assert str(overscroll.contain) == "overscroll-contain"
    assert str(overscroll.none) == "overscroll-none"
    assert str(overscroll.x.auto) == "overscroll-x-auto"
    assert str(overscroll.y.contain) == "overscroll-y-contain"

# Run the tests
test_layout_other_utilities_examples()

# %% ../../nbs/utilities/layout.ipynb 62
def test_layout_fasthtml_examples(
):
    """Test layout utilities in practical FastHTML component examples."""
    from fasthtml.common import Div, Img, Header, Nav, Main, Section, Article, Aside
    from cjm_fasthtml_tailwind.utilities.backgrounds import bg
    from cjm_fasthtml_tailwind.utilities.sizing import h, w
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import items, justify, gap, flex_display, grid_display
    from cjm_fasthtml_tailwind.utilities.borders import rounded
    
    # Fixed header with z-index
    header = Header(
        Nav("Navigation"),
        cls=combine_classes(position.fixed, top(0), left(0), right(0), z(50), bg.white)
    )
    assert header.attrs['class'] == "fixed top-0 left-0 right-0 z-50 bg-white"
    
    # Sticky sidebar with scroll
    sidebar = Aside(
        "Sidebar content",
        cls=combine_classes(position.sticky, top(20), h.screen, overflow.y.auto)
    )
    assert sidebar.attrs['class'] == "sticky top-20 h-screen overflow-y-auto"
    
    # Modal overlay with z-index
    modal_overlay = Div(
        Div("Modal content", cls=combine_classes(position.relative, z(10))),
        cls=combine_classes(position.fixed, inset(0), z(40), flex_display, items.center, justify.center, bg.black.opacity(50))
    )
    assert modal_overlay.attrs['class'] == "fixed inset-0 z-40 flex items-center justify-center bg-black/50"
    assert modal_overlay.children[0].attrs['class'] == "relative z-10"
    
    # Image with aspect ratio and object fit
    image_container = Div(
        Img(src="https://img.daisyui.com/images/stock/photo-1559703248-dcaaec9fab78.webp", cls=combine_classes(object_fit.cover, object_position.center, w.full, h.full)),
        cls=combine_classes(aspect.video, overflow.hidden, rounded.lg)
    )
    assert image_container.attrs['class'] == "aspect-video overflow-hidden rounded-lg"
    assert image_container.children[0].attrs['class'] == "object-cover object-center w-full h-full"
    
    # Multi-column layout
    # Note: 'prose' is from Tailwind Typography plugin and doesn't have a factory yet
    article = Article(
        "Lorem ipsum dolor sit amet...",
        cls=combine_classes(columns(2), gap(8), "prose")
    )
    assert article.attrs['class'] == "columns-2 gap-8 prose"
    
    # Return all examples in a grid layout
    return Div(
        header,
        sidebar,
        modal_overlay,
        image_container,
        article,
        cls=combine_classes(grid_display, gap(5))
    )

# Run the tests
test_layout_fasthtml_examples()

# %% ../../nbs/utilities/layout.ipynb 64
def test_layout_enhanced_factories_fasthtml_examples(
):
    """Test enhanced factories with modifier support in practical examples."""
    from fasthtml.common import Div, Nav, Button, Span
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display
    from cjm_fasthtml_tailwind.utilities.accessibility import sr_only
    
    # Mobile navigation with responsive display
    mobile_nav = Nav(
        Button("Menu", cls="md:hidden"),
        Div(
            "Navigation items",
            cls=combine_classes(
                display_tw.none.md,  # Hidden by default, shown on md+
                position.fixed.md,   # Fixed position on larger screens
                "w-full md:w-auto"
            )
        )
    )
    assert "md:none" in mobile_nav.children[1].attrs['class']
    assert "md:fixed" in mobile_nav.children[1].attrs['class']
    
    # Dropdown menu with hover states
    dropdown = Div(
        Button("Options", cls="relative"),
        Div(
            "Dropdown content",
            cls=combine_classes(
                display_tw.none.group("hover"),  # Show on parent hover
                position.absolute,
                "mt-2 bg-white shadow-lg"
            )
        ),
        cls="group relative"
    )
    assert "group-hover:none" in dropdown.children[1].attrs['class']
    
    # Accessible skip link
    skip_link = Div(
        "Skip to content",
        cls=combine_classes(
            sr_only.focus,           # Hidden but shown on focus
            position.absolute.focus, # Position when focused
            "top-4 left-4 bg-white p-2 z-50"
        )
    )
    assert "focus:sr-only" in skip_link.attrs['class']
    assert "focus:absolute" in skip_link.attrs['class']
    
    # Responsive overflow handling
    table_container = Div(
        "Table content",
        cls=combine_classes(
            overflow.x.auto,              # Always allow horizontal scroll
            overflow.y.hidden.md,         # Hide vertical scroll on medium+
            "border rounded"
        )
    )
    assert "overflow-x-auto" in table_container.attrs['class']
    assert "md:overflow-y-hidden" in table_container.attrs['class']

    return Div(
        mobile_nav,
        dropdown,
        skip_link,
        table_container,
        cls=combine_classes(grid_display, gap(5))
    )

# Run the tests
test_layout_enhanced_factories_fasthtml_examples()

# %% ../../nbs/utilities/layout.ipynb 66
def test_layout_modifier_examples(
):
    """Test layout utilities with modifiers for conditional styling."""
    # Test display utilities with modifiers (now supported!)
    assert str(display_tw.hidden) == "hidden"
    assert str(display_tw.block) == "block"
    assert str(display_tw.hidden.hover) == "hover:hidden"
    assert str(display_tw.block.md) == "md:block"
    assert str(display_tw.none.dark) == "dark:none"
    
    # Test position utilities with modifiers (now supported!)
    assert str(position.fixed) == "fixed"
    assert str(position.absolute.hover) == "hover:absolute"
    assert str(position.relative.lg) == "lg:relative"
    assert str(position.sticky.md.dark) == "dark:md:sticky"
    
    # Test inset utilities with modifiers (these already supported modifiers)
    assert str(inset(0).hover) == "hover:inset-0"
    assert str(top(4).md) == "md:top-4"
    assert str(bottom.auto.lg) == "lg:bottom-auto"
    assert str(left.negative(2).hover) == "hover:-left-2"
    
    # Test z-index with modifiers
    assert str(z(10).hover) == "hover:z-10"
    assert str(z(50).lg) == "lg:z-50"
    assert str(z.auto.dark) == "dark:z-auto"
    
    # Test overflow utilities with modifiers (now supported!)
    assert str(overflow.hidden) == "overflow-hidden"
    assert str(overflow.auto.hover) == "hover:overflow-auto"
    assert str(overflow.x.scroll.md) == "md:overflow-x-scroll"
    assert str(overflow.y.hidden.dark) == "dark:overflow-y-hidden"
    
    # Test float utilities with modifiers (now supported!)
    assert str(float_tw.right) == "float-right"
    assert str(float_tw.left.hover) == "hover:float-left"
    assert str(float_tw.none.lg) == "lg:float-none"
    
    # Test clear utilities with modifiers (now supported!)
    assert str(clear.both) == "clear-both"
    assert str(clear.left.md) == "md:clear-left"
    assert str(clear.none.hover) == "hover:clear-none"
    
    # Test responsive inset
    assert str(inset.x(4).sm) == "sm:inset-x-4"
    assert str(inset.y(8).md) == "md:inset-y-8"
    
    # Test group/peer modifiers
    assert str(z(20).group("hover")) == "group-hover:z-20"
    assert str(position.fixed.group("focus")) == "group-focus:fixed"
    assert str(display_tw.none.peer("checked")) == "peer-checked:none"
    
    # Test arbitrary modifiers
    assert str(top(0).aria("expanded")) == "aria-expanded:top-0"
    assert str(position.absolute.data("open")) == "data-[open]:absolute"
    assert str(display_tw.block.has(":checked")) == "has-[:checked]:block"

# Run the tests
test_layout_modifier_examples()

# %% ../../nbs/utilities/layout.ipynb 68
def center_absolute(
) -> str:  # Combined CSS classes for centering an element
    """Center an absolutely positioned element."""
    return combine_classes(
        position.absolute, 
        top("1/2"), 
        left("1/2"), 
        "-translate-x-1/2",
        "-translate-y-1/2"
    )

# %% ../../nbs/utilities/layout.ipynb 69
def stack_context(
    z_value: int = 10  # The z-index value for the stacking context
) -> str:  # Combined CSS classes for creating a stacking context
    """Create a stacking context with z-index."""
    return combine_classes(position.relative, z(z_value))

# %% ../../nbs/utilities/layout.ipynb 70
def sticky_top(
    offset: TailwindScale = 0  # Top offset value (e.g., 0, 4, '1rem')
) -> str:  # Combined CSS classes for sticky positioning
    """Make element sticky at top with optional offset."""
    return combine_classes(position.sticky, top(offset))

# %% ../../nbs/utilities/layout.ipynb 71
def full_bleed(
) -> str:  # Combined CSS classes for full-bleed layout
    """Make element break out of container constraints."""
    return combine_classes(position.relative, left("1/2"), right("1/2"), "-mx-[50vw]", "w-screen")

# %% ../../nbs/utilities/layout.ipynb 72
def test_layout_helper_examples(
):
    """Test helper functions for common layout patterns."""
    # Test helper functions
    assert center_absolute() == "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2"
    assert stack_context(20) == "relative z-20"
    assert sticky_top(4) == "sticky top-4"
    assert full_bleed() == "relative left-1/2 right-1/2 -mx-[50vw] w-screen"

# Run the tests
test_layout_helper_examples()
