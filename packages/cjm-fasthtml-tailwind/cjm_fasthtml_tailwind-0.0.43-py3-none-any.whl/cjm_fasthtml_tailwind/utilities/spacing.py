"""Padding and margin utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/spacing.ipynb.

# %% auto 0
__all__ = ['p', 'ps', 'pe', 'm', 'ms', 'me', 'space', 'test_spacing_basic_examples', 'test_spacing_directional_examples',
           'test_spacing_arbitrary_examples', 'test_spacing_margin_examples',
           'test_spacing_margin_directional_examples', 'test_spacing_negative_examples',
           'test_spacing_logical_examples', 'SpaceFactory', 'test_spacing_space_between_examples',
           'test_spacing_fasthtml_examples', 'pad', 'margin', 'test_spacing_helper_examples',
           'test_spacing_modifier_examples', 'test_spacing_enhanced_factory_examples']

# %% ../../nbs/utilities/spacing.ipynb 3
from typing import Optional, Union, Dict, Any
from ..core.base import TailwindScale, combine_classes, BaseFactory, SingleValueFactory, SingleValueUtility
from cjm_fasthtml_tailwind.builders.scales import (
    DirectionalScaledFactory, ScaledFactory, SPACING_CONFIG
)

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ..core.testing import create_test_app, create_test_page, start_test_server
from IPython.display import display

# %% ../../nbs/utilities/spacing.ipynb 5
p = DirectionalScaledFactory("p", SPACING_CONFIG, "Padding utilities for controlling element padding") # The padding factory

# Additional directional padding utilities for logical properties
ps = ScaledFactory("ps", SPACING_CONFIG, "Padding inline-start utilities (logical property)")  # padding-inline-start
pe = ScaledFactory("pe", SPACING_CONFIG, "Padding inline-end utilities (logical property)")  # padding-inline-end

# %% ../../nbs/utilities/spacing.ipynb 7
def test_spacing_basic_examples(
):
    """Test basic padding utilities with various scale values."""
    # Numeric scales
    assert str(p(0)) == "p-0"
    assert str(p(4)) == "p-4"
    assert str(p(8)) == "p-8"
    assert str(p(2.5)) == "p-2.5"
    
    # Special values
    assert str(p.px) == "p-px"
    assert str(p.auto) == "p-auto"

# Run the tests
test_spacing_basic_examples()

# %% ../../nbs/utilities/spacing.ipynb 9
def test_spacing_directional_examples(
):
    """Test directional padding utilities."""
    # Individual sides
    assert str(p.t(4)) == "pt-4" # (top)
    assert str(p.r(4)) == "pr-4" # (right)
    assert str(p.b(4)) == "pb-4" # (bottom)
    assert str(p.l(4)) == "pl-4" # (left)
    
    # Horizontal and vertical
    assert str(p.x(8)) == "px-8" # (left and right)
    assert str(p.y(8)) == "py-8" # (top and bottom)

# Run the tests
test_spacing_directional_examples()

# %% ../../nbs/utilities/spacing.ipynb 11
def test_spacing_arbitrary_examples(
):
    """Test padding utilities with arbitrary and custom values."""
    # Arbitrary values
    assert str(p("10px")) == "p-[10px]"
    assert str(p("2.5rem")) == "p-[2.5rem]"
    assert str(p.x("calc(50% - 1rem)")) == "px-[calc(50% - 1rem)]"
    
    # Custom properties
    assert str(p("--spacing-lg")) == "p-(--spacing-lg)"
    assert str(p.y("--spacing-vertical")) == "py-(--spacing-vertical)"

# Run the tests
test_spacing_arbitrary_examples()

# %% ../../nbs/utilities/spacing.ipynb 13
m = DirectionalScaledFactory("m", SPACING_CONFIG, "Margin utilities for controlling element margin") # The margin factory

# Additional directional margin utilities for logical properties
ms = ScaledFactory("ms", SPACING_CONFIG, "Margin inline-start utilities (logical property)")  # margin-inline-start
me = ScaledFactory("me", SPACING_CONFIG, "Margin inline-end utilities (logical property)")  # margin-inline-end

# %% ../../nbs/utilities/spacing.ipynb 15
def test_spacing_margin_examples(
):
    """Test basic margin utilities with various scale values."""
    # Numeric scales
    assert str(m(0)) == "m-0"
    assert str(m(4)) == "m-4"
    assert str(m(8)) == "m-8"
    assert str(m(2.5)) == "m-2.5"
    
    # Special values
    assert str(m.px) == "m-px"
    assert str(m.auto) == "m-auto"

# Run the tests
test_spacing_margin_examples()

# %% ../../nbs/utilities/spacing.ipynb 17
def test_spacing_margin_directional_examples(
):
    """Test directional margin utilities."""
    # Individual sides
    assert str(m.t(4)) == "mt-4" # (top)
    assert str(m.r(4)) == "mr-4" # (right)
    assert str(m.b(4)) == "mb-4" # (bottom)
    assert str(m.l(4)) == "ml-4" # (left)
    
    # Horizontal and vertical
    assert str(m.x(8)) == "mx-8" # (left and right)
    assert str(m.y(8)) == "my-8" # (top and bottom)
    
    # Auto for centering
    assert str(m.x.auto) == "mx-auto" # (center horizontally)

# Run the tests
test_spacing_margin_directional_examples()

# %% ../../nbs/utilities/spacing.ipynb 19
def test_spacing_negative_examples(
):
    """Test negative margin utilities."""
    # Negative values using negative=True
    assert str(m(4, negative=True)) == "-m-4"
    assert str(m.t(2, negative=True)) == "-mt-2"
    
    # Negative values using .negative property
    assert str(m.negative(4)) == "-m-4"
    assert str(m.t.negative(2)) == "-mt-2"
    assert str(m.x.negative(8)) == "-mx-8"
    
    # Negative special values
    assert str(m.negative.px) == "-m-px"
    assert str(m.y.negative.px) == "-my-px"

# Run the tests
test_spacing_negative_examples()

# %% ../../nbs/utilities/spacing.ipynb 20
def test_spacing_logical_examples(
):
    """Test logical properties for padding and margin utilities."""
    # Logical padding properties
    assert str(ps(4)) == "ps-4" # (padding-inline-start)
    assert str(pe(4)) == "pe-4" # (padding-inline-end)
    
    # Logical margin properties
    assert str(ms(4)) == "ms-4" # (margin-inline-start)
    assert str(me(4)) == "me-4" # (margin-inline-end)
    assert str(ms.auto) == "ms-auto"
    assert str(me.auto) == "me-auto"
    
    # Negative logical margins
    assert str(ms.negative(2)) == "-ms-2"
    assert str(me.negative(2)) == "-me-2"

# Run the tests
test_spacing_logical_examples()

# %% ../../nbs/utilities/spacing.ipynb 22
# Create space between factories
# Note: space utilities use a hyphenated prefix pattern
class SpaceFactory(BaseFactory):
    """Special factory for space utilities that control spacing between child elements."""
    
    def __init__(self):
        """Initialize with scaled factories and reverse utilities."""
        super().__init__("Space utilities for adding consistent spacing between child elements")
        self.x = ScaledFactory("space-x", SPACING_CONFIG, "Horizontal spacing between child elements")
        self.y = ScaledFactory("space-y", SPACING_CONFIG, "Vertical spacing between child elements")
        self.x_reverse = SingleValueFactory("space-x-reverse", "Reverse the order of horizontal spacing")
        self.y_reverse = SingleValueFactory("space-y-reverse", "Reverse the order of vertical spacing")
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get information about the space factory."""
        return {
            'description': self._doc,
            'valid_inputs': 'Access sub-factories as attributes (x, y, x_reverse, y_reverse)',
            'options': {
                'sub_factories': {
                    'x': 'Horizontal spacing between child elements',
                    'y': 'Vertical spacing between child elements',
                    'x_reverse': 'Reverse horizontal spacing order',
                    'y_reverse': 'Reverse vertical spacing order'
                }
            }
        }

# %% ../../nbs/utilities/spacing.ipynb 23
space = SpaceFactory() # The space factory

# %% ../../nbs/utilities/spacing.ipynb 24
def test_spacing_space_between_examples(
):
    """Test space between child elements utilities."""
    # Horizontal spacing between children
    assert str(space.x(4)) == "space-x-4"
    assert str(space.x(8)) == "space-x-8"
    assert str(space.x(0)) == "space-x-0"
    assert str(space.x.px) == "space-x-px"
    
    # Vertical spacing between children
    assert str(space.y(4)) == "space-y-4"
    assert str(space.y(8)) == "space-y-8"
    
    # Negative space (overlap children)
    assert str(space.x.negative(2)) == "-space-x-2"
    assert str(space.y.negative(4)) == "-space-y-4"
    
    # Space reverse utilities using factory
    assert str(space.x_reverse) == "space-x-reverse"
    assert str(space.y_reverse) == "space-y-reverse"

# Run the tests
test_spacing_space_between_examples()

# %% ../../nbs/utilities/spacing.ipynb 26
def test_spacing_fasthtml_examples(
):
    """Test spacing utilities in practical FastHTML component examples."""
    from fasthtml.common import Div, P, Button, H2
    from cjm_fasthtml_tailwind.utilities.sizing import max_w
    from cjm_fasthtml_tailwind.utilities.layout import display_tw
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display
    
    # Card component with padding
    card = Div(
        H2("Card Title", cls=combine_classes(p.b(2))),
        P("Card content goes here.", cls=combine_classes(p.b(4))),
        Button("Action", cls=combine_classes(p.x(4), p.y(2))),
        cls=combine_classes(p(6), m(4))
    )
    
    # Show the generated classes
    assert card.attrs['class'] == "p-6 m-4"
    assert card.children[0].attrs['class'] == "pb-2"
    assert card.children[2].attrs['class'] == "px-4 py-2"
    
    # Layout with negative margins
    overlap_layout = Div(
        Div("Header", cls=combine_classes(p(4), m.b.negative(8))),
        Div("Content", cls=combine_classes(p(8))),
        cls=m(4)
    )
    
    assert overlap_layout.children[0].attrs['class'] == "p-4 -mb-8"
    
    # Centered container with auto margins
    centered_container = Div(
        "Centered content",
        cls=combine_classes(m.x.auto, p(8), max_w._4xl)
    )
    
    assert centered_container.attrs['class'] == "mx-auto p-8 max-w-4xl"
    
    # Return all examples in a grid layout
    return Div(
        card,
        overlap_layout,
        centered_container,
        cls=combine_classes(grid_display, gap(5))
    )

# Run the tests
test_spacing_fasthtml_examples()

# %% ../../nbs/utilities/spacing.ipynb 29
def pad(
    all: Optional[TailwindScale] = None,  # Padding for all sides
    x: Optional[TailwindScale] = None,    # Horizontal padding
    y: Optional[TailwindScale] = None,    # Vertical padding
    t: Optional[TailwindScale] = None,    # Top padding
    r: Optional[TailwindScale] = None,    # Right padding
    b: Optional[TailwindScale] = None,    # Bottom padding
    l: Optional[TailwindScale] = None     # Left padding
) -> str:  # Space-separated padding classes
    """Generate padding classes with a convenient API."""
    classes = []
    
    if all is not None:
        classes.append(str(p(all)))
    if x is not None:
        classes.append(str(p.x(x)))
    if y is not None:
        classes.append(str(p.y(y)))
    if t is not None:
        classes.append(str(p.t(t)))
    if r is not None:
        classes.append(str(p.r(r)))
    if b is not None:
        classes.append(str(p.b(b)))
    if l is not None:
        classes.append(str(p.l(l)))
    
    return combine_classes(*classes)

# %% ../../nbs/utilities/spacing.ipynb 30
def margin(
    all: Optional[TailwindScale] = None,  # Margin for all sides
    x: Optional[TailwindScale] = None,    # Horizontal margin
    y: Optional[TailwindScale] = None,    # Vertical margin
    t: Optional[TailwindScale] = None,    # Top margin
    r: Optional[TailwindScale] = None,    # Right margin
    b: Optional[TailwindScale] = None,    # Bottom margin
    l: Optional[TailwindScale] = None,    # Left margin
    negative: bool = False                 # Apply negative margins
) -> str:  # Space-separated margin classes
    """Generate margin classes with a convenient API."""
    classes = []
    
    if all is not None:
        classes.append(str(m(all, negative=negative)))
    if x is not None:
        if x == "auto":
            classes.append(str(m.x.auto))
        else:
            classes.append(str(m.x(x, negative=negative)))
    if y is not None:
        if y == "auto":
            classes.append(str(m.y.auto))
        else:
            classes.append(str(m.y(y, negative=negative)))
    if t is not None:
        classes.append(str(m.t(t, negative=negative)))
    if r is not None:
        classes.append(str(m.r(r, negative=negative)))
    if b is not None:
        classes.append(str(m.b(b, negative=negative)))
    if l is not None:
        classes.append(str(m.l(l, negative=negative)))
    
    return combine_classes(*classes)

# %% ../../nbs/utilities/spacing.ipynb 31
def test_spacing_helper_examples(
):
    """Test helper functions for common spacing patterns."""
    # Test pad helper
    assert pad(4) == "p-4"
    assert pad(x=8, y=4) == "px-8 py-4"
    assert pad(t=2, b=4, x=6) == "px-6 pt-2 pb-4"
    
    # Test margin helper
    assert margin(4) == "m-4"
    assert margin(x="auto", y=8) == "mx-auto my-8"
    assert margin(t=4, negative=True) == "-mt-4"

# Run the tests
test_spacing_helper_examples()

# %% ../../nbs/utilities/spacing.ipynb 33
def test_spacing_modifier_examples(
):
    """Test spacing utilities with modifiers for conditional styling."""
    # Test hover states
    assert str(p(4).hover) == "hover:p-4"
    assert str(m.x(8).hover) == "hover:mx-8"
    assert str(p.t(2).hover.focus) == "focus:hover:pt-2"
    
    # Test responsive modifiers
    assert str(p(4).sm) == "sm:p-4"
    assert str(p(4).max_sm) == "max-sm:p-4"
    assert str(m.x(8).md) == "md:mx-8"
    assert str(m.x(8).max_md) == "max-md:mx-8"
    assert str(p.y(0).lg) == "lg:py-0"
    assert str(m.negative(4).xl) == "xl:-m-4"
    
    # Test dark mode
    assert str(p(8).dark) == "dark:p-8"
    assert str(m.x.auto.dark) == "dark:mx-auto"
    
    # Test chained modifiers
    assert str(p(4).hover.md) == "md:hover:p-4"
    assert str(m(8).dark.lg.hover) == "hover:lg:dark:m-8"
    
    # Test with space utilities
    assert str(space.x(4).hover) == "hover:space-x-4"
    assert str(space.y(2).md) == "md:space-y-2"

# Run the tests
test_spacing_modifier_examples()

# %% ../../nbs/utilities/spacing.ipynb 34
def test_spacing_enhanced_factory_examples(
):
    """Test enhanced SingleValueFactory support in spacing utilities."""
    # Test space reverse utilities with modifiers
    assert str(space.x_reverse) == "space-x-reverse"
    assert str(space.x_reverse.hover) == "hover:space-x-reverse"
    
    assert str(space.y_reverse) == "space-y-reverse"
    assert str(space.y_reverse.md) == "md:space-y-reverse"
    assert str(space.y_reverse.dark) == "dark:space-y-reverse"
    
    # Test combining space utilities with modifiers
    from fasthtml.common import Div, Ul, Li
    
    # Responsive list spacing
    list_container = Ul(
        Li("Item 1"),
        Li("Item 2"),
        Li("Item 3"),
        cls=combine_classes(
            space.y(2),           # Default spacing
            space.y(4).md,        # Larger spacing on medium screens
            "flex flex-col"
        )
    )
    
    assert "space-y-2" in list_container.attrs['class']
    assert "md:space-y-4" in list_container.attrs['class']

# Run the tests
test_spacing_enhanced_factory_examples()
