"""Typography utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/typography.ipynb.

# %% auto 0
__all__ = ['font_family', 'FONT_SCALES', 'FONT_SIZE_CONFIG', 'font_size', 'antialiased', 'subpixel_antialiased', 'italic',
           'not_italic', 'font_weight', 'font_stretch', 'normal_nums', 'ordinal', 'slashed_zero', 'lining_nums',
           'oldstyle_nums', 'proportional_nums', 'tabular_nums', 'diagonal_fractions', 'stacked_fractions',
           'TRACKING_CONFIG', 'tracking', 'LINE_CLAMP_CONFIG', 'line_clamp', 'LEADING_CONFIG', 'leading', 'list_image',
           'list_position', 'list_style', 'text_align', 'text_color', 'underline', 'overline', 'line_through',
           'no_underline', 'decoration_color', 'decoration_style', 'DECORATION_THICKNESS_CONFIG',
           'decoration_thickness', 'UNDERLINE_OFFSET_CONFIG', 'underline_offset', 'uppercase', 'lowercase',
           'capitalize', 'normal_case', 'truncate', 'text_ellipsis', 'text_clip', 'text_wrap', 'text_nowrap',
           'text_balance', 'text_pretty', 'indent', 'align', 'whitespace', 'break_normal', 'break_all', 'break_keep',
           'wrap_break_word', 'wrap_anywhere', 'wrap_normal', 'hyphens', 'content', 'FontFamily',
           'test_typography_font_family_examples', 'test_typography_font_size_examples',
           'test_typography_font_smoothing_examples', 'test_typography_font_style_examples', 'FontWeight',
           'test_typography_font_weight_examples', 'FontStretch', 'test_typography_font_stretch_examples',
           'test_typography_font_variant_numeric_examples', 'test_typography_spacing_examples',
           'test_typography_line_clamp_examples', 'test_typography_line_height_examples', 'ListImageUtility',
           'ListImageFactory', 'test_typography_list_image_examples', 'ListStylePosition', 'ListStyleType',
           'test_typography_list_styles_examples', 'TextAlign', 'test_typography_text_alignment_examples',
           'test_typography_text_color_examples', 'DecorationStyle', 'test_typography_text_decoration_examples',
           'test_typography_underline_offset_examples', 'test_typography_text_transform_examples',
           'test_typography_text_overflow_examples', 'test_typography_text_wrap_examples',
           'test_typography_text_indent_examples', 'test_typography_vertical_align_examples',
           'test_typography_whitespace_examples', 'test_typography_word_break_examples',
           'test_typography_overflow_wrap_examples', 'test_typography_hyphens_examples', 'ContentUtility',
           'ContentFactory', 'test_typography_content_examples', 'test_typography_fasthtml_examples']

# %% ../../nbs/utilities/typography.ipynb 3
from enum import Enum
from typing import Optional, Union, Dict, Any, List
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, BaseFactory, BaseUtility, StandardUtility,
    combine_classes, TailwindValue, NamedScale
)
from ..builders.colors import ColoredFactory, ColorValue
from cjm_fasthtml_tailwind.builders.scales import (
    SimpleFactory, ScaledFactory, ScaleConfig, DirectionalScaledFactory, 
    SPACING_CONFIG, NUMERIC_SCALE, enums_to_simple_factory
)

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ..core.testing import create_test_app, create_test_page, start_test_server
from IPython.display import display

# %% ../../nbs/utilities/typography.ipynb 5
class FontFamily(str, Enum):
    """Font family options for controlling typography."""
    SANS = "sans"
    SERIF = "serif"
    MONO = "mono"

font_family = enums_to_simple_factory("font", [FontFamily], "Utilities for controlling the font family of an element.") # Font family utilities

# %% ../../nbs/utilities/typography.ipynb 6
def test_typography_font_family_examples():
    """Test font family utilities."""
    assert str(font_family.sans) == "font-sans"
    assert str(font_family.serif) == "font-serif"
    assert str(font_family.mono) == "font-mono"

# Run the tests
test_typography_font_family_examples()

# %% ../../nbs/utilities/typography.ipynb 8
FONT_SCALES = [ # Font size named scales
    NamedScale("xs"),
    NamedScale("sm"),
    NamedScale("base"),
    NamedScale("lg"),
    NamedScale("xl"),
    NamedScale("2xl"),
    NamedScale("3xl"),
    NamedScale("4xl"),
    NamedScale("5xl"),
    NamedScale("6xl"),
    NamedScale("7xl"),
    NamedScale("8xl"),
    NamedScale("9xl"),
]

# %% ../../nbs/utilities/typography.ipynb 9
FONT_SIZE_CONFIG = ScaleConfig( # Font size configuration
    numeric=False,  # No numeric scales for font size
    decimals=False,
    fractions=False,
    named=FONT_SCALES,
    negative=False
)

# %% ../../nbs/utilities/typography.ipynb 10
font_size = ScaledFactory('text', FONT_SIZE_CONFIG, "Utilities for controlling the font size of an element.") # Font size factory

# %% ../../nbs/utilities/typography.ipynb 11
def test_typography_font_size_examples():
    """Test font size utilities."""
    assert str(font_size.xs) == "text-xs"
    assert str(font_size.sm) == "text-sm"
    assert str(font_size.base) == "text-base"
    assert str(font_size.lg) == "text-lg"
    assert str(font_size.xl) == "text-xl"
    assert str(font_size._2xl) == "text-2xl"
    assert str(font_size._3xl) == "text-3xl"
    assert str(font_size._4xl) == "text-4xl"
    assert str(font_size._5xl) == "text-5xl"
    assert str(font_size._6xl) == "text-6xl"
    assert str(font_size._7xl) == "text-7xl"
    assert str(font_size._8xl) == "text-8xl"
    assert str(font_size._9xl) == "text-9xl"

# Run the tests
test_typography_font_size_examples()

# %% ../../nbs/utilities/typography.ipynb 14
antialiased = SingleValueFactory("antialiased", "Applies antialiased font smoothing") # Antialiased font smoothing
subpixel_antialiased = SingleValueFactory("subpixel-antialiased", "Applies subpixel antialiased font smoothing") # Subpixel antialiased font smoothing

# %% ../../nbs/utilities/typography.ipynb 15
def test_typography_font_smoothing_examples():
    """Test font smoothing utilities."""
    assert str(antialiased) == "antialiased"
    assert str(subpixel_antialiased) == "subpixel-antialiased"

# Run the tests
test_typography_font_smoothing_examples()

# %% ../../nbs/utilities/typography.ipynb 17
italic = SingleValueFactory("italic", "Sets font style to italic") # Italic font style
not_italic = SingleValueFactory("not-italic", "Sets font style to normal") # Normal font style

# %% ../../nbs/utilities/typography.ipynb 18
def test_typography_font_style_examples():
    """Test font style utilities."""
    assert str(italic) == "italic"
    assert str(not_italic) == "not-italic"

# Run the tests
test_typography_font_style_examples()

# %% ../../nbs/utilities/typography.ipynb 20
class FontWeight(str, Enum):
    """Font weight options from thin to black."""
    THIN = "thin"
    EXTRALIGHT = "extralight"
    LIGHT = "light"
    NORMAL = "normal"
    MEDIUM = "medium"
    SEMIBOLD = "semibold"
    BOLD = "bold"
    EXTRABOLD = "extrabold"
    BLACK = "black"

font_weight = enums_to_simple_factory("font", [FontWeight], "Utilities for controlling the font weight of an element.") # Font weight utilities

# %% ../../nbs/utilities/typography.ipynb 21
def test_typography_font_weight_examples():
    """Test font weight utilities."""
    # Named weights
    assert str(font_weight.thin) == "font-thin"
    assert str(font_weight.extralight) == "font-extralight"
    assert str(font_weight.light) == "font-light"
    assert str(font_weight.normal) == "font-normal"
    assert str(font_weight.medium) == "font-medium"
    assert str(font_weight.semibold) == "font-semibold"
    assert str(font_weight.bold) == "font-bold"
    assert str(font_weight.extrabold) == "font-extrabold"
    assert str(font_weight.black) == "font-black"

# Run the tests
test_typography_font_weight_examples()

# %% ../../nbs/utilities/typography.ipynb 23
class FontStretch(str, Enum):
    """Font stretch options for controlling font width."""
    ULTRA_CONDENSED = "ultra-condensed"
    EXTRA_CONDENSED = "extra-condensed"
    CONDENSED = "condensed"
    SEMI_CONDENSED = "semi-condensed"
    NORMAL = "normal"
    SEMI_EXPANDED = "semi-expanded"
    EXPANDED = "expanded"
    EXTRA_EXPANDED= "extra-expanded"
    ULRA_EXPANDED = "ultra-expanded"

font_stretch = enums_to_simple_factory("font-stretch", [FontStretch], "Utilities for selecting the width of a font face.") # Font stretch utilities

# %% ../../nbs/utilities/typography.ipynb 24
def test_typography_font_stretch_examples():
    """Test font stretch utilities."""
    assert str(font_stretch.ultra_condensed) == "font-stretch-ultra-condensed"
    assert str(font_stretch.extra_condensed) == "font-stretch-extra-condensed"
    assert str(font_stretch.condensed) == "font-stretch-condensed"
    assert str(font_stretch.semi_condensed) == "font-stretch-semi-condensed"
    assert str(font_stretch.normal) == "font-stretch-normal"
    assert str(font_stretch.semi_expanded) == "font-stretch-semi-expanded"
    assert str(font_stretch.expanded) == "font-stretch-expanded"
    assert str(font_stretch.extra_expanded) == "font-stretch-extra-expanded"
    assert str(font_stretch.ultra_expanded) == "font-stretch-ultra-expanded"

# Run the tests
test_typography_font_stretch_examples()

# %% ../../nbs/utilities/typography.ipynb 27
# Font variant numeric utilities
normal_nums = SingleValueFactory("normal-nums", "Normal numeric font variant") # Normal numbers
ordinal = SingleValueFactory("ordinal", "Ordinal numeric markers") # Ordinal numbers
slashed_zero = SingleValueFactory("slashed-zero", "Force zero with slash") # Slashed zero
lining_nums = SingleValueFactory("lining-nums", "Lining figures") # Lining numbers
oldstyle_nums = SingleValueFactory("oldstyle-nums", "Old-style figures") # Old-style numbers
proportional_nums = SingleValueFactory("proportional-nums", "Proportional figures") # Proportional numbers
tabular_nums = SingleValueFactory("tabular-nums", "Tabular figures") # Tabular numbers
diagonal_fractions = SingleValueFactory("diagonal-fractions", "Diagonal fractions") # Diagonal fractions
stacked_fractions = SingleValueFactory("stacked-fractions", "Stacked fractions") # Stacked fractions

# %% ../../nbs/utilities/typography.ipynb 28
def test_typography_font_variant_numeric_examples():
    """Test font variant numeric utilities."""
    assert str(normal_nums) == "normal-nums"
    assert str(ordinal) == "ordinal"
    assert str(slashed_zero) == "slashed-zero"
    assert str(lining_nums) == "lining-nums"
    assert str(oldstyle_nums) == "oldstyle-nums"
    assert str(proportional_nums) == "proportional-nums"
    assert str(tabular_nums) == "tabular-nums"
    assert str(diagonal_fractions) == "diagonal-fractions"
    assert str(stacked_fractions) == "stacked-fractions"

# Run the tests
test_typography_font_variant_numeric_examples()

# %% ../../nbs/utilities/typography.ipynb 31
# Letter spacing config
TRACKING_CONFIG = ScaleConfig(
    numeric=False,
    decimals=False,
    fractions=False,
    named=[
        NamedScale("tighter", "--tracking-tighter", "-0.05em"),
        NamedScale("tight", "--tracking-tight", "-0.025em"),
        NamedScale("normal", "--tracking-normal", "0em"),
        NamedScale("wide", "--tracking-wide", "0.025em"),
        NamedScale("wider", "--tracking-wider", "0.05em"),
        NamedScale("widest", "--tracking-widest", "0.1em")
    ],
    special={},
    negative=False
)

tracking = ScaledFactory("tracking", TRACKING_CONFIG, "Letter spacing utilities for controlling tracking") # Letter spacing factory

# %% ../../nbs/utilities/typography.ipynb 32
def test_typography_spacing_examples():
    """Test letter spacing utilities."""
    # Letter spacing
    assert str(tracking.tighter) == "tracking-tighter"
    assert str(tracking.tight) == "tracking-tight"
    assert str(tracking.normal) == "tracking-normal"
    assert str(tracking.wide) == "tracking-wide"
    assert str(tracking.wider) == "tracking-wider"
    assert str(tracking.widest) == "tracking-widest"
    assert str(tracking("0.05em")) == "tracking-[0.05em]"
    assert str(tracking("--custom-tracking")) == "tracking-(--custom-tracking)"

# Run the tests
test_typography_spacing_examples()

# %% ../../nbs/utilities/typography.ipynb 34
# Line clamp config - numeric values for number of lines
LINE_CLAMP_CONFIG = ScaleConfig(
    numeric=True,
    decimals=False,
    fractions=False,
    named=[NamedScale("none")],
    negative=False
)

line_clamp = ScaledFactory("line-clamp", LINE_CLAMP_CONFIG, "Line clamp utilities for limiting text lines") # Line clamp factory

# %% ../../nbs/utilities/typography.ipynb 35
def test_typography_line_clamp_examples():
    """Test line clamp utilities."""
        
    # Line clamp
    assert str(line_clamp.none) == "line-clamp-none"
    assert str(line_clamp(1)) == "line-clamp-1"
    assert str(line_clamp(2)) == "line-clamp-2"
    assert str(line_clamp(3)) == "line-clamp-3"
    assert str(line_clamp(4)) == "line-clamp-4"
    assert str(line_clamp(5)) == "line-clamp-5"
    assert str(line_clamp(6)) == "line-clamp-6"
    assert str(line_clamp("[10]")) == "line-clamp-[10]"

# Run the tests
test_typography_line_clamp_examples()

# %% ../../nbs/utilities/typography.ipynb 38
# Line height config - uses numeric scale plus none
LEADING_CONFIG = ScaleConfig(
    numeric=True,
    decimals=False,
    fractions=False,
    named=[NamedScale("none")],
    negative=False
)

leading = ScaledFactory("leading", LEADING_CONFIG, "Utilities for controlling the leading, or line height, of an element.") # Line height factory

# %% ../../nbs/utilities/typography.ipynb 39
def test_typography_line_height_examples():
    """Test line height utilities."""
    # Line height
    assert str(leading.none) == "leading-none"
    assert str(leading(3)) == "leading-3"
    assert str(leading(4)) == "leading-4"
    assert str(leading(5)) == "leading-5"
    assert str(leading(6)) == "leading-6"
    assert str(leading(7)) == "leading-7"
    assert str(leading(8)) == "leading-8"
    assert str(leading(9)) == "leading-9"
    assert str(leading(10)) == "leading-10"
    assert str(leading("1.5")) == "leading-[1.5]"
    assert str(leading("20px")) == "leading-[20px]"
    assert str(leading("--custom-leading")) == "leading-(--custom-leading)"

# Run the tests
test_typography_line_height_examples()

# %% ../../nbs/utilities/typography.ipynb 42
class ListImageUtility(BaseUtility):
    """Utility class for list-style-image with arbitrary value support."""
    
    def _format_value(
        self,
        value: TailwindValue  # The value to format
    ) -> str:  # The formatted value string
        """Format list image value."""
        value_str = str(value)
        
        # Handle none value
        if value_str == "none":
            return "none"
        
        # Handle custom properties
        if value_str.startswith("--"):
            return f"({value_str})"
        
        # All other values are arbitrary
        return f"[{value_str}]"

class ListImageFactory(BaseFactory):
    """Factory for list-style-image utilities."""
    
    def __init__(self):
        """Initialize list image factory."""
        super().__init__("List style image utilities for controlling list item marker images")
        self.none = ListImageUtility("list-image")
        self.none._value = "none"
    
    def __call__(
        self,
        value: str  # Image URL or value
    ) -> ListImageUtility:  # A list image utility instance
        """Create list image utility with value."""
        utility = ListImageUtility("list-image")
        utility._value = utility._format_value(value)
        return utility
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Factory information
        """Get information about the list image factory."""
        return {
            'description': self._doc,
            'valid_inputs': [
                'none: Remove list marker image',
                'URL values: url(path/to/image.svg)',
                'Custom properties: --list-marker-image',
                'Arbitrary values: Any valid CSS list-style-image value'
            ],
            'options': {}
        }

list_image = ListImageFactory() # List image factory

# %% ../../nbs/utilities/typography.ipynb 43
def test_typography_list_image_examples():
    """Test list style image utilities."""
    assert str(list_image.none) == "list-image-none"
    assert str(list_image("url(/path/to/marker.svg)")) == "list-image-[url(/path/to/marker.svg)]"
    assert str(list_image("--custom-marker")) == "list-image-(--custom-marker)"
    assert str(list_image("url('star.png')")) == "list-image-[url('star.png')]"

# Run the tests
test_typography_list_image_examples()

# %% ../../nbs/utilities/typography.ipynb 45
class ListStylePosition(str, Enum):
    """List marker position options."""
    INSIDE = "inside"
    OUTSIDE = "outside"

list_position = enums_to_simple_factory("list", [ListStylePosition], "Utilities for controlling the position of bullets and numbers in lists.") # List position factory

# %% ../../nbs/utilities/typography.ipynb 46
class ListStyleType(str, Enum):
    """List marker type options."""
    DISC = "disc"
    DECIMAL = "decimal"
    NONE = "none"

list_style = enums_to_simple_factory("list", [ListStyleType], "Utilities for controlling the marker style of a list.") # List type factory

# %% ../../nbs/utilities/typography.ipynb 47
def test_typography_list_styles_examples():
    """Test list styles utilities."""
    
    # List styles
    assert str(list_position.inside) == "list-inside"
    assert str(list_position.outside) == "list-outside"
    assert str(list_style.disc) == "list-disc"
    assert str(list_style.decimal) == "list-decimal"
    assert str(list_style.none) == "list-none"

# Run the tests
test_typography_list_styles_examples()

# %% ../../nbs/utilities/typography.ipynb 49
class TextAlign(str, Enum):
    """Text alignment options."""
    LEFT = "left"
    CENTER = "center"
    RIGHT = "right"
    JUSTIFY = "justify"
    START = "start"
    end = "end"

text_align = enums_to_simple_factory("text", [TextAlign], "Utilities for controlling the alignment of text.") # Text alignment factory

# %% ../../nbs/utilities/typography.ipynb 50
def test_typography_text_alignment_examples():
    """Test text alignment utilities."""
    # Text alignment
    assert str(text_align.left) == "text-left"
    assert str(text_align.center) == "text-center"
    assert str(text_align.right) == "text-right"
    assert str(text_align.justify) == "text-justify"
    assert str(text_align.start) == "text-start"
    assert str(text_align.end) == "text-end"

# Run the tests
test_typography_text_alignment_examples()

# %% ../../nbs/utilities/typography.ipynb 52
text_color = ColoredFactory("text", "Utilities for controlling the text color of an element.") # Text color factory

# %% ../../nbs/utilities/typography.ipynb 53
def test_typography_text_color_examples():
    """Test text color utilities."""
    # Standard colors
    assert str(text_color.red._500) == "text-red-500"
    assert str(text_color.blue._300) == "text-blue-300"
    assert str(text_color.green._600) == "text-green-600"

    # Test all 22 color families
    assert str(text_color.red._500) == "text-red-500"
    assert str(text_color.orange._500) == "text-orange-500"
    assert str(text_color.amber._500) == "text-amber-500"
    assert str(text_color.yellow._500) == "text-yellow-500"
    assert str(text_color.lime._500) == "text-lime-500"
    assert str(text_color.green._500) == "text-green-500"
    assert str(text_color.emerald._500) == "text-emerald-500"
    assert str(text_color.teal._500) == "text-teal-500"
    assert str(text_color.cyan._500) == "text-cyan-500"
    assert str(text_color.sky._500) == "text-sky-500"
    assert str(text_color.blue._500) == "text-blue-500"
    assert str(text_color.indigo._500) == "text-indigo-500"
    assert str(text_color.violet._500) == "text-violet-500"
    assert str(text_color.purple._500) == "text-purple-500"
    assert str(text_color.fuchsia._500) == "text-fuchsia-500"
    assert str(text_color.pink._500) == "text-pink-500"
    assert str(text_color.rose._500) == "text-rose-500"
    assert str(text_color.slate._500) == "text-slate-500"
    assert str(text_color.gray._500) == "text-gray-500"
    assert str(text_color.zinc._500) == "text-zinc-500"
    assert str(text_color.neutral._500) == "text-neutral-500"
    assert str(text_color.stone._500) == "text-stone-500"
    
    # Special colors
    assert str(text_color.transparent) == "text-transparent"
    assert str(text_color.black) == "text-black"
    assert str(text_color.white) == "text-white"
    assert str(text_color.current) == "text-current"
    assert str(text_color.inherit) == "text-inherit"
    
    # With opacity
    assert str(text_color.red._500.opacity(50)) == "text-red-500/50"
    assert str(text_color.blue._300.opacity(75)) == "text-blue-300/75"
    
    # Arbitrary values
    assert str(text_color("#ff0000")) == "text-[#ff0000]"
    assert str(text_color("rgb(255, 0, 0)")) == "text-[rgb(255, 0, 0)]"
    assert str(text_color("--custom-color")) == "text-(--custom-color)"

# Run the tests
test_typography_text_color_examples()

# %% ../../nbs/utilities/typography.ipynb 55
underline = SingleValueFactory("underline", "Underline text decoration") # Underline text
overline = SingleValueFactory("overline", "Overline text decoration") # Overline text
line_through = SingleValueFactory("line-through", "Line through text decoration") # Line through text
no_underline = SingleValueFactory("no-underline", "Remove text decoration") # No text decoration

# %% ../../nbs/utilities/typography.ipynb 57
decoration_color = ColoredFactory("decoration", "Utilities for controlling the color of text decorations.") # Text decoration color factory

# %% ../../nbs/utilities/typography.ipynb 59
class DecorationStyle(str, Enum):
    """Text decoration style options."""
    SOLID = "solid"
    DOUBLE = "double"
    DOTTED = "dotted"
    DASHED = "dashed"
    WAVY = "wavy"

decoration_style = enums_to_simple_factory("decoration", [DecorationStyle], "Utilities for controlling the style of text decorations.") # Text decoration style factory

# %% ../../nbs/utilities/typography.ipynb 61
# Decoration thickness config
DECORATION_THICKNESS_CONFIG = ScaleConfig(
    numeric=True,  # 0, 1, 2, 4, 8
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto",
        "from-font": "from-font"
    },
    negative=False
)

decoration_thickness = ScaledFactory("decoration", DECORATION_THICKNESS_CONFIG, "Text decoration thickness utilities") # Text decoration thickness factory

# %% ../../nbs/utilities/typography.ipynb 62
def test_typography_text_decoration_examples():
    """Test text decoration utilities."""
    # Decoration lines
    assert str(underline) == "underline"
    assert str(overline) == "overline"
    assert str(line_through) == "line-through"
    assert str(no_underline) == "no-underline"
    
    # Decoration colors
    assert str(decoration_color.red._500) == "decoration-red-500"
    assert str(decoration_color.blue._300) == "decoration-blue-300"
    assert str(decoration_color.inherit) == "decoration-inherit"
    assert str(decoration_color.current) == "decoration-current"
    assert str(decoration_color.transparent) == "decoration-transparent"

    # Test all 22 color families
    assert str(decoration_color.red._500) == "decoration-red-500"
    assert str(decoration_color.orange._500) == "decoration-orange-500"
    assert str(decoration_color.amber._500) == "decoration-amber-500"
    assert str(decoration_color.yellow._500) == "decoration-yellow-500"
    assert str(decoration_color.lime._500) == "decoration-lime-500"
    assert str(decoration_color.green._500) == "decoration-green-500"
    assert str(decoration_color.emerald._500) == "decoration-emerald-500"
    assert str(decoration_color.teal._500) == "decoration-teal-500"
    assert str(decoration_color.cyan._500) == "decoration-cyan-500"
    assert str(decoration_color.sky._500) == "decoration-sky-500"
    assert str(decoration_color.blue._500) == "decoration-blue-500"
    assert str(decoration_color.indigo._500) == "decoration-indigo-500"
    assert str(decoration_color.violet._500) == "decoration-violet-500"
    assert str(decoration_color.purple._500) == "decoration-purple-500"
    assert str(decoration_color.fuchsia._500) == "decoration-fuchsia-500"
    assert str(decoration_color.pink._500) == "decoration-pink-500"
    assert str(decoration_color.rose._500) == "decoration-rose-500"
    assert str(decoration_color.slate._500) == "decoration-slate-500"
    assert str(decoration_color.gray._500) == "decoration-gray-500"
    assert str(decoration_color.zinc._500) == "decoration-zinc-500"
    assert str(decoration_color.neutral._500) == "decoration-neutral-500"
    assert str(decoration_color.stone._500) == "decoration-stone-500"
    
    # Decoration styles
    assert str(decoration_style.solid) == "decoration-solid"
    assert str(decoration_style.double) == "decoration-double"
    assert str(decoration_style.dotted) == "decoration-dotted"
    assert str(decoration_style.dashed) == "decoration-dashed"
    assert str(decoration_style.wavy) == "decoration-wavy"
    
    # Decoration thickness
    assert str(decoration_thickness(0)) == "decoration-0"
    assert str(decoration_thickness(1)) == "decoration-1"
    assert str(decoration_thickness(2)) == "decoration-2"
    assert str(decoration_thickness(4)) == "decoration-4"
    assert str(decoration_thickness(8)) == "decoration-8"
    assert str(decoration_thickness.auto) == "decoration-auto"
    assert str(decoration_thickness.from_font) == "decoration-from-font"
    assert str(decoration_thickness("3px")) == "decoration-[3px]"
    assert str(decoration_thickness("--line-thickness")) == "decoration-(--line-thickness)"

# Run the tests
test_typography_text_decoration_examples()

# %% ../../nbs/utilities/typography.ipynb 64
# Underline offset config
UNDERLINE_OFFSET_CONFIG = ScaleConfig(
    numeric=True,  # 0, 1, 2, 4, 8
    decimals=False,
    fractions=False,
    named=None,
    special={
        "auto": "auto"
    },
    negative=True  # Supports negative values
)

underline_offset = ScaledFactory("underline-offset", UNDERLINE_OFFSET_CONFIG, "Text underline offset utilities") # Text underline offset factory

# %% ../../nbs/utilities/typography.ipynb 65
def test_typography_underline_offset_examples():
    """Test underline offset utilities."""    
    # Underline offset
    assert str(underline_offset(0)) == "underline-offset-0"
    assert str(underline_offset(1)) == "underline-offset-1"
    assert str(underline_offset(2)) == "underline-offset-2"
    assert str(underline_offset(4)) == "underline-offset-4"
    assert str(underline_offset(8)) == "underline-offset-8"
    assert str(underline_offset.auto) == "underline-offset-auto"
    assert str(underline_offset.negative(1)) == "-underline-offset-1"
    assert str(underline_offset.negative(2)) == "-underline-offset-2"
    assert str(underline_offset("3px")) == "underline-offset-[3px]"

# Run the tests
test_typography_underline_offset_examples()

# %% ../../nbs/utilities/typography.ipynb 67
uppercase = SingleValueFactory("uppercase", "Transform text to uppercase") # Uppercase text
lowercase = SingleValueFactory("lowercase", "Transform text to lowercase") # Lowercase text
capitalize = SingleValueFactory("capitalize", "Capitalize first letter of each word") # Capitalize text
normal_case = SingleValueFactory("normal-case", "Preserve original text case") # Normal case text

# %% ../../nbs/utilities/typography.ipynb 68
def test_typography_text_transform_examples():
    """Test text transform utilities."""    
    # Text transform
    assert str(uppercase) == "uppercase"
    assert str(lowercase) == "lowercase"
    assert str(capitalize) == "capitalize"
    assert str(normal_case) == "normal-case"

# Run the tests
test_typography_text_transform_examples()

# %% ../../nbs/utilities/typography.ipynb 70
truncate = SingleValueFactory("truncate", "Truncate text with ellipsis when it overflows") # Truncate overflow text
text_ellipsis = SingleValueFactory("text-ellipsis", "Use ellipsis for text overflow") # Text ellipsis
text_clip = SingleValueFactory("text-clip", "Clip text when it overflows") # Text clip

# %% ../../nbs/utilities/typography.ipynb 71
def test_typography_text_overflow_examples():
    """Test text overflow utilities."""
    # Text overflow
    assert str(truncate) == "truncate"
    assert str(text_ellipsis) == "text-ellipsis"
    assert str(text_clip) == "text-clip"

# Run the tests
test_typography_text_overflow_examples()

# %% ../../nbs/utilities/typography.ipynb 73
text_wrap = SingleValueFactory("text-wrap", "Allow text to wrap normally") # Text wrap
text_nowrap = SingleValueFactory("text-nowrap", "Prevent text from wrapping") # Text no wrap
text_balance = SingleValueFactory("text-balance", "Balance text for better readability") # Text balance
text_pretty = SingleValueFactory("text-pretty", "Optimize text wrapping for readability") # Text pretty

# %% ../../nbs/utilities/typography.ipynb 74
def test_typography_text_wrap_examples():
    """Test text wrap utilities."""
    
    # Text wrap
    assert str(text_wrap) == "text-wrap"
    assert str(text_nowrap) == "text-nowrap"
    assert str(text_balance) == "text-balance"
    assert str(text_pretty) == "text-pretty"

# Run the tests
test_typography_text_wrap_examples()

# %% ../../nbs/utilities/typography.ipynb 76
# Text indent uses spacing scale
indent = DirectionalScaledFactory("indent", SPACING_CONFIG, "Text indentation utilities") # Text indent factory

# %% ../../nbs/utilities/typography.ipynb 77
def test_typography_text_indent_examples():
    """Test text indent utilities."""
        
    # Text indent
    assert str(indent(0)) == "indent-0"
    assert str(indent(4)) == "indent-4"
    assert str(indent(8)) == "indent-8"
    assert str(indent.px) == "indent-px"
    assert str(indent.negative(4)) == "-indent-4"
    assert str(indent("10px")) == "indent-[10px]"

# Run the tests
test_typography_text_indent_examples()

# %% ../../nbs/utilities/typography.ipynb 79
align = SimpleFactory(
    {
        "baseline": "align-baseline",
        "top": "align-top",
        "middle": "align-middle",
        "bottom": "align-bottom",
        "text_top": "align-text-top",
        "text_bottom": "align-text-bottom",
        "sub": "align-sub",
        "super": "align-super"
    },
    "Vertical alignment utilities for inline or table-cell elements"
) # Vertical align factory

# %% ../../nbs/utilities/typography.ipynb 80
def test_typography_vertical_align_examples():
    """Test vertical align utilities."""
    
    # Vertical align
    assert str(align.baseline) == "align-baseline"
    assert str(align.top) == "align-top"
    assert str(align.middle) == "align-middle"
    assert str(align.bottom) == "align-bottom"
    assert str(align.text_top) == "align-text-top"
    assert str(align.text_bottom) == "align-text-bottom"
    assert str(align.sub) == "align-sub"
    assert str(align.super) == "align-super"

# Run the tests
test_typography_vertical_align_examples()

# %% ../../nbs/utilities/typography.ipynb 82
whitespace = SimpleFactory(
    {
        "normal": "whitespace-normal",
        "nowrap": "whitespace-nowrap",
        "pre": "whitespace-pre",
        "pre_line": "whitespace-pre-line",
        "pre_wrap": "whitespace-pre-wrap",
        "break_spaces": "whitespace-break-spaces"
    },
    "White space utilities for controlling how white space is handled"
) # White space factory

# %% ../../nbs/utilities/typography.ipynb 83
def test_typography_whitespace_examples():
    """Test whitespace utilities."""
    
    # White space
    assert str(whitespace.normal) == "whitespace-normal"
    assert str(whitespace.nowrap) == "whitespace-nowrap"
    assert str(whitespace.pre) == "whitespace-pre"
    assert str(whitespace.pre_line) == "whitespace-pre-line"
    assert str(whitespace.pre_wrap) == "whitespace-pre-wrap"
    assert str(whitespace.break_spaces) == "whitespace-break-spaces"

# Run the tests
test_typography_whitespace_examples()

# %% ../../nbs/utilities/typography.ipynb 85
break_normal = SingleValueFactory("break-normal", "Normal word breaking behavior") # Normal word break
break_all = SingleValueFactory("break-all", "Break words at any character") # Break all
break_keep = SingleValueFactory("break-keep", "Prevent word breaks") # Keep words together

# %% ../../nbs/utilities/typography.ipynb 86
def test_typography_word_break_examples():
    """Test word break utilities."""
    
    # Word break
    assert str(break_normal) == "break-normal"
    assert str(break_all) == "break-all"
    assert str(break_keep) == "break-keep"

# Run the tests
test_typography_word_break_examples()

# %% ../../nbs/utilities/typography.ipynb 88
wrap_break_word = SingleValueFactory("wrap-break-word", "Break long words at arbitrary points") # Break word wrap
wrap_anywhere = SingleValueFactory("wrap-anywhere", "Break at any point if needed") # Wrap anywhere
wrap_normal = SingleValueFactory("wrap-normal", "Break only at normal break points") # Normal wrap

# %% ../../nbs/utilities/typography.ipynb 89
def test_typography_overflow_wrap_examples():
    """Test overflow wrap utilities."""
    
    # Overflow wrap
    assert str(wrap_break_word) == "wrap-break-word"
    assert str(wrap_anywhere) == "wrap-anywhere"
    assert str(wrap_normal) == "wrap-normal"

# Run the tests
test_typography_overflow_wrap_examples()

# %% ../../nbs/utilities/typography.ipynb 91
hyphens = SimpleFactory(
    {
        "none": "hyphens-none",
        "manual": "hyphens-manual",
        "auto": "hyphens-auto"
    },
    "Hyphenation utilities for controlling word hyphenation"
) # Hyphens factory

# %% ../../nbs/utilities/typography.ipynb 92
def test_typography_hyphens_examples():
    """Test hyphens utilities."""
    
    # Hyphens
    assert str(hyphens.none) == "hyphens-none"
    assert str(hyphens.manual) == "hyphens-manual"
    assert str(hyphens.auto) == "hyphens-auto"

# Run the tests
test_typography_hyphens_examples()

# %% ../../nbs/utilities/typography.ipynb 94
class ContentUtility(BaseUtility):
    """Utility class for content with arbitrary value support."""
    
    def _format_value(
        self,
        value: TailwindValue  # The value to format
    ) -> str:  # The formatted value string
        """Format content value."""
        value_str = str(value)
        
        # Handle none value
        if value_str == "none":
            return "none"
        
        # Handle custom properties
        if value_str.startswith("--"):
            return f"({value_str})"
        
        # All other values are arbitrary
        return f"[{value_str}]"

class ContentFactory(BaseFactory):
    """Factory for content utilities for pseudo-elements."""
    
    def __init__(self):
        """Initialize content factory."""
        super().__init__("Content utilities for controlling before and after pseudo-element content")
        self.none = ContentUtility("content")
        self.none._value = "none"
    
    def __call__(
        self,
        value: str  # Content value
    ) -> ContentUtility:  # A content utility instance
        """Create content utility with value."""
        utility = ContentUtility("content")
        utility._value = utility._format_value(value)
        return utility
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Factory information
        """Get information about the content factory."""
        return {
            'description': self._doc,
            'valid_inputs': [
                'none: Remove content',
                'String values: "Hello" or \'World\'',
                'Attribute values: attr(data-content)',
                'Custom properties: --content-before',
                'Special values: open-quote, close-quote, no-open-quote, no-close-quote',
                'Arbitrary values: Any valid CSS content value'
            ],
            'options': {}
        }

content = ContentFactory() # Content factory

# %% ../../nbs/utilities/typography.ipynb 95
def test_typography_content_examples():
    """Test content utilities for pseudo-elements."""
    assert str(content.none) == "content-none"
    assert str(content("'Hello'")) == "content-['Hello']"
    assert str(content('"→"')) == 'content-["→"]'
    assert str(content("attr(data-label)")) == "content-[attr(data-label)]"
    assert str(content("--custom-content")) == "content-(--custom-content)"
    assert str(content("open-quote")) == "content-[open-quote]"
    assert str(content("' (' attr(href) ')'")) == "content-[' (' attr(href) ')']"

# Run the tests
test_typography_content_examples()

# %% ../../nbs/utilities/typography.ipynb 99
def test_typography_fasthtml_examples():
    """Test typography utilities in practical FastHTML component examples."""
    from fasthtml.common import H1, H2, P, Div, Span, A, Ul, Li, Blockquote
    from cjm_fasthtml_tailwind.utilities.sizing import max_w
    from cjm_fasthtml_tailwind.utilities.backgrounds import bg
    from cjm_fasthtml_tailwind.utilities.spacing import p
    from cjm_fasthtml_tailwind.utilities.borders import rounded, border, border_color
    from cjm_fasthtml_tailwind.utilities.layout import display_tw
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display
    
    # Heading with multiple typography utilities
    heading = H1(
        "Welcome to Our Site",
        cls=combine_classes(
            font_size._4xl,
            font_weight.bold,
            text_color.gray._900,
            tracking.tight,
            leading(8)
        )
    )
    assert "text-4xl" in heading.attrs['class']
    assert "font-bold" in heading.attrs['class']
    assert "text-gray-900" in heading.attrs['class']
    assert "tracking-tight" in heading.attrs['class']
    assert "leading-8" in heading.attrs['class']
    
    # Paragraph with text styling
    paragraph = P(
        "This is a sample paragraph with various text styles applied.",
        cls=combine_classes(
            font_size.base,
            text_color.gray._600,
            leading(7),
            text_align.justify
        )
    )
    assert "text-base" in paragraph.attrs['class']
    assert "text-gray-600" in paragraph.attrs['class']
    
    # Link with underline and hover effects
    link = A(
        "Click here",
        href="#",
        cls=combine_classes(
            text_color.blue._600,
            underline,
            decoration_style.dotted,
            decoration_thickness(2),
            font_weight.medium
        )
    )
    assert "text-blue-600" in link.attrs['class']
    assert "underline" in link.attrs['class']
    assert "decoration-dotted" in link.attrs['class']
    
    # Truncated text
    truncated = Div(
        "This is a very long text that should be truncated with an ellipsis when it overflows the container width.",
        cls=combine_classes(truncate, max_w.xs)
    )
    assert "truncate" in truncated.attrs['class']
    
    # Multi-line clamp
    clamped = P(
        "This is a longer paragraph that spans multiple lines. It will be clamped to show only 3 lines with an ellipsis at the end if the content exceeds that limit.",
        cls=str(line_clamp(3))
    )
    assert clamped.attrs['class'] == "line-clamp-3"
    
    # Code block with monospace font
    code = Div(
        "const greeting = 'Hello, World!';",
        cls=combine_classes(
            font_family.mono,
            font_size.sm,
            text_color.gray._800,
            whitespace.pre,
            bg.gray._100,
            p(4),
            rounded()
        )
    )
    assert "font-mono" in code.attrs['class']
    assert "whitespace-pre" in code.attrs['class']
    
    # List with custom styles
    custom_list = Ul(
        Li("First item"),
        Li("Second item"),
        Li("Third item"),
        cls=combine_classes(
            list_style.disc,
            list_position.inside,
            text_color.gray._700
        )
    )
    assert "list-disc" in custom_list.attrs['class']
    assert "list-inside" in custom_list.attrs['class']
    
    # Text with transform
    transformed = Span(
        "uppercase text",
        cls=combine_classes(uppercase, tracking.wider)
    )
    assert "uppercase" in transformed.attrs['class']
    assert "tracking-wider" in transformed.attrs['class']
    
    # Blockquote with indent
    quote = Blockquote(
        "The only way to do great work is to love what you do.",
        cls=combine_classes(
            font_size.lg,
            italic,
            text_color.gray._600,
            indent(8),
            border.l._4,
            border_color.gray._300,
            p.l(4)
        )
    )
    assert "text-lg" in quote.attrs['class']
    assert "italic" in quote.attrs['class']
    assert "indent-8" in quote.attrs['class']

    return Div(
        heading,
        paragraph,
        link,
        truncated,
        clamped,
        code,
        custom_list,
        transformed,
        quote,
        cls=combine_classes(grid_display, gap(5))
    )

# Run the tests
test_typography_fasthtml_examples()
