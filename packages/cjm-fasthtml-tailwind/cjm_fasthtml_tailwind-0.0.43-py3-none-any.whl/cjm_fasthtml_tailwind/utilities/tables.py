"""Table utilities for Tailwind CSS"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/utilities/tables.ipynb.

# %% auto 0
__all__ = ['table_display', 'border_collapse', 'border_spacing', 'table_layout', 'caption_side', 'TableDisplayFactory',
           'test_tables_display_examples', 'test_tables_border_collapse_examples', 'BorderSpacingFactory',
           'test_tables_border_spacing_basic_examples', 'test_tables_border_spacing_directional_examples',
           'test_tables_border_spacing_arbitrary_examples', 'test_tables_layout_examples',
           'test_tables_caption_side_examples', 'test_tables_all_utilities', 'test_tables_fasthtml_examples',
           'test_tables_complex_fasthtml_examples']

# %% ../../nbs/utilities/tables.ipynb 3
from typing import Optional, Dict, Any, Union
from cjm_fasthtml_tailwind.core.base import (
    SingleValueFactory, BaseFactory, BaseUtility, StandardUtility,
    combine_classes, TailwindScale
)
from cjm_fasthtml_tailwind.builders.scales import (
    SimpleFactory, DirectionalScaledFactory, ScaledFactory, SPACING_CONFIG
)

from fasthtml.common import Div
from fasthtml.jupyter import JupyUvi, HTMX
from ..core.testing import create_test_app, create_test_page, start_test_server
from IPython.display import display

# %% ../../nbs/utilities/tables.ipynb 5
# Table display utilities
class TableDisplayFactory(SingleValueFactory):
    """Factory for table display utilities."""
    
    def __init__(self):
        "Initialize with table display value."
        super().__init__("table", "Display utility for creating a table element")
    
    @property
    def inline(
        self
    ) -> str:  # The 'inline-table' CSS class
        "Return the inline-table utility class."
        return "inline-table"
    
    @property
    def caption(
        self
    ) -> str:  # The 'table-caption' CSS class
        "Return the table-caption utility class."
        return "table-caption"
    
    @property
    def cell(
        self
    ) -> str:  # The 'table-cell' CSS class
        "Return the table-cell utility class."
        return "table-cell"
    
    @property
    def column(
        self
    ) -> str:  # The 'table-column' CSS class
        "Return the table-column utility class."
        return "table-column"
    
    @property
    def column_group(
        self
    ) -> str:  # The 'table-column-group' CSS class
        "Return the table-column-group utility class."
        return "table-column-group"
    
    @property
    def footer_group(
        self
    ) -> str:  # The 'table-footer-group' CSS class
        "Return the table-footer-group utility class."
        return "table-footer-group"
    
    @property
    def header_group(
        self
    ) -> str:  # The 'table-header-group' CSS class
        "Return the table-header-group utility class."
        return "table-header-group"
    
    @property
    def row_group(
        self
    ) -> str:  # The 'table-row-group' CSS class
        "Return the table-row-group utility class."
        return "table-row-group"
    
    @property
    def row(
        self
    ) -> str:  # The 'table-row' CSS class
        "Return the table-row utility class."
        return "table-row"
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get information about this table display factory."""
        return {
            'description': self._doc,
            'valid_inputs': [],
            'options': {
                'base_value': 'table (display: table)',
                'special_properties': {
                    'inline': 'Returns "inline-table" for inline table containers',
                    'caption': 'Returns "table-caption" for table caption display',
                    'cell': 'Returns "table-cell" for table cell display',
                    'column': 'Returns "table-column" for table column display',
                    'column_group': 'Returns "table-column-group" for column group display',
                    'footer_group': 'Returns "table-footer-group" for footer group display',
                    'header_group': 'Returns "table-header-group" for header group display',
                    'row_group': 'Returns "table-row-group" for row group display',
                    'row': 'Returns "table-row" for table row display'
                }
            }
        }

# %% ../../nbs/utilities/tables.ipynb 6
# Create the table display factory
table_display = TableDisplayFactory() # The table display factory

# %% ../../nbs/utilities/tables.ipynb 7
def test_tables_display_examples():
    """Test table display utilities."""
    # Basic table display
    assert str(table_display) == "table"
    assert table_display.inline == "inline-table"
    
    # Table element display types
    assert table_display.caption == "table-caption"
    assert table_display.cell == "table-cell"
    assert table_display.column == "table-column"
    assert table_display.column_group == "table-column-group"
    assert table_display.footer_group == "table-footer-group"
    assert table_display.header_group == "table-header-group"
    assert table_display.row_group == "table-row-group"
    assert table_display.row == "table-row"
    
    # Test with modifiers
    assert str(table_display.hover) == "hover:table"
    assert str(table_display.md) == "md:table"

# Run the tests
test_tables_display_examples()

# %% ../../nbs/utilities/tables.ipynb 9
border_collapse = SimpleFactory(
    {
        "collapse": "border-collapse",
        "separate": "border-separate"
    },
    "Border collapse utilities for controlling whether table borders should collapse or be separated"
) # Border collapse factory

# %% ../../nbs/utilities/tables.ipynb 10
def test_tables_border_collapse_examples():
    """Test border collapse utilities."""
    assert str(border_collapse.collapse) == "border-collapse"
    assert str(border_collapse.separate) == "border-separate"

# Run the tests
test_tables_border_collapse_examples()

# %% ../../nbs/utilities/tables.ipynb 12
# Custom implementation for border-spacing to handle the hyphenated prefix
class BorderSpacingFactory(BaseFactory):
    """Factory for border-spacing utilities with directional support."""
    
    def __init__(self):
        """Initialize with scaled factories for directional variants."""
        super().__init__("Border spacing utilities for controlling the spacing between table borders")
        # Create scaled factories with properly hyphenated prefixes
        self._base = ScaledFactory("border-spacing", SPACING_CONFIG, "All sides border spacing")
        self.x = ScaledFactory("border-spacing-x", SPACING_CONFIG, "Horizontal border spacing")
        self.y = ScaledFactory("border-spacing-y", SPACING_CONFIG, "Vertical border spacing")
    
    def __call__(
        self,
        value: Optional[TailwindScale] = None  # The spacing value
    ) -> StandardUtility:  # A border spacing utility for all sides
        """Create border spacing utility for all sides."""
        return self._base(value)
    
    def __getattr__(
        self,
        name: str  # Attribute name (like 'px' or numeric values)
    ) -> StandardUtility:  # A border spacing utility
        """Handle attribute access for base border spacing."""
        return getattr(self._base, name)
    
    def get_info(
        self
    ) -> Dict[str, Any]:  # Dictionary with factory information
        """Get information about the border spacing factory."""
        return {
            'description': self._doc,
            'valid_inputs': [
                'Numeric scales: 0-96',
                'Decimal scales: 0.5, 1.5, 2.5, 3.5',
                'Special values: px, auto',
                'Arbitrary values: Any string with CSS units (e.g., "5px", "0.125rem")',
                'Custom properties: CSS variables starting with -- (e.g., "--table-spacing")'
            ],
            'options': {
                'directional_variants': {
                    'x': 'horizontal spacing',
                    'y': 'vertical spacing'
                }
            }
        }

# %% ../../nbs/utilities/tables.ipynb 13
border_spacing = BorderSpacingFactory() # The border spacing factory

# %% ../../nbs/utilities/tables.ipynb 15
def test_tables_border_spacing_basic_examples():
    """Test basic border spacing utilities."""
    # Numeric scales
    assert str(border_spacing(0)) == "border-spacing-0"
    assert str(border_spacing(4)) == "border-spacing-4"
    assert str(border_spacing(8)) == "border-spacing-8"
    assert str(border_spacing(2.5)) == "border-spacing-2.5"
    
    # Special values
    assert str(border_spacing.px) == "border-spacing-px"

# Run the tests
test_tables_border_spacing_basic_examples()

# %% ../../nbs/utilities/tables.ipynb 17
def test_tables_border_spacing_directional_examples():
    """Test directional border spacing utilities."""
    # Horizontal spacing
    assert str(border_spacing.x(4)) == "border-spacing-x-4"
    assert str(border_spacing.x(8)) == "border-spacing-x-8"
    assert str(border_spacing.x.px) == "border-spacing-x-px"
    
    # Vertical spacing
    assert str(border_spacing.y(2)) == "border-spacing-y-2"
    assert str(border_spacing.y(6)) == "border-spacing-y-6"
    assert str(border_spacing.y.px) == "border-spacing-y-px"

# Run the tests
test_tables_border_spacing_directional_examples()

# %% ../../nbs/utilities/tables.ipynb 19
def test_tables_border_spacing_arbitrary_examples():
    """Test border spacing utilities with arbitrary values."""
    # Arbitrary values
    assert str(border_spacing("5px")) == "border-spacing-[5px]"
    assert str(border_spacing("0.125rem")) == "border-spacing-[0.125rem]"
    assert str(border_spacing.x("10px")) == "border-spacing-x-[10px]"
    assert str(border_spacing.y("0.5em")) == "border-spacing-y-[0.5em]"
    
    # Custom properties
    assert str(border_spacing("--table-spacing")) == "border-spacing-(--table-spacing)"
    assert str(border_spacing.x("--horizontal-gap")) == "border-spacing-x-(--horizontal-gap)"

# Run the tests
test_tables_border_spacing_arbitrary_examples()

# %% ../../nbs/utilities/tables.ipynb 21
table_layout = SimpleFactory(
    {
        "auto": "table-auto",
        "fixed": "table-fixed"
    },
    "Table layout utilities for controlling the table layout algorithm"
) # Table layout factory

# %% ../../nbs/utilities/tables.ipynb 22
def test_tables_layout_examples():
    """Test table layout utilities."""
    assert str(table_layout.auto) == "table-auto"
    assert str(table_layout.fixed) == "table-fixed"

# Run the tests
test_tables_layout_examples()

# %% ../../nbs/utilities/tables.ipynb 24
caption_side = SimpleFactory(
    {
        "top": "caption-top",
        "bottom": "caption-bottom"
    },
    "Caption side utilities for controlling the alignment of a caption element inside of a table"
) # Caption side factory

# %% ../../nbs/utilities/tables.ipynb 25
def test_tables_caption_side_examples():
    """Test caption side utilities."""
    assert str(caption_side.top) == "caption-top"
    assert str(caption_side.bottom) == "caption-bottom"

# Run the tests
test_tables_caption_side_examples()

# %% ../../nbs/utilities/tables.ipynb 27
def test_tables_all_utilities():
    """Comprehensive test of all table utilities."""
    # Border collapse
    assert str(border_collapse.collapse) == "border-collapse"
    assert str(border_collapse.separate) == "border-separate"
    
    # Border spacing - basic
    assert str(border_spacing(2)) == "border-spacing-2"
    assert str(border_spacing(0)) == "border-spacing-0"
    
    # Border spacing - directional
    assert str(border_spacing.x(4)) == "border-spacing-x-4"
    assert str(border_spacing.y(2)) == "border-spacing-y-2"
    
    # Border spacing - arbitrary
    assert str(border_spacing("3px")) == "border-spacing-[3px]"
    assert str(border_spacing.x("0.5rem")) == "border-spacing-x-[0.5rem]"
    
    # Table layout
    assert str(table_layout.auto) == "table-auto"
    assert str(table_layout.fixed) == "table-fixed"
    
    # Caption side
    assert str(caption_side.top) == "caption-top"
    assert str(caption_side.bottom) == "caption-bottom"

# Run the comprehensive test
test_tables_all_utilities()

# %% ../../nbs/utilities/tables.ipynb 29
def test_tables_fasthtml_examples():
    """Test table utilities in practical FastHTML component examples."""
    from fasthtml.common import Table, Thead, Tbody, Tr, Th, Td, Caption, Div
    from cjm_fasthtml_tailwind.utilities.sizing import w, min_w
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display
    
    # Basic table with collapsed borders
    basic_table = Table(
        Thead(
            Tr(
                Th("Name"),
                Th("Email"),
                Th("Role")
            )
        ),
        Tbody(
            Tr(
                Td("John Doe"),
                Td("john@example.com"),
                Td("Admin")
            ),
            Tr(
                Td("Jane Smith"),
                Td("jane@example.com"),
                Td("User")
            )
        ),
        cls=combine_classes(
            border_collapse.collapse,
            w.full
        )
    )
    assert "border-collapse" in basic_table.attrs['class']
    
    # Table with separated borders and spacing
    spaced_table = Table(
        Tbody(
            Tr(Td("Cell 1"), Td("Cell 2")),
            Tr(Td("Cell 3"), Td("Cell 4"))
        ),
        cls=combine_classes(
            border_collapse.separate,
            border_spacing(2),
            w.full
        )
    )
    assert "border-separate" in spaced_table.attrs['class']
    assert "border-spacing-2" in spaced_table.attrs['class']
    
    # Table with different horizontal and vertical spacing
    custom_spaced_table = Table(
        Tbody(
            Tr(Td("A"), Td("B"), Td("C")),
            Tr(Td("D"), Td("E"), Td("F"))
        ),
        cls=combine_classes(
            border_collapse.separate,
            border_spacing.x(4),
            border_spacing.y(2),
            w.full
        )
    )
    assert "border-spacing-x-4" in custom_spaced_table.attrs['class']
    assert "border-spacing-y-2" in custom_spaced_table.attrs['class']
    
    # Fixed layout table with caption
    fixed_table = Table(
        Caption("User Information", cls=str(caption_side.top)),
        Thead(
            Tr(
                Th("ID", cls=str(w(20))),
                Th("Name", cls=str(w(40))),
                Th("Description")
            )
        ),
        Tbody(
            Tr(
                Td("001"),
                Td("Product A"),
                Td("A detailed description of Product A that might be quite long")
            )
        ),
        cls=combine_classes(
            table_layout.fixed,
            border_collapse.collapse,
            w.full
        )
    )
    assert "table-fixed" in fixed_table.attrs['class']
    assert "caption-top" in fixed_table.children[0].attrs['class']
    
    # Auto layout table (default behavior)
    auto_table = Table(
        Caption("Sales Data", cls=str(caption_side.bottom)),
        Thead(
            Tr(Th("Month"), Th("Revenue"), Th("Growth"))
        ),
        Tbody(
            Tr(Td("January"), Td("$10,000"), Td("+5%")),
            Tr(Td("February"), Td("$12,000"), Td("+20%"))
        ),
        cls=combine_classes(
            table_layout.auto,
            border_collapse.separate,
            border_spacing.px,
            min_w.full
        )
    )
    assert "table-auto" in auto_table.attrs['class']
    assert "caption-bottom" in auto_table.children[0].attrs['class']
    assert "border-spacing-px" in auto_table.attrs['class']
    
    # Return all examples in a grid layout
    return Div(
        basic_table,
        spaced_table,
        custom_spaced_table,
        fixed_table,
        auto_table,
        cls=combine_classes(grid_display, gap(5))
    )

# Run the tests
test_tables_fasthtml_examples()

# %% ../../nbs/utilities/tables.ipynb 33
def test_tables_complex_fasthtml_examples():
    """Test a complex table example with various styling."""
    from fasthtml.common import Table, Thead, Tbody, Tr, Th, Td, Caption, Div
    from cjm_fasthtml_tailwind.utilities.sizing import w
    from cjm_fasthtml_tailwind.utilities.backgrounds import bg
    from cjm_fasthtml_tailwind.utilities.borders import border, border_color, rounded
    from cjm_fasthtml_tailwind.utilities.typography import font_size, font_family, font_weight, text_color, text_align
    from cjm_fasthtml_tailwind.utilities.spacing import p, m
    from cjm_fasthtml_tailwind.utilities.layout import overflow
    from cjm_fasthtml_tailwind.utilities.effects import shadow
    from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import gap, grid_display
    
    # Create a styled data table
    data_table = Div(
        Table(
            Caption(
                "Quarterly Sales Report",
                cls=combine_classes(
                    caption_side.top,
                    font_size.lg,
                    font_weight.semibold,
                    text_color.gray._700,
                    m.b(2)
                )
            ),
            Thead(
                Tr(
                    Th("Quarter", cls=combine_classes(text_align.left, p(4), bg.gray._100)),
                    Th("Product", cls=combine_classes(text_align.left, p(4), bg.gray._100)),
                    Th("Units Sold", cls=combine_classes(text_align.right, p(4), bg.gray._100)),
                    Th("Revenue", cls=combine_classes(text_align.right, p(4), bg.gray._100)),
                    cls=combine_classes(border.b._2, border_color.gray._300)
                )
            ),
            Tbody(
                Tr(
                    Td("Q1 2024", cls=str(p(4))),
                    Td("Widget A", cls=str(p(4))),
                    Td("1,234", cls=combine_classes(text_align.right, p(4))),
                    Td("$12,340", cls=combine_classes(text_align.right, p(4))),
                    cls=combine_classes(border.b(), border_color.gray._200)
                ),
                Tr(
                    Td("Q1 2024", cls=str(p(4))),
                    Td("Widget B", cls=str(p(4))),
                    Td("567", cls=combine_classes(text_align.right, p(4))),
                    Td("$8,505", cls=combine_classes(text_align.right, p(4))),
                    cls=combine_classes(border.b(), border_color.gray._200)
                ),
                Tr(
                    Td("Q2 2024", cls=str(p(4))),
                    Td("Widget A", cls=str(p(4))),
                    Td("1,567", cls=combine_classes(text_align.right, p(4))),
                    Td("$15,670", cls=combine_classes(text_align.right, p(4))),
                    cls=combine_classes(border.b(), border_color.gray._200)
                ),
                Tr(
                    Td("Q2 2024", cls=str(p(4))),
                    Td("Widget B", cls=str(p(4))),
                    Td("890", cls=combine_classes(text_align.right, p(4))),
                    Td("$13,350", cls=combine_classes(text_align.right, p(4))),
                    cls=combine_classes(border.b(), border_color.gray._200)
                )
            ),
            cls=combine_classes(
                table_layout.fixed,
                border_collapse.separate,
                border_spacing(0),
                w.full,
                bg.white,
                shadow.sm,
                rounded.lg,
                overflow.hidden
            )
        ),
        cls=str(p(6))
    )
    
    # Verify table utilities are applied
    table_elem = data_table.children[0]
    assert "table-fixed" in table_elem.attrs['class']
    assert "border-separate" in table_elem.attrs['class']
    assert "border-spacing-0" in table_elem.attrs['class']
    assert "caption-top" in table_elem.children[0].attrs['class']
    
    # Create a compact table with custom spacing
    compact_table = Table(
        Tbody(
            Tr(Td("Item 1"), Td("$10"), Td("✓")),
            Tr(Td("Item 2"), Td("$20"), Td("✓")),
            Tr(Td("Item 3"), Td("$15"), Td("✗"))
        ),
        cls=combine_classes(
            border_collapse.separate,
            border_spacing.x(1),
            border_spacing.y(0.5),
            table_layout.auto,
            font_size.sm
        )
    )
    
    assert "border-separate" in compact_table.attrs['class']
    assert "border-spacing-x-1" in compact_table.attrs['class']
    assert "border-spacing-y-0.5" in compact_table.attrs['class']
    assert "table-auto" in compact_table.attrs['class']
    
    # Return all examples in a grid layout
    return Div(
        data_table,
        compact_table,
        cls=combine_classes(grid_display, gap(5))
    )

# Run the test
test_tables_complex_fasthtml_examples()
