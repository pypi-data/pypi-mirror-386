#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2025 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 1.3.4
# Product:       sfm3505
# Model-Version: 1.1.0
#

import pytest
from sensirion_i2c_sfm3505.device import Sfm3505Device


@pytest.fixture
def sensor(channel_provider):
    channel_provider.i2c_frequency = 100e3
    channel_provider.supply_voltage = 3.3
    with channel_provider:
        channel = channel_provider.get_channel(slave_address=0x2E,
                                               crc_parameters=(8, 0x31, 0xff, 0x0))
        yield Sfm3505Device(channel)


def test_configure_averaging1(sensor):
    sensor.configure_averaging(2)


def test_read_product_identifier1(sensor):
    (product_identifier, serial_number
     ) = sensor.read_product_identifier()
    print(f"product_identifier: {product_identifier}; "
          f"serial_number: {serial_number}; "
          )


def test_start_continuous_measurement1(sensor):
    sensor.start_continuous_measurement()
    (a_air_flow, a_o2_flow
     ) = sensor.read_all_measurement_data()
    print(f"a_air_flow: {a_air_flow}; "
          f"a_o2_flow: {a_o2_flow}; "
          )
    all_flow_bytes_raw = sensor.read_all_measurement_data_raw()
    print(f"all_flow_bytes_raw: {all_flow_bytes_raw}; "
          )
    (a_air_flow_raw, a_o2_flow_raw
     ) = sensor.read_all_measurement_data_no_float()
    print(f"a_air_flow_raw: {a_air_flow_raw}; "
          f"a_o2_flow_raw: {a_o2_flow_raw}; "
          )
    a_air_flow = sensor.read_air_measurement_data()
    print(f"a_air_flow: {a_air_flow}; "
          )
    air_flow_bytes_raw = sensor.read_air_measurement_data_raw()
    print(f"air_flow_bytes_raw: {air_flow_bytes_raw}; "
          )
    a_air_flow_raw = sensor.read_air_measurement_data_no_float()
    print(f"a_air_flow_raw: {a_air_flow_raw}; "
          )
    sensor.stop_continuous_measurement()


def test_start_continuous_measurement_with_filter1(sensor):
    sensor.start_continuous_measurement_with_filter(50961)
    (a_air_flow, a_o2_flow
     ) = sensor.read_all_measurement_data()
    print(f"a_air_flow: {a_air_flow}; "
          f"a_o2_flow: {a_o2_flow}; "
          )
    all_flow_bytes_raw = sensor.read_all_measurement_data_raw()
    print(f"all_flow_bytes_raw: {all_flow_bytes_raw}; "
          )
    (a_air_flow_raw, a_o2_flow_raw
     ) = sensor.read_all_measurement_data_no_float()
    print(f"a_air_flow_raw: {a_air_flow_raw}; "
          f"a_o2_flow_raw: {a_o2_flow_raw}; "
          )
    a_air_flow = sensor.read_air_measurement_data()
    print(f"a_air_flow: {a_air_flow}; "
          )
    air_flow_bytes_raw = sensor.read_air_measurement_data_raw()
    print(f"air_flow_bytes_raw: {air_flow_bytes_raw}; "
          )
    a_air_flow_raw = sensor.read_air_measurement_data_no_float()
    print(f"a_air_flow_raw: {a_air_flow_raw}; "
          )
    sensor.stop_continuous_measurement()

