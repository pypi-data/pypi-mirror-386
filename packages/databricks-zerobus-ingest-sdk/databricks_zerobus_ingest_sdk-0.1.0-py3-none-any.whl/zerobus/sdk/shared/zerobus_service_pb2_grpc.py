# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from . import zerobus_service_pb2 as zerobus__service__pb2

GRPC_GENERATED_VERSION = "1.71.2"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in zerobus_service_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class ZerobusStub(object):
    """Version information for the Zerobus service.
    Current version: v1 (package: databricks.zerobus).

    Version History:
    - v1: Initial release with ephemeral streams support.

    API Stability: STABLE.
    This API is considered stable and backward-compatible within major versions.
    Breaking changes will be introduced in new major versions.

    Versioning Strategy:
    - Major versions: New endpoints or package names (e.g., databricks.zerobus.v2).
    - Minor versions: Backward-compatible additions within same package.
    - Patch versions: Bug fixes and non-breaking changes.


    The Zerobus service provides streaming capabilities for ingesting data records
    into Databricks tables with high throughput and low latency.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EphemeralStream = channel.stream_stream(
            "/databricks.zerobus.Zerobus/EphemeralStream",
            request_serializer=zerobus__service__pb2.EphemeralStreamRequest.SerializeToString,
            response_deserializer=zerobus__service__pb2.EphemeralStreamResponse.FromString,
            _registered_method=True,
        )


class ZerobusServicer(object):
    """Version information for the Zerobus service.
    Current version: v1 (package: databricks.zerobus).

    Version History:
    - v1: Initial release with ephemeral streams support.

    API Stability: STABLE.
    This API is considered stable and backward-compatible within major versions.
    Breaking changes will be introduced in new major versions.

    Versioning Strategy:
    - Major versions: New endpoints or package names (e.g., databricks.zerobus.v2).
    - Minor versions: Backward-compatible additions within same package.
    - Patch versions: Bug fixes and non-breaking changes.


    The Zerobus service provides streaming capabilities for ingesting data records
    into Databricks tables with high throughput and low latency.
    """

    def EphemeralStream(self, request_iterator, context):
        """
        EphemeralStream creates a streaming session for ingesting records.

        This is a bidirectional streaming RPC that allows clients to:
        - Create new ephemeral ingestion streams by sending a CreateIngestStreamRequest.
        - Ingest records by sending an IngestRecordRequest.
        - Receive durability confirmations via IngestRecordResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ZerobusServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "EphemeralStream": grpc.stream_stream_rpc_method_handler(
            servicer.EphemeralStream,
            request_deserializer=zerobus__service__pb2.EphemeralStreamRequest.FromString,
            response_serializer=zerobus__service__pb2.EphemeralStreamResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("databricks.zerobus.Zerobus", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("databricks.zerobus.Zerobus", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class Zerobus(object):
    """Version information for the Zerobus service.
    Current version: v1 (package: databricks.zerobus).

    Version History:
    - v1: Initial release with ephemeral streams support.

    API Stability: STABLE.
    This API is considered stable and backward-compatible within major versions.
    Breaking changes will be introduced in new major versions.

    Versioning Strategy:
    - Major versions: New endpoints or package names (e.g., databricks.zerobus.v2).
    - Minor versions: Backward-compatible additions within same package.
    - Patch versions: Bug fixes and non-breaking changes.


    The Zerobus service provides streaming capabilities for ingesting data records
    into Databricks tables with high throughput and low latency.
    """

    @staticmethod
    def EphemeralStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/databricks.zerobus.Zerobus/EphemeralStream",
            zerobus__service__pb2.EphemeralStreamRequest.SerializeToString,
            zerobus__service__pb2.EphemeralStreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
