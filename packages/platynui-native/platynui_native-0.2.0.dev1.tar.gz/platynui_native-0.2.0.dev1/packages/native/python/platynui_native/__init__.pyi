"""Type stubs for platynui_native package.

All types are directly exported from the native extension module.
"""

from typing import Any, List, Tuple, Literal, Union, Dict, TypeAlias, Iterable
import enum as _enum

# ===== Core Types =====

class Point:
    def __init__(self, x: float, y: float) -> None: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    def to_tuple(self) -> Tuple[float, float]: ...
    def with_x(self, x: float) -> Point: ...
    def with_y(self, y: float) -> Point: ...
    def translate(self, dx: float, dy: float) -> Point: ...
    def is_finite(self) -> bool: ...
    def __add__(self, other: Point) -> Point: ...
    def __sub__(self, other: Point) -> Point: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class Size:
    def __init__(self, width: float, height: float) -> None: ...
    @property
    def width(self) -> float: ...
    @property
    def height(self) -> float: ...
    def to_tuple(self) -> Tuple[float, float]: ...
    def area(self) -> float: ...
    def is_empty(self) -> bool: ...
    def is_finite(self) -> bool: ...
    def __add__(self, other: Size) -> Size: ...
    def __sub__(self, other: Size) -> Size: ...
    def __mul__(self, scalar: float) -> Size: ...
    def __truediv__(self, scalar: float) -> Size: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class Rect:
    def __init__(self, x: float, y: float, width: float, height: float) -> None: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    @property
    def width(self) -> float: ...
    @property
    def height(self) -> float: ...
    def to_tuple(self) -> Tuple[float, float, float, float]: ...
    def left(self) -> float: ...
    def top(self) -> float: ...
    def right(self) -> float: ...
    def bottom(self) -> float: ...
    def center(self) -> Point: ...
    def size(self) -> Size: ...
    def position(self) -> Point: ...
    def contains(self, point: Point) -> bool: ...
    def intersects(self, other: Rect) -> bool: ...
    def intersection(self, other: Rect) -> Rect | None: ...
    def union(self, other: Rect) -> Rect: ...
    def translate(self, dx: float, dy: float) -> Rect: ...
    def inflate(self, dw: float, dh: float) -> Rect: ...
    def deflate(self, dw: float, dh: float) -> Rect: ...
    def is_empty(self) -> bool: ...
    def __add__(self, point: Point) -> Rect: ...
    def __sub__(self, point: Point) -> Rect: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class PatternId:
    def __init__(self, value: str) -> None: ...
    def as_str(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class RuntimeId:
    def __init__(self, value: str) -> None: ...
    def as_str(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class TechnologyId:
    def __init__(self, value: str) -> None: ...
    def as_str(self) -> str: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class Namespace:
    Control: "Namespace"
    Item: "Namespace"
    App: "Namespace"
    Native: "Namespace"
    def as_str(self) -> str: ...
    def is_default(self) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

# ===== Exceptions =====

class ProviderError(Exception): ...
class EvaluationError(Exception): ...
class PointerError(Exception): ...
class KeyboardError(Exception): ...
class PatternError(Exception): ...

# ===== Type Aliases =====

Primitive: TypeAlias = Union[bool, int, float, str, None]
JSONLike: TypeAlias = Union[Dict[str, Any], List[Any]]
Complex: TypeAlias = Union[Point, Size, Rect]
UiValue: TypeAlias = Union[Primitive, JSONLike, Complex]

PointLike: TypeAlias = Point
OriginLike: TypeAlias = Union[Literal["desktop"], Point, Rect]
ScrollDeltaLike: TypeAlias = Tuple[float, float]

class PointerButton(_enum.IntEnum):
    LEFT = 1
    MIDDLE = 2
    RIGHT = 3

ButtonLike: TypeAlias = Union[int, PointerButton]

# ===== Runtime Classes =====

class UiAttribute:
    @property
    def namespace(self) -> str: ...
    @property
    def name(self) -> str: ...
    def value(self) -> UiValue | None: ...

class EvaluatedAttribute:
    @property
    def namespace(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> UiValue: ...
    def owner(self) -> "UiNode | None": ...

class UiNode:
    @property
    def runtime_id(self) -> str: ...
    @property
    def name(self) -> str: ...
    @property
    def role(self) -> str: ...
    @property
    def namespace(self) -> Namespace: ...
    def attribute(self, name: str, namespace: str | None = ...) -> UiValue: ...
    def parent(self) -> "UiNode | None": ...
    def children(self) -> "NodeChildrenIterator": ...
    def attributes(self) -> "NodeAttributesIterator": ...
    def supported_patterns(self) -> list[str]: ...
    def doc_order_key(self) -> int | None: ...
    def is_valid(self) -> bool: ...
    def invalidate(self) -> None: ...
    def pattern_by_id(self, id: str) -> object | None: ...
    def has_pattern(self, id: str) -> bool: ...

class NodeChildrenIterator:
    def __iter__(self) -> "NodeChildrenIterator": ...
    def __next__(self) -> UiNode: ...

class NodeAttributesIterator:
    def __iter__(self) -> "NodeAttributesIterator": ...
    def __next__(self) -> UiAttribute: ...

class EvaluationIterator:
    def __iter__(self) -> "EvaluationIterator": ...
    def __next__(self) -> Union[UiNode, EvaluatedAttribute, UiValue]: ...

class Focusable:
    def id(self) -> str: ...
    def focus(self) -> None: ...

class WindowSurface:
    def id(self) -> str: ...
    def activate(self) -> None: ...
    def minimize(self) -> None: ...
    def maximize(self) -> None: ...
    def restore(self) -> None: ...
    def close(self) -> None: ...
    def move_to(self, x: float, y: float) -> None: ...
    def resize(self, width: float, height: float) -> None: ...
    def move_and_resize(
        self, x: float, y: float, width: float, height: float
    ) -> None: ...
    def accepts_user_input(self) -> bool | None: ...

class PlatformOverrides:
    def __init__(self) -> None: ...
    desktop_info: int | None
    highlight: int | None
    screenshot: int | None
    pointer: int | None
    keyboard: int | None

class Runtime:
    def __init__(self) -> None: ...
    @staticmethod
    def new_with_providers(provider_handles: List[int]) -> "Runtime": ...
    @staticmethod
    def new_with_providers_and_platforms(
        provider_handles: List[int], platforms: PlatformOverrides
    ) -> "Runtime": ...
    def evaluate(
        self, xpath: str, node: "UiNode | None" = ...
    ) -> List[Union[UiNode, EvaluatedAttribute, UiValue]]: ...
    def evaluate_single(
        self, xpath: str, node: "UiNode | None" = ...
    ) -> Union[UiNode, EvaluatedAttribute, UiValue, None]: ...
    def evaluate_iter(
        self, xpath: str, node: "UiNode | None" = ...
    ) -> "EvaluationIterator": ...
    def providers(self) -> List[Dict[str, Any]]: ...
    def shutdown(self) -> None: ...
    def desktop_node(self) -> UiNode: ...
    def desktop_info(self) -> Dict[str, Any]: ...
    def focus(self, node: UiNode) -> None: ...
    def pointer_position(self) -> Point: ...
    def pointer_move_to(
        self, point: PointLike, /, overrides: "PointerOverrides | None" = ...
    ) -> Point: ...
    def pointer_click(
        self,
        point: PointLike,
        /,
        button: ButtonLike | None = ...,
        overrides: "PointerOverrides | None" = ...,
    ) -> None: ...
    def pointer_multi_click(
        self,
        point: PointLike,
        /,
        clicks: int,
        button: ButtonLike | None = ...,
        overrides: "PointerOverrides | None" = ...,
    ) -> None: ...
    def pointer_drag(
        self,
        start: PointLike,
        /,
        end: PointLike,
        button: ButtonLike | None = ...,
        overrides: "PointerOverrides | None" = ...,
    ) -> None: ...
    def pointer_press(
        self,
        point: PointLike | None = ...,
        button: ButtonLike | None = ...,
        overrides: "PointerOverrides | None" = ...,
    ) -> None: ...
    def pointer_release(
        self,
        button: ButtonLike | None = ...,
        overrides: "PointerOverrides | None" = ...,
    ) -> None: ...
    def pointer_scroll(
        self, delta: ScrollDeltaLike, overrides: "PointerOverrides | None" = ...
    ) -> None: ...
    def keyboard_type(
        self, sequence: str, overrides: "KeyboardOverrides | None" = ...
    ) -> None: ...
    def keyboard_press(
        self, sequence: str, overrides: "KeyboardOverrides | None" = ...
    ) -> None: ...
    def keyboard_release(
        self, sequence: str, overrides: "KeyboardOverrides | None" = ...
    ) -> None: ...
    def highlight(self, rects: Rect | Iterable[Rect], duration_ms: float | None = ...) -> None: ...
    def clear_highlight(self) -> None: ...
    def screenshot(
        self, rect: Rect | None = ..., mime_type: str | None = ...
    ) -> bytes: ...

class PointerOverrides:
    def __init__(
        self,
        *,
        origin: OriginLike | None = ...,
        speed_factor: float | None = ...,
        acceleration_profile: Literal["constant", "ease_in", "ease_out", "smooth_step"]
        | None = ...,
        max_move_duration_ms: float | None = ...,
        move_time_per_pixel_us: float | None = ...,
        after_move_delay_ms: float | None = ...,
        after_input_delay_ms: float | None = ...,
        press_release_delay_ms: float | None = ...,
        after_click_delay_ms: float | None = ...,
        before_next_click_delay_ms: float | None = ...,
        multi_click_delay_ms: float | None = ...,
        ensure_move_threshold: float | None = ...,
        ensure_move_timeout_ms: float | None = ...,
        scroll_step: Tuple[float, float] | None = ...,
        scroll_delay_ms: float | None = ...,
    ) -> None: ...
    @property
    def origin(self) -> Literal["desktop"] | Point | Rect | None: ...
    @property
    def speed_factor(self) -> float | None: ...
    @property
    def acceleration_profile(
        self,
    ) -> Literal["constant", "ease_in", "ease_out", "smooth_step"] | None: ...
    @property
    def max_move_duration_ms(self) -> float | None: ...
    @property
    def move_time_per_pixel_us(self) -> float | None: ...
    @property
    def after_move_delay_ms(self) -> float | None: ...
    @property
    def after_input_delay_ms(self) -> float | None: ...
    @property
    def press_release_delay_ms(self) -> float | None: ...
    @property
    def after_click_delay_ms(self) -> float | None: ...
    @property
    def before_next_click_delay_ms(self) -> float | None: ...
    @property
    def multi_click_delay_ms(self) -> float | None: ...
    @property
    def ensure_move_threshold(self) -> float | None: ...
    @property
    def ensure_move_timeout_ms(self) -> float | None: ...
    @property
    def scroll_step(self) -> Tuple[float, float] | None: ...
    @property
    def scroll_delay_ms(self) -> float | None: ...

class KeyboardOverrides:
    def __init__(
        self,
        *,
        press_delay_ms: float | None = ...,
        release_delay_ms: float | None = ...,
        between_keys_delay_ms: float | None = ...,
        chord_press_delay_ms: float | None = ...,
        chord_release_delay_ms: float | None = ...,
        after_sequence_delay_ms: float | None = ...,
        after_text_delay_ms: float | None = ...,
    ) -> None: ...
    @property
    def press_delay_ms(self) -> float | None: ...
    @property
    def release_delay_ms(self) -> float | None: ...
    @property
    def between_keys_delay_ms(self) -> float | None: ...
    @property
    def chord_press_delay_ms(self) -> float | None: ...
    @property
    def chord_release_delay_ms(self) -> float | None: ...
    @property
    def after_sequence_delay_ms(self) -> float | None: ...
    @property
    def after_text_delay_ms(self) -> float | None: ...

# ===== Module exports =====

__all__ = [
    # Core types
    "Point",
    "Size",
    "Rect",
    "PatternId",
    "RuntimeId",
    "TechnologyId",
    "Namespace",
    # Runtime
    "Runtime",
    "UiNode",
    "NodeChildrenIterator",
    "NodeAttributesIterator",
    "EvaluationIterator",
    "UiAttribute",
    "EvaluatedAttribute",
    "Focusable",
    "WindowSurface",
    "PlatformOverrides",
    # Overrides
    "PointerOverrides",
    "KeyboardOverrides",
    "PointerButton",
    # Exceptions
    "EvaluationError",
    "ProviderError",
    "PointerError",
    "KeyboardError",
    "PatternError",
    # Mock providers (always available)
    "MOCK_PROVIDER",
    "MOCK_PLATFORM",
    "MOCK_HIGHLIGHT_PROVIDER",
    "MOCK_SCREENSHOT_PROVIDER",
    "MOCK_POINTER_DEVICE",
    "MOCK_KEYBOARD_DEVICE",
    # Type aliases
    "Primitive",
    "JSONLike",
    "Complex",
    "UiValue",
    "PointLike",
    "OriginLike",
    "ScrollDeltaLike",
    "ButtonLike",
]

# Mock provider constants (always available)
# Use these with Runtime.new_with_providers_and_platforms() for testing
MOCK_PROVIDER: int  # Mock UI tree provider
MOCK_PLATFORM: int  # Mock desktop info provider (provides MockOS desktop info)
MOCK_HIGHLIGHT_PROVIDER: int  # Mock highlight provider
MOCK_SCREENSHOT_PROVIDER: int  # Mock screenshot provider
MOCK_POINTER_DEVICE: int  # Mock pointer/mouse device
MOCK_KEYBOARD_DEVICE: int  # Mock keyboard device
