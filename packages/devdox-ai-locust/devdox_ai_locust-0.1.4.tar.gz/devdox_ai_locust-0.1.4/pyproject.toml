
[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "devdox_ai_locust"
version = "0.1.4"
description = "AI-powered Locust load test generator from API documentation"
readme = "README.md"
license = {text = "Apache-2.0" }
authors = [
    {name = "Hayat Bourji", email = "hayat.bourgi@montyholding.com"}
]
maintainers = [
    {name = "Hayat Bourji", email = "hayat.bourgi@montyholding.com"},
]
keywords = ["locust", "load-testing", "api", "testing", "performance", "ai", "openapi", "swagger"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Networking :: Monitoring",
]
requires-python = ">=3.12"

# Core dependencies
dependencies = [
    "click>=8.0.0",
    "pyyaml>=6.0",
    "requests>=2.28.0",
    "locust>=2.0.0",
    "faker>=15.0.0",
    "colorama>=0.4.0",
    "rich>=12.0.0",
    "pydantic>=1.10.0",
    "langchain-together==0.3.0",
    "together==1.5.17",
    "jinja2>=3.0.0",
    "black==25.1.0",
    "pydantic-settings==2.10.1"
]

# Optional dependencies for different features
[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=22.0",
    "flake8>=5.0",
    "mypy>=1.0",
    "pre-commit>=2.20",
    "twine>=4.0",
    "build>=0.8",
    "ruff==0.13.1",
    "types-Pygments==2.19.0.20250809"
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.8",
    "pytest-asyncio>=0.21",
    "httpx>=0.23",
    "aiofiles>=23.0",
    "coverage>=7.0",
]
ai = [
    "openai>=0.27.0",
    "anthropic>=0.3.0",
]

# Command-line scripts
[project.scripts]
devdox_ai_locust = "devdox_ai_locust.cli:main"
dal = "devdox_ai_locust.cli:main"

[project.urls]
Homepage = "https://github.com/montymobile1/devdox-ai-locust"
Repository = "https://github.com/montymobile1/devdox-ai-locust"


# Tool configurations
[tool.setuptools]
package-dir =  { "" = "src" }

[tool.setuptools.packages.find]
where = ["src"]
include = ["devdox_ai_locust*"]
exclude = ["tests*"]


[tool.setuptools.package-data]
devdox_ai_locust = ["schemas/*.json", "templates/*.j2","templates/mongo/*","prompt/*.j2", "py.typed","*.j2"]

# flake8 configuration (legacy - remove if using ruff)
[tool.flake8]
max-line-length = 88
line-length = 88

# Black code formatter
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorter
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["devdox_ai_locust"]



# MyPy type checker
[tool.mypy]
explicit_package_bases = true
namespace_packages = true
show_error_codes = true
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "locust.*",
    "faker.*",
    "yaml.*",
    "rich.*",
    "together",
    "together.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"