# coding: utf-8

"""
    Jungfraujoch

    API to control Jungfraujoch developed by the Paul Scherrer Institute (Switzerland). Jungfraujoch is a data acquisition and analysis system for pixel array detectors, primarly PSI JUNGFRAU. Jungfraujoch uses FPGA boards to acquire data at high data rates.  # License Clarification  While this API definition is licensed under GPL-3.0, **the GPL copyleft provisions do not apply** when this file is used solely to generate OpenAPI clients or when implementing applications that interact with the API. Generated client code and applications using this API definition are not subject to the GPL license requirements and may be distributed under terms of your choosing.  This exception is similar in spirit to the Linux Kernel's approach to userspace API headers and the GCC Runtime Library Exception. The Linux Kernel developers have explicitly stated that user programs that merely use the kernel interfaces (syscalls, ioctl definitions, etc.) are not derivative works of the kernel and are not subject to the terms of the GPL.  This exception is intended to allow wider use of this API specification without imposing GPL requirements on applications that merely interact with the API, regardless of whether they communicate through network calls or other mechanisms. 

    The version of the OpenAPI document: 1.0.0-rc.92
    Contact: filip.leonarski@psi.ch
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from jfjoch_client.models.image_format_settings import ImageFormatSettings

class TestImageFormatSettings(unittest.TestCase):
    """ImageFormatSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ImageFormatSettings:
        """Test ImageFormatSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ImageFormatSettings`
        """
        model = ImageFormatSettings()
        if include_optional:
            return ImageFormatSettings(
                summation = True,
                geometry_transform = True,
                jungfrau_conversion = True,
                jungfrau_conversion_factor_ke_v = 0.001,
                bit_depth_image = 8,
                signed_output = True,
                mask_module_edges = True,
                mask_chip_edges = True,
                jungfrau_mask_pixels_without_g0 = True,
                apply_mask = True,
                jungfrau_pedestal_g0_rms_limit = 0
            )
        else:
            return ImageFormatSettings(
                summation = True,
                geometry_transform = True,
                jungfrau_conversion = True,
                mask_module_edges = True,
                mask_chip_edges = True,
                apply_mask = True,
        )
        """

    def testImageFormatSettings(self):
        """Test ImageFormatSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
