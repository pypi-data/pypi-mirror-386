# ==============================================================================
# The [project] table defined by Official python.org
#
# Read: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/
# ==============================================================================
[project]
name = "esc_mini_tools_lib"
# Increment version before each release - follow `semantic versioning <https://semver.org/>`_
# Currently, poetry 2.1.X doesn't support dynamic versioning
# (Read https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#version)
# So this value has to be aligned with the one in ``esc_mini_tools_lib/_version.py``
version = "0.1.8"
description = "A reusable library of mini-tools with Pydantic-based APIs, designed for multi-platform deployment in web apps, serverless functions, and AI systems."
# Read https://dev-exp-share.readthedocs.io/en/latest/search.html?q=Pick+An+Open+Source+License+For+Python+Project&check_keywords=yes&area=default
# To pick a license and update the ``license``, ``classifier`` field in ``pyproject.toml``
# And also update the ``LICENSE.txt`` file in the git repo.
license = "AGPL-3.0-or-later"
license-files = ["LICENSE.txt", "AUTHORS.rst"]
authors = [
    { name = "Sanhe Hu", email = "sanhehu@easyscalecloud.com" },
]
maintainers = [
    { name = "Sanhe Hu", email = "sanhehu@easyscalecloud.com" },
]
keywords = []
readme = "README.rst"
requires-python = ">=3.10,<4.0"
# Full list of classifiers: https://pypi.org/classifiers/
classifier = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: Unix",
    # Note: classfier like "Programming Language :: Python :: 3 :: Only",
    # "Programming Language :: Python :: 3.X" is no longer needed,
    # because we have ``requires-python`` field.
]

# ------------------------------------------------------------------------------
# Core Dependencies
# ------------------------------------------------------------------------------
dependencies = [
    "vislog>=0.1.2,<1.0.0", # Visual logging for Python
    "func-args>=1.0.1,<2.0.0", # inspect function/method arguments
    "soft_deps>=0.1.1,<1.0.0", # Lazy import optional dependencies
    "boltons>=25.0.0,<26.0.0", # Utility functions for Python
    "boto3>=1.35.99,<2.0.0", # Official AWS Python SDK
    "boto-session-manager>=1.8.1,<2.0.0",
    "s3pathlib>=2.3.6,<3.0.0", # A pathlib-style object-oriented wrapper for Amazon S3
    "pydantic>=2.12.0,<3.0.0",
    # --- Tool
    "atlas_doc_parser>=0.1.2,<1.0.0", # Parse atlassian document format
    "docpack>=0.1.6,<1.0.0", # Document package for Python
    "tiktoken>=0.12.0,<1.0.0", # Tokenizer for LLMs
]

# ------------------------------------------------------------------------------
# Optional dependency that can be used in ``pip install ${your_project_name}[${feature_name}]``
# Sometime this is also called "extras"
# Read: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#dependencies-optional-dependencies
#
# IMPORTANT: all optional dependencies has to be compatible with the "requires-python" field
# ------------------------------------------------------------------------------
[project.optional-dependencies]

# ------------------------------------------------------------------------------
# Local Development dependenceies
# ------------------------------------------------------------------------------
dev = [
    "twine>=6.0.0,<7.0.0", # distribute package to PyPI
    "wheel>=0.45.0,<1.0.0", # build wheel package
    "build>=1.2.1,<2.0.0", # build source distribution
    "rich>=13.8.1,<14.0.0", # pretty print
]

# ------------------------------------------------------------------------------
# (Unit/Coverage/Integration/Load) Test dependenceies
# ------------------------------------------------------------------------------
test = [
    "pytest>=8.2.2,<9.0.0", # Testing framework
    "pytest-cov>=6.0.0,<7.0.0", # Coverage reporting
]

# ------------------------------------------------------------------------------
# Documentation build dependenceies
# ------------------------------------------------------------------------------
doc = [
    "Sphinx>=7.4.7,<8.0.0",
    "sphinx-copybutton>=0.5.2,<1.0.0", # add copy button to code block
    "sphinx-design>=0.6.1,<1.0.0", # add additional design pattern to sphinx
    "sphinx-jinja>=2.0.2,<3.0.0", # enable jinja syntax in reStructuredText
    "furo==2024.8.6", # the furo sphinx theme
    "pygments>=2.18.0,<3.0.0", # syntax highlight
    "ipython>=8.18.1,<8.19.0", # interactive Python
    "nbsphinx>=0.8.12,<1.0.0", # add jupyter notebook in sphinx doc
    "rstobj==1.2.1", # generate reStructuredText from Python code
    "docfly==3.0.0", # automaticall generate .. toctree directives and API reference doc
]

# ------------------------------------------------------------------------------
# Automation (devops) dependenceies
# ------------------------------------------------------------------------------
auto = [
]

# Quick Links
[project.urls]
Homepage = "https://github.com/easyscalecloud/esc_mini_tools_lib-project"
Documentation = "https://esc-mini-tools-lib.readthedocs.io/en/latest/"
Repository = "https://github.com/easyscalecloud/esc_mini_tools_lib-project"
Issues = "https://github.com/easyscalecloud/esc_mini_tools_lib-project/issues"
Changelog = "https://github.com/easyscalecloud/esc_mini_tools_lib-project/blob/main/release-history.rst"
Download = "https://pypi.org/pypi/esc-mini-tools-lib#files"

# For command line interface, read: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#creating-executable-scripts
[project.scripts]

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.9.0,<2.0.0"

[tool.poetry]
# Files to include in the package distribution
packages = [
    { include = "esc_mini_tools_lib", from = ".", to = "." }
]
# Files to exclude from the package
exclude = [
    "esc_mini_tools_lib/tests/*",
    "esc_mini_tools_lib/docs/*",
    "**/*.pyc",
    "**/*.pyo",
]

# python workflow tool config
[tool.pywf]
# The specific python version you use for local development
dev_python = "3.11.8"
# --- github.com
github_account = "easyscalecloud"
# Create GitHub token in https://github.com/settings/tokens and put the token in
# ``${HOME}/home_secret.json``
github_token_field = "providers.github.accounts.esc.users.sh_esc.secrets.dev.value"
# --- codecov.io (for code coverage test report)
codecov_account = "easyscalecloud"
# Create Codecov token in https://app.codecov.io/account/gh/${codecov_account}/access
# and put the token in ``${HOME}/home_secret.json``
codecov_token_field = "providers.codecov_io.accounts.esc.users.sh_esc.secrets.dev.value"
# --- readthedocs.org (for documentation hosting)
# Create Readthedocs token in https://app.readthedocs.org/accounts/tokens/
# and put the token at ``${HOME}/home_secret.json``
readthedocs_token_field = "providers.readthedocs.accounts.esc.users.sh_esc.secrets.dev.value"
# Readthedocs project name, usually it is the same as your project name
readthedocs_project_name = "esc_mini_tools_lib"

# Read: https://packaging.python.org/en/latest/guides/writing-pyproject-toml/#declaring-the-build-backend
[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"
