boss.factory
============

.. py:module:: boss.factory


Classes
-------

.. autoapisummary::

   boss.factory.Factory
   boss.factory.HEROFactory
   boss.factory.DatasourceHEROFactory
   boss.factory.PolledDatasourceHEROFactory


Module Contents
---------------

.. py:class:: Factory

   .. py:method:: _build(classname: str, arg_dict: dict, name: str, realm='heros', session_manager=None, tags: list | None = None)
      :classmethod:



   .. py:method:: _get_init_replacement(classname: str, name: str, realm: str, session_manager, tags: list | None) -> Callable
      :classmethod:

      :abstractmethod:



.. py:class:: HEROFactory

   Bases: :py:obj:`Factory`


   .. py:attribute:: _mixin_class


   .. py:method:: build(classname: str, arg_dict: dict, name: str, realm='heros', session_manager=None, tags: list | None = None)
      :classmethod:



   .. py:method:: _get_init_replacement(classname: str, name: str, realm: str, session_manager, tags: list | None) -> Callable
      :classmethod:



.. py:class:: DatasourceHEROFactory

   Bases: :py:obj:`HEROFactory`


   .. py:attribute:: _mixin_class


   .. py:method:: build(classname: str, arg_dict: dict, name: str, observables: dict = {}, realm='heros', session_manager=None, tags: list | None = None)
      :classmethod:



   .. py:method:: _get_init_replacement(classname: str, name: str, realm: str, session_manager, tags: list | None) -> Callable
      :classmethod:



.. py:class:: PolledDatasourceHEROFactory

   Bases: :py:obj:`Factory`


   .. py:attribute:: _mixin_class


   .. py:method:: build(classname: str, arg_dict: dict, name: str, loop: asyncio.AbstractEventLoop, interval: float, observables: dict = {}, realm='heros', session_manager=None, tags: list | None = None)
      :classmethod:



   .. py:method:: _get_init_replacement(classname: str, name: str, realm: str, session_manager, tags: list | None) -> Callable
      :classmethod:



