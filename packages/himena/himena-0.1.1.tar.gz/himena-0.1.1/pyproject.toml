[build-system]
requires = ["hatchling>=1.26.1"]
build-backend = "hatchling.build"

[project]
name = "himena"
dynamic = ["version"]
description = "An infinitely extensible and reusable application framework."
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
keywords = []
authors = [
  { name = "Hanjin Liu", email = "liuhanjin.sc@gmail.com" },
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3.14",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
]
dependencies = [
  "numpy>=2.0.0",
  "app-model>=0.4.0",
  "pydantic>=2.10",
  "qtpy>=2.3.1",
  "superqt[iconify]>=0.7.3",
  "magicgui>=0.10.0",
  "platformdirs>=4.3.6",
  "pygments>=2.18.0",
  "pyyaml>=6.0.1",
  "pillow>=9.0.0",
  "tabulate>=0.9.0",
  "cmap>=0.4.0",
  "chardet>=5.2.0",
  "packaging>=24.0",
]

[project.urls]
Documentation = "https://github.com/hanjinliu/himena#readme"
Issues = "https://github.com/hanjinliu/himena/issues"
Source = "https://github.com/hanjinliu/himena"

[project.scripts]
himena = "himena.__main__:main"

[project.optional-dependencies]
pyqt5 = ["pyqt5>=5.12.0"]
pyqt6 = ["pyqt6"]
recommended = [
  "pyqt6",
  "himena[all]",
]
all = [
  "IPython",
  "qtconsole",
  "openpyxl",
  "scipy",
  "matplotlib>=3.8.2",
]
testing = [
  "pytest",
  "pytest-qt",
  "pytest-cov",
  "pandas",
  "polars",
  "pyarrow",
  "xarray",
  "click!=8.3.0",
  "himena[all]"
]

docs = [
  "mkdocs",
  "mkdocs-autorefs",
  "mkdocs-material",
  "mkdocs-material-extensions",
  "mkdocstrings",
  "mkdocstrings-python",
  "mkdocs-gen-files",
  "griffe-fieldz",
  "himena[recommended]"
]

[tool.hatch.version]
path = "src/himena/__init__.py"

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy>=1.0.0",
]
[tool.hatch.envs.types.scripts]
check = "mypy --install-types --non-interactive {args:src/himena tests}"

[tool.coverage.run]
source = ["himena", "himena_builtins"]
branch = true
parallel = true
omit = [
  "src/himena/__init__.py",
]

[tool.pytest.ini_options]
addopts = ["--maxfail=5"]
filterwarnings = [
    "ignore:Jupyter is migrating its paths to use standard platformdirs:DeprecationWarning",
]

[tool.coverage.paths]
himena = ["src/himena", "*/himena/src/himena"]


[tool.coverage.exclude]
path = [
    "src/himena_builtins/_pytest_fixtures.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "pragma: no cover",
  "@overload",
  "@abstractmethod",
  "raise NotImplementedError",
  "raise Cancelled",
]

[tool.hatch.build.targets.sdist]
packages = [
  "src/himena",
  "src/himena_builtins",
]

[tool.hatch.build.targets.wheel]
packages = [
  "src/himena",
  "src/himena_builtins",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:himena tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]
exclude_lines = [
  "if TYPE_CHECKING:",
]


[tool.hatch.envs.test]
features = ["testing"]

[tool.hatch.envs.test.scripts]
run = "pytest -v --cov --cov-report=xml"

[[tool.hatch.envs.test.matrix]]
backend = ["pyqt5", "pyqt6"]

[tool.hatch.envs.test.overrides]
matrix.backend.features = [
  { value = "pyqt5", if = ["pyqt5"] },
  { value = "pyqt6", if = ["pyqt6"] },
]

[project.entry-points.pytest11]
himena = "himena_builtins._pytest_fixtures"

[tool.ruff]
exclude = ["**/tests/*.py"]

[project.entry-points."himena.plugin"]
"Builtin IO" = "himena_builtins.io"
"Builtin New Actions" = "himena_builtins.new"
"User Modifications" = "himena_builtins.user_modifications"

"Tool: Type conversion" = "himena_builtins.tools.conversions"
"Tool: Array" = "himena_builtins.tools.array"
"Tool: DataFrame" = "himena_builtins.tools.dataframe"
"Tool: Tabbed objects" = "himena_builtins.tools.dict"
"Tool: Image" = "himena_builtins.tools.image"
"Tool: Plotting" = "himena_builtins.tools.plot"
"Tool: Table" = "himena_builtins.tools.table"
"Tool: Text" = "himena_builtins.tools.text"
"Tool: Others" = "himena_builtins.tools.others"

"Widget: Basic Widgets" = "himena_builtins.qt.basic"
"Widget: Text Editor" = "himena_builtins.qt.text"
"Widget: Spreadsheet" = "himena_builtins.qt.table"
"Widget: DataFrame View" = "himena_builtins.qt.dataframe"
"Widget: Array View" = "himena_builtins.qt.array"
"Widget: Image View" = "himena_builtins.qt.image"
"Widget: Widget stacks (Excel and others)" = "himena_builtins.qt.stack"
"Widget: ROIs" = "himena_builtins.qt.rois"
"Widget: Jupyter Notebook" = "himena_builtins.qt.ipynb"
"Widget: Matplotlib canvas" = "himena_builtins.qt.plot"

"Dock Widget: QtConsole" = "himena_builtins.qt.console"
"Dock Widget: Output Widget" = "himena_builtins.qt.output"
"Dock Widget: File Explorers" = "himena_builtins.qt.explorer"
"Dock Widget: Command History" = "himena_builtins.qt.history"

"Debug" = "himena_builtins.debug"
