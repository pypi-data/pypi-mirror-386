[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "context-bridge"
version = "0.1.1"
description = "Unified Python package for RAG documentation workflows - Crawl, embed, store, and retrieve technical documentation for AI agents"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Ganzzi", email = "boinguyen9701@gmail.com" }]
keywords = [
    "rag",
    "documentation",
    "embedding",
    "vector-search",
    "mcp",
    "ai-agents",
    "crawling",
    "postgresql",
    "pgvector",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "psqlpy>=0.11.0",
    "crawl4ai[all]>=0.3.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "aiohttp>=3.9.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
]

[project.optional-dependencies]
mcp = ["mcp[cli]>=1.0.0"]
ui = ["streamlit>=1.28.0"]
dev = [
    "python-dotenv>=1.0.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.5.0",
    "mkdocs>=1.5.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-material>=9.4.0",
]
all = ["context-bridge[mcp,ui,dev]"]

[project.urls]
Homepage = "https://github.com/Ganzzi/context_bridge"
Documentation = "https://Ganzzi.github.io/context_bridge"
Repository = "https://github.com/Ganzzi/context_bridge"
Issues = "https://github.com/Ganzzi/context_bridge/issues"

[project.scripts]
context-bridge = "context_bridge.__main__:main"

[tool.hatch.build.targets.wheel]
packages = ["context_bridge"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=context_bridge",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "-v",
]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow tests (deselect with '-m \"not slow\"')",
    "e2e: marks tests as end-to-end browser tests",
]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long (handled by black)
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = ["crawl4ai.*", "streamlit.*"]
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/context_bridge"]
omit = ["*/tests/*", "*/__main__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "build>=1.3.0",
    "playwright>=1.55.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "pytest-cov>=7.0.0",
    "pytest-playwright>=0.7.1",
    "requests>=2.32.5",
    "twine>=6.2.0",
]
ui = ["streamlit>=1.50.0"]
