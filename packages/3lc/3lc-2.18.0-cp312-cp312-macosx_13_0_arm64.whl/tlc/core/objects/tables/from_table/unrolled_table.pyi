from _typeshed import Incomplete
from tlc.core.builtins.constants.string_roles import STRING_ROLE_TABLE_URL as STRING_ROLE_TABLE_URL
from tlc.core.builtins.schemas.schemas import ExampleIdSchema as ExampleIdSchema
from tlc.core.object_reference import ObjectReference as ObjectReference
from tlc.core.object_type_registry import ObjectTypeRegistry as ObjectTypeRegistry
from tlc.core.objects.table import ImmutableDict as ImmutableDict, Table as Table, TableRow as TableRow
from tlc.core.objects.tables.in_memory_rows_table import _InMemoryRowsTable
from tlc.core.schema import DimensionNumericValue as DimensionNumericValue, Schema as Schema, StringValue as StringValue
from tlc.core.url import Url as Url
from typing import Any

logger: Incomplete

class UnrolledTable(_InMemoryRowsTable):
    """Creates a derived table by expanding rows based on a list-like sub-column in the input table.

    The `unroll_property` should specify a nested path to a list-like value in the input table's schema. Each row in the
    derived table is generated by replacing this list-like sub-value with individual items from the list. All other
    columns will be copied from the input table.

    :param input_table_url: The table to unroll.
    :param unroll_property: The . separated path to the list-like sub-value to unroll.
    """
    input_table_url: ObjectReference
    unroll_property: Incomplete
    def __init__(self, *, url: Url | None = None, created: str | None = None, description: str | None = None, row_cache_url: Url | None = None, row_cache_populated: bool | None = None, override_table_rows_schema: Any | None = None, input_table_url: Url | Table | None = None, unroll_property: str | None = None, init_parameters: Any = None, input_tables: list[Url] | None = None) -> None: ...
    @staticmethod
    def get_nested_value(row_data: TableRow, unroll_property: str) -> Any: ...
    @staticmethod
    def set_nested_value(row_data: dict[str, object], path: str, value: Any) -> None: ...
