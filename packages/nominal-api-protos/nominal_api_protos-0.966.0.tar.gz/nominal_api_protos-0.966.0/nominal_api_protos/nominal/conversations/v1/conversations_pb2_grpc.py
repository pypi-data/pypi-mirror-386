# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nominal.conversations.v1 import conversations_pb2 as nominal_dot_conversations_dot_v1_dot_conversations__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in nominal/conversations/v1/conversations_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ConversationServiceStub(object):
    """ConversationService provides conversation lifecycle and persistence for AI agents
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateConversation = channel.unary_unary(
                '/nominal.conversations.v1.ConversationService/CreateConversation',
                request_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.CreateConversationRequest.SerializeToString,
                response_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.CreateConversationResponse.FromString,
                _registered_method=True)
        self.ListConversations = channel.unary_unary(
                '/nominal.conversations.v1.ConversationService/ListConversations',
                request_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.ListConversationsRequest.SerializeToString,
                response_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.ListConversationsResponse.FromString,
                _registered_method=True)
        self.GetConversation = channel.unary_unary(
                '/nominal.conversations.v1.ConversationService/GetConversation',
                request_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.GetConversationRequest.SerializeToString,
                response_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.GetConversationResponse.FromString,
                _registered_method=True)
        self.AddMessage = channel.unary_unary(
                '/nominal.conversations.v1.ConversationService/AddMessage',
                request_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.AddMessageRequest.SerializeToString,
                response_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.AddMessageResponse.FromString,
                _registered_method=True)
        self.SetConversationTitle = channel.unary_unary(
                '/nominal.conversations.v1.ConversationService/SetConversationTitle',
                request_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.SetConversationTitleRequest.SerializeToString,
                response_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.SetConversationTitleResponse.FromString,
                _registered_method=True)


class ConversationServiceServicer(object):
    """ConversationService provides conversation lifecycle and persistence for AI agents
    """

    def CreateConversation(self, request, context):
        """Create a new conversation for any agent type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListConversations(self, request, context):
        """List latest conversations for a context in descending order of updated_at timestamp
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConversation(self, request, context):
        """Get conversation by rid including full message history
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddMessage(self, request, context):
        """Add a message to an existing conversation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConversationTitle(self, request, context):
        """Set or update the title of a conversation
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConversationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateConversation,
                    request_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.CreateConversationRequest.FromString,
                    response_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.CreateConversationResponse.SerializeToString,
            ),
            'ListConversations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListConversations,
                    request_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.ListConversationsRequest.FromString,
                    response_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.ListConversationsResponse.SerializeToString,
            ),
            'GetConversation': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConversation,
                    request_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.GetConversationRequest.FromString,
                    response_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.GetConversationResponse.SerializeToString,
            ),
            'AddMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.AddMessage,
                    request_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.AddMessageRequest.FromString,
                    response_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.AddMessageResponse.SerializeToString,
            ),
            'SetConversationTitle': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConversationTitle,
                    request_deserializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.SetConversationTitleRequest.FromString,
                    response_serializer=nominal_dot_conversations_dot_v1_dot_conversations__pb2.SetConversationTitleResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nominal.conversations.v1.ConversationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nominal.conversations.v1.ConversationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ConversationService(object):
    """ConversationService provides conversation lifecycle and persistence for AI agents
    """

    @staticmethod
    def CreateConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.conversations.v1.ConversationService/CreateConversation',
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.CreateConversationRequest.SerializeToString,
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.CreateConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListConversations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.conversations.v1.ConversationService/ListConversations',
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.ListConversationsRequest.SerializeToString,
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.ListConversationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetConversation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.conversations.v1.ConversationService/GetConversation',
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.GetConversationRequest.SerializeToString,
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.GetConversationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.conversations.v1.ConversationService/AddMessage',
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.AddMessageRequest.SerializeToString,
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.AddMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetConversationTitle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.conversations.v1.ConversationService/SetConversationTitle',
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.SetConversationTitleRequest.SerializeToString,
            nominal_dot_conversations_dot_v1_dot_conversations__pb2.SetConversationTitleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
