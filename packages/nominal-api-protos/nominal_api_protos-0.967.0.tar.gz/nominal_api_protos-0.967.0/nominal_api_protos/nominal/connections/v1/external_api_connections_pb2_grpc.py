# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nominal.connections.v1 import external_api_connections_pb2 as nominal_dot_connections_dot_v1_dot_external__api__connections__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in nominal/connections/v1/external_api_connections_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ConnectionsServiceStub(object):
    """*
    Defines the interface for how Nominal expects to interact with custom connection implementations. All sources of
    time series data is abstracted by a channel identifier, allowing for flexibility of the underlying data source
    implementations.

    The authorization credentials are passed as http headers as:
    "Authorization: Bearer <token>"
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListChannels = channel.unary_unary(
                '/nominal.connections.v1.ConnectionsService/ListChannels',
                request_serializer=nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.ListChannelsRequest.SerializeToString,
                response_deserializer=nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.ListChannelsResponse.FromString,
                _registered_method=True)
        self.QueryChannel = channel.unary_stream(
                '/nominal.connections.v1.ConnectionsService/QueryChannel',
                request_serializer=nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.QueryChannelRequest.SerializeToString,
                response_deserializer=nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.QueryChannelResponse.FromString,
                _registered_method=True)


class ConnectionsServiceServicer(object):
    """*
    Defines the interface for how Nominal expects to interact with custom connection implementations. All sources of
    time series data is abstracted by a channel identifier, allowing for flexibility of the underlying data source
    implementations.

    The authorization credentials are passed as http headers as:
    "Authorization: Bearer <token>"
    """

    def ListChannels(self, request, context):
        """*
        Paging endpoint to list all the channels and their allowed tag values. Callers should expect that more results are
        available as long as ListChannelsResponse continues to return a pageToken and will pass in this pageToken in the
        next ListChannelsRequest.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryChannel(self, request, context):
        """*
        Endpoint to query a given channel for time series data for a given set of tags and time range. The response is a
        stream of points.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConnectionsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListChannels': grpc.unary_unary_rpc_method_handler(
                    servicer.ListChannels,
                    request_deserializer=nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.ListChannelsRequest.FromString,
                    response_serializer=nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.ListChannelsResponse.SerializeToString,
            ),
            'QueryChannel': grpc.unary_stream_rpc_method_handler(
                    servicer.QueryChannel,
                    request_deserializer=nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.QueryChannelRequest.FromString,
                    response_serializer=nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.QueryChannelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nominal.connections.v1.ConnectionsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nominal.connections.v1.ConnectionsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ConnectionsService(object):
    """*
    Defines the interface for how Nominal expects to interact with custom connection implementations. All sources of
    time series data is abstracted by a channel identifier, allowing for flexibility of the underlying data source
    implementations.

    The authorization credentials are passed as http headers as:
    "Authorization: Bearer <token>"
    """

    @staticmethod
    def ListChannels(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.connections.v1.ConnectionsService/ListChannels',
            nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.ListChannelsRequest.SerializeToString,
            nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.ListChannelsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/nominal.connections.v1.ConnectionsService/QueryChannel',
            nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.QueryChannelRequest.SerializeToString,
            nominal_dot_connections_dot_v1_dot_external__api__connections__pb2.QueryChannelResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
