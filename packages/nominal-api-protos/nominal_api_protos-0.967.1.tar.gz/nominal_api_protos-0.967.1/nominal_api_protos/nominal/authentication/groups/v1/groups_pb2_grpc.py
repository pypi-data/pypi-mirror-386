# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nominal.authentication.groups.v1 import groups_pb2 as nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in nominal/authentication/groups/v1/groups_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GroupServiceStub(object):
    """Service for managing groups within an organization
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGroup = channel.unary_unary(
                '/nominal.authentication.groups.v1.GroupService/GetGroup',
                request_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupResponse.FromString,
                _registered_method=True)
        self.GetGroups = channel.unary_unary(
                '/nominal.authentication.groups.v1.GroupService/GetGroups',
                request_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupsRequest.SerializeToString,
                response_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupsResponse.FromString,
                _registered_method=True)
        self.GetGroupById = channel.unary_unary(
                '/nominal.authentication.groups.v1.GroupService/GetGroupById',
                request_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupByIdRequest.SerializeToString,
                response_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupByIdResponse.FromString,
                _registered_method=True)
        self.UpdateGroupMetadata = channel.unary_unary(
                '/nominal.authentication.groups.v1.GroupService/UpdateGroupMetadata',
                request_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.UpdateGroupMetadataRequestWrapper.SerializeToString,
                response_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.UpdateGroupMetadataResponse.FromString,
                _registered_method=True)
        self.SearchGroups = channel.unary_unary(
                '/nominal.authentication.groups.v1.GroupService/SearchGroups',
                request_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.SearchGroupsRequest.SerializeToString,
                response_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.SearchGroupsResponse.FromString,
                _registered_method=True)


class GroupServiceServicer(object):
    """Service for managing groups within an organization
    """

    def GetGroup(self, request, context):
        """Get group within the user's organization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroups(self, request, context):
        """Get batch of groups within the user's organization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroupById(self, request, context):
        """Gets a group by its ID within the user's organization
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGroupMetadata(self, request, context):
        """buf:lint:ignore RPC_REQUEST_STANDARD_NAME
        Updates the metadata of a group
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchGroups(self, request, context):
        """Searches all groups in the user's organization using given query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupRequest.FromString,
                    response_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupResponse.SerializeToString,
            ),
            'GetGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroups,
                    request_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupsRequest.FromString,
                    response_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupsResponse.SerializeToString,
            ),
            'GetGroupById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroupById,
                    request_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupByIdRequest.FromString,
                    response_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupByIdResponse.SerializeToString,
            ),
            'UpdateGroupMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGroupMetadata,
                    request_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.UpdateGroupMetadataRequestWrapper.FromString,
                    response_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.UpdateGroupMetadataResponse.SerializeToString,
            ),
            'SearchGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchGroups,
                    request_deserializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.SearchGroupsRequest.FromString,
                    response_serializer=nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.SearchGroupsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nominal.authentication.groups.v1.GroupService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nominal.authentication.groups.v1.GroupService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GroupService(object):
    """Service for managing groups within an organization
    """

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authentication.groups.v1.GroupService/GetGroup',
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupRequest.SerializeToString,
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authentication.groups.v1.GroupService/GetGroups',
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupsRequest.SerializeToString,
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGroupById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authentication.groups.v1.GroupService/GetGroupById',
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupByIdRequest.SerializeToString,
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.GetGroupByIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateGroupMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authentication.groups.v1.GroupService/UpdateGroupMetadata',
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.UpdateGroupMetadataRequestWrapper.SerializeToString,
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.UpdateGroupMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authentication.groups.v1.GroupService/SearchGroups',
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.SearchGroupsRequest.SerializeToString,
            nominal_dot_authentication_dot_groups_dot_v1_dot_groups__pb2.SearchGroupsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
