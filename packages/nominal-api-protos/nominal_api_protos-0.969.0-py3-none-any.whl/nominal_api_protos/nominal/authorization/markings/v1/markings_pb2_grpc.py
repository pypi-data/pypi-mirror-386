# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nominal.authorization.markings.v1 import markings_pb2 as nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in nominal/authorization/markings/v1/markings_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MarkingServiceStub(object):
    """TODO(MGMT-481): define and use grpc errors.

    This service manages Markings, which are a mechanism to restrict access to data sources.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateMarking = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/CreateMarking',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.CreateMarkingRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.CreateMarkingResponse.FromString,
                _registered_method=True)
        self.GetMarking = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/GetMarking',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingResponse.FromString,
                _registered_method=True)
        self.GetMarkingById = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/GetMarkingById',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingByIdRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingByIdResponse.FromString,
                _registered_method=True)
        self.BatchGetMarkings = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/BatchGetMarkings',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingsRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingsResponse.FromString,
                _registered_method=True)
        self.BatchGetMarkingMetadata = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/BatchGetMarkingMetadata',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingMetadataRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingMetadataResponse.FromString,
                _registered_method=True)
        self.GetAuthorizedGroupsByMarking = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/GetAuthorizedGroupsByMarking',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetAuthorizedGroupsByMarkingRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetAuthorizedGroupsByMarkingResponse.FromString,
                _registered_method=True)
        self.SearchMarkings = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/SearchMarkings',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.SearchMarkingsRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.SearchMarkingsResponse.FromString,
                _registered_method=True)
        self.UpdateMarking = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/UpdateMarking',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingResponse.FromString,
                _registered_method=True)
        self.ArchiveMarkings = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/ArchiveMarkings',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.ArchiveMarkingsRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.ArchiveMarkingsResponse.FromString,
                _registered_method=True)
        self.UnarchiveMarkings = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/UnarchiveMarkings',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UnarchiveMarkingsRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UnarchiveMarkingsResponse.FromString,
                _registered_method=True)
        self.UpdateMarkingsOnResource = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/UpdateMarkingsOnResource',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingsOnResourceRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingsOnResourceResponse.FromString,
                _registered_method=True)
        self.GetResourcesForMarking = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/GetResourcesForMarking',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetResourcesForMarkingRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetResourcesForMarkingResponse.FromString,
                _registered_method=True)
        self.GetMarkingsForResources = channel.unary_unary(
                '/nominal.authorization.markings.v1.MarkingService/GetMarkingsForResources',
                request_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingsForResourcesRequest.SerializeToString,
                response_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingsForResourcesResponse.FromString,
                _registered_method=True)


class MarkingServiceServicer(object):
    """TODO(MGMT-481): define and use grpc errors.

    This service manages Markings, which are a mechanism to restrict access to data sources.
    """

    def CreateMarking(self, request, context):
        """Creates a marking.
        Throws HTTP 409 / gRPC 6 if a marking with the same ID already exists.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to create a marking.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to read some of the specified groups.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarking(self, request, context):
        """Gets a marking by its RID.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to read the marking.
        Throws HTTP 403 / gRPC 5 if the marking is not found.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarkingById(self, request, context):
        """Gets a marking by its ID, a human-readable identifier unique within the org.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to read the marking.
        Throws HTTP 403 / gRPC 5 if the marking is not found.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetMarkings(self, request, context):
        """Gets multiple markings by RID.
        If a marking is not found or the user doesn't have permission to read it,
        it will not be included in the response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetMarkingMetadata(self, request, context):
        """Gets metadata for multiple markings by RID. Metadata does not include the authorized groups.
        If a marking is not found or the user doesn't have permission to read it,
        it will not be included in the response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuthorizedGroupsByMarking(self, request, context):
        """Gets the authorized Groups for each of a set of Markings.
        Markings that are not found or for which the user does not have permission to read
        will be filtered from the response.
        Groups for which the user does not have permission to read will be filtered from the response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchMarkings(self, request, context):
        """Search Markings, returning paged results.
        Throws HTTP 400 / gRPC 3 if the query is incorrectly formed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMarking(self, request, context):
        """Updates a marking.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to update the marking.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to read any of the specified groups.
        Throws HTTP 403 / gRPC 5 if the marking is not found.
        Throws HTTP 409 / gRPC 6 if trying to update the ID of a marking to an ID that already exists.
        Throws HTTP 400 / gRPC 3 if trying to update an archived marking.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ArchiveMarkings(self, request, context):
        """Archives markings. Archiving a marking is an idempotent operation that prevents further changes
        or applications of the marking.
        Archived markings will not appear in search but can be retrieved by `get` endpoints.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to archive one or more of the markings
        or if any of the markings are not found.
        Throws HTTP 400 / gRPC 3 if the archived marking is currently applied to one or more resources.
        TODO(MGMT-489): this will throw 403 if any of the Markings don't exist, but we should throw 404 instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnarchiveMarkings(self, request, context):
        """Unarchives markings. Restores ability to apply and modify marking.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to unarchive one or more of the markings
        or if any of the markings are not found.
        TODO(MGMT-489): this will throw 403 if any of the Markings don't exist, but we should throw 404 instead.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateMarkingsOnResource(self, request, context):
        """Update the markings that are applied on a resource. Supports applying and removing markings at once.
        This endpoint can be used to atomically replace the markings on a resource, or bulk apply/remove markings.
        This operation is idempotent and will not throw an error if the marking is already applied/removed on the resource.
        If a resource marking pair is present in both `markings_to_apply` and `markings_to_remove`, this will throw.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to change the markings on the resource.
        Throws HTTP 400 / gRPC 3 if trying to apply an archived marking.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetResourcesForMarking(self, request, context):
        """Gets the resources that a Marking is applied to. This endpoint is paginated.
        Any unauthorized resources will be filtered from the response.
        Throws HTTP 403 / gRPC 7 if the user does not have permission to read the marking.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarkingsForResources(self, request, context):
        """Gets the requested resources and the markings applied to them. Since the number of markings applied
        to a resource is typically small, this endpoint will return all markings for each resource.
        Any unauthorized resources or markings will be filtered from the response.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MarkingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateMarking': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMarking,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.CreateMarkingRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.CreateMarkingResponse.SerializeToString,
            ),
            'GetMarking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarking,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingResponse.SerializeToString,
            ),
            'GetMarkingById': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarkingById,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingByIdRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingByIdResponse.SerializeToString,
            ),
            'BatchGetMarkings': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetMarkings,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingsRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingsResponse.SerializeToString,
            ),
            'BatchGetMarkingMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetMarkingMetadata,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingMetadataRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingMetadataResponse.SerializeToString,
            ),
            'GetAuthorizedGroupsByMarking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuthorizedGroupsByMarking,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetAuthorizedGroupsByMarkingRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetAuthorizedGroupsByMarkingResponse.SerializeToString,
            ),
            'SearchMarkings': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchMarkings,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.SearchMarkingsRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.SearchMarkingsResponse.SerializeToString,
            ),
            'UpdateMarking': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMarking,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingResponse.SerializeToString,
            ),
            'ArchiveMarkings': grpc.unary_unary_rpc_method_handler(
                    servicer.ArchiveMarkings,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.ArchiveMarkingsRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.ArchiveMarkingsResponse.SerializeToString,
            ),
            'UnarchiveMarkings': grpc.unary_unary_rpc_method_handler(
                    servicer.UnarchiveMarkings,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UnarchiveMarkingsRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UnarchiveMarkingsResponse.SerializeToString,
            ),
            'UpdateMarkingsOnResource': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateMarkingsOnResource,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingsOnResourceRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingsOnResourceResponse.SerializeToString,
            ),
            'GetResourcesForMarking': grpc.unary_unary_rpc_method_handler(
                    servicer.GetResourcesForMarking,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetResourcesForMarkingRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetResourcesForMarkingResponse.SerializeToString,
            ),
            'GetMarkingsForResources': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarkingsForResources,
                    request_deserializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingsForResourcesRequest.FromString,
                    response_serializer=nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingsForResourcesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nominal.authorization.markings.v1.MarkingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nominal.authorization.markings.v1.MarkingService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MarkingService(object):
    """TODO(MGMT-481): define and use grpc errors.

    This service manages Markings, which are a mechanism to restrict access to data sources.
    """

    @staticmethod
    def CreateMarking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/CreateMarking',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.CreateMarkingRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.CreateMarkingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMarking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/GetMarking',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMarkingById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/GetMarkingById',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingByIdRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingByIdResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetMarkings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/BatchGetMarkings',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingsRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetMarkingMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/BatchGetMarkingMetadata',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingMetadataRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.BatchGetMarkingMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAuthorizedGroupsByMarking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/GetAuthorizedGroupsByMarking',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetAuthorizedGroupsByMarkingRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetAuthorizedGroupsByMarkingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchMarkings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/SearchMarkings',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.SearchMarkingsRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.SearchMarkingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMarking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/UpdateMarking',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ArchiveMarkings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/ArchiveMarkings',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.ArchiveMarkingsRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.ArchiveMarkingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnarchiveMarkings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/UnarchiveMarkings',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UnarchiveMarkingsRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UnarchiveMarkingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateMarkingsOnResource(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/UpdateMarkingsOnResource',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingsOnResourceRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.UpdateMarkingsOnResourceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetResourcesForMarking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/GetResourcesForMarking',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetResourcesForMarkingRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetResourcesForMarkingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMarkingsForResources(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.authorization.markings.v1.MarkingService/GetMarkingsForResources',
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingsForResourcesRequest.SerializeToString,
            nominal_dot_authorization_dot_markings_dot_v1_dot_markings__pb2.GetMarkingsForResourcesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
