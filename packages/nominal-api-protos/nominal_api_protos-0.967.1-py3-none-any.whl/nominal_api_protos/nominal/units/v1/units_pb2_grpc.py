# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nominal.units.v1 import units_pb2 as nominal_dot_units_dot_v1_dot_units__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in nominal/units/v1/units_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class UnitsServiceStub(object):
    """The Units Service serves as a comprehensive catalog of the units of measurement supported by scout. Units, by
    default, follow the UCUM convention for representation.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAllUnits = channel.unary_unary(
                '/nominal.units.v1.UnitsService/GetAllUnits',
                request_serializer=nominal_dot_units_dot_v1_dot_units__pb2.GetAllUnitsRequest.SerializeToString,
                response_deserializer=nominal_dot_units_dot_v1_dot_units__pb2.GetAllUnitsResponse.FromString,
                _registered_method=True)
        self.GetUnit = channel.unary_unary(
                '/nominal.units.v1.UnitsService/GetUnit',
                request_serializer=nominal_dot_units_dot_v1_dot_units__pb2.GetUnitRequest.SerializeToString,
                response_deserializer=nominal_dot_units_dot_v1_dot_units__pb2.GetUnitResponse.FromString,
                _registered_method=True)
        self.GetBatchUnits = channel.unary_unary(
                '/nominal.units.v1.UnitsService/GetBatchUnits',
                request_serializer=nominal_dot_units_dot_v1_dot_units__pb2.GetBatchUnitsRequest.SerializeToString,
                response_deserializer=nominal_dot_units_dot_v1_dot_units__pb2.GetBatchUnitsResponse.FromString,
                _registered_method=True)
        self.GetCommensurableUnits = channel.unary_unary(
                '/nominal.units.v1.UnitsService/GetCommensurableUnits',
                request_serializer=nominal_dot_units_dot_v1_dot_units__pb2.GetCommensurableUnitsRequest.SerializeToString,
                response_deserializer=nominal_dot_units_dot_v1_dot_units__pb2.GetCommensurableUnitsResponse.FromString,
                _registered_method=True)


class UnitsServiceServicer(object):
    """The Units Service serves as a comprehensive catalog of the units of measurement supported by scout. Units, by
    default, follow the UCUM convention for representation.
    """

    def GetAllUnits(self, request, context):
        """Returns all known units, grouped by the physical property they measure.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnit(self, request, context):
        """Returns information for a unit symbol if available. Returns as empty if the provided symbol cannot be parsed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatchUnits(self, request, context):
        """Returns information for the unit symbols if available. If the provided symbol cannot be parsed, it will be
        omitted from the map.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCommensurableUnits(self, request, context):
        """Returns the set of cataloged units that can be converted to and from the given unit.
        No commensurable units does not imply the unit is invalid. Use /get-unit to check for validity.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UnitsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAllUnits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllUnits,
                    request_deserializer=nominal_dot_units_dot_v1_dot_units__pb2.GetAllUnitsRequest.FromString,
                    response_serializer=nominal_dot_units_dot_v1_dot_units__pb2.GetAllUnitsResponse.SerializeToString,
            ),
            'GetUnit': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnit,
                    request_deserializer=nominal_dot_units_dot_v1_dot_units__pb2.GetUnitRequest.FromString,
                    response_serializer=nominal_dot_units_dot_v1_dot_units__pb2.GetUnitResponse.SerializeToString,
            ),
            'GetBatchUnits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatchUnits,
                    request_deserializer=nominal_dot_units_dot_v1_dot_units__pb2.GetBatchUnitsRequest.FromString,
                    response_serializer=nominal_dot_units_dot_v1_dot_units__pb2.GetBatchUnitsResponse.SerializeToString,
            ),
            'GetCommensurableUnits': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCommensurableUnits,
                    request_deserializer=nominal_dot_units_dot_v1_dot_units__pb2.GetCommensurableUnitsRequest.FromString,
                    response_serializer=nominal_dot_units_dot_v1_dot_units__pb2.GetCommensurableUnitsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nominal.units.v1.UnitsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nominal.units.v1.UnitsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UnitsService(object):
    """The Units Service serves as a comprehensive catalog of the units of measurement supported by scout. Units, by
    default, follow the UCUM convention for representation.
    """

    @staticmethod
    def GetAllUnits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.units.v1.UnitsService/GetAllUnits',
            nominal_dot_units_dot_v1_dot_units__pb2.GetAllUnitsRequest.SerializeToString,
            nominal_dot_units_dot_v1_dot_units__pb2.GetAllUnitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUnit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.units.v1.UnitsService/GetUnit',
            nominal_dot_units_dot_v1_dot_units__pb2.GetUnitRequest.SerializeToString,
            nominal_dot_units_dot_v1_dot_units__pb2.GetUnitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBatchUnits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.units.v1.UnitsService/GetBatchUnits',
            nominal_dot_units_dot_v1_dot_units__pb2.GetBatchUnitsRequest.SerializeToString,
            nominal_dot_units_dot_v1_dot_units__pb2.GetBatchUnitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCommensurableUnits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.units.v1.UnitsService/GetCommensurableUnits',
            nominal_dot_units_dot_v1_dot_units__pb2.GetCommensurableUnitsRequest.SerializeToString,
            nominal_dot_units_dot_v1_dot_units__pb2.GetCommensurableUnitsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
