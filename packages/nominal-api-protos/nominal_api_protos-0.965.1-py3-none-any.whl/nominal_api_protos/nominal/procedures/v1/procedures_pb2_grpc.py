# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from nominal.procedures.v1 import procedures_pb2 as nominal_dot_procedures_dot_v1_dot_procedures__pb2

GRPC_GENERATED_VERSION = '1.76.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + ' but the generated code in nominal/procedures/v1/procedures_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ProceduresServiceStub(object):
    """Service for creating and managing procedure templates, which are versioned collections
    of steps to be performed, typically in a specific order.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateProcedure = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/CreateProcedure',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.CreateProcedureRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.CreateProcedureResponse.FromString,
                _registered_method=True)
        self.GetProcedure = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/GetProcedure',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureResponse.FromString,
                _registered_method=True)
        self.BatchGetProcedureMetadata = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/BatchGetProcedureMetadata',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.BatchGetProcedureMetadataRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.BatchGetProcedureMetadataResponse.FromString,
                _registered_method=True)
        self.UpdateProcedureMetadata = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/UpdateProcedureMetadata',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.UpdateProcedureMetadataRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.UpdateProcedureMetadataResponse.FromString,
                _registered_method=True)
        self.ParseNestedProcedure = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/ParseNestedProcedure',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.ParseNestedProcedureRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.ParseNestedProcedureResponse.FromString,
                _registered_method=True)
        self.GetProcedureAsNested = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/GetProcedureAsNested',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureAsNestedRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureAsNestedResponse.FromString,
                _registered_method=True)
        self.MergeToMain = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/MergeToMain',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.MergeToMainRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.MergeToMainResponse.FromString,
                _registered_method=True)
        self.SaveWorkingState = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/SaveWorkingState',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.SaveWorkingStateRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.SaveWorkingStateResponse.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/Commit',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.CommitRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.CommitResponse.FromString,
                _registered_method=True)
        self.SearchProcedures = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/SearchProcedures',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.SearchProceduresRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.SearchProceduresResponse.FromString,
                _registered_method=True)
        self.ArchiveProcedures = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/ArchiveProcedures',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.ArchiveProceduresRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.ArchiveProceduresResponse.FromString,
                _registered_method=True)
        self.UnarchiveProcedures = channel.unary_unary(
                '/nominal.procedures.v1.ProceduresService/UnarchiveProcedures',
                request_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.UnarchiveProceduresRequest.SerializeToString,
                response_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.UnarchiveProceduresResponse.FromString,
                _registered_method=True)


class ProceduresServiceServicer(object):
    """Service for creating and managing procedure templates, which are versioned collections
    of steps to be performed, typically in a specific order.
    """

    def CreateProcedure(self, request, context):
        """Create a new procedure
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProcedure(self, request, context):
        """Get a procedure by its RID
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchGetProcedureMetadata(self, request, context):
        """Get metadata for multiple procedure by RIDs.
        Unauthorized RIDs will be omitted from the response.
        Order is not guaranteed to match the request.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateProcedureMetadata(self, request, context):
        """Update the metadata of a procedure
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParseNestedProcedure(self, request, context):
        """Parse a procedure from a nested procedure structure
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProcedureAsNested(self, request, context):
        """Get procedure as nested procedure
        TODO(pchen): in the future, not all graphs will be representable as nested procedures
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MergeToMain(self, request, context):
        """Merge a branch of a procedure to main
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveWorkingState(self, request, context):
        """Save the working state of a procedure
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Commit a procedure to a branch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchProcedures(self, request, context):
        """Searches all procedures, returning paged results
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ArchiveProcedures(self, request, context):
        """Archive procedures
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnarchiveProcedures(self, request, context):
        """Unarchive procedures
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProceduresServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateProcedure': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProcedure,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.CreateProcedureRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.CreateProcedureResponse.SerializeToString,
            ),
            'GetProcedure': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProcedure,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureResponse.SerializeToString,
            ),
            'BatchGetProcedureMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchGetProcedureMetadata,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.BatchGetProcedureMetadataRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.BatchGetProcedureMetadataResponse.SerializeToString,
            ),
            'UpdateProcedureMetadata': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateProcedureMetadata,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.UpdateProcedureMetadataRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.UpdateProcedureMetadataResponse.SerializeToString,
            ),
            'ParseNestedProcedure': grpc.unary_unary_rpc_method_handler(
                    servicer.ParseNestedProcedure,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.ParseNestedProcedureRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.ParseNestedProcedureResponse.SerializeToString,
            ),
            'GetProcedureAsNested': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProcedureAsNested,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureAsNestedRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureAsNestedResponse.SerializeToString,
            ),
            'MergeToMain': grpc.unary_unary_rpc_method_handler(
                    servicer.MergeToMain,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.MergeToMainRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.MergeToMainResponse.SerializeToString,
            ),
            'SaveWorkingState': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveWorkingState,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.SaveWorkingStateRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.SaveWorkingStateResponse.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.CommitRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.CommitResponse.SerializeToString,
            ),
            'SearchProcedures': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchProcedures,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.SearchProceduresRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.SearchProceduresResponse.SerializeToString,
            ),
            'ArchiveProcedures': grpc.unary_unary_rpc_method_handler(
                    servicer.ArchiveProcedures,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.ArchiveProceduresRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.ArchiveProceduresResponse.SerializeToString,
            ),
            'UnarchiveProcedures': grpc.unary_unary_rpc_method_handler(
                    servicer.UnarchiveProcedures,
                    request_deserializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.UnarchiveProceduresRequest.FromString,
                    response_serializer=nominal_dot_procedures_dot_v1_dot_procedures__pb2.UnarchiveProceduresResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'nominal.procedures.v1.ProceduresService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('nominal.procedures.v1.ProceduresService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ProceduresService(object):
    """Service for creating and managing procedure templates, which are versioned collections
    of steps to be performed, typically in a specific order.
    """

    @staticmethod
    def CreateProcedure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/CreateProcedure',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.CreateProcedureRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.CreateProcedureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProcedure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/GetProcedure',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BatchGetProcedureMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/BatchGetProcedureMetadata',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.BatchGetProcedureMetadataRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.BatchGetProcedureMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateProcedureMetadata(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/UpdateProcedureMetadata',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.UpdateProcedureMetadataRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.UpdateProcedureMetadataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ParseNestedProcedure(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/ParseNestedProcedure',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.ParseNestedProcedureRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.ParseNestedProcedureResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProcedureAsNested(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/GetProcedureAsNested',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureAsNestedRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.GetProcedureAsNestedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MergeToMain(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/MergeToMain',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.MergeToMainRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.MergeToMainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SaveWorkingState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/SaveWorkingState',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.SaveWorkingStateRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.SaveWorkingStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/Commit',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.CommitRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.CommitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchProcedures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/SearchProcedures',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.SearchProceduresRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.SearchProceduresResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ArchiveProcedures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/ArchiveProcedures',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.ArchiveProceduresRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.ArchiveProceduresResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnarchiveProcedures(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nominal.procedures.v1.ProceduresService/UnarchiveProcedures',
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.UnarchiveProceduresRequest.SerializeToString,
            nominal_dot_procedures_dot_v1_dot_procedures__pb2.UnarchiveProceduresResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
