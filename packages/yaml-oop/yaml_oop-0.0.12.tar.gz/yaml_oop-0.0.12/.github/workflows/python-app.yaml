name: Python application

on:
  push:
    branches: [ "main" ]
    tags:                        
      - "v*.*.*"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  actions: write

jobs:
  release-build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip --root-user-action=ignore
        pip install build --root-user-action=ignore
        pip install pytest --root-user-action=ignore
        pip install pyyaml==6.0.2 --root-user-action=ignore
    - name: Test with pytest
      run: |
        pytest
    - name: Build package
      run: python -m build
    # Release
    - name: Upload distributions
      if: ${{ !env.ACT }}
      uses: actions/upload-artifact@v4.3.3
      with:
        name: release-dists
        path: dist/
    # Local testing with act
    - name: Upload distributions locally (act)
      if: ${{ env.ACT }}
      run: |
        mkdir -p artifacts/release-dists
        cp -r dist/* artifacts/release-dists/

  pypi-publish:
    runs-on: ubuntu-latest

    needs:
      - release-build
    permissions:
      id-token: write
    environment:
      name: pypi
      url: https://pypi.org/project/yaml-oop/

    steps:
      # Release
      - name: Retrieve release distributions
        if: ${{ !env.ACT }}  
        uses: actions/download-artifact@v4.1.7
        with:
          name: release-dists
          path: dist/
      
      # Local testing with act
      - name: Retrieve release distributions locally (act)
        if: ${{ env.ACT }}
        run: |
          mkdir -p dist
          cp -r artifacts/release-dists/* dist/

      # Publish to PyPI only on release
      - name: Publish release distributions to PyPI
        if: ${{ !env.ACT }}
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist
      
      # - name: Create GitHub Release
      #   if: ${{ !env.ACT }}
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: dist/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}