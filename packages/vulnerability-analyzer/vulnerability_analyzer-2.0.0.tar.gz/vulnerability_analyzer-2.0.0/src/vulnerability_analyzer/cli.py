#!/usr/bin/env python3
"""
Command-line interface for Vulnerability Analyzer
"""

import argparse
import sys
import os
from pathlib import Path
import json

from vulnerability_analyzer.analysis.pcap import PcapAnalyzer
from vulnerability_analyzer.analysis.nmap import NmapAnalyzer
from vulnerability_analyzer.vulnerability.matcher import VulnerabilityMatcher


def run_pcap_pipeline(pcap_file: str, output_file: str = None, output_format: str = "csv") -> None:
    """Run the complete PCAP analysis pipeline"""
    print(f"Starting PCAP analysis of: {pcap_file}")
    
    # Initialize analyzer
    analyzer = PcapAnalyzer()
    
    # Run analysis
    analysis_results = analyzer.analyze(pcap_file)
    
    if analysis_results is None or not analysis_results.get('analysis_complete', False):
        print("Analysis failed or returned no results")
        return
    
    # Extract the DataFrame from results
    results = analysis_results.get('extracted_data')
    
    if results is None or results.empty:
        print("No data extracted from PCAP file")
        return
    
    print(f"Extracted {len(results)} network events")
    
    # Run vulnerability matching
    matcher = VulnerabilityMatcher()
    vuln_results = matcher.match_vulnerabilities(results, analysis_type="pcap")
    
    print(f"Found {len(vuln_results)} potential vulnerabilities")
    
    # Save results
    if output_file:
        if output_format.lower() in ["csv", "both"]:
            csv_file = output_file if output_file.endswith('.csv') else f"{output_file}.csv"
            vuln_results.to_csv(csv_file, index=False)
            print(f"Results saved to: {csv_file}")
        
        if output_format.lower() in ["json", "both"]:
            json_file = output_file if output_file.endswith('.json') else f"{output_file}.json"
            vuln_results.to_json(json_file, orient='records', indent=2)
            print(f"Results saved to: {json_file}")
    else:
        print("\nTop 10 Results:")
        print(vuln_results.head(10).to_string(index=False))


def run_nmap_pipeline(nmap_file: str, output_file: str = None, output_format: str = "csv") -> None:
    """Run the complete Nmap analysis pipeline"""
    print(f"Starting Nmap analysis of: {nmap_file}")
    
    # Initialize analyzer
    analyzer = NmapAnalyzer()
    
    # Run analysis
    analysis_results = analyzer.analyze(nmap_file)
    
    if analysis_results is None or not analysis_results.get('analysis_complete', False):
        print("Analysis failed or returned no results")
        return
    
    # Extract the DataFrame from results
    results = analysis_results.get('extracted_data')
    
    if results is None or results.empty:
        print("No data extracted from Nmap file")
        return
    
    print(f"Extracted {len(results)} scan results")
    
    # Run vulnerability matching
    matcher = VulnerabilityMatcher()
    vuln_results = matcher.match_vulnerabilities(results, analysis_type="nmap")
    
    print(f"Found {len(vuln_results)} potential vulnerabilities")
    
    # Save results
    if output_file:
        if output_format.lower() in ["csv", "both"]:
            csv_file = output_file if output_file.endswith('.csv') else f"{output_file}.csv"
            vuln_results.to_csv(csv_file, index=False)
            print(f"Results saved to: {csv_file}")
        
        if output_format.lower() in ["json", "both"]:
            json_file = output_file if output_file.endswith('.json') else f"{output_file}.json"
            vuln_results.to_json(json_file, orient='records', indent=2)
            print(f"Results saved to: {json_file}")
    else:
        print("\nTop 10 Results:")
        print(vuln_results.head(10).to_string(index=False))


def main():
    """Entry point for the vulnerability-analyzer CLI command"""
    parser = argparse.ArgumentParser(
        description="Vulnerability Analyzer 2.0 - Network Security Analysis Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Quick PCAP analysis (display results on screen)
  vulnerability-analyzer --pcap examples/sample_data/vulnerable_traffic.pcap

  # Quick Nmap XML analysis (display results on screen)  
  vulnerability-analyzer --nmap examples/sample_data/nmap_example.xml

  # Analyze PCAP file and save as CSV
  vulnerability-analyzer --pcap examples/sample_data/vulnerable_traffic.pcap --output results

  # Analyze Nmap XML and output as JSON
  vulnerability-analyzer --nmap examples/sample_data/nmap_example.xml --output results --format json

  # Analyze and output in both CSV and JSON formats
  vulnerability-analyzer --pcap network.pcap --output analysis --format both

For more information, visit: https://github.com/yourusername/vulnerability-analyzer
        """
    )
    
    # Input options (mutually exclusive)
    input_group = parser.add_mutually_exclusive_group(required=True)
    input_group.add_argument("--pcap", help="PCAP file to analyze")
    input_group.add_argument("--nmap", help="Nmap XML file to analyze")
    
    # Output options
    parser.add_argument("--output", "-o", help="Output file prefix (without extension)")
    parser.add_argument("--format", "-f", choices=["csv", "json", "both"], 
                       default="csv", help="Output format (default: csv)")
    
    # Parse arguments
    args = parser.parse_args()
    
    # Validate input files exist
    if args.pcap and not os.path.exists(args.pcap):
        print(f"Error: PCAP file not found: {args.pcap}")
        sys.exit(1)
    
    if args.nmap and not os.path.exists(args.nmap):
        print(f"Error: Nmap file not found: {args.nmap}")
        sys.exit(1)
    
    # Run appropriate pipeline
    try:
        if args.pcap:
            run_pcap_pipeline(args.pcap, args.output, args.format)
        elif args.nmap:
            run_nmap_pipeline(args.nmap, args.output, args.format)
    
    except KeyboardInterrupt:
        print("\nAnalysis interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"Error during analysis: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
