#!/usr/bin/env python3
"""
PCAP Analyzer - Network traffic analysis with vulnerability detection
Uses same extraction methods as Analysis/Vulnerability tool
"""

import subprocess
import pandas as pd
import os
import re
from typing import Optional, List, Dict, Any
import json
from datetime import datetime
from pathlib import Path


class PcapAnalyzer:
    """
    Analyze PCAP files for vulnerability indicators and network patterns.
    Uses the same tshark field extraction as Analysis/Vulnerability tool.
    """
    
    def __init__(self):
        self.tshark_available = self._check_tshark()
        
    def _check_tshark(self) -> bool:
        """Check if tshark is available in system PATH."""
        try:
            subprocess.run(["tshark", "--version"], 
                         capture_output=True, check=True)
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            return False

    def export_pcap_to_csv(self, pcap_path: str, output_csv: str, display: bool = True) -> None:
        """
        Uses tshark to extract a rich set of fields from a PCAP file and writes them to a CSV file.
        Same extraction logic as Analysis/Vulnerability/core/pcap_extractor.py
        """
        # Construct the tshark command with required fields
        tshark_command = [
            "tshark", "-r", pcap_path, "-T", "fields",

            # Frame metadata
            "-e", "frame.time_epoch", "-e", "frame.number", "-e", "frame.len", "-e", "frame.protocols",

            # Ethernet / Wi-Fi addresses and properties
            "-e", "eth.src", "-e", "eth.dst",
            "-e", "wlan_radio.channel", "-e", "wlan.ssid", "-e", "wlan.bssid", 
            "-e", "wlan.sa", "-e", "wlan.da",

            # IP layer
            "-e", "ip.src", "-e", "ip.dst", "-e", "ip.proto", "-e", "ip.ttl",
            "-e", "ipv6.src", "-e", "ipv6.dst",

            # TCP/UDP layer
            "-e", "tcp.srcport", "-e", "tcp.dstport", "-e", "tcp.flags",
            "-e", "udp.srcport", "-e", "udp.dstport",

            # DNS layer - For vulnerability detection
            "-e", "dns.qry.name", "-e", "dns.resp.name", "-e", "dns.a",

            # HTTP layer - Comprehensive web vulnerability detection
            "-e", "http.request.method", "-e", "http.request.uri",
            "-e", "http.host", "-e", "http.user_agent", "-e", "http.server", 
            "-e", "http.response.code", "-e", "http.authorization", "-e", "http.cookie",
            "-e", "http.content_type", "-e", "http.file_data",

            # TLS/SSL layer - Security analysis
            "-e", "tls.handshake.extensions_server_name", "-e", "tls.record.version",

            # Vulnerability-prone protocols
            "-e", "ftp.request.command", "-e", "telnet.data",
            "-e", "smtp.req.command", "-e", "snmp.community", "-e", "snmp.version",

            # SMB/CIFS - Common attack vector
            "-e", "ssh.protocol", "-e", "smb.cmd", "-e", "smb2.cmd", "-e", "smb.path",
            "-e", "dhcp.option.hostname", "-e", "nbns.name",

            # ICMP - Network reconnaissance
            "-e", "icmp.type", "-e", "rpc.program", "-e", "ntp.stratum",

            # Display columns (summary protocol info)
            "-e", "_ws.col.protocol", "-e", "_ws.col.info", "-e", "_ws.col.def_src", "-e", "_ws.col.def_dst",

            # Output formatting
            "-E", "header=y", "-E", "separator=,", "-E", "quote=d"
        ]

        # Run tshark and write its output to CSV
        try:
            with open(output_csv, "w", encoding="utf-8") as f:
                subprocess.run(tshark_command, check=True, stdout=f, text=True)
            if display:
                print(f"Vulnerability-focused extraction complete: {output_csv}")
        except subprocess.CalledProcessError as e:
            if display:
                print(f"Tshark error: {e}")
        except Exception as e:
            if display:
                print(f"Unexpected error: {e}")

    def analyze(self, pcap_path: str, filter_type: str = "all") -> Dict[str, Any]:
        """
        Analyze PCAP file and extract vulnerability-relevant data.
        Returns standardized results for vulnerability matching.
        """
        if not self.tshark_available:
            raise RuntimeError("tshark is not available. Please install Wireshark/tshark.")
        
        if not os.path.exists(pcap_path):
            raise FileNotFoundError(f"PCAP file not found: {pcap_path}")
        
        # Create temporary CSV for extraction
        temp_csv = "temp_pcap_extracted.csv"
        
        # Extract PCAP data using same method as Analysis/Vulnerability
        self.export_pcap_to_csv(pcap_path, temp_csv, display=True)
        print(f"Filter applied: {filter_type}")
        
        # Read extracted data
        try:
            df = pd.read_csv(temp_csv).fillna("")
            
            # Clean up temp file
            if os.path.exists(temp_csv):
                os.remove(temp_csv)
            
            # Return analysis results in expected format
            return {
                'pcap_file': pcap_path,
                'timestamp': datetime.now().isoformat(),
                'total_packets': len(df),
                'extracted_data': df,
                'analysis_complete': True
            }
            
        except Exception as e:
            # Clean up temp file on error
            if os.path.exists(temp_csv):
                os.remove(temp_csv)
            raise e
