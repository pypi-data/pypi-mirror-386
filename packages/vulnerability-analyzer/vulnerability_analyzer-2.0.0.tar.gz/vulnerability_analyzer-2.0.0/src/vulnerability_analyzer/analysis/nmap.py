#!/usr/bin/env python3

"""
Nmap XML Analyzer - Service extraction and vulnerability analysis
Uses same extraction methods as Analysis/Vulnerability tool
"""

import xml.etree.ElementTree as ET
import pandas as pd
import re
import json
from typing import Dict, List, Optional, Any
from datetime import datetime
from pathlib import Path
import os


class NmapAnalyzer:
    """
    Analyze Nmap XML scan results for vulnerability indicators.
    Uses the same XML parsing logic as Analysis/Vulnerability tool.
    """
    
    def __init__(self):
        """Initialize the Nmap analyzer."""
        pass

    def export_nmap_xml_to_csv(self, xml_path: str, output_csv: str, display: bool = True) -> None:
        """
        Extracts key information from an Nmap XML file and writes it to a CSV file.
        Same extraction logic as Analysis/Vulnerability/core/xml_extractor.py
        """
        try:
            tree = ET.parse(xml_path)
            root = tree.getroot()

            extracted_data = []
            for host in root.findall("host"):
                # Extract host information
                ip_elem = host.find("address")
                ip_address = ip_elem.attrib.get("addr") if ip_elem is not None else None
                
                # Extract MAC address if available
                mac_address = ""
                for addr in host.findall("address"):
                    if addr.attrib.get("addrtype") == "mac":
                        mac_address = addr.attrib.get("addr", "")
                        break

                # Extract hostnames
                hostnames = []
                hostnames_elem = host.find("hostnames")
                if hostnames_elem is not None:
                    for hostname in hostnames_elem.findall("hostname"):
                        hostnames.append(hostname.attrib.get("name", ""))
                hostnames_str = ", ".join(hostnames) if hostnames else ""

                # Extract host state
                status = host.find("status")
                host_state = status.attrib.get("state") if status is not None else "unknown"

                # Extract OS information
                os_name = ""
                os_accuracy = ""
                os_elem = host.find("os")
                if os_elem is not None:
                    osmatch = os_elem.find("osmatch")
                    if osmatch is not None:
                        os_name = osmatch.attrib.get("name", "")
                        os_accuracy = osmatch.attrib.get("accuracy", "")

                # Extract port information
                ports = host.find("ports")
                if ports is not None:
                    for port in ports.findall("port"):
                        protocol = port.attrib.get("protocol")
                        port_id = port.attrib.get("portid")
                        
                        # Port state
                        state_elem = port.find("state")
                        state = state_elem.attrib.get("state") if state_elem is not None else None
                        reason = state_elem.attrib.get("reason") if state_elem is not None else None

                        # Service information
                        service = port.find("service")
                        service_name = service.attrib.get("name") if service is not None else ""
                        product = service.attrib.get("product") if service is not None else ""
                        version = service.attrib.get("version") if service is not None else ""
                        extrainfo = service.attrib.get("extrainfo") if service is not None else ""
                        ostype = service.attrib.get("ostype") if service is not None else ""
                        method = service.attrib.get("method") if service is not None else ""
                        conf = service.attrib.get("conf") if service is not None else ""

                        # CPE information
                        cpes = []
                        if service is not None:
                            for cpe in service.findall("cpe"):
                                if cpe.text:
                                    cpes.append(cpe.text)
                        cpes_str = ", ".join(cpes) if cpes else ""

                        # Script results for vulnerability analysis
                        script_count = 0
                        vuln_scripts = 0
                        has_critical_vuln = False
                        risk_level = "LOW"
                        script_results = {}

                        script_elements = port.findall("script")
                        script_count = len(script_elements)
                        
                        for script in script_elements:
                            script_id = script.attrib.get("id", "")
                            script_output = script.attrib.get("output", "")
                            script_results[script_id] = script_output
                            
                            # Check for vulnerability indicators
                            if any(keyword in script_output.lower() for keyword in 
                                   ['cve-', 'vulnerable', 'exploit', 'critical', 'high']):
                                vuln_scripts += 1
                                if any(keyword in script_output.lower() for keyword in 
                                       ['critical', 'exploit']):
                                    has_critical_vuln = True
                                    risk_level = "CRITICAL"
                                elif risk_level != "CRITICAL":
                                    risk_level = "MEDIUM"

                        extracted_data.append({
                            "ip_address": ip_address,
                            "mac_address": mac_address,
                            "hostnames": hostnames_str,
                            "host_state": host_state,
                            "os_name": os_name,
                            "os_accuracy": os_accuracy,
                            "protocol": protocol,
                            "port": port_id,
                            "state": state,
                            "reason": reason,
                            "service_name": service_name,
                            "product": product,
                            "version": version,
                            "extrainfo": extrainfo,
                            "ostype": ostype,
                            "method": method,
                            "conf": conf,
                            "cpes": cpes_str,
                            "script_count": script_count,
                            "vuln_scripts": vuln_scripts,
                            "has_critical_vuln": has_critical_vuln,
                            "risk_level": risk_level,
                            "script_results": json.dumps(script_results)
                        })

            df = pd.DataFrame(extracted_data)
            df.to_csv(output_csv, index=False)

            if display:
                print(f"XML extraction complete: {output_csv}")
                total_hosts = len(df['ip_address'].unique()) if not df.empty else 0
                hosts_up = len(df[df['host_state'] == 'up']['ip_address'].unique()) if not df.empty else 0
                total_ports = len(df) if not df.empty else 0
                open_ports = len(df[df['state'] == 'open']) if not df.empty else 0
                print(f"Hosts scanned: {total_hosts}, Hosts up: {hosts_up}")
                print(f"Total ports: {total_ports}, Open ports: {open_ports}")

        except Exception as e:
            if display:
                print(f"Error parsing XML: {e}")

    def analyze(self, xml_path: str) -> Dict[str, Any]:
        """
        Analyze Nmap XML file and extract service data.
        Returns standardized results for vulnerability matching.
        """
        if not os.path.exists(xml_path):
            raise FileNotFoundError(f"XML file not found: {xml_path}")
        
        # Create temporary CSV for extraction
        temp_csv = "temp_nmap_extracted.csv"
        
        # Extract Nmap data using same method as Analysis/Vulnerability
        self.export_nmap_xml_to_csv(xml_path, temp_csv, display=True)
        
        # Read extracted data
        try:
            df = pd.read_csv(temp_csv).fillna("")
            
            # Clean up temp file
            if os.path.exists(temp_csv):
                os.remove(temp_csv)
            
            # Calculate summary statistics
            total_hosts = len(df['ip_address'].unique()) if not df.empty else 0
            hosts_up = len(df[df['host_state'] == 'up']['ip_address'].unique()) if not df.empty else 0
            vuln_services = len(df[df['vuln_scripts'] > 0]) if not df.empty else 0
            critical_vulns = len(df[df['has_critical_vuln'] == True]) if not df.empty else 0
            
            # Return analysis results in expected format
            return {
                'xml_file': xml_path,
                'timestamp': datetime.now().isoformat(),
                'host_summary': {
                    'total_hosts': total_hosts,
                    'hosts_up': hosts_up,
                    'vulnerable_services': vuln_services,
                    'critical_vulns': critical_vulns
                },
                'extracted_data': df,
                'analysis_complete': True
            }
            
        except Exception as e:
            # Clean up temp file on error
            if os.path.exists(temp_csv):
                os.remove(temp_csv)
            raise e
