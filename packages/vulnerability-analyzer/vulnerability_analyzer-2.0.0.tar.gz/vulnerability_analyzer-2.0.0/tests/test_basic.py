"""Basic tests for vulnerability analyzer functionality"""

import unittest
import os
from pathlib import Path
import tempfile
import json
import pandas as pd

# Add src to path for testing
import sys
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

import vulnerability_analyzer


class TestVulnerabilityAnalyzer(unittest.TestCase):
    """Test basic functionality of vulnerability analyzer"""
    
    def setUp(self):
        """Set up test fixtures"""
        self.test_dir = Path(__file__).parent.parent
        self.sample_data_dir = self.test_dir / "examples" / "sample_data"
        
    def test_package_import(self):
        """Test that package imports correctly"""
        self.assertTrue(hasattr(vulnerability_analyzer, 'PcapAnalyzer'))
        self.assertTrue(hasattr(vulnerability_analyzer, 'NmapAnalyzer'))
        self.assertTrue(hasattr(vulnerability_analyzer, 'VulnerabilityMatcher'))
        self.assertTrue(hasattr(vulnerability_analyzer, '__version__'))
        
    def test_version_info(self):
        """Test version information"""
        self.assertEqual(vulnerability_analyzer.__version__, "2.0.0")
        
    def test_nmap_analyzer_init(self):
        """Test NmapAnalyzer initialization"""
        analyzer = vulnerability_analyzer.NmapAnalyzer()
        self.assertIsNotNone(analyzer)
        
    def test_pcap_analyzer_init(self):
        """Test PcapAnalyzer initialization"""
        analyzer = vulnerability_analyzer.PcapAnalyzer()
        self.assertIsNotNone(analyzer)
        
    def test_vulnerability_matcher_init(self):
        """Test VulnerabilityMatcher initialization"""
        matcher = vulnerability_analyzer.VulnerabilityMatcher()
        self.assertIsNotNone(matcher)
        
    def test_sample_files_exist(self):
        """Test that sample data files exist"""
        nmap_file = self.sample_data_dir / "nmap_example.xml"
        pcap_file = self.sample_data_dir / "vulnerable_traffic.pcap"
        
        self.assertTrue(nmap_file.exists(), f"Sample Nmap file not found: {nmap_file}")
        self.assertTrue(pcap_file.exists(), f"Sample PCAP file not found: {pcap_file}")
        
    def test_sample_output_files_exist(self):
        """Test that sample output files exist"""
        output_dir = self.sample_data_dir / "sample_output"
        
        expected_files = [
            "nmap_matches.csv",
            "nmap_matches.json", 
            "pcap_matches.csv",
            "pcap_matches.json",
            "README.md"
        ]
        
        for filename in expected_files:
            file_path = output_dir / filename
            self.assertTrue(file_path.exists(), f"Sample output file not found: {file_path}")
            
    def test_json_output_format(self):
        """Test that JSON output files have correct structure"""
        output_dir = self.sample_data_dir / "sample_output"
        
        # Test Nmap JSON output
        nmap_json = output_dir / "nmap_matches.json"
        with open(nmap_json, 'r') as f:
            nmap_data = json.load(f)
            
        self.assertIn('analysis_type', nmap_data)
        self.assertIn('total_matches', nmap_data)
        self.assertIn('matches', nmap_data)
        self.assertEqual(nmap_data['analysis_type'], 'nmap_vulnerability_matching')
        
        # Test PCAP JSON output
        pcap_json = output_dir / "pcap_matches.json"
        with open(pcap_json, 'r') as f:
            pcap_data = json.load(f)
            
        self.assertIn('analysis_type', pcap_data)
        self.assertIn('total_matches', pcap_data)
        self.assertIn('matches', pcap_data)
        self.assertEqual(pcap_data['analysis_type'], 'pcap_vulnerability_matching')


if __name__ == '__main__':
    unittest.main()
