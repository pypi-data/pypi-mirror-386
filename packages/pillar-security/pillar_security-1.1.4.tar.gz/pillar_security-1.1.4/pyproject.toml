[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "pillar-security"
version = "1.1.4"
description = "Official Python SDK for the Pillar Security"
authors = [
    {name = "eagle-p", email = "igal@pillar.security"}
]
license = {text = "Apache-2.0"}
requires-python = ">=3.9,<4.0"
keywords = ["security", "llm", "ai-security", "prompt-injection", "llm-security"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
dependencies = [
    "wrapt>=1.17.2",
    "requests>=2.32.3",
    "python-dotenv>=1.1.0",
    "openai>=1.76.0",
    "pydantic>=2.11.3",
    "httpx (>=0.28.1,<0.29.0)",
]

[project.urls]
"Homepage" = "https://pillar.security"
"Get A Demo" = "https://www.pillar.security/get-a-demo"
"Documentation" = "https://docs.pillar.security/sdk-reference/python-sdk/overview"

[tool.poetry]
packages = [{include = "pillar"}]
exclude = ["developers_docs/**", "README.md", "playground/**"]

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-cov = "^6.1.1"
black = "^25.1.0"
isort = "^6.0.1"
mypy = "^1.15.0"
ruff = "^0.11.6"
pre-commit = "^4.2.0"
langchain = "^0.3.24"
langchain-openai = "^0.3.14"
langgraph = "^0.3.34"
pytest-asyncio = "^0.26.0"
pytest-httpx = "^0.35.0"

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.ruff]
target-version = "py310"
line-length = 120
fix = true
exclude = ["playground/**"]

[tool.ruff.lint]
select = ["E", "F", "B", "N", "UP", "PL", "RUF"]
ignore = [
    # Add specific rules you want to ignore
    "PLR0913",  # Too many arguments in function definition
    "PLR2004",  # Magic value used in comparison
    "PLR0912",  # Too many branches (if-else)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["F401", "F811"]  # Allow pytest fixture imports that appear unused (F401) and fixture argument redefinitions (F811) in test functions

[tool.coverage.run]
branch = true
source = ["pillar"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
