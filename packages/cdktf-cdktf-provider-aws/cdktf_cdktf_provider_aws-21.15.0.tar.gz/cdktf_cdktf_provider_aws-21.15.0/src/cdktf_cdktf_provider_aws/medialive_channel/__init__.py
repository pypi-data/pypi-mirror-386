r'''
# `aws_medialive_channel`

Refer to the Terraform Registry for docs: [`aws_medialive_channel`](https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel).
'''
from pkgutil import extend_path
__path__ = extend_path(__path__, __name__)

import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

import typeguard
from importlib.metadata import version as _metadata_package_version
TYPEGUARD_MAJOR_VERSION = int(_metadata_package_version('typeguard').split('.')[0])

def check_type(argname: str, value: object, expected_type: typing.Any) -> typing.Any:
    if TYPEGUARD_MAJOR_VERSION <= 2:
        return typeguard.check_type(argname=argname, value=value, expected_type=expected_type) # type:ignore
    else:
        if isinstance(value, jsii._reference_map.InterfaceDynamicProxy): # pyright: ignore [reportAttributeAccessIssue]
           pass
        else:
            if TYPEGUARD_MAJOR_VERSION == 3:
                typeguard.config.collection_check_strategy = typeguard.CollectionCheckStrategy.ALL_ITEMS # type:ignore
                typeguard.check_type(value=value, expected_type=expected_type) # type:ignore
            else:
                typeguard.check_type(value=value, expected_type=expected_type, collection_check_strategy=typeguard.CollectionCheckStrategy.ALL_ITEMS) # type:ignore

from .._jsii import *

import cdktf as _cdktf_9a9027ec
import constructs as _constructs_77d1e7e8


class MedialiveChannel(
    _cdktf_9a9027ec.TerraformResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannel",
):
    '''Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel aws_medialive_channel}.'''

    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id_: builtins.str,
        *,
        channel_class: builtins.str,
        destinations: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinations", typing.Dict[builtins.str, typing.Any]]]],
        encoder_settings: typing.Union["MedialiveChannelEncoderSettings", typing.Dict[builtins.str, typing.Any]],
        input_attachments: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachments", typing.Dict[builtins.str, typing.Any]]]],
        input_specification: typing.Union["MedialiveChannelInputSpecification", typing.Dict[builtins.str, typing.Any]],
        name: builtins.str,
        cdi_input_specification: typing.Optional[typing.Union["MedialiveChannelCdiInputSpecification", typing.Dict[builtins.str, typing.Any]]] = None,
        id: typing.Optional[builtins.str] = None,
        log_level: typing.Optional[builtins.str] = None,
        maintenance: typing.Optional[typing.Union["MedialiveChannelMaintenance", typing.Dict[builtins.str, typing.Any]]] = None,
        region: typing.Optional[builtins.str] = None,
        role_arn: typing.Optional[builtins.str] = None,
        start_channel: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        tags_all: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        timeouts: typing.Optional[typing.Union["MedialiveChannelTimeouts", typing.Dict[builtins.str, typing.Any]]] = None,
        vpc: typing.Optional[typing.Union["MedialiveChannelVpc", typing.Dict[builtins.str, typing.Any]]] = None,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel aws_medialive_channel} Resource.

        :param scope: The scope in which to define this construct.
        :param id_: The scoped construct ID. Must be unique amongst siblings in the same scope
        :param channel_class: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channel_class MedialiveChannel#channel_class}.
        :param destinations: destinations block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destinations MedialiveChannel#destinations}
        :param encoder_settings: encoder_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#encoder_settings MedialiveChannel#encoder_settings}
        :param input_attachments: input_attachments block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_attachments MedialiveChannel#input_attachments}
        :param input_specification: input_specification block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_specification MedialiveChannel#input_specification}
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        :param cdi_input_specification: cdi_input_specification block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cdi_input_specification MedialiveChannel#cdi_input_specification}
        :param id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#id MedialiveChannel#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param log_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#log_level MedialiveChannel#log_level}.
        :param maintenance: maintenance block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance MedialiveChannel#maintenance}
        :param region: Region where this resource will be `managed <https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints>`_. Defaults to the Region set in the `provider configuration <https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference>`_. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#region MedialiveChannel#region}
        :param role_arn: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#role_arn MedialiveChannel#role_arn}.
        :param start_channel: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#start_channel MedialiveChannel#start_channel}.
        :param tags: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tags MedialiveChannel#tags}.
        :param tags_all: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tags_all MedialiveChannel#tags_all}.
        :param timeouts: timeouts block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timeouts MedialiveChannel#timeouts}
        :param vpc: vpc block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#vpc MedialiveChannel#vpc}
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04f3c7f6cd0e910f5f02bd6517f4aae85191d7c625f469954fc74c3d44dc71fe)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id_", value=id_, expected_type=type_hints["id_"])
        config = MedialiveChannelConfig(
            channel_class=channel_class,
            destinations=destinations,
            encoder_settings=encoder_settings,
            input_attachments=input_attachments,
            input_specification=input_specification,
            name=name,
            cdi_input_specification=cdi_input_specification,
            id=id,
            log_level=log_level,
            maintenance=maintenance,
            region=region,
            role_arn=role_arn,
            start_channel=start_channel,
            tags=tags,
            tags_all=tags_all,
            timeouts=timeouts,
            vpc=vpc,
            connection=connection,
            count=count,
            depends_on=depends_on,
            for_each=for_each,
            lifecycle=lifecycle,
            provider=provider,
            provisioners=provisioners,
        )

        jsii.create(self.__class__, self, [scope, id_, config])

    @jsii.member(jsii_name="generateConfigForImport")
    @builtins.classmethod
    def generate_config_for_import(
        cls,
        scope: _constructs_77d1e7e8.Construct,
        import_to_id: builtins.str,
        import_from_id: builtins.str,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    ) -> _cdktf_9a9027ec.ImportableResource:
        '''Generates CDKTF code for importing a MedialiveChannel resource upon running "cdktf plan ".

        :param scope: The scope in which to define this construct.
        :param import_to_id: The construct id used in the generated config for the MedialiveChannel to import.
        :param import_from_id: The id of the existing MedialiveChannel that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#import import section} in the documentation of this resource for the id to use
        :param provider: ? Optional instance of the provider where the MedialiveChannel to import is found.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__abd1591e8fb4ea0d2c32742e9eceb1055f98262b249ea40a0cca1c9399569204)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument import_to_id", value=import_to_id, expected_type=type_hints["import_to_id"])
            check_type(argname="argument import_from_id", value=import_from_id, expected_type=type_hints["import_from_id"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
        return typing.cast(_cdktf_9a9027ec.ImportableResource, jsii.sinvoke(cls, "generateConfigForImport", [scope, import_to_id, import_from_id, provider]))

    @jsii.member(jsii_name="putCdiInputSpecification")
    def put_cdi_input_specification(self, *, resolution: builtins.str) -> None:
        '''
        :param resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#resolution MedialiveChannel#resolution}.
        '''
        value = MedialiveChannelCdiInputSpecification(resolution=resolution)

        return typing.cast(None, jsii.invoke(self, "putCdiInputSpecification", [value]))

    @jsii.member(jsii_name="putDestinations")
    def put_destinations(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinations", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__10f7138e41e59c6e2428523a5d263b8fa31328f1c110865edb952515a85a356b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putDestinations", [value]))

    @jsii.member(jsii_name="putEncoderSettings")
    def put_encoder_settings(
        self,
        *,
        output_groups: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroups", typing.Dict[builtins.str, typing.Any]]]],
        timecode_config: typing.Union["MedialiveChannelEncoderSettingsTimecodeConfig", typing.Dict[builtins.str, typing.Any]],
        audio_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        avail_blanking: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAvailBlanking", typing.Dict[builtins.str, typing.Any]]] = None,
        caption_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        global_configuration: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsGlobalConfiguration", typing.Dict[builtins.str, typing.Any]]] = None,
        motion_graphics_configuration: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsMotionGraphicsConfiguration", typing.Dict[builtins.str, typing.Any]]] = None,
        nielsen_configuration: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsNielsenConfiguration", typing.Dict[builtins.str, typing.Any]]] = None,
        video_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptions", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param output_groups: output_groups block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_groups MedialiveChannel#output_groups}
        :param timecode_config: timecode_config block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_config MedialiveChannel#timecode_config}
        :param audio_descriptions: audio_descriptions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_descriptions MedialiveChannel#audio_descriptions}
        :param avail_blanking: avail_blanking block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#avail_blanking MedialiveChannel#avail_blanking}
        :param caption_descriptions: caption_descriptions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_descriptions MedialiveChannel#caption_descriptions}
        :param global_configuration: global_configuration block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#global_configuration MedialiveChannel#global_configuration}
        :param motion_graphics_configuration: motion_graphics_configuration block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_configuration MedialiveChannel#motion_graphics_configuration}
        :param nielsen_configuration: nielsen_configuration block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_configuration MedialiveChannel#nielsen_configuration}
        :param video_descriptions: video_descriptions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_descriptions MedialiveChannel#video_descriptions}
        '''
        value = MedialiveChannelEncoderSettings(
            output_groups=output_groups,
            timecode_config=timecode_config,
            audio_descriptions=audio_descriptions,
            avail_blanking=avail_blanking,
            caption_descriptions=caption_descriptions,
            global_configuration=global_configuration,
            motion_graphics_configuration=motion_graphics_configuration,
            nielsen_configuration=nielsen_configuration,
            video_descriptions=video_descriptions,
        )

        return typing.cast(None, jsii.invoke(self, "putEncoderSettings", [value]))

    @jsii.member(jsii_name="putInputAttachments")
    def put_input_attachments(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachments", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__950c57d254fc00b40f52bbb27f1bf33458633a7bb07d721569b0318a88bdc499)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInputAttachments", [value]))

    @jsii.member(jsii_name="putInputSpecification")
    def put_input_specification(
        self,
        *,
        codec: builtins.str,
        input_resolution: builtins.str,
        maximum_bitrate: builtins.str,
    ) -> None:
        '''
        :param codec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec MedialiveChannel#codec}.
        :param input_resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_resolution MedialiveChannel#input_resolution}.
        :param maximum_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maximum_bitrate MedialiveChannel#maximum_bitrate}.
        '''
        value = MedialiveChannelInputSpecification(
            codec=codec,
            input_resolution=input_resolution,
            maximum_bitrate=maximum_bitrate,
        )

        return typing.cast(None, jsii.invoke(self, "putInputSpecification", [value]))

    @jsii.member(jsii_name="putMaintenance")
    def put_maintenance(
        self,
        *,
        maintenance_day: builtins.str,
        maintenance_start_time: builtins.str,
    ) -> None:
        '''
        :param maintenance_day: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance_day MedialiveChannel#maintenance_day}.
        :param maintenance_start_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance_start_time MedialiveChannel#maintenance_start_time}.
        '''
        value = MedialiveChannelMaintenance(
            maintenance_day=maintenance_day,
            maintenance_start_time=maintenance_start_time,
        )

        return typing.cast(None, jsii.invoke(self, "putMaintenance", [value]))

    @jsii.member(jsii_name="putTimeouts")
    def put_timeouts(
        self,
        *,
        create: typing.Optional[builtins.str] = None,
        delete: typing.Optional[builtins.str] = None,
        update: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param create: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#create MedialiveChannel#create}.
        :param delete: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#delete MedialiveChannel#delete}.
        :param update: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#update MedialiveChannel#update}.
        '''
        value = MedialiveChannelTimeouts(create=create, delete=delete, update=update)

        return typing.cast(None, jsii.invoke(self, "putTimeouts", [value]))

    @jsii.member(jsii_name="putVpc")
    def put_vpc(
        self,
        *,
        public_address_allocation_ids: typing.Sequence[builtins.str],
        subnet_ids: typing.Sequence[builtins.str],
        security_group_ids: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param public_address_allocation_ids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#public_address_allocation_ids MedialiveChannel#public_address_allocation_ids}.
        :param subnet_ids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#subnet_ids MedialiveChannel#subnet_ids}.
        :param security_group_ids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#security_group_ids MedialiveChannel#security_group_ids}.
        '''
        value = MedialiveChannelVpc(
            public_address_allocation_ids=public_address_allocation_ids,
            subnet_ids=subnet_ids,
            security_group_ids=security_group_ids,
        )

        return typing.cast(None, jsii.invoke(self, "putVpc", [value]))

    @jsii.member(jsii_name="resetCdiInputSpecification")
    def reset_cdi_input_specification(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCdiInputSpecification", []))

    @jsii.member(jsii_name="resetId")
    def reset_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetId", []))

    @jsii.member(jsii_name="resetLogLevel")
    def reset_log_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLogLevel", []))

    @jsii.member(jsii_name="resetMaintenance")
    def reset_maintenance(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaintenance", []))

    @jsii.member(jsii_name="resetRegion")
    def reset_region(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRegion", []))

    @jsii.member(jsii_name="resetRoleArn")
    def reset_role_arn(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRoleArn", []))

    @jsii.member(jsii_name="resetStartChannel")
    def reset_start_channel(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStartChannel", []))

    @jsii.member(jsii_name="resetTags")
    def reset_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTags", []))

    @jsii.member(jsii_name="resetTagsAll")
    def reset_tags_all(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTagsAll", []))

    @jsii.member(jsii_name="resetTimeouts")
    def reset_timeouts(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimeouts", []))

    @jsii.member(jsii_name="resetVpc")
    def reset_vpc(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVpc", []))

    @jsii.member(jsii_name="synthesizeAttributes")
    def _synthesize_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeAttributes", []))

    @jsii.member(jsii_name="synthesizeHclAttributes")
    def _synthesize_hcl_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeHclAttributes", []))

    @jsii.python.classproperty
    @jsii.member(jsii_name="tfResourceType")
    def TF_RESOURCE_TYPE(cls) -> builtins.str:
        return typing.cast(builtins.str, jsii.sget(cls, "tfResourceType"))

    @builtins.property
    @jsii.member(jsii_name="arn")
    def arn(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "arn"))

    @builtins.property
    @jsii.member(jsii_name="cdiInputSpecification")
    def cdi_input_specification(
        self,
    ) -> "MedialiveChannelCdiInputSpecificationOutputReference":
        return typing.cast("MedialiveChannelCdiInputSpecificationOutputReference", jsii.get(self, "cdiInputSpecification"))

    @builtins.property
    @jsii.member(jsii_name="channelId")
    def channel_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "channelId"))

    @builtins.property
    @jsii.member(jsii_name="destinations")
    def destinations(self) -> "MedialiveChannelDestinationsList":
        return typing.cast("MedialiveChannelDestinationsList", jsii.get(self, "destinations"))

    @builtins.property
    @jsii.member(jsii_name="encoderSettings")
    def encoder_settings(self) -> "MedialiveChannelEncoderSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputReference", jsii.get(self, "encoderSettings"))

    @builtins.property
    @jsii.member(jsii_name="inputAttachments")
    def input_attachments(self) -> "MedialiveChannelInputAttachmentsList":
        return typing.cast("MedialiveChannelInputAttachmentsList", jsii.get(self, "inputAttachments"))

    @builtins.property
    @jsii.member(jsii_name="inputSpecification")
    def input_specification(
        self,
    ) -> "MedialiveChannelInputSpecificationOutputReference":
        return typing.cast("MedialiveChannelInputSpecificationOutputReference", jsii.get(self, "inputSpecification"))

    @builtins.property
    @jsii.member(jsii_name="maintenance")
    def maintenance(self) -> "MedialiveChannelMaintenanceOutputReference":
        return typing.cast("MedialiveChannelMaintenanceOutputReference", jsii.get(self, "maintenance"))

    @builtins.property
    @jsii.member(jsii_name="timeouts")
    def timeouts(self) -> "MedialiveChannelTimeoutsOutputReference":
        return typing.cast("MedialiveChannelTimeoutsOutputReference", jsii.get(self, "timeouts"))

    @builtins.property
    @jsii.member(jsii_name="vpc")
    def vpc(self) -> "MedialiveChannelVpcOutputReference":
        return typing.cast("MedialiveChannelVpcOutputReference", jsii.get(self, "vpc"))

    @builtins.property
    @jsii.member(jsii_name="cdiInputSpecificationInput")
    def cdi_input_specification_input(
        self,
    ) -> typing.Optional["MedialiveChannelCdiInputSpecification"]:
        return typing.cast(typing.Optional["MedialiveChannelCdiInputSpecification"], jsii.get(self, "cdiInputSpecificationInput"))

    @builtins.property
    @jsii.member(jsii_name="channelClassInput")
    def channel_class_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "channelClassInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationsInput")
    def destinations_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinations"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinations"]]], jsii.get(self, "destinationsInput"))

    @builtins.property
    @jsii.member(jsii_name="encoderSettingsInput")
    def encoder_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettings"], jsii.get(self, "encoderSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="inputAttachmentsInput")
    def input_attachments_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachments"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachments"]]], jsii.get(self, "inputAttachmentsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputSpecificationInput")
    def input_specification_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputSpecification"]:
        return typing.cast(typing.Optional["MedialiveChannelInputSpecification"], jsii.get(self, "inputSpecificationInput"))

    @builtins.property
    @jsii.member(jsii_name="logLevelInput")
    def log_level_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "logLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="maintenanceInput")
    def maintenance_input(self) -> typing.Optional["MedialiveChannelMaintenance"]:
        return typing.cast(typing.Optional["MedialiveChannelMaintenance"], jsii.get(self, "maintenanceInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="regionInput")
    def region_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "regionInput"))

    @builtins.property
    @jsii.member(jsii_name="roleArnInput")
    def role_arn_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "roleArnInput"))

    @builtins.property
    @jsii.member(jsii_name="startChannelInput")
    def start_channel_input(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], jsii.get(self, "startChannelInput"))

    @builtins.property
    @jsii.member(jsii_name="tagsAllInput")
    def tags_all_input(
        self,
    ) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "tagsAllInput"))

    @builtins.property
    @jsii.member(jsii_name="tagsInput")
    def tags_input(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "tagsInput"))

    @builtins.property
    @jsii.member(jsii_name="timeoutsInput")
    def timeouts_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "MedialiveChannelTimeouts"]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, "MedialiveChannelTimeouts"]], jsii.get(self, "timeoutsInput"))

    @builtins.property
    @jsii.member(jsii_name="vpcInput")
    def vpc_input(self) -> typing.Optional["MedialiveChannelVpc"]:
        return typing.cast(typing.Optional["MedialiveChannelVpc"], jsii.get(self, "vpcInput"))

    @builtins.property
    @jsii.member(jsii_name="channelClass")
    def channel_class(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "channelClass"))

    @channel_class.setter
    def channel_class(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13b55029f5abb5b1e9f6c0ba9aabcca5d42c740989662a99bc53a9ad60bdf1ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "channelClass", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d41f970f7587317392b42ee8ee98e023618276abfec1deff8b35a328cf4beb91)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="logLevel")
    def log_level(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "logLevel"))

    @log_level.setter
    def log_level(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db1f688ea0d7dbc13b2d754c2e9a90fe074f9f26edf845a10e3c964291d5bf8a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "logLevel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__888401aa86fc299f60751601602551a40f9b90be4ae97283362455f390a6e8a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="region")
    def region(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "region"))

    @region.setter
    def region(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9ef9bc6747a719d2c617e8162aae127867f14d3156d25b75bfafdd8cc799365)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "region", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="roleArn")
    def role_arn(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "roleArn"))

    @role_arn.setter
    def role_arn(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fe3feff26fe3795e24994aeff8c17a985557e8c365866724420d40bc3dcc8a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "roleArn", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="startChannel")
    def start_channel(self) -> typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]:
        return typing.cast(typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable], jsii.get(self, "startChannel"))

    @start_channel.setter
    def start_channel(
        self,
        value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d906e75acabeba64d26bf363910ceecd620b5c5a65d51734d63c3bdcfc625efb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "startChannel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tags")
    def tags(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "tags"))

    @tags.setter
    def tags(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae0fcf3ed65969dda6679a1992af0cb2763670846ae4d9401e2bf45038007277)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tags", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tagsAll")
    def tags_all(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "tagsAll"))

    @tags_all.setter
    def tags_all(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94064523e676f0c0f79a80d6a7a7d337861ca6bc49a2d99d3b8cfa4ed6e9ec81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tagsAll", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelCdiInputSpecification",
    jsii_struct_bases=[],
    name_mapping={"resolution": "resolution"},
)
class MedialiveChannelCdiInputSpecification:
    def __init__(self, *, resolution: builtins.str) -> None:
        '''
        :param resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#resolution MedialiveChannel#resolution}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bdf74d495e436623c71e6dd1e1efd39ce7c8fd638f6dfc021d8d31479db0a18)
            check_type(argname="argument resolution", value=resolution, expected_type=type_hints["resolution"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "resolution": resolution,
        }

    @builtins.property
    def resolution(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#resolution MedialiveChannel#resolution}.'''
        result = self._values.get("resolution")
        assert result is not None, "Required property 'resolution' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelCdiInputSpecification(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelCdiInputSpecificationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelCdiInputSpecificationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c99319cba552a4ad7d8ed0a630bf741557bc605dc8344c54f38f5c3c53cdff44)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="resolutionInput")
    def resolution_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "resolutionInput"))

    @builtins.property
    @jsii.member(jsii_name="resolution")
    def resolution(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "resolution"))

    @resolution.setter
    def resolution(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98474376a45a16d01fcafa145372edb1d7843544df9177d212766638ddae6971)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "resolution", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelCdiInputSpecification]:
        return typing.cast(typing.Optional[MedialiveChannelCdiInputSpecification], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelCdiInputSpecification],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__025424eeb682df14905f94e38fd28402eb38a1dcca5843dc52f5c3d0d1308bf6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelConfig",
    jsii_struct_bases=[_cdktf_9a9027ec.TerraformMetaArguments],
    name_mapping={
        "connection": "connection",
        "count": "count",
        "depends_on": "dependsOn",
        "for_each": "forEach",
        "lifecycle": "lifecycle",
        "provider": "provider",
        "provisioners": "provisioners",
        "channel_class": "channelClass",
        "destinations": "destinations",
        "encoder_settings": "encoderSettings",
        "input_attachments": "inputAttachments",
        "input_specification": "inputSpecification",
        "name": "name",
        "cdi_input_specification": "cdiInputSpecification",
        "id": "id",
        "log_level": "logLevel",
        "maintenance": "maintenance",
        "region": "region",
        "role_arn": "roleArn",
        "start_channel": "startChannel",
        "tags": "tags",
        "tags_all": "tagsAll",
        "timeouts": "timeouts",
        "vpc": "vpc",
    },
)
class MedialiveChannelConfig(_cdktf_9a9027ec.TerraformMetaArguments):
    def __init__(
        self,
        *,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
        channel_class: builtins.str,
        destinations: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinations", typing.Dict[builtins.str, typing.Any]]]],
        encoder_settings: typing.Union["MedialiveChannelEncoderSettings", typing.Dict[builtins.str, typing.Any]],
        input_attachments: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachments", typing.Dict[builtins.str, typing.Any]]]],
        input_specification: typing.Union["MedialiveChannelInputSpecification", typing.Dict[builtins.str, typing.Any]],
        name: builtins.str,
        cdi_input_specification: typing.Optional[typing.Union[MedialiveChannelCdiInputSpecification, typing.Dict[builtins.str, typing.Any]]] = None,
        id: typing.Optional[builtins.str] = None,
        log_level: typing.Optional[builtins.str] = None,
        maintenance: typing.Optional[typing.Union["MedialiveChannelMaintenance", typing.Dict[builtins.str, typing.Any]]] = None,
        region: typing.Optional[builtins.str] = None,
        role_arn: typing.Optional[builtins.str] = None,
        start_channel: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
        tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        tags_all: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        timeouts: typing.Optional[typing.Union["MedialiveChannelTimeouts", typing.Dict[builtins.str, typing.Any]]] = None,
        vpc: typing.Optional[typing.Union["MedialiveChannelVpc", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        :param channel_class: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channel_class MedialiveChannel#channel_class}.
        :param destinations: destinations block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destinations MedialiveChannel#destinations}
        :param encoder_settings: encoder_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#encoder_settings MedialiveChannel#encoder_settings}
        :param input_attachments: input_attachments block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_attachments MedialiveChannel#input_attachments}
        :param input_specification: input_specification block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_specification MedialiveChannel#input_specification}
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        :param cdi_input_specification: cdi_input_specification block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cdi_input_specification MedialiveChannel#cdi_input_specification}
        :param id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#id MedialiveChannel#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param log_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#log_level MedialiveChannel#log_level}.
        :param maintenance: maintenance block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance MedialiveChannel#maintenance}
        :param region: Region where this resource will be `managed <https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints>`_. Defaults to the Region set in the `provider configuration <https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference>`_. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#region MedialiveChannel#region}
        :param role_arn: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#role_arn MedialiveChannel#role_arn}.
        :param start_channel: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#start_channel MedialiveChannel#start_channel}.
        :param tags: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tags MedialiveChannel#tags}.
        :param tags_all: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tags_all MedialiveChannel#tags_all}.
        :param timeouts: timeouts block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timeouts MedialiveChannel#timeouts}
        :param vpc: vpc block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#vpc MedialiveChannel#vpc}
        '''
        if isinstance(lifecycle, dict):
            lifecycle = _cdktf_9a9027ec.TerraformResourceLifecycle(**lifecycle)
        if isinstance(encoder_settings, dict):
            encoder_settings = MedialiveChannelEncoderSettings(**encoder_settings)
        if isinstance(input_specification, dict):
            input_specification = MedialiveChannelInputSpecification(**input_specification)
        if isinstance(cdi_input_specification, dict):
            cdi_input_specification = MedialiveChannelCdiInputSpecification(**cdi_input_specification)
        if isinstance(maintenance, dict):
            maintenance = MedialiveChannelMaintenance(**maintenance)
        if isinstance(timeouts, dict):
            timeouts = MedialiveChannelTimeouts(**timeouts)
        if isinstance(vpc, dict):
            vpc = MedialiveChannelVpc(**vpc)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e5fb6e76fec0078544ab6843d7d60cb5b5cb528b1f827743a1820607262b6a7)
            check_type(argname="argument connection", value=connection, expected_type=type_hints["connection"])
            check_type(argname="argument count", value=count, expected_type=type_hints["count"])
            check_type(argname="argument depends_on", value=depends_on, expected_type=type_hints["depends_on"])
            check_type(argname="argument for_each", value=for_each, expected_type=type_hints["for_each"])
            check_type(argname="argument lifecycle", value=lifecycle, expected_type=type_hints["lifecycle"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
            check_type(argname="argument provisioners", value=provisioners, expected_type=type_hints["provisioners"])
            check_type(argname="argument channel_class", value=channel_class, expected_type=type_hints["channel_class"])
            check_type(argname="argument destinations", value=destinations, expected_type=type_hints["destinations"])
            check_type(argname="argument encoder_settings", value=encoder_settings, expected_type=type_hints["encoder_settings"])
            check_type(argname="argument input_attachments", value=input_attachments, expected_type=type_hints["input_attachments"])
            check_type(argname="argument input_specification", value=input_specification, expected_type=type_hints["input_specification"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument cdi_input_specification", value=cdi_input_specification, expected_type=type_hints["cdi_input_specification"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument log_level", value=log_level, expected_type=type_hints["log_level"])
            check_type(argname="argument maintenance", value=maintenance, expected_type=type_hints["maintenance"])
            check_type(argname="argument region", value=region, expected_type=type_hints["region"])
            check_type(argname="argument role_arn", value=role_arn, expected_type=type_hints["role_arn"])
            check_type(argname="argument start_channel", value=start_channel, expected_type=type_hints["start_channel"])
            check_type(argname="argument tags", value=tags, expected_type=type_hints["tags"])
            check_type(argname="argument tags_all", value=tags_all, expected_type=type_hints["tags_all"])
            check_type(argname="argument timeouts", value=timeouts, expected_type=type_hints["timeouts"])
            check_type(argname="argument vpc", value=vpc, expected_type=type_hints["vpc"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "channel_class": channel_class,
            "destinations": destinations,
            "encoder_settings": encoder_settings,
            "input_attachments": input_attachments,
            "input_specification": input_specification,
            "name": name,
        }
        if connection is not None:
            self._values["connection"] = connection
        if count is not None:
            self._values["count"] = count
        if depends_on is not None:
            self._values["depends_on"] = depends_on
        if for_each is not None:
            self._values["for_each"] = for_each
        if lifecycle is not None:
            self._values["lifecycle"] = lifecycle
        if provider is not None:
            self._values["provider"] = provider
        if provisioners is not None:
            self._values["provisioners"] = provisioners
        if cdi_input_specification is not None:
            self._values["cdi_input_specification"] = cdi_input_specification
        if id is not None:
            self._values["id"] = id
        if log_level is not None:
            self._values["log_level"] = log_level
        if maintenance is not None:
            self._values["maintenance"] = maintenance
        if region is not None:
            self._values["region"] = region
        if role_arn is not None:
            self._values["role_arn"] = role_arn
        if start_channel is not None:
            self._values["start_channel"] = start_channel
        if tags is not None:
            self._values["tags"] = tags
        if tags_all is not None:
            self._values["tags_all"] = tags_all
        if timeouts is not None:
            self._values["timeouts"] = timeouts
        if vpc is not None:
            self._values["vpc"] = vpc

    @builtins.property
    def connection(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("connection")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]], result)

    @builtins.property
    def count(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("count")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]], result)

    @builtins.property
    def depends_on(
        self,
    ) -> typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("depends_on")
        return typing.cast(typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]], result)

    @builtins.property
    def for_each(self) -> typing.Optional[_cdktf_9a9027ec.ITerraformIterator]:
        '''
        :stability: experimental
        '''
        result = self._values.get("for_each")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.ITerraformIterator], result)

    @builtins.property
    def lifecycle(self) -> typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle]:
        '''
        :stability: experimental
        '''
        result = self._values.get("lifecycle")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle], result)

    @builtins.property
    def provider(self) -> typing.Optional[_cdktf_9a9027ec.TerraformProvider]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provider")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformProvider], result)

    @builtins.property
    def provisioners(
        self,
    ) -> typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provisioners")
        return typing.cast(typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]], result)

    @builtins.property
    def channel_class(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channel_class MedialiveChannel#channel_class}.'''
        result = self._values.get("channel_class")
        assert result is not None, "Required property 'channel_class' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def destinations(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinations"]]:
        '''destinations block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destinations MedialiveChannel#destinations}
        '''
        result = self._values.get("destinations")
        assert result is not None, "Required property 'destinations' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinations"]], result)

    @builtins.property
    def encoder_settings(self) -> "MedialiveChannelEncoderSettings":
        '''encoder_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#encoder_settings MedialiveChannel#encoder_settings}
        '''
        result = self._values.get("encoder_settings")
        assert result is not None, "Required property 'encoder_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettings", result)

    @builtins.property
    def input_attachments(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachments"]]:
        '''input_attachments block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_attachments MedialiveChannel#input_attachments}
        '''
        result = self._values.get("input_attachments")
        assert result is not None, "Required property 'input_attachments' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachments"]], result)

    @builtins.property
    def input_specification(self) -> "MedialiveChannelInputSpecification":
        '''input_specification block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_specification MedialiveChannel#input_specification}
        '''
        result = self._values.get("input_specification")
        assert result is not None, "Required property 'input_specification' is missing"
        return typing.cast("MedialiveChannelInputSpecification", result)

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def cdi_input_specification(
        self,
    ) -> typing.Optional[MedialiveChannelCdiInputSpecification]:
        '''cdi_input_specification block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cdi_input_specification MedialiveChannel#cdi_input_specification}
        '''
        result = self._values.get("cdi_input_specification")
        return typing.cast(typing.Optional[MedialiveChannelCdiInputSpecification], result)

    @builtins.property
    def id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#id MedialiveChannel#id}.

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def log_level(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#log_level MedialiveChannel#log_level}.'''
        result = self._values.get("log_level")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def maintenance(self) -> typing.Optional["MedialiveChannelMaintenance"]:
        '''maintenance block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance MedialiveChannel#maintenance}
        '''
        result = self._values.get("maintenance")
        return typing.cast(typing.Optional["MedialiveChannelMaintenance"], result)

    @builtins.property
    def region(self) -> typing.Optional[builtins.str]:
        '''Region where this resource will be `managed <https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints>`_. Defaults to the Region set in the `provider configuration <https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference>`_.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#region MedialiveChannel#region}
        '''
        result = self._values.get("region")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def role_arn(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#role_arn MedialiveChannel#role_arn}.'''
        result = self._values.get("role_arn")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def start_channel(
        self,
    ) -> typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#start_channel MedialiveChannel#start_channel}.'''
        result = self._values.get("start_channel")
        return typing.cast(typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]], result)

    @builtins.property
    def tags(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tags MedialiveChannel#tags}.'''
        result = self._values.get("tags")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def tags_all(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tags_all MedialiveChannel#tags_all}.'''
        result = self._values.get("tags_all")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    @builtins.property
    def timeouts(self) -> typing.Optional["MedialiveChannelTimeouts"]:
        '''timeouts block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timeouts MedialiveChannel#timeouts}
        '''
        result = self._values.get("timeouts")
        return typing.cast(typing.Optional["MedialiveChannelTimeouts"], result)

    @builtins.property
    def vpc(self) -> typing.Optional["MedialiveChannelVpc"]:
        '''vpc block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#vpc MedialiveChannel#vpc}
        '''
        result = self._values.get("vpc")
        return typing.cast(typing.Optional["MedialiveChannelVpc"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinations",
    jsii_struct_bases=[],
    name_mapping={
        "id": "id",
        "media_package_settings": "mediaPackageSettings",
        "multiplex_settings": "multiplexSettings",
        "settings": "settings",
    },
)
class MedialiveChannelDestinations:
    def __init__(
        self,
        *,
        id: builtins.str,
        media_package_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinationsMediaPackageSettings", typing.Dict[builtins.str, typing.Any]]]]] = None,
        multiplex_settings: typing.Optional[typing.Union["MedialiveChannelDestinationsMultiplexSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinationsSettings", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#id MedialiveChannel#id}. Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2. If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        :param media_package_settings: media_package_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_package_settings MedialiveChannel#media_package_settings}
        :param multiplex_settings: multiplex_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_settings MedialiveChannel#multiplex_settings}
        :param settings: settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#settings MedialiveChannel#settings}
        '''
        if isinstance(multiplex_settings, dict):
            multiplex_settings = MedialiveChannelDestinationsMultiplexSettings(**multiplex_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2cf82edb425410acaa870a03f0867b3cfd81185bdbef10cdd5d5f49f1f648e9)
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
            check_type(argname="argument media_package_settings", value=media_package_settings, expected_type=type_hints["media_package_settings"])
            check_type(argname="argument multiplex_settings", value=multiplex_settings, expected_type=type_hints["multiplex_settings"])
            check_type(argname="argument settings", value=settings, expected_type=type_hints["settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "id": id,
        }
        if media_package_settings is not None:
            self._values["media_package_settings"] = media_package_settings
        if multiplex_settings is not None:
            self._values["multiplex_settings"] = multiplex_settings
        if settings is not None:
            self._values["settings"] = settings

    @builtins.property
    def id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#id MedialiveChannel#id}.

        Please be aware that the id field is automatically added to all resources in Terraform providers using a Terraform provider SDK version below 2.
        If you experience problems setting this value it might not be settable. Please take a look at the provider documentation to ensure it should be settable.
        '''
        result = self._values.get("id")
        assert result is not None, "Required property 'id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def media_package_settings(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinationsMediaPackageSettings"]]]:
        '''media_package_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_package_settings MedialiveChannel#media_package_settings}
        '''
        result = self._values.get("media_package_settings")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinationsMediaPackageSettings"]]], result)

    @builtins.property
    def multiplex_settings(
        self,
    ) -> typing.Optional["MedialiveChannelDestinationsMultiplexSettings"]:
        '''multiplex_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_settings MedialiveChannel#multiplex_settings}
        '''
        result = self._values.get("multiplex_settings")
        return typing.cast(typing.Optional["MedialiveChannelDestinationsMultiplexSettings"], result)

    @builtins.property
    def settings(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinationsSettings"]]]:
        '''settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#settings MedialiveChannel#settings}
        '''
        result = self._values.get("settings")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinationsSettings"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelDestinations(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelDestinationsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f30339bbf3e31e39073b80b03b6494647610f3e52c6372eeb0fd961cf7fcfd4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(self, index: jsii.Number) -> "MedialiveChannelDestinationsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9bd4e087ef5aee8cc9acd06fd82c195c684d44b3829c2331afc61c03b5940491)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelDestinationsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb9ed7a937cd5ffecb7e54fa787744472cd5226bc353bc5bbbec4c7e4992f4ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d199b3ff82e23adc812ad80d2a64f9f3d40841210b0f03cf1b3f5de04af847fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5ba4fed272b32475e7e736966f0b78064b588e69c6dfc15041b7dcede20c6e9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinations]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinations]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinations]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e05f75eb035272db9c6cb3d5858f6486f1505b67cba14dbdf46882e637a2cd7b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettings",
    jsii_struct_bases=[],
    name_mapping={"channel_id": "channelId"},
)
class MedialiveChannelDestinationsMediaPackageSettings:
    def __init__(self, *, channel_id: builtins.str) -> None:
        '''
        :param channel_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channel_id MedialiveChannel#channel_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3aa8d21024095a71eecc6e55784e01d2ee553f6214dda31982efe27d01d99862)
            check_type(argname="argument channel_id", value=channel_id, expected_type=type_hints["channel_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "channel_id": channel_id,
        }

    @builtins.property
    def channel_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channel_id MedialiveChannel#channel_id}.'''
        result = self._values.get("channel_id")
        assert result is not None, "Required property 'channel_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelDestinationsMediaPackageSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelDestinationsMediaPackageSettingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5a6eb1421e43dfc42dcaad1d945f6a2234852cec1624925d5b77de3d99805b7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelDestinationsMediaPackageSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab4db363e9186fe77d791a9e8181df99a2363a2a67d99c7d5d4debc56d54dbef)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelDestinationsMediaPackageSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ff1acb63979cb90cc63fd7e96586f7ff4ea3bcd3a8872cef8a9483551504bb9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3c0cf7d3f7e55246a5f9bfea1fb4e2249b7ae7e894cd71163724849bddbea56)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab113f7f15d1a85e4000339348469e97bc9814201fac42b308e88144b4c2bdd4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86e105dd66125bd8faacbf97b6e12bbb3920da707fe06a19b51afbb7b97f2ef1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelDestinationsMediaPackageSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMediaPackageSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd1bbe0edd68dba55d2f480fc5be85429e73627e2a59d989c6859f68616fde03)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="channelIdInput")
    def channel_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "channelIdInput"))

    @builtins.property
    @jsii.member(jsii_name="channelId")
    def channel_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "channelId"))

    @channel_id.setter
    def channel_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab9ecbfed9bfa6966064cbd6bc8b54c2400a08beee829f51a6dd1c718c81ef4f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "channelId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinationsMediaPackageSettings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinationsMediaPackageSettings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinationsMediaPackageSettings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02ee1a7e97183806501e111ace51c4debd217e39d621e375562482ca65f1e534)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMultiplexSettings",
    jsii_struct_bases=[],
    name_mapping={"multiplex_id": "multiplexId", "program_name": "programName"},
)
class MedialiveChannelDestinationsMultiplexSettings:
    def __init__(
        self,
        *,
        multiplex_id: builtins.str,
        program_name: builtins.str,
    ) -> None:
        '''
        :param multiplex_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_id MedialiveChannel#multiplex_id}.
        :param program_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_name MedialiveChannel#program_name}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2bb59fe546a356c9d3f5faef382bba9a011e2be6128d74d176188b99ec352029)
            check_type(argname="argument multiplex_id", value=multiplex_id, expected_type=type_hints["multiplex_id"])
            check_type(argname="argument program_name", value=program_name, expected_type=type_hints["program_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "multiplex_id": multiplex_id,
            "program_name": program_name,
        }

    @builtins.property
    def multiplex_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_id MedialiveChannel#multiplex_id}.'''
        result = self._values.get("multiplex_id")
        assert result is not None, "Required property 'multiplex_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def program_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_name MedialiveChannel#program_name}.'''
        result = self._values.get("program_name")
        assert result is not None, "Required property 'program_name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelDestinationsMultiplexSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelDestinationsMultiplexSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsMultiplexSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0593e17171d3508d4b9315d46e5461ab9dd38c7d07f8d15b18e51b281a9742f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="multiplexIdInput")
    def multiplex_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "multiplexIdInput"))

    @builtins.property
    @jsii.member(jsii_name="programNameInput")
    def program_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "programNameInput"))

    @builtins.property
    @jsii.member(jsii_name="multiplexId")
    def multiplex_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "multiplexId"))

    @multiplex_id.setter
    def multiplex_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__771ebc9a87dc45c8320b616f9ad6a572261a179c16ced320c76133b48ab1a458)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "multiplexId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="programName")
    def program_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "programName"))

    @program_name.setter
    def program_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd243113bd281e08f760d4c00f71e9219d94f3e04292e0d1a9d53d609d83be31)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelDestinationsMultiplexSettings]:
        return typing.cast(typing.Optional[MedialiveChannelDestinationsMultiplexSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelDestinationsMultiplexSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b824361a2f53869f6f37f0976ceaa7d309809e069db245eaabaa5d4e552e571)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelDestinationsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4874782a36ed8041eb8b303543b408a3c5b813a8ff5d54a335b0be502d71b88d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putMediaPackageSettings")
    def put_media_package_settings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__809c180f58397ceb7bb7c5b54d01acb788343ea1c63659e9de3d2e622eee5679)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putMediaPackageSettings", [value]))

    @jsii.member(jsii_name="putMultiplexSettings")
    def put_multiplex_settings(
        self,
        *,
        multiplex_id: builtins.str,
        program_name: builtins.str,
    ) -> None:
        '''
        :param multiplex_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_id MedialiveChannel#multiplex_id}.
        :param program_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_name MedialiveChannel#program_name}.
        '''
        value = MedialiveChannelDestinationsMultiplexSettings(
            multiplex_id=multiplex_id, program_name=program_name
        )

        return typing.cast(None, jsii.invoke(self, "putMultiplexSettings", [value]))

    @jsii.member(jsii_name="putSettings")
    def put_settings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelDestinationsSettings", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42d96d21591abbe992d1d83e0cb064c94594aa1fb7d6c999541c2b2971a9b14e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSettings", [value]))

    @jsii.member(jsii_name="resetMediaPackageSettings")
    def reset_media_package_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMediaPackageSettings", []))

    @jsii.member(jsii_name="resetMultiplexSettings")
    def reset_multiplex_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMultiplexSettings", []))

    @jsii.member(jsii_name="resetSettings")
    def reset_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSettings", []))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageSettings")
    def media_package_settings(
        self,
    ) -> MedialiveChannelDestinationsMediaPackageSettingsList:
        return typing.cast(MedialiveChannelDestinationsMediaPackageSettingsList, jsii.get(self, "mediaPackageSettings"))

    @builtins.property
    @jsii.member(jsii_name="multiplexSettings")
    def multiplex_settings(
        self,
    ) -> MedialiveChannelDestinationsMultiplexSettingsOutputReference:
        return typing.cast(MedialiveChannelDestinationsMultiplexSettingsOutputReference, jsii.get(self, "multiplexSettings"))

    @builtins.property
    @jsii.member(jsii_name="settings")
    def settings(self) -> "MedialiveChannelDestinationsSettingsList":
        return typing.cast("MedialiveChannelDestinationsSettingsList", jsii.get(self, "settings"))

    @builtins.property
    @jsii.member(jsii_name="idInput")
    def id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "idInput"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageSettingsInput")
    def media_package_settings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]], jsii.get(self, "mediaPackageSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="multiplexSettingsInput")
    def multiplex_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelDestinationsMultiplexSettings]:
        return typing.cast(typing.Optional[MedialiveChannelDestinationsMultiplexSettings], jsii.get(self, "multiplexSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="settingsInput")
    def settings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinationsSettings"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelDestinationsSettings"]]], jsii.get(self, "settingsInput"))

    @builtins.property
    @jsii.member(jsii_name="id")
    def id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "id"))

    @id.setter
    def id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d8e2906babd9c556b2258f250d4b2a7fef36e5cbae7566280e8e6f41b2358e8d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "id", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinations]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinations]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinations]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80055540988036964ec17bebdc81dccaaac775f336497f133a36de26100faeb6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "password_param": "passwordParam",
        "stream_name": "streamName",
        "url": "url",
        "username": "username",
    },
)
class MedialiveChannelDestinationsSettings:
    def __init__(
        self,
        *,
        password_param: typing.Optional[builtins.str] = None,
        stream_name: typing.Optional[builtins.str] = None,
        url: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param stream_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_name MedialiveChannel#stream_name}.
        :param url: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#url MedialiveChannel#url}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58d5b79f49d66839ddd99afae52d62bcc5eda6128d7db435b9bd4af5a28e1f11)
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument stream_name", value=stream_name, expected_type=type_hints["stream_name"])
            check_type(argname="argument url", value=url, expected_type=type_hints["url"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if password_param is not None:
            self._values["password_param"] = password_param
        if stream_name is not None:
            self._values["stream_name"] = stream_name
        if url is not None:
            self._values["url"] = url
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def stream_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_name MedialiveChannel#stream_name}.'''
        result = self._values.get("stream_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def url(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#url MedialiveChannel#url}.'''
        result = self._values.get("url")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelDestinationsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelDestinationsSettingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60c57f01343632d22e4411000896967231217b331bab1e45805261199e1a1b4f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelDestinationsSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42b43d5999af04fc1cbf8ff69b0b18d93acbd0e23665d0422328ece75941f86d)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelDestinationsSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8977656e24a06052309d36573a2c3db34ad70460f7a15aba5fc1c58b5173eca7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e035ea2c5a65c1f7f12940afce2df05bbc5afd8bc3ac704970fdd04daaee7c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__243a71e111ceebaec60ce15cbb611b2b4dbbb4e7c4fb0b82553ab9c3b4ecf87b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsSettings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eddca424a2ced5919ae50bb316d39f72bc684b1dd4bf2ffa13cd72cfa7d02055)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelDestinationsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelDestinationsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67eb6f922e25a803ae199623cd8782617e2664038345bfe3a7ee832a1e990d38)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetStreamName")
    def reset_stream_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStreamName", []))

    @jsii.member(jsii_name="resetUrl")
    def reset_url(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUrl", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="streamNameInput")
    def stream_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "streamNameInput"))

    @builtins.property
    @jsii.member(jsii_name="urlInput")
    def url_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "urlInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85e15189ebc8e3531413972df1518de4061118936554cd587c0ddf8372b5ed1e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="streamName")
    def stream_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "streamName"))

    @stream_name.setter
    def stream_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19309631fef4b9f33a1b3f8e536ccc126a88ecafc4d077803898e3f864aca8b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "streamName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="url")
    def url(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "url"))

    @url.setter
    def url(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6448c1d8a007d5ab52763e1c034eef6639d04437fc01c9b062d2256a6c5d4c15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "url", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efcc4141072689d78494a17ebe1771044f0980c6491cb489337c56a223f00c4e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinationsSettings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinationsSettings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinationsSettings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfe8c6d275fb29ac727e384485246a40dd163c2b97dd9e6f8991f7177f26c3db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettings",
    jsii_struct_bases=[],
    name_mapping={
        "output_groups": "outputGroups",
        "timecode_config": "timecodeConfig",
        "audio_descriptions": "audioDescriptions",
        "avail_blanking": "availBlanking",
        "caption_descriptions": "captionDescriptions",
        "global_configuration": "globalConfiguration",
        "motion_graphics_configuration": "motionGraphicsConfiguration",
        "nielsen_configuration": "nielsenConfiguration",
        "video_descriptions": "videoDescriptions",
    },
)
class MedialiveChannelEncoderSettings:
    def __init__(
        self,
        *,
        output_groups: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroups", typing.Dict[builtins.str, typing.Any]]]],
        timecode_config: typing.Union["MedialiveChannelEncoderSettingsTimecodeConfig", typing.Dict[builtins.str, typing.Any]],
        audio_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        avail_blanking: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAvailBlanking", typing.Dict[builtins.str, typing.Any]]] = None,
        caption_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptions", typing.Dict[builtins.str, typing.Any]]]]] = None,
        global_configuration: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsGlobalConfiguration", typing.Dict[builtins.str, typing.Any]]] = None,
        motion_graphics_configuration: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsMotionGraphicsConfiguration", typing.Dict[builtins.str, typing.Any]]] = None,
        nielsen_configuration: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsNielsenConfiguration", typing.Dict[builtins.str, typing.Any]]] = None,
        video_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptions", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param output_groups: output_groups block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_groups MedialiveChannel#output_groups}
        :param timecode_config: timecode_config block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_config MedialiveChannel#timecode_config}
        :param audio_descriptions: audio_descriptions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_descriptions MedialiveChannel#audio_descriptions}
        :param avail_blanking: avail_blanking block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#avail_blanking MedialiveChannel#avail_blanking}
        :param caption_descriptions: caption_descriptions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_descriptions MedialiveChannel#caption_descriptions}
        :param global_configuration: global_configuration block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#global_configuration MedialiveChannel#global_configuration}
        :param motion_graphics_configuration: motion_graphics_configuration block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_configuration MedialiveChannel#motion_graphics_configuration}
        :param nielsen_configuration: nielsen_configuration block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_configuration MedialiveChannel#nielsen_configuration}
        :param video_descriptions: video_descriptions block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_descriptions MedialiveChannel#video_descriptions}
        '''
        if isinstance(timecode_config, dict):
            timecode_config = MedialiveChannelEncoderSettingsTimecodeConfig(**timecode_config)
        if isinstance(avail_blanking, dict):
            avail_blanking = MedialiveChannelEncoderSettingsAvailBlanking(**avail_blanking)
        if isinstance(global_configuration, dict):
            global_configuration = MedialiveChannelEncoderSettingsGlobalConfiguration(**global_configuration)
        if isinstance(motion_graphics_configuration, dict):
            motion_graphics_configuration = MedialiveChannelEncoderSettingsMotionGraphicsConfiguration(**motion_graphics_configuration)
        if isinstance(nielsen_configuration, dict):
            nielsen_configuration = MedialiveChannelEncoderSettingsNielsenConfiguration(**nielsen_configuration)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be3998ed1be31ccb5355012fc5403dba48eb0e4b280bf98bb02dec19c581907e)
            check_type(argname="argument output_groups", value=output_groups, expected_type=type_hints["output_groups"])
            check_type(argname="argument timecode_config", value=timecode_config, expected_type=type_hints["timecode_config"])
            check_type(argname="argument audio_descriptions", value=audio_descriptions, expected_type=type_hints["audio_descriptions"])
            check_type(argname="argument avail_blanking", value=avail_blanking, expected_type=type_hints["avail_blanking"])
            check_type(argname="argument caption_descriptions", value=caption_descriptions, expected_type=type_hints["caption_descriptions"])
            check_type(argname="argument global_configuration", value=global_configuration, expected_type=type_hints["global_configuration"])
            check_type(argname="argument motion_graphics_configuration", value=motion_graphics_configuration, expected_type=type_hints["motion_graphics_configuration"])
            check_type(argname="argument nielsen_configuration", value=nielsen_configuration, expected_type=type_hints["nielsen_configuration"])
            check_type(argname="argument video_descriptions", value=video_descriptions, expected_type=type_hints["video_descriptions"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "output_groups": output_groups,
            "timecode_config": timecode_config,
        }
        if audio_descriptions is not None:
            self._values["audio_descriptions"] = audio_descriptions
        if avail_blanking is not None:
            self._values["avail_blanking"] = avail_blanking
        if caption_descriptions is not None:
            self._values["caption_descriptions"] = caption_descriptions
        if global_configuration is not None:
            self._values["global_configuration"] = global_configuration
        if motion_graphics_configuration is not None:
            self._values["motion_graphics_configuration"] = motion_graphics_configuration
        if nielsen_configuration is not None:
            self._values["nielsen_configuration"] = nielsen_configuration
        if video_descriptions is not None:
            self._values["video_descriptions"] = video_descriptions

    @builtins.property
    def output_groups(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroups"]]:
        '''output_groups block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_groups MedialiveChannel#output_groups}
        '''
        result = self._values.get("output_groups")
        assert result is not None, "Required property 'output_groups' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroups"]], result)

    @builtins.property
    def timecode_config(self) -> "MedialiveChannelEncoderSettingsTimecodeConfig":
        '''timecode_config block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_config MedialiveChannel#timecode_config}
        '''
        result = self._values.get("timecode_config")
        assert result is not None, "Required property 'timecode_config' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsTimecodeConfig", result)

    @builtins.property
    def audio_descriptions(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptions"]]]:
        '''audio_descriptions block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_descriptions MedialiveChannel#audio_descriptions}
        '''
        result = self._values.get("audio_descriptions")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptions"]]], result)

    @builtins.property
    def avail_blanking(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAvailBlanking"]:
        '''avail_blanking block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#avail_blanking MedialiveChannel#avail_blanking}
        '''
        result = self._values.get("avail_blanking")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAvailBlanking"], result)

    @builtins.property
    def caption_descriptions(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsCaptionDescriptions"]]]:
        '''caption_descriptions block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_descriptions MedialiveChannel#caption_descriptions}
        '''
        result = self._values.get("caption_descriptions")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsCaptionDescriptions"]]], result)

    @builtins.property
    def global_configuration(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsGlobalConfiguration"]:
        '''global_configuration block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#global_configuration MedialiveChannel#global_configuration}
        '''
        result = self._values.get("global_configuration")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsGlobalConfiguration"], result)

    @builtins.property
    def motion_graphics_configuration(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsMotionGraphicsConfiguration"]:
        '''motion_graphics_configuration block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_configuration MedialiveChannel#motion_graphics_configuration}
        '''
        result = self._values.get("motion_graphics_configuration")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsMotionGraphicsConfiguration"], result)

    @builtins.property
    def nielsen_configuration(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsNielsenConfiguration"]:
        '''nielsen_configuration block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_configuration MedialiveChannel#nielsen_configuration}
        '''
        result = self._values.get("nielsen_configuration")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsNielsenConfiguration"], result)

    @builtins.property
    def video_descriptions(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsVideoDescriptions"]]]:
        '''video_descriptions block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_descriptions MedialiveChannel#video_descriptions}
        '''
        result = self._values.get("video_descriptions")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsVideoDescriptions"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptions",
    jsii_struct_bases=[],
    name_mapping={
        "audio_selector_name": "audioSelectorName",
        "name": "name",
        "audio_normalization_settings": "audioNormalizationSettings",
        "audio_type": "audioType",
        "audio_type_control": "audioTypeControl",
        "audio_watermark_settings": "audioWatermarkSettings",
        "codec_settings": "codecSettings",
        "language_code": "languageCode",
        "language_code_control": "languageCodeControl",
        "remix_settings": "remixSettings",
        "stream_name": "streamName",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptions:
    def __init__(
        self,
        *,
        audio_selector_name: builtins.str,
        name: builtins.str,
        audio_normalization_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        audio_type: typing.Optional[builtins.str] = None,
        audio_type_control: typing.Optional[builtins.str] = None,
        audio_watermark_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        codec_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        language_code: typing.Optional[builtins.str] = None,
        language_code_control: typing.Optional[builtins.str] = None,
        remix_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        stream_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_selector_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        :param audio_normalization_settings: audio_normalization_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_normalization_settings MedialiveChannel#audio_normalization_settings}
        :param audio_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_type MedialiveChannel#audio_type}.
        :param audio_type_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_type_control MedialiveChannel#audio_type_control}.
        :param audio_watermark_settings: audio_watermark_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_watermark_settings MedialiveChannel#audio_watermark_settings}
        :param codec_settings: codec_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec_settings MedialiveChannel#codec_settings}
        :param language_code: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_code_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code_control MedialiveChannel#language_code_control}.
        :param remix_settings: remix_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#remix_settings MedialiveChannel#remix_settings}
        :param stream_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_name MedialiveChannel#stream_name}.
        '''
        if isinstance(audio_normalization_settings, dict):
            audio_normalization_settings = MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings(**audio_normalization_settings)
        if isinstance(audio_watermark_settings, dict):
            audio_watermark_settings = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings(**audio_watermark_settings)
        if isinstance(codec_settings, dict):
            codec_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings(**codec_settings)
        if isinstance(remix_settings, dict):
            remix_settings = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings(**remix_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16c90649b9dba0534bb76f77af6568aa947c1b5f1bab994cc35534a1092ad431)
            check_type(argname="argument audio_selector_name", value=audio_selector_name, expected_type=type_hints["audio_selector_name"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument audio_normalization_settings", value=audio_normalization_settings, expected_type=type_hints["audio_normalization_settings"])
            check_type(argname="argument audio_type", value=audio_type, expected_type=type_hints["audio_type"])
            check_type(argname="argument audio_type_control", value=audio_type_control, expected_type=type_hints["audio_type_control"])
            check_type(argname="argument audio_watermark_settings", value=audio_watermark_settings, expected_type=type_hints["audio_watermark_settings"])
            check_type(argname="argument codec_settings", value=codec_settings, expected_type=type_hints["codec_settings"])
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument language_code_control", value=language_code_control, expected_type=type_hints["language_code_control"])
            check_type(argname="argument remix_settings", value=remix_settings, expected_type=type_hints["remix_settings"])
            check_type(argname="argument stream_name", value=stream_name, expected_type=type_hints["stream_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "audio_selector_name": audio_selector_name,
            "name": name,
        }
        if audio_normalization_settings is not None:
            self._values["audio_normalization_settings"] = audio_normalization_settings
        if audio_type is not None:
            self._values["audio_type"] = audio_type
        if audio_type_control is not None:
            self._values["audio_type_control"] = audio_type_control
        if audio_watermark_settings is not None:
            self._values["audio_watermark_settings"] = audio_watermark_settings
        if codec_settings is not None:
            self._values["codec_settings"] = codec_settings
        if language_code is not None:
            self._values["language_code"] = language_code
        if language_code_control is not None:
            self._values["language_code_control"] = language_code_control
        if remix_settings is not None:
            self._values["remix_settings"] = remix_settings
        if stream_name is not None:
            self._values["stream_name"] = stream_name

    @builtins.property
    def audio_selector_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.'''
        result = self._values.get("audio_selector_name")
        assert result is not None, "Required property 'audio_selector_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def audio_normalization_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings"]:
        '''audio_normalization_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_normalization_settings MedialiveChannel#audio_normalization_settings}
        '''
        result = self._values.get("audio_normalization_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings"], result)

    @builtins.property
    def audio_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_type MedialiveChannel#audio_type}.'''
        result = self._values.get("audio_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_type_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_type_control MedialiveChannel#audio_type_control}.'''
        result = self._values.get("audio_type_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_watermark_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings"]:
        '''audio_watermark_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_watermark_settings MedialiveChannel#audio_watermark_settings}
        '''
        result = self._values.get("audio_watermark_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings"], result)

    @builtins.property
    def codec_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings"]:
        '''codec_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec_settings MedialiveChannel#codec_settings}
        '''
        result = self._values.get("codec_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings"], result)

    @builtins.property
    def language_code(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def language_code_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code_control MedialiveChannel#language_code_control}.'''
        result = self._values.get("language_code_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def remix_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings"]:
        '''remix_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#remix_settings MedialiveChannel#remix_settings}
        '''
        result = self._values.get("remix_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings"], result)

    @builtins.property
    def stream_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_name MedialiveChannel#stream_name}.'''
        result = self._values.get("stream_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings",
    jsii_struct_bases=[],
    name_mapping={
        "algorithm": "algorithm",
        "algorithm_control": "algorithmControl",
        "target_lkfs": "targetLkfs",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings:
    def __init__(
        self,
        *,
        algorithm: typing.Optional[builtins.str] = None,
        algorithm_control: typing.Optional[builtins.str] = None,
        target_lkfs: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param algorithm: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#algorithm MedialiveChannel#algorithm}.
        :param algorithm_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#algorithm_control MedialiveChannel#algorithm_control}.
        :param target_lkfs: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#target_lkfs MedialiveChannel#target_lkfs}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80c487db4b688733ad449de073805088d00d8600f5658dad154d3c6744a0deaf)
            check_type(argname="argument algorithm", value=algorithm, expected_type=type_hints["algorithm"])
            check_type(argname="argument algorithm_control", value=algorithm_control, expected_type=type_hints["algorithm_control"])
            check_type(argname="argument target_lkfs", value=target_lkfs, expected_type=type_hints["target_lkfs"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if algorithm is not None:
            self._values["algorithm"] = algorithm
        if algorithm_control is not None:
            self._values["algorithm_control"] = algorithm_control
        if target_lkfs is not None:
            self._values["target_lkfs"] = target_lkfs

    @builtins.property
    def algorithm(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#algorithm MedialiveChannel#algorithm}.'''
        result = self._values.get("algorithm")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def algorithm_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#algorithm_control MedialiveChannel#algorithm_control}.'''
        result = self._values.get("algorithm_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def target_lkfs(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#target_lkfs MedialiveChannel#target_lkfs}.'''
        result = self._values.get("target_lkfs")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f0bf4915e3b33fc2fee3ee2afef86e9c6a48e03ebfdff47754df971aa92bf9d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAlgorithm")
    def reset_algorithm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAlgorithm", []))

    @jsii.member(jsii_name="resetAlgorithmControl")
    def reset_algorithm_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAlgorithmControl", []))

    @jsii.member(jsii_name="resetTargetLkfs")
    def reset_target_lkfs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTargetLkfs", []))

    @builtins.property
    @jsii.member(jsii_name="algorithmControlInput")
    def algorithm_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "algorithmControlInput"))

    @builtins.property
    @jsii.member(jsii_name="algorithmInput")
    def algorithm_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "algorithmInput"))

    @builtins.property
    @jsii.member(jsii_name="targetLkfsInput")
    def target_lkfs_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "targetLkfsInput"))

    @builtins.property
    @jsii.member(jsii_name="algorithm")
    def algorithm(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "algorithm"))

    @algorithm.setter
    def algorithm(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__50ba9a7c0efd6ba96c5ec2073b0ea7293c4fe8644126fe45b7a401c354bb0446)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "algorithm", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="algorithmControl")
    def algorithm_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "algorithmControl"))

    @algorithm_control.setter
    def algorithm_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a87bcd4c7364c7fab8d873419455bc9979a432ad6e8c90269bf73d100d19983)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "algorithmControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="targetLkfs")
    def target_lkfs(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "targetLkfs"))

    @target_lkfs.setter
    def target_lkfs(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf42330a64b9bffac282c54452b1a3acf60e32c6b235828dbdf3e9e0f4f2a445)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "targetLkfs", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9d30dedcf16b2296e97a6cac685eba3620bcb58c262e52688540b36c9e3125c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings",
    jsii_struct_bases=[],
    name_mapping={"nielsen_watermarks_settings": "nielsenWatermarksSettings"},
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings:
    def __init__(
        self,
        *,
        nielsen_watermarks_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param nielsen_watermarks_settings: nielsen_watermarks_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_watermarks_settings MedialiveChannel#nielsen_watermarks_settings}
        '''
        if isinstance(nielsen_watermarks_settings, dict):
            nielsen_watermarks_settings = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings(**nielsen_watermarks_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6c07381c617a2872450db31ce525381785c48081f54a4ddb0feaf4c90dfe28c)
            check_type(argname="argument nielsen_watermarks_settings", value=nielsen_watermarks_settings, expected_type=type_hints["nielsen_watermarks_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if nielsen_watermarks_settings is not None:
            self._values["nielsen_watermarks_settings"] = nielsen_watermarks_settings

    @builtins.property
    def nielsen_watermarks_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings"]:
        '''nielsen_watermarks_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_watermarks_settings MedialiveChannel#nielsen_watermarks_settings}
        '''
        result = self._values.get("nielsen_watermarks_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings",
    jsii_struct_bases=[],
    name_mapping={
        "nielsen_cbet_settings": "nielsenCbetSettings",
        "nielsen_distribution_type": "nielsenDistributionType",
        "nielsen_naes_ii_nw_settings": "nielsenNaesIiNwSettings",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings:
    def __init__(
        self,
        *,
        nielsen_cbet_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        nielsen_distribution_type: typing.Optional[builtins.str] = None,
        nielsen_naes_ii_nw_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param nielsen_cbet_settings: nielsen_cbet_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_cbet_settings MedialiveChannel#nielsen_cbet_settings}
        :param nielsen_distribution_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_distribution_type MedialiveChannel#nielsen_distribution_type}.
        :param nielsen_naes_ii_nw_settings: nielsen_naes_ii_nw_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_naes_ii_nw_settings MedialiveChannel#nielsen_naes_ii_nw_settings}
        '''
        if isinstance(nielsen_cbet_settings, dict):
            nielsen_cbet_settings = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings(**nielsen_cbet_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f470d4232869a7083e97fcaefb9847e784b5ec8b10507c30510d4b4e545bee15)
            check_type(argname="argument nielsen_cbet_settings", value=nielsen_cbet_settings, expected_type=type_hints["nielsen_cbet_settings"])
            check_type(argname="argument nielsen_distribution_type", value=nielsen_distribution_type, expected_type=type_hints["nielsen_distribution_type"])
            check_type(argname="argument nielsen_naes_ii_nw_settings", value=nielsen_naes_ii_nw_settings, expected_type=type_hints["nielsen_naes_ii_nw_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if nielsen_cbet_settings is not None:
            self._values["nielsen_cbet_settings"] = nielsen_cbet_settings
        if nielsen_distribution_type is not None:
            self._values["nielsen_distribution_type"] = nielsen_distribution_type
        if nielsen_naes_ii_nw_settings is not None:
            self._values["nielsen_naes_ii_nw_settings"] = nielsen_naes_ii_nw_settings

    @builtins.property
    def nielsen_cbet_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings"]:
        '''nielsen_cbet_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_cbet_settings MedialiveChannel#nielsen_cbet_settings}
        '''
        result = self._values.get("nielsen_cbet_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings"], result)

    @builtins.property
    def nielsen_distribution_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_distribution_type MedialiveChannel#nielsen_distribution_type}.'''
        result = self._values.get("nielsen_distribution_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_naes_ii_nw_settings(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings"]]]:
        '''nielsen_naes_ii_nw_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_naes_ii_nw_settings MedialiveChannel#nielsen_naes_ii_nw_settings}
        '''
        result = self._values.get("nielsen_naes_ii_nw_settings")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings",
    jsii_struct_bases=[],
    name_mapping={
        "cbet_check_digit_string": "cbetCheckDigitString",
        "cbet_stepaside": "cbetStepaside",
        "csid": "csid",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings:
    def __init__(
        self,
        *,
        cbet_check_digit_string: builtins.str,
        cbet_stepaside: builtins.str,
        csid: builtins.str,
    ) -> None:
        '''
        :param cbet_check_digit_string: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cbet_check_digit_string MedialiveChannel#cbet_check_digit_string}.
        :param cbet_stepaside: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cbet_stepaside MedialiveChannel#cbet_stepaside}.
        :param csid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#csid MedialiveChannel#csid}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20445fe0e799d3cd34bdedcbf7a76ad604488a10a80250b055d80651ac7b7783)
            check_type(argname="argument cbet_check_digit_string", value=cbet_check_digit_string, expected_type=type_hints["cbet_check_digit_string"])
            check_type(argname="argument cbet_stepaside", value=cbet_stepaside, expected_type=type_hints["cbet_stepaside"])
            check_type(argname="argument csid", value=csid, expected_type=type_hints["csid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "cbet_check_digit_string": cbet_check_digit_string,
            "cbet_stepaside": cbet_stepaside,
            "csid": csid,
        }

    @builtins.property
    def cbet_check_digit_string(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cbet_check_digit_string MedialiveChannel#cbet_check_digit_string}.'''
        result = self._values.get("cbet_check_digit_string")
        assert result is not None, "Required property 'cbet_check_digit_string' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def cbet_stepaside(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cbet_stepaside MedialiveChannel#cbet_stepaside}.'''
        result = self._values.get("cbet_stepaside")
        assert result is not None, "Required property 'cbet_stepaside' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def csid(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#csid MedialiveChannel#csid}.'''
        result = self._values.get("csid")
        assert result is not None, "Required property 'csid' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__623b6b9b45ae84133f982b637a37b2ebb71ac82493ebf8398415319c883c853b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="cbetCheckDigitStringInput")
    def cbet_check_digit_string_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cbetCheckDigitStringInput"))

    @builtins.property
    @jsii.member(jsii_name="cbetStepasideInput")
    def cbet_stepaside_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cbetStepasideInput"))

    @builtins.property
    @jsii.member(jsii_name="csidInput")
    def csid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "csidInput"))

    @builtins.property
    @jsii.member(jsii_name="cbetCheckDigitString")
    def cbet_check_digit_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cbetCheckDigitString"))

    @cbet_check_digit_string.setter
    def cbet_check_digit_string(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bc51663ec4004768abe9c203bc4143f81ca7ec1c974c8d100d473f8fd39af79)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cbetCheckDigitString", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="cbetStepaside")
    def cbet_stepaside(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cbetStepaside"))

    @cbet_stepaside.setter
    def cbet_stepaside(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d4dfa4ca9488d13233429ffde8ac1eadc153118c9469bb30b6a61cb61c6d62fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cbetStepaside", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="csid")
    def csid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "csid"))

    @csid.setter
    def csid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd8449322e0176a2e3f6b77583f3696f2b33d7e756ecc0b8f40e86e895bce3f5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "csid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36fb846a7545068180e57b8e10ecdd41b7cd6e7584a3ef81743867aaf50ef5cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings",
    jsii_struct_bases=[],
    name_mapping={"check_digit_string": "checkDigitString", "sid": "sid"},
)
class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings:
    def __init__(self, *, check_digit_string: builtins.str, sid: jsii.Number) -> None:
        '''
        :param check_digit_string: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#check_digit_string MedialiveChannel#check_digit_string}.
        :param sid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sid MedialiveChannel#sid}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0acad1bb0cc8c74ac45abc2f3ba8a77cc05cb4fb7c80dadc6fe5d3e49f6b0ac)
            check_type(argname="argument check_digit_string", value=check_digit_string, expected_type=type_hints["check_digit_string"])
            check_type(argname="argument sid", value=sid, expected_type=type_hints["sid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "check_digit_string": check_digit_string,
            "sid": sid,
        }

    @builtins.property
    def check_digit_string(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#check_digit_string MedialiveChannel#check_digit_string}.'''
        result = self._values.get("check_digit_string")
        assert result is not None, "Required property 'check_digit_string' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def sid(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sid MedialiveChannel#sid}.'''
        result = self._values.get("sid")
        assert result is not None, "Required property 'sid' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__532bbca29a7c6a9df0da5f0889c1387c2be1100dd6df3729ee2bf7180ec7fc47)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4e56126dea70c1110b1b2d262730d91f05b1b50216211f415aab0bb6309033a)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36d6b5486d954551a267ac0bcd04d87a1c7ac64fec2675a235248c9063891869)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f9f33c8ddfd2eb7ca41bc0a823e370f275238d1501458b419ca836ab3756a22)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b02a89033c32b9fb992a2eb867050c1509230ad4a61c659a2253280f6712ce08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e58512175d74b467009f16bfa6e53b26b9202c7dd4eab1ccc3e021edeb6e3db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02cb081d41b52a654b470c781225278b396fc341788c935ee2e345bd1bb2f096)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="checkDigitStringInput")
    def check_digit_string_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "checkDigitStringInput"))

    @builtins.property
    @jsii.member(jsii_name="sidInput")
    def sid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sidInput"))

    @builtins.property
    @jsii.member(jsii_name="checkDigitString")
    def check_digit_string(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "checkDigitString"))

    @check_digit_string.setter
    def check_digit_string(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab56da719e3b6f83c8bc2104a826eee2d631984ea448b114b2234713177beb5e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "checkDigitString", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sid")
    def sid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sid"))

    @sid.setter
    def sid(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__270350867f3cf9636012f7a05c80929961b374d5244111080664fbc90223a7b6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3088ff3def293a98fd0efbc73943db21ac8ee24bc9827074d3b6e89414801ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__821659b060d3eb8d9e8a6856a8e25b3f88bef405941a07c06b01b83350732a03)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putNielsenCbetSettings")
    def put_nielsen_cbet_settings(
        self,
        *,
        cbet_check_digit_string: builtins.str,
        cbet_stepaside: builtins.str,
        csid: builtins.str,
    ) -> None:
        '''
        :param cbet_check_digit_string: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cbet_check_digit_string MedialiveChannel#cbet_check_digit_string}.
        :param cbet_stepaside: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cbet_stepaside MedialiveChannel#cbet_stepaside}.
        :param csid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#csid MedialiveChannel#csid}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings(
            cbet_check_digit_string=cbet_check_digit_string,
            cbet_stepaside=cbet_stepaside,
            csid=csid,
        )

        return typing.cast(None, jsii.invoke(self, "putNielsenCbetSettings", [value]))

    @jsii.member(jsii_name="putNielsenNaesIiNwSettings")
    def put_nielsen_naes_ii_nw_settings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2efcbdc26315c454f4111850327c42c1876e7d9f8ef4801398222daf702e4af1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNielsenNaesIiNwSettings", [value]))

    @jsii.member(jsii_name="resetNielsenCbetSettings")
    def reset_nielsen_cbet_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenCbetSettings", []))

    @jsii.member(jsii_name="resetNielsenDistributionType")
    def reset_nielsen_distribution_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenDistributionType", []))

    @jsii.member(jsii_name="resetNielsenNaesIiNwSettings")
    def reset_nielsen_naes_ii_nw_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenNaesIiNwSettings", []))

    @builtins.property
    @jsii.member(jsii_name="nielsenCbetSettings")
    def nielsen_cbet_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference, jsii.get(self, "nielsenCbetSettings"))

    @builtins.property
    @jsii.member(jsii_name="nielsenNaesIiNwSettings")
    def nielsen_naes_ii_nw_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList, jsii.get(self, "nielsenNaesIiNwSettings"))

    @builtins.property
    @jsii.member(jsii_name="nielsenCbetSettingsInput")
    def nielsen_cbet_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings], jsii.get(self, "nielsenCbetSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenDistributionTypeInput")
    def nielsen_distribution_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenDistributionTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenNaesIiNwSettingsInput")
    def nielsen_naes_ii_nw_settings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]], jsii.get(self, "nielsenNaesIiNwSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenDistributionType")
    def nielsen_distribution_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenDistributionType"))

    @nielsen_distribution_type.setter
    def nielsen_distribution_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5949aa575c27c2330038af92ca08aa36e7876a73f4865157ddbebe7be07830f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenDistributionType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46a149b802240b8a20e0635e52c2b86fdcadea73cdd8a349bfc863b98a5cce86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7f3d4782eb60c48010e67af0cddccd04458860c509689c36f848189a436afef)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putNielsenWatermarksSettings")
    def put_nielsen_watermarks_settings(
        self,
        *,
        nielsen_cbet_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        nielsen_distribution_type: typing.Optional[builtins.str] = None,
        nielsen_naes_ii_nw_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param nielsen_cbet_settings: nielsen_cbet_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_cbet_settings MedialiveChannel#nielsen_cbet_settings}
        :param nielsen_distribution_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_distribution_type MedialiveChannel#nielsen_distribution_type}.
        :param nielsen_naes_ii_nw_settings: nielsen_naes_ii_nw_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_naes_ii_nw_settings MedialiveChannel#nielsen_naes_ii_nw_settings}
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings(
            nielsen_cbet_settings=nielsen_cbet_settings,
            nielsen_distribution_type=nielsen_distribution_type,
            nielsen_naes_ii_nw_settings=nielsen_naes_ii_nw_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putNielsenWatermarksSettings", [value]))

    @jsii.member(jsii_name="resetNielsenWatermarksSettings")
    def reset_nielsen_watermarks_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenWatermarksSettings", []))

    @builtins.property
    @jsii.member(jsii_name="nielsenWatermarksSettings")
    def nielsen_watermarks_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference, jsii.get(self, "nielsenWatermarksSettings"))

    @builtins.property
    @jsii.member(jsii_name="nielsenWatermarksSettingsInput")
    def nielsen_watermarks_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings], jsii.get(self, "nielsenWatermarksSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4dadd4ff7f69d8ba2104c6d045433ce0a1f16cd28c7a676e9385dd99739568d5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings",
    jsii_struct_bases=[],
    name_mapping={
        "aac_settings": "aacSettings",
        "ac3_settings": "ac3Settings",
        "eac3_atmos_settings": "eac3AtmosSettings",
        "eac3_settings": "eac3Settings",
        "mp2_settings": "mp2Settings",
        "pass_through_settings": "passThroughSettings",
        "wav_settings": "wavSettings",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings:
    def __init__(
        self,
        *,
        aac_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        ac3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings", typing.Dict[builtins.str, typing.Any]]] = None,
        eac3_atmos_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        eac3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings", typing.Dict[builtins.str, typing.Any]]] = None,
        mp2_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings", typing.Dict[builtins.str, typing.Any]]] = None,
        pass_through_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        wav_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param aac_settings: aac_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#aac_settings MedialiveChannel#aac_settings}
        :param ac3_settings: ac3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ac3_settings MedialiveChannel#ac3_settings}
        :param eac3_atmos_settings: eac3_atmos_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#eac3_atmos_settings MedialiveChannel#eac3_atmos_settings}
        :param eac3_settings: eac3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#eac3_settings MedialiveChannel#eac3_settings}
        :param mp2_settings: mp2_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mp2_settings MedialiveChannel#mp2_settings}
        :param pass_through_settings: pass_through_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pass_through_settings MedialiveChannel#pass_through_settings}
        :param wav_settings: wav_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#wav_settings MedialiveChannel#wav_settings}
        '''
        if isinstance(aac_settings, dict):
            aac_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings(**aac_settings)
        if isinstance(ac3_settings, dict):
            ac3_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings(**ac3_settings)
        if isinstance(eac3_atmos_settings, dict):
            eac3_atmos_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings(**eac3_atmos_settings)
        if isinstance(eac3_settings, dict):
            eac3_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings(**eac3_settings)
        if isinstance(mp2_settings, dict):
            mp2_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings(**mp2_settings)
        if isinstance(pass_through_settings, dict):
            pass_through_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings(**pass_through_settings)
        if isinstance(wav_settings, dict):
            wav_settings = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings(**wav_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc1747d2966394c058c1ee4df365010e6aaf7389dd2982e140a9eb1a5ac29979)
            check_type(argname="argument aac_settings", value=aac_settings, expected_type=type_hints["aac_settings"])
            check_type(argname="argument ac3_settings", value=ac3_settings, expected_type=type_hints["ac3_settings"])
            check_type(argname="argument eac3_atmos_settings", value=eac3_atmos_settings, expected_type=type_hints["eac3_atmos_settings"])
            check_type(argname="argument eac3_settings", value=eac3_settings, expected_type=type_hints["eac3_settings"])
            check_type(argname="argument mp2_settings", value=mp2_settings, expected_type=type_hints["mp2_settings"])
            check_type(argname="argument pass_through_settings", value=pass_through_settings, expected_type=type_hints["pass_through_settings"])
            check_type(argname="argument wav_settings", value=wav_settings, expected_type=type_hints["wav_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if aac_settings is not None:
            self._values["aac_settings"] = aac_settings
        if ac3_settings is not None:
            self._values["ac3_settings"] = ac3_settings
        if eac3_atmos_settings is not None:
            self._values["eac3_atmos_settings"] = eac3_atmos_settings
        if eac3_settings is not None:
            self._values["eac3_settings"] = eac3_settings
        if mp2_settings is not None:
            self._values["mp2_settings"] = mp2_settings
        if pass_through_settings is not None:
            self._values["pass_through_settings"] = pass_through_settings
        if wav_settings is not None:
            self._values["wav_settings"] = wav_settings

    @builtins.property
    def aac_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings"]:
        '''aac_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#aac_settings MedialiveChannel#aac_settings}
        '''
        result = self._values.get("aac_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings"], result)

    @builtins.property
    def ac3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings"]:
        '''ac3_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ac3_settings MedialiveChannel#ac3_settings}
        '''
        result = self._values.get("ac3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings"], result)

    @builtins.property
    def eac3_atmos_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings"]:
        '''eac3_atmos_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#eac3_atmos_settings MedialiveChannel#eac3_atmos_settings}
        '''
        result = self._values.get("eac3_atmos_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings"], result)

    @builtins.property
    def eac3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings"]:
        '''eac3_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#eac3_settings MedialiveChannel#eac3_settings}
        '''
        result = self._values.get("eac3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings"], result)

    @builtins.property
    def mp2_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings"]:
        '''mp2_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mp2_settings MedialiveChannel#mp2_settings}
        '''
        result = self._values.get("mp2_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings"], result)

    @builtins.property
    def pass_through_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings"]:
        '''pass_through_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pass_through_settings MedialiveChannel#pass_through_settings}
        '''
        result = self._values.get("pass_through_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings"], result)

    @builtins.property
    def wav_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings"]:
        '''wav_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#wav_settings MedialiveChannel#wav_settings}
        '''
        result = self._values.get("wav_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "coding_mode": "codingMode",
        "input_type": "inputType",
        "profile": "profile",
        "rate_control_mode": "rateControlMode",
        "raw_format": "rawFormat",
        "sample_rate": "sampleRate",
        "spec": "spec",
        "vbr_quality": "vbrQuality",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings:
    def __init__(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        input_type: typing.Optional[builtins.str] = None,
        profile: typing.Optional[builtins.str] = None,
        rate_control_mode: typing.Optional[builtins.str] = None,
        raw_format: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
        spec: typing.Optional[builtins.str] = None,
        vbr_quality: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param input_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_type MedialiveChannel#input_type}.
        :param profile: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.
        :param rate_control_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.
        :param raw_format: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#raw_format MedialiveChannel#raw_format}.
        :param sample_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        :param spec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#spec MedialiveChannel#spec}.
        :param vbr_quality: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#vbr_quality MedialiveChannel#vbr_quality}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__802e31da1bdc41c7f9d5e8fe5a40cfcdc795b78e8307d94edd794c0e3a97ac71)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument input_type", value=input_type, expected_type=type_hints["input_type"])
            check_type(argname="argument profile", value=profile, expected_type=type_hints["profile"])
            check_type(argname="argument rate_control_mode", value=rate_control_mode, expected_type=type_hints["rate_control_mode"])
            check_type(argname="argument raw_format", value=raw_format, expected_type=type_hints["raw_format"])
            check_type(argname="argument sample_rate", value=sample_rate, expected_type=type_hints["sample_rate"])
            check_type(argname="argument spec", value=spec, expected_type=type_hints["spec"])
            check_type(argname="argument vbr_quality", value=vbr_quality, expected_type=type_hints["vbr_quality"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if input_type is not None:
            self._values["input_type"] = input_type
        if profile is not None:
            self._values["profile"] = profile
        if rate_control_mode is not None:
            self._values["rate_control_mode"] = rate_control_mode
        if raw_format is not None:
            self._values["raw_format"] = raw_format
        if sample_rate is not None:
            self._values["sample_rate"] = sample_rate
        if spec is not None:
            self._values["spec"] = spec
        if vbr_quality is not None:
            self._values["vbr_quality"] = vbr_quality

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def input_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_type MedialiveChannel#input_type}.'''
        result = self._values.get("input_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def profile(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.'''
        result = self._values.get("profile")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def rate_control_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.'''
        result = self._values.get("rate_control_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def raw_format(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#raw_format MedialiveChannel#raw_format}.'''
        result = self._values.get("raw_format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sample_rate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.'''
        result = self._values.get("sample_rate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def spec(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#spec MedialiveChannel#spec}.'''
        result = self._values.get("spec")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def vbr_quality(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#vbr_quality MedialiveChannel#vbr_quality}.'''
        result = self._values.get("vbr_quality")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06d5716d27ad02e0b01b120c88f3a149ca3e02671f894442889d11240737bb73)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetInputType")
    def reset_input_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputType", []))

    @jsii.member(jsii_name="resetProfile")
    def reset_profile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProfile", []))

    @jsii.member(jsii_name="resetRateControlMode")
    def reset_rate_control_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRateControlMode", []))

    @jsii.member(jsii_name="resetRawFormat")
    def reset_raw_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRawFormat", []))

    @jsii.member(jsii_name="resetSampleRate")
    def reset_sample_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSampleRate", []))

    @jsii.member(jsii_name="resetSpec")
    def reset_spec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpec", []))

    @jsii.member(jsii_name="resetVbrQuality")
    def reset_vbr_quality(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVbrQuality", []))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="inputTypeInput")
    def input_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="profileInput")
    def profile_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "profileInput"))

    @builtins.property
    @jsii.member(jsii_name="rateControlModeInput")
    def rate_control_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rateControlModeInput"))

    @builtins.property
    @jsii.member(jsii_name="rawFormatInput")
    def raw_format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rawFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="sampleRateInput")
    def sample_rate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sampleRateInput"))

    @builtins.property
    @jsii.member(jsii_name="specInput")
    def spec_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "specInput"))

    @builtins.property
    @jsii.member(jsii_name="vbrQualityInput")
    def vbr_quality_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "vbrQualityInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc619c7c501419d95243cf4c22fb24b422243deb99caa435dc1f180c5acca511)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__202083f00903f21de090c1a94d4e6d6ae3c7d6b45ac5ff45e60a96d653130671)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputType")
    def input_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputType"))

    @input_type.setter
    def input_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25ab8bb44e2dac63846e09d79dea153617e4045f78b901571f3019c33f7134d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="profile")
    def profile(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "profile"))

    @profile.setter
    def profile(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef0b52aa2a7d3cc9f588c4b9d99f2965fa477bf762d5c9fd6c407525c75369fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "profile", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="rateControlMode")
    def rate_control_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rateControlMode"))

    @rate_control_mode.setter
    def rate_control_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f3e7f020463b69aa575417fa50bc1cc1b4128b4cef9b887369832c2f0eb2252)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rateControlMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="rawFormat")
    def raw_format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rawFormat"))

    @raw_format.setter
    def raw_format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a8155a7835f73c85284471611146aa250b87b13a85b8c53f4e0f95b1c642a1f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rawFormat", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sampleRate")
    def sample_rate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sampleRate"))

    @sample_rate.setter
    def sample_rate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a12ee8ee09a68dea8f0a68cacf7854fc7e1032f700ac36cee597e983a1dce6a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sampleRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="spec")
    def spec(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "spec"))

    @spec.setter
    def spec(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3dcead2a653b6723a0d135518ceb1d9b62f8228699f3dacd01453e56996ff333)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "spec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="vbrQuality")
    def vbr_quality(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "vbrQuality"))

    @vbr_quality.setter
    def vbr_quality(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99a5e1b2b26df3e919c25deb991fad51efdc0e2b9949e0714ddca18b603dbc04)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "vbrQuality", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3393c632378a7fcdd5097b94df051a8a778d311360a366975ded205d81d7332f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "bitstream_mode": "bitstreamMode",
        "coding_mode": "codingMode",
        "dialnorm": "dialnorm",
        "drc_profile": "drcProfile",
        "lfe_filter": "lfeFilter",
        "metadata_control": "metadataControl",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings:
    def __init__(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        bitstream_mode: typing.Optional[builtins.str] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_profile: typing.Optional[builtins.str] = None,
        lfe_filter: typing.Optional[builtins.str] = None,
        metadata_control: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param bitstream_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dialnorm: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_profile: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_profile MedialiveChannel#drc_profile}.
        :param lfe_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.
        :param metadata_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#metadata_control MedialiveChannel#metadata_control}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24b48b3c912a5c72d483046b8a136d7e1a4fd7fba294fbceb92fb00b4178dc16)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument bitstream_mode", value=bitstream_mode, expected_type=type_hints["bitstream_mode"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument dialnorm", value=dialnorm, expected_type=type_hints["dialnorm"])
            check_type(argname="argument drc_profile", value=drc_profile, expected_type=type_hints["drc_profile"])
            check_type(argname="argument lfe_filter", value=lfe_filter, expected_type=type_hints["lfe_filter"])
            check_type(argname="argument metadata_control", value=metadata_control, expected_type=type_hints["metadata_control"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if bitstream_mode is not None:
            self._values["bitstream_mode"] = bitstream_mode
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if dialnorm is not None:
            self._values["dialnorm"] = dialnorm
        if drc_profile is not None:
            self._values["drc_profile"] = drc_profile
        if lfe_filter is not None:
            self._values["lfe_filter"] = lfe_filter
        if metadata_control is not None:
            self._values["metadata_control"] = metadata_control

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def bitstream_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.'''
        result = self._values.get("bitstream_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dialnorm(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.'''
        result = self._values.get("dialnorm")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def drc_profile(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_profile MedialiveChannel#drc_profile}.'''
        result = self._values.get("drc_profile")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def lfe_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.'''
        result = self._values.get("lfe_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def metadata_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#metadata_control MedialiveChannel#metadata_control}.'''
        result = self._values.get("metadata_control")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__789142aa4395c58837a9b6c601ab577a514684356c1a965fce6046ac50b0dfac)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBitstreamMode")
    def reset_bitstream_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitstreamMode", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetDialnorm")
    def reset_dialnorm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDialnorm", []))

    @jsii.member(jsii_name="resetDrcProfile")
    def reset_drc_profile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcProfile", []))

    @jsii.member(jsii_name="resetLfeFilter")
    def reset_lfe_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLfeFilter", []))

    @jsii.member(jsii_name="resetMetadataControl")
    def reset_metadata_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadataControl", []))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bitstreamModeInput")
    def bitstream_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bitstreamModeInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="dialnormInput")
    def dialnorm_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "dialnormInput"))

    @builtins.property
    @jsii.member(jsii_name="drcProfileInput")
    def drc_profile_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcProfileInput"))

    @builtins.property
    @jsii.member(jsii_name="lfeFilterInput")
    def lfe_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lfeFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="metadataControlInput")
    def metadata_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "metadataControlInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf20d4ef564a9fb023d6329d892a003bc432202fe296ba738802729a2fa224f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bitstreamMode")
    def bitstream_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bitstreamMode"))

    @bitstream_mode.setter
    def bitstream_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__544fdfb43886bb4f00678fb248f622fd2d1e54979f91346689bbe82aa7ec0de2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitstreamMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3421763b5026bfaf0e030696beb5dfcad95a588af8af5ef5781d8357b72c1a5e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="dialnorm")
    def dialnorm(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "dialnorm"))

    @dialnorm.setter
    def dialnorm(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc1d250bb7a52215d8ae1c116f093d5525f11a4fbc4f5c1885880728436d7578)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dialnorm", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="drcProfile")
    def drc_profile(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcProfile"))

    @drc_profile.setter
    def drc_profile(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e23c82046e2552f9b5ffd81f9d07846be004ad621746e05e846d0e8d0c15f5e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcProfile", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="lfeFilter")
    def lfe_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lfeFilter"))

    @lfe_filter.setter
    def lfe_filter(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38c5e8c1d9f6ef78a7d4c25a9c431fefda530131509d1f8fe805d59a729fe27c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lfeFilter", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="metadataControl")
    def metadata_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "metadataControl"))

    @metadata_control.setter
    def metadata_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c373a1c819b966257cd6a0a7e8999d60c7f9997fecd6cdfbd9fec6df5edbbe3b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "metadataControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a7a3dc38f787eb1c980e17fb9c956b5e52768602a8ff2950b530e1c3d01a65f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "coding_mode": "codingMode",
        "dialnorm": "dialnorm",
        "drc_line": "drcLine",
        "drc_rf": "drcRf",
        "height_trim": "heightTrim",
        "surround_trim": "surroundTrim",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings:
    def __init__(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_line: typing.Optional[builtins.str] = None,
        drc_rf: typing.Optional[builtins.str] = None,
        height_trim: typing.Optional[jsii.Number] = None,
        surround_trim: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dialnorm: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_line: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_line MedialiveChannel#drc_line}.
        :param drc_rf: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_rf MedialiveChannel#drc_rf}.
        :param height_trim: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#height_trim MedialiveChannel#height_trim}.
        :param surround_trim: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_trim MedialiveChannel#surround_trim}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__586f4289ae60e4a7c64ae5b36f68007adebe36b3a94668f5559611838dc55e2f)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument dialnorm", value=dialnorm, expected_type=type_hints["dialnorm"])
            check_type(argname="argument drc_line", value=drc_line, expected_type=type_hints["drc_line"])
            check_type(argname="argument drc_rf", value=drc_rf, expected_type=type_hints["drc_rf"])
            check_type(argname="argument height_trim", value=height_trim, expected_type=type_hints["height_trim"])
            check_type(argname="argument surround_trim", value=surround_trim, expected_type=type_hints["surround_trim"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if dialnorm is not None:
            self._values["dialnorm"] = dialnorm
        if drc_line is not None:
            self._values["drc_line"] = drc_line
        if drc_rf is not None:
            self._values["drc_rf"] = drc_rf
        if height_trim is not None:
            self._values["height_trim"] = height_trim
        if surround_trim is not None:
            self._values["surround_trim"] = surround_trim

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dialnorm(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.'''
        result = self._values.get("dialnorm")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def drc_line(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_line MedialiveChannel#drc_line}.'''
        result = self._values.get("drc_line")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def drc_rf(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_rf MedialiveChannel#drc_rf}.'''
        result = self._values.get("drc_rf")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def height_trim(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#height_trim MedialiveChannel#height_trim}.'''
        result = self._values.get("height_trim")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def surround_trim(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_trim MedialiveChannel#surround_trim}.'''
        result = self._values.get("surround_trim")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87037ac1f9e134c505aba16d45308fc54085c998f221326f4df19cb05380b787)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetDialnorm")
    def reset_dialnorm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDialnorm", []))

    @jsii.member(jsii_name="resetDrcLine")
    def reset_drc_line(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcLine", []))

    @jsii.member(jsii_name="resetDrcRf")
    def reset_drc_rf(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcRf", []))

    @jsii.member(jsii_name="resetHeightTrim")
    def reset_height_trim(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeightTrim", []))

    @jsii.member(jsii_name="resetSurroundTrim")
    def reset_surround_trim(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSurroundTrim", []))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="dialnormInput")
    def dialnorm_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "dialnormInput"))

    @builtins.property
    @jsii.member(jsii_name="drcLineInput")
    def drc_line_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcLineInput"))

    @builtins.property
    @jsii.member(jsii_name="drcRfInput")
    def drc_rf_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcRfInput"))

    @builtins.property
    @jsii.member(jsii_name="heightTrimInput")
    def height_trim_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightTrimInput"))

    @builtins.property
    @jsii.member(jsii_name="surroundTrimInput")
    def surround_trim_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "surroundTrimInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd829a400e619f3043eb5e6c2fcacc78d7484d55ab2529587f5a76c6dfd04d6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e2922a58feac2ecf1053c2190d6d5dc4489f01c1537fa5a10650f7ce76d5aa2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="dialnorm")
    def dialnorm(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "dialnorm"))

    @dialnorm.setter
    def dialnorm(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e5155c49bf1abd13353cc59574e082f39b9edf38ef3559ff07c2b8b2ad01dd7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dialnorm", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="drcLine")
    def drc_line(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcLine"))

    @drc_line.setter
    def drc_line(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__961ef440a5f78a8252f3927ed05c69d8006db3a468d2c5592e2bdc0ba57f05d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcLine", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="drcRf")
    def drc_rf(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcRf"))

    @drc_rf.setter
    def drc_rf(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__668026c7bf32e50d3c7ce7c638383b80cf2e41d5794facbd9380b4f4d38c4514)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcRf", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="heightTrim")
    def height_trim(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "heightTrim"))

    @height_trim.setter
    def height_trim(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b435f61f3b52b5c2ad11db0c6b1a7295aca47950def1f5d6fbc3c885dca0ece)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "heightTrim", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="surroundTrim")
    def surround_trim(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "surroundTrim"))

    @surround_trim.setter
    def surround_trim(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16be18f5c394819c759669e853d50113c326591c219e91bc8a79e91a49838ef5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "surroundTrim", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b7f020d200fc15afb6922cd6c59ffb774dbad30b123b340e5ed6d2224b05da44)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings",
    jsii_struct_bases=[],
    name_mapping={
        "attenuation_control": "attenuationControl",
        "bitrate": "bitrate",
        "bitstream_mode": "bitstreamMode",
        "coding_mode": "codingMode",
        "dc_filter": "dcFilter",
        "dialnorm": "dialnorm",
        "drc_line": "drcLine",
        "drc_rf": "drcRf",
        "lfe_control": "lfeControl",
        "lfe_filter": "lfeFilter",
        "lo_ro_center_mix_level": "loRoCenterMixLevel",
        "lo_ro_surround_mix_level": "loRoSurroundMixLevel",
        "lt_rt_center_mix_level": "ltRtCenterMixLevel",
        "lt_rt_surround_mix_level": "ltRtSurroundMixLevel",
        "metadata_control": "metadataControl",
        "passthrough_control": "passthroughControl",
        "phase_control": "phaseControl",
        "stereo_downmix": "stereoDownmix",
        "surround_ex_mode": "surroundExMode",
        "surround_mode": "surroundMode",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings:
    def __init__(
        self,
        *,
        attenuation_control: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        bitstream_mode: typing.Optional[builtins.str] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dc_filter: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_line: typing.Optional[builtins.str] = None,
        drc_rf: typing.Optional[builtins.str] = None,
        lfe_control: typing.Optional[builtins.str] = None,
        lfe_filter: typing.Optional[builtins.str] = None,
        lo_ro_center_mix_level: typing.Optional[jsii.Number] = None,
        lo_ro_surround_mix_level: typing.Optional[jsii.Number] = None,
        lt_rt_center_mix_level: typing.Optional[jsii.Number] = None,
        lt_rt_surround_mix_level: typing.Optional[jsii.Number] = None,
        metadata_control: typing.Optional[builtins.str] = None,
        passthrough_control: typing.Optional[builtins.str] = None,
        phase_control: typing.Optional[builtins.str] = None,
        stereo_downmix: typing.Optional[builtins.str] = None,
        surround_ex_mode: typing.Optional[builtins.str] = None,
        surround_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param attenuation_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#attenuation_control MedialiveChannel#attenuation_control}.
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param bitstream_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dc_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dc_filter MedialiveChannel#dc_filter}.
        :param dialnorm: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_line: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_line MedialiveChannel#drc_line}.
        :param drc_rf: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_rf MedialiveChannel#drc_rf}.
        :param lfe_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_control MedialiveChannel#lfe_control}.
        :param lfe_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.
        :param lo_ro_center_mix_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lo_ro_center_mix_level MedialiveChannel#lo_ro_center_mix_level}.
        :param lo_ro_surround_mix_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lo_ro_surround_mix_level MedialiveChannel#lo_ro_surround_mix_level}.
        :param lt_rt_center_mix_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lt_rt_center_mix_level MedialiveChannel#lt_rt_center_mix_level}.
        :param lt_rt_surround_mix_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lt_rt_surround_mix_level MedialiveChannel#lt_rt_surround_mix_level}.
        :param metadata_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#metadata_control MedialiveChannel#metadata_control}.
        :param passthrough_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#passthrough_control MedialiveChannel#passthrough_control}.
        :param phase_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#phase_control MedialiveChannel#phase_control}.
        :param stereo_downmix: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stereo_downmix MedialiveChannel#stereo_downmix}.
        :param surround_ex_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_ex_mode MedialiveChannel#surround_ex_mode}.
        :param surround_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_mode MedialiveChannel#surround_mode}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d0187b4150e157229426fddc0208e7bd458801af866dffba8910c6f6a0ce578)
            check_type(argname="argument attenuation_control", value=attenuation_control, expected_type=type_hints["attenuation_control"])
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument bitstream_mode", value=bitstream_mode, expected_type=type_hints["bitstream_mode"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument dc_filter", value=dc_filter, expected_type=type_hints["dc_filter"])
            check_type(argname="argument dialnorm", value=dialnorm, expected_type=type_hints["dialnorm"])
            check_type(argname="argument drc_line", value=drc_line, expected_type=type_hints["drc_line"])
            check_type(argname="argument drc_rf", value=drc_rf, expected_type=type_hints["drc_rf"])
            check_type(argname="argument lfe_control", value=lfe_control, expected_type=type_hints["lfe_control"])
            check_type(argname="argument lfe_filter", value=lfe_filter, expected_type=type_hints["lfe_filter"])
            check_type(argname="argument lo_ro_center_mix_level", value=lo_ro_center_mix_level, expected_type=type_hints["lo_ro_center_mix_level"])
            check_type(argname="argument lo_ro_surround_mix_level", value=lo_ro_surround_mix_level, expected_type=type_hints["lo_ro_surround_mix_level"])
            check_type(argname="argument lt_rt_center_mix_level", value=lt_rt_center_mix_level, expected_type=type_hints["lt_rt_center_mix_level"])
            check_type(argname="argument lt_rt_surround_mix_level", value=lt_rt_surround_mix_level, expected_type=type_hints["lt_rt_surround_mix_level"])
            check_type(argname="argument metadata_control", value=metadata_control, expected_type=type_hints["metadata_control"])
            check_type(argname="argument passthrough_control", value=passthrough_control, expected_type=type_hints["passthrough_control"])
            check_type(argname="argument phase_control", value=phase_control, expected_type=type_hints["phase_control"])
            check_type(argname="argument stereo_downmix", value=stereo_downmix, expected_type=type_hints["stereo_downmix"])
            check_type(argname="argument surround_ex_mode", value=surround_ex_mode, expected_type=type_hints["surround_ex_mode"])
            check_type(argname="argument surround_mode", value=surround_mode, expected_type=type_hints["surround_mode"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if attenuation_control is not None:
            self._values["attenuation_control"] = attenuation_control
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if bitstream_mode is not None:
            self._values["bitstream_mode"] = bitstream_mode
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if dc_filter is not None:
            self._values["dc_filter"] = dc_filter
        if dialnorm is not None:
            self._values["dialnorm"] = dialnorm
        if drc_line is not None:
            self._values["drc_line"] = drc_line
        if drc_rf is not None:
            self._values["drc_rf"] = drc_rf
        if lfe_control is not None:
            self._values["lfe_control"] = lfe_control
        if lfe_filter is not None:
            self._values["lfe_filter"] = lfe_filter
        if lo_ro_center_mix_level is not None:
            self._values["lo_ro_center_mix_level"] = lo_ro_center_mix_level
        if lo_ro_surround_mix_level is not None:
            self._values["lo_ro_surround_mix_level"] = lo_ro_surround_mix_level
        if lt_rt_center_mix_level is not None:
            self._values["lt_rt_center_mix_level"] = lt_rt_center_mix_level
        if lt_rt_surround_mix_level is not None:
            self._values["lt_rt_surround_mix_level"] = lt_rt_surround_mix_level
        if metadata_control is not None:
            self._values["metadata_control"] = metadata_control
        if passthrough_control is not None:
            self._values["passthrough_control"] = passthrough_control
        if phase_control is not None:
            self._values["phase_control"] = phase_control
        if stereo_downmix is not None:
            self._values["stereo_downmix"] = stereo_downmix
        if surround_ex_mode is not None:
            self._values["surround_ex_mode"] = surround_ex_mode
        if surround_mode is not None:
            self._values["surround_mode"] = surround_mode

    @builtins.property
    def attenuation_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#attenuation_control MedialiveChannel#attenuation_control}.'''
        result = self._values.get("attenuation_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def bitstream_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.'''
        result = self._values.get("bitstream_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dc_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dc_filter MedialiveChannel#dc_filter}.'''
        result = self._values.get("dc_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dialnorm(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.'''
        result = self._values.get("dialnorm")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def drc_line(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_line MedialiveChannel#drc_line}.'''
        result = self._values.get("drc_line")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def drc_rf(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_rf MedialiveChannel#drc_rf}.'''
        result = self._values.get("drc_rf")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def lfe_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_control MedialiveChannel#lfe_control}.'''
        result = self._values.get("lfe_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def lfe_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.'''
        result = self._values.get("lfe_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def lo_ro_center_mix_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lo_ro_center_mix_level MedialiveChannel#lo_ro_center_mix_level}.'''
        result = self._values.get("lo_ro_center_mix_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def lo_ro_surround_mix_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lo_ro_surround_mix_level MedialiveChannel#lo_ro_surround_mix_level}.'''
        result = self._values.get("lo_ro_surround_mix_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def lt_rt_center_mix_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lt_rt_center_mix_level MedialiveChannel#lt_rt_center_mix_level}.'''
        result = self._values.get("lt_rt_center_mix_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def lt_rt_surround_mix_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lt_rt_surround_mix_level MedialiveChannel#lt_rt_surround_mix_level}.'''
        result = self._values.get("lt_rt_surround_mix_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def metadata_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#metadata_control MedialiveChannel#metadata_control}.'''
        result = self._values.get("metadata_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def passthrough_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#passthrough_control MedialiveChannel#passthrough_control}.'''
        result = self._values.get("passthrough_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def phase_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#phase_control MedialiveChannel#phase_control}.'''
        result = self._values.get("phase_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def stereo_downmix(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stereo_downmix MedialiveChannel#stereo_downmix}.'''
        result = self._values.get("stereo_downmix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def surround_ex_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_ex_mode MedialiveChannel#surround_ex_mode}.'''
        result = self._values.get("surround_ex_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def surround_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_mode MedialiveChannel#surround_mode}.'''
        result = self._values.get("surround_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc64159e416489f08069658a7f04584470471de904f086c4aabc7f9e9ac355ef)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAttenuationControl")
    def reset_attenuation_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAttenuationControl", []))

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBitstreamMode")
    def reset_bitstream_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitstreamMode", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetDcFilter")
    def reset_dc_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDcFilter", []))

    @jsii.member(jsii_name="resetDialnorm")
    def reset_dialnorm(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDialnorm", []))

    @jsii.member(jsii_name="resetDrcLine")
    def reset_drc_line(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcLine", []))

    @jsii.member(jsii_name="resetDrcRf")
    def reset_drc_rf(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDrcRf", []))

    @jsii.member(jsii_name="resetLfeControl")
    def reset_lfe_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLfeControl", []))

    @jsii.member(jsii_name="resetLfeFilter")
    def reset_lfe_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLfeFilter", []))

    @jsii.member(jsii_name="resetLoRoCenterMixLevel")
    def reset_lo_ro_center_mix_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLoRoCenterMixLevel", []))

    @jsii.member(jsii_name="resetLoRoSurroundMixLevel")
    def reset_lo_ro_surround_mix_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLoRoSurroundMixLevel", []))

    @jsii.member(jsii_name="resetLtRtCenterMixLevel")
    def reset_lt_rt_center_mix_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLtRtCenterMixLevel", []))

    @jsii.member(jsii_name="resetLtRtSurroundMixLevel")
    def reset_lt_rt_surround_mix_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLtRtSurroundMixLevel", []))

    @jsii.member(jsii_name="resetMetadataControl")
    def reset_metadata_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMetadataControl", []))

    @jsii.member(jsii_name="resetPassthroughControl")
    def reset_passthrough_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassthroughControl", []))

    @jsii.member(jsii_name="resetPhaseControl")
    def reset_phase_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPhaseControl", []))

    @jsii.member(jsii_name="resetStereoDownmix")
    def reset_stereo_downmix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStereoDownmix", []))

    @jsii.member(jsii_name="resetSurroundExMode")
    def reset_surround_ex_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSurroundExMode", []))

    @jsii.member(jsii_name="resetSurroundMode")
    def reset_surround_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSurroundMode", []))

    @builtins.property
    @jsii.member(jsii_name="attenuationControlInput")
    def attenuation_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "attenuationControlInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bitstreamModeInput")
    def bitstream_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bitstreamModeInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="dcFilterInput")
    def dc_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dcFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="dialnormInput")
    def dialnorm_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "dialnormInput"))

    @builtins.property
    @jsii.member(jsii_name="drcLineInput")
    def drc_line_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcLineInput"))

    @builtins.property
    @jsii.member(jsii_name="drcRfInput")
    def drc_rf_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "drcRfInput"))

    @builtins.property
    @jsii.member(jsii_name="lfeControlInput")
    def lfe_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lfeControlInput"))

    @builtins.property
    @jsii.member(jsii_name="lfeFilterInput")
    def lfe_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lfeFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="loRoCenterMixLevelInput")
    def lo_ro_center_mix_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "loRoCenterMixLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="loRoSurroundMixLevelInput")
    def lo_ro_surround_mix_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "loRoSurroundMixLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="ltRtCenterMixLevelInput")
    def lt_rt_center_mix_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "ltRtCenterMixLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="ltRtSurroundMixLevelInput")
    def lt_rt_surround_mix_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "ltRtSurroundMixLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="metadataControlInput")
    def metadata_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "metadataControlInput"))

    @builtins.property
    @jsii.member(jsii_name="passthroughControlInput")
    def passthrough_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passthroughControlInput"))

    @builtins.property
    @jsii.member(jsii_name="phaseControlInput")
    def phase_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "phaseControlInput"))

    @builtins.property
    @jsii.member(jsii_name="stereoDownmixInput")
    def stereo_downmix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "stereoDownmixInput"))

    @builtins.property
    @jsii.member(jsii_name="surroundExModeInput")
    def surround_ex_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "surroundExModeInput"))

    @builtins.property
    @jsii.member(jsii_name="surroundModeInput")
    def surround_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "surroundModeInput"))

    @builtins.property
    @jsii.member(jsii_name="attenuationControl")
    def attenuation_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "attenuationControl"))

    @attenuation_control.setter
    def attenuation_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c40cefc4fdc4952599f3e4796d799c230b3a4d7e1e89c101ca995ffcf02580d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "attenuationControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c75d65fd2335aade7bced4a577a22cd49a44bcbc703c1110493d4564afdc27c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bitstreamMode")
    def bitstream_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bitstreamMode"))

    @bitstream_mode.setter
    def bitstream_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04b46db1edb742f9f0cda24227ecca0322891148cd8dca36e6010dfaa9c336e8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitstreamMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1469e6ea1fb23c6e67624d40a3c800b990af2f0d7c44b873c3d8c9c50c00c939)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="dcFilter")
    def dc_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dcFilter"))

    @dc_filter.setter
    def dc_filter(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__138fed7253c1f2cff3e8cefd61b75e3daf46ef00adb2b823e0ba48438bd28b03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dcFilter", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="dialnorm")
    def dialnorm(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "dialnorm"))

    @dialnorm.setter
    def dialnorm(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4789f065941000d46a40b78ce7a39fa533b3109c46741f06c98fc49bf2bae39a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dialnorm", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="drcLine")
    def drc_line(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcLine"))

    @drc_line.setter
    def drc_line(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf77935d4dedbc40a3ccb05b0de40bc04e63099bf876b45050ecfd07cf563b52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcLine", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="drcRf")
    def drc_rf(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "drcRf"))

    @drc_rf.setter
    def drc_rf(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__693a513e74d6e016ae053742d312b5215508edbe2d6a17ee005794b90a522256)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "drcRf", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="lfeControl")
    def lfe_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lfeControl"))

    @lfe_control.setter
    def lfe_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29996268529be4779706e1059e508b74540e62e805bada9a0610d5164c9b5126)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lfeControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="lfeFilter")
    def lfe_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lfeFilter"))

    @lfe_filter.setter
    def lfe_filter(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d8396e17a0c9413d42270a35307df3273b9287dd27ed617a0f004fa779236d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lfeFilter", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="loRoCenterMixLevel")
    def lo_ro_center_mix_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "loRoCenterMixLevel"))

    @lo_ro_center_mix_level.setter
    def lo_ro_center_mix_level(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e7bc24ed2a69a34fd1595cd711c0a5cd68b0d797a1f53cf40b26ac39920fe87)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "loRoCenterMixLevel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="loRoSurroundMixLevel")
    def lo_ro_surround_mix_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "loRoSurroundMixLevel"))

    @lo_ro_surround_mix_level.setter
    def lo_ro_surround_mix_level(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee4a870997f7a04d792d3fca2dcab08651e433a564add59aee88faebd6394bc6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "loRoSurroundMixLevel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ltRtCenterMixLevel")
    def lt_rt_center_mix_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "ltRtCenterMixLevel"))

    @lt_rt_center_mix_level.setter
    def lt_rt_center_mix_level(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a188858053a2a5b0ea05c68902c12412a0d3e6e176b2d3189669b3c839414d25)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ltRtCenterMixLevel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ltRtSurroundMixLevel")
    def lt_rt_surround_mix_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "ltRtSurroundMixLevel"))

    @lt_rt_surround_mix_level.setter
    def lt_rt_surround_mix_level(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48af5f97bbc4cc3a9f737d73a736eae34e2d0ea4feef085c7e8f8b0334082804)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ltRtSurroundMixLevel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="metadataControl")
    def metadata_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "metadataControl"))

    @metadata_control.setter
    def metadata_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa8543c7e52cfb6e29a3e0021f14cf5192370cc4762ddf9c8cd3770e07b28094)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "metadataControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="passthroughControl")
    def passthrough_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passthroughControl"))

    @passthrough_control.setter
    def passthrough_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c6c33f140b77c1c5e9a321ffc61b4f2456dc7d2ca99d64ebd55a75e274b49de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passthroughControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="phaseControl")
    def phase_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "phaseControl"))

    @phase_control.setter
    def phase_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed240b388804ed0797976d069223aaaee9921ba5871dca1bf712f63e55f58c3a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "phaseControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="stereoDownmix")
    def stereo_downmix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "stereoDownmix"))

    @stereo_downmix.setter
    def stereo_downmix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d81ca1ff1e11f30ba4580a95109b3a6841dcdb94ba51589693b3780ede7ec4b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "stereoDownmix", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="surroundExMode")
    def surround_ex_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "surroundExMode"))

    @surround_ex_mode.setter
    def surround_ex_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94d49a2a7809c654668c169638c19eaa30a487160cb2e55272b8805acb8dbfff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "surroundExMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="surroundMode")
    def surround_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "surroundMode"))

    @surround_mode.setter
    def surround_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8635c5b6488b6f00c704e6c52efcc249ac3d3adc0b6d9581490e3bcc4e145184)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "surroundMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8588ad1202d654a65460284600b2666bf665df4b4c660add649398eb84e256b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "coding_mode": "codingMode",
        "sample_rate": "sampleRate",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings:
    def __init__(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param sample_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87c925aec3da382660db34dec415b91e0717ea12d3650312a2aad7d0c9be8f9e)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument sample_rate", value=sample_rate, expected_type=type_hints["sample_rate"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if sample_rate is not None:
            self._values["sample_rate"] = sample_rate

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sample_rate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.'''
        result = self._values.get("sample_rate")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25ef19b51b9dab854b3c3be6b4371da831d2404389685240a83ef6c56e40a8e4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetSampleRate")
    def reset_sample_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSampleRate", []))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="sampleRateInput")
    def sample_rate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sampleRateInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6586d039166172bf391b8c4359e1feea8d3b1bedf1878a7b8b19ccf93da2cc1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d66073d5b1baeb205a908cf6145918d7ea06da560370029b3aa59454802955b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sampleRate")
    def sample_rate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sampleRate"))

    @sample_rate.setter
    def sample_rate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9bd0dd7042a272ef8fc28de1faedaf3a11a3eeb251db668e642652b51ae294f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sampleRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5db2a9d8d58f5077eb0dfb7f498620f2eaf857d575497a54c5abf3e41f8cf55)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__702b8ee4d2f117e2eea80be5456167f86b6e8f1a294e6e08a2468f5876f17f23)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAacSettings")
    def put_aac_settings(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        input_type: typing.Optional[builtins.str] = None,
        profile: typing.Optional[builtins.str] = None,
        rate_control_mode: typing.Optional[builtins.str] = None,
        raw_format: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
        spec: typing.Optional[builtins.str] = None,
        vbr_quality: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param input_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_type MedialiveChannel#input_type}.
        :param profile: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.
        :param rate_control_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.
        :param raw_format: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#raw_format MedialiveChannel#raw_format}.
        :param sample_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        :param spec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#spec MedialiveChannel#spec}.
        :param vbr_quality: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#vbr_quality MedialiveChannel#vbr_quality}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings(
            bitrate=bitrate,
            coding_mode=coding_mode,
            input_type=input_type,
            profile=profile,
            rate_control_mode=rate_control_mode,
            raw_format=raw_format,
            sample_rate=sample_rate,
            spec=spec,
            vbr_quality=vbr_quality,
        )

        return typing.cast(None, jsii.invoke(self, "putAacSettings", [value]))

    @jsii.member(jsii_name="putAc3Settings")
    def put_ac3_settings(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        bitstream_mode: typing.Optional[builtins.str] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_profile: typing.Optional[builtins.str] = None,
        lfe_filter: typing.Optional[builtins.str] = None,
        metadata_control: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param bitstream_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dialnorm: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_profile: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_profile MedialiveChannel#drc_profile}.
        :param lfe_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.
        :param metadata_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#metadata_control MedialiveChannel#metadata_control}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings(
            bitrate=bitrate,
            bitstream_mode=bitstream_mode,
            coding_mode=coding_mode,
            dialnorm=dialnorm,
            drc_profile=drc_profile,
            lfe_filter=lfe_filter,
            metadata_control=metadata_control,
        )

        return typing.cast(None, jsii.invoke(self, "putAc3Settings", [value]))

    @jsii.member(jsii_name="putEac3AtmosSettings")
    def put_eac3_atmos_settings(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_line: typing.Optional[builtins.str] = None,
        drc_rf: typing.Optional[builtins.str] = None,
        height_trim: typing.Optional[jsii.Number] = None,
        surround_trim: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dialnorm: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_line: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_line MedialiveChannel#drc_line}.
        :param drc_rf: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_rf MedialiveChannel#drc_rf}.
        :param height_trim: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#height_trim MedialiveChannel#height_trim}.
        :param surround_trim: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_trim MedialiveChannel#surround_trim}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings(
            bitrate=bitrate,
            coding_mode=coding_mode,
            dialnorm=dialnorm,
            drc_line=drc_line,
            drc_rf=drc_rf,
            height_trim=height_trim,
            surround_trim=surround_trim,
        )

        return typing.cast(None, jsii.invoke(self, "putEac3AtmosSettings", [value]))

    @jsii.member(jsii_name="putEac3Settings")
    def put_eac3_settings(
        self,
        *,
        attenuation_control: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        bitstream_mode: typing.Optional[builtins.str] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        dc_filter: typing.Optional[builtins.str] = None,
        dialnorm: typing.Optional[jsii.Number] = None,
        drc_line: typing.Optional[builtins.str] = None,
        drc_rf: typing.Optional[builtins.str] = None,
        lfe_control: typing.Optional[builtins.str] = None,
        lfe_filter: typing.Optional[builtins.str] = None,
        lo_ro_center_mix_level: typing.Optional[jsii.Number] = None,
        lo_ro_surround_mix_level: typing.Optional[jsii.Number] = None,
        lt_rt_center_mix_level: typing.Optional[jsii.Number] = None,
        lt_rt_surround_mix_level: typing.Optional[jsii.Number] = None,
        metadata_control: typing.Optional[builtins.str] = None,
        passthrough_control: typing.Optional[builtins.str] = None,
        phase_control: typing.Optional[builtins.str] = None,
        stereo_downmix: typing.Optional[builtins.str] = None,
        surround_ex_mode: typing.Optional[builtins.str] = None,
        surround_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param attenuation_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#attenuation_control MedialiveChannel#attenuation_control}.
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param bitstream_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitstream_mode MedialiveChannel#bitstream_mode}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param dc_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dc_filter MedialiveChannel#dc_filter}.
        :param dialnorm: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dialnorm MedialiveChannel#dialnorm}.
        :param drc_line: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_line MedialiveChannel#drc_line}.
        :param drc_rf: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#drc_rf MedialiveChannel#drc_rf}.
        :param lfe_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_control MedialiveChannel#lfe_control}.
        :param lfe_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lfe_filter MedialiveChannel#lfe_filter}.
        :param lo_ro_center_mix_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lo_ro_center_mix_level MedialiveChannel#lo_ro_center_mix_level}.
        :param lo_ro_surround_mix_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lo_ro_surround_mix_level MedialiveChannel#lo_ro_surround_mix_level}.
        :param lt_rt_center_mix_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lt_rt_center_mix_level MedialiveChannel#lt_rt_center_mix_level}.
        :param lt_rt_surround_mix_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#lt_rt_surround_mix_level MedialiveChannel#lt_rt_surround_mix_level}.
        :param metadata_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#metadata_control MedialiveChannel#metadata_control}.
        :param passthrough_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#passthrough_control MedialiveChannel#passthrough_control}.
        :param phase_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#phase_control MedialiveChannel#phase_control}.
        :param stereo_downmix: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stereo_downmix MedialiveChannel#stereo_downmix}.
        :param surround_ex_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_ex_mode MedialiveChannel#surround_ex_mode}.
        :param surround_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#surround_mode MedialiveChannel#surround_mode}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings(
            attenuation_control=attenuation_control,
            bitrate=bitrate,
            bitstream_mode=bitstream_mode,
            coding_mode=coding_mode,
            dc_filter=dc_filter,
            dialnorm=dialnorm,
            drc_line=drc_line,
            drc_rf=drc_rf,
            lfe_control=lfe_control,
            lfe_filter=lfe_filter,
            lo_ro_center_mix_level=lo_ro_center_mix_level,
            lo_ro_surround_mix_level=lo_ro_surround_mix_level,
            lt_rt_center_mix_level=lt_rt_center_mix_level,
            lt_rt_surround_mix_level=lt_rt_surround_mix_level,
            metadata_control=metadata_control,
            passthrough_control=passthrough_control,
            phase_control=phase_control,
            stereo_downmix=stereo_downmix,
            surround_ex_mode=surround_ex_mode,
            surround_mode=surround_mode,
        )

        return typing.cast(None, jsii.invoke(self, "putEac3Settings", [value]))

    @jsii.member(jsii_name="putMp2Settings")
    def put_mp2_settings(
        self,
        *,
        bitrate: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param sample_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings(
            bitrate=bitrate, coding_mode=coding_mode, sample_rate=sample_rate
        )

        return typing.cast(None, jsii.invoke(self, "putMp2Settings", [value]))

    @jsii.member(jsii_name="putPassThroughSettings")
    def put_pass_through_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings()

        return typing.cast(None, jsii.invoke(self, "putPassThroughSettings", [value]))

    @jsii.member(jsii_name="putWavSettings")
    def put_wav_settings(
        self,
        *,
        bit_depth: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bit_depth: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bit_depth MedialiveChannel#bit_depth}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param sample_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings(
            bit_depth=bit_depth, coding_mode=coding_mode, sample_rate=sample_rate
        )

        return typing.cast(None, jsii.invoke(self, "putWavSettings", [value]))

    @jsii.member(jsii_name="resetAacSettings")
    def reset_aac_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAacSettings", []))

    @jsii.member(jsii_name="resetAc3Settings")
    def reset_ac3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAc3Settings", []))

    @jsii.member(jsii_name="resetEac3AtmosSettings")
    def reset_eac3_atmos_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEac3AtmosSettings", []))

    @jsii.member(jsii_name="resetEac3Settings")
    def reset_eac3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEac3Settings", []))

    @jsii.member(jsii_name="resetMp2Settings")
    def reset_mp2_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMp2Settings", []))

    @jsii.member(jsii_name="resetPassThroughSettings")
    def reset_pass_through_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPassThroughSettings", []))

    @jsii.member(jsii_name="resetWavSettings")
    def reset_wav_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWavSettings", []))

    @builtins.property
    @jsii.member(jsii_name="aacSettings")
    def aac_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference, jsii.get(self, "aacSettings"))

    @builtins.property
    @jsii.member(jsii_name="ac3Settings")
    def ac3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference, jsii.get(self, "ac3Settings"))

    @builtins.property
    @jsii.member(jsii_name="eac3AtmosSettings")
    def eac3_atmos_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference, jsii.get(self, "eac3AtmosSettings"))

    @builtins.property
    @jsii.member(jsii_name="eac3Settings")
    def eac3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference, jsii.get(self, "eac3Settings"))

    @builtins.property
    @jsii.member(jsii_name="mp2Settings")
    def mp2_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference, jsii.get(self, "mp2Settings"))

    @builtins.property
    @jsii.member(jsii_name="passThroughSettings")
    def pass_through_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference", jsii.get(self, "passThroughSettings"))

    @builtins.property
    @jsii.member(jsii_name="wavSettings")
    def wav_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference", jsii.get(self, "wavSettings"))

    @builtins.property
    @jsii.member(jsii_name="aacSettingsInput")
    def aac_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings], jsii.get(self, "aacSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="ac3SettingsInput")
    def ac3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings], jsii.get(self, "ac3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="eac3AtmosSettingsInput")
    def eac3_atmos_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings], jsii.get(self, "eac3AtmosSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="eac3SettingsInput")
    def eac3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings], jsii.get(self, "eac3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="mp2SettingsInput")
    def mp2_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings], jsii.get(self, "mp2SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="passThroughSettingsInput")
    def pass_through_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings"], jsii.get(self, "passThroughSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="wavSettingsInput")
    def wav_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings"], jsii.get(self, "wavSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__180a2d0671b48de79ad617d0e6cc7934e0259cc9e0bae9dfa53918fd42aa2b7d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e8ed0a9934194e86f2f13b55dd449c4af72359c7d96a0d7484c220a1acd3865)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__765fa64e46099fffcfd3d7a7f2dffd586526c5caec84a8ed0c9a8202871a6b39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings",
    jsii_struct_bases=[],
    name_mapping={
        "bit_depth": "bitDepth",
        "coding_mode": "codingMode",
        "sample_rate": "sampleRate",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings:
    def __init__(
        self,
        *,
        bit_depth: typing.Optional[jsii.Number] = None,
        coding_mode: typing.Optional[builtins.str] = None,
        sample_rate: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param bit_depth: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bit_depth MedialiveChannel#bit_depth}.
        :param coding_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.
        :param sample_rate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a39a1fb68f88e1088da272d1117a79cec24c38d1d99abf87d41808300b432879)
            check_type(argname="argument bit_depth", value=bit_depth, expected_type=type_hints["bit_depth"])
            check_type(argname="argument coding_mode", value=coding_mode, expected_type=type_hints["coding_mode"])
            check_type(argname="argument sample_rate", value=sample_rate, expected_type=type_hints["sample_rate"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if bit_depth is not None:
            self._values["bit_depth"] = bit_depth
        if coding_mode is not None:
            self._values["coding_mode"] = coding_mode
        if sample_rate is not None:
            self._values["sample_rate"] = sample_rate

    @builtins.property
    def bit_depth(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bit_depth MedialiveChannel#bit_depth}.'''
        result = self._values.get("bit_depth")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def coding_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#coding_mode MedialiveChannel#coding_mode}.'''
        result = self._values.get("coding_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sample_rate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sample_rate MedialiveChannel#sample_rate}.'''
        result = self._values.get("sample_rate")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ebc9975deebeeb4656e42009e1d1d151ca9b1f52807e14115a6cd5e310210eb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBitDepth")
    def reset_bit_depth(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitDepth", []))

    @jsii.member(jsii_name="resetCodingMode")
    def reset_coding_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodingMode", []))

    @jsii.member(jsii_name="resetSampleRate")
    def reset_sample_rate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSampleRate", []))

    @builtins.property
    @jsii.member(jsii_name="bitDepthInput")
    def bit_depth_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitDepthInput"))

    @builtins.property
    @jsii.member(jsii_name="codingModeInput")
    def coding_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="sampleRateInput")
    def sample_rate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sampleRateInput"))

    @builtins.property
    @jsii.member(jsii_name="bitDepth")
    def bit_depth(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitDepth"))

    @bit_depth.setter
    def bit_depth(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1edca5cc0d60d5dc29894568220f7932c4ed603ba98970ae73ae16593f503d8b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitDepth", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="codingMode")
    def coding_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codingMode"))

    @coding_mode.setter
    def coding_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__138a66f09db6b8b9bd1ba926c32e69f3c1df9ff415b61dd54f030177a5c6ab9f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codingMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sampleRate")
    def sample_rate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sampleRate"))

    @sample_rate.setter
    def sample_rate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__90ab871b28f863309004a8d7967623dfb4e7e3ea4cf9cc88ad26e9dd5e21f51f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sampleRate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82e7beba4df83c5f75bbc9163750d04b512465fa13a0d6f68dcc77d308cb8208)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52b7d35bcdc66b4e697516a882830d914b2d070f334184293ef1b761a46ad66c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c9a3fd95d3ea06dcc25b092208501321edb85b3a32097024642ce7bba789ded)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__137de7b1eb128db2ea42f1062f813fca518f76ca445b11fe3089d37d024a4de7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fda0392bfe29b81945ca04d077349bf0b0cadf03d9dd1993a8f16d5a81080716)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e73163141cd4b0ef034d7e408f32d070be71f72712c519a9979da95fa55d4cf9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3065f4702c467841670e3b2d9e6434c97915b8be9c88d87720cd0d99041a81e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb23b5fe83d0aa16b7d5f2225851c1ff8a27a8a671e41154c7f52f8c5dd12155)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAudioNormalizationSettings")
    def put_audio_normalization_settings(
        self,
        *,
        algorithm: typing.Optional[builtins.str] = None,
        algorithm_control: typing.Optional[builtins.str] = None,
        target_lkfs: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param algorithm: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#algorithm MedialiveChannel#algorithm}.
        :param algorithm_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#algorithm_control MedialiveChannel#algorithm_control}.
        :param target_lkfs: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#target_lkfs MedialiveChannel#target_lkfs}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings(
            algorithm=algorithm,
            algorithm_control=algorithm_control,
            target_lkfs=target_lkfs,
        )

        return typing.cast(None, jsii.invoke(self, "putAudioNormalizationSettings", [value]))

    @jsii.member(jsii_name="putAudioWatermarkSettings")
    def put_audio_watermark_settings(
        self,
        *,
        nielsen_watermarks_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param nielsen_watermarks_settings: nielsen_watermarks_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_watermarks_settings MedialiveChannel#nielsen_watermarks_settings}
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings(
            nielsen_watermarks_settings=nielsen_watermarks_settings
        )

        return typing.cast(None, jsii.invoke(self, "putAudioWatermarkSettings", [value]))

    @jsii.member(jsii_name="putCodecSettings")
    def put_codec_settings(
        self,
        *,
        aac_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        ac3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
        eac3_atmos_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        eac3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
        mp2_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings, typing.Dict[builtins.str, typing.Any]]] = None,
        pass_through_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        wav_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param aac_settings: aac_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#aac_settings MedialiveChannel#aac_settings}
        :param ac3_settings: ac3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ac3_settings MedialiveChannel#ac3_settings}
        :param eac3_atmos_settings: eac3_atmos_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#eac3_atmos_settings MedialiveChannel#eac3_atmos_settings}
        :param eac3_settings: eac3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#eac3_settings MedialiveChannel#eac3_settings}
        :param mp2_settings: mp2_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mp2_settings MedialiveChannel#mp2_settings}
        :param pass_through_settings: pass_through_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pass_through_settings MedialiveChannel#pass_through_settings}
        :param wav_settings: wav_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#wav_settings MedialiveChannel#wav_settings}
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings(
            aac_settings=aac_settings,
            ac3_settings=ac3_settings,
            eac3_atmos_settings=eac3_atmos_settings,
            eac3_settings=eac3_settings,
            mp2_settings=mp2_settings,
            pass_through_settings=pass_through_settings,
            wav_settings=wav_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putCodecSettings", [value]))

    @jsii.member(jsii_name="putRemixSettings")
    def put_remix_settings(
        self,
        *,
        channel_mappings: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings", typing.Dict[builtins.str, typing.Any]]]],
        channels_in: typing.Optional[jsii.Number] = None,
        channels_out: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param channel_mappings: channel_mappings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channel_mappings MedialiveChannel#channel_mappings}
        :param channels_in: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channels_in MedialiveChannel#channels_in}.
        :param channels_out: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channels_out MedialiveChannel#channels_out}.
        '''
        value = MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings(
            channel_mappings=channel_mappings,
            channels_in=channels_in,
            channels_out=channels_out,
        )

        return typing.cast(None, jsii.invoke(self, "putRemixSettings", [value]))

    @jsii.member(jsii_name="resetAudioNormalizationSettings")
    def reset_audio_normalization_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioNormalizationSettings", []))

    @jsii.member(jsii_name="resetAudioType")
    def reset_audio_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioType", []))

    @jsii.member(jsii_name="resetAudioTypeControl")
    def reset_audio_type_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioTypeControl", []))

    @jsii.member(jsii_name="resetAudioWatermarkSettings")
    def reset_audio_watermark_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioWatermarkSettings", []))

    @jsii.member(jsii_name="resetCodecSettings")
    def reset_codec_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodecSettings", []))

    @jsii.member(jsii_name="resetLanguageCode")
    def reset_language_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageCode", []))

    @jsii.member(jsii_name="resetLanguageCodeControl")
    def reset_language_code_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageCodeControl", []))

    @jsii.member(jsii_name="resetRemixSettings")
    def reset_remix_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRemixSettings", []))

    @jsii.member(jsii_name="resetStreamName")
    def reset_stream_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStreamName", []))

    @builtins.property
    @jsii.member(jsii_name="audioNormalizationSettings")
    def audio_normalization_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference, jsii.get(self, "audioNormalizationSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioWatermarkSettings")
    def audio_watermark_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference, jsii.get(self, "audioWatermarkSettings"))

    @builtins.property
    @jsii.member(jsii_name="codecSettings")
    def codec_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference, jsii.get(self, "codecSettings"))

    @builtins.property
    @jsii.member(jsii_name="remixSettings")
    def remix_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference", jsii.get(self, "remixSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioNormalizationSettingsInput")
    def audio_normalization_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings], jsii.get(self, "audioNormalizationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorNameInput")
    def audio_selector_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioSelectorNameInput"))

    @builtins.property
    @jsii.member(jsii_name="audioTypeControlInput")
    def audio_type_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioTypeControlInput"))

    @builtins.property
    @jsii.member(jsii_name="audioTypeInput")
    def audio_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="audioWatermarkSettingsInput")
    def audio_watermark_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings], jsii.get(self, "audioWatermarkSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="codecSettingsInput")
    def codec_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings], jsii.get(self, "codecSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeControlInput")
    def language_code_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeControlInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="remixSettingsInput")
    def remix_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings"], jsii.get(self, "remixSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="streamNameInput")
    def stream_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "streamNameInput"))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorName")
    def audio_selector_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioSelectorName"))

    @audio_selector_name.setter
    def audio_selector_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ea34ec5fcff4d0698bdae943b56ea2e6fcaaf83424431ec7fdcb6f01f52aacb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioSelectorName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioType")
    def audio_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioType"))

    @audio_type.setter
    def audio_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f76f2220237e5259c99d056d4a48de32af848bddfdd3230fd9abad6f975394f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioTypeControl")
    def audio_type_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioTypeControl"))

    @audio_type_control.setter
    def audio_type_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a84fce341e0972935dfb58a4c5446f028f15124437184411d61d64aa3d36df5d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioTypeControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__919eb037823f241dc203d9a6a158718988746efcdf331c9b3d6712a9aa983e56)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="languageCodeControl")
    def language_code_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCodeControl"))

    @language_code_control.setter
    def language_code_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f569dae4c8fc7b13558c0fb8cec30f31061d96d211ada7675ead0a4ca453ef4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCodeControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a6856be9b2846a6375b07a2b2a29e7a94ecc6fa33812f9866fd7fc659d0c9f80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="streamName")
    def stream_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "streamName"))

    @stream_name.setter
    def stream_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__22a250636376a8780fe47bf4b3ccccd5b8c0472ee13a056aa8b3862020a073a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "streamName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8af23194b7056fed94c6ae232c6ba89f50aa8daf48e6ca9de88c2df71a8744c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings",
    jsii_struct_bases=[],
    name_mapping={
        "channel_mappings": "channelMappings",
        "channels_in": "channelsIn",
        "channels_out": "channelsOut",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings:
    def __init__(
        self,
        *,
        channel_mappings: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings", typing.Dict[builtins.str, typing.Any]]]],
        channels_in: typing.Optional[jsii.Number] = None,
        channels_out: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param channel_mappings: channel_mappings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channel_mappings MedialiveChannel#channel_mappings}
        :param channels_in: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channels_in MedialiveChannel#channels_in}.
        :param channels_out: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channels_out MedialiveChannel#channels_out}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__569885f30328974924c99c6cbcd91ec00b08a3f761f8e91de8fd8d93bc0db758)
            check_type(argname="argument channel_mappings", value=channel_mappings, expected_type=type_hints["channel_mappings"])
            check_type(argname="argument channels_in", value=channels_in, expected_type=type_hints["channels_in"])
            check_type(argname="argument channels_out", value=channels_out, expected_type=type_hints["channels_out"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "channel_mappings": channel_mappings,
        }
        if channels_in is not None:
            self._values["channels_in"] = channels_in
        if channels_out is not None:
            self._values["channels_out"] = channels_out

    @builtins.property
    def channel_mappings(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings"]]:
        '''channel_mappings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channel_mappings MedialiveChannel#channel_mappings}
        '''
        result = self._values.get("channel_mappings")
        assert result is not None, "Required property 'channel_mappings' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings"]], result)

    @builtins.property
    def channels_in(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channels_in MedialiveChannel#channels_in}.'''
        result = self._values.get("channels_in")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def channels_out(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#channels_out MedialiveChannel#channels_out}.'''
        result = self._values.get("channels_out")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings",
    jsii_struct_bases=[],
    name_mapping={
        "input_channel_levels": "inputChannelLevels",
        "output_channel": "outputChannel",
    },
)
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings:
    def __init__(
        self,
        *,
        input_channel_levels: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels", typing.Dict[builtins.str, typing.Any]]]],
        output_channel: jsii.Number,
    ) -> None:
        '''
        :param input_channel_levels: input_channel_levels block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_channel_levels MedialiveChannel#input_channel_levels}
        :param output_channel: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_channel MedialiveChannel#output_channel}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ebcc2167fc051c1cce8ff35b82454605d76a7c415f4ecda2973154245a10ee3)
            check_type(argname="argument input_channel_levels", value=input_channel_levels, expected_type=type_hints["input_channel_levels"])
            check_type(argname="argument output_channel", value=output_channel, expected_type=type_hints["output_channel"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "input_channel_levels": input_channel_levels,
            "output_channel": output_channel,
        }

    @builtins.property
    def input_channel_levels(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels"]]:
        '''input_channel_levels block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_channel_levels MedialiveChannel#input_channel_levels}
        '''
        result = self._values.get("input_channel_levels")
        assert result is not None, "Required property 'input_channel_levels' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels"]], result)

    @builtins.property
    def output_channel(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_channel MedialiveChannel#output_channel}.'''
        result = self._values.get("output_channel")
        assert result is not None, "Required property 'output_channel' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels",
    jsii_struct_bases=[],
    name_mapping={"gain": "gain", "input_channel": "inputChannel"},
)
class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels:
    def __init__(self, *, gain: jsii.Number, input_channel: jsii.Number) -> None:
        '''
        :param gain: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gain MedialiveChannel#gain}.
        :param input_channel: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_channel MedialiveChannel#input_channel}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__833c5b3779b210c9609fc14d700149be912cefcf694937510f1e6471636ca77a)
            check_type(argname="argument gain", value=gain, expected_type=type_hints["gain"])
            check_type(argname="argument input_channel", value=input_channel, expected_type=type_hints["input_channel"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "gain": gain,
            "input_channel": input_channel,
        }

    @builtins.property
    def gain(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gain MedialiveChannel#gain}.'''
        result = self._values.get("gain")
        assert result is not None, "Required property 'gain' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def input_channel(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_channel MedialiveChannel#input_channel}.'''
        result = self._values.get("input_channel")
        assert result is not None, "Required property 'input_channel' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b41f9b33d7d6d1afedbc249174cb15f993680981b65f6baad22fcb25c1050a8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76c43be71620ab3b429eaa5470cc9ad6c16c63a076d3a076e76f0478fd111d3b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8f4f03e446802a6be91060857cbbdf92744cce28a431e6851423209a53b3e66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb75fb86131fb3811c31cf9370315c51b71f3467a249e79205a674d164691be7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3afca2263b6cbc8562858d810cbc7b9c04dc8b4a8c9ee2bb6850665c90e3751b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1746807dea8ca814bd063633c8ba0185edab0e733d05655bbce9673da645909f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__067b1f76513726c25a49387b693174c6126a67697bac456187aad7f23fc638ae)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="gainInput")
    def gain_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gainInput"))

    @builtins.property
    @jsii.member(jsii_name="inputChannelInput")
    def input_channel_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "inputChannelInput"))

    @builtins.property
    @jsii.member(jsii_name="gain")
    def gain(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gain"))

    @gain.setter
    def gain(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__300a2b9dc7ebb138a377005f46a111eb39264a42b539335b2e48b5ac1aaed306)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gain", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputChannel")
    def input_channel(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "inputChannel"))

    @input_channel.setter
    def input_channel(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b3bb1555afe3f677f33a9f4f6f83ed816499d7dec7316b64f595c7235dda615)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputChannel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca22c2d77072de61f9d85ea506e575dd44f670ff9bcdcf6f8d5faca69924fae8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e590fe142ce1436e0d918c77fce6e6e1daaca695ce7746a8511d390970be60e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b879535b625fd2947aef1783ecbaf2fd6a5dc8a8143b601a00594adf5fec81e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e426c12239b2e61b0b8ac443e14d45c967cfec32ef44c094aab45e28f07209c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0302414948c149a5a43f27031303e04f5b4df360535c18fc870ae0118d563c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2db81913609ebd0498f71c40286fe31888f4f0a636e0b4e92a625dcb184262b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__420854ab6b2783d09c117e72340b64f2a54124303aecc5cf01c9685697de7a0d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__484b6d16dae67eebb38995d98ab227334df96a2b4ffccc91d683b6faf7f18701)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putInputChannelLevels")
    def put_input_channel_levels(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d69c7d6cde349993c2e15754339a63c575021022c2738be8322236c811be1ac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInputChannelLevels", [value]))

    @builtins.property
    @jsii.member(jsii_name="inputChannelLevels")
    def input_channel_levels(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList, jsii.get(self, "inputChannelLevels"))

    @builtins.property
    @jsii.member(jsii_name="inputChannelLevelsInput")
    def input_channel_levels_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]], jsii.get(self, "inputChannelLevelsInput"))

    @builtins.property
    @jsii.member(jsii_name="outputChannelInput")
    def output_channel_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "outputChannelInput"))

    @builtins.property
    @jsii.member(jsii_name="outputChannel")
    def output_channel(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "outputChannel"))

    @output_channel.setter
    def output_channel(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0f97de375b6a99b5195b263bd82957e0767f3d336f832c3bed97080956845ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputChannel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__844852ac945892c0bf25558d3cbe7cb5c59d10d2533ae5617ddcaf5a79cb534a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aed5045ad4a23823e34feead48703709a10b1777a322d9e689b99e20552eacc1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putChannelMappings")
    def put_channel_mappings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a102f9f653ee9e2e9c1b4ff52f91a3cc0015976220c5cc31f453e4d84fc7d54f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putChannelMappings", [value]))

    @jsii.member(jsii_name="resetChannelsIn")
    def reset_channels_in(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChannelsIn", []))

    @jsii.member(jsii_name="resetChannelsOut")
    def reset_channels_out(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetChannelsOut", []))

    @builtins.property
    @jsii.member(jsii_name="channelMappings")
    def channel_mappings(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList, jsii.get(self, "channelMappings"))

    @builtins.property
    @jsii.member(jsii_name="channelMappingsInput")
    def channel_mappings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]], jsii.get(self, "channelMappingsInput"))

    @builtins.property
    @jsii.member(jsii_name="channelsInInput")
    def channels_in_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "channelsInInput"))

    @builtins.property
    @jsii.member(jsii_name="channelsOutInput")
    def channels_out_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "channelsOutInput"))

    @builtins.property
    @jsii.member(jsii_name="channelsIn")
    def channels_in(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "channelsIn"))

    @channels_in.setter
    def channels_in(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a82f701a71b73da119a433fc1431228967c6780f1dc4eb923aba93c8867532fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "channelsIn", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="channelsOut")
    def channels_out(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "channelsOut"))

    @channels_out.setter
    def channels_out(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7aa4ae6a6d97fa5de6cc3d48bf168c2992712f633bd00b5499d2895a8d7b78e0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "channelsOut", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7097b1cf9d968354bceff91424cded1379038d00af4add1385b552018c39bc36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlanking",
    jsii_struct_bases=[],
    name_mapping={"avail_blanking_image": "availBlankingImage", "state": "state"},
)
class MedialiveChannelEncoderSettingsAvailBlanking:
    def __init__(
        self,
        *,
        avail_blanking_image: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage", typing.Dict[builtins.str, typing.Any]]] = None,
        state: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param avail_blanking_image: avail_blanking_image block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#avail_blanking_image MedialiveChannel#avail_blanking_image}
        :param state: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#state MedialiveChannel#state}.
        '''
        if isinstance(avail_blanking_image, dict):
            avail_blanking_image = MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage(**avail_blanking_image)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69fe30fc3c25ea29c4780b777507c07162de2f6371e478ad77db046ca8c9b057)
            check_type(argname="argument avail_blanking_image", value=avail_blanking_image, expected_type=type_hints["avail_blanking_image"])
            check_type(argname="argument state", value=state, expected_type=type_hints["state"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if avail_blanking_image is not None:
            self._values["avail_blanking_image"] = avail_blanking_image
        if state is not None:
            self._values["state"] = state

    @builtins.property
    def avail_blanking_image(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage"]:
        '''avail_blanking_image block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#avail_blanking_image MedialiveChannel#avail_blanking_image}
        '''
        result = self._values.get("avail_blanking_image")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage"], result)

    @builtins.property
    def state(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#state MedialiveChannel#state}.'''
        result = self._values.get("state")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAvailBlanking(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9157bf161def38c03e3c59d8d14e19f0e1a212647f824d4a45f9442d85a66c52)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6d89a3ddfe1c150a465c09d10597caf9d19fcdbbfff464ad4b34b41c69d39ea)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35656b0481a4933b7daeb88bf19eaa0bfedc19f6a670c11ec612237d14caf4ac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41c73b54ee74a4996cfd701b8d93a0ae6596ec436f8fe60d1679ce2248ff846c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3575b5e28280ba979319586d01dbe3bbc3f8480d7aea186539064cf19f17d94e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78d4d33868a5f22c15be772c0b795d2a19860e06e9537fb2c469841da877603a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsAvailBlankingOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsAvailBlankingOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0de94ae9d5612f2deebe8c98416eae78c8ae04aedaae59e4c6ed6e21b2115b31)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAvailBlankingImage")
    def put_avail_blanking_image(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putAvailBlankingImage", [value]))

    @jsii.member(jsii_name="resetAvailBlankingImage")
    def reset_avail_blanking_image(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAvailBlankingImage", []))

    @jsii.member(jsii_name="resetState")
    def reset_state(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetState", []))

    @builtins.property
    @jsii.member(jsii_name="availBlankingImage")
    def avail_blanking_image(
        self,
    ) -> MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference, jsii.get(self, "availBlankingImage"))

    @builtins.property
    @jsii.member(jsii_name="availBlankingImageInput")
    def avail_blanking_image_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage], jsii.get(self, "availBlankingImageInput"))

    @builtins.property
    @jsii.member(jsii_name="stateInput")
    def state_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "stateInput"))

    @builtins.property
    @jsii.member(jsii_name="state")
    def state(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "state"))

    @state.setter
    def state(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1576ebf24e169456ff6134d914df33859404e6a87b05d6eb0451ded07d0de503)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "state", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c950a472449dcf561775f2beda6c0e746b44fe4810595845578e2f97c8b1469a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptions",
    jsii_struct_bases=[],
    name_mapping={
        "caption_selector_name": "captionSelectorName",
        "name": "name",
        "accessibility": "accessibility",
        "destination_settings": "destinationSettings",
        "language_code": "languageCode",
        "language_description": "languageDescription",
    },
)
class MedialiveChannelEncoderSettingsCaptionDescriptions:
    def __init__(
        self,
        *,
        caption_selector_name: builtins.str,
        name: builtins.str,
        accessibility: typing.Optional[builtins.str] = None,
        destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        language_code: typing.Optional[builtins.str] = None,
        language_description: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param caption_selector_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_selector_name MedialiveChannel#caption_selector_name}.
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        :param accessibility: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#accessibility MedialiveChannel#accessibility}.
        :param destination_settings: destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_settings MedialiveChannel#destination_settings}
        :param language_code: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_description: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_description MedialiveChannel#language_description}.
        '''
        if isinstance(destination_settings, dict):
            destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings(**destination_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85b503ac12158cc0dc7ca10c2bd8f526a132d3848a944db8cbda52b19023833d)
            check_type(argname="argument caption_selector_name", value=caption_selector_name, expected_type=type_hints["caption_selector_name"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument accessibility", value=accessibility, expected_type=type_hints["accessibility"])
            check_type(argname="argument destination_settings", value=destination_settings, expected_type=type_hints["destination_settings"])
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument language_description", value=language_description, expected_type=type_hints["language_description"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "caption_selector_name": caption_selector_name,
            "name": name,
        }
        if accessibility is not None:
            self._values["accessibility"] = accessibility
        if destination_settings is not None:
            self._values["destination_settings"] = destination_settings
        if language_code is not None:
            self._values["language_code"] = language_code
        if language_description is not None:
            self._values["language_description"] = language_description

    @builtins.property
    def caption_selector_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_selector_name MedialiveChannel#caption_selector_name}.'''
        result = self._values.get("caption_selector_name")
        assert result is not None, "Required property 'caption_selector_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def accessibility(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#accessibility MedialiveChannel#accessibility}.'''
        result = self._values.get("accessibility")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings"]:
        '''destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_settings MedialiveChannel#destination_settings}
        '''
        result = self._values.get("destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings"], result)

    @builtins.property
    def language_code(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def language_description(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_description MedialiveChannel#language_description}.'''
        result = self._values.get("language_description")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={
        "arib_destination_settings": "aribDestinationSettings",
        "burn_in_destination_settings": "burnInDestinationSettings",
        "dvb_sub_destination_settings": "dvbSubDestinationSettings",
        "ebu_tt_d_destination_settings": "ebuTtDDestinationSettings",
        "embedded_destination_settings": "embeddedDestinationSettings",
        "embedded_plus_scte20_destination_settings": "embeddedPlusScte20DestinationSettings",
        "rtmp_caption_info_destination_settings": "rtmpCaptionInfoDestinationSettings",
        "scte20_plus_embedded_destination_settings": "scte20PlusEmbeddedDestinationSettings",
        "scte27_destination_settings": "scte27DestinationSettings",
        "smpte_tt_destination_settings": "smpteTtDestinationSettings",
        "teletext_destination_settings": "teletextDestinationSettings",
        "ttml_destination_settings": "ttmlDestinationSettings",
        "webvtt_destination_settings": "webvttDestinationSettings",
    },
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings:
    def __init__(
        self,
        *,
        arib_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        burn_in_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sub_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        ebu_tt_d_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        embedded_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        embedded_plus_scte20_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        rtmp_caption_info_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        scte20_plus_embedded_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        scte27_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        smpte_tt_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        teletext_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        ttml_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        webvtt_destination_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param arib_destination_settings: arib_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_destination_settings MedialiveChannel#arib_destination_settings}
        :param burn_in_destination_settings: burn_in_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#burn_in_destination_settings MedialiveChannel#burn_in_destination_settings}
        :param dvb_sub_destination_settings: dvb_sub_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_destination_settings MedialiveChannel#dvb_sub_destination_settings}
        :param ebu_tt_d_destination_settings: ebu_tt_d_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebu_tt_d_destination_settings MedialiveChannel#ebu_tt_d_destination_settings}
        :param embedded_destination_settings: embedded_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_destination_settings MedialiveChannel#embedded_destination_settings}
        :param embedded_plus_scte20_destination_settings: embedded_plus_scte20_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_plus_scte20_destination_settings MedialiveChannel#embedded_plus_scte20_destination_settings}
        :param rtmp_caption_info_destination_settings: rtmp_caption_info_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_caption_info_destination_settings MedialiveChannel#rtmp_caption_info_destination_settings}
        :param scte20_plus_embedded_destination_settings: scte20_plus_embedded_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_plus_embedded_destination_settings MedialiveChannel#scte20_plus_embedded_destination_settings}
        :param scte27_destination_settings: scte27_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_destination_settings MedialiveChannel#scte27_destination_settings}
        :param smpte_tt_destination_settings: smpte_tt_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#smpte_tt_destination_settings MedialiveChannel#smpte_tt_destination_settings}
        :param teletext_destination_settings: teletext_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_destination_settings MedialiveChannel#teletext_destination_settings}
        :param ttml_destination_settings: ttml_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ttml_destination_settings MedialiveChannel#ttml_destination_settings}
        :param webvtt_destination_settings: webvtt_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#webvtt_destination_settings MedialiveChannel#webvtt_destination_settings}
        '''
        if isinstance(arib_destination_settings, dict):
            arib_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings(**arib_destination_settings)
        if isinstance(burn_in_destination_settings, dict):
            burn_in_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings(**burn_in_destination_settings)
        if isinstance(dvb_sub_destination_settings, dict):
            dvb_sub_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings(**dvb_sub_destination_settings)
        if isinstance(ebu_tt_d_destination_settings, dict):
            ebu_tt_d_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings(**ebu_tt_d_destination_settings)
        if isinstance(embedded_destination_settings, dict):
            embedded_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings(**embedded_destination_settings)
        if isinstance(embedded_plus_scte20_destination_settings, dict):
            embedded_plus_scte20_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings(**embedded_plus_scte20_destination_settings)
        if isinstance(rtmp_caption_info_destination_settings, dict):
            rtmp_caption_info_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings(**rtmp_caption_info_destination_settings)
        if isinstance(scte20_plus_embedded_destination_settings, dict):
            scte20_plus_embedded_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings(**scte20_plus_embedded_destination_settings)
        if isinstance(scte27_destination_settings, dict):
            scte27_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings(**scte27_destination_settings)
        if isinstance(smpte_tt_destination_settings, dict):
            smpte_tt_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings(**smpte_tt_destination_settings)
        if isinstance(teletext_destination_settings, dict):
            teletext_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings(**teletext_destination_settings)
        if isinstance(ttml_destination_settings, dict):
            ttml_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings(**ttml_destination_settings)
        if isinstance(webvtt_destination_settings, dict):
            webvtt_destination_settings = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings(**webvtt_destination_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33ca26e515248c4661989fa4f799780e6d4c9acafed9dfc3e4d971898e66d036)
            check_type(argname="argument arib_destination_settings", value=arib_destination_settings, expected_type=type_hints["arib_destination_settings"])
            check_type(argname="argument burn_in_destination_settings", value=burn_in_destination_settings, expected_type=type_hints["burn_in_destination_settings"])
            check_type(argname="argument dvb_sub_destination_settings", value=dvb_sub_destination_settings, expected_type=type_hints["dvb_sub_destination_settings"])
            check_type(argname="argument ebu_tt_d_destination_settings", value=ebu_tt_d_destination_settings, expected_type=type_hints["ebu_tt_d_destination_settings"])
            check_type(argname="argument embedded_destination_settings", value=embedded_destination_settings, expected_type=type_hints["embedded_destination_settings"])
            check_type(argname="argument embedded_plus_scte20_destination_settings", value=embedded_plus_scte20_destination_settings, expected_type=type_hints["embedded_plus_scte20_destination_settings"])
            check_type(argname="argument rtmp_caption_info_destination_settings", value=rtmp_caption_info_destination_settings, expected_type=type_hints["rtmp_caption_info_destination_settings"])
            check_type(argname="argument scte20_plus_embedded_destination_settings", value=scte20_plus_embedded_destination_settings, expected_type=type_hints["scte20_plus_embedded_destination_settings"])
            check_type(argname="argument scte27_destination_settings", value=scte27_destination_settings, expected_type=type_hints["scte27_destination_settings"])
            check_type(argname="argument smpte_tt_destination_settings", value=smpte_tt_destination_settings, expected_type=type_hints["smpte_tt_destination_settings"])
            check_type(argname="argument teletext_destination_settings", value=teletext_destination_settings, expected_type=type_hints["teletext_destination_settings"])
            check_type(argname="argument ttml_destination_settings", value=ttml_destination_settings, expected_type=type_hints["ttml_destination_settings"])
            check_type(argname="argument webvtt_destination_settings", value=webvtt_destination_settings, expected_type=type_hints["webvtt_destination_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if arib_destination_settings is not None:
            self._values["arib_destination_settings"] = arib_destination_settings
        if burn_in_destination_settings is not None:
            self._values["burn_in_destination_settings"] = burn_in_destination_settings
        if dvb_sub_destination_settings is not None:
            self._values["dvb_sub_destination_settings"] = dvb_sub_destination_settings
        if ebu_tt_d_destination_settings is not None:
            self._values["ebu_tt_d_destination_settings"] = ebu_tt_d_destination_settings
        if embedded_destination_settings is not None:
            self._values["embedded_destination_settings"] = embedded_destination_settings
        if embedded_plus_scte20_destination_settings is not None:
            self._values["embedded_plus_scte20_destination_settings"] = embedded_plus_scte20_destination_settings
        if rtmp_caption_info_destination_settings is not None:
            self._values["rtmp_caption_info_destination_settings"] = rtmp_caption_info_destination_settings
        if scte20_plus_embedded_destination_settings is not None:
            self._values["scte20_plus_embedded_destination_settings"] = scte20_plus_embedded_destination_settings
        if scte27_destination_settings is not None:
            self._values["scte27_destination_settings"] = scte27_destination_settings
        if smpte_tt_destination_settings is not None:
            self._values["smpte_tt_destination_settings"] = smpte_tt_destination_settings
        if teletext_destination_settings is not None:
            self._values["teletext_destination_settings"] = teletext_destination_settings
        if ttml_destination_settings is not None:
            self._values["ttml_destination_settings"] = ttml_destination_settings
        if webvtt_destination_settings is not None:
            self._values["webvtt_destination_settings"] = webvtt_destination_settings

    @builtins.property
    def arib_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings"]:
        '''arib_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_destination_settings MedialiveChannel#arib_destination_settings}
        '''
        result = self._values.get("arib_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings"], result)

    @builtins.property
    def burn_in_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings"]:
        '''burn_in_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#burn_in_destination_settings MedialiveChannel#burn_in_destination_settings}
        '''
        result = self._values.get("burn_in_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings"], result)

    @builtins.property
    def dvb_sub_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings"]:
        '''dvb_sub_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_destination_settings MedialiveChannel#dvb_sub_destination_settings}
        '''
        result = self._values.get("dvb_sub_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings"], result)

    @builtins.property
    def ebu_tt_d_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings"]:
        '''ebu_tt_d_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebu_tt_d_destination_settings MedialiveChannel#ebu_tt_d_destination_settings}
        '''
        result = self._values.get("ebu_tt_d_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings"], result)

    @builtins.property
    def embedded_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings"]:
        '''embedded_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_destination_settings MedialiveChannel#embedded_destination_settings}
        '''
        result = self._values.get("embedded_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings"], result)

    @builtins.property
    def embedded_plus_scte20_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings"]:
        '''embedded_plus_scte20_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_plus_scte20_destination_settings MedialiveChannel#embedded_plus_scte20_destination_settings}
        '''
        result = self._values.get("embedded_plus_scte20_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings"], result)

    @builtins.property
    def rtmp_caption_info_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings"]:
        '''rtmp_caption_info_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_caption_info_destination_settings MedialiveChannel#rtmp_caption_info_destination_settings}
        '''
        result = self._values.get("rtmp_caption_info_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings"], result)

    @builtins.property
    def scte20_plus_embedded_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings"]:
        '''scte20_plus_embedded_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_plus_embedded_destination_settings MedialiveChannel#scte20_plus_embedded_destination_settings}
        '''
        result = self._values.get("scte20_plus_embedded_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings"], result)

    @builtins.property
    def scte27_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings"]:
        '''scte27_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_destination_settings MedialiveChannel#scte27_destination_settings}
        '''
        result = self._values.get("scte27_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings"], result)

    @builtins.property
    def smpte_tt_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings"]:
        '''smpte_tt_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#smpte_tt_destination_settings MedialiveChannel#smpte_tt_destination_settings}
        '''
        result = self._values.get("smpte_tt_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings"], result)

    @builtins.property
    def teletext_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings"]:
        '''teletext_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_destination_settings MedialiveChannel#teletext_destination_settings}
        '''
        result = self._values.get("teletext_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings"], result)

    @builtins.property
    def ttml_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings"]:
        '''ttml_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ttml_destination_settings MedialiveChannel#ttml_destination_settings}
        '''
        result = self._values.get("ttml_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings"], result)

    @builtins.property
    def webvtt_destination_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings"]:
        '''webvtt_destination_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#webvtt_destination_settings MedialiveChannel#webvtt_destination_settings}
        '''
        result = self._values.get("webvtt_destination_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b28f75938ad1a144e5f8e47e18c065ddac52716cf3a93a6b7eb2c9edb2846053)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4756ca2f2d725d38d7c8dab6e77bcc194c896144749eb2b4e36198616bce2da4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={
        "outline_color": "outlineColor",
        "teletext_grid_control": "teletextGridControl",
        "alignment": "alignment",
        "background_color": "backgroundColor",
        "background_opacity": "backgroundOpacity",
        "font": "font",
        "font_color": "fontColor",
        "font_opacity": "fontOpacity",
        "font_resolution": "fontResolution",
        "font_size": "fontSize",
        "outline_size": "outlineSize",
        "shadow_color": "shadowColor",
        "shadow_opacity": "shadowOpacity",
        "shadow_x_offset": "shadowXOffset",
        "shadow_y_offset": "shadowYOffset",
        "x_position": "xPosition",
        "y_position": "yPosition",
    },
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings:
    def __init__(
        self,
        *,
        outline_color: builtins.str,
        teletext_grid_control: builtins.str,
        alignment: typing.Optional[builtins.str] = None,
        background_color: typing.Optional[builtins.str] = None,
        background_opacity: typing.Optional[jsii.Number] = None,
        font: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont", typing.Dict[builtins.str, typing.Any]]] = None,
        font_color: typing.Optional[builtins.str] = None,
        font_opacity: typing.Optional[jsii.Number] = None,
        font_resolution: typing.Optional[jsii.Number] = None,
        font_size: typing.Optional[builtins.str] = None,
        outline_size: typing.Optional[jsii.Number] = None,
        shadow_color: typing.Optional[builtins.str] = None,
        shadow_opacity: typing.Optional[jsii.Number] = None,
        shadow_x_offset: typing.Optional[jsii.Number] = None,
        shadow_y_offset: typing.Optional[jsii.Number] = None,
        x_position: typing.Optional[jsii.Number] = None,
        y_position: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param outline_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_color MedialiveChannel#outline_color}.
        :param teletext_grid_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_grid_control MedialiveChannel#teletext_grid_control}.
        :param alignment: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alignment MedialiveChannel#alignment}.
        :param background_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_color MedialiveChannel#background_color}.
        :param background_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_opacity MedialiveChannel#background_opacity}.
        :param font: font block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font MedialiveChannel#font}
        :param font_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_color MedialiveChannel#font_color}.
        :param font_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_opacity MedialiveChannel#font_opacity}.
        :param font_resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_resolution MedialiveChannel#font_resolution}.
        :param font_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_size MedialiveChannel#font_size}.
        :param outline_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_size MedialiveChannel#outline_size}.
        :param shadow_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_color MedialiveChannel#shadow_color}.
        :param shadow_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_opacity MedialiveChannel#shadow_opacity}.
        :param shadow_x_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_x_offset MedialiveChannel#shadow_x_offset}.
        :param shadow_y_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_y_offset MedialiveChannel#shadow_y_offset}.
        :param x_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#x_position MedialiveChannel#x_position}.
        :param y_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#y_position MedialiveChannel#y_position}.
        '''
        if isinstance(font, dict):
            font = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont(**font)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7763887be104989b6c6aa5ae8d7d70ed9ac5884023e4f571d520a3f84f54fa6f)
            check_type(argname="argument outline_color", value=outline_color, expected_type=type_hints["outline_color"])
            check_type(argname="argument teletext_grid_control", value=teletext_grid_control, expected_type=type_hints["teletext_grid_control"])
            check_type(argname="argument alignment", value=alignment, expected_type=type_hints["alignment"])
            check_type(argname="argument background_color", value=background_color, expected_type=type_hints["background_color"])
            check_type(argname="argument background_opacity", value=background_opacity, expected_type=type_hints["background_opacity"])
            check_type(argname="argument font", value=font, expected_type=type_hints["font"])
            check_type(argname="argument font_color", value=font_color, expected_type=type_hints["font_color"])
            check_type(argname="argument font_opacity", value=font_opacity, expected_type=type_hints["font_opacity"])
            check_type(argname="argument font_resolution", value=font_resolution, expected_type=type_hints["font_resolution"])
            check_type(argname="argument font_size", value=font_size, expected_type=type_hints["font_size"])
            check_type(argname="argument outline_size", value=outline_size, expected_type=type_hints["outline_size"])
            check_type(argname="argument shadow_color", value=shadow_color, expected_type=type_hints["shadow_color"])
            check_type(argname="argument shadow_opacity", value=shadow_opacity, expected_type=type_hints["shadow_opacity"])
            check_type(argname="argument shadow_x_offset", value=shadow_x_offset, expected_type=type_hints["shadow_x_offset"])
            check_type(argname="argument shadow_y_offset", value=shadow_y_offset, expected_type=type_hints["shadow_y_offset"])
            check_type(argname="argument x_position", value=x_position, expected_type=type_hints["x_position"])
            check_type(argname="argument y_position", value=y_position, expected_type=type_hints["y_position"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "outline_color": outline_color,
            "teletext_grid_control": teletext_grid_control,
        }
        if alignment is not None:
            self._values["alignment"] = alignment
        if background_color is not None:
            self._values["background_color"] = background_color
        if background_opacity is not None:
            self._values["background_opacity"] = background_opacity
        if font is not None:
            self._values["font"] = font
        if font_color is not None:
            self._values["font_color"] = font_color
        if font_opacity is not None:
            self._values["font_opacity"] = font_opacity
        if font_resolution is not None:
            self._values["font_resolution"] = font_resolution
        if font_size is not None:
            self._values["font_size"] = font_size
        if outline_size is not None:
            self._values["outline_size"] = outline_size
        if shadow_color is not None:
            self._values["shadow_color"] = shadow_color
        if shadow_opacity is not None:
            self._values["shadow_opacity"] = shadow_opacity
        if shadow_x_offset is not None:
            self._values["shadow_x_offset"] = shadow_x_offset
        if shadow_y_offset is not None:
            self._values["shadow_y_offset"] = shadow_y_offset
        if x_position is not None:
            self._values["x_position"] = x_position
        if y_position is not None:
            self._values["y_position"] = y_position

    @builtins.property
    def outline_color(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_color MedialiveChannel#outline_color}.'''
        result = self._values.get("outline_color")
        assert result is not None, "Required property 'outline_color' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def teletext_grid_control(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_grid_control MedialiveChannel#teletext_grid_control}.'''
        result = self._values.get("teletext_grid_control")
        assert result is not None, "Required property 'teletext_grid_control' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def alignment(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alignment MedialiveChannel#alignment}.'''
        result = self._values.get("alignment")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def background_color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_color MedialiveChannel#background_color}.'''
        result = self._values.get("background_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def background_opacity(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_opacity MedialiveChannel#background_opacity}.'''
        result = self._values.get("background_opacity")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def font(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont"]:
        '''font block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font MedialiveChannel#font}
        '''
        result = self._values.get("font")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont"], result)

    @builtins.property
    def font_color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_color MedialiveChannel#font_color}.'''
        result = self._values.get("font_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def font_opacity(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_opacity MedialiveChannel#font_opacity}.'''
        result = self._values.get("font_opacity")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def font_resolution(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_resolution MedialiveChannel#font_resolution}.'''
        result = self._values.get("font_resolution")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def font_size(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_size MedialiveChannel#font_size}.'''
        result = self._values.get("font_size")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def outline_size(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_size MedialiveChannel#outline_size}.'''
        result = self._values.get("outline_size")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def shadow_color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_color MedialiveChannel#shadow_color}.'''
        result = self._values.get("shadow_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def shadow_opacity(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_opacity MedialiveChannel#shadow_opacity}.'''
        result = self._values.get("shadow_opacity")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def shadow_x_offset(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_x_offset MedialiveChannel#shadow_x_offset}.'''
        result = self._values.get("shadow_x_offset")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def shadow_y_offset(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_y_offset MedialiveChannel#shadow_y_offset}.'''
        result = self._values.get("shadow_y_offset")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def x_position(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#x_position MedialiveChannel#x_position}.'''
        result = self._values.get("x_position")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_position(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#y_position MedialiveChannel#y_position}.'''
        result = self._values.get("y_position")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__065fdb7a1db059531a179b04227587b01f23d6fd760ef14cdbd7740ca64c0ecf)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__317f733bd49757fdd0b8c17a798148f7388ca54ffa1cb603ea58538df6d88cf3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13f9b2f32339c56d91ca318998cf1b6b7ef9e573bf750e473c3ba0996850a735)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__003ddbc7df7d85a294a799f42188d919e4376206d781e5bffe3c856ebf0c4a14)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9944c935da8020a753b1eb08b87c8a005a99d6a9181ba6e18a8f09718add1eae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d4240c46b3288b9e3ce68e2bf40b9bf1563d8ec71f5c3c3e1a74952b321a45df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ab760158323f2566ec30c29367a8e39acdf43cd38fd2b1b62d7782f45c0d5a5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFont")
    def put_font(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putFont", [value]))

    @jsii.member(jsii_name="resetAlignment")
    def reset_alignment(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAlignment", []))

    @jsii.member(jsii_name="resetBackgroundColor")
    def reset_background_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackgroundColor", []))

    @jsii.member(jsii_name="resetBackgroundOpacity")
    def reset_background_opacity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackgroundOpacity", []))

    @jsii.member(jsii_name="resetFont")
    def reset_font(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFont", []))

    @jsii.member(jsii_name="resetFontColor")
    def reset_font_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontColor", []))

    @jsii.member(jsii_name="resetFontOpacity")
    def reset_font_opacity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontOpacity", []))

    @jsii.member(jsii_name="resetFontResolution")
    def reset_font_resolution(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontResolution", []))

    @jsii.member(jsii_name="resetFontSize")
    def reset_font_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontSize", []))

    @jsii.member(jsii_name="resetOutlineSize")
    def reset_outline_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutlineSize", []))

    @jsii.member(jsii_name="resetShadowColor")
    def reset_shadow_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetShadowColor", []))

    @jsii.member(jsii_name="resetShadowOpacity")
    def reset_shadow_opacity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetShadowOpacity", []))

    @jsii.member(jsii_name="resetShadowXOffset")
    def reset_shadow_x_offset(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetShadowXOffset", []))

    @jsii.member(jsii_name="resetShadowYOffset")
    def reset_shadow_y_offset(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetShadowYOffset", []))

    @jsii.member(jsii_name="resetXPosition")
    def reset_x_position(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetXPosition", []))

    @jsii.member(jsii_name="resetYPosition")
    def reset_y_position(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYPosition", []))

    @builtins.property
    @jsii.member(jsii_name="font")
    def font(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference, jsii.get(self, "font"))

    @builtins.property
    @jsii.member(jsii_name="alignmentInput")
    def alignment_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "alignmentInput"))

    @builtins.property
    @jsii.member(jsii_name="backgroundColorInput")
    def background_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "backgroundColorInput"))

    @builtins.property
    @jsii.member(jsii_name="backgroundOpacityInput")
    def background_opacity_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "backgroundOpacityInput"))

    @builtins.property
    @jsii.member(jsii_name="fontColorInput")
    def font_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fontColorInput"))

    @builtins.property
    @jsii.member(jsii_name="fontInput")
    def font_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont], jsii.get(self, "fontInput"))

    @builtins.property
    @jsii.member(jsii_name="fontOpacityInput")
    def font_opacity_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fontOpacityInput"))

    @builtins.property
    @jsii.member(jsii_name="fontResolutionInput")
    def font_resolution_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fontResolutionInput"))

    @builtins.property
    @jsii.member(jsii_name="fontSizeInput")
    def font_size_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fontSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="outlineColorInput")
    def outline_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outlineColorInput"))

    @builtins.property
    @jsii.member(jsii_name="outlineSizeInput")
    def outline_size_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "outlineSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="shadowColorInput")
    def shadow_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "shadowColorInput"))

    @builtins.property
    @jsii.member(jsii_name="shadowOpacityInput")
    def shadow_opacity_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "shadowOpacityInput"))

    @builtins.property
    @jsii.member(jsii_name="shadowXOffsetInput")
    def shadow_x_offset_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "shadowXOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="shadowYOffsetInput")
    def shadow_y_offset_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "shadowYOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="teletextGridControlInput")
    def teletext_grid_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "teletextGridControlInput"))

    @builtins.property
    @jsii.member(jsii_name="xPositionInput")
    def x_position_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "xPositionInput"))

    @builtins.property
    @jsii.member(jsii_name="yPositionInput")
    def y_position_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yPositionInput"))

    @builtins.property
    @jsii.member(jsii_name="alignment")
    def alignment(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "alignment"))

    @alignment.setter
    def alignment(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2405f948437428e48b0b8a89735b95ee72553d72cb1982291cc4f2270186b01c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "alignment", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="backgroundColor")
    def background_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "backgroundColor"))

    @background_color.setter
    def background_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a9960a9a1910483ebb97aad0336e4253f8dfafa75cf7c4dd2c3fe9c397dd4006)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "backgroundColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="backgroundOpacity")
    def background_opacity(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "backgroundOpacity"))

    @background_opacity.setter
    def background_opacity(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__800131d9ad1c7d8dcd7aff6401ac6874dd4f1f465a52be662dd2542bc9a97e8d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "backgroundOpacity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontColor")
    def font_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fontColor"))

    @font_color.setter
    def font_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab18c1555650ed61414fb4e86aaec315f5875a87f2e9b99433825d99b35e7a8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontOpacity")
    def font_opacity(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fontOpacity"))

    @font_opacity.setter
    def font_opacity(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8d11b48f716cd5f5d8098bdd42c79cc81a91bf567d4c29adfb32858270cf652)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontOpacity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontResolution")
    def font_resolution(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fontResolution"))

    @font_resolution.setter
    def font_resolution(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea4d0eb3609d61a80f933cd841a146254e612e89fb71e05a34ec130d344d1a8d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontResolution", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontSize")
    def font_size(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fontSize"))

    @font_size.setter
    def font_size(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd84dd468a34aca463e8a78f494e893dcd93c466a0e613495333d2a7d83149c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="outlineColor")
    def outline_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outlineColor"))

    @outline_color.setter
    def outline_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fb5d44e72e23a5235f504afd22cccb0906b90b16dd078298e1b5d2f9a676a2c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outlineColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="outlineSize")
    def outline_size(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "outlineSize"))

    @outline_size.setter
    def outline_size(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__746894c23d31d7fc862195e69f56c0f9646687fb9629b7367906dec4bf87a40a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outlineSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="shadowColor")
    def shadow_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "shadowColor"))

    @shadow_color.setter
    def shadow_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__614f4f8bcc2ab815287d962bcff4b67c9c66b9c4e1ed9f65465bb1e228bbc1ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "shadowColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="shadowOpacity")
    def shadow_opacity(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "shadowOpacity"))

    @shadow_opacity.setter
    def shadow_opacity(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d19165b2f6939edb5cdd7d50bbe553a4c9f04ddd0c3c75259a48b9aacea67438)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "shadowOpacity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="shadowXOffset")
    def shadow_x_offset(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "shadowXOffset"))

    @shadow_x_offset.setter
    def shadow_x_offset(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__312b8a21cd8d73d7ee673d0cfad208b3a406d5c214b292d77937a4d61a3ef509)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "shadowXOffset", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="shadowYOffset")
    def shadow_y_offset(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "shadowYOffset"))

    @shadow_y_offset.setter
    def shadow_y_offset(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7a660ebe69c607721ca6a89a92f1a084d6c0f7f547e4132f017ba2550a95c63)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "shadowYOffset", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="teletextGridControl")
    def teletext_grid_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "teletextGridControl"))

    @teletext_grid_control.setter
    def teletext_grid_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b9baf5994e953c9296f907ed6dc0d070f15928a19bb89f90136b4a765491f8e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "teletextGridControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="xPosition")
    def x_position(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "xPosition"))

    @x_position.setter
    def x_position(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2452c9766b2ae0ba7587f5b690fd2beea122748f89dd1a0ee097fd0c3b673c73)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "xPosition", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yPosition")
    def y_position(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yPosition"))

    @y_position.setter
    def y_position(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19473786347148e5c8f5dc54a8eb18d6fe7996cd492c766d3b0d8c29c83200c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yPosition", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9196117fbaead6c007ee4f50b68d63bb03704e1ddc08960506d27fa158b6f1a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={
        "alignment": "alignment",
        "background_color": "backgroundColor",
        "background_opacity": "backgroundOpacity",
        "font": "font",
        "font_color": "fontColor",
        "font_opacity": "fontOpacity",
        "font_resolution": "fontResolution",
        "font_size": "fontSize",
        "outline_color": "outlineColor",
        "outline_size": "outlineSize",
        "shadow_color": "shadowColor",
        "shadow_opacity": "shadowOpacity",
        "shadow_x_offset": "shadowXOffset",
        "shadow_y_offset": "shadowYOffset",
        "teletext_grid_control": "teletextGridControl",
        "x_position": "xPosition",
        "y_position": "yPosition",
    },
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings:
    def __init__(
        self,
        *,
        alignment: typing.Optional[builtins.str] = None,
        background_color: typing.Optional[builtins.str] = None,
        background_opacity: typing.Optional[jsii.Number] = None,
        font: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont", typing.Dict[builtins.str, typing.Any]]] = None,
        font_color: typing.Optional[builtins.str] = None,
        font_opacity: typing.Optional[jsii.Number] = None,
        font_resolution: typing.Optional[jsii.Number] = None,
        font_size: typing.Optional[builtins.str] = None,
        outline_color: typing.Optional[builtins.str] = None,
        outline_size: typing.Optional[jsii.Number] = None,
        shadow_color: typing.Optional[builtins.str] = None,
        shadow_opacity: typing.Optional[jsii.Number] = None,
        shadow_x_offset: typing.Optional[jsii.Number] = None,
        shadow_y_offset: typing.Optional[jsii.Number] = None,
        teletext_grid_control: typing.Optional[builtins.str] = None,
        x_position: typing.Optional[jsii.Number] = None,
        y_position: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param alignment: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alignment MedialiveChannel#alignment}.
        :param background_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_color MedialiveChannel#background_color}.
        :param background_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_opacity MedialiveChannel#background_opacity}.
        :param font: font block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font MedialiveChannel#font}
        :param font_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_color MedialiveChannel#font_color}.
        :param font_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_opacity MedialiveChannel#font_opacity}.
        :param font_resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_resolution MedialiveChannel#font_resolution}.
        :param font_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_size MedialiveChannel#font_size}.
        :param outline_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_color MedialiveChannel#outline_color}.
        :param outline_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_size MedialiveChannel#outline_size}.
        :param shadow_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_color MedialiveChannel#shadow_color}.
        :param shadow_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_opacity MedialiveChannel#shadow_opacity}.
        :param shadow_x_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_x_offset MedialiveChannel#shadow_x_offset}.
        :param shadow_y_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_y_offset MedialiveChannel#shadow_y_offset}.
        :param teletext_grid_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_grid_control MedialiveChannel#teletext_grid_control}.
        :param x_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#x_position MedialiveChannel#x_position}.
        :param y_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#y_position MedialiveChannel#y_position}.
        '''
        if isinstance(font, dict):
            font = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont(**font)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16c2adee11438f414f498f85afdbd6a78039b11bae09e860d5337dd3f7c21728)
            check_type(argname="argument alignment", value=alignment, expected_type=type_hints["alignment"])
            check_type(argname="argument background_color", value=background_color, expected_type=type_hints["background_color"])
            check_type(argname="argument background_opacity", value=background_opacity, expected_type=type_hints["background_opacity"])
            check_type(argname="argument font", value=font, expected_type=type_hints["font"])
            check_type(argname="argument font_color", value=font_color, expected_type=type_hints["font_color"])
            check_type(argname="argument font_opacity", value=font_opacity, expected_type=type_hints["font_opacity"])
            check_type(argname="argument font_resolution", value=font_resolution, expected_type=type_hints["font_resolution"])
            check_type(argname="argument font_size", value=font_size, expected_type=type_hints["font_size"])
            check_type(argname="argument outline_color", value=outline_color, expected_type=type_hints["outline_color"])
            check_type(argname="argument outline_size", value=outline_size, expected_type=type_hints["outline_size"])
            check_type(argname="argument shadow_color", value=shadow_color, expected_type=type_hints["shadow_color"])
            check_type(argname="argument shadow_opacity", value=shadow_opacity, expected_type=type_hints["shadow_opacity"])
            check_type(argname="argument shadow_x_offset", value=shadow_x_offset, expected_type=type_hints["shadow_x_offset"])
            check_type(argname="argument shadow_y_offset", value=shadow_y_offset, expected_type=type_hints["shadow_y_offset"])
            check_type(argname="argument teletext_grid_control", value=teletext_grid_control, expected_type=type_hints["teletext_grid_control"])
            check_type(argname="argument x_position", value=x_position, expected_type=type_hints["x_position"])
            check_type(argname="argument y_position", value=y_position, expected_type=type_hints["y_position"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if alignment is not None:
            self._values["alignment"] = alignment
        if background_color is not None:
            self._values["background_color"] = background_color
        if background_opacity is not None:
            self._values["background_opacity"] = background_opacity
        if font is not None:
            self._values["font"] = font
        if font_color is not None:
            self._values["font_color"] = font_color
        if font_opacity is not None:
            self._values["font_opacity"] = font_opacity
        if font_resolution is not None:
            self._values["font_resolution"] = font_resolution
        if font_size is not None:
            self._values["font_size"] = font_size
        if outline_color is not None:
            self._values["outline_color"] = outline_color
        if outline_size is not None:
            self._values["outline_size"] = outline_size
        if shadow_color is not None:
            self._values["shadow_color"] = shadow_color
        if shadow_opacity is not None:
            self._values["shadow_opacity"] = shadow_opacity
        if shadow_x_offset is not None:
            self._values["shadow_x_offset"] = shadow_x_offset
        if shadow_y_offset is not None:
            self._values["shadow_y_offset"] = shadow_y_offset
        if teletext_grid_control is not None:
            self._values["teletext_grid_control"] = teletext_grid_control
        if x_position is not None:
            self._values["x_position"] = x_position
        if y_position is not None:
            self._values["y_position"] = y_position

    @builtins.property
    def alignment(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alignment MedialiveChannel#alignment}.'''
        result = self._values.get("alignment")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def background_color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_color MedialiveChannel#background_color}.'''
        result = self._values.get("background_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def background_opacity(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_opacity MedialiveChannel#background_opacity}.'''
        result = self._values.get("background_opacity")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def font(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont"]:
        '''font block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font MedialiveChannel#font}
        '''
        result = self._values.get("font")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont"], result)

    @builtins.property
    def font_color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_color MedialiveChannel#font_color}.'''
        result = self._values.get("font_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def font_opacity(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_opacity MedialiveChannel#font_opacity}.'''
        result = self._values.get("font_opacity")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def font_resolution(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_resolution MedialiveChannel#font_resolution}.'''
        result = self._values.get("font_resolution")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def font_size(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_size MedialiveChannel#font_size}.'''
        result = self._values.get("font_size")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def outline_color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_color MedialiveChannel#outline_color}.'''
        result = self._values.get("outline_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def outline_size(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_size MedialiveChannel#outline_size}.'''
        result = self._values.get("outline_size")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def shadow_color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_color MedialiveChannel#shadow_color}.'''
        result = self._values.get("shadow_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def shadow_opacity(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_opacity MedialiveChannel#shadow_opacity}.'''
        result = self._values.get("shadow_opacity")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def shadow_x_offset(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_x_offset MedialiveChannel#shadow_x_offset}.'''
        result = self._values.get("shadow_x_offset")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def shadow_y_offset(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_y_offset MedialiveChannel#shadow_y_offset}.'''
        result = self._values.get("shadow_y_offset")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def teletext_grid_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_grid_control MedialiveChannel#teletext_grid_control}.'''
        result = self._values.get("teletext_grid_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def x_position(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#x_position MedialiveChannel#x_position}.'''
        result = self._values.get("x_position")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def y_position(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#y_position MedialiveChannel#y_position}.'''
        result = self._values.get("y_position")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5c63ec0f70f016c08fad71e20693cbf414734a31bcadf801d21c485dc729c7a5)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6657c661826fab8bb19081ad70a56b0d08d2044762bd19741366e008eccace28)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08261222bb522a542c6a37fa7b5f1502dd711bbe031e02e40d8e10573818f9e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c2b1968760f87e05066653ec530d285ade96ffb3e1a2c799385fc04b506fe82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cfac541683575c5bd0ade307ae1c4c5a60317922158a3e2484fc7a0c4c18cf81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2bb7e9c2a48421eb6e04d8b2e086c87a1e563219d9ecd80339699a88f3798ce1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f38f75ca776ab3e9fa60c6b5f2582451e85ec5757a5196c936ea1182f8fd3ed7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFont")
    def put_font(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putFont", [value]))

    @jsii.member(jsii_name="resetAlignment")
    def reset_alignment(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAlignment", []))

    @jsii.member(jsii_name="resetBackgroundColor")
    def reset_background_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackgroundColor", []))

    @jsii.member(jsii_name="resetBackgroundOpacity")
    def reset_background_opacity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBackgroundOpacity", []))

    @jsii.member(jsii_name="resetFont")
    def reset_font(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFont", []))

    @jsii.member(jsii_name="resetFontColor")
    def reset_font_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontColor", []))

    @jsii.member(jsii_name="resetFontOpacity")
    def reset_font_opacity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontOpacity", []))

    @jsii.member(jsii_name="resetFontResolution")
    def reset_font_resolution(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontResolution", []))

    @jsii.member(jsii_name="resetFontSize")
    def reset_font_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontSize", []))

    @jsii.member(jsii_name="resetOutlineColor")
    def reset_outline_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutlineColor", []))

    @jsii.member(jsii_name="resetOutlineSize")
    def reset_outline_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutlineSize", []))

    @jsii.member(jsii_name="resetShadowColor")
    def reset_shadow_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetShadowColor", []))

    @jsii.member(jsii_name="resetShadowOpacity")
    def reset_shadow_opacity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetShadowOpacity", []))

    @jsii.member(jsii_name="resetShadowXOffset")
    def reset_shadow_x_offset(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetShadowXOffset", []))

    @jsii.member(jsii_name="resetShadowYOffset")
    def reset_shadow_y_offset(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetShadowYOffset", []))

    @jsii.member(jsii_name="resetTeletextGridControl")
    def reset_teletext_grid_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTeletextGridControl", []))

    @jsii.member(jsii_name="resetXPosition")
    def reset_x_position(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetXPosition", []))

    @jsii.member(jsii_name="resetYPosition")
    def reset_y_position(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetYPosition", []))

    @builtins.property
    @jsii.member(jsii_name="font")
    def font(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference, jsii.get(self, "font"))

    @builtins.property
    @jsii.member(jsii_name="alignmentInput")
    def alignment_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "alignmentInput"))

    @builtins.property
    @jsii.member(jsii_name="backgroundColorInput")
    def background_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "backgroundColorInput"))

    @builtins.property
    @jsii.member(jsii_name="backgroundOpacityInput")
    def background_opacity_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "backgroundOpacityInput"))

    @builtins.property
    @jsii.member(jsii_name="fontColorInput")
    def font_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fontColorInput"))

    @builtins.property
    @jsii.member(jsii_name="fontInput")
    def font_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont], jsii.get(self, "fontInput"))

    @builtins.property
    @jsii.member(jsii_name="fontOpacityInput")
    def font_opacity_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fontOpacityInput"))

    @builtins.property
    @jsii.member(jsii_name="fontResolutionInput")
    def font_resolution_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fontResolutionInput"))

    @builtins.property
    @jsii.member(jsii_name="fontSizeInput")
    def font_size_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fontSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="outlineColorInput")
    def outline_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outlineColorInput"))

    @builtins.property
    @jsii.member(jsii_name="outlineSizeInput")
    def outline_size_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "outlineSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="shadowColorInput")
    def shadow_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "shadowColorInput"))

    @builtins.property
    @jsii.member(jsii_name="shadowOpacityInput")
    def shadow_opacity_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "shadowOpacityInput"))

    @builtins.property
    @jsii.member(jsii_name="shadowXOffsetInput")
    def shadow_x_offset_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "shadowXOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="shadowYOffsetInput")
    def shadow_y_offset_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "shadowYOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="teletextGridControlInput")
    def teletext_grid_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "teletextGridControlInput"))

    @builtins.property
    @jsii.member(jsii_name="xPositionInput")
    def x_position_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "xPositionInput"))

    @builtins.property
    @jsii.member(jsii_name="yPositionInput")
    def y_position_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "yPositionInput"))

    @builtins.property
    @jsii.member(jsii_name="alignment")
    def alignment(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "alignment"))

    @alignment.setter
    def alignment(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9831a5882c6036c24f9839d6762d79b54cdb3aa02b2d87b4affe67c73d3248c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "alignment", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="backgroundColor")
    def background_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "backgroundColor"))

    @background_color.setter
    def background_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bab5a44fdf44ef6e24fa599f582f0825a7b11107758f081aafbc7a364eee9326)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "backgroundColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="backgroundOpacity")
    def background_opacity(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "backgroundOpacity"))

    @background_opacity.setter
    def background_opacity(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55a9ae1e923a8cb5e14f51863709a318c919e490907d414aa7405082e88a42c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "backgroundOpacity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontColor")
    def font_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fontColor"))

    @font_color.setter
    def font_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__470ba44719abf11e2c81aefb4afe437d98486c3a6fd1c24ede5f7ba416f2153c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontOpacity")
    def font_opacity(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fontOpacity"))

    @font_opacity.setter
    def font_opacity(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__23dcdc4a016a5244b69e6bac5ba7d203085c6f08fe71551b74590ea5525f32e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontOpacity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontResolution")
    def font_resolution(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fontResolution"))

    @font_resolution.setter
    def font_resolution(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a018f3f16516a15e75bf38895fb9c1014f5bcdd0cbbec94d803de25573a7bfe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontResolution", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontSize")
    def font_size(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fontSize"))

    @font_size.setter
    def font_size(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91710b68892a0c922e08ecfb2b06fc76e47109ddcaa216d1c276bab4485bd98b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="outlineColor")
    def outline_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outlineColor"))

    @outline_color.setter
    def outline_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2bb40377ad7a22d30c8cef0a02397e6882b068cad7d8129ca333619e04b0eace)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outlineColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="outlineSize")
    def outline_size(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "outlineSize"))

    @outline_size.setter
    def outline_size(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5fb47276ec210e894bbf1028a31a8c41909dd56875a342513494204815955a65)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outlineSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="shadowColor")
    def shadow_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "shadowColor"))

    @shadow_color.setter
    def shadow_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31d7da3bd32a14836f4e52e50354a7518aa8ca8aedc43e1c74550f612afe545f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "shadowColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="shadowOpacity")
    def shadow_opacity(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "shadowOpacity"))

    @shadow_opacity.setter
    def shadow_opacity(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fee34ae2d7f83e1fe1e4a0bb6ebe263ccf2d654b2b977b2da8000e15dea04f49)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "shadowOpacity", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="shadowXOffset")
    def shadow_x_offset(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "shadowXOffset"))

    @shadow_x_offset.setter
    def shadow_x_offset(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94792955a1639d1375229c77df43240b4db57a274dfafee1054b0f0b86b8a9f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "shadowXOffset", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="shadowYOffset")
    def shadow_y_offset(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "shadowYOffset"))

    @shadow_y_offset.setter
    def shadow_y_offset(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fac1865dc55bfd6afe4b0f3c40ef5b0317eb81d17492ad7387f37e99b1652b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "shadowYOffset", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="teletextGridControl")
    def teletext_grid_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "teletextGridControl"))

    @teletext_grid_control.setter
    def teletext_grid_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd2eee5b3cd614fa9f557c5838e2eef061a8a28d140f778ccc2b6f1ad331c9f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "teletextGridControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="xPosition")
    def x_position(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "xPosition"))

    @x_position.setter
    def x_position(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21f1faff08037f386e1aac4a8a43b10fcfb1a1ee1f78d8ee11d509818de4397c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "xPosition", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="yPosition")
    def y_position(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "yPosition"))

    @y_position.setter
    def y_position(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__267d04433a0f856091a50761001c87928515572a7d3d2be14cb5894a20d32a0d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "yPosition", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8307daa541ca1d7c911be209673d51b687afaecb0235b4a476e51fe1faaa9544)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={
        "copyright_holder": "copyrightHolder",
        "fill_line_gap": "fillLineGap",
        "font_family": "fontFamily",
        "style_control": "styleControl",
    },
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings:
    def __init__(
        self,
        *,
        copyright_holder: typing.Optional[builtins.str] = None,
        fill_line_gap: typing.Optional[builtins.str] = None,
        font_family: typing.Optional[builtins.str] = None,
        style_control: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param copyright_holder: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#copyright_holder MedialiveChannel#copyright_holder}.
        :param fill_line_gap: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fill_line_gap MedialiveChannel#fill_line_gap}.
        :param font_family: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_family MedialiveChannel#font_family}.
        :param style_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a618bc979db53e58135909d1e6f8dc81c66e24768be07b43033bce96a716b062)
            check_type(argname="argument copyright_holder", value=copyright_holder, expected_type=type_hints["copyright_holder"])
            check_type(argname="argument fill_line_gap", value=fill_line_gap, expected_type=type_hints["fill_line_gap"])
            check_type(argname="argument font_family", value=font_family, expected_type=type_hints["font_family"])
            check_type(argname="argument style_control", value=style_control, expected_type=type_hints["style_control"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if copyright_holder is not None:
            self._values["copyright_holder"] = copyright_holder
        if fill_line_gap is not None:
            self._values["fill_line_gap"] = fill_line_gap
        if font_family is not None:
            self._values["font_family"] = font_family
        if style_control is not None:
            self._values["style_control"] = style_control

    @builtins.property
    def copyright_holder(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#copyright_holder MedialiveChannel#copyright_holder}.'''
        result = self._values.get("copyright_holder")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def fill_line_gap(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fill_line_gap MedialiveChannel#fill_line_gap}.'''
        result = self._values.get("fill_line_gap")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def font_family(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_family MedialiveChannel#font_family}.'''
        result = self._values.get("font_family")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def style_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.'''
        result = self._values.get("style_control")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48328cd40caf065a38533d06594b6d6fe315515d4b0302bf547e8e8a367ff3bc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCopyrightHolder")
    def reset_copyright_holder(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCopyrightHolder", []))

    @jsii.member(jsii_name="resetFillLineGap")
    def reset_fill_line_gap(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFillLineGap", []))

    @jsii.member(jsii_name="resetFontFamily")
    def reset_font_family(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFontFamily", []))

    @jsii.member(jsii_name="resetStyleControl")
    def reset_style_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStyleControl", []))

    @builtins.property
    @jsii.member(jsii_name="copyrightHolderInput")
    def copyright_holder_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "copyrightHolderInput"))

    @builtins.property
    @jsii.member(jsii_name="fillLineGapInput")
    def fill_line_gap_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fillLineGapInput"))

    @builtins.property
    @jsii.member(jsii_name="fontFamilyInput")
    def font_family_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fontFamilyInput"))

    @builtins.property
    @jsii.member(jsii_name="styleControlInput")
    def style_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "styleControlInput"))

    @builtins.property
    @jsii.member(jsii_name="copyrightHolder")
    def copyright_holder(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "copyrightHolder"))

    @copyright_holder.setter
    def copyright_holder(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__360050341a36f3b9ca3d7d90eeadc7d3defbab49fa07b20ea904108fd3c54bf2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "copyrightHolder", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fillLineGap")
    def fill_line_gap(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fillLineGap"))

    @fill_line_gap.setter
    def fill_line_gap(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0dc8b020de349356f1b78f5d40f54821eb649d9462ee044029e28d1b91f67c80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fillLineGap", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fontFamily")
    def font_family(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fontFamily"))

    @font_family.setter
    def font_family(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b9d80681e81ad596aff27adde179903e818c1472af42c4490710f7e1463332f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fontFamily", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="styleControl")
    def style_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "styleControl"))

    @style_control.setter
    def style_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7338b2d631d6e295d390191fbf413ac935fa78714dbb2c3b4e49bd905733664)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "styleControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36cf99bf13390ffdf5d48bf1cd2ac5d0af81f6a83362ed4adf18b198b696d6d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97d25027433a56285a7b02a595d78a1f2bfefc4b5b28033aa56427307030d053)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__703d839db145a57cf73d3d8d8c1deaed7f993fdbe4ae3a23da8a2d28d7317067)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__772c4cd5c44dae5e5cc1644e536e5b369cb7a479ae040475906d85e051e0a3e9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b205ae80d0ea4e457d331e93ec379fc40f0b613cfa3a174a0e418b40f439dc32)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e46e27ec16cf10af76a2f5be461b7916edd25b469410ff39a1cc56c02969b131)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAribDestinationSettings")
    def put_arib_destination_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings()

        return typing.cast(None, jsii.invoke(self, "putAribDestinationSettings", [value]))

    @jsii.member(jsii_name="putBurnInDestinationSettings")
    def put_burn_in_destination_settings(
        self,
        *,
        outline_color: builtins.str,
        teletext_grid_control: builtins.str,
        alignment: typing.Optional[builtins.str] = None,
        background_color: typing.Optional[builtins.str] = None,
        background_opacity: typing.Optional[jsii.Number] = None,
        font: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont, typing.Dict[builtins.str, typing.Any]]] = None,
        font_color: typing.Optional[builtins.str] = None,
        font_opacity: typing.Optional[jsii.Number] = None,
        font_resolution: typing.Optional[jsii.Number] = None,
        font_size: typing.Optional[builtins.str] = None,
        outline_size: typing.Optional[jsii.Number] = None,
        shadow_color: typing.Optional[builtins.str] = None,
        shadow_opacity: typing.Optional[jsii.Number] = None,
        shadow_x_offset: typing.Optional[jsii.Number] = None,
        shadow_y_offset: typing.Optional[jsii.Number] = None,
        x_position: typing.Optional[jsii.Number] = None,
        y_position: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param outline_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_color MedialiveChannel#outline_color}.
        :param teletext_grid_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_grid_control MedialiveChannel#teletext_grid_control}.
        :param alignment: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alignment MedialiveChannel#alignment}.
        :param background_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_color MedialiveChannel#background_color}.
        :param background_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_opacity MedialiveChannel#background_opacity}.
        :param font: font block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font MedialiveChannel#font}
        :param font_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_color MedialiveChannel#font_color}.
        :param font_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_opacity MedialiveChannel#font_opacity}.
        :param font_resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_resolution MedialiveChannel#font_resolution}.
        :param font_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_size MedialiveChannel#font_size}.
        :param outline_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_size MedialiveChannel#outline_size}.
        :param shadow_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_color MedialiveChannel#shadow_color}.
        :param shadow_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_opacity MedialiveChannel#shadow_opacity}.
        :param shadow_x_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_x_offset MedialiveChannel#shadow_x_offset}.
        :param shadow_y_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_y_offset MedialiveChannel#shadow_y_offset}.
        :param x_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#x_position MedialiveChannel#x_position}.
        :param y_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#y_position MedialiveChannel#y_position}.
        '''
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings(
            outline_color=outline_color,
            teletext_grid_control=teletext_grid_control,
            alignment=alignment,
            background_color=background_color,
            background_opacity=background_opacity,
            font=font,
            font_color=font_color,
            font_opacity=font_opacity,
            font_resolution=font_resolution,
            font_size=font_size,
            outline_size=outline_size,
            shadow_color=shadow_color,
            shadow_opacity=shadow_opacity,
            shadow_x_offset=shadow_x_offset,
            shadow_y_offset=shadow_y_offset,
            x_position=x_position,
            y_position=y_position,
        )

        return typing.cast(None, jsii.invoke(self, "putBurnInDestinationSettings", [value]))

    @jsii.member(jsii_name="putDvbSubDestinationSettings")
    def put_dvb_sub_destination_settings(
        self,
        *,
        alignment: typing.Optional[builtins.str] = None,
        background_color: typing.Optional[builtins.str] = None,
        background_opacity: typing.Optional[jsii.Number] = None,
        font: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont, typing.Dict[builtins.str, typing.Any]]] = None,
        font_color: typing.Optional[builtins.str] = None,
        font_opacity: typing.Optional[jsii.Number] = None,
        font_resolution: typing.Optional[jsii.Number] = None,
        font_size: typing.Optional[builtins.str] = None,
        outline_color: typing.Optional[builtins.str] = None,
        outline_size: typing.Optional[jsii.Number] = None,
        shadow_color: typing.Optional[builtins.str] = None,
        shadow_opacity: typing.Optional[jsii.Number] = None,
        shadow_x_offset: typing.Optional[jsii.Number] = None,
        shadow_y_offset: typing.Optional[jsii.Number] = None,
        teletext_grid_control: typing.Optional[builtins.str] = None,
        x_position: typing.Optional[jsii.Number] = None,
        y_position: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param alignment: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alignment MedialiveChannel#alignment}.
        :param background_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_color MedialiveChannel#background_color}.
        :param background_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#background_opacity MedialiveChannel#background_opacity}.
        :param font: font block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font MedialiveChannel#font}
        :param font_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_color MedialiveChannel#font_color}.
        :param font_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_opacity MedialiveChannel#font_opacity}.
        :param font_resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_resolution MedialiveChannel#font_resolution}.
        :param font_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_size MedialiveChannel#font_size}.
        :param outline_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_color MedialiveChannel#outline_color}.
        :param outline_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outline_size MedialiveChannel#outline_size}.
        :param shadow_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_color MedialiveChannel#shadow_color}.
        :param shadow_opacity: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_opacity MedialiveChannel#shadow_opacity}.
        :param shadow_x_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_x_offset MedialiveChannel#shadow_x_offset}.
        :param shadow_y_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#shadow_y_offset MedialiveChannel#shadow_y_offset}.
        :param teletext_grid_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_grid_control MedialiveChannel#teletext_grid_control}.
        :param x_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#x_position MedialiveChannel#x_position}.
        :param y_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#y_position MedialiveChannel#y_position}.
        '''
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings(
            alignment=alignment,
            background_color=background_color,
            background_opacity=background_opacity,
            font=font,
            font_color=font_color,
            font_opacity=font_opacity,
            font_resolution=font_resolution,
            font_size=font_size,
            outline_color=outline_color,
            outline_size=outline_size,
            shadow_color=shadow_color,
            shadow_opacity=shadow_opacity,
            shadow_x_offset=shadow_x_offset,
            shadow_y_offset=shadow_y_offset,
            teletext_grid_control=teletext_grid_control,
            x_position=x_position,
            y_position=y_position,
        )

        return typing.cast(None, jsii.invoke(self, "putDvbSubDestinationSettings", [value]))

    @jsii.member(jsii_name="putEbuTtDDestinationSettings")
    def put_ebu_tt_d_destination_settings(
        self,
        *,
        copyright_holder: typing.Optional[builtins.str] = None,
        fill_line_gap: typing.Optional[builtins.str] = None,
        font_family: typing.Optional[builtins.str] = None,
        style_control: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param copyright_holder: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#copyright_holder MedialiveChannel#copyright_holder}.
        :param fill_line_gap: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fill_line_gap MedialiveChannel#fill_line_gap}.
        :param font_family: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#font_family MedialiveChannel#font_family}.
        :param style_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.
        '''
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings(
            copyright_holder=copyright_holder,
            fill_line_gap=fill_line_gap,
            font_family=font_family,
            style_control=style_control,
        )

        return typing.cast(None, jsii.invoke(self, "putEbuTtDDestinationSettings", [value]))

    @jsii.member(jsii_name="putEmbeddedDestinationSettings")
    def put_embedded_destination_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings()

        return typing.cast(None, jsii.invoke(self, "putEmbeddedDestinationSettings", [value]))

    @jsii.member(jsii_name="putEmbeddedPlusScte20DestinationSettings")
    def put_embedded_plus_scte20_destination_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings()

        return typing.cast(None, jsii.invoke(self, "putEmbeddedPlusScte20DestinationSettings", [value]))

    @jsii.member(jsii_name="putRtmpCaptionInfoDestinationSettings")
    def put_rtmp_caption_info_destination_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings()

        return typing.cast(None, jsii.invoke(self, "putRtmpCaptionInfoDestinationSettings", [value]))

    @jsii.member(jsii_name="putScte20PlusEmbeddedDestinationSettings")
    def put_scte20_plus_embedded_destination_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings()

        return typing.cast(None, jsii.invoke(self, "putScte20PlusEmbeddedDestinationSettings", [value]))

    @jsii.member(jsii_name="putScte27DestinationSettings")
    def put_scte27_destination_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings()

        return typing.cast(None, jsii.invoke(self, "putScte27DestinationSettings", [value]))

    @jsii.member(jsii_name="putSmpteTtDestinationSettings")
    def put_smpte_tt_destination_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings()

        return typing.cast(None, jsii.invoke(self, "putSmpteTtDestinationSettings", [value]))

    @jsii.member(jsii_name="putTeletextDestinationSettings")
    def put_teletext_destination_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings()

        return typing.cast(None, jsii.invoke(self, "putTeletextDestinationSettings", [value]))

    @jsii.member(jsii_name="putTtmlDestinationSettings")
    def put_ttml_destination_settings(self, *, style_control: builtins.str) -> None:
        '''
        :param style_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.
        '''
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings(
            style_control=style_control
        )

        return typing.cast(None, jsii.invoke(self, "putTtmlDestinationSettings", [value]))

    @jsii.member(jsii_name="putWebvttDestinationSettings")
    def put_webvtt_destination_settings(self, *, style_control: builtins.str) -> None:
        '''
        :param style_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.
        '''
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings(
            style_control=style_control
        )

        return typing.cast(None, jsii.invoke(self, "putWebvttDestinationSettings", [value]))

    @jsii.member(jsii_name="resetAribDestinationSettings")
    def reset_arib_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribDestinationSettings", []))

    @jsii.member(jsii_name="resetBurnInDestinationSettings")
    def reset_burn_in_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBurnInDestinationSettings", []))

    @jsii.member(jsii_name="resetDvbSubDestinationSettings")
    def reset_dvb_sub_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSubDestinationSettings", []))

    @jsii.member(jsii_name="resetEbuTtDDestinationSettings")
    def reset_ebu_tt_d_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbuTtDDestinationSettings", []))

    @jsii.member(jsii_name="resetEmbeddedDestinationSettings")
    def reset_embedded_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmbeddedDestinationSettings", []))

    @jsii.member(jsii_name="resetEmbeddedPlusScte20DestinationSettings")
    def reset_embedded_plus_scte20_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmbeddedPlusScte20DestinationSettings", []))

    @jsii.member(jsii_name="resetRtmpCaptionInfoDestinationSettings")
    def reset_rtmp_caption_info_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRtmpCaptionInfoDestinationSettings", []))

    @jsii.member(jsii_name="resetScte20PlusEmbeddedDestinationSettings")
    def reset_scte20_plus_embedded_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte20PlusEmbeddedDestinationSettings", []))

    @jsii.member(jsii_name="resetScte27DestinationSettings")
    def reset_scte27_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte27DestinationSettings", []))

    @jsii.member(jsii_name="resetSmpteTtDestinationSettings")
    def reset_smpte_tt_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSmpteTtDestinationSettings", []))

    @jsii.member(jsii_name="resetTeletextDestinationSettings")
    def reset_teletext_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTeletextDestinationSettings", []))

    @jsii.member(jsii_name="resetTtmlDestinationSettings")
    def reset_ttml_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTtmlDestinationSettings", []))

    @jsii.member(jsii_name="resetWebvttDestinationSettings")
    def reset_webvtt_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWebvttDestinationSettings", []))

    @builtins.property
    @jsii.member(jsii_name="aribDestinationSettings")
    def arib_destination_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference, jsii.get(self, "aribDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="burnInDestinationSettings")
    def burn_in_destination_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference, jsii.get(self, "burnInDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbSubDestinationSettings")
    def dvb_sub_destination_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference, jsii.get(self, "dvbSubDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="ebuTtDDestinationSettings")
    def ebu_tt_d_destination_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference, jsii.get(self, "ebuTtDDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="embeddedDestinationSettings")
    def embedded_destination_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference, jsii.get(self, "embeddedDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="embeddedPlusScte20DestinationSettings")
    def embedded_plus_scte20_destination_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference, jsii.get(self, "embeddedPlusScte20DestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="rtmpCaptionInfoDestinationSettings")
    def rtmp_caption_info_destination_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference", jsii.get(self, "rtmpCaptionInfoDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="scte20PlusEmbeddedDestinationSettings")
    def scte20_plus_embedded_destination_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference", jsii.get(self, "scte20PlusEmbeddedDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="scte27DestinationSettings")
    def scte27_destination_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference", jsii.get(self, "scte27DestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="smpteTtDestinationSettings")
    def smpte_tt_destination_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference", jsii.get(self, "smpteTtDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="teletextDestinationSettings")
    def teletext_destination_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference", jsii.get(self, "teletextDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="ttmlDestinationSettings")
    def ttml_destination_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference", jsii.get(self, "ttmlDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="webvttDestinationSettings")
    def webvtt_destination_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference", jsii.get(self, "webvttDestinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="aribDestinationSettingsInput")
    def arib_destination_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings], jsii.get(self, "aribDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="burnInDestinationSettingsInput")
    def burn_in_destination_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings], jsii.get(self, "burnInDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSubDestinationSettingsInput")
    def dvb_sub_destination_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings], jsii.get(self, "dvbSubDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="ebuTtDDestinationSettingsInput")
    def ebu_tt_d_destination_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings], jsii.get(self, "ebuTtDDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="embeddedDestinationSettingsInput")
    def embedded_destination_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings], jsii.get(self, "embeddedDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="embeddedPlusScte20DestinationSettingsInput")
    def embedded_plus_scte20_destination_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings], jsii.get(self, "embeddedPlusScte20DestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rtmpCaptionInfoDestinationSettingsInput")
    def rtmp_caption_info_destination_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings"], jsii.get(self, "rtmpCaptionInfoDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte20PlusEmbeddedDestinationSettingsInput")
    def scte20_plus_embedded_destination_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings"], jsii.get(self, "scte20PlusEmbeddedDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte27DestinationSettingsInput")
    def scte27_destination_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings"], jsii.get(self, "scte27DestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="smpteTtDestinationSettingsInput")
    def smpte_tt_destination_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings"], jsii.get(self, "smpteTtDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="teletextDestinationSettingsInput")
    def teletext_destination_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings"], jsii.get(self, "teletextDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="ttmlDestinationSettingsInput")
    def ttml_destination_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings"], jsii.get(self, "ttmlDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="webvttDestinationSettingsInput")
    def webvtt_destination_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings"], jsii.get(self, "webvttDestinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f53629adc1edcae2c743f848990e7ddf64aa45145d1e087f06f2cb44ced78bde)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__328b2316f9b031475fa0bd2ea9ffe4e664cf179115faf9b324c0ee919d5f000e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a2b8a25a85f01c6fcee677b59dcd5dd14671af56cad6743d74a1a983c4e3884)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__424c0caeace83a67f8742751f6a43a47c02a91a2115114c59674384150612bb9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3f75e07d32c8b0c8b90f2563425be06990f6b89b9b751bec9bb1b650065e154)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57001e7011b109bcceada36b95b5a284796e7ef8220cd03f1f455cd65e5c52d0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b497b0b2acdef79b4e7bdb6ddd4b5eac79cef9588be21ca3555ccc09f1cf9b1c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00ac1e14ea20acf942d26a9a3320271ba9ae065ff22dfde1e37995abfaa61695)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7853dc4e967abe7886b616f6722941a26ea76e5377ee373eec28bc820ce4e917)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a4a97e47446b758fb1d0e9d2f5e96c79aad85926c86e59f868d89de2bce9754)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__455d51fa9776a700d830da37580e4070946476b0973a22d6406270ef5ef4285b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={"style_control": "styleControl"},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings:
    def __init__(self, *, style_control: builtins.str) -> None:
        '''
        :param style_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5506fdbe81986a1190771380d1de18d3478f2109bb06ed8c71131d798f87445)
            check_type(argname="argument style_control", value=style_control, expected_type=type_hints["style_control"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "style_control": style_control,
        }

    @builtins.property
    def style_control(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.'''
        result = self._values.get("style_control")
        assert result is not None, "Required property 'style_control' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0f81fff6044683cc0f39a6cab02b1e83eb292ee4699358f59e5fa88e046d393)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="styleControlInput")
    def style_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "styleControlInput"))

    @builtins.property
    @jsii.member(jsii_name="styleControl")
    def style_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "styleControl"))

    @style_control.setter
    def style_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__426690a0079a4b78cfcccf6dacfb28cc74efb8319d9359894bc2f7574ce6af39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "styleControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f6c0e50a9f5d63fb694d6e1ef990b07289f79840986f9601b19b24eaf02a66c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings",
    jsii_struct_bases=[],
    name_mapping={"style_control": "styleControl"},
)
class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings:
    def __init__(self, *, style_control: builtins.str) -> None:
        '''
        :param style_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b564c0bfedf9f1c6dca3711e67d153168db90a26eca053e16a61508f14ead1c)
            check_type(argname="argument style_control", value=style_control, expected_type=type_hints["style_control"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "style_control": style_control,
        }

    @builtins.property
    def style_control(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#style_control MedialiveChannel#style_control}.'''
        result = self._values.get("style_control")
        assert result is not None, "Required property 'style_control' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7afa444fcc4dfff6ceaec96c0287ca0f2f2733b7cc90fa6bebb2f0346a55037a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="styleControlInput")
    def style_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "styleControlInput"))

    @builtins.property
    @jsii.member(jsii_name="styleControl")
    def style_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "styleControl"))

    @style_control.setter
    def style_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5db4e72c65eaa0aa2df12465689c2d88d0559a851ff782cc95007ce111e0c48f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "styleControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fba7dad3a525f5210e1369f93ed2558a024fdf3b8dd3915f3f9c151fe8e7d25)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsCaptionDescriptionsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f74ee1a8232cf4cbbbcf0a064e17dabf27cb8f1e748bf1c8fe149b1e68bb26fd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6b53017e9cd2aeb1f968a02236a230defb13034984977209e48f4edb2899833)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5cdddc3cf0ef40f6075af5c50b649bc9b9017af3e4a8d31bace6c07f60f37a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd68a27e9068d311a142200e370a01346398d31278f7d0b95b46d818076491ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f9629eca0d53faa558ca04d229940f42f644854ad5f1195ec2965ff560c795d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsCaptionDescriptions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsCaptionDescriptions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsCaptionDescriptions]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd34d142e25e96b77ffc63f2afadac8be11af6a0ed14cc081b64c792c335cfd5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54035dfa52a6a2547b4983e141f515046e7833140e227ed57908dc94b40c6dad)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putDestinationSettings")
    def put_destination_settings(
        self,
        *,
        arib_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        burn_in_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sub_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        ebu_tt_d_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        embedded_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        embedded_plus_scte20_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        rtmp_caption_info_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        scte20_plus_embedded_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        scte27_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        smpte_tt_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        teletext_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        ttml_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        webvtt_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param arib_destination_settings: arib_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_destination_settings MedialiveChannel#arib_destination_settings}
        :param burn_in_destination_settings: burn_in_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#burn_in_destination_settings MedialiveChannel#burn_in_destination_settings}
        :param dvb_sub_destination_settings: dvb_sub_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_destination_settings MedialiveChannel#dvb_sub_destination_settings}
        :param ebu_tt_d_destination_settings: ebu_tt_d_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebu_tt_d_destination_settings MedialiveChannel#ebu_tt_d_destination_settings}
        :param embedded_destination_settings: embedded_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_destination_settings MedialiveChannel#embedded_destination_settings}
        :param embedded_plus_scte20_destination_settings: embedded_plus_scte20_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_plus_scte20_destination_settings MedialiveChannel#embedded_plus_scte20_destination_settings}
        :param rtmp_caption_info_destination_settings: rtmp_caption_info_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_caption_info_destination_settings MedialiveChannel#rtmp_caption_info_destination_settings}
        :param scte20_plus_embedded_destination_settings: scte20_plus_embedded_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_plus_embedded_destination_settings MedialiveChannel#scte20_plus_embedded_destination_settings}
        :param scte27_destination_settings: scte27_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_destination_settings MedialiveChannel#scte27_destination_settings}
        :param smpte_tt_destination_settings: smpte_tt_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#smpte_tt_destination_settings MedialiveChannel#smpte_tt_destination_settings}
        :param teletext_destination_settings: teletext_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_destination_settings MedialiveChannel#teletext_destination_settings}
        :param ttml_destination_settings: ttml_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ttml_destination_settings MedialiveChannel#ttml_destination_settings}
        :param webvtt_destination_settings: webvtt_destination_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#webvtt_destination_settings MedialiveChannel#webvtt_destination_settings}
        '''
        value = MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings(
            arib_destination_settings=arib_destination_settings,
            burn_in_destination_settings=burn_in_destination_settings,
            dvb_sub_destination_settings=dvb_sub_destination_settings,
            ebu_tt_d_destination_settings=ebu_tt_d_destination_settings,
            embedded_destination_settings=embedded_destination_settings,
            embedded_plus_scte20_destination_settings=embedded_plus_scte20_destination_settings,
            rtmp_caption_info_destination_settings=rtmp_caption_info_destination_settings,
            scte20_plus_embedded_destination_settings=scte20_plus_embedded_destination_settings,
            scte27_destination_settings=scte27_destination_settings,
            smpte_tt_destination_settings=smpte_tt_destination_settings,
            teletext_destination_settings=teletext_destination_settings,
            ttml_destination_settings=ttml_destination_settings,
            webvtt_destination_settings=webvtt_destination_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putDestinationSettings", [value]))

    @jsii.member(jsii_name="resetAccessibility")
    def reset_accessibility(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAccessibility", []))

    @jsii.member(jsii_name="resetDestinationSettings")
    def reset_destination_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDestinationSettings", []))

    @jsii.member(jsii_name="resetLanguageCode")
    def reset_language_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageCode", []))

    @jsii.member(jsii_name="resetLanguageDescription")
    def reset_language_description(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageDescription", []))

    @builtins.property
    @jsii.member(jsii_name="destinationSettings")
    def destination_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference, jsii.get(self, "destinationSettings"))

    @builtins.property
    @jsii.member(jsii_name="accessibilityInput")
    def accessibility_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "accessibilityInput"))

    @builtins.property
    @jsii.member(jsii_name="captionSelectorNameInput")
    def caption_selector_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "captionSelectorNameInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationSettingsInput")
    def destination_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings], jsii.get(self, "destinationSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="languageDescriptionInput")
    def language_description_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageDescriptionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="accessibility")
    def accessibility(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "accessibility"))

    @accessibility.setter
    def accessibility(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f50aee4f29f2158d8102bfa8b93f42c8e69ee0967e0315e67d388f97912b3a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "accessibility", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="captionSelectorName")
    def caption_selector_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "captionSelectorName"))

    @caption_selector_name.setter
    def caption_selector_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e46724418028a6db17ce0d86698cff8cfb5dc9e51004ea877f979880f8507145)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionSelectorName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d65635745317c16b28198364e470ecf15c5306b48feca87e929c2a7d68fd189a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="languageDescription")
    def language_description(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageDescription"))

    @language_description.setter
    def language_description(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf0e534af411041a34ba590fd4946d88de6dc2990a6bd52841eed717d895c1fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageDescription", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93238f10f22896d23990f941b31dd19994ff891d7d5bf1b00f4a227f34178f11)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsCaptionDescriptions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsCaptionDescriptions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsCaptionDescriptions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74e0a4e519305780b8db74cd1c24c4ba30528106be143eb31e3b94087c5fa711)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfiguration",
    jsii_struct_bases=[],
    name_mapping={
        "initial_audio_gain": "initialAudioGain",
        "input_end_action": "inputEndAction",
        "input_loss_behavior": "inputLossBehavior",
        "output_locking_mode": "outputLockingMode",
        "output_timing_source": "outputTimingSource",
        "support_low_framerate_inputs": "supportLowFramerateInputs",
    },
)
class MedialiveChannelEncoderSettingsGlobalConfiguration:
    def __init__(
        self,
        *,
        initial_audio_gain: typing.Optional[jsii.Number] = None,
        input_end_action: typing.Optional[builtins.str] = None,
        input_loss_behavior: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior", typing.Dict[builtins.str, typing.Any]]] = None,
        output_locking_mode: typing.Optional[builtins.str] = None,
        output_timing_source: typing.Optional[builtins.str] = None,
        support_low_framerate_inputs: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param initial_audio_gain: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#initial_audio_gain MedialiveChannel#initial_audio_gain}.
        :param input_end_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_end_action MedialiveChannel#input_end_action}.
        :param input_loss_behavior: input_loss_behavior block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_behavior MedialiveChannel#input_loss_behavior}
        :param output_locking_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_locking_mode MedialiveChannel#output_locking_mode}.
        :param output_timing_source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_timing_source MedialiveChannel#output_timing_source}.
        :param support_low_framerate_inputs: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#support_low_framerate_inputs MedialiveChannel#support_low_framerate_inputs}.
        '''
        if isinstance(input_loss_behavior, dict):
            input_loss_behavior = MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior(**input_loss_behavior)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6598d8cadd753da741fa4e2ac7f15f7c44160198c04edcec7e61ae3489b7bc27)
            check_type(argname="argument initial_audio_gain", value=initial_audio_gain, expected_type=type_hints["initial_audio_gain"])
            check_type(argname="argument input_end_action", value=input_end_action, expected_type=type_hints["input_end_action"])
            check_type(argname="argument input_loss_behavior", value=input_loss_behavior, expected_type=type_hints["input_loss_behavior"])
            check_type(argname="argument output_locking_mode", value=output_locking_mode, expected_type=type_hints["output_locking_mode"])
            check_type(argname="argument output_timing_source", value=output_timing_source, expected_type=type_hints["output_timing_source"])
            check_type(argname="argument support_low_framerate_inputs", value=support_low_framerate_inputs, expected_type=type_hints["support_low_framerate_inputs"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if initial_audio_gain is not None:
            self._values["initial_audio_gain"] = initial_audio_gain
        if input_end_action is not None:
            self._values["input_end_action"] = input_end_action
        if input_loss_behavior is not None:
            self._values["input_loss_behavior"] = input_loss_behavior
        if output_locking_mode is not None:
            self._values["output_locking_mode"] = output_locking_mode
        if output_timing_source is not None:
            self._values["output_timing_source"] = output_timing_source
        if support_low_framerate_inputs is not None:
            self._values["support_low_framerate_inputs"] = support_low_framerate_inputs

    @builtins.property
    def initial_audio_gain(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#initial_audio_gain MedialiveChannel#initial_audio_gain}.'''
        result = self._values.get("initial_audio_gain")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def input_end_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_end_action MedialiveChannel#input_end_action}.'''
        result = self._values.get("input_end_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def input_loss_behavior(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior"]:
        '''input_loss_behavior block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_behavior MedialiveChannel#input_loss_behavior}
        '''
        result = self._values.get("input_loss_behavior")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior"], result)

    @builtins.property
    def output_locking_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_locking_mode MedialiveChannel#output_locking_mode}.'''
        result = self._values.get("output_locking_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def output_timing_source(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_timing_source MedialiveChannel#output_timing_source}.'''
        result = self._values.get("output_timing_source")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def support_low_framerate_inputs(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#support_low_framerate_inputs MedialiveChannel#support_low_framerate_inputs}.'''
        result = self._values.get("support_low_framerate_inputs")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsGlobalConfiguration(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior",
    jsii_struct_bases=[],
    name_mapping={
        "black_frame_msec": "blackFrameMsec",
        "input_loss_image_color": "inputLossImageColor",
        "input_loss_image_slate": "inputLossImageSlate",
        "input_loss_image_type": "inputLossImageType",
        "repeat_frame_msec": "repeatFrameMsec",
    },
)
class MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior:
    def __init__(
        self,
        *,
        black_frame_msec: typing.Optional[jsii.Number] = None,
        input_loss_image_color: typing.Optional[builtins.str] = None,
        input_loss_image_slate: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate", typing.Dict[builtins.str, typing.Any]]] = None,
        input_loss_image_type: typing.Optional[builtins.str] = None,
        repeat_frame_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param black_frame_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#black_frame_msec MedialiveChannel#black_frame_msec}.
        :param input_loss_image_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_color MedialiveChannel#input_loss_image_color}.
        :param input_loss_image_slate: input_loss_image_slate block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_slate MedialiveChannel#input_loss_image_slate}
        :param input_loss_image_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_type MedialiveChannel#input_loss_image_type}.
        :param repeat_frame_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#repeat_frame_msec MedialiveChannel#repeat_frame_msec}.
        '''
        if isinstance(input_loss_image_slate, dict):
            input_loss_image_slate = MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(**input_loss_image_slate)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff51bd3a5b88a45f50676aa2e8ab5f36913abde26b9d2a090a3c0fe03b3ee9ad)
            check_type(argname="argument black_frame_msec", value=black_frame_msec, expected_type=type_hints["black_frame_msec"])
            check_type(argname="argument input_loss_image_color", value=input_loss_image_color, expected_type=type_hints["input_loss_image_color"])
            check_type(argname="argument input_loss_image_slate", value=input_loss_image_slate, expected_type=type_hints["input_loss_image_slate"])
            check_type(argname="argument input_loss_image_type", value=input_loss_image_type, expected_type=type_hints["input_loss_image_type"])
            check_type(argname="argument repeat_frame_msec", value=repeat_frame_msec, expected_type=type_hints["repeat_frame_msec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if black_frame_msec is not None:
            self._values["black_frame_msec"] = black_frame_msec
        if input_loss_image_color is not None:
            self._values["input_loss_image_color"] = input_loss_image_color
        if input_loss_image_slate is not None:
            self._values["input_loss_image_slate"] = input_loss_image_slate
        if input_loss_image_type is not None:
            self._values["input_loss_image_type"] = input_loss_image_type
        if repeat_frame_msec is not None:
            self._values["repeat_frame_msec"] = repeat_frame_msec

    @builtins.property
    def black_frame_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#black_frame_msec MedialiveChannel#black_frame_msec}.'''
        result = self._values.get("black_frame_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def input_loss_image_color(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_color MedialiveChannel#input_loss_image_color}.'''
        result = self._values.get("input_loss_image_color")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def input_loss_image_slate(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate"]:
        '''input_loss_image_slate block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_slate MedialiveChannel#input_loss_image_slate}
        '''
        result = self._values.get("input_loss_image_slate")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate"], result)

    @builtins.property
    def input_loss_image_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_type MedialiveChannel#input_loss_image_type}.'''
        result = self._values.get("input_loss_image_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def repeat_frame_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#repeat_frame_msec MedialiveChannel#repeat_frame_msec}.'''
        result = self._values.get("repeat_frame_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c92dfbdd7dbe629241d038de850d2e4786f023cbd35922aef7f54ebaa545b7f)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf7512b90198682abc35748d9a86bb0f0ae9f7b4ef909a2db7139b3cbd8750e5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1e7bfbf89279a7a2feacc89a8cccabe8794f31133ba005babeed8d2d5bbbb86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b74d3b54c52fbe8c94287cff556fdffd57ff7fd52d12af8873fee66f9c1ce866)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb087a0353ab1d648752b5bdb4689a9b354b841673a6ebf41050ee3f2dc8c2d5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11c196cda4d41518b76f557b0ffaabe94fc1163d35f22cff2e2b27513ebf9028)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e88e4b19fd57ada7016f1a59d4d50b99bd3d1b7e63ec0c13aad449981a2c4038)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putInputLossImageSlate")
    def put_input_loss_image_slate(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putInputLossImageSlate", [value]))

    @jsii.member(jsii_name="resetBlackFrameMsec")
    def reset_black_frame_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBlackFrameMsec", []))

    @jsii.member(jsii_name="resetInputLossImageColor")
    def reset_input_loss_image_color(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossImageColor", []))

    @jsii.member(jsii_name="resetInputLossImageSlate")
    def reset_input_loss_image_slate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossImageSlate", []))

    @jsii.member(jsii_name="resetInputLossImageType")
    def reset_input_loss_image_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossImageType", []))

    @jsii.member(jsii_name="resetRepeatFrameMsec")
    def reset_repeat_frame_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepeatFrameMsec", []))

    @builtins.property
    @jsii.member(jsii_name="inputLossImageSlate")
    def input_loss_image_slate(
        self,
    ) -> MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference, jsii.get(self, "inputLossImageSlate"))

    @builtins.property
    @jsii.member(jsii_name="blackFrameMsecInput")
    def black_frame_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "blackFrameMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossImageColorInput")
    def input_loss_image_color_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossImageColorInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossImageSlateInput")
    def input_loss_image_slate_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate], jsii.get(self, "inputLossImageSlateInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossImageTypeInput")
    def input_loss_image_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossImageTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="repeatFrameMsecInput")
    def repeat_frame_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repeatFrameMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="blackFrameMsec")
    def black_frame_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "blackFrameMsec"))

    @black_frame_msec.setter
    def black_frame_msec(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49ebb75a266e4116fa4894eb6ccb1ffa3c0acb8414bb1d5907cfc01deece1fd2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "blackFrameMsec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputLossImageColor")
    def input_loss_image_color(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossImageColor"))

    @input_loss_image_color.setter
    def input_loss_image_color(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6015adf6d498ae06c426b91634215433cabd7812d69dc6890fc94d8d613381bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossImageColor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputLossImageType")
    def input_loss_image_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossImageType"))

    @input_loss_image_type.setter
    def input_loss_image_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6337c1de267f67eb3a52cb797a031a6c10bcf1b6cf2764bbceaf896a4e1c913e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossImageType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="repeatFrameMsec")
    def repeat_frame_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repeatFrameMsec"))

    @repeat_frame_msec.setter
    def repeat_frame_msec(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f8e871b740e96c62f104c390fd8eb1e1f1d803c2d3ad21c9aa14de19c4798882)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repeatFrameMsec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8eb301cb804440bfd7d29a39da1812211e3784c5d5a2b2277acf47c7d4361b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72e122c485955c1c503d9305e86c6d548b084239de303a5dca75d37e5954fcb5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putInputLossBehavior")
    def put_input_loss_behavior(
        self,
        *,
        black_frame_msec: typing.Optional[jsii.Number] = None,
        input_loss_image_color: typing.Optional[builtins.str] = None,
        input_loss_image_slate: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate, typing.Dict[builtins.str, typing.Any]]] = None,
        input_loss_image_type: typing.Optional[builtins.str] = None,
        repeat_frame_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param black_frame_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#black_frame_msec MedialiveChannel#black_frame_msec}.
        :param input_loss_image_color: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_color MedialiveChannel#input_loss_image_color}.
        :param input_loss_image_slate: input_loss_image_slate block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_slate MedialiveChannel#input_loss_image_slate}
        :param input_loss_image_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_image_type MedialiveChannel#input_loss_image_type}.
        :param repeat_frame_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#repeat_frame_msec MedialiveChannel#repeat_frame_msec}.
        '''
        value = MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior(
            black_frame_msec=black_frame_msec,
            input_loss_image_color=input_loss_image_color,
            input_loss_image_slate=input_loss_image_slate,
            input_loss_image_type=input_loss_image_type,
            repeat_frame_msec=repeat_frame_msec,
        )

        return typing.cast(None, jsii.invoke(self, "putInputLossBehavior", [value]))

    @jsii.member(jsii_name="resetInitialAudioGain")
    def reset_initial_audio_gain(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInitialAudioGain", []))

    @jsii.member(jsii_name="resetInputEndAction")
    def reset_input_end_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputEndAction", []))

    @jsii.member(jsii_name="resetInputLossBehavior")
    def reset_input_loss_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossBehavior", []))

    @jsii.member(jsii_name="resetOutputLockingMode")
    def reset_output_locking_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputLockingMode", []))

    @jsii.member(jsii_name="resetOutputTimingSource")
    def reset_output_timing_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputTimingSource", []))

    @jsii.member(jsii_name="resetSupportLowFramerateInputs")
    def reset_support_low_framerate_inputs(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSupportLowFramerateInputs", []))

    @builtins.property
    @jsii.member(jsii_name="inputLossBehavior")
    def input_loss_behavior(
        self,
    ) -> MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference, jsii.get(self, "inputLossBehavior"))

    @builtins.property
    @jsii.member(jsii_name="initialAudioGainInput")
    def initial_audio_gain_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "initialAudioGainInput"))

    @builtins.property
    @jsii.member(jsii_name="inputEndActionInput")
    def input_end_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputEndActionInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossBehaviorInput")
    def input_loss_behavior_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior], jsii.get(self, "inputLossBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="outputLockingModeInput")
    def output_locking_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputLockingModeInput"))

    @builtins.property
    @jsii.member(jsii_name="outputTimingSourceInput")
    def output_timing_source_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputTimingSourceInput"))

    @builtins.property
    @jsii.member(jsii_name="supportLowFramerateInputsInput")
    def support_low_framerate_inputs_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "supportLowFramerateInputsInput"))

    @builtins.property
    @jsii.member(jsii_name="initialAudioGain")
    def initial_audio_gain(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "initialAudioGain"))

    @initial_audio_gain.setter
    def initial_audio_gain(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4882a2c53fac9d7636a45d12b6d34b0f229f7d9c1eec17ec27d9c987ec8217bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "initialAudioGain", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputEndAction")
    def input_end_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputEndAction"))

    @input_end_action.setter
    def input_end_action(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0334a7c38d264511815ef3f2b07745d50fa604c0b238c215f7d28b78c45aeeaa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputEndAction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="outputLockingMode")
    def output_locking_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputLockingMode"))

    @output_locking_mode.setter
    def output_locking_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__efe2dd9ee8370914ad6a15174fd60e12a5e06be1a2b7f58acc99eb9322a3c8ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputLockingMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="outputTimingSource")
    def output_timing_source(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputTimingSource"))

    @output_timing_source.setter
    def output_timing_source(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c33611d58ff525531fd3f775ed746d89ebee19b3abeac5c091a2c550436b746)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputTimingSource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="supportLowFramerateInputs")
    def support_low_framerate_inputs(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "supportLowFramerateInputs"))

    @support_low_framerate_inputs.setter
    def support_low_framerate_inputs(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4faf56f91d61cbdd25b3d8c47a3898fa7c3f0126fc3ddff1751dd2add4655944)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "supportLowFramerateInputs", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsGlobalConfiguration]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsGlobalConfiguration], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsGlobalConfiguration],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28e0bbc7c1d0c6b9895643657ea9f1933fe1215564f13214a39ff7bd3b3f976c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfiguration",
    jsii_struct_bases=[],
    name_mapping={
        "motion_graphics_settings": "motionGraphicsSettings",
        "motion_graphics_insertion": "motionGraphicsInsertion",
    },
)
class MedialiveChannelEncoderSettingsMotionGraphicsConfiguration:
    def __init__(
        self,
        *,
        motion_graphics_settings: typing.Union["MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings", typing.Dict[builtins.str, typing.Any]],
        motion_graphics_insertion: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param motion_graphics_settings: motion_graphics_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_settings MedialiveChannel#motion_graphics_settings}
        :param motion_graphics_insertion: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_insertion MedialiveChannel#motion_graphics_insertion}.
        '''
        if isinstance(motion_graphics_settings, dict):
            motion_graphics_settings = MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings(**motion_graphics_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfa28fffff7b5303b34a9786ad181dc05e0d584a64e748b454a6cad2f960087d)
            check_type(argname="argument motion_graphics_settings", value=motion_graphics_settings, expected_type=type_hints["motion_graphics_settings"])
            check_type(argname="argument motion_graphics_insertion", value=motion_graphics_insertion, expected_type=type_hints["motion_graphics_insertion"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "motion_graphics_settings": motion_graphics_settings,
        }
        if motion_graphics_insertion is not None:
            self._values["motion_graphics_insertion"] = motion_graphics_insertion

    @builtins.property
    def motion_graphics_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings":
        '''motion_graphics_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_settings MedialiveChannel#motion_graphics_settings}
        '''
        result = self._values.get("motion_graphics_settings")
        assert result is not None, "Required property 'motion_graphics_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings", result)

    @builtins.property
    def motion_graphics_insertion(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_insertion MedialiveChannel#motion_graphics_insertion}.'''
        result = self._values.get("motion_graphics_insertion")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsMotionGraphicsConfiguration(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings",
    jsii_struct_bases=[],
    name_mapping={"html_motion_graphics_settings": "htmlMotionGraphicsSettings"},
)
class MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings:
    def __init__(
        self,
        *,
        html_motion_graphics_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param html_motion_graphics_settings: html_motion_graphics_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#html_motion_graphics_settings MedialiveChannel#html_motion_graphics_settings}
        '''
        if isinstance(html_motion_graphics_settings, dict):
            html_motion_graphics_settings = MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings(**html_motion_graphics_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d375d17f9c26d9f1df951c3dfe0fd2d08fd922da091a0b62b4c0a80621709bf2)
            check_type(argname="argument html_motion_graphics_settings", value=html_motion_graphics_settings, expected_type=type_hints["html_motion_graphics_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if html_motion_graphics_settings is not None:
            self._values["html_motion_graphics_settings"] = html_motion_graphics_settings

    @builtins.property
    def html_motion_graphics_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings"]:
        '''html_motion_graphics_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#html_motion_graphics_settings MedialiveChannel#html_motion_graphics_settings}
        '''
        result = self._values.get("html_motion_graphics_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82a8373f0c664b9c350e43e42a8a77d0db2b6378ef790d3067a3f7a82135600b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfb4a87512fe4f36f38365e054398c6f8779afe44c6566577ec62cc419b5061f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1dc65c438545ab6c60bcc580c6e4d188ac9736ca32c4d6203eaba00d94afabd2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putHtmlMotionGraphicsSettings")
    def put_html_motion_graphics_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings()

        return typing.cast(None, jsii.invoke(self, "putHtmlMotionGraphicsSettings", [value]))

    @jsii.member(jsii_name="resetHtmlMotionGraphicsSettings")
    def reset_html_motion_graphics_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHtmlMotionGraphicsSettings", []))

    @builtins.property
    @jsii.member(jsii_name="htmlMotionGraphicsSettings")
    def html_motion_graphics_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference, jsii.get(self, "htmlMotionGraphicsSettings"))

    @builtins.property
    @jsii.member(jsii_name="htmlMotionGraphicsSettingsInput")
    def html_motion_graphics_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings], jsii.get(self, "htmlMotionGraphicsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f04630a567cee69585163947095b1c2b7769de5b12647c85fc487942d682b47d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf176cbd97e046180fa854910cc0fe2baf8e297796aa018c77111ca1b84f0e09)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putMotionGraphicsSettings")
    def put_motion_graphics_settings(
        self,
        *,
        html_motion_graphics_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param html_motion_graphics_settings: html_motion_graphics_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#html_motion_graphics_settings MedialiveChannel#html_motion_graphics_settings}
        '''
        value = MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings(
            html_motion_graphics_settings=html_motion_graphics_settings
        )

        return typing.cast(None, jsii.invoke(self, "putMotionGraphicsSettings", [value]))

    @jsii.member(jsii_name="resetMotionGraphicsInsertion")
    def reset_motion_graphics_insertion(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMotionGraphicsInsertion", []))

    @builtins.property
    @jsii.member(jsii_name="motionGraphicsSettings")
    def motion_graphics_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference, jsii.get(self, "motionGraphicsSettings"))

    @builtins.property
    @jsii.member(jsii_name="motionGraphicsInsertionInput")
    def motion_graphics_insertion_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "motionGraphicsInsertionInput"))

    @builtins.property
    @jsii.member(jsii_name="motionGraphicsSettingsInput")
    def motion_graphics_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings], jsii.get(self, "motionGraphicsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="motionGraphicsInsertion")
    def motion_graphics_insertion(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "motionGraphicsInsertion"))

    @motion_graphics_insertion.setter
    def motion_graphics_insertion(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__395b4eaa1c0a6d71b3eec0363582551f4eaad4c5c15755481127d224fb6c6c56)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "motionGraphicsInsertion", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfiguration]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfiguration], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfiguration],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db153a3f1abba87c6fc6ce8e5622e5a02ea3530fbe4e7326dbb130e89c696993)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsNielsenConfiguration",
    jsii_struct_bases=[],
    name_mapping={
        "distributor_id": "distributorId",
        "nielsen_pcm_to_id3_tagging": "nielsenPcmToId3Tagging",
    },
)
class MedialiveChannelEncoderSettingsNielsenConfiguration:
    def __init__(
        self,
        *,
        distributor_id: typing.Optional[builtins.str] = None,
        nielsen_pcm_to_id3_tagging: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param distributor_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#distributor_id MedialiveChannel#distributor_id}.
        :param nielsen_pcm_to_id3_tagging: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_pcm_to_id3_tagging MedialiveChannel#nielsen_pcm_to_id3_tagging}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12f030295aca6d9f1acf8cbc5bba430c5a412ceddd1c687c32112c2aa84ab073)
            check_type(argname="argument distributor_id", value=distributor_id, expected_type=type_hints["distributor_id"])
            check_type(argname="argument nielsen_pcm_to_id3_tagging", value=nielsen_pcm_to_id3_tagging, expected_type=type_hints["nielsen_pcm_to_id3_tagging"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if distributor_id is not None:
            self._values["distributor_id"] = distributor_id
        if nielsen_pcm_to_id3_tagging is not None:
            self._values["nielsen_pcm_to_id3_tagging"] = nielsen_pcm_to_id3_tagging

    @builtins.property
    def distributor_id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#distributor_id MedialiveChannel#distributor_id}.'''
        result = self._values.get("distributor_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_pcm_to_id3_tagging(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_pcm_to_id3_tagging MedialiveChannel#nielsen_pcm_to_id3_tagging}.'''
        result = self._values.get("nielsen_pcm_to_id3_tagging")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsNielsenConfiguration(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6723e619ea73be6cd31030b80cbf9f8d065bd32a10f67899687125b7b099f905)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetDistributorId")
    def reset_distributor_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDistributorId", []))

    @jsii.member(jsii_name="resetNielsenPcmToId3Tagging")
    def reset_nielsen_pcm_to_id3_tagging(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenPcmToId3Tagging", []))

    @builtins.property
    @jsii.member(jsii_name="distributorIdInput")
    def distributor_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "distributorIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenPcmToId3TaggingInput")
    def nielsen_pcm_to_id3_tagging_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenPcmToId3TaggingInput"))

    @builtins.property
    @jsii.member(jsii_name="distributorId")
    def distributor_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "distributorId"))

    @distributor_id.setter
    def distributor_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a469d7103541dd25da2de21e29a861c957ac9fe85ec16b8505ff8cf3516a0b55)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "distributorId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nielsenPcmToId3Tagging")
    def nielsen_pcm_to_id3_tagging(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenPcmToId3Tagging"))

    @nielsen_pcm_to_id3_tagging.setter
    def nielsen_pcm_to_id3_tagging(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7312f86c8db292bf666755c05faf4d574a98d8d8a7b48832de5120b7e2bbc6bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenPcmToId3Tagging", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsNielsenConfiguration]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsNielsenConfiguration], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsNielsenConfiguration],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afb9725f65f8e523ddd8593432867e8571074174872e27d299f88d37aed9c193)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroups",
    jsii_struct_bases=[],
    name_mapping={
        "output_group_settings": "outputGroupSettings",
        "outputs": "outputs",
        "name": "name",
    },
)
class MedialiveChannelEncoderSettingsOutputGroups:
    def __init__(
        self,
        *,
        output_group_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings", typing.Dict[builtins.str, typing.Any]],
        outputs: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputs", typing.Dict[builtins.str, typing.Any]]]],
        name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_group_settings: output_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_group_settings MedialiveChannel#output_group_settings}
        :param outputs: outputs block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outputs MedialiveChannel#outputs}
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        '''
        if isinstance(output_group_settings, dict):
            output_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings(**output_group_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62024e4759d68376aa340afc51b0b0f721b64d3235e2fc14ab1e6294ae2d0358)
            check_type(argname="argument output_group_settings", value=output_group_settings, expected_type=type_hints["output_group_settings"])
            check_type(argname="argument outputs", value=outputs, expected_type=type_hints["outputs"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "output_group_settings": output_group_settings,
            "outputs": outputs,
        }
        if name is not None:
            self._values["name"] = name

    @builtins.property
    def output_group_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings":
        '''output_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_group_settings MedialiveChannel#output_group_settings}
        '''
        result = self._values.get("output_group_settings")
        assert result is not None, "Required property 'output_group_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings", result)

    @builtins.property
    def outputs(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputs"]]:
        '''outputs block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#outputs MedialiveChannel#outputs}
        '''
        result = self._values.get("outputs")
        assert result is not None, "Required property 'outputs' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputs"]], result)

    @builtins.property
    def name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroups(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff0383b914645378f0424d6c558189c701f18036bbfd3dd16bbe27e03f065813)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0425686028f7481a073e0210aab99c897ed0d7905897bc4287e590a7347ff92)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1fec8b9adcabeb212140e14d8779097aae2e1f39968283902e7082f5618a4a01)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e190df335c5bf0a143101cb4b410348bdb5a13ad0fc618bf9e0686642ca1979)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f465d05f10b4dc78faa0599dbcd46e780e93ecd6bb054695be736eb488e0c126)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__123d61f0391f6e15a8c4f54449ad77bf7d9a4199535c3575b85c26ca0151f646)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "archive_group_settings": "archiveGroupSettings",
        "frame_capture_group_settings": "frameCaptureGroupSettings",
        "hls_group_settings": "hlsGroupSettings",
        "media_package_group_settings": "mediaPackageGroupSettings",
        "ms_smooth_group_settings": "msSmoothGroupSettings",
        "multiplex_group_settings": "multiplexGroupSettings",
        "rtmp_group_settings": "rtmpGroupSettings",
        "udp_group_settings": "udpGroupSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings:
    def __init__(
        self,
        *,
        archive_group_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings", typing.Dict[builtins.str, typing.Any]]]]] = None,
        frame_capture_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        hls_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        media_package_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        ms_smooth_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        multiplex_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        rtmp_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        udp_group_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_group_settings: archive_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_group_settings MedialiveChannel#archive_group_settings}
        :param frame_capture_group_settings: frame_capture_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_group_settings MedialiveChannel#frame_capture_group_settings}
        :param hls_group_settings: hls_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_group_settings MedialiveChannel#hls_group_settings}
        :param media_package_group_settings: media_package_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_package_group_settings MedialiveChannel#media_package_group_settings}
        :param ms_smooth_group_settings: ms_smooth_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ms_smooth_group_settings MedialiveChannel#ms_smooth_group_settings}
        :param multiplex_group_settings: multiplex_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_group_settings MedialiveChannel#multiplex_group_settings}
        :param rtmp_group_settings: rtmp_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_group_settings MedialiveChannel#rtmp_group_settings}
        :param udp_group_settings: udp_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#udp_group_settings MedialiveChannel#udp_group_settings}
        '''
        if isinstance(frame_capture_group_settings, dict):
            frame_capture_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings(**frame_capture_group_settings)
        if isinstance(hls_group_settings, dict):
            hls_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings(**hls_group_settings)
        if isinstance(media_package_group_settings, dict):
            media_package_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings(**media_package_group_settings)
        if isinstance(ms_smooth_group_settings, dict):
            ms_smooth_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings(**ms_smooth_group_settings)
        if isinstance(multiplex_group_settings, dict):
            multiplex_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings(**multiplex_group_settings)
        if isinstance(rtmp_group_settings, dict):
            rtmp_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings(**rtmp_group_settings)
        if isinstance(udp_group_settings, dict):
            udp_group_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings(**udp_group_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9932daff9757645a9bdfd768b8d760b717a94bd313aa781e54839d7cd2ac01a2)
            check_type(argname="argument archive_group_settings", value=archive_group_settings, expected_type=type_hints["archive_group_settings"])
            check_type(argname="argument frame_capture_group_settings", value=frame_capture_group_settings, expected_type=type_hints["frame_capture_group_settings"])
            check_type(argname="argument hls_group_settings", value=hls_group_settings, expected_type=type_hints["hls_group_settings"])
            check_type(argname="argument media_package_group_settings", value=media_package_group_settings, expected_type=type_hints["media_package_group_settings"])
            check_type(argname="argument ms_smooth_group_settings", value=ms_smooth_group_settings, expected_type=type_hints["ms_smooth_group_settings"])
            check_type(argname="argument multiplex_group_settings", value=multiplex_group_settings, expected_type=type_hints["multiplex_group_settings"])
            check_type(argname="argument rtmp_group_settings", value=rtmp_group_settings, expected_type=type_hints["rtmp_group_settings"])
            check_type(argname="argument udp_group_settings", value=udp_group_settings, expected_type=type_hints["udp_group_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if archive_group_settings is not None:
            self._values["archive_group_settings"] = archive_group_settings
        if frame_capture_group_settings is not None:
            self._values["frame_capture_group_settings"] = frame_capture_group_settings
        if hls_group_settings is not None:
            self._values["hls_group_settings"] = hls_group_settings
        if media_package_group_settings is not None:
            self._values["media_package_group_settings"] = media_package_group_settings
        if ms_smooth_group_settings is not None:
            self._values["ms_smooth_group_settings"] = ms_smooth_group_settings
        if multiplex_group_settings is not None:
            self._values["multiplex_group_settings"] = multiplex_group_settings
        if rtmp_group_settings is not None:
            self._values["rtmp_group_settings"] = rtmp_group_settings
        if udp_group_settings is not None:
            self._values["udp_group_settings"] = udp_group_settings

    @builtins.property
    def archive_group_settings(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings"]]]:
        '''archive_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_group_settings MedialiveChannel#archive_group_settings}
        '''
        result = self._values.get("archive_group_settings")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings"]]], result)

    @builtins.property
    def frame_capture_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings"]:
        '''frame_capture_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_group_settings MedialiveChannel#frame_capture_group_settings}
        '''
        result = self._values.get("frame_capture_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings"], result)

    @builtins.property
    def hls_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings"]:
        '''hls_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_group_settings MedialiveChannel#hls_group_settings}
        '''
        result = self._values.get("hls_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings"], result)

    @builtins.property
    def media_package_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings"]:
        '''media_package_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_package_group_settings MedialiveChannel#media_package_group_settings}
        '''
        result = self._values.get("media_package_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings"], result)

    @builtins.property
    def ms_smooth_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings"]:
        '''ms_smooth_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ms_smooth_group_settings MedialiveChannel#ms_smooth_group_settings}
        '''
        result = self._values.get("ms_smooth_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings"], result)

    @builtins.property
    def multiplex_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings"]:
        '''multiplex_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_group_settings MedialiveChannel#multiplex_group_settings}
        '''
        result = self._values.get("multiplex_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings"], result)

    @builtins.property
    def rtmp_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings"]:
        '''rtmp_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_group_settings MedialiveChannel#rtmp_group_settings}
        '''
        result = self._values.get("rtmp_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings"], result)

    @builtins.property
    def udp_group_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings"]:
        '''udp_group_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#udp_group_settings MedialiveChannel#udp_group_settings}
        '''
        result = self._values.get("udp_group_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "archive_cdn_settings": "archiveCdnSettings",
        "rollover_interval": "rolloverInterval",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination", typing.Dict[builtins.str, typing.Any]],
        archive_cdn_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        rollover_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param archive_cdn_settings: archive_cdn_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_cdn_settings MedialiveChannel#archive_cdn_settings}
        :param rollover_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rollover_interval MedialiveChannel#rollover_interval}.
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination(**destination)
        if isinstance(archive_cdn_settings, dict):
            archive_cdn_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings(**archive_cdn_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9166e40588f38b47f545a32795713ab9ae15c557db7ab43ca49883fe269768cd)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument archive_cdn_settings", value=archive_cdn_settings, expected_type=type_hints["archive_cdn_settings"])
            check_type(argname="argument rollover_interval", value=rollover_interval, expected_type=type_hints["rollover_interval"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination": destination,
        }
        if archive_cdn_settings is not None:
            self._values["archive_cdn_settings"] = archive_cdn_settings
        if rollover_interval is not None:
            self._values["rollover_interval"] = rollover_interval

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination", result)

    @builtins.property
    def archive_cdn_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings"]:
        '''archive_cdn_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_cdn_settings MedialiveChannel#archive_cdn_settings}
        '''
        result = self._values.get("archive_cdn_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings"], result)

    @builtins.property
    def rollover_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rollover_interval MedialiveChannel#rollover_interval}.'''
        result = self._values.get("rollover_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings",
    jsii_struct_bases=[],
    name_mapping={"archive_s3_settings": "archiveS3Settings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings:
    def __init__(
        self,
        *,
        archive_s3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_s3_settings: archive_s3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_s3_settings MedialiveChannel#archive_s3_settings}
        '''
        if isinstance(archive_s3_settings, dict):
            archive_s3_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings(**archive_s3_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__055d99f207ab8383c81dee80e087bbaf055985511771b6da0b1b1038a19c6d1e)
            check_type(argname="argument archive_s3_settings", value=archive_s3_settings, expected_type=type_hints["archive_s3_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if archive_s3_settings is not None:
            self._values["archive_s3_settings"] = archive_s3_settings

    @builtins.property
    def archive_s3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings"]:
        '''archive_s3_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_s3_settings MedialiveChannel#archive_s3_settings}
        '''
        result = self._values.get("archive_s3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings",
    jsii_struct_bases=[],
    name_mapping={"canned_acl": "cannedAcl"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings:
    def __init__(self, *, canned_acl: typing.Optional[builtins.str] = None) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7db35eaacb41548c0157ee7aead247f07cd0887af00c209380a389cad7bd6590)
            check_type(argname="argument canned_acl", value=canned_acl, expected_type=type_hints["canned_acl"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if canned_acl is not None:
            self._values["canned_acl"] = canned_acl

    @builtins.property
    def canned_acl(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.'''
        result = self._values.get("canned_acl")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91f7f043e978e10ee95fe0770ba7a8c4fc59b807305c753bf043a510aad16e38)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCannedAcl")
    def reset_canned_acl(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCannedAcl", []))

    @builtins.property
    @jsii.member(jsii_name="cannedAclInput")
    def canned_acl_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cannedAclInput"))

    @builtins.property
    @jsii.member(jsii_name="cannedAcl")
    def canned_acl(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cannedAcl"))

    @canned_acl.setter
    def canned_acl(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff0ff3d7737dfb26a4dda0db451a202cb06f48df54fd32d209633e73cefc10af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cannedAcl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2ff973d1fe48f1c36bfce42bc00f2f4cfd4d3b0d874c9a6ecf55e1639a259bd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4499bd21e4dce50779b8e92bdeb68ce0942e179f277ec05d32d67d057df03f3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putArchiveS3Settings")
    def put_archive_s3_settings(
        self,
        *,
        canned_acl: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings(
            canned_acl=canned_acl
        )

        return typing.cast(None, jsii.invoke(self, "putArchiveS3Settings", [value]))

    @jsii.member(jsii_name="resetArchiveS3Settings")
    def reset_archive_s3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchiveS3Settings", []))

    @builtins.property
    @jsii.member(jsii_name="archiveS3Settings")
    def archive_s3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference, jsii.get(self, "archiveS3Settings"))

    @builtins.property
    @jsii.member(jsii_name="archiveS3SettingsInput")
    def archive_s3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings], jsii.get(self, "archiveS3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07ab79197d3221a104d0c2419c84b694828abeced68116ea5a683ed2c5318a2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0aec561930ab81079b67c59194d355cd26ec95c573cdc291921ed0ee52543e5)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0c1ed9285f2479cc95fcf6727981cfa89c415291dbc90d266d45db5bb1bfea6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__563cec715e3f8ff49515566cf0d815f629cb4f58d1471bca10d11811f4191aae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b8331a9a0f3bbda60ee3af0cce42aba5a097eeafbf61b7d8b9dad7448ed80b9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__808d4e31096e6c8639f990a391e1c113ba0ecbb489269104fe296d1d506d450e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__348d547a55e7ca7103f1d5613fb7ce6421af0e6f5670855f0a2132ba14c46122)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3c8e509bac27b0ac3f725038c6740b4097683c3b17fce289073b9700b9f5c3d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__860d69e4a99275e82811e1a03a061057a0f7048b3514c15f499275a4301729ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b44a7ca6e398f948175d6abea5388b188eeac8cbd7f286479ccb72d7ca5d085)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f7c3c339a6eaf8270cc192d427c92c7fa52e88738770f1a978321e61a2012f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e18cecb85358da336d6c54c66e3566f4dd3c4387db7d7cecc0fb587a3cc0ae5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putArchiveCdnSettings")
    def put_archive_cdn_settings(
        self,
        *,
        archive_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_s3_settings: archive_s3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_s3_settings MedialiveChannel#archive_s3_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings(
            archive_s3_settings=archive_s3_settings
        )

        return typing.cast(None, jsii.invoke(self, "putArchiveCdnSettings", [value]))

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="resetArchiveCdnSettings")
    def reset_archive_cdn_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchiveCdnSettings", []))

    @jsii.member(jsii_name="resetRolloverInterval")
    def reset_rollover_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRolloverInterval", []))

    @builtins.property
    @jsii.member(jsii_name="archiveCdnSettings")
    def archive_cdn_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference, jsii.get(self, "archiveCdnSettings"))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="archiveCdnSettingsInput")
    def archive_cdn_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings], jsii.get(self, "archiveCdnSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="rolloverIntervalInput")
    def rollover_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rolloverIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="rolloverInterval")
    def rollover_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "rolloverInterval"))

    @rollover_interval.setter
    def rollover_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e449d00c14cf6fb6682a786b23d4dfc76b181a6a7cb826582f8d66b58c2bfbd8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rolloverInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68fc5240659b8cbd054d2ffa357e0a5c631a6f06514417683e79385056977c44)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "frame_capture_cdn_settings": "frameCaptureCdnSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination", typing.Dict[builtins.str, typing.Any]],
        frame_capture_cdn_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param frame_capture_cdn_settings: frame_capture_cdn_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_cdn_settings MedialiveChannel#frame_capture_cdn_settings}
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination(**destination)
        if isinstance(frame_capture_cdn_settings, dict):
            frame_capture_cdn_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings(**frame_capture_cdn_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f9e9deff415f3887e641a99f3350c0667f23e00ccccde0bd09a36c2c9933841)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument frame_capture_cdn_settings", value=frame_capture_cdn_settings, expected_type=type_hints["frame_capture_cdn_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination": destination,
        }
        if frame_capture_cdn_settings is not None:
            self._values["frame_capture_cdn_settings"] = frame_capture_cdn_settings

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination", result)

    @builtins.property
    def frame_capture_cdn_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings"]:
        '''frame_capture_cdn_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_cdn_settings MedialiveChannel#frame_capture_cdn_settings}
        '''
        result = self._values.get("frame_capture_cdn_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24497a88e8dc40ed18a44d6b4eb1ab553ff7b036dc72832f5782c32cb78f75e4)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b62b5bd433ec8ae6e2400e90708817b9ee336a5bae939a96796c50f90549c05)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a508c9ce0e1d269c50e4dede5d90a1df0969dd55a4861c9e71ce484de692e9c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bf54ee97210e5dc1ea12489e3799d396b6403a637271eb38bc0ecb4b0f94847d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings",
    jsii_struct_bases=[],
    name_mapping={"frame_capture_s3_settings": "frameCaptureS3Settings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings:
    def __init__(
        self,
        *,
        frame_capture_s3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param frame_capture_s3_settings: frame_capture_s3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_s3_settings MedialiveChannel#frame_capture_s3_settings}
        '''
        if isinstance(frame_capture_s3_settings, dict):
            frame_capture_s3_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings(**frame_capture_s3_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb4f03d54acb20ade58153a137b95187514e24907c7c650aaad8f00372867364)
            check_type(argname="argument frame_capture_s3_settings", value=frame_capture_s3_settings, expected_type=type_hints["frame_capture_s3_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if frame_capture_s3_settings is not None:
            self._values["frame_capture_s3_settings"] = frame_capture_s3_settings

    @builtins.property
    def frame_capture_s3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings"]:
        '''frame_capture_s3_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_s3_settings MedialiveChannel#frame_capture_s3_settings}
        '''
        result = self._values.get("frame_capture_s3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings",
    jsii_struct_bases=[],
    name_mapping={"canned_acl": "cannedAcl"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings:
    def __init__(self, *, canned_acl: typing.Optional[builtins.str] = None) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0d6c5a97b2c988d35a7d1741c200925767e2e1f2feba7d991a10b476c31224b)
            check_type(argname="argument canned_acl", value=canned_acl, expected_type=type_hints["canned_acl"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if canned_acl is not None:
            self._values["canned_acl"] = canned_acl

    @builtins.property
    def canned_acl(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.'''
        result = self._values.get("canned_acl")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43e37a95b6b104fa2c868319588eb5783ecf1f62ea8afde4309ec687b2e44658)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCannedAcl")
    def reset_canned_acl(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCannedAcl", []))

    @builtins.property
    @jsii.member(jsii_name="cannedAclInput")
    def canned_acl_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cannedAclInput"))

    @builtins.property
    @jsii.member(jsii_name="cannedAcl")
    def canned_acl(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cannedAcl"))

    @canned_acl.setter
    def canned_acl(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e12d95e15001dfcde867329ebd206dec3a768bf55d9f570cbd949c94a8667e8f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cannedAcl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd89c12dfb6d99df0fc60c57766c2101aeb881597e0faf9833070409b901b2dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0dbb7b4412af361dc9c2f98a1b445c26ca136f2cbeec2f93dc70dbe6cf1b0793)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFrameCaptureS3Settings")
    def put_frame_capture_s3_settings(
        self,
        *,
        canned_acl: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings(
            canned_acl=canned_acl
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureS3Settings", [value]))

    @jsii.member(jsii_name="resetFrameCaptureS3Settings")
    def reset_frame_capture_s3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureS3Settings", []))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureS3Settings")
    def frame_capture_s3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference, jsii.get(self, "frameCaptureS3Settings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureS3SettingsInput")
    def frame_capture_s3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings], jsii.get(self, "frameCaptureS3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8cc54712f87caa22f46633ba30573bb120a971c3b960133fef7c1f02c8c181ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f39933249d88905b0ce72ec7e93ce1dea5b8d72a7565939018ffbbd1e577944)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putFrameCaptureCdnSettings")
    def put_frame_capture_cdn_settings(
        self,
        *,
        frame_capture_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param frame_capture_s3_settings: frame_capture_s3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_s3_settings MedialiveChannel#frame_capture_s3_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings(
            frame_capture_s3_settings=frame_capture_s3_settings
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureCdnSettings", [value]))

    @jsii.member(jsii_name="resetFrameCaptureCdnSettings")
    def reset_frame_capture_cdn_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureCdnSettings", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureCdnSettings")
    def frame_capture_cdn_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference, jsii.get(self, "frameCaptureCdnSettings"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureCdnSettingsInput")
    def frame_capture_cdn_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings], jsii.get(self, "frameCaptureCdnSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3742997cbc1ea7084df12842e6e4624b32b530015948e116504d62ace63bb61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "ad_markers": "adMarkers",
        "base_url_content": "baseUrlContent",
        "base_url_content1": "baseUrlContent1",
        "base_url_manifest": "baseUrlManifest",
        "base_url_manifest1": "baseUrlManifest1",
        "caption_language_mappings": "captionLanguageMappings",
        "caption_language_setting": "captionLanguageSetting",
        "client_cache": "clientCache",
        "codec_specification": "codecSpecification",
        "constant_iv": "constantIv",
        "directory_structure": "directoryStructure",
        "discontinuity_tags": "discontinuityTags",
        "encryption_type": "encryptionType",
        "hls_cdn_settings": "hlsCdnSettings",
        "hls_id3_segment_tagging": "hlsId3SegmentTagging",
        "iframe_only_playlists": "iframeOnlyPlaylists",
        "incomplete_segment_behavior": "incompleteSegmentBehavior",
        "index_n_segments": "indexNSegments",
        "input_loss_action": "inputLossAction",
        "iv_in_manifest": "ivInManifest",
        "iv_source": "ivSource",
        "keep_segments": "keepSegments",
        "key_format": "keyFormat",
        "key_format_versions": "keyFormatVersions",
        "key_provider_settings": "keyProviderSettings",
        "manifest_compression": "manifestCompression",
        "manifest_duration_format": "manifestDurationFormat",
        "min_segment_length": "minSegmentLength",
        "mode": "mode",
        "output_selection": "outputSelection",
        "program_date_time": "programDateTime",
        "program_date_time_clock": "programDateTimeClock",
        "program_date_time_period": "programDateTimePeriod",
        "redundant_manifest": "redundantManifest",
        "segment_length": "segmentLength",
        "segments_per_subdirectory": "segmentsPerSubdirectory",
        "stream_inf_resolution": "streamInfResolution",
        "timed_metadata_id3_frame": "timedMetadataId3Frame",
        "timed_metadata_id3_period": "timedMetadataId3Period",
        "timestamp_delta_milliseconds": "timestampDeltaMilliseconds",
        "ts_file_mode": "tsFileMode",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination", typing.Dict[builtins.str, typing.Any]],
        ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
        base_url_content: typing.Optional[builtins.str] = None,
        base_url_content1: typing.Optional[builtins.str] = None,
        base_url_manifest: typing.Optional[builtins.str] = None,
        base_url_manifest1: typing.Optional[builtins.str] = None,
        caption_language_mappings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings", typing.Dict[builtins.str, typing.Any]]]]] = None,
        caption_language_setting: typing.Optional[builtins.str] = None,
        client_cache: typing.Optional[builtins.str] = None,
        codec_specification: typing.Optional[builtins.str] = None,
        constant_iv: typing.Optional[builtins.str] = None,
        directory_structure: typing.Optional[builtins.str] = None,
        discontinuity_tags: typing.Optional[builtins.str] = None,
        encryption_type: typing.Optional[builtins.str] = None,
        hls_cdn_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings", typing.Dict[builtins.str, typing.Any]]]]] = None,
        hls_id3_segment_tagging: typing.Optional[builtins.str] = None,
        iframe_only_playlists: typing.Optional[builtins.str] = None,
        incomplete_segment_behavior: typing.Optional[builtins.str] = None,
        index_n_segments: typing.Optional[jsii.Number] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        iv_in_manifest: typing.Optional[builtins.str] = None,
        iv_source: typing.Optional[builtins.str] = None,
        keep_segments: typing.Optional[jsii.Number] = None,
        key_format: typing.Optional[builtins.str] = None,
        key_format_versions: typing.Optional[builtins.str] = None,
        key_provider_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        manifest_compression: typing.Optional[builtins.str] = None,
        manifest_duration_format: typing.Optional[builtins.str] = None,
        min_segment_length: typing.Optional[jsii.Number] = None,
        mode: typing.Optional[builtins.str] = None,
        output_selection: typing.Optional[builtins.str] = None,
        program_date_time: typing.Optional[builtins.str] = None,
        program_date_time_clock: typing.Optional[builtins.str] = None,
        program_date_time_period: typing.Optional[jsii.Number] = None,
        redundant_manifest: typing.Optional[builtins.str] = None,
        segment_length: typing.Optional[jsii.Number] = None,
        segments_per_subdirectory: typing.Optional[jsii.Number] = None,
        stream_inf_resolution: typing.Optional[builtins.str] = None,
        timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
        timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
        timestamp_delta_milliseconds: typing.Optional[jsii.Number] = None,
        ts_file_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param ad_markers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ad_markers MedialiveChannel#ad_markers}.
        :param base_url_content: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_content MedialiveChannel#base_url_content}.
        :param base_url_content1: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_content1 MedialiveChannel#base_url_content1}.
        :param base_url_manifest: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_manifest MedialiveChannel#base_url_manifest}.
        :param base_url_manifest1: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_manifest1 MedialiveChannel#base_url_manifest1}.
        :param caption_language_mappings: caption_language_mappings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_language_mappings MedialiveChannel#caption_language_mappings}
        :param caption_language_setting: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_language_setting MedialiveChannel#caption_language_setting}.
        :param client_cache: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#client_cache MedialiveChannel#client_cache}.
        :param codec_specification: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec_specification MedialiveChannel#codec_specification}.
        :param constant_iv: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#constant_iv MedialiveChannel#constant_iv}.
        :param directory_structure: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#directory_structure MedialiveChannel#directory_structure}.
        :param discontinuity_tags: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#discontinuity_tags MedialiveChannel#discontinuity_tags}.
        :param encryption_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#encryption_type MedialiveChannel#encryption_type}.
        :param hls_cdn_settings: hls_cdn_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_cdn_settings MedialiveChannel#hls_cdn_settings}
        :param hls_id3_segment_tagging: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_id3_segment_tagging MedialiveChannel#hls_id3_segment_tagging}.
        :param iframe_only_playlists: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iframe_only_playlists MedialiveChannel#iframe_only_playlists}.
        :param incomplete_segment_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#incomplete_segment_behavior MedialiveChannel#incomplete_segment_behavior}.
        :param index_n_segments: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#index_n_segments MedialiveChannel#index_n_segments}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param iv_in_manifest: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iv_in_manifest MedialiveChannel#iv_in_manifest}.
        :param iv_source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iv_source MedialiveChannel#iv_source}.
        :param keep_segments: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#keep_segments MedialiveChannel#keep_segments}.
        :param key_format: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_format MedialiveChannel#key_format}.
        :param key_format_versions: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_format_versions MedialiveChannel#key_format_versions}.
        :param key_provider_settings: key_provider_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_provider_settings MedialiveChannel#key_provider_settings}
        :param manifest_compression: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#manifest_compression MedialiveChannel#manifest_compression}.
        :param manifest_duration_format: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#manifest_duration_format MedialiveChannel#manifest_duration_format}.
        :param min_segment_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_segment_length MedialiveChannel#min_segment_length}.
        :param mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mode MedialiveChannel#mode}.
        :param output_selection: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_selection MedialiveChannel#output_selection}.
        :param program_date_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time MedialiveChannel#program_date_time}.
        :param program_date_time_clock: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time_clock MedialiveChannel#program_date_time_clock}.
        :param program_date_time_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time_period MedialiveChannel#program_date_time_period}.
        :param redundant_manifest: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#redundant_manifest MedialiveChannel#redundant_manifest}.
        :param segment_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_length MedialiveChannel#segment_length}.
        :param segments_per_subdirectory: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segments_per_subdirectory MedialiveChannel#segments_per_subdirectory}.
        :param stream_inf_resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_inf_resolution MedialiveChannel#stream_inf_resolution}.
        :param timed_metadata_id3_frame: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.
        :param timed_metadata_id3_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.
        :param timestamp_delta_milliseconds: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_delta_milliseconds MedialiveChannel#timestamp_delta_milliseconds}.
        :param ts_file_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ts_file_mode MedialiveChannel#ts_file_mode}.
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination(**destination)
        if isinstance(key_provider_settings, dict):
            key_provider_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings(**key_provider_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d3e77a46a10e4d3f96759a35d029036fc4a9e53dd2117258a22752b504869bc)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument ad_markers", value=ad_markers, expected_type=type_hints["ad_markers"])
            check_type(argname="argument base_url_content", value=base_url_content, expected_type=type_hints["base_url_content"])
            check_type(argname="argument base_url_content1", value=base_url_content1, expected_type=type_hints["base_url_content1"])
            check_type(argname="argument base_url_manifest", value=base_url_manifest, expected_type=type_hints["base_url_manifest"])
            check_type(argname="argument base_url_manifest1", value=base_url_manifest1, expected_type=type_hints["base_url_manifest1"])
            check_type(argname="argument caption_language_mappings", value=caption_language_mappings, expected_type=type_hints["caption_language_mappings"])
            check_type(argname="argument caption_language_setting", value=caption_language_setting, expected_type=type_hints["caption_language_setting"])
            check_type(argname="argument client_cache", value=client_cache, expected_type=type_hints["client_cache"])
            check_type(argname="argument codec_specification", value=codec_specification, expected_type=type_hints["codec_specification"])
            check_type(argname="argument constant_iv", value=constant_iv, expected_type=type_hints["constant_iv"])
            check_type(argname="argument directory_structure", value=directory_structure, expected_type=type_hints["directory_structure"])
            check_type(argname="argument discontinuity_tags", value=discontinuity_tags, expected_type=type_hints["discontinuity_tags"])
            check_type(argname="argument encryption_type", value=encryption_type, expected_type=type_hints["encryption_type"])
            check_type(argname="argument hls_cdn_settings", value=hls_cdn_settings, expected_type=type_hints["hls_cdn_settings"])
            check_type(argname="argument hls_id3_segment_tagging", value=hls_id3_segment_tagging, expected_type=type_hints["hls_id3_segment_tagging"])
            check_type(argname="argument iframe_only_playlists", value=iframe_only_playlists, expected_type=type_hints["iframe_only_playlists"])
            check_type(argname="argument incomplete_segment_behavior", value=incomplete_segment_behavior, expected_type=type_hints["incomplete_segment_behavior"])
            check_type(argname="argument index_n_segments", value=index_n_segments, expected_type=type_hints["index_n_segments"])
            check_type(argname="argument input_loss_action", value=input_loss_action, expected_type=type_hints["input_loss_action"])
            check_type(argname="argument iv_in_manifest", value=iv_in_manifest, expected_type=type_hints["iv_in_manifest"])
            check_type(argname="argument iv_source", value=iv_source, expected_type=type_hints["iv_source"])
            check_type(argname="argument keep_segments", value=keep_segments, expected_type=type_hints["keep_segments"])
            check_type(argname="argument key_format", value=key_format, expected_type=type_hints["key_format"])
            check_type(argname="argument key_format_versions", value=key_format_versions, expected_type=type_hints["key_format_versions"])
            check_type(argname="argument key_provider_settings", value=key_provider_settings, expected_type=type_hints["key_provider_settings"])
            check_type(argname="argument manifest_compression", value=manifest_compression, expected_type=type_hints["manifest_compression"])
            check_type(argname="argument manifest_duration_format", value=manifest_duration_format, expected_type=type_hints["manifest_duration_format"])
            check_type(argname="argument min_segment_length", value=min_segment_length, expected_type=type_hints["min_segment_length"])
            check_type(argname="argument mode", value=mode, expected_type=type_hints["mode"])
            check_type(argname="argument output_selection", value=output_selection, expected_type=type_hints["output_selection"])
            check_type(argname="argument program_date_time", value=program_date_time, expected_type=type_hints["program_date_time"])
            check_type(argname="argument program_date_time_clock", value=program_date_time_clock, expected_type=type_hints["program_date_time_clock"])
            check_type(argname="argument program_date_time_period", value=program_date_time_period, expected_type=type_hints["program_date_time_period"])
            check_type(argname="argument redundant_manifest", value=redundant_manifest, expected_type=type_hints["redundant_manifest"])
            check_type(argname="argument segment_length", value=segment_length, expected_type=type_hints["segment_length"])
            check_type(argname="argument segments_per_subdirectory", value=segments_per_subdirectory, expected_type=type_hints["segments_per_subdirectory"])
            check_type(argname="argument stream_inf_resolution", value=stream_inf_resolution, expected_type=type_hints["stream_inf_resolution"])
            check_type(argname="argument timed_metadata_id3_frame", value=timed_metadata_id3_frame, expected_type=type_hints["timed_metadata_id3_frame"])
            check_type(argname="argument timed_metadata_id3_period", value=timed_metadata_id3_period, expected_type=type_hints["timed_metadata_id3_period"])
            check_type(argname="argument timestamp_delta_milliseconds", value=timestamp_delta_milliseconds, expected_type=type_hints["timestamp_delta_milliseconds"])
            check_type(argname="argument ts_file_mode", value=ts_file_mode, expected_type=type_hints["ts_file_mode"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination": destination,
        }
        if ad_markers is not None:
            self._values["ad_markers"] = ad_markers
        if base_url_content is not None:
            self._values["base_url_content"] = base_url_content
        if base_url_content1 is not None:
            self._values["base_url_content1"] = base_url_content1
        if base_url_manifest is not None:
            self._values["base_url_manifest"] = base_url_manifest
        if base_url_manifest1 is not None:
            self._values["base_url_manifest1"] = base_url_manifest1
        if caption_language_mappings is not None:
            self._values["caption_language_mappings"] = caption_language_mappings
        if caption_language_setting is not None:
            self._values["caption_language_setting"] = caption_language_setting
        if client_cache is not None:
            self._values["client_cache"] = client_cache
        if codec_specification is not None:
            self._values["codec_specification"] = codec_specification
        if constant_iv is not None:
            self._values["constant_iv"] = constant_iv
        if directory_structure is not None:
            self._values["directory_structure"] = directory_structure
        if discontinuity_tags is not None:
            self._values["discontinuity_tags"] = discontinuity_tags
        if encryption_type is not None:
            self._values["encryption_type"] = encryption_type
        if hls_cdn_settings is not None:
            self._values["hls_cdn_settings"] = hls_cdn_settings
        if hls_id3_segment_tagging is not None:
            self._values["hls_id3_segment_tagging"] = hls_id3_segment_tagging
        if iframe_only_playlists is not None:
            self._values["iframe_only_playlists"] = iframe_only_playlists
        if incomplete_segment_behavior is not None:
            self._values["incomplete_segment_behavior"] = incomplete_segment_behavior
        if index_n_segments is not None:
            self._values["index_n_segments"] = index_n_segments
        if input_loss_action is not None:
            self._values["input_loss_action"] = input_loss_action
        if iv_in_manifest is not None:
            self._values["iv_in_manifest"] = iv_in_manifest
        if iv_source is not None:
            self._values["iv_source"] = iv_source
        if keep_segments is not None:
            self._values["keep_segments"] = keep_segments
        if key_format is not None:
            self._values["key_format"] = key_format
        if key_format_versions is not None:
            self._values["key_format_versions"] = key_format_versions
        if key_provider_settings is not None:
            self._values["key_provider_settings"] = key_provider_settings
        if manifest_compression is not None:
            self._values["manifest_compression"] = manifest_compression
        if manifest_duration_format is not None:
            self._values["manifest_duration_format"] = manifest_duration_format
        if min_segment_length is not None:
            self._values["min_segment_length"] = min_segment_length
        if mode is not None:
            self._values["mode"] = mode
        if output_selection is not None:
            self._values["output_selection"] = output_selection
        if program_date_time is not None:
            self._values["program_date_time"] = program_date_time
        if program_date_time_clock is not None:
            self._values["program_date_time_clock"] = program_date_time_clock
        if program_date_time_period is not None:
            self._values["program_date_time_period"] = program_date_time_period
        if redundant_manifest is not None:
            self._values["redundant_manifest"] = redundant_manifest
        if segment_length is not None:
            self._values["segment_length"] = segment_length
        if segments_per_subdirectory is not None:
            self._values["segments_per_subdirectory"] = segments_per_subdirectory
        if stream_inf_resolution is not None:
            self._values["stream_inf_resolution"] = stream_inf_resolution
        if timed_metadata_id3_frame is not None:
            self._values["timed_metadata_id3_frame"] = timed_metadata_id3_frame
        if timed_metadata_id3_period is not None:
            self._values["timed_metadata_id3_period"] = timed_metadata_id3_period
        if timestamp_delta_milliseconds is not None:
            self._values["timestamp_delta_milliseconds"] = timestamp_delta_milliseconds
        if ts_file_mode is not None:
            self._values["ts_file_mode"] = ts_file_mode

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination", result)

    @builtins.property
    def ad_markers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ad_markers MedialiveChannel#ad_markers}.'''
        result = self._values.get("ad_markers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def base_url_content(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_content MedialiveChannel#base_url_content}.'''
        result = self._values.get("base_url_content")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def base_url_content1(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_content1 MedialiveChannel#base_url_content1}.'''
        result = self._values.get("base_url_content1")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def base_url_manifest(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_manifest MedialiveChannel#base_url_manifest}.'''
        result = self._values.get("base_url_manifest")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def base_url_manifest1(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_manifest1 MedialiveChannel#base_url_manifest1}.'''
        result = self._values.get("base_url_manifest1")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def caption_language_mappings(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings"]]]:
        '''caption_language_mappings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_language_mappings MedialiveChannel#caption_language_mappings}
        '''
        result = self._values.get("caption_language_mappings")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings"]]], result)

    @builtins.property
    def caption_language_setting(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_language_setting MedialiveChannel#caption_language_setting}.'''
        result = self._values.get("caption_language_setting")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def client_cache(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#client_cache MedialiveChannel#client_cache}.'''
        result = self._values.get("client_cache")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def codec_specification(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec_specification MedialiveChannel#codec_specification}.'''
        result = self._values.get("codec_specification")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def constant_iv(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#constant_iv MedialiveChannel#constant_iv}.'''
        result = self._values.get("constant_iv")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def directory_structure(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#directory_structure MedialiveChannel#directory_structure}.'''
        result = self._values.get("directory_structure")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def discontinuity_tags(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#discontinuity_tags MedialiveChannel#discontinuity_tags}.'''
        result = self._values.get("discontinuity_tags")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def encryption_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#encryption_type MedialiveChannel#encryption_type}.'''
        result = self._values.get("encryption_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def hls_cdn_settings(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings"]]]:
        '''hls_cdn_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_cdn_settings MedialiveChannel#hls_cdn_settings}
        '''
        result = self._values.get("hls_cdn_settings")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings"]]], result)

    @builtins.property
    def hls_id3_segment_tagging(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_id3_segment_tagging MedialiveChannel#hls_id3_segment_tagging}.'''
        result = self._values.get("hls_id3_segment_tagging")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def iframe_only_playlists(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iframe_only_playlists MedialiveChannel#iframe_only_playlists}.'''
        result = self._values.get("iframe_only_playlists")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def incomplete_segment_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#incomplete_segment_behavior MedialiveChannel#incomplete_segment_behavior}.'''
        result = self._values.get("incomplete_segment_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def index_n_segments(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#index_n_segments MedialiveChannel#index_n_segments}.'''
        result = self._values.get("index_n_segments")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def input_loss_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.'''
        result = self._values.get("input_loss_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def iv_in_manifest(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iv_in_manifest MedialiveChannel#iv_in_manifest}.'''
        result = self._values.get("iv_in_manifest")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def iv_source(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iv_source MedialiveChannel#iv_source}.'''
        result = self._values.get("iv_source")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def keep_segments(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#keep_segments MedialiveChannel#keep_segments}.'''
        result = self._values.get("keep_segments")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def key_format(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_format MedialiveChannel#key_format}.'''
        result = self._values.get("key_format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def key_format_versions(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_format_versions MedialiveChannel#key_format_versions}.'''
        result = self._values.get("key_format_versions")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def key_provider_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings"]:
        '''key_provider_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_provider_settings MedialiveChannel#key_provider_settings}
        '''
        result = self._values.get("key_provider_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings"], result)

    @builtins.property
    def manifest_compression(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#manifest_compression MedialiveChannel#manifest_compression}.'''
        result = self._values.get("manifest_compression")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def manifest_duration_format(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#manifest_duration_format MedialiveChannel#manifest_duration_format}.'''
        result = self._values.get("manifest_duration_format")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def min_segment_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_segment_length MedialiveChannel#min_segment_length}.'''
        result = self._values.get("min_segment_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mode MedialiveChannel#mode}.'''
        result = self._values.get("mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def output_selection(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_selection MedialiveChannel#output_selection}.'''
        result = self._values.get("output_selection")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_date_time(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time MedialiveChannel#program_date_time}.'''
        result = self._values.get("program_date_time")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_date_time_clock(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time_clock MedialiveChannel#program_date_time_clock}.'''
        result = self._values.get("program_date_time_clock")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_date_time_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time_period MedialiveChannel#program_date_time_period}.'''
        result = self._values.get("program_date_time_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def redundant_manifest(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#redundant_manifest MedialiveChannel#redundant_manifest}.'''
        result = self._values.get("redundant_manifest")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segment_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_length MedialiveChannel#segment_length}.'''
        result = self._values.get("segment_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def segments_per_subdirectory(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segments_per_subdirectory MedialiveChannel#segments_per_subdirectory}.'''
        result = self._values.get("segments_per_subdirectory")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def stream_inf_resolution(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_inf_resolution MedialiveChannel#stream_inf_resolution}.'''
        result = self._values.get("stream_inf_resolution")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_id3_frame(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.'''
        result = self._values.get("timed_metadata_id3_frame")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_id3_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.'''
        result = self._values.get("timed_metadata_id3_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def timestamp_delta_milliseconds(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_delta_milliseconds MedialiveChannel#timestamp_delta_milliseconds}.'''
        result = self._values.get("timestamp_delta_milliseconds")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ts_file_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ts_file_mode MedialiveChannel#ts_file_mode}.'''
        result = self._values.get("ts_file_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings",
    jsii_struct_bases=[],
    name_mapping={
        "caption_channel": "captionChannel",
        "language_code": "languageCode",
        "language_description": "languageDescription",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings:
    def __init__(
        self,
        *,
        caption_channel: jsii.Number,
        language_code: builtins.str,
        language_description: builtins.str,
    ) -> None:
        '''
        :param caption_channel: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_channel MedialiveChannel#caption_channel}.
        :param language_code: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_description: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_description MedialiveChannel#language_description}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98171dc00c91805f854e57a021335041565cbf26896f3170da6dcdb89a1a94c8)
            check_type(argname="argument caption_channel", value=caption_channel, expected_type=type_hints["caption_channel"])
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument language_description", value=language_description, expected_type=type_hints["language_description"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "caption_channel": caption_channel,
            "language_code": language_code,
            "language_description": language_description,
        }

    @builtins.property
    def caption_channel(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_channel MedialiveChannel#caption_channel}.'''
        result = self._values.get("caption_channel")
        assert result is not None, "Required property 'caption_channel' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def language_code(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        assert result is not None, "Required property 'language_code' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def language_description(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_description MedialiveChannel#language_description}.'''
        result = self._values.get("language_description")
        assert result is not None, "Required property 'language_description' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28b3bf9cce8a444cc0ad57b68c3e4889ceac416d029e8ab6568d6846758e70ea)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78b5d4e9961c06042b9c530e13be07ae4bedbf66412e87160b4ad43ffb7f4f24)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54060746c5d297526cfc1ba55b4e0eb509499e57d90820fff1c07d8e452a79cd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c3528051156c28c1a3bd540371add719567036fe807dfed18df43764534c72f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f69676a8d1bf6f5e5746cf534899a8d4a4a7536390b0b1710946506b61b50b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44383b3b8f280513cf2be0be0ea1bd9f50c6be13a52d9c688f19d7b4ecbbe8aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21a9f1b118e7db528d24c459ee492187b52b96e4beb52714450747f86cecead6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="captionChannelInput")
    def caption_channel_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "captionChannelInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="languageDescriptionInput")
    def language_description_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageDescriptionInput"))

    @builtins.property
    @jsii.member(jsii_name="captionChannel")
    def caption_channel(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "captionChannel"))

    @caption_channel.setter
    def caption_channel(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__455aa61a485d019056935c4779b4bbcb0f4933fca9c035efa23e40b8554c4756)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionChannel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb7f4df25a45dbe83989d44315968e02d3234eb23aa48181a0108a7c6a7527f3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="languageDescription")
    def language_description(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageDescription"))

    @language_description.setter
    def language_description(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5716dcea2b26520a8e30c2ed53af5916ebaea96a1de796b839666ce7f54a1fe1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageDescription", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a10fc5144a845cbd5b179e7b8635beec00a61f574d124cf827e3bd4d1d1e301e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed158c330d355dd28c0ce409d7e015261dbf8688549f1f6afc770bfdc05a724c)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab0b08ff2a2eb9194c633da296faa4c8eabab6ba5e5897ffd4f321be38cbd5c6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6284d3212c7ec7bb36ab4482e1fd1a9cf67b92f674d642081de015f51ff12dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d7b4b0963e6b75a975855d31bb79904a4d2b8954e3ece7cd88adbf88f00072e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings",
    jsii_struct_bases=[],
    name_mapping={
        "hls_akamai_settings": "hlsAkamaiSettings",
        "hls_basic_put_settings": "hlsBasicPutSettings",
        "hls_media_store_settings": "hlsMediaStoreSettings",
        "hls_s3_settings": "hlsS3Settings",
        "hls_webdav_settings": "hlsWebdavSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings:
    def __init__(
        self,
        *,
        hls_akamai_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        hls_basic_put_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        hls_media_store_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        hls_s3_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings", typing.Dict[builtins.str, typing.Any]]] = None,
        hls_webdav_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param hls_akamai_settings: hls_akamai_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_akamai_settings MedialiveChannel#hls_akamai_settings}
        :param hls_basic_put_settings: hls_basic_put_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_basic_put_settings MedialiveChannel#hls_basic_put_settings}
        :param hls_media_store_settings: hls_media_store_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_media_store_settings MedialiveChannel#hls_media_store_settings}
        :param hls_s3_settings: hls_s3_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_s3_settings MedialiveChannel#hls_s3_settings}
        :param hls_webdav_settings: hls_webdav_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_webdav_settings MedialiveChannel#hls_webdav_settings}
        '''
        if isinstance(hls_akamai_settings, dict):
            hls_akamai_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings(**hls_akamai_settings)
        if isinstance(hls_basic_put_settings, dict):
            hls_basic_put_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings(**hls_basic_put_settings)
        if isinstance(hls_media_store_settings, dict):
            hls_media_store_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings(**hls_media_store_settings)
        if isinstance(hls_s3_settings, dict):
            hls_s3_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings(**hls_s3_settings)
        if isinstance(hls_webdav_settings, dict):
            hls_webdav_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings(**hls_webdav_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb77ae124b07180b1263761560e3e106dbc40b309e8b891cee203d1dbeaa6e0a)
            check_type(argname="argument hls_akamai_settings", value=hls_akamai_settings, expected_type=type_hints["hls_akamai_settings"])
            check_type(argname="argument hls_basic_put_settings", value=hls_basic_put_settings, expected_type=type_hints["hls_basic_put_settings"])
            check_type(argname="argument hls_media_store_settings", value=hls_media_store_settings, expected_type=type_hints["hls_media_store_settings"])
            check_type(argname="argument hls_s3_settings", value=hls_s3_settings, expected_type=type_hints["hls_s3_settings"])
            check_type(argname="argument hls_webdav_settings", value=hls_webdav_settings, expected_type=type_hints["hls_webdav_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if hls_akamai_settings is not None:
            self._values["hls_akamai_settings"] = hls_akamai_settings
        if hls_basic_put_settings is not None:
            self._values["hls_basic_put_settings"] = hls_basic_put_settings
        if hls_media_store_settings is not None:
            self._values["hls_media_store_settings"] = hls_media_store_settings
        if hls_s3_settings is not None:
            self._values["hls_s3_settings"] = hls_s3_settings
        if hls_webdav_settings is not None:
            self._values["hls_webdav_settings"] = hls_webdav_settings

    @builtins.property
    def hls_akamai_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings"]:
        '''hls_akamai_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_akamai_settings MedialiveChannel#hls_akamai_settings}
        '''
        result = self._values.get("hls_akamai_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings"], result)

    @builtins.property
    def hls_basic_put_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings"]:
        '''hls_basic_put_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_basic_put_settings MedialiveChannel#hls_basic_put_settings}
        '''
        result = self._values.get("hls_basic_put_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings"], result)

    @builtins.property
    def hls_media_store_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings"]:
        '''hls_media_store_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_media_store_settings MedialiveChannel#hls_media_store_settings}
        '''
        result = self._values.get("hls_media_store_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings"], result)

    @builtins.property
    def hls_s3_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings"]:
        '''hls_s3_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_s3_settings MedialiveChannel#hls_s3_settings}
        '''
        result = self._values.get("hls_s3_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings"], result)

    @builtins.property
    def hls_webdav_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings"]:
        '''hls_webdav_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_webdav_settings MedialiveChannel#hls_webdav_settings}
        '''
        result = self._values.get("hls_webdav_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings",
    jsii_struct_bases=[],
    name_mapping={
        "connection_retry_interval": "connectionRetryInterval",
        "filecache_duration": "filecacheDuration",
        "http_transfer_mode": "httpTransferMode",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
        "salt": "salt",
        "token": "token",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings:
    def __init__(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        http_transfer_mode: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
        salt: typing.Optional[builtins.str] = None,
        token: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param http_transfer_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        :param salt: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#salt MedialiveChannel#salt}.
        :param token: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#token MedialiveChannel#token}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e79ea6b8524853ed6cf040b2004974e190135c970d7f7dc7b5ef08dfef20aaac)
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument http_transfer_mode", value=http_transfer_mode, expected_type=type_hints["http_transfer_mode"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
            check_type(argname="argument salt", value=salt, expected_type=type_hints["salt"])
            check_type(argname="argument token", value=token, expected_type=type_hints["token"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if http_transfer_mode is not None:
            self._values["http_transfer_mode"] = http_transfer_mode
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay
        if salt is not None:
            self._values["salt"] = salt
        if token is not None:
            self._values["token"] = token

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def http_transfer_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.'''
        result = self._values.get("http_transfer_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def salt(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#salt MedialiveChannel#salt}.'''
        result = self._values.get("salt")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def token(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#token MedialiveChannel#token}.'''
        result = self._values.get("token")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc571cf4a82afc41b548e29830215c2a5b6cf2e1b1b2a6c8ed3e89d0440629a8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetHttpTransferMode")
    def reset_http_transfer_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHttpTransferMode", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @jsii.member(jsii_name="resetSalt")
    def reset_salt(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSalt", []))

    @jsii.member(jsii_name="resetToken")
    def reset_token(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetToken", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="httpTransferModeInput")
    def http_transfer_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "httpTransferModeInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="saltInput")
    def salt_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "saltInput"))

    @builtins.property
    @jsii.member(jsii_name="tokenInput")
    def token_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tokenInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fcaaa4dbfbc55278f30d47431d240a62bfce9a441fd11cd57bc11197cd5ce5a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__18a40869de1d656d676a03e2980836ad8edeb257723dbaf8b70b2915444d0791)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="httpTransferMode")
    def http_transfer_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "httpTransferMode"))

    @http_transfer_mode.setter
    def http_transfer_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d4c2381d03bb8dc33d2f61e6ed8bf08048e4367ce092105d04f8e6846d4fbe0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpTransferMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03a6b24bdc289023878f6b5e0a0d91839aa255c000eb353bc253f4fac5c71f0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29208915a1e38ca87eebbbf4d10b4b185d27bdedec64954b3d2e6873cad388df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="salt")
    def salt(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "salt"))

    @salt.setter
    def salt(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4325c1ea1f7fd0cfbaa9068a78f38cac7974a2eb93b6c85f3201444246280de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "salt", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="token")
    def token(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "token"))

    @token.setter
    def token(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c37a6e1b6907637ba6c2a11931d77bd2996da2212225ba2a364cd1d3851674a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "token", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4087bd57b576600f30162e13fe330812e946a1ab962be76d987caf145eb6a0a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings",
    jsii_struct_bases=[],
    name_mapping={
        "connection_retry_interval": "connectionRetryInterval",
        "filecache_duration": "filecacheDuration",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings:
    def __init__(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f1a7b348608edbf402927dfcfbb630bc9b12e5f12cfa4d013df7059c2eb0d84)
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f07325f7b65548ea8d4e798f9f539a2c9ee73ce0903a17cb4e54b7fac2debf37)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7635ceb321785b302935d8c7a8a6ffa1c7bdff9da315bf791f4c574781b136da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88292dd0cddd50a815ddae7fdd914fe611b4cc5a8ec5accd76c74c844894b6cc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b4bbfc56c8d575f02bb0fcea57f8e48b2294c9837d7da97dadac28bd17a7936)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8be603bd42d16cb6945bd2373e0fe7bbf8a235251028b6cad5ced06b807d7da6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a4a2e2b13ba8405874b37dc7afef00d0b9e305f38118a7d0c1a70ad6d1641f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings",
    jsii_struct_bases=[],
    name_mapping={
        "connection_retry_interval": "connectionRetryInterval",
        "filecache_duration": "filecacheDuration",
        "media_store_storage_class": "mediaStoreStorageClass",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings:
    def __init__(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        media_store_storage_class: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param media_store_storage_class: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_store_storage_class MedialiveChannel#media_store_storage_class}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a741b457b0bd56e8480aee55635348b570c502a0e488b2a33cb2b3a5105373f)
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument media_store_storage_class", value=media_store_storage_class, expected_type=type_hints["media_store_storage_class"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if media_store_storage_class is not None:
            self._values["media_store_storage_class"] = media_store_storage_class
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def media_store_storage_class(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_store_storage_class MedialiveChannel#media_store_storage_class}.'''
        result = self._values.get("media_store_storage_class")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cedb5f1ad763785a1619b106bde2dde60f1c03888994e87132afc8adae24dbde)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetMediaStoreStorageClass")
    def reset_media_store_storage_class(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMediaStoreStorageClass", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="mediaStoreStorageClassInput")
    def media_store_storage_class_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "mediaStoreStorageClassInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e4cad0880dd55d07acf19ceb61556278bd070b6fa00eaf85f76013872e3da40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__70815122aab40ab4a902777c320dd4a8ad4f6bcc4234307fdedc1903f153ab1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="mediaStoreStorageClass")
    def media_store_storage_class(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mediaStoreStorageClass"))

    @media_store_storage_class.setter
    def media_store_storage_class(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d27566df56a10fa5819ea4c63e3437dc8102470b245a19391e54a0f7e296c59c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mediaStoreStorageClass", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44e96e1b1b622689de45e57a3ab3cc9b8207a7008ab8dcc84b226a701a0d296b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5401f49454936bb6cc51c9ed665e171b96b9fc14e68c96a68c0a71c918786d4b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ef0df2ae43090ebdd9b7c56dd64a31ba3467693807d27644dfee9aa50c31f33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings",
    jsii_struct_bases=[],
    name_mapping={"canned_acl": "cannedAcl"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings:
    def __init__(self, *, canned_acl: typing.Optional[builtins.str] = None) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c06ec6287449a8fa094776399ab2e1b1eef6ccd2167d5852b416024d857c52fb)
            check_type(argname="argument canned_acl", value=canned_acl, expected_type=type_hints["canned_acl"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if canned_acl is not None:
            self._values["canned_acl"] = canned_acl

    @builtins.property
    def canned_acl(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.'''
        result = self._values.get("canned_acl")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f8146600b6fbcb5da5572bfd78568a003cf550d4d1352b0c15411369e6d8b4f3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCannedAcl")
    def reset_canned_acl(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCannedAcl", []))

    @builtins.property
    @jsii.member(jsii_name="cannedAclInput")
    def canned_acl_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cannedAclInput"))

    @builtins.property
    @jsii.member(jsii_name="cannedAcl")
    def canned_acl(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cannedAcl"))

    @canned_acl.setter
    def canned_acl(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11c67aa4791cde0dad935f37ad8a9afce3144f80c2a6bd8caa341439ac19e495)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cannedAcl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5227b55f1aa4d94f2a566d5a31f33b15d5a7d67ee2cb6f5f4009a748e53e353c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings",
    jsii_struct_bases=[],
    name_mapping={
        "connection_retry_interval": "connectionRetryInterval",
        "filecache_duration": "filecacheDuration",
        "http_transfer_mode": "httpTransferMode",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings:
    def __init__(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        http_transfer_mode: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param http_transfer_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe320a9f6a7925ae798c86a5a3c5f0dfd3a2e0bd5dcba09f2125baffcedfc56e)
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument http_transfer_mode", value=http_transfer_mode, expected_type=type_hints["http_transfer_mode"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if http_transfer_mode is not None:
            self._values["http_transfer_mode"] = http_transfer_mode
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def http_transfer_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.'''
        result = self._values.get("http_transfer_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e4e728515cbd566d114bb592b625cb7a04187bbfc41e0adc2646a2b7ba0e072)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetHttpTransferMode")
    def reset_http_transfer_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHttpTransferMode", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="httpTransferModeInput")
    def http_transfer_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "httpTransferModeInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5af7d1a71989ac25858b9c9fc58840ca37692d94b3934cf8bda43050195fa42b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9ef7e77573000b61d5f0dd8ced5c8d28671e47d592add727c0adcd44f49ef96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="httpTransferMode")
    def http_transfer_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "httpTransferMode"))

    @http_transfer_mode.setter
    def http_transfer_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e17e0c0188326be6cfe3f61a497b62447976b78018943b6a3727a5e59ef736e0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "httpTransferMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc1761bcfee50b084c1f6fba13000a955e6ab01f0fe1e40c95f7bbc6974539d5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c18f509763178fb7356f8deb4294d486c8d97e4f606711af83cd73f61174567)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb38a1cef9c141098b54ff0da455173dc400f26027f77c3a80b679e17d1b5d19)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe2c124a2dd20d1aead31ee01be64fa69b94a82e645934c63a7479002886c0f9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6a1310a456d36cc94879bb14be90f53eaa24abc292f9b0fd009d0dc685e797d)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__64c8a7c554a14e53984a5cbf69a837a03a53a41cc70f39d0defccbace5769f2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26ff68d72c2b41c74453ddd951fa3f862cf0975352ce6ef3aa2cf2e3e91f83b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9db914d45ff66991f70862caa023fb40d77d3e37ce84bd691e629722568f2380)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e9bdf919b01c0adb595834626edf4a3b9c90d381dff6dab36f7c99038e6d62b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d64d880aded20395451955df047cb4678bb8c1ecd3b56d81b64f837ad13c6599)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putHlsAkamaiSettings")
    def put_hls_akamai_settings(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        http_transfer_mode: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
        salt: typing.Optional[builtins.str] = None,
        token: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param http_transfer_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        :param salt: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#salt MedialiveChannel#salt}.
        :param token: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#token MedialiveChannel#token}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings(
            connection_retry_interval=connection_retry_interval,
            filecache_duration=filecache_duration,
            http_transfer_mode=http_transfer_mode,
            num_retries=num_retries,
            restart_delay=restart_delay,
            salt=salt,
            token=token,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsAkamaiSettings", [value]))

    @jsii.member(jsii_name="putHlsBasicPutSettings")
    def put_hls_basic_put_settings(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings(
            connection_retry_interval=connection_retry_interval,
            filecache_duration=filecache_duration,
            num_retries=num_retries,
            restart_delay=restart_delay,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsBasicPutSettings", [value]))

    @jsii.member(jsii_name="putHlsMediaStoreSettings")
    def put_hls_media_store_settings(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        media_store_storage_class: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param media_store_storage_class: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_store_storage_class MedialiveChannel#media_store_storage_class}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings(
            connection_retry_interval=connection_retry_interval,
            filecache_duration=filecache_duration,
            media_store_storage_class=media_store_storage_class,
            num_retries=num_retries,
            restart_delay=restart_delay,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsMediaStoreSettings", [value]))

    @jsii.member(jsii_name="putHlsS3Settings")
    def put_hls_s3_settings(
        self,
        *,
        canned_acl: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param canned_acl: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#canned_acl MedialiveChannel#canned_acl}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings(
            canned_acl=canned_acl
        )

        return typing.cast(None, jsii.invoke(self, "putHlsS3Settings", [value]))

    @jsii.member(jsii_name="putHlsWebdavSettings")
    def put_hls_webdav_settings(
        self,
        *,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        http_transfer_mode: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param http_transfer_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#http_transfer_mode MedialiveChannel#http_transfer_mode}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings(
            connection_retry_interval=connection_retry_interval,
            filecache_duration=filecache_duration,
            http_transfer_mode=http_transfer_mode,
            num_retries=num_retries,
            restart_delay=restart_delay,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsWebdavSettings", [value]))

    @jsii.member(jsii_name="resetHlsAkamaiSettings")
    def reset_hls_akamai_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsAkamaiSettings", []))

    @jsii.member(jsii_name="resetHlsBasicPutSettings")
    def reset_hls_basic_put_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsBasicPutSettings", []))

    @jsii.member(jsii_name="resetHlsMediaStoreSettings")
    def reset_hls_media_store_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsMediaStoreSettings", []))

    @jsii.member(jsii_name="resetHlsS3Settings")
    def reset_hls_s3_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsS3Settings", []))

    @jsii.member(jsii_name="resetHlsWebdavSettings")
    def reset_hls_webdav_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsWebdavSettings", []))

    @builtins.property
    @jsii.member(jsii_name="hlsAkamaiSettings")
    def hls_akamai_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference, jsii.get(self, "hlsAkamaiSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsBasicPutSettings")
    def hls_basic_put_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference, jsii.get(self, "hlsBasicPutSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsMediaStoreSettings")
    def hls_media_store_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference, jsii.get(self, "hlsMediaStoreSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsS3Settings")
    def hls_s3_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference, jsii.get(self, "hlsS3Settings"))

    @builtins.property
    @jsii.member(jsii_name="hlsWebdavSettings")
    def hls_webdav_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference, jsii.get(self, "hlsWebdavSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsAkamaiSettingsInput")
    def hls_akamai_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings], jsii.get(self, "hlsAkamaiSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsBasicPutSettingsInput")
    def hls_basic_put_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings], jsii.get(self, "hlsBasicPutSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsMediaStoreSettingsInput")
    def hls_media_store_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings], jsii.get(self, "hlsMediaStoreSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsS3SettingsInput")
    def hls_s3_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings], jsii.get(self, "hlsS3SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsWebdavSettingsInput")
    def hls_webdav_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings], jsii.get(self, "hlsWebdavSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c1b99c9899a80b6482dcf210fa6badf13116c8571ed12ffcd5bed14f97b0e1a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings",
    jsii_struct_bases=[],
    name_mapping={"static_key_settings": "staticKeySettings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings:
    def __init__(
        self,
        *,
        static_key_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param static_key_settings: static_key_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#static_key_settings MedialiveChannel#static_key_settings}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f5551a2d55ec6c2b7da0a108b88b7e4f59044eaca84798239d6d3cfb046a130)
            check_type(argname="argument static_key_settings", value=static_key_settings, expected_type=type_hints["static_key_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if static_key_settings is not None:
            self._values["static_key_settings"] = static_key_settings

    @builtins.property
    def static_key_settings(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings"]]]:
        '''static_key_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#static_key_settings MedialiveChannel#static_key_settings}
        '''
        result = self._values.get("static_key_settings")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fcbee35588f7f3b2c983b6b57965e26abbff5f00dd5815186bef532bf8e2223a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putStaticKeySettings")
    def put_static_key_settings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__905a2dd0ed31c90a82ef34b2cb26aa4ef00bbaf6f2a35a91192aa81b7f45cf30)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putStaticKeySettings", [value]))

    @jsii.member(jsii_name="resetStaticKeySettings")
    def reset_static_key_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStaticKeySettings", []))

    @builtins.property
    @jsii.member(jsii_name="staticKeySettings")
    def static_key_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList", jsii.get(self, "staticKeySettings"))

    @builtins.property
    @jsii.member(jsii_name="staticKeySettingsInput")
    def static_key_settings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings"]]], jsii.get(self, "staticKeySettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d5a2607c247e51f821aa6e2cb012f34cbe5d2cbf486025de79b9199585d25865)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings",
    jsii_struct_bases=[],
    name_mapping={
        "static_key_value": "staticKeyValue",
        "key_provider_server": "keyProviderServer",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings:
    def __init__(
        self,
        *,
        static_key_value: builtins.str,
        key_provider_server: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param static_key_value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#static_key_value MedialiveChannel#static_key_value}.
        :param key_provider_server: key_provider_server block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_provider_server MedialiveChannel#key_provider_server}
        '''
        if isinstance(key_provider_server, dict):
            key_provider_server = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer(**key_provider_server)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ce89b1ca76dd3e101b49e3394cde390daf00daaffd5305ee511701f9f9907cb)
            check_type(argname="argument static_key_value", value=static_key_value, expected_type=type_hints["static_key_value"])
            check_type(argname="argument key_provider_server", value=key_provider_server, expected_type=type_hints["key_provider_server"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "static_key_value": static_key_value,
        }
        if key_provider_server is not None:
            self._values["key_provider_server"] = key_provider_server

    @builtins.property
    def static_key_value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#static_key_value MedialiveChannel#static_key_value}.'''
        result = self._values.get("static_key_value")
        assert result is not None, "Required property 'static_key_value' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def key_provider_server(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer"]:
        '''key_provider_server block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_provider_server MedialiveChannel#key_provider_server}
        '''
        result = self._values.get("key_provider_server")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d015b68da10573853f451c3bd87d12e87272510c63f270221d1cdbb4974ad96)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e39a020a3ed3330d8db5acaf3ebd21986650187041f2e651e6b772cc900d212)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6c90f88391d1eee744f5e3e920bf866214ede3ca643a3fc34cb8155443e49d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__beeeacc4a46d47c4dfd48bd2ffd1fe88ccbf361b35bfafef8e7b18ec78149cab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4aab4b062c08578635a2dbee7f513f592287cba65a7a0b3582273a33003108ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba6e632849e1551f5ec7eb477e5d57d0e1d82665736c31a85c3ffd5888b903fe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7680301c84ace136d6ae7e922a0db13a8f2fb273f7cf979e60aae5e93df3d36)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__211c54f1e2450f1ed16d8f755ba647997d8da2add2d5cee4165a358b19c85a86)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b90d98f4b20e98969c2ef744c71e1f14ad8f0d700ffea9c972eb69a8f5dd9015)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b9316f4d84a991ce1a1399999766d908a5d2bcfc92c0999eb41a6fe3bbea61b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dbbe1534e9de1135054e3a14f675395dcf5273974a7b0ff6570cb63fbf5bff82)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4793f6283f94e46c2c5f26d4a783a3ed738638f64f858063482f1311f763b0bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d12630bba7b886171c2d34c99a4fdf54689c535ff335032467ea62d75889901e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putKeyProviderServer")
    def put_key_provider_server(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putKeyProviderServer", [value]))

    @jsii.member(jsii_name="resetKeyProviderServer")
    def reset_key_provider_server(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeyProviderServer", []))

    @builtins.property
    @jsii.member(jsii_name="keyProviderServer")
    def key_provider_server(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference, jsii.get(self, "keyProviderServer"))

    @builtins.property
    @jsii.member(jsii_name="keyProviderServerInput")
    def key_provider_server_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer], jsii.get(self, "keyProviderServerInput"))

    @builtins.property
    @jsii.member(jsii_name="staticKeyValueInput")
    def static_key_value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "staticKeyValueInput"))

    @builtins.property
    @jsii.member(jsii_name="staticKeyValue")
    def static_key_value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "staticKeyValue"))

    @static_key_value.setter
    def static_key_value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b85891cbbaa993c31b0ab6022bdd5629c6d33aeb476f19af5b15d14553475f9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "staticKeyValue", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39c2b2ce786a763301fcae184b301348547478a8d6c5e9fa7d22fc582041c63b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0066f4f9e4fdc4821ae640975afe50a5cc4eed6e322e166fc5abaa50b06d2a6e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putCaptionLanguageMappings")
    def put_caption_language_mappings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca9120716ed70af982e585e6e857b7dd5f4a1dee250ef88eb11780f639c7107b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCaptionLanguageMappings", [value]))

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putHlsCdnSettings")
    def put_hls_cdn_settings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d13e4272f6230fe666b305ef6f9fc4963c9cba4da9fc8ce8e7bde598e84b807)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putHlsCdnSettings", [value]))

    @jsii.member(jsii_name="putKeyProviderSettings")
    def put_key_provider_settings(
        self,
        *,
        static_key_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param static_key_settings: static_key_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#static_key_settings MedialiveChannel#static_key_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings(
            static_key_settings=static_key_settings
        )

        return typing.cast(None, jsii.invoke(self, "putKeyProviderSettings", [value]))

    @jsii.member(jsii_name="resetAdMarkers")
    def reset_ad_markers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAdMarkers", []))

    @jsii.member(jsii_name="resetBaseUrlContent")
    def reset_base_url_content(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBaseUrlContent", []))

    @jsii.member(jsii_name="resetBaseUrlContent1")
    def reset_base_url_content1(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBaseUrlContent1", []))

    @jsii.member(jsii_name="resetBaseUrlManifest")
    def reset_base_url_manifest(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBaseUrlManifest", []))

    @jsii.member(jsii_name="resetBaseUrlManifest1")
    def reset_base_url_manifest1(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBaseUrlManifest1", []))

    @jsii.member(jsii_name="resetCaptionLanguageMappings")
    def reset_caption_language_mappings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionLanguageMappings", []))

    @jsii.member(jsii_name="resetCaptionLanguageSetting")
    def reset_caption_language_setting(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionLanguageSetting", []))

    @jsii.member(jsii_name="resetClientCache")
    def reset_client_cache(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetClientCache", []))

    @jsii.member(jsii_name="resetCodecSpecification")
    def reset_codec_specification(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodecSpecification", []))

    @jsii.member(jsii_name="resetConstantIv")
    def reset_constant_iv(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConstantIv", []))

    @jsii.member(jsii_name="resetDirectoryStructure")
    def reset_directory_structure(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDirectoryStructure", []))

    @jsii.member(jsii_name="resetDiscontinuityTags")
    def reset_discontinuity_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDiscontinuityTags", []))

    @jsii.member(jsii_name="resetEncryptionType")
    def reset_encryption_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEncryptionType", []))

    @jsii.member(jsii_name="resetHlsCdnSettings")
    def reset_hls_cdn_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsCdnSettings", []))

    @jsii.member(jsii_name="resetHlsId3SegmentTagging")
    def reset_hls_id3_segment_tagging(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsId3SegmentTagging", []))

    @jsii.member(jsii_name="resetIframeOnlyPlaylists")
    def reset_iframe_only_playlists(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIframeOnlyPlaylists", []))

    @jsii.member(jsii_name="resetIncompleteSegmentBehavior")
    def reset_incomplete_segment_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIncompleteSegmentBehavior", []))

    @jsii.member(jsii_name="resetIndexNSegments")
    def reset_index_n_segments(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIndexNSegments", []))

    @jsii.member(jsii_name="resetInputLossAction")
    def reset_input_loss_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossAction", []))

    @jsii.member(jsii_name="resetIvInManifest")
    def reset_iv_in_manifest(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIvInManifest", []))

    @jsii.member(jsii_name="resetIvSource")
    def reset_iv_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIvSource", []))

    @jsii.member(jsii_name="resetKeepSegments")
    def reset_keep_segments(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeepSegments", []))

    @jsii.member(jsii_name="resetKeyFormat")
    def reset_key_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeyFormat", []))

    @jsii.member(jsii_name="resetKeyFormatVersions")
    def reset_key_format_versions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeyFormatVersions", []))

    @jsii.member(jsii_name="resetKeyProviderSettings")
    def reset_key_provider_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKeyProviderSettings", []))

    @jsii.member(jsii_name="resetManifestCompression")
    def reset_manifest_compression(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManifestCompression", []))

    @jsii.member(jsii_name="resetManifestDurationFormat")
    def reset_manifest_duration_format(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetManifestDurationFormat", []))

    @jsii.member(jsii_name="resetMinSegmentLength")
    def reset_min_segment_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMinSegmentLength", []))

    @jsii.member(jsii_name="resetMode")
    def reset_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMode", []))

    @jsii.member(jsii_name="resetOutputSelection")
    def reset_output_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputSelection", []))

    @jsii.member(jsii_name="resetProgramDateTime")
    def reset_program_date_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramDateTime", []))

    @jsii.member(jsii_name="resetProgramDateTimeClock")
    def reset_program_date_time_clock(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramDateTimeClock", []))

    @jsii.member(jsii_name="resetProgramDateTimePeriod")
    def reset_program_date_time_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramDateTimePeriod", []))

    @jsii.member(jsii_name="resetRedundantManifest")
    def reset_redundant_manifest(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRedundantManifest", []))

    @jsii.member(jsii_name="resetSegmentLength")
    def reset_segment_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentLength", []))

    @jsii.member(jsii_name="resetSegmentsPerSubdirectory")
    def reset_segments_per_subdirectory(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentsPerSubdirectory", []))

    @jsii.member(jsii_name="resetStreamInfResolution")
    def reset_stream_inf_resolution(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStreamInfResolution", []))

    @jsii.member(jsii_name="resetTimedMetadataId3Frame")
    def reset_timed_metadata_id3_frame(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataId3Frame", []))

    @jsii.member(jsii_name="resetTimedMetadataId3Period")
    def reset_timed_metadata_id3_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataId3Period", []))

    @jsii.member(jsii_name="resetTimestampDeltaMilliseconds")
    def reset_timestamp_delta_milliseconds(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimestampDeltaMilliseconds", []))

    @jsii.member(jsii_name="resetTsFileMode")
    def reset_ts_file_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTsFileMode", []))

    @builtins.property
    @jsii.member(jsii_name="captionLanguageMappings")
    def caption_language_mappings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList, jsii.get(self, "captionLanguageMappings"))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="hlsCdnSettings")
    def hls_cdn_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList, jsii.get(self, "hlsCdnSettings"))

    @builtins.property
    @jsii.member(jsii_name="keyProviderSettings")
    def key_provider_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference, jsii.get(self, "keyProviderSettings"))

    @builtins.property
    @jsii.member(jsii_name="adMarkersInput")
    def ad_markers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "adMarkersInput"))

    @builtins.property
    @jsii.member(jsii_name="baseUrlContent1Input")
    def base_url_content1_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "baseUrlContent1Input"))

    @builtins.property
    @jsii.member(jsii_name="baseUrlContentInput")
    def base_url_content_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "baseUrlContentInput"))

    @builtins.property
    @jsii.member(jsii_name="baseUrlManifest1Input")
    def base_url_manifest1_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "baseUrlManifest1Input"))

    @builtins.property
    @jsii.member(jsii_name="baseUrlManifestInput")
    def base_url_manifest_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "baseUrlManifestInput"))

    @builtins.property
    @jsii.member(jsii_name="captionLanguageMappingsInput")
    def caption_language_mappings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]], jsii.get(self, "captionLanguageMappingsInput"))

    @builtins.property
    @jsii.member(jsii_name="captionLanguageSettingInput")
    def caption_language_setting_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "captionLanguageSettingInput"))

    @builtins.property
    @jsii.member(jsii_name="clientCacheInput")
    def client_cache_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "clientCacheInput"))

    @builtins.property
    @jsii.member(jsii_name="codecSpecificationInput")
    def codec_specification_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codecSpecificationInput"))

    @builtins.property
    @jsii.member(jsii_name="constantIvInput")
    def constant_iv_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "constantIvInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="directoryStructureInput")
    def directory_structure_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "directoryStructureInput"))

    @builtins.property
    @jsii.member(jsii_name="discontinuityTagsInput")
    def discontinuity_tags_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "discontinuityTagsInput"))

    @builtins.property
    @jsii.member(jsii_name="encryptionTypeInput")
    def encryption_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "encryptionTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsCdnSettingsInput")
    def hls_cdn_settings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]], jsii.get(self, "hlsCdnSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsId3SegmentTaggingInput")
    def hls_id3_segment_tagging_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "hlsId3SegmentTaggingInput"))

    @builtins.property
    @jsii.member(jsii_name="iframeOnlyPlaylistsInput")
    def iframe_only_playlists_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "iframeOnlyPlaylistsInput"))

    @builtins.property
    @jsii.member(jsii_name="incompleteSegmentBehaviorInput")
    def incomplete_segment_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "incompleteSegmentBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="indexNSegmentsInput")
    def index_n_segments_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "indexNSegmentsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossActionInput")
    def input_loss_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossActionInput"))

    @builtins.property
    @jsii.member(jsii_name="ivInManifestInput")
    def iv_in_manifest_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ivInManifestInput"))

    @builtins.property
    @jsii.member(jsii_name="ivSourceInput")
    def iv_source_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ivSourceInput"))

    @builtins.property
    @jsii.member(jsii_name="keepSegmentsInput")
    def keep_segments_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "keepSegmentsInput"))

    @builtins.property
    @jsii.member(jsii_name="keyFormatInput")
    def key_format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="keyFormatVersionsInput")
    def key_format_versions_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyFormatVersionsInput"))

    @builtins.property
    @jsii.member(jsii_name="keyProviderSettingsInput")
    def key_provider_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings], jsii.get(self, "keyProviderSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="manifestCompressionInput")
    def manifest_compression_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "manifestCompressionInput"))

    @builtins.property
    @jsii.member(jsii_name="manifestDurationFormatInput")
    def manifest_duration_format_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "manifestDurationFormatInput"))

    @builtins.property
    @jsii.member(jsii_name="minSegmentLengthInput")
    def min_segment_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "minSegmentLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="modeInput")
    def mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "modeInput"))

    @builtins.property
    @jsii.member(jsii_name="outputSelectionInput")
    def output_selection_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="programDateTimeClockInput")
    def program_date_time_clock_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "programDateTimeClockInput"))

    @builtins.property
    @jsii.member(jsii_name="programDateTimeInput")
    def program_date_time_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "programDateTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="programDateTimePeriodInput")
    def program_date_time_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "programDateTimePeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="redundantManifestInput")
    def redundant_manifest_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "redundantManifestInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentLengthInput")
    def segment_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "segmentLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentsPerSubdirectoryInput")
    def segments_per_subdirectory_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "segmentsPerSubdirectoryInput"))

    @builtins.property
    @jsii.member(jsii_name="streamInfResolutionInput")
    def stream_inf_resolution_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "streamInfResolutionInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3FrameInput")
    def timed_metadata_id3_frame_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataId3FrameInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3PeriodInput")
    def timed_metadata_id3_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "timedMetadataId3PeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="timestampDeltaMillisecondsInput")
    def timestamp_delta_milliseconds_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "timestampDeltaMillisecondsInput"))

    @builtins.property
    @jsii.member(jsii_name="tsFileModeInput")
    def ts_file_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tsFileModeInput"))

    @builtins.property
    @jsii.member(jsii_name="adMarkers")
    def ad_markers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "adMarkers"))

    @ad_markers.setter
    def ad_markers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c9e1ba1bb229ec45bdeee54c0c6e149e0d4b5f268bc96d02547b85f97cd2918)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "adMarkers", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="baseUrlContent")
    def base_url_content(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "baseUrlContent"))

    @base_url_content.setter
    def base_url_content(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__64c48fda691af0a34b256454c77c479100a40dc0820a5bb3316d4c33c1ef3a0f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "baseUrlContent", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="baseUrlContent1")
    def base_url_content1(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "baseUrlContent1"))

    @base_url_content1.setter
    def base_url_content1(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f3ede1a781825dad110fc27e574d14924162e6d0a2b21a1c457499a93a4f5db9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "baseUrlContent1", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="baseUrlManifest")
    def base_url_manifest(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "baseUrlManifest"))

    @base_url_manifest.setter
    def base_url_manifest(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4b4725d855ed87d30be399047c580d9d390827646d37c0843e26f8699f8c0fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "baseUrlManifest", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="baseUrlManifest1")
    def base_url_manifest1(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "baseUrlManifest1"))

    @base_url_manifest1.setter
    def base_url_manifest1(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fc8fa715259e79a9fcbf57cf0ab27fa5198fcdff947a7bc07337a8a2c3c0e42)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "baseUrlManifest1", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="captionLanguageSetting")
    def caption_language_setting(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "captionLanguageSetting"))

    @caption_language_setting.setter
    def caption_language_setting(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc5d61723d02317c36d8fb6a8e501a2a13ed0ac9eaee73626c3a2dd3d2220be4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionLanguageSetting", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="clientCache")
    def client_cache(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "clientCache"))

    @client_cache.setter
    def client_cache(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1706ca85d6db095dea6484e7ce24ca1e3fcf1646e1442e0c9ecbfdcfdaa6906f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "clientCache", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="codecSpecification")
    def codec_specification(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codecSpecification"))

    @codec_specification.setter
    def codec_specification(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8507b56ab1a0c099ceed04be894fa7f820f1d027388fb084241597554527093)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codecSpecification", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="constantIv")
    def constant_iv(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "constantIv"))

    @constant_iv.setter
    def constant_iv(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__969b07c699b0e175c7306cede47896fe20f837850452cc71515c96421ae57d04)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "constantIv", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="directoryStructure")
    def directory_structure(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "directoryStructure"))

    @directory_structure.setter
    def directory_structure(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21ff387221370c3d40526219e56c8420fad96a5de09d3b878a3b49ac3d5107cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "directoryStructure", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="discontinuityTags")
    def discontinuity_tags(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "discontinuityTags"))

    @discontinuity_tags.setter
    def discontinuity_tags(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf36c2ebe974da03a14fe94d9304649e32b3a4d3eebd09163b3eb32d15745db1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "discontinuityTags", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="encryptionType")
    def encryption_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "encryptionType"))

    @encryption_type.setter
    def encryption_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b08b81a0284030a912012323b37a7d45ab0920481cefdd60ce10c243af356f3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "encryptionType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="hlsId3SegmentTagging")
    def hls_id3_segment_tagging(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "hlsId3SegmentTagging"))

    @hls_id3_segment_tagging.setter
    def hls_id3_segment_tagging(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc56a5ced6ca1498cfe9f8a5483b6aeea89856ab52b59b1ef0fd3abdcefc7e4e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "hlsId3SegmentTagging", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="iframeOnlyPlaylists")
    def iframe_only_playlists(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "iframeOnlyPlaylists"))

    @iframe_only_playlists.setter
    def iframe_only_playlists(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce52e50e3596d3be8a6f79bc00883b684bcbcd71b690dd3b83c76b0d194c22e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "iframeOnlyPlaylists", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="incompleteSegmentBehavior")
    def incomplete_segment_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "incompleteSegmentBehavior"))

    @incomplete_segment_behavior.setter
    def incomplete_segment_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__73ce7f563362f83e77795df72c8c09ae73ba4ebfe25bc1cb4ff1eb6ef9ee061a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "incompleteSegmentBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="indexNSegments")
    def index_n_segments(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "indexNSegments"))

    @index_n_segments.setter
    def index_n_segments(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff70ddfd7096ad6aad0b485b480abe06f32d6d8c7b628980cfab030a229f942b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "indexNSegments", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputLossAction")
    def input_loss_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossAction"))

    @input_loss_action.setter
    def input_loss_action(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3e0df999b0e6d4ddb2177cebe8684ce17fe22aad383d32af570d18c65442c18)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossAction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ivInManifest")
    def iv_in_manifest(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ivInManifest"))

    @iv_in_manifest.setter
    def iv_in_manifest(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e178c549d036fe3c747dd57ce83f09dc3e1139aa5a45f064d8b033701d83a10b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ivInManifest", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ivSource")
    def iv_source(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ivSource"))

    @iv_source.setter
    def iv_source(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b68c5687fd1424a22503e40a7d6c9569e67d38808a09e5bba601d5eefba7faa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ivSource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="keepSegments")
    def keep_segments(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "keepSegments"))

    @keep_segments.setter
    def keep_segments(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afa025450bd9fb70e44b0bd39da5893fb9aa5d449047780aa2bdd0915dcc5a02)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keepSegments", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="keyFormat")
    def key_format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "keyFormat"))

    @key_format.setter
    def key_format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8889c3599d85d6880eec1df958863b7cbaae4e1a156275eea48ad8946e70332b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keyFormat", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="keyFormatVersions")
    def key_format_versions(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "keyFormatVersions"))

    @key_format_versions.setter
    def key_format_versions(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdd337a1037eaec0a945260ec37589f59414f1eec0e9956acc4d42bbc34d847f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "keyFormatVersions", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="manifestCompression")
    def manifest_compression(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "manifestCompression"))

    @manifest_compression.setter
    def manifest_compression(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43112ea62dfd78d3086df29d02ed19aaa74e7ebb23f850e96b5400a2ad93b1fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "manifestCompression", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="manifestDurationFormat")
    def manifest_duration_format(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "manifestDurationFormat"))

    @manifest_duration_format.setter
    def manifest_duration_format(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ae78a7eee57f820d1f846018dfe6244c5f7dd553e4c639e799a9be5fd53c8a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "manifestDurationFormat", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="minSegmentLength")
    def min_segment_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "minSegmentLength"))

    @min_segment_length.setter
    def min_segment_length(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4a2c9d6b4f754748148e15a7071b81668fc2b869127af1760e0b2d1d52f9703)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "minSegmentLength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="mode")
    def mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mode"))

    @mode.setter
    def mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4991d344b9921c5ed0dad29e1f0d35a38293be91f2d57f59603718a219e28834)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="outputSelection")
    def output_selection(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputSelection"))

    @output_selection.setter
    def output_selection(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d912404d02fad256fb3017951d58e7d96d11f501e37f8532a8059722e473396b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputSelection", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="programDateTime")
    def program_date_time(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "programDateTime"))

    @program_date_time.setter
    def program_date_time(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__880391b2e298c9475f1c97db11294f8f64433a984281797dac68c5e646fe43ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programDateTime", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="programDateTimeClock")
    def program_date_time_clock(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "programDateTimeClock"))

    @program_date_time_clock.setter
    def program_date_time_clock(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d3cbdb44949f2db4c597440ae9929e95ec48551662317ed580fec996427223d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programDateTimeClock", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="programDateTimePeriod")
    def program_date_time_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "programDateTimePeriod"))

    @program_date_time_period.setter
    def program_date_time_period(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b2e3e35f0f75acc1081f1955d61a0ab7bc239afee695363d560d564f219aa437)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programDateTimePeriod", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="redundantManifest")
    def redundant_manifest(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "redundantManifest"))

    @redundant_manifest.setter
    def redundant_manifest(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a1cf62e641fc6b01b0f883952a1ae6560b06e2f2ebb87407f2816c53e311bd35)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "redundantManifest", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentLength")
    def segment_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "segmentLength"))

    @segment_length.setter
    def segment_length(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__545d006bc474fd87dacae7662519b9207ceb0f385e4ba6fd0485c358763db6bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentLength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentsPerSubdirectory")
    def segments_per_subdirectory(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "segmentsPerSubdirectory"))

    @segments_per_subdirectory.setter
    def segments_per_subdirectory(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__734c0a0a142aed6247f53b0421c022816c6500e6ee75e585b8b680cc44c984f2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentsPerSubdirectory", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="streamInfResolution")
    def stream_inf_resolution(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "streamInfResolution"))

    @stream_inf_resolution.setter
    def stream_inf_resolution(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f31036bfe08fe717932e90cca8849764749008e93e6f03563f88a43b1f807985)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "streamInfResolution", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3Frame")
    def timed_metadata_id3_frame(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataId3Frame"))

    @timed_metadata_id3_frame.setter
    def timed_metadata_id3_frame(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7987206dcc046bdb01d29fe73bc37f9f91e30a9b5f1cf48138fd3257eaf4d3f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataId3Frame", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3Period")
    def timed_metadata_id3_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "timedMetadataId3Period"))

    @timed_metadata_id3_period.setter
    def timed_metadata_id3_period(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5fe444a144fdd345623ef1482b6029bd70e8113f99df2822a12f4d390962d1ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataId3Period", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timestampDeltaMilliseconds")
    def timestamp_delta_milliseconds(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "timestampDeltaMilliseconds"))

    @timestamp_delta_milliseconds.setter
    def timestamp_delta_milliseconds(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fca9c1ea84fdfa2f0fd284d352155bac35d6912d1c2afce931ffa1d966372201)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timestampDeltaMilliseconds", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tsFileMode")
    def ts_file_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "tsFileMode"))

    @ts_file_mode.setter
    def ts_file_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d6887a37817fa230953d86172a82608213185b69002bf0b185779d675c90139)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tsFileMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ba45c15fb1c39a3bf398789668b000a608146a3fb37c6670e385e888ed57199)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings",
    jsii_struct_bases=[],
    name_mapping={"destination": "destination"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination", typing.Dict[builtins.str, typing.Any]],
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination(**destination)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d193a832796187bb5953d2fe9a927618c4e2fed6b2f46f61899c6b8c2e11c01)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination": destination,
        }

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination", result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae019133aa863dc55689471093df3f1c2b69ec8cf4abb3796f729e36bfca77f1)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc3a4004f2e1a32c51431e4633c8eed9932da8f8c82a136cc0e0571e16db7784)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ebf0f27dc84cd2d7e1f7470a8ecebddd3564415d36daa5eb34516acf495dad5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e188d3a707109cebbcc5d2180340e872a38adaa2fb24beee68d74903f448a93)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe4ba8f6799a50a4abb8978906afa8a2da3d5e2f8c0f2774f68ae2dd1bc2eed5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5f11e2dadb5f91768caed5222df267cd0ae9b29571e66bfaa7de45419844076)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "acquisition_point_id": "acquisitionPointId",
        "audio_only_timecode_control": "audioOnlyTimecodeControl",
        "certificate_mode": "certificateMode",
        "connection_retry_interval": "connectionRetryInterval",
        "event_id": "eventId",
        "event_id_mode": "eventIdMode",
        "event_stop_behavior": "eventStopBehavior",
        "filecache_duration": "filecacheDuration",
        "fragment_length": "fragmentLength",
        "input_loss_action": "inputLossAction",
        "num_retries": "numRetries",
        "restart_delay": "restartDelay",
        "segmentation_mode": "segmentationMode",
        "send_delay_ms": "sendDelayMs",
        "sparse_track_type": "sparseTrackType",
        "stream_manifest_behavior": "streamManifestBehavior",
        "timestamp_offset": "timestampOffset",
        "timestamp_offset_mode": "timestampOffsetMode",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination", typing.Dict[builtins.str, typing.Any]],
        acquisition_point_id: typing.Optional[builtins.str] = None,
        audio_only_timecode_control: typing.Optional[builtins.str] = None,
        certificate_mode: typing.Optional[builtins.str] = None,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        event_id: typing.Optional[builtins.str] = None,
        event_id_mode: typing.Optional[builtins.str] = None,
        event_stop_behavior: typing.Optional[builtins.str] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        fragment_length: typing.Optional[jsii.Number] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
        segmentation_mode: typing.Optional[builtins.str] = None,
        send_delay_ms: typing.Optional[jsii.Number] = None,
        sparse_track_type: typing.Optional[builtins.str] = None,
        stream_manifest_behavior: typing.Optional[builtins.str] = None,
        timestamp_offset: typing.Optional[builtins.str] = None,
        timestamp_offset_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param acquisition_point_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#acquisition_point_id MedialiveChannel#acquisition_point_id}.
        :param audio_only_timecode_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_timecode_control MedialiveChannel#audio_only_timecode_control}.
        :param certificate_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param event_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_id MedialiveChannel#event_id}.
        :param event_id_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_id_mode MedialiveChannel#event_id_mode}.
        :param event_stop_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_stop_behavior MedialiveChannel#event_stop_behavior}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param fragment_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_length MedialiveChannel#fragment_length}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        :param segmentation_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_mode MedialiveChannel#segmentation_mode}.
        :param send_delay_ms: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#send_delay_ms MedialiveChannel#send_delay_ms}.
        :param sparse_track_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sparse_track_type MedialiveChannel#sparse_track_type}.
        :param stream_manifest_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_manifest_behavior MedialiveChannel#stream_manifest_behavior}.
        :param timestamp_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_offset MedialiveChannel#timestamp_offset}.
        :param timestamp_offset_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_offset_mode MedialiveChannel#timestamp_offset_mode}.
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination(**destination)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f27f026554ece78ce428dc242f50ded405d4305c49520299ba8adba1d9c6eff7)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument acquisition_point_id", value=acquisition_point_id, expected_type=type_hints["acquisition_point_id"])
            check_type(argname="argument audio_only_timecode_control", value=audio_only_timecode_control, expected_type=type_hints["audio_only_timecode_control"])
            check_type(argname="argument certificate_mode", value=certificate_mode, expected_type=type_hints["certificate_mode"])
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument event_id", value=event_id, expected_type=type_hints["event_id"])
            check_type(argname="argument event_id_mode", value=event_id_mode, expected_type=type_hints["event_id_mode"])
            check_type(argname="argument event_stop_behavior", value=event_stop_behavior, expected_type=type_hints["event_stop_behavior"])
            check_type(argname="argument filecache_duration", value=filecache_duration, expected_type=type_hints["filecache_duration"])
            check_type(argname="argument fragment_length", value=fragment_length, expected_type=type_hints["fragment_length"])
            check_type(argname="argument input_loss_action", value=input_loss_action, expected_type=type_hints["input_loss_action"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
            check_type(argname="argument segmentation_mode", value=segmentation_mode, expected_type=type_hints["segmentation_mode"])
            check_type(argname="argument send_delay_ms", value=send_delay_ms, expected_type=type_hints["send_delay_ms"])
            check_type(argname="argument sparse_track_type", value=sparse_track_type, expected_type=type_hints["sparse_track_type"])
            check_type(argname="argument stream_manifest_behavior", value=stream_manifest_behavior, expected_type=type_hints["stream_manifest_behavior"])
            check_type(argname="argument timestamp_offset", value=timestamp_offset, expected_type=type_hints["timestamp_offset"])
            check_type(argname="argument timestamp_offset_mode", value=timestamp_offset_mode, expected_type=type_hints["timestamp_offset_mode"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination": destination,
        }
        if acquisition_point_id is not None:
            self._values["acquisition_point_id"] = acquisition_point_id
        if audio_only_timecode_control is not None:
            self._values["audio_only_timecode_control"] = audio_only_timecode_control
        if certificate_mode is not None:
            self._values["certificate_mode"] = certificate_mode
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if event_id is not None:
            self._values["event_id"] = event_id
        if event_id_mode is not None:
            self._values["event_id_mode"] = event_id_mode
        if event_stop_behavior is not None:
            self._values["event_stop_behavior"] = event_stop_behavior
        if filecache_duration is not None:
            self._values["filecache_duration"] = filecache_duration
        if fragment_length is not None:
            self._values["fragment_length"] = fragment_length
        if input_loss_action is not None:
            self._values["input_loss_action"] = input_loss_action
        if num_retries is not None:
            self._values["num_retries"] = num_retries
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay
        if segmentation_mode is not None:
            self._values["segmentation_mode"] = segmentation_mode
        if send_delay_ms is not None:
            self._values["send_delay_ms"] = send_delay_ms
        if sparse_track_type is not None:
            self._values["sparse_track_type"] = sparse_track_type
        if stream_manifest_behavior is not None:
            self._values["stream_manifest_behavior"] = stream_manifest_behavior
        if timestamp_offset is not None:
            self._values["timestamp_offset"] = timestamp_offset
        if timestamp_offset_mode is not None:
            self._values["timestamp_offset_mode"] = timestamp_offset_mode

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination", result)

    @builtins.property
    def acquisition_point_id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#acquisition_point_id MedialiveChannel#acquisition_point_id}.'''
        result = self._values.get("acquisition_point_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_only_timecode_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_timecode_control MedialiveChannel#audio_only_timecode_control}.'''
        result = self._values.get("audio_only_timecode_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def certificate_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.'''
        result = self._values.get("certificate_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def event_id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_id MedialiveChannel#event_id}.'''
        result = self._values.get("event_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def event_id_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_id_mode MedialiveChannel#event_id_mode}.'''
        result = self._values.get("event_id_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def event_stop_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_stop_behavior MedialiveChannel#event_stop_behavior}.'''
        result = self._values.get("event_stop_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def filecache_duration(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.'''
        result = self._values.get("filecache_duration")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def fragment_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_length MedialiveChannel#fragment_length}.'''
        result = self._values.get("fragment_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def input_loss_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.'''
        result = self._values.get("input_loss_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def segmentation_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_mode MedialiveChannel#segmentation_mode}.'''
        result = self._values.get("segmentation_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def send_delay_ms(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#send_delay_ms MedialiveChannel#send_delay_ms}.'''
        result = self._values.get("send_delay_ms")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def sparse_track_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sparse_track_type MedialiveChannel#sparse_track_type}.'''
        result = self._values.get("sparse_track_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def stream_manifest_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_manifest_behavior MedialiveChannel#stream_manifest_behavior}.'''
        result = self._values.get("stream_manifest_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timestamp_offset(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_offset MedialiveChannel#timestamp_offset}.'''
        result = self._values.get("timestamp_offset")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timestamp_offset_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_offset_mode MedialiveChannel#timestamp_offset_mode}.'''
        result = self._values.get("timestamp_offset_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d091731b65e48b6a20df6fcaaef823a1a57b5b125ee8dab7d3bb54fbe9a28f5)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff180655243ddf118feab7bb04e0268f36e694ffdb744141cb789f35605abfab)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__202cd0463ee42715898ab0477415aba2d61cc886a47890b85b28e22b96d446ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7bc27d9b2f584b166e5d0ea4a4861fd4e0b003e6052397d92618ea1861151869)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74cb65977858f3ecfcb35075c4efe6afdb8f2a42a63e6b6e4df1ff9441961a6c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="resetAcquisitionPointId")
    def reset_acquisition_point_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAcquisitionPointId", []))

    @jsii.member(jsii_name="resetAudioOnlyTimecodeControl")
    def reset_audio_only_timecode_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioOnlyTimecodeControl", []))

    @jsii.member(jsii_name="resetCertificateMode")
    def reset_certificate_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCertificateMode", []))

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetEventId")
    def reset_event_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEventId", []))

    @jsii.member(jsii_name="resetEventIdMode")
    def reset_event_id_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEventIdMode", []))

    @jsii.member(jsii_name="resetEventStopBehavior")
    def reset_event_stop_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEventStopBehavior", []))

    @jsii.member(jsii_name="resetFilecacheDuration")
    def reset_filecache_duration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilecacheDuration", []))

    @jsii.member(jsii_name="resetFragmentLength")
    def reset_fragment_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFragmentLength", []))

    @jsii.member(jsii_name="resetInputLossAction")
    def reset_input_loss_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossAction", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @jsii.member(jsii_name="resetSegmentationMode")
    def reset_segmentation_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationMode", []))

    @jsii.member(jsii_name="resetSendDelayMs")
    def reset_send_delay_ms(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSendDelayMs", []))

    @jsii.member(jsii_name="resetSparseTrackType")
    def reset_sparse_track_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSparseTrackType", []))

    @jsii.member(jsii_name="resetStreamManifestBehavior")
    def reset_stream_manifest_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStreamManifestBehavior", []))

    @jsii.member(jsii_name="resetTimestampOffset")
    def reset_timestamp_offset(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimestampOffset", []))

    @jsii.member(jsii_name="resetTimestampOffsetMode")
    def reset_timestamp_offset_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimestampOffsetMode", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="acquisitionPointIdInput")
    def acquisition_point_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "acquisitionPointIdInput"))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyTimecodeControlInput")
    def audio_only_timecode_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioOnlyTimecodeControlInput"))

    @builtins.property
    @jsii.member(jsii_name="certificateModeInput")
    def certificate_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "certificateModeInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="eventIdInput")
    def event_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "eventIdInput"))

    @builtins.property
    @jsii.member(jsii_name="eventIdModeInput")
    def event_id_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "eventIdModeInput"))

    @builtins.property
    @jsii.member(jsii_name="eventStopBehaviorInput")
    def event_stop_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "eventStopBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="filecacheDurationInput")
    def filecache_duration_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filecacheDurationInput"))

    @builtins.property
    @jsii.member(jsii_name="fragmentLengthInput")
    def fragment_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fragmentLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossActionInput")
    def input_loss_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossActionInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationModeInput")
    def segmentation_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationModeInput"))

    @builtins.property
    @jsii.member(jsii_name="sendDelayMsInput")
    def send_delay_ms_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sendDelayMsInput"))

    @builtins.property
    @jsii.member(jsii_name="sparseTrackTypeInput")
    def sparse_track_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sparseTrackTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="streamManifestBehaviorInput")
    def stream_manifest_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "streamManifestBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timestampOffsetInput")
    def timestamp_offset_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timestampOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="timestampOffsetModeInput")
    def timestamp_offset_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timestampOffsetModeInput"))

    @builtins.property
    @jsii.member(jsii_name="acquisitionPointId")
    def acquisition_point_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "acquisitionPointId"))

    @acquisition_point_id.setter
    def acquisition_point_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__734c08bf1d927114cae2d187b51287f55337a0cc4d5aa7198d75f8e958e63408)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "acquisitionPointId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioOnlyTimecodeControl")
    def audio_only_timecode_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioOnlyTimecodeControl"))

    @audio_only_timecode_control.setter
    def audio_only_timecode_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__570b808e87fc3d6123af4960395146e2719feb2b444779b190c9d717fd76252b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioOnlyTimecodeControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="certificateMode")
    def certificate_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "certificateMode"))

    @certificate_mode.setter
    def certificate_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c96150e516b31db37cd9340cdb90ff09cc9873b1a7a66e397346510404844423)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "certificateMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__867afaa421f4ab41823a2f74ee97acb9816a3818de1d31ffd28d5ccab4ea3c55)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="eventId")
    def event_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "eventId"))

    @event_id.setter
    def event_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcd62f951d1c8fff185ce80cf8a5e060a6999f3c5a3a39043ee8cebe67bfc1b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "eventId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="eventIdMode")
    def event_id_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "eventIdMode"))

    @event_id_mode.setter
    def event_id_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3329cbb610fa0648b6ed4a6254757bf9a28f57d985016355ddd27d64c29b9b21)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "eventIdMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="eventStopBehavior")
    def event_stop_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "eventStopBehavior"))

    @event_stop_behavior.setter
    def event_stop_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74a4ebac4e0e5ab12c02dab3f803d2e4520acc87786eac7710329a39af2794a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "eventStopBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filecacheDuration")
    def filecache_duration(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filecacheDuration"))

    @filecache_duration.setter
    def filecache_duration(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f46e8b75ee8323ee7879a0f94dbcf6a479f6744815127a7e884ffb814678ce9e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filecacheDuration", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fragmentLength")
    def fragment_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fragmentLength"))

    @fragment_length.setter
    def fragment_length(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da86c2a4f011d2175304d1f8a835c1a17bc4b608e5d2be8f700da99ec80b08f8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fragmentLength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputLossAction")
    def input_loss_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossAction"))

    @input_loss_action.setter
    def input_loss_action(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__05eea303c6dd2028ec978f9777594c8d9fcd931a0a52ce86f8c86093fe6f7c9c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossAction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4114d0847d5da500372e99bc9a8bc34726fe3e8d7ce305c75a095e7604c9a543)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eb55a3008c351bc0471332a63eae106d8e849c4b117f6db09019c4f6473a185a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentationMode")
    def segmentation_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationMode"))

    @segmentation_mode.setter
    def segmentation_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3d9b6da19b60ec246240c3383741c7287188b9e0ebb826df70ef58a50e3d629)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sendDelayMs")
    def send_delay_ms(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sendDelayMs"))

    @send_delay_ms.setter
    def send_delay_ms(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee27de70cc25f1261bd513489e7b7d888faba2c3eff8a9cc04b9d1bb1d3e405d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sendDelayMs", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sparseTrackType")
    def sparse_track_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sparseTrackType"))

    @sparse_track_type.setter
    def sparse_track_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3afd64cd7f77511e728fc5a1f85a28b2a098d4515d0bd0aef824010b458f60d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sparseTrackType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="streamManifestBehavior")
    def stream_manifest_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "streamManifestBehavior"))

    @stream_manifest_behavior.setter
    def stream_manifest_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b19ae9c0fceb3b46d81730c2c7abdd61968e5b1c69ad7c4804a231ff5f3c920)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "streamManifestBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timestampOffset")
    def timestamp_offset(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timestampOffset"))

    @timestamp_offset.setter
    def timestamp_offset(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b02f8710081c5271bd6450a58d7b32b6bcd32000e8cbee0037546523e7bc10ef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timestampOffset", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timestampOffsetMode")
    def timestamp_offset_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timestampOffsetMode"))

    @timestamp_offset_mode.setter
    def timestamp_offset_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__537778cad25b44fd9d629e2faf01489eb01376cac2afbbd097764a95e6aeabce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timestampOffsetMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f12462a106ad8c9f95467a79597af69eabb6f7c7eebc2a5b971180694efd536)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62e5b022861096929f138e5103c33c5081f8b1ecbfc9e52e0c97db3d8c9a42d0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1226769bc3d23d11d194f9f83ad1dbfa4739fe1e10a7124a672f30d183d16207)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__607391768da9f554ec289c926e8d309d99738979779e65e05f6108be74e3f1dc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putArchiveGroupSettings")
    def put_archive_group_settings(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3553ccea4c75bf5af224fda66799560e1e37e0d66a1dfebf68dd5f6918282218)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putArchiveGroupSettings", [value]))

    @jsii.member(jsii_name="putFrameCaptureGroupSettings")
    def put_frame_capture_group_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
        frame_capture_cdn_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param frame_capture_cdn_settings: frame_capture_cdn_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_cdn_settings MedialiveChannel#frame_capture_cdn_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings(
            destination=destination,
            frame_capture_cdn_settings=frame_capture_cdn_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureGroupSettings", [value]))

    @jsii.member(jsii_name="putHlsGroupSettings")
    def put_hls_group_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
        ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
        base_url_content: typing.Optional[builtins.str] = None,
        base_url_content1: typing.Optional[builtins.str] = None,
        base_url_manifest: typing.Optional[builtins.str] = None,
        base_url_manifest1: typing.Optional[builtins.str] = None,
        caption_language_mappings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, typing.Dict[builtins.str, typing.Any]]]]] = None,
        caption_language_setting: typing.Optional[builtins.str] = None,
        client_cache: typing.Optional[builtins.str] = None,
        codec_specification: typing.Optional[builtins.str] = None,
        constant_iv: typing.Optional[builtins.str] = None,
        directory_structure: typing.Optional[builtins.str] = None,
        discontinuity_tags: typing.Optional[builtins.str] = None,
        encryption_type: typing.Optional[builtins.str] = None,
        hls_cdn_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
        hls_id3_segment_tagging: typing.Optional[builtins.str] = None,
        iframe_only_playlists: typing.Optional[builtins.str] = None,
        incomplete_segment_behavior: typing.Optional[builtins.str] = None,
        index_n_segments: typing.Optional[jsii.Number] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        iv_in_manifest: typing.Optional[builtins.str] = None,
        iv_source: typing.Optional[builtins.str] = None,
        keep_segments: typing.Optional[jsii.Number] = None,
        key_format: typing.Optional[builtins.str] = None,
        key_format_versions: typing.Optional[builtins.str] = None,
        key_provider_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        manifest_compression: typing.Optional[builtins.str] = None,
        manifest_duration_format: typing.Optional[builtins.str] = None,
        min_segment_length: typing.Optional[jsii.Number] = None,
        mode: typing.Optional[builtins.str] = None,
        output_selection: typing.Optional[builtins.str] = None,
        program_date_time: typing.Optional[builtins.str] = None,
        program_date_time_clock: typing.Optional[builtins.str] = None,
        program_date_time_period: typing.Optional[jsii.Number] = None,
        redundant_manifest: typing.Optional[builtins.str] = None,
        segment_length: typing.Optional[jsii.Number] = None,
        segments_per_subdirectory: typing.Optional[jsii.Number] = None,
        stream_inf_resolution: typing.Optional[builtins.str] = None,
        timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
        timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
        timestamp_delta_milliseconds: typing.Optional[jsii.Number] = None,
        ts_file_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param ad_markers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ad_markers MedialiveChannel#ad_markers}.
        :param base_url_content: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_content MedialiveChannel#base_url_content}.
        :param base_url_content1: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_content1 MedialiveChannel#base_url_content1}.
        :param base_url_manifest: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_manifest MedialiveChannel#base_url_manifest}.
        :param base_url_manifest1: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#base_url_manifest1 MedialiveChannel#base_url_manifest1}.
        :param caption_language_mappings: caption_language_mappings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_language_mappings MedialiveChannel#caption_language_mappings}
        :param caption_language_setting: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_language_setting MedialiveChannel#caption_language_setting}.
        :param client_cache: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#client_cache MedialiveChannel#client_cache}.
        :param codec_specification: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec_specification MedialiveChannel#codec_specification}.
        :param constant_iv: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#constant_iv MedialiveChannel#constant_iv}.
        :param directory_structure: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#directory_structure MedialiveChannel#directory_structure}.
        :param discontinuity_tags: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#discontinuity_tags MedialiveChannel#discontinuity_tags}.
        :param encryption_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#encryption_type MedialiveChannel#encryption_type}.
        :param hls_cdn_settings: hls_cdn_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_cdn_settings MedialiveChannel#hls_cdn_settings}
        :param hls_id3_segment_tagging: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_id3_segment_tagging MedialiveChannel#hls_id3_segment_tagging}.
        :param iframe_only_playlists: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iframe_only_playlists MedialiveChannel#iframe_only_playlists}.
        :param incomplete_segment_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#incomplete_segment_behavior MedialiveChannel#incomplete_segment_behavior}.
        :param index_n_segments: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#index_n_segments MedialiveChannel#index_n_segments}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param iv_in_manifest: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iv_in_manifest MedialiveChannel#iv_in_manifest}.
        :param iv_source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#iv_source MedialiveChannel#iv_source}.
        :param keep_segments: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#keep_segments MedialiveChannel#keep_segments}.
        :param key_format: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_format MedialiveChannel#key_format}.
        :param key_format_versions: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_format_versions MedialiveChannel#key_format_versions}.
        :param key_provider_settings: key_provider_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#key_provider_settings MedialiveChannel#key_provider_settings}
        :param manifest_compression: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#manifest_compression MedialiveChannel#manifest_compression}.
        :param manifest_duration_format: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#manifest_duration_format MedialiveChannel#manifest_duration_format}.
        :param min_segment_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_segment_length MedialiveChannel#min_segment_length}.
        :param mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mode MedialiveChannel#mode}.
        :param output_selection: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_selection MedialiveChannel#output_selection}.
        :param program_date_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time MedialiveChannel#program_date_time}.
        :param program_date_time_clock: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time_clock MedialiveChannel#program_date_time_clock}.
        :param program_date_time_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_date_time_period MedialiveChannel#program_date_time_period}.
        :param redundant_manifest: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#redundant_manifest MedialiveChannel#redundant_manifest}.
        :param segment_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_length MedialiveChannel#segment_length}.
        :param segments_per_subdirectory: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segments_per_subdirectory MedialiveChannel#segments_per_subdirectory}.
        :param stream_inf_resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_inf_resolution MedialiveChannel#stream_inf_resolution}.
        :param timed_metadata_id3_frame: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.
        :param timed_metadata_id3_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.
        :param timestamp_delta_milliseconds: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_delta_milliseconds MedialiveChannel#timestamp_delta_milliseconds}.
        :param ts_file_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ts_file_mode MedialiveChannel#ts_file_mode}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings(
            destination=destination,
            ad_markers=ad_markers,
            base_url_content=base_url_content,
            base_url_content1=base_url_content1,
            base_url_manifest=base_url_manifest,
            base_url_manifest1=base_url_manifest1,
            caption_language_mappings=caption_language_mappings,
            caption_language_setting=caption_language_setting,
            client_cache=client_cache,
            codec_specification=codec_specification,
            constant_iv=constant_iv,
            directory_structure=directory_structure,
            discontinuity_tags=discontinuity_tags,
            encryption_type=encryption_type,
            hls_cdn_settings=hls_cdn_settings,
            hls_id3_segment_tagging=hls_id3_segment_tagging,
            iframe_only_playlists=iframe_only_playlists,
            incomplete_segment_behavior=incomplete_segment_behavior,
            index_n_segments=index_n_segments,
            input_loss_action=input_loss_action,
            iv_in_manifest=iv_in_manifest,
            iv_source=iv_source,
            keep_segments=keep_segments,
            key_format=key_format,
            key_format_versions=key_format_versions,
            key_provider_settings=key_provider_settings,
            manifest_compression=manifest_compression,
            manifest_duration_format=manifest_duration_format,
            min_segment_length=min_segment_length,
            mode=mode,
            output_selection=output_selection,
            program_date_time=program_date_time,
            program_date_time_clock=program_date_time_clock,
            program_date_time_period=program_date_time_period,
            redundant_manifest=redundant_manifest,
            segment_length=segment_length,
            segments_per_subdirectory=segments_per_subdirectory,
            stream_inf_resolution=stream_inf_resolution,
            timed_metadata_id3_frame=timed_metadata_id3_frame,
            timed_metadata_id3_period=timed_metadata_id3_period,
            timestamp_delta_milliseconds=timestamp_delta_milliseconds,
            ts_file_mode=ts_file_mode,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsGroupSettings", [value]))

    @jsii.member(jsii_name="putMediaPackageGroupSettings")
    def put_media_package_group_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings(
            destination=destination
        )

        return typing.cast(None, jsii.invoke(self, "putMediaPackageGroupSettings", [value]))

    @jsii.member(jsii_name="putMsSmoothGroupSettings")
    def put_ms_smooth_group_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
        acquisition_point_id: typing.Optional[builtins.str] = None,
        audio_only_timecode_control: typing.Optional[builtins.str] = None,
        certificate_mode: typing.Optional[builtins.str] = None,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        event_id: typing.Optional[builtins.str] = None,
        event_id_mode: typing.Optional[builtins.str] = None,
        event_stop_behavior: typing.Optional[builtins.str] = None,
        filecache_duration: typing.Optional[jsii.Number] = None,
        fragment_length: typing.Optional[jsii.Number] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        num_retries: typing.Optional[jsii.Number] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
        segmentation_mode: typing.Optional[builtins.str] = None,
        send_delay_ms: typing.Optional[jsii.Number] = None,
        sparse_track_type: typing.Optional[builtins.str] = None,
        stream_manifest_behavior: typing.Optional[builtins.str] = None,
        timestamp_offset: typing.Optional[builtins.str] = None,
        timestamp_offset_mode: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param acquisition_point_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#acquisition_point_id MedialiveChannel#acquisition_point_id}.
        :param audio_only_timecode_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_timecode_control MedialiveChannel#audio_only_timecode_control}.
        :param certificate_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param event_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_id MedialiveChannel#event_id}.
        :param event_id_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_id_mode MedialiveChannel#event_id_mode}.
        :param event_stop_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#event_stop_behavior MedialiveChannel#event_stop_behavior}.
        :param filecache_duration: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filecache_duration MedialiveChannel#filecache_duration}.
        :param fragment_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_length MedialiveChannel#fragment_length}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        :param segmentation_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_mode MedialiveChannel#segmentation_mode}.
        :param send_delay_ms: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#send_delay_ms MedialiveChannel#send_delay_ms}.
        :param sparse_track_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sparse_track_type MedialiveChannel#sparse_track_type}.
        :param stream_manifest_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#stream_manifest_behavior MedialiveChannel#stream_manifest_behavior}.
        :param timestamp_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_offset MedialiveChannel#timestamp_offset}.
        :param timestamp_offset_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timestamp_offset_mode MedialiveChannel#timestamp_offset_mode}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings(
            destination=destination,
            acquisition_point_id=acquisition_point_id,
            audio_only_timecode_control=audio_only_timecode_control,
            certificate_mode=certificate_mode,
            connection_retry_interval=connection_retry_interval,
            event_id=event_id,
            event_id_mode=event_id_mode,
            event_stop_behavior=event_stop_behavior,
            filecache_duration=filecache_duration,
            fragment_length=fragment_length,
            input_loss_action=input_loss_action,
            num_retries=num_retries,
            restart_delay=restart_delay,
            segmentation_mode=segmentation_mode,
            send_delay_ms=send_delay_ms,
            sparse_track_type=sparse_track_type,
            stream_manifest_behavior=stream_manifest_behavior,
            timestamp_offset=timestamp_offset,
            timestamp_offset_mode=timestamp_offset_mode,
        )

        return typing.cast(None, jsii.invoke(self, "putMsSmoothGroupSettings", [value]))

    @jsii.member(jsii_name="putMultiplexGroupSettings")
    def put_multiplex_group_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings()

        return typing.cast(None, jsii.invoke(self, "putMultiplexGroupSettings", [value]))

    @jsii.member(jsii_name="putRtmpGroupSettings")
    def put_rtmp_group_settings(
        self,
        *,
        ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
        authentication_scheme: typing.Optional[builtins.str] = None,
        cache_full_behavior: typing.Optional[builtins.str] = None,
        cache_length: typing.Optional[jsii.Number] = None,
        caption_data: typing.Optional[builtins.str] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ad_markers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ad_markers MedialiveChannel#ad_markers}.
        :param authentication_scheme: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#authentication_scheme MedialiveChannel#authentication_scheme}.
        :param cache_full_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cache_full_behavior MedialiveChannel#cache_full_behavior}.
        :param cache_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cache_length MedialiveChannel#cache_length}.
        :param caption_data: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_data MedialiveChannel#caption_data}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings(
            ad_markers=ad_markers,
            authentication_scheme=authentication_scheme,
            cache_full_behavior=cache_full_behavior,
            cache_length=cache_length,
            caption_data=caption_data,
            input_loss_action=input_loss_action,
            restart_delay=restart_delay,
        )

        return typing.cast(None, jsii.invoke(self, "putRtmpGroupSettings", [value]))

    @jsii.member(jsii_name="putUdpGroupSettings")
    def put_udp_group_settings(
        self,
        *,
        input_loss_action: typing.Optional[builtins.str] = None,
        timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
        timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param input_loss_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param timed_metadata_id3_frame: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.
        :param timed_metadata_id3_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings(
            input_loss_action=input_loss_action,
            timed_metadata_id3_frame=timed_metadata_id3_frame,
            timed_metadata_id3_period=timed_metadata_id3_period,
        )

        return typing.cast(None, jsii.invoke(self, "putUdpGroupSettings", [value]))

    @jsii.member(jsii_name="resetArchiveGroupSettings")
    def reset_archive_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchiveGroupSettings", []))

    @jsii.member(jsii_name="resetFrameCaptureGroupSettings")
    def reset_frame_capture_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureGroupSettings", []))

    @jsii.member(jsii_name="resetHlsGroupSettings")
    def reset_hls_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsGroupSettings", []))

    @jsii.member(jsii_name="resetMediaPackageGroupSettings")
    def reset_media_package_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMediaPackageGroupSettings", []))

    @jsii.member(jsii_name="resetMsSmoothGroupSettings")
    def reset_ms_smooth_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMsSmoothGroupSettings", []))

    @jsii.member(jsii_name="resetMultiplexGroupSettings")
    def reset_multiplex_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMultiplexGroupSettings", []))

    @jsii.member(jsii_name="resetRtmpGroupSettings")
    def reset_rtmp_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRtmpGroupSettings", []))

    @jsii.member(jsii_name="resetUdpGroupSettings")
    def reset_udp_group_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUdpGroupSettings", []))

    @builtins.property
    @jsii.member(jsii_name="archiveGroupSettings")
    def archive_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList, jsii.get(self, "archiveGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureGroupSettings")
    def frame_capture_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference, jsii.get(self, "frameCaptureGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsGroupSettings")
    def hls_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference, jsii.get(self, "hlsGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageGroupSettings")
    def media_package_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference, jsii.get(self, "mediaPackageGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="msSmoothGroupSettings")
    def ms_smooth_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference, jsii.get(self, "msSmoothGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="multiplexGroupSettings")
    def multiplex_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference, jsii.get(self, "multiplexGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="rtmpGroupSettings")
    def rtmp_group_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference", jsii.get(self, "rtmpGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="udpGroupSettings")
    def udp_group_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference", jsii.get(self, "udpGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="archiveGroupSettingsInput")
    def archive_group_settings_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]], jsii.get(self, "archiveGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureGroupSettingsInput")
    def frame_capture_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings], jsii.get(self, "frameCaptureGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsGroupSettingsInput")
    def hls_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings], jsii.get(self, "hlsGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageGroupSettingsInput")
    def media_package_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings], jsii.get(self, "mediaPackageGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="msSmoothGroupSettingsInput")
    def ms_smooth_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings], jsii.get(self, "msSmoothGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="multiplexGroupSettingsInput")
    def multiplex_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings], jsii.get(self, "multiplexGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rtmpGroupSettingsInput")
    def rtmp_group_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings"], jsii.get(self, "rtmpGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="udpGroupSettingsInput")
    def udp_group_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings"], jsii.get(self, "udpGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__846ec298a6b0c76194d9b516d6c6b9839879312a8eaeb3a57d7ab69a0de99a5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "ad_markers": "adMarkers",
        "authentication_scheme": "authenticationScheme",
        "cache_full_behavior": "cacheFullBehavior",
        "cache_length": "cacheLength",
        "caption_data": "captionData",
        "input_loss_action": "inputLossAction",
        "restart_delay": "restartDelay",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings:
    def __init__(
        self,
        *,
        ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
        authentication_scheme: typing.Optional[builtins.str] = None,
        cache_full_behavior: typing.Optional[builtins.str] = None,
        cache_length: typing.Optional[jsii.Number] = None,
        caption_data: typing.Optional[builtins.str] = None,
        input_loss_action: typing.Optional[builtins.str] = None,
        restart_delay: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ad_markers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ad_markers MedialiveChannel#ad_markers}.
        :param authentication_scheme: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#authentication_scheme MedialiveChannel#authentication_scheme}.
        :param cache_full_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cache_full_behavior MedialiveChannel#cache_full_behavior}.
        :param cache_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cache_length MedialiveChannel#cache_length}.
        :param caption_data: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_data MedialiveChannel#caption_data}.
        :param input_loss_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param restart_delay: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__155a21b7da33baa08c142846386a32f141271d13d1036503902aef6d47806d45)
            check_type(argname="argument ad_markers", value=ad_markers, expected_type=type_hints["ad_markers"])
            check_type(argname="argument authentication_scheme", value=authentication_scheme, expected_type=type_hints["authentication_scheme"])
            check_type(argname="argument cache_full_behavior", value=cache_full_behavior, expected_type=type_hints["cache_full_behavior"])
            check_type(argname="argument cache_length", value=cache_length, expected_type=type_hints["cache_length"])
            check_type(argname="argument caption_data", value=caption_data, expected_type=type_hints["caption_data"])
            check_type(argname="argument input_loss_action", value=input_loss_action, expected_type=type_hints["input_loss_action"])
            check_type(argname="argument restart_delay", value=restart_delay, expected_type=type_hints["restart_delay"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ad_markers is not None:
            self._values["ad_markers"] = ad_markers
        if authentication_scheme is not None:
            self._values["authentication_scheme"] = authentication_scheme
        if cache_full_behavior is not None:
            self._values["cache_full_behavior"] = cache_full_behavior
        if cache_length is not None:
            self._values["cache_length"] = cache_length
        if caption_data is not None:
            self._values["caption_data"] = caption_data
        if input_loss_action is not None:
            self._values["input_loss_action"] = input_loss_action
        if restart_delay is not None:
            self._values["restart_delay"] = restart_delay

    @builtins.property
    def ad_markers(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ad_markers MedialiveChannel#ad_markers}.'''
        result = self._values.get("ad_markers")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def authentication_scheme(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#authentication_scheme MedialiveChannel#authentication_scheme}.'''
        result = self._values.get("authentication_scheme")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cache_full_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cache_full_behavior MedialiveChannel#cache_full_behavior}.'''
        result = self._values.get("cache_full_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cache_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cache_length MedialiveChannel#cache_length}.'''
        result = self._values.get("cache_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def caption_data(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_data MedialiveChannel#caption_data}.'''
        result = self._values.get("caption_data")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def input_loss_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.'''
        result = self._values.get("input_loss_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def restart_delay(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#restart_delay MedialiveChannel#restart_delay}.'''
        result = self._values.get("restart_delay")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24c0e1e8ebf41f8de0572547773689cf8c24ff184eef4676d91dcb101a59485f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAdMarkers")
    def reset_ad_markers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAdMarkers", []))

    @jsii.member(jsii_name="resetAuthenticationScheme")
    def reset_authentication_scheme(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAuthenticationScheme", []))

    @jsii.member(jsii_name="resetCacheFullBehavior")
    def reset_cache_full_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCacheFullBehavior", []))

    @jsii.member(jsii_name="resetCacheLength")
    def reset_cache_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCacheLength", []))

    @jsii.member(jsii_name="resetCaptionData")
    def reset_caption_data(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionData", []))

    @jsii.member(jsii_name="resetInputLossAction")
    def reset_input_loss_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossAction", []))

    @jsii.member(jsii_name="resetRestartDelay")
    def reset_restart_delay(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRestartDelay", []))

    @builtins.property
    @jsii.member(jsii_name="adMarkersInput")
    def ad_markers_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "adMarkersInput"))

    @builtins.property
    @jsii.member(jsii_name="authenticationSchemeInput")
    def authentication_scheme_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "authenticationSchemeInput"))

    @builtins.property
    @jsii.member(jsii_name="cacheFullBehaviorInput")
    def cache_full_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "cacheFullBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="cacheLengthInput")
    def cache_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "cacheLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="captionDataInput")
    def caption_data_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "captionDataInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossActionInput")
    def input_loss_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossActionInput"))

    @builtins.property
    @jsii.member(jsii_name="restartDelayInput")
    def restart_delay_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "restartDelayInput"))

    @builtins.property
    @jsii.member(jsii_name="adMarkers")
    def ad_markers(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "adMarkers"))

    @ad_markers.setter
    def ad_markers(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ad926fd2bb8c3c84f660a0cf597fa07b60a97c18413b4cf6d77d76918260eb3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "adMarkers", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="authenticationScheme")
    def authentication_scheme(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "authenticationScheme"))

    @authentication_scheme.setter
    def authentication_scheme(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31e52da84299d580b5a52c4cd08f6a559133d9fe4f18ba877fd85e5d12f85c58)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "authenticationScheme", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="cacheFullBehavior")
    def cache_full_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "cacheFullBehavior"))

    @cache_full_behavior.setter
    def cache_full_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a89d280cc1e26fcec658f14019178ebdab40d94eb16699d06143a2aaf67c621a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cacheFullBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="cacheLength")
    def cache_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "cacheLength"))

    @cache_length.setter
    def cache_length(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__716db227caa0f366244c78be7b8ecadf95b22324f9446092492fa49d153bbe05)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "cacheLength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="captionData")
    def caption_data(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "captionData"))

    @caption_data.setter
    def caption_data(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93e6d2cdf9331260dc7b6dfccc872542e9a0775faca6f112630154b229bd8137)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionData", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputLossAction")
    def input_loss_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossAction"))

    @input_loss_action.setter
    def input_loss_action(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ab7793553bd7d375a29ea67ca3f089791b3c15d6f6531d1bbd224a4466ddabe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossAction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="restartDelay")
    def restart_delay(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "restartDelay"))

    @restart_delay.setter
    def restart_delay(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef270cbf065f937d649fc67586c9af05fe63fffa04c88d753904784056589ea5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "restartDelay", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8127d0be4d3860b457fe9eb630067c064252afe137788c3b43597d1601e19e73)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings",
    jsii_struct_bases=[],
    name_mapping={
        "input_loss_action": "inputLossAction",
        "timed_metadata_id3_frame": "timedMetadataId3Frame",
        "timed_metadata_id3_period": "timedMetadataId3Period",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings:
    def __init__(
        self,
        *,
        input_loss_action: typing.Optional[builtins.str] = None,
        timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
        timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param input_loss_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.
        :param timed_metadata_id3_frame: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.
        :param timed_metadata_id3_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3be8365ff6eed70ce175026f4c0a29eed5b2e773a0eccebf037a7006656cf0b)
            check_type(argname="argument input_loss_action", value=input_loss_action, expected_type=type_hints["input_loss_action"])
            check_type(argname="argument timed_metadata_id3_frame", value=timed_metadata_id3_frame, expected_type=type_hints["timed_metadata_id3_frame"])
            check_type(argname="argument timed_metadata_id3_period", value=timed_metadata_id3_period, expected_type=type_hints["timed_metadata_id3_period"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if input_loss_action is not None:
            self._values["input_loss_action"] = input_loss_action
        if timed_metadata_id3_frame is not None:
            self._values["timed_metadata_id3_frame"] = timed_metadata_id3_frame
        if timed_metadata_id3_period is not None:
            self._values["timed_metadata_id3_period"] = timed_metadata_id3_period

    @builtins.property
    def input_loss_action(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_action MedialiveChannel#input_loss_action}.'''
        result = self._values.get("input_loss_action")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_id3_frame(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_frame MedialiveChannel#timed_metadata_id3_frame}.'''
        result = self._values.get("timed_metadata_id3_frame")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_id3_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_id3_period MedialiveChannel#timed_metadata_id3_period}.'''
        result = self._values.get("timed_metadata_id3_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ade462389972f10a31ea98edc254eb95db4130444856af65e47bd0b1659d6cf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetInputLossAction")
    def reset_input_loss_action(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossAction", []))

    @jsii.member(jsii_name="resetTimedMetadataId3Frame")
    def reset_timed_metadata_id3_frame(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataId3Frame", []))

    @jsii.member(jsii_name="resetTimedMetadataId3Period")
    def reset_timed_metadata_id3_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataId3Period", []))

    @builtins.property
    @jsii.member(jsii_name="inputLossActionInput")
    def input_loss_action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputLossActionInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3FrameInput")
    def timed_metadata_id3_frame_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataId3FrameInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3PeriodInput")
    def timed_metadata_id3_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "timedMetadataId3PeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossAction")
    def input_loss_action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputLossAction"))

    @input_loss_action.setter
    def input_loss_action(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5a13b877fae6ada499aeac1393a3748b8c99ab93f1999bec71fe7b128c8649b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossAction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3Frame")
    def timed_metadata_id3_frame(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataId3Frame"))

    @timed_metadata_id3_frame.setter
    def timed_metadata_id3_frame(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__20e6e25b352fbe8a51af7ff2e507908bbdabccccafee7d6b93c7a0abed3249f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataId3Frame", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataId3Period")
    def timed_metadata_id3_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "timedMetadataId3Period"))

    @timed_metadata_id3_period.setter
    def timed_metadata_id3_period(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__411617ca731152de2f71e2a2a5d10043a4966930cd5cb2fed2e57e340a447f33)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataId3Period", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9f36c734d56c4e634070a72c14011f66c5755cc292376213c5d7b93696652b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__54632b84292704fe7cec36266814d471b5b6c9e24446860bbefc13b6da6c4476)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putOutputGroupSettings")
    def put_output_group_settings(
        self,
        *,
        archive_group_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
        frame_capture_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        hls_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        media_package_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        ms_smooth_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        multiplex_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        rtmp_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        udp_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_group_settings: archive_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_group_settings MedialiveChannel#archive_group_settings}
        :param frame_capture_group_settings: frame_capture_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_group_settings MedialiveChannel#frame_capture_group_settings}
        :param hls_group_settings: hls_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_group_settings MedialiveChannel#hls_group_settings}
        :param media_package_group_settings: media_package_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_package_group_settings MedialiveChannel#media_package_group_settings}
        :param ms_smooth_group_settings: ms_smooth_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ms_smooth_group_settings MedialiveChannel#ms_smooth_group_settings}
        :param multiplex_group_settings: multiplex_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_group_settings MedialiveChannel#multiplex_group_settings}
        :param rtmp_group_settings: rtmp_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_group_settings MedialiveChannel#rtmp_group_settings}
        :param udp_group_settings: udp_group_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#udp_group_settings MedialiveChannel#udp_group_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings(
            archive_group_settings=archive_group_settings,
            frame_capture_group_settings=frame_capture_group_settings,
            hls_group_settings=hls_group_settings,
            media_package_group_settings=media_package_group_settings,
            ms_smooth_group_settings=ms_smooth_group_settings,
            multiplex_group_settings=multiplex_group_settings,
            rtmp_group_settings=rtmp_group_settings,
            udp_group_settings=udp_group_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putOutputGroupSettings", [value]))

    @jsii.member(jsii_name="putOutputs")
    def put_outputs(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputs", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__86c72399fc003535426df8bc70ad77b4ec1a7add1b5e1d66327679b1f74bd923)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putOutputs", [value]))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @builtins.property
    @jsii.member(jsii_name="outputGroupSettings")
    def output_group_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference, jsii.get(self, "outputGroupSettings"))

    @builtins.property
    @jsii.member(jsii_name="outputs")
    def outputs(self) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsList":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsList", jsii.get(self, "outputs"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="outputGroupSettingsInput")
    def output_group_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings], jsii.get(self, "outputGroupSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="outputsInput")
    def outputs_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputs"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsOutputGroupsOutputs"]]], jsii.get(self, "outputsInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d678ab4eb056b08f2d74d3f22a8dc9d0117006f447e1cc50fa3f663ecb2b5a97)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroups]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroups]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroups]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b82995d51effa78a7aea7216aa420d65f1d3d2666d328ea6b08263e4316ad34d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputs",
    jsii_struct_bases=[],
    name_mapping={
        "output_settings": "outputSettings",
        "audio_description_names": "audioDescriptionNames",
        "caption_description_names": "captionDescriptionNames",
        "output_name": "outputName",
        "video_description_name": "videoDescriptionName",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputs:
    def __init__(
        self,
        *,
        output_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings", typing.Dict[builtins.str, typing.Any]],
        audio_description_names: typing.Optional[typing.Sequence[builtins.str]] = None,
        caption_description_names: typing.Optional[typing.Sequence[builtins.str]] = None,
        output_name: typing.Optional[builtins.str] = None,
        video_description_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_settings: output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_settings MedialiveChannel#output_settings}
        :param audio_description_names: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_description_names MedialiveChannel#audio_description_names}.
        :param caption_description_names: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_description_names MedialiveChannel#caption_description_names}.
        :param output_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_name MedialiveChannel#output_name}.
        :param video_description_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_description_name MedialiveChannel#video_description_name}.
        '''
        if isinstance(output_settings, dict):
            output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings(**output_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0693c827bce0b71e4bd85ec0eb946287e5d12918bdcc24fcd766af7058343d8c)
            check_type(argname="argument output_settings", value=output_settings, expected_type=type_hints["output_settings"])
            check_type(argname="argument audio_description_names", value=audio_description_names, expected_type=type_hints["audio_description_names"])
            check_type(argname="argument caption_description_names", value=caption_description_names, expected_type=type_hints["caption_description_names"])
            check_type(argname="argument output_name", value=output_name, expected_type=type_hints["output_name"])
            check_type(argname="argument video_description_name", value=video_description_name, expected_type=type_hints["video_description_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "output_settings": output_settings,
        }
        if audio_description_names is not None:
            self._values["audio_description_names"] = audio_description_names
        if caption_description_names is not None:
            self._values["caption_description_names"] = caption_description_names
        if output_name is not None:
            self._values["output_name"] = output_name
        if video_description_name is not None:
            self._values["video_description_name"] = video_description_name

    @builtins.property
    def output_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings":
        '''output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_settings MedialiveChannel#output_settings}
        '''
        result = self._values.get("output_settings")
        assert result is not None, "Required property 'output_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings", result)

    @builtins.property
    def audio_description_names(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_description_names MedialiveChannel#audio_description_names}.'''
        result = self._values.get("audio_description_names")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def caption_description_names(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_description_names MedialiveChannel#caption_description_names}.'''
        result = self._values.get("caption_description_names")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    @builtins.property
    def output_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_name MedialiveChannel#output_name}.'''
        result = self._values.get("output_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def video_description_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_description_name MedialiveChannel#video_description_name}.'''
        result = self._values.get("video_description_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputs(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee6a451bb0d4bc8162a885fffc7464e7e6a95244bf0cd3d55b43510438001429)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0ce3f2343efb3cd66e6aef060ed9b361e1dcaf712d6638c92202d02dfb65389)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4af6e7934109bd0cf9bcb1ffb3d1f9f4a578bae892aa6cf89e42f3ddbaa56527)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__069d075a5f6c8d04fa235e9357c5f56e57ed0a922af2c83c264d8973c3ed3d9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2bde817d563754204013192b4d6cd8b006d3c762fc480d71c6f447a773dd16b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputs]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputs]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputs]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__524c959312a7b396b00cf342c11f480da91ce2d72bc21d0536c7646d2d2ad66e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d0fe5a0954f8d884e38808c523d203ab0d5a40ccfbac8e5320d523f91acf165)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putOutputSettings")
    def put_output_settings(
        self,
        *,
        archive_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        frame_capture_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        hls_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        media_package_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        ms_smooth_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        multiplex_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        rtmp_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        udp_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_output_settings: archive_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_output_settings MedialiveChannel#archive_output_settings}
        :param frame_capture_output_settings: frame_capture_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_output_settings MedialiveChannel#frame_capture_output_settings}
        :param hls_output_settings: hls_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_output_settings MedialiveChannel#hls_output_settings}
        :param media_package_output_settings: media_package_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_package_output_settings MedialiveChannel#media_package_output_settings}
        :param ms_smooth_output_settings: ms_smooth_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ms_smooth_output_settings MedialiveChannel#ms_smooth_output_settings}
        :param multiplex_output_settings: multiplex_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_output_settings MedialiveChannel#multiplex_output_settings}
        :param rtmp_output_settings: rtmp_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_output_settings MedialiveChannel#rtmp_output_settings}
        :param udp_output_settings: udp_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#udp_output_settings MedialiveChannel#udp_output_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings(
            archive_output_settings=archive_output_settings,
            frame_capture_output_settings=frame_capture_output_settings,
            hls_output_settings=hls_output_settings,
            media_package_output_settings=media_package_output_settings,
            ms_smooth_output_settings=ms_smooth_output_settings,
            multiplex_output_settings=multiplex_output_settings,
            rtmp_output_settings=rtmp_output_settings,
            udp_output_settings=udp_output_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putOutputSettings", [value]))

    @jsii.member(jsii_name="resetAudioDescriptionNames")
    def reset_audio_description_names(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioDescriptionNames", []))

    @jsii.member(jsii_name="resetCaptionDescriptionNames")
    def reset_caption_description_names(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionDescriptionNames", []))

    @jsii.member(jsii_name="resetOutputName")
    def reset_output_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputName", []))

    @jsii.member(jsii_name="resetVideoDescriptionName")
    def reset_video_description_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoDescriptionName", []))

    @builtins.property
    @jsii.member(jsii_name="outputSettings")
    def output_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference", jsii.get(self, "outputSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioDescriptionNamesInput")
    def audio_description_names_input(
        self,
    ) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "audioDescriptionNamesInput"))

    @builtins.property
    @jsii.member(jsii_name="captionDescriptionNamesInput")
    def caption_description_names_input(
        self,
    ) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "captionDescriptionNamesInput"))

    @builtins.property
    @jsii.member(jsii_name="outputNameInput")
    def output_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputNameInput"))

    @builtins.property
    @jsii.member(jsii_name="outputSettingsInput")
    def output_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings"], jsii.get(self, "outputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="videoDescriptionNameInput")
    def video_description_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "videoDescriptionNameInput"))

    @builtins.property
    @jsii.member(jsii_name="audioDescriptionNames")
    def audio_description_names(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "audioDescriptionNames"))

    @audio_description_names.setter
    def audio_description_names(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0c1df947fe848ed51ff7e46f158e0cd1acdafe151e6aad892eff87f572ba117)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioDescriptionNames", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="captionDescriptionNames")
    def caption_description_names(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "captionDescriptionNames"))

    @caption_description_names.setter
    def caption_description_names(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83a1958dd625f7937e464f66d7a629c817f9cd0e5ff2eb505a343bb3bbd58889)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captionDescriptionNames", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="outputName")
    def output_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputName"))

    @output_name.setter
    def output_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f499281ec8fb97d85e918ad9b816f1fefed7265ebe3aee93db2bbd7f334e18a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="videoDescriptionName")
    def video_description_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "videoDescriptionName"))

    @video_description_name.setter
    def video_description_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5be0479bdaf93c01418c642e8e6ad2a6565c9ad0102e6b2e03785b41cf8ee0e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoDescriptionName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputs]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputs]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputs]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f718355059da1d35d3480074066f03794f99a1ea7595b0f5a52aa0dd855cedd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "archive_output_settings": "archiveOutputSettings",
        "frame_capture_output_settings": "frameCaptureOutputSettings",
        "hls_output_settings": "hlsOutputSettings",
        "media_package_output_settings": "mediaPackageOutputSettings",
        "ms_smooth_output_settings": "msSmoothOutputSettings",
        "multiplex_output_settings": "multiplexOutputSettings",
        "rtmp_output_settings": "rtmpOutputSettings",
        "udp_output_settings": "udpOutputSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings:
    def __init__(
        self,
        *,
        archive_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        frame_capture_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        hls_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        media_package_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        ms_smooth_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        multiplex_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        rtmp_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        udp_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param archive_output_settings: archive_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_output_settings MedialiveChannel#archive_output_settings}
        :param frame_capture_output_settings: frame_capture_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_output_settings MedialiveChannel#frame_capture_output_settings}
        :param hls_output_settings: hls_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_output_settings MedialiveChannel#hls_output_settings}
        :param media_package_output_settings: media_package_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_package_output_settings MedialiveChannel#media_package_output_settings}
        :param ms_smooth_output_settings: ms_smooth_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ms_smooth_output_settings MedialiveChannel#ms_smooth_output_settings}
        :param multiplex_output_settings: multiplex_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_output_settings MedialiveChannel#multiplex_output_settings}
        :param rtmp_output_settings: rtmp_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_output_settings MedialiveChannel#rtmp_output_settings}
        :param udp_output_settings: udp_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#udp_output_settings MedialiveChannel#udp_output_settings}
        '''
        if isinstance(archive_output_settings, dict):
            archive_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings(**archive_output_settings)
        if isinstance(frame_capture_output_settings, dict):
            frame_capture_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings(**frame_capture_output_settings)
        if isinstance(hls_output_settings, dict):
            hls_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings(**hls_output_settings)
        if isinstance(media_package_output_settings, dict):
            media_package_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings(**media_package_output_settings)
        if isinstance(ms_smooth_output_settings, dict):
            ms_smooth_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings(**ms_smooth_output_settings)
        if isinstance(multiplex_output_settings, dict):
            multiplex_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings(**multiplex_output_settings)
        if isinstance(rtmp_output_settings, dict):
            rtmp_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings(**rtmp_output_settings)
        if isinstance(udp_output_settings, dict):
            udp_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings(**udp_output_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1abe05aad53cddb828528a340338834b09b0aaeaa4d604c2c2a082d20403d250)
            check_type(argname="argument archive_output_settings", value=archive_output_settings, expected_type=type_hints["archive_output_settings"])
            check_type(argname="argument frame_capture_output_settings", value=frame_capture_output_settings, expected_type=type_hints["frame_capture_output_settings"])
            check_type(argname="argument hls_output_settings", value=hls_output_settings, expected_type=type_hints["hls_output_settings"])
            check_type(argname="argument media_package_output_settings", value=media_package_output_settings, expected_type=type_hints["media_package_output_settings"])
            check_type(argname="argument ms_smooth_output_settings", value=ms_smooth_output_settings, expected_type=type_hints["ms_smooth_output_settings"])
            check_type(argname="argument multiplex_output_settings", value=multiplex_output_settings, expected_type=type_hints["multiplex_output_settings"])
            check_type(argname="argument rtmp_output_settings", value=rtmp_output_settings, expected_type=type_hints["rtmp_output_settings"])
            check_type(argname="argument udp_output_settings", value=udp_output_settings, expected_type=type_hints["udp_output_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if archive_output_settings is not None:
            self._values["archive_output_settings"] = archive_output_settings
        if frame_capture_output_settings is not None:
            self._values["frame_capture_output_settings"] = frame_capture_output_settings
        if hls_output_settings is not None:
            self._values["hls_output_settings"] = hls_output_settings
        if media_package_output_settings is not None:
            self._values["media_package_output_settings"] = media_package_output_settings
        if ms_smooth_output_settings is not None:
            self._values["ms_smooth_output_settings"] = ms_smooth_output_settings
        if multiplex_output_settings is not None:
            self._values["multiplex_output_settings"] = multiplex_output_settings
        if rtmp_output_settings is not None:
            self._values["rtmp_output_settings"] = rtmp_output_settings
        if udp_output_settings is not None:
            self._values["udp_output_settings"] = udp_output_settings

    @builtins.property
    def archive_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings"]:
        '''archive_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#archive_output_settings MedialiveChannel#archive_output_settings}
        '''
        result = self._values.get("archive_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings"], result)

    @builtins.property
    def frame_capture_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings"]:
        '''frame_capture_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_output_settings MedialiveChannel#frame_capture_output_settings}
        '''
        result = self._values.get("frame_capture_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings"], result)

    @builtins.property
    def hls_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings"]:
        '''hls_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_output_settings MedialiveChannel#hls_output_settings}
        '''
        result = self._values.get("hls_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings"], result)

    @builtins.property
    def media_package_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings"]:
        '''media_package_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#media_package_output_settings MedialiveChannel#media_package_output_settings}
        '''
        result = self._values.get("media_package_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings"], result)

    @builtins.property
    def ms_smooth_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings"]:
        '''ms_smooth_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ms_smooth_output_settings MedialiveChannel#ms_smooth_output_settings}
        '''
        result = self._values.get("ms_smooth_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings"], result)

    @builtins.property
    def multiplex_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings"]:
        '''multiplex_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#multiplex_output_settings MedialiveChannel#multiplex_output_settings}
        '''
        result = self._values.get("multiplex_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings"], result)

    @builtins.property
    def rtmp_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings"]:
        '''rtmp_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rtmp_output_settings MedialiveChannel#rtmp_output_settings}
        '''
        result = self._values.get("rtmp_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings"], result)

    @builtins.property
    def udp_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings"]:
        '''udp_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#udp_output_settings MedialiveChannel#udp_output_settings}
        '''
        result = self._values.get("udp_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "container_settings": "containerSettings",
        "extension": "extension",
        "name_modifier": "nameModifier",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings:
    def __init__(
        self,
        *,
        container_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        extension: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param container_settings: container_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#container_settings MedialiveChannel#container_settings}
        :param extension: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#extension MedialiveChannel#extension}.
        :param name_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        if isinstance(container_settings, dict):
            container_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings(**container_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e82837ecae4f5c9e6949c0662db603d2afa97d53daea0537566c21ad919ca3d)
            check_type(argname="argument container_settings", value=container_settings, expected_type=type_hints["container_settings"])
            check_type(argname="argument extension", value=extension, expected_type=type_hints["extension"])
            check_type(argname="argument name_modifier", value=name_modifier, expected_type=type_hints["name_modifier"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if container_settings is not None:
            self._values["container_settings"] = container_settings
        if extension is not None:
            self._values["extension"] = extension
        if name_modifier is not None:
            self._values["name_modifier"] = name_modifier

    @builtins.property
    def container_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings"]:
        '''container_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#container_settings MedialiveChannel#container_settings}
        '''
        result = self._values.get("container_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings"], result)

    @builtins.property
    def extension(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#extension MedialiveChannel#extension}.'''
        result = self._values.get("extension")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.'''
        result = self._values.get("name_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings",
    jsii_struct_bases=[],
    name_mapping={"m2_ts_settings": "m2TsSettings", "raw_settings": "rawSettings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings:
    def __init__(
        self,
        *,
        m2_ts_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        raw_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param m2_ts_settings: m2ts_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        :param raw_settings: raw_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#raw_settings MedialiveChannel#raw_settings}
        '''
        if isinstance(m2_ts_settings, dict):
            m2_ts_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings(**m2_ts_settings)
        if isinstance(raw_settings, dict):
            raw_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings(**raw_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__449f3eb52669f544eb815372b72652769984a797ee847c0131b94e1b331243d2)
            check_type(argname="argument m2_ts_settings", value=m2_ts_settings, expected_type=type_hints["m2_ts_settings"])
            check_type(argname="argument raw_settings", value=raw_settings, expected_type=type_hints["raw_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if m2_ts_settings is not None:
            self._values["m2_ts_settings"] = m2_ts_settings
        if raw_settings is not None:
            self._values["raw_settings"] = raw_settings

    @builtins.property
    def m2_ts_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings"]:
        '''m2ts_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        '''
        result = self._values.get("m2_ts_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings"], result)

    @builtins.property
    def raw_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings"]:
        '''raw_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#raw_settings MedialiveChannel#raw_settings}
        '''
        result = self._values.get("raw_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "absent_input_audio_behavior": "absentInputAudioBehavior",
        "arib": "arib",
        "arib_captions_pid": "aribCaptionsPid",
        "arib_captions_pid_control": "aribCaptionsPidControl",
        "audio_buffer_model": "audioBufferModel",
        "audio_frames_per_pes": "audioFramesPerPes",
        "audio_pids": "audioPids",
        "audio_stream_type": "audioStreamType",
        "bitrate": "bitrate",
        "buffer_model": "bufferModel",
        "cc_descriptor": "ccDescriptor",
        "dvb_nit_settings": "dvbNitSettings",
        "dvb_sdt_settings": "dvbSdtSettings",
        "dvb_sub_pids": "dvbSubPids",
        "dvb_tdt_settings": "dvbTdtSettings",
        "dvb_teletext_pid": "dvbTeletextPid",
        "ebif": "ebif",
        "ebp_audio_interval": "ebpAudioInterval",
        "ebp_lookahead_ms": "ebpLookaheadMs",
        "ebp_placement": "ebpPlacement",
        "ecm_pid": "ecmPid",
        "es_rate_in_pes": "esRateInPes",
        "etv_platform_pid": "etvPlatformPid",
        "etv_signal_pid": "etvSignalPid",
        "fragment_time": "fragmentTime",
        "klv": "klv",
        "klv_data_pids": "klvDataPids",
        "nielsen_id3_behavior": "nielsenId3Behavior",
        "null_packet_bitrate": "nullPacketBitrate",
        "pat_interval": "patInterval",
        "pcr_control": "pcrControl",
        "pcr_period": "pcrPeriod",
        "pcr_pid": "pcrPid",
        "pmt_interval": "pmtInterval",
        "pmt_pid": "pmtPid",
        "program_num": "programNum",
        "rate_mode": "rateMode",
        "scte27_pids": "scte27Pids",
        "scte35_control": "scte35Control",
        "scte35_pid": "scte35Pid",
        "segmentation_markers": "segmentationMarkers",
        "segmentation_style": "segmentationStyle",
        "segmentation_time": "segmentationTime",
        "timed_metadata_behavior": "timedMetadataBehavior",
        "timed_metadata_pid": "timedMetadataPid",
        "transport_stream_id": "transportStreamId",
        "video_pid": "videoPid",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings:
    def __init__(
        self,
        *,
        absent_input_audio_behavior: typing.Optional[builtins.str] = None,
        arib: typing.Optional[builtins.str] = None,
        arib_captions_pid: typing.Optional[builtins.str] = None,
        arib_captions_pid_control: typing.Optional[builtins.str] = None,
        audio_buffer_model: typing.Optional[builtins.str] = None,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        audio_stream_type: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buffer_model: typing.Optional[builtins.str] = None,
        cc_descriptor: typing.Optional[builtins.str] = None,
        dvb_nit_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sdt_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sub_pids: typing.Optional[builtins.str] = None,
        dvb_tdt_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_teletext_pid: typing.Optional[builtins.str] = None,
        ebif: typing.Optional[builtins.str] = None,
        ebp_audio_interval: typing.Optional[builtins.str] = None,
        ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
        ebp_placement: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        es_rate_in_pes: typing.Optional[builtins.str] = None,
        etv_platform_pid: typing.Optional[builtins.str] = None,
        etv_signal_pid: typing.Optional[builtins.str] = None,
        fragment_time: typing.Optional[jsii.Number] = None,
        klv: typing.Optional[builtins.str] = None,
        klv_data_pids: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        null_packet_bitrate: typing.Optional[jsii.Number] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        rate_mode: typing.Optional[builtins.str] = None,
        scte27_pids: typing.Optional[builtins.str] = None,
        scte35_control: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        segmentation_markers: typing.Optional[builtins.str] = None,
        segmentation_style: typing.Optional[builtins.str] = None,
        segmentation_time: typing.Optional[jsii.Number] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param absent_input_audio_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.
        :param arib: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib MedialiveChannel#arib}.
        :param arib_captions_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.
        :param arib_captions_pid_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.
        :param audio_buffer_model: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param audio_stream_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buffer_model: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_model MedialiveChannel#buffer_model}.
        :param cc_descriptor: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.
        :param dvb_nit_settings: dvb_nit_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        :param dvb_sdt_settings: dvb_sdt_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        :param dvb_sub_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param dvb_teletext_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.
        :param ebif: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebif MedialiveChannel#ebif}.
        :param ebp_audio_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.
        :param ebp_lookahead_ms: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.
        :param ebp_placement: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param es_rate_in_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.
        :param etv_platform_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.
        :param etv_signal_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.
        :param fragment_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_time MedialiveChannel#fragment_time}.
        :param klv: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv MedialiveChannel#klv}.
        :param klv_data_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param null_packet_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.
        :param pat_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.
        :param rate_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_mode MedialiveChannel#rate_mode}.
        :param scte27_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.
        :param scte35_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_control MedialiveChannel#scte35_control}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param segmentation_markers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.
        :param segmentation_style: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.
        :param segmentation_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        if isinstance(dvb_nit_settings, dict):
            dvb_nit_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(**dvb_nit_settings)
        if isinstance(dvb_sdt_settings, dict):
            dvb_sdt_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(**dvb_sdt_settings)
        if isinstance(dvb_tdt_settings, dict):
            dvb_tdt_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(**dvb_tdt_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aabac85aba1829eabb74c06171babc82d9d78b1b02a5e31a2e9f1f41fe6dbf45)
            check_type(argname="argument absent_input_audio_behavior", value=absent_input_audio_behavior, expected_type=type_hints["absent_input_audio_behavior"])
            check_type(argname="argument arib", value=arib, expected_type=type_hints["arib"])
            check_type(argname="argument arib_captions_pid", value=arib_captions_pid, expected_type=type_hints["arib_captions_pid"])
            check_type(argname="argument arib_captions_pid_control", value=arib_captions_pid_control, expected_type=type_hints["arib_captions_pid_control"])
            check_type(argname="argument audio_buffer_model", value=audio_buffer_model, expected_type=type_hints["audio_buffer_model"])
            check_type(argname="argument audio_frames_per_pes", value=audio_frames_per_pes, expected_type=type_hints["audio_frames_per_pes"])
            check_type(argname="argument audio_pids", value=audio_pids, expected_type=type_hints["audio_pids"])
            check_type(argname="argument audio_stream_type", value=audio_stream_type, expected_type=type_hints["audio_stream_type"])
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument buffer_model", value=buffer_model, expected_type=type_hints["buffer_model"])
            check_type(argname="argument cc_descriptor", value=cc_descriptor, expected_type=type_hints["cc_descriptor"])
            check_type(argname="argument dvb_nit_settings", value=dvb_nit_settings, expected_type=type_hints["dvb_nit_settings"])
            check_type(argname="argument dvb_sdt_settings", value=dvb_sdt_settings, expected_type=type_hints["dvb_sdt_settings"])
            check_type(argname="argument dvb_sub_pids", value=dvb_sub_pids, expected_type=type_hints["dvb_sub_pids"])
            check_type(argname="argument dvb_tdt_settings", value=dvb_tdt_settings, expected_type=type_hints["dvb_tdt_settings"])
            check_type(argname="argument dvb_teletext_pid", value=dvb_teletext_pid, expected_type=type_hints["dvb_teletext_pid"])
            check_type(argname="argument ebif", value=ebif, expected_type=type_hints["ebif"])
            check_type(argname="argument ebp_audio_interval", value=ebp_audio_interval, expected_type=type_hints["ebp_audio_interval"])
            check_type(argname="argument ebp_lookahead_ms", value=ebp_lookahead_ms, expected_type=type_hints["ebp_lookahead_ms"])
            check_type(argname="argument ebp_placement", value=ebp_placement, expected_type=type_hints["ebp_placement"])
            check_type(argname="argument ecm_pid", value=ecm_pid, expected_type=type_hints["ecm_pid"])
            check_type(argname="argument es_rate_in_pes", value=es_rate_in_pes, expected_type=type_hints["es_rate_in_pes"])
            check_type(argname="argument etv_platform_pid", value=etv_platform_pid, expected_type=type_hints["etv_platform_pid"])
            check_type(argname="argument etv_signal_pid", value=etv_signal_pid, expected_type=type_hints["etv_signal_pid"])
            check_type(argname="argument fragment_time", value=fragment_time, expected_type=type_hints["fragment_time"])
            check_type(argname="argument klv", value=klv, expected_type=type_hints["klv"])
            check_type(argname="argument klv_data_pids", value=klv_data_pids, expected_type=type_hints["klv_data_pids"])
            check_type(argname="argument nielsen_id3_behavior", value=nielsen_id3_behavior, expected_type=type_hints["nielsen_id3_behavior"])
            check_type(argname="argument null_packet_bitrate", value=null_packet_bitrate, expected_type=type_hints["null_packet_bitrate"])
            check_type(argname="argument pat_interval", value=pat_interval, expected_type=type_hints["pat_interval"])
            check_type(argname="argument pcr_control", value=pcr_control, expected_type=type_hints["pcr_control"])
            check_type(argname="argument pcr_period", value=pcr_period, expected_type=type_hints["pcr_period"])
            check_type(argname="argument pcr_pid", value=pcr_pid, expected_type=type_hints["pcr_pid"])
            check_type(argname="argument pmt_interval", value=pmt_interval, expected_type=type_hints["pmt_interval"])
            check_type(argname="argument pmt_pid", value=pmt_pid, expected_type=type_hints["pmt_pid"])
            check_type(argname="argument program_num", value=program_num, expected_type=type_hints["program_num"])
            check_type(argname="argument rate_mode", value=rate_mode, expected_type=type_hints["rate_mode"])
            check_type(argname="argument scte27_pids", value=scte27_pids, expected_type=type_hints["scte27_pids"])
            check_type(argname="argument scte35_control", value=scte35_control, expected_type=type_hints["scte35_control"])
            check_type(argname="argument scte35_pid", value=scte35_pid, expected_type=type_hints["scte35_pid"])
            check_type(argname="argument segmentation_markers", value=segmentation_markers, expected_type=type_hints["segmentation_markers"])
            check_type(argname="argument segmentation_style", value=segmentation_style, expected_type=type_hints["segmentation_style"])
            check_type(argname="argument segmentation_time", value=segmentation_time, expected_type=type_hints["segmentation_time"])
            check_type(argname="argument timed_metadata_behavior", value=timed_metadata_behavior, expected_type=type_hints["timed_metadata_behavior"])
            check_type(argname="argument timed_metadata_pid", value=timed_metadata_pid, expected_type=type_hints["timed_metadata_pid"])
            check_type(argname="argument transport_stream_id", value=transport_stream_id, expected_type=type_hints["transport_stream_id"])
            check_type(argname="argument video_pid", value=video_pid, expected_type=type_hints["video_pid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if absent_input_audio_behavior is not None:
            self._values["absent_input_audio_behavior"] = absent_input_audio_behavior
        if arib is not None:
            self._values["arib"] = arib
        if arib_captions_pid is not None:
            self._values["arib_captions_pid"] = arib_captions_pid
        if arib_captions_pid_control is not None:
            self._values["arib_captions_pid_control"] = arib_captions_pid_control
        if audio_buffer_model is not None:
            self._values["audio_buffer_model"] = audio_buffer_model
        if audio_frames_per_pes is not None:
            self._values["audio_frames_per_pes"] = audio_frames_per_pes
        if audio_pids is not None:
            self._values["audio_pids"] = audio_pids
        if audio_stream_type is not None:
            self._values["audio_stream_type"] = audio_stream_type
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if buffer_model is not None:
            self._values["buffer_model"] = buffer_model
        if cc_descriptor is not None:
            self._values["cc_descriptor"] = cc_descriptor
        if dvb_nit_settings is not None:
            self._values["dvb_nit_settings"] = dvb_nit_settings
        if dvb_sdt_settings is not None:
            self._values["dvb_sdt_settings"] = dvb_sdt_settings
        if dvb_sub_pids is not None:
            self._values["dvb_sub_pids"] = dvb_sub_pids
        if dvb_tdt_settings is not None:
            self._values["dvb_tdt_settings"] = dvb_tdt_settings
        if dvb_teletext_pid is not None:
            self._values["dvb_teletext_pid"] = dvb_teletext_pid
        if ebif is not None:
            self._values["ebif"] = ebif
        if ebp_audio_interval is not None:
            self._values["ebp_audio_interval"] = ebp_audio_interval
        if ebp_lookahead_ms is not None:
            self._values["ebp_lookahead_ms"] = ebp_lookahead_ms
        if ebp_placement is not None:
            self._values["ebp_placement"] = ebp_placement
        if ecm_pid is not None:
            self._values["ecm_pid"] = ecm_pid
        if es_rate_in_pes is not None:
            self._values["es_rate_in_pes"] = es_rate_in_pes
        if etv_platform_pid is not None:
            self._values["etv_platform_pid"] = etv_platform_pid
        if etv_signal_pid is not None:
            self._values["etv_signal_pid"] = etv_signal_pid
        if fragment_time is not None:
            self._values["fragment_time"] = fragment_time
        if klv is not None:
            self._values["klv"] = klv
        if klv_data_pids is not None:
            self._values["klv_data_pids"] = klv_data_pids
        if nielsen_id3_behavior is not None:
            self._values["nielsen_id3_behavior"] = nielsen_id3_behavior
        if null_packet_bitrate is not None:
            self._values["null_packet_bitrate"] = null_packet_bitrate
        if pat_interval is not None:
            self._values["pat_interval"] = pat_interval
        if pcr_control is not None:
            self._values["pcr_control"] = pcr_control
        if pcr_period is not None:
            self._values["pcr_period"] = pcr_period
        if pcr_pid is not None:
            self._values["pcr_pid"] = pcr_pid
        if pmt_interval is not None:
            self._values["pmt_interval"] = pmt_interval
        if pmt_pid is not None:
            self._values["pmt_pid"] = pmt_pid
        if program_num is not None:
            self._values["program_num"] = program_num
        if rate_mode is not None:
            self._values["rate_mode"] = rate_mode
        if scte27_pids is not None:
            self._values["scte27_pids"] = scte27_pids
        if scte35_control is not None:
            self._values["scte35_control"] = scte35_control
        if scte35_pid is not None:
            self._values["scte35_pid"] = scte35_pid
        if segmentation_markers is not None:
            self._values["segmentation_markers"] = segmentation_markers
        if segmentation_style is not None:
            self._values["segmentation_style"] = segmentation_style
        if segmentation_time is not None:
            self._values["segmentation_time"] = segmentation_time
        if timed_metadata_behavior is not None:
            self._values["timed_metadata_behavior"] = timed_metadata_behavior
        if timed_metadata_pid is not None:
            self._values["timed_metadata_pid"] = timed_metadata_pid
        if transport_stream_id is not None:
            self._values["transport_stream_id"] = transport_stream_id
        if video_pid is not None:
            self._values["video_pid"] = video_pid

    @builtins.property
    def absent_input_audio_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.'''
        result = self._values.get("absent_input_audio_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib MedialiveChannel#arib}.'''
        result = self._values.get("arib")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib_captions_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.'''
        result = self._values.get("arib_captions_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib_captions_pid_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.'''
        result = self._values.get("arib_captions_pid_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_buffer_model(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.'''
        result = self._values.get("audio_buffer_model")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_frames_per_pes(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.'''
        result = self._values.get("audio_frames_per_pes")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def audio_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.'''
        result = self._values.get("audio_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_stream_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.'''
        result = self._values.get("audio_stream_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buffer_model(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_model MedialiveChannel#buffer_model}.'''
        result = self._values.get("buffer_model")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cc_descriptor(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.'''
        result = self._values.get("cc_descriptor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dvb_nit_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings"]:
        '''dvb_nit_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        '''
        result = self._values.get("dvb_nit_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings"], result)

    @builtins.property
    def dvb_sdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings"]:
        '''dvb_sdt_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        '''
        result = self._values.get("dvb_sdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings"], result)

    @builtins.property
    def dvb_sub_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.'''
        result = self._values.get("dvb_sub_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dvb_tdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings"]:
        '''dvb_tdt_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        '''
        result = self._values.get("dvb_tdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings"], result)

    @builtins.property
    def dvb_teletext_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.'''
        result = self._values.get("dvb_teletext_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebif(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebif MedialiveChannel#ebif}.'''
        result = self._values.get("ebif")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebp_audio_interval(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.'''
        result = self._values.get("ebp_audio_interval")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebp_lookahead_ms(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.'''
        result = self._values.get("ebp_lookahead_ms")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ebp_placement(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.'''
        result = self._values.get("ebp_placement")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ecm_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.'''
        result = self._values.get("ecm_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def es_rate_in_pes(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.'''
        result = self._values.get("es_rate_in_pes")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def etv_platform_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.'''
        result = self._values.get("etv_platform_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def etv_signal_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.'''
        result = self._values.get("etv_signal_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def fragment_time(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_time MedialiveChannel#fragment_time}.'''
        result = self._values.get("fragment_time")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def klv(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv MedialiveChannel#klv}.'''
        result = self._values.get("klv")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def klv_data_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.'''
        result = self._values.get("klv_data_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_id3_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.'''
        result = self._values.get("nielsen_id3_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def null_packet_bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.'''
        result = self._values.get("null_packet_bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pat_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.'''
        result = self._values.get("pat_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.'''
        result = self._values.get("pcr_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pcr_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.'''
        result = self._values.get("pcr_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.'''
        result = self._values.get("pcr_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pmt_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.'''
        result = self._values.get("pmt_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pmt_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.'''
        result = self._values.get("pmt_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_num(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.'''
        result = self._values.get("program_num")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def rate_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_mode MedialiveChannel#rate_mode}.'''
        result = self._values.get("rate_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte27_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.'''
        result = self._values.get("scte27_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_control MedialiveChannel#scte35_control}.'''
        result = self._values.get("scte35_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.'''
        result = self._values.get("scte35_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_markers(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.'''
        result = self._values.get("segmentation_markers")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_style(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.'''
        result = self._values.get("segmentation_style")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_time(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.'''
        result = self._values.get("segmentation_time")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def timed_metadata_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.'''
        result = self._values.get("timed_metadata_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.'''
        result = self._values.get("timed_metadata_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def transport_stream_id(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.'''
        result = self._values.get("transport_stream_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def video_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.'''
        result = self._values.get("video_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings",
    jsii_struct_bases=[],
    name_mapping={
        "network_id": "networkId",
        "network_name": "networkName",
        "rep_interval": "repInterval",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings:
    def __init__(
        self,
        *,
        network_id: jsii.Number,
        network_name: builtins.str,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param network_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_id MedialiveChannel#network_id}.
        :param network_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_name MedialiveChannel#network_name}.
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06d7c8fa5a086eef9ce3dd521d41d1426f8d850217de339262582152fd84d174)
            check_type(argname="argument network_id", value=network_id, expected_type=type_hints["network_id"])
            check_type(argname="argument network_name", value=network_name, expected_type=type_hints["network_name"])
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "network_id": network_id,
            "network_name": network_name,
        }
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval

    @builtins.property
    def network_id(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_id MedialiveChannel#network_id}.'''
        result = self._values.get("network_id")
        assert result is not None, "Required property 'network_id' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def network_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_name MedialiveChannel#network_name}.'''
        result = self._values.get("network_name")
        assert result is not None, "Required property 'network_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48ade4f7cd3d2bbcc23c015ebf1a3e29c4339dc5d0b84b4169ee4945f3cc907d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @builtins.property
    @jsii.member(jsii_name="networkIdInput")
    def network_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "networkIdInput"))

    @builtins.property
    @jsii.member(jsii_name="networkNameInput")
    def network_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "networkNameInput"))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="networkId")
    def network_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "networkId"))

    @network_id.setter
    def network_id(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f686fd0f445a5ab7f31bec52826318ac0209aca3a977f376e0ea4d0120c515a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "networkId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="networkName")
    def network_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "networkName"))

    @network_name.setter
    def network_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14b267a48a5028c4c09ffc0de2170f172e5d11a292f5de51400a8050d27ac3eb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "networkName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63165dea76368127c6addaace41b4844c08c7f64fc98c039d2c723a1b2f73ab0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__903ef858b7a67285d66187fa75089a3d4171b976a6c90edfeaaf21427a06e867)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings",
    jsii_struct_bases=[],
    name_mapping={
        "output_sdt": "outputSdt",
        "rep_interval": "repInterval",
        "service_name": "serviceName",
        "service_provider_name": "serviceProviderName",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings:
    def __init__(
        self,
        *,
        output_sdt: typing.Optional[builtins.str] = None,
        rep_interval: typing.Optional[jsii.Number] = None,
        service_name: typing.Optional[builtins.str] = None,
        service_provider_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_sdt: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_sdt MedialiveChannel#output_sdt}.
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        :param service_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_name MedialiveChannel#service_name}.
        :param service_provider_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f34ed21b85c9c578bf01be79307802c610bb47c652ba6843ab0cdd34cb1ee29f)
            check_type(argname="argument output_sdt", value=output_sdt, expected_type=type_hints["output_sdt"])
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
            check_type(argname="argument service_name", value=service_name, expected_type=type_hints["service_name"])
            check_type(argname="argument service_provider_name", value=service_provider_name, expected_type=type_hints["service_provider_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if output_sdt is not None:
            self._values["output_sdt"] = output_sdt
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval
        if service_name is not None:
            self._values["service_name"] = service_name
        if service_provider_name is not None:
            self._values["service_provider_name"] = service_provider_name

    @builtins.property
    def output_sdt(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_sdt MedialiveChannel#output_sdt}.'''
        result = self._values.get("output_sdt")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def service_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_name MedialiveChannel#service_name}.'''
        result = self._values.get("service_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def service_provider_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.'''
        result = self._values.get("service_provider_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8441c2e01db2a70d1264c054b357d69998db7ffe301f6d9d112d85721707f3c3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetOutputSdt")
    def reset_output_sdt(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputSdt", []))

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @jsii.member(jsii_name="resetServiceName")
    def reset_service_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceName", []))

    @jsii.member(jsii_name="resetServiceProviderName")
    def reset_service_provider_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceProviderName", []))

    @builtins.property
    @jsii.member(jsii_name="outputSdtInput")
    def output_sdt_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputSdtInput"))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceNameInput")
    def service_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serviceNameInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceProviderNameInput")
    def service_provider_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serviceProviderNameInput"))

    @builtins.property
    @jsii.member(jsii_name="outputSdt")
    def output_sdt(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputSdt"))

    @output_sdt.setter
    def output_sdt(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b194757f47e22370e2133c8bff961bdb17ff1341d257e9c20c0157300914cb7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputSdt", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48f734b0d623431a3db3e91e21b938f204f3e5f3014db49f1fbc2224ae1462d1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="serviceName")
    def service_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serviceName"))

    @service_name.setter
    def service_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__684ebf22ffcc8d0a562ab060a81e6d675789fee5d8b5ff453a7041fc2085d814)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="serviceProviderName")
    def service_provider_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serviceProviderName"))

    @service_provider_name.setter
    def service_provider_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1cad02ed5cc5c89c31e4c7400caa964ef2b50f9d408fa02485424bdca33b0fb9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceProviderName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c708e76fdae55d8850bb79c4a344e2ad26e3d3932e6f28619603cc5ab77cea7c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings",
    jsii_struct_bases=[],
    name_mapping={"rep_interval": "repInterval"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings:
    def __init__(self, *, rep_interval: typing.Optional[jsii.Number] = None) -> None:
        '''
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bb5897926594730c2938182a58f7b888205341695c2c650a20507fb707d39c7)
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c033eb49abab0c986588c4f9dae5c9b03d23a5431798a515ab1506c12df27d2e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7fb30ef912893fd5f11bec60d3039ac70e77232bf181de8c4c5672e25213f84)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14283c53b0bf2477392b52d677fa2786f03a739e8b18f44fb6d486f83260efe5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__054b43b80d9c2b8a7a634d4356087b384c98bf855399d9c2ca7b495ecbf838f1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDvbNitSettings")
    def put_dvb_nit_settings(
        self,
        *,
        network_id: jsii.Number,
        network_name: builtins.str,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param network_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_id MedialiveChannel#network_id}.
        :param network_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_name MedialiveChannel#network_name}.
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(
            network_id=network_id, network_name=network_name, rep_interval=rep_interval
        )

        return typing.cast(None, jsii.invoke(self, "putDvbNitSettings", [value]))

    @jsii.member(jsii_name="putDvbSdtSettings")
    def put_dvb_sdt_settings(
        self,
        *,
        output_sdt: typing.Optional[builtins.str] = None,
        rep_interval: typing.Optional[jsii.Number] = None,
        service_name: typing.Optional[builtins.str] = None,
        service_provider_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_sdt: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_sdt MedialiveChannel#output_sdt}.
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        :param service_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_name MedialiveChannel#service_name}.
        :param service_provider_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(
            output_sdt=output_sdt,
            rep_interval=rep_interval,
            service_name=service_name,
            service_provider_name=service_provider_name,
        )

        return typing.cast(None, jsii.invoke(self, "putDvbSdtSettings", [value]))

    @jsii.member(jsii_name="putDvbTdtSettings")
    def put_dvb_tdt_settings(
        self,
        *,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(
            rep_interval=rep_interval
        )

        return typing.cast(None, jsii.invoke(self, "putDvbTdtSettings", [value]))

    @jsii.member(jsii_name="resetAbsentInputAudioBehavior")
    def reset_absent_input_audio_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAbsentInputAudioBehavior", []))

    @jsii.member(jsii_name="resetArib")
    def reset_arib(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArib", []))

    @jsii.member(jsii_name="resetAribCaptionsPid")
    def reset_arib_captions_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribCaptionsPid", []))

    @jsii.member(jsii_name="resetAribCaptionsPidControl")
    def reset_arib_captions_pid_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribCaptionsPidControl", []))

    @jsii.member(jsii_name="resetAudioBufferModel")
    def reset_audio_buffer_model(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioBufferModel", []))

    @jsii.member(jsii_name="resetAudioFramesPerPes")
    def reset_audio_frames_per_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioFramesPerPes", []))

    @jsii.member(jsii_name="resetAudioPids")
    def reset_audio_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioPids", []))

    @jsii.member(jsii_name="resetAudioStreamType")
    def reset_audio_stream_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioStreamType", []))

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBufferModel")
    def reset_buffer_model(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufferModel", []))

    @jsii.member(jsii_name="resetCcDescriptor")
    def reset_cc_descriptor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCcDescriptor", []))

    @jsii.member(jsii_name="resetDvbNitSettings")
    def reset_dvb_nit_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbNitSettings", []))

    @jsii.member(jsii_name="resetDvbSdtSettings")
    def reset_dvb_sdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSdtSettings", []))

    @jsii.member(jsii_name="resetDvbSubPids")
    def reset_dvb_sub_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSubPids", []))

    @jsii.member(jsii_name="resetDvbTdtSettings")
    def reset_dvb_tdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTdtSettings", []))

    @jsii.member(jsii_name="resetDvbTeletextPid")
    def reset_dvb_teletext_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTeletextPid", []))

    @jsii.member(jsii_name="resetEbif")
    def reset_ebif(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbif", []))

    @jsii.member(jsii_name="resetEbpAudioInterval")
    def reset_ebp_audio_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpAudioInterval", []))

    @jsii.member(jsii_name="resetEbpLookaheadMs")
    def reset_ebp_lookahead_ms(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpLookaheadMs", []))

    @jsii.member(jsii_name="resetEbpPlacement")
    def reset_ebp_placement(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpPlacement", []))

    @jsii.member(jsii_name="resetEcmPid")
    def reset_ecm_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcmPid", []))

    @jsii.member(jsii_name="resetEsRateInPes")
    def reset_es_rate_in_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEsRateInPes", []))

    @jsii.member(jsii_name="resetEtvPlatformPid")
    def reset_etv_platform_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEtvPlatformPid", []))

    @jsii.member(jsii_name="resetEtvSignalPid")
    def reset_etv_signal_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEtvSignalPid", []))

    @jsii.member(jsii_name="resetFragmentTime")
    def reset_fragment_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFragmentTime", []))

    @jsii.member(jsii_name="resetKlv")
    def reset_klv(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKlv", []))

    @jsii.member(jsii_name="resetKlvDataPids")
    def reset_klv_data_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKlvDataPids", []))

    @jsii.member(jsii_name="resetNielsenId3Behavior")
    def reset_nielsen_id3_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenId3Behavior", []))

    @jsii.member(jsii_name="resetNullPacketBitrate")
    def reset_null_packet_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullPacketBitrate", []))

    @jsii.member(jsii_name="resetPatInterval")
    def reset_pat_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPatInterval", []))

    @jsii.member(jsii_name="resetPcrControl")
    def reset_pcr_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrControl", []))

    @jsii.member(jsii_name="resetPcrPeriod")
    def reset_pcr_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPeriod", []))

    @jsii.member(jsii_name="resetPcrPid")
    def reset_pcr_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPid", []))

    @jsii.member(jsii_name="resetPmtInterval")
    def reset_pmt_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtInterval", []))

    @jsii.member(jsii_name="resetPmtPid")
    def reset_pmt_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtPid", []))

    @jsii.member(jsii_name="resetProgramNum")
    def reset_program_num(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramNum", []))

    @jsii.member(jsii_name="resetRateMode")
    def reset_rate_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRateMode", []))

    @jsii.member(jsii_name="resetScte27Pids")
    def reset_scte27_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte27Pids", []))

    @jsii.member(jsii_name="resetScte35Control")
    def reset_scte35_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Control", []))

    @jsii.member(jsii_name="resetScte35Pid")
    def reset_scte35_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Pid", []))

    @jsii.member(jsii_name="resetSegmentationMarkers")
    def reset_segmentation_markers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationMarkers", []))

    @jsii.member(jsii_name="resetSegmentationStyle")
    def reset_segmentation_style(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationStyle", []))

    @jsii.member(jsii_name="resetSegmentationTime")
    def reset_segmentation_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationTime", []))

    @jsii.member(jsii_name="resetTimedMetadataBehavior")
    def reset_timed_metadata_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataBehavior", []))

    @jsii.member(jsii_name="resetTimedMetadataPid")
    def reset_timed_metadata_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataPid", []))

    @jsii.member(jsii_name="resetTransportStreamId")
    def reset_transport_stream_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTransportStreamId", []))

    @jsii.member(jsii_name="resetVideoPid")
    def reset_video_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoPid", []))

    @builtins.property
    @jsii.member(jsii_name="dvbNitSettings")
    def dvb_nit_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference, jsii.get(self, "dvbNitSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbSdtSettings")
    def dvb_sdt_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference, jsii.get(self, "dvbSdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettings")
    def dvb_tdt_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference, jsii.get(self, "dvbTdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="absentInputAudioBehaviorInput")
    def absent_input_audio_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "absentInputAudioBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidControlInput")
    def arib_captions_pid_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribCaptionsPidControlInput"))

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidInput")
    def arib_captions_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribCaptionsPidInput"))

    @builtins.property
    @jsii.member(jsii_name="aribInput")
    def arib_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribInput"))

    @builtins.property
    @jsii.member(jsii_name="audioBufferModelInput")
    def audio_buffer_model_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioBufferModelInput"))

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPesInput")
    def audio_frames_per_pes_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "audioFramesPerPesInput"))

    @builtins.property
    @jsii.member(jsii_name="audioPidsInput")
    def audio_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="audioStreamTypeInput")
    def audio_stream_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioStreamTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bufferModelInput")
    def buffer_model_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bufferModelInput"))

    @builtins.property
    @jsii.member(jsii_name="ccDescriptorInput")
    def cc_descriptor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ccDescriptorInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbNitSettingsInput")
    def dvb_nit_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings], jsii.get(self, "dvbNitSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSdtSettingsInput")
    def dvb_sdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings], jsii.get(self, "dvbSdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSubPidsInput")
    def dvb_sub_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dvbSubPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettingsInput")
    def dvb_tdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings], jsii.get(self, "dvbTdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTeletextPidInput")
    def dvb_teletext_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dvbTeletextPidInput"))

    @builtins.property
    @jsii.member(jsii_name="ebifInput")
    def ebif_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebifInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpAudioIntervalInput")
    def ebp_audio_interval_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebpAudioIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpLookaheadMsInput")
    def ebp_lookahead_ms_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "ebpLookaheadMsInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpPlacementInput")
    def ebp_placement_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebpPlacementInput"))

    @builtins.property
    @jsii.member(jsii_name="ecmPidInput")
    def ecm_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ecmPidInput"))

    @builtins.property
    @jsii.member(jsii_name="esRateInPesInput")
    def es_rate_in_pes_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "esRateInPesInput"))

    @builtins.property
    @jsii.member(jsii_name="etvPlatformPidInput")
    def etv_platform_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "etvPlatformPidInput"))

    @builtins.property
    @jsii.member(jsii_name="etvSignalPidInput")
    def etv_signal_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "etvSignalPidInput"))

    @builtins.property
    @jsii.member(jsii_name="fragmentTimeInput")
    def fragment_time_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fragmentTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="klvDataPidsInput")
    def klv_data_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "klvDataPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="klvInput")
    def klv_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "klvInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenId3BehaviorInput")
    def nielsen_id3_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenId3BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="nullPacketBitrateInput")
    def null_packet_bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "nullPacketBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="patIntervalInput")
    def pat_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "patIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrControlInput")
    def pcr_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrControlInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPeriodInput")
    def pcr_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pcrPeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPidInput")
    def pcr_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrPidInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtIntervalInput")
    def pmt_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pmtIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtPidInput")
    def pmt_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pmtPidInput"))

    @builtins.property
    @jsii.member(jsii_name="programNumInput")
    def program_num_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "programNumInput"))

    @builtins.property
    @jsii.member(jsii_name="rateModeInput")
    def rate_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rateModeInput"))

    @builtins.property
    @jsii.member(jsii_name="scte27PidsInput")
    def scte27_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte27PidsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35ControlInput")
    def scte35_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35ControlInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35PidInput")
    def scte35_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35PidInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationMarkersInput")
    def segmentation_markers_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationMarkersInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationStyleInput")
    def segmentation_style_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationStyleInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationTimeInput")
    def segmentation_time_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "segmentationTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehaviorInput")
    def timed_metadata_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPidInput")
    def timed_metadata_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataPidInput"))

    @builtins.property
    @jsii.member(jsii_name="transportStreamIdInput")
    def transport_stream_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "transportStreamIdInput"))

    @builtins.property
    @jsii.member(jsii_name="videoPidInput")
    def video_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "videoPidInput"))

    @builtins.property
    @jsii.member(jsii_name="absentInputAudioBehavior")
    def absent_input_audio_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "absentInputAudioBehavior"))

    @absent_input_audio_behavior.setter
    def absent_input_audio_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aee26335b0a4786104646de14ee82151e9d707047844348feedf67c1b09b2452)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "absentInputAudioBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="arib")
    def arib(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "arib"))

    @arib.setter
    def arib(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__256b5e081d62c5ad92fff9c0f7d5228a9653f33f9f546669d3665d4e451e0c5c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "arib", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPid")
    def arib_captions_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aribCaptionsPid"))

    @arib_captions_pid.setter
    def arib_captions_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__915bf0e963d437a66888b67631b5cde246ae3825a1d49c2c56921dfde5c1144d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "aribCaptionsPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidControl")
    def arib_captions_pid_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aribCaptionsPidControl"))

    @arib_captions_pid_control.setter
    def arib_captions_pid_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9f0ef805d15adba3914048b82623c4654cc7a77b891a0eb6bf7ace644689c98)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "aribCaptionsPidControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioBufferModel")
    def audio_buffer_model(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioBufferModel"))

    @audio_buffer_model.setter
    def audio_buffer_model(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ad938b49b31ba4999fadf92ad6ad2b5174a89443e73662caa3ccc3c8a92c9d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioBufferModel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPes")
    def audio_frames_per_pes(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "audioFramesPerPes"))

    @audio_frames_per_pes.setter
    def audio_frames_per_pes(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fece82ebb8e96df9a5e68c0e99b1caabcd568a424e985254a4157f54ed49daa8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioFramesPerPes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioPids")
    def audio_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioPids"))

    @audio_pids.setter
    def audio_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9cf223850b2a4992518b4bfff8eeeee5a681d21b6fa0c506daad029cf2716f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioPids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioStreamType")
    def audio_stream_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioStreamType"))

    @audio_stream_type.setter
    def audio_stream_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e1e80433316c4f850ce27280e1ef7f6d3be78d773ddbe754f5db472d2a38a7f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioStreamType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__232ef8bc9c14481bea2c72cf195f65397951e70b4fb56278866e9684bd9090aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bufferModel")
    def buffer_model(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bufferModel"))

    @buffer_model.setter
    def buffer_model(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4cdb7bfbf30d4202422eec02210ae530ccad61e5fe2eba4bcf0e09e4d6d64412)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufferModel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ccDescriptor")
    def cc_descriptor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ccDescriptor"))

    @cc_descriptor.setter
    def cc_descriptor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bed41206f50fd848721deb6c1f6b06392a6c3f37c41b0a474fc2dfda33138db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ccDescriptor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="dvbSubPids")
    def dvb_sub_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dvbSubPids"))

    @dvb_sub_pids.setter
    def dvb_sub_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b87e5e41d3bf89cb6ceece047c0c7c015808b7956ab191f8b6fe7d2bfb5d49ce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dvbSubPids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="dvbTeletextPid")
    def dvb_teletext_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dvbTeletextPid"))

    @dvb_teletext_pid.setter
    def dvb_teletext_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__590fcc4cdb1edd2c3e24d6cb97f93e8cb8228ff2fa31ed445ba4637af224d301)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dvbTeletextPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ebif")
    def ebif(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebif"))

    @ebif.setter
    def ebif(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c74cbf04eb1e6e3d0d1885b6fc504a30d65c227e98d1741c1b4c9113972437f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebif", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ebpAudioInterval")
    def ebp_audio_interval(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebpAudioInterval"))

    @ebp_audio_interval.setter
    def ebp_audio_interval(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__573634107c7330bae7d1e51e0a2eabead7342fb3dc5e763e3165847b1b170cfc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpAudioInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ebpLookaheadMs")
    def ebp_lookahead_ms(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "ebpLookaheadMs"))

    @ebp_lookahead_ms.setter
    def ebp_lookahead_ms(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__751ea88af1b2ee2869506a895998b045bf5f55c3d55f52d512e1ad54538780f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpLookaheadMs", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ebpPlacement")
    def ebp_placement(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebpPlacement"))

    @ebp_placement.setter
    def ebp_placement(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f72e607f0da83a74afe7fdbe2029ea65687659465cdeebdc64ee177cd69b60f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpPlacement", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ecmPid")
    def ecm_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ecmPid"))

    @ecm_pid.setter
    def ecm_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__522a07da9533991879a5c8fbfbf6b3b6c216ec031ec4f3c0db88643bbc72da40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ecmPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="esRateInPes")
    def es_rate_in_pes(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "esRateInPes"))

    @es_rate_in_pes.setter
    def es_rate_in_pes(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f09f790b3cbe7f9d519e9fc7abc334efffeaec90bcb129fa3b0245048557bdc2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "esRateInPes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="etvPlatformPid")
    def etv_platform_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "etvPlatformPid"))

    @etv_platform_pid.setter
    def etv_platform_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__969df866bb8fc994b39e419cc75c85fd5538af6a2164628478a2fcafed822dde)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "etvPlatformPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="etvSignalPid")
    def etv_signal_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "etvSignalPid"))

    @etv_signal_pid.setter
    def etv_signal_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__73d76fb0eed216115ae8249dede918ad72baf31f3eadda79c172ec22371bc656)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "etvSignalPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fragmentTime")
    def fragment_time(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fragmentTime"))

    @fragment_time.setter
    def fragment_time(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c49e238bee77ee6768d50d7a7d6b2638397a357a799dfab5c070a4e1f048ae69)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fragmentTime", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="klv")
    def klv(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "klv"))

    @klv.setter
    def klv(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4aa2884d2a78ca80d40aef2927ac0da3ab757921c6d914485829def2d5b33cef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "klv", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="klvDataPids")
    def klv_data_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "klvDataPids"))

    @klv_data_pids.setter
    def klv_data_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e6b61b1441ccc4e9c5190f173c65a175132e843cce0ae6afa3fb272ebea5e847)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "klvDataPids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nielsenId3Behavior")
    def nielsen_id3_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenId3Behavior"))

    @nielsen_id3_behavior.setter
    def nielsen_id3_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1847960708b77f432cc6ecd9f8fcf75636d656b08636cb99cfdd4879feadc193)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenId3Behavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nullPacketBitrate")
    def null_packet_bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "nullPacketBitrate"))

    @null_packet_bitrate.setter
    def null_packet_bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3287f87c74f61247e56872dcd9002aff65d92ff0a88f8779e073303aac9e4c11)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullPacketBitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="patInterval")
    def pat_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "patInterval"))

    @pat_interval.setter
    def pat_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd2e5b25fb94bb89456c1c4ea153b8c35165abe8b9955e80add11d4dfcdfe693)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "patInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrControl")
    def pcr_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrControl"))

    @pcr_control.setter
    def pcr_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d738284fb311c5f84485accce660b81f7ccc5086febcbca11461530a3ee7147d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrPeriod")
    def pcr_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pcrPeriod"))

    @pcr_period.setter
    def pcr_period(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa27efcef36a7ad9db7be7114bf8930c0fde262b3005270d6220dd0bec4a6103)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPeriod", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrPid")
    def pcr_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrPid"))

    @pcr_pid.setter
    def pcr_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db7f0388d8e663d3336874b017b0a9193b3766f05fe2e746b9cbad43fd25242b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pmtInterval")
    def pmt_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pmtInterval"))

    @pmt_interval.setter
    def pmt_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bdb11bd1f5ef3180a7ae893c93de140a6bde85c553bf6a87e75af26f410869ac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pmtPid")
    def pmt_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pmtPid"))

    @pmt_pid.setter
    def pmt_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59f6a0d756f7e8022ae0b6a7a28f100eeb4f5ecfb43b21f4a969cc249f25a34c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="programNum")
    def program_num(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "programNum"))

    @program_num.setter
    def program_num(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__94574187fb4d797659bf320aeec78c289b0c455582da5d86481c70673eeb254f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programNum", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="rateMode")
    def rate_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rateMode"))

    @rate_mode.setter
    def rate_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e962cd80a75aa8ee69fe1b61ef1c19e9906e54affb136c8815f3bee8ab2bb482)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rateMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte27Pids")
    def scte27_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte27Pids"))

    @scte27_pids.setter
    def scte27_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__152480e390b782758b4270f8af92957126b594f58c5ee2ed26897768fb18a7c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte27Pids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte35Control")
    def scte35_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Control"))

    @scte35_control.setter
    def scte35_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5e6382de26cb25e02f97134c9720d98cd512ec5af8fa0c3237669990d00f440c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Control", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte35Pid")
    def scte35_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Pid"))

    @scte35_pid.setter
    def scte35_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__187210b056b2fed622b490cfcf29d8e1d3642c44daf2c3d71a387a093c81428c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Pid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentationMarkers")
    def segmentation_markers(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationMarkers"))

    @segmentation_markers.setter
    def segmentation_markers(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__40e33913c0595a444d19ad18d34a933b1b1734a8f04fdf91d9d8c9cb8468867c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationMarkers", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentationStyle")
    def segmentation_style(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationStyle"))

    @segmentation_style.setter
    def segmentation_style(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d3c99fc2c3441fd12233a913212b3fe56dc561b44d11e08a4e9e07c94a84873)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationStyle", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentationTime")
    def segmentation_time(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "segmentationTime"))

    @segmentation_time.setter
    def segmentation_time(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fbef52da38bf9973099a497825d59011962b9b46fb58717a38064892b72a14ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationTime", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehavior")
    def timed_metadata_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataBehavior"))

    @timed_metadata_behavior.setter
    def timed_metadata_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4afa40c10894e80d8d4c970858c4936bcaccba99ae9d6d30dd79ab9da2c92a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPid")
    def timed_metadata_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataPid"))

    @timed_metadata_pid.setter
    def timed_metadata_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd30c91c0e4d126e6c2139ef5c2ac0cd85bdba6a7cbf9923ff3fa1dad7ff76fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="transportStreamId")
    def transport_stream_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "transportStreamId"))

    @transport_stream_id.setter
    def transport_stream_id(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9538d9b594c7e2bc3145733164799cf70b8b5a497b68cf97c79e5a8328c71582)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "transportStreamId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="videoPid")
    def video_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "videoPid"))

    @video_pid.setter
    def video_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec0d5450a3ec2ef92e04f714735771de04ca026e4b7b498d67f11fdcf1c00c4c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ba8eae9b2633194df41625858f2c38d0a57d2f74fcc33572be74e387d1e1656)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7bd1e1c2d6d1636690ca95e5b68d63997bb6aeeff36159e5d45db0761dacf991)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putM2TsSettings")
    def put_m2_ts_settings(
        self,
        *,
        absent_input_audio_behavior: typing.Optional[builtins.str] = None,
        arib: typing.Optional[builtins.str] = None,
        arib_captions_pid: typing.Optional[builtins.str] = None,
        arib_captions_pid_control: typing.Optional[builtins.str] = None,
        audio_buffer_model: typing.Optional[builtins.str] = None,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        audio_stream_type: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buffer_model: typing.Optional[builtins.str] = None,
        cc_descriptor: typing.Optional[builtins.str] = None,
        dvb_nit_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sub_pids: typing.Optional[builtins.str] = None,
        dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_teletext_pid: typing.Optional[builtins.str] = None,
        ebif: typing.Optional[builtins.str] = None,
        ebp_audio_interval: typing.Optional[builtins.str] = None,
        ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
        ebp_placement: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        es_rate_in_pes: typing.Optional[builtins.str] = None,
        etv_platform_pid: typing.Optional[builtins.str] = None,
        etv_signal_pid: typing.Optional[builtins.str] = None,
        fragment_time: typing.Optional[jsii.Number] = None,
        klv: typing.Optional[builtins.str] = None,
        klv_data_pids: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        null_packet_bitrate: typing.Optional[jsii.Number] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        rate_mode: typing.Optional[builtins.str] = None,
        scte27_pids: typing.Optional[builtins.str] = None,
        scte35_control: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        segmentation_markers: typing.Optional[builtins.str] = None,
        segmentation_style: typing.Optional[builtins.str] = None,
        segmentation_time: typing.Optional[jsii.Number] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param absent_input_audio_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.
        :param arib: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib MedialiveChannel#arib}.
        :param arib_captions_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.
        :param arib_captions_pid_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.
        :param audio_buffer_model: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param audio_stream_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buffer_model: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_model MedialiveChannel#buffer_model}.
        :param cc_descriptor: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.
        :param dvb_nit_settings: dvb_nit_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        :param dvb_sdt_settings: dvb_sdt_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        :param dvb_sub_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param dvb_teletext_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.
        :param ebif: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebif MedialiveChannel#ebif}.
        :param ebp_audio_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.
        :param ebp_lookahead_ms: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.
        :param ebp_placement: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param es_rate_in_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.
        :param etv_platform_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.
        :param etv_signal_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.
        :param fragment_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_time MedialiveChannel#fragment_time}.
        :param klv: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv MedialiveChannel#klv}.
        :param klv_data_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param null_packet_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.
        :param pat_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.
        :param rate_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_mode MedialiveChannel#rate_mode}.
        :param scte27_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.
        :param scte35_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_control MedialiveChannel#scte35_control}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param segmentation_markers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.
        :param segmentation_style: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.
        :param segmentation_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings(
            absent_input_audio_behavior=absent_input_audio_behavior,
            arib=arib,
            arib_captions_pid=arib_captions_pid,
            arib_captions_pid_control=arib_captions_pid_control,
            audio_buffer_model=audio_buffer_model,
            audio_frames_per_pes=audio_frames_per_pes,
            audio_pids=audio_pids,
            audio_stream_type=audio_stream_type,
            bitrate=bitrate,
            buffer_model=buffer_model,
            cc_descriptor=cc_descriptor,
            dvb_nit_settings=dvb_nit_settings,
            dvb_sdt_settings=dvb_sdt_settings,
            dvb_sub_pids=dvb_sub_pids,
            dvb_tdt_settings=dvb_tdt_settings,
            dvb_teletext_pid=dvb_teletext_pid,
            ebif=ebif,
            ebp_audio_interval=ebp_audio_interval,
            ebp_lookahead_ms=ebp_lookahead_ms,
            ebp_placement=ebp_placement,
            ecm_pid=ecm_pid,
            es_rate_in_pes=es_rate_in_pes,
            etv_platform_pid=etv_platform_pid,
            etv_signal_pid=etv_signal_pid,
            fragment_time=fragment_time,
            klv=klv,
            klv_data_pids=klv_data_pids,
            nielsen_id3_behavior=nielsen_id3_behavior,
            null_packet_bitrate=null_packet_bitrate,
            pat_interval=pat_interval,
            pcr_control=pcr_control,
            pcr_period=pcr_period,
            pcr_pid=pcr_pid,
            pmt_interval=pmt_interval,
            pmt_pid=pmt_pid,
            program_num=program_num,
            rate_mode=rate_mode,
            scte27_pids=scte27_pids,
            scte35_control=scte35_control,
            scte35_pid=scte35_pid,
            segmentation_markers=segmentation_markers,
            segmentation_style=segmentation_style,
            segmentation_time=segmentation_time,
            timed_metadata_behavior=timed_metadata_behavior,
            timed_metadata_pid=timed_metadata_pid,
            transport_stream_id=transport_stream_id,
            video_pid=video_pid,
        )

        return typing.cast(None, jsii.invoke(self, "putM2TsSettings", [value]))

    @jsii.member(jsii_name="putRawSettings")
    def put_raw_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings()

        return typing.cast(None, jsii.invoke(self, "putRawSettings", [value]))

    @jsii.member(jsii_name="resetM2TsSettings")
    def reset_m2_ts_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetM2TsSettings", []))

    @jsii.member(jsii_name="resetRawSettings")
    def reset_raw_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRawSettings", []))

    @builtins.property
    @jsii.member(jsii_name="m2TsSettings")
    def m2_ts_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference, jsii.get(self, "m2TsSettings"))

    @builtins.property
    @jsii.member(jsii_name="rawSettings")
    def raw_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference", jsii.get(self, "rawSettings"))

    @builtins.property
    @jsii.member(jsii_name="m2TsSettingsInput")
    def m2_ts_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings], jsii.get(self, "m2TsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rawSettingsInput")
    def raw_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings"], jsii.get(self, "rawSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a2cfbe973de987d8e080f527b1863464505b6ce14e94674c61705b7d6eb3dda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9cf58f955fae9771db1ba7b782c7f2d7efc78782a615c4e92260014d6a3dc907)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb7b866ccdd0ad4d22d97ca7cf3ce5f5ab01e192a917320e5e2a28c5b7016214)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c48617dd0bb46746891b96ef8c16150f1c4acedb101654c1f065ca5e878f3a7d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putContainerSettings")
    def put_container_settings(
        self,
        *,
        m2_ts_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        raw_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param m2_ts_settings: m2ts_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        :param raw_settings: raw_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#raw_settings MedialiveChannel#raw_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings(
            m2_ts_settings=m2_ts_settings, raw_settings=raw_settings
        )

        return typing.cast(None, jsii.invoke(self, "putContainerSettings", [value]))

    @jsii.member(jsii_name="resetContainerSettings")
    def reset_container_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetContainerSettings", []))

    @jsii.member(jsii_name="resetExtension")
    def reset_extension(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExtension", []))

    @jsii.member(jsii_name="resetNameModifier")
    def reset_name_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameModifier", []))

    @builtins.property
    @jsii.member(jsii_name="containerSettings")
    def container_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference, jsii.get(self, "containerSettings"))

    @builtins.property
    @jsii.member(jsii_name="containerSettingsInput")
    def container_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings], jsii.get(self, "containerSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="extensionInput")
    def extension_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "extensionInput"))

    @builtins.property
    @jsii.member(jsii_name="nameModifierInput")
    def name_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="extension")
    def extension(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "extension"))

    @extension.setter
    def extension(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8c8aaeb56afd08506dbe8b15bf94316a900da593ff99af5fe7d25d0787deef8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "extension", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nameModifier")
    def name_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameModifier"))

    @name_modifier.setter
    def name_modifier(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f5b11ce74af20418fb335982fdd94417b2a7f24943d10e1fbee1ebe2d1588a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameModifier", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8374c539cecb38a6530fc78745988cf4e78b29e377ec04662dc759c256455b25)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings",
    jsii_struct_bases=[],
    name_mapping={"name_modifier": "nameModifier"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings:
    def __init__(self, *, name_modifier: typing.Optional[builtins.str] = None) -> None:
        '''
        :param name_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52bd4ad12c50e9c67a116b5a048a515cb839f9287d0e3277c7689cec0f4a0a42)
            check_type(argname="argument name_modifier", value=name_modifier, expected_type=type_hints["name_modifier"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if name_modifier is not None:
            self._values["name_modifier"] = name_modifier

    @builtins.property
    def name_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.'''
        result = self._values.get("name_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3ae4f9aebe866eef279d31c74b9761a953c45bdea21245b4591ed574b9436f8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetNameModifier")
    def reset_name_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameModifier", []))

    @builtins.property
    @jsii.member(jsii_name="nameModifierInput")
    def name_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="nameModifier")
    def name_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameModifier"))

    @name_modifier.setter
    def name_modifier(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07db487bd69b3837ea4aaf592eb922ffb6ccfd4a0a80eee6023cfb999f81e0f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameModifier", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57facc2e53b688f909a9e6fde92d6794ae1328f8ab529db7d59caa51754e4636)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "hls_settings": "hlsSettings",
        "h265_packaging_type": "h265PackagingType",
        "name_modifier": "nameModifier",
        "segment_modifier": "segmentModifier",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings:
    def __init__(
        self,
        *,
        hls_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings", typing.Dict[builtins.str, typing.Any]],
        h265_packaging_type: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
        segment_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param hls_settings: hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_settings MedialiveChannel#hls_settings}
        :param h265_packaging_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.
        :param name_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        :param segment_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_modifier MedialiveChannel#segment_modifier}.
        '''
        if isinstance(hls_settings, dict):
            hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings(**hls_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49f36407fa4103e97bded639a1bc5f4b6f234012ab2830e6591bc56d9f608792)
            check_type(argname="argument hls_settings", value=hls_settings, expected_type=type_hints["hls_settings"])
            check_type(argname="argument h265_packaging_type", value=h265_packaging_type, expected_type=type_hints["h265_packaging_type"])
            check_type(argname="argument name_modifier", value=name_modifier, expected_type=type_hints["name_modifier"])
            check_type(argname="argument segment_modifier", value=segment_modifier, expected_type=type_hints["segment_modifier"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "hls_settings": hls_settings,
        }
        if h265_packaging_type is not None:
            self._values["h265_packaging_type"] = h265_packaging_type
        if name_modifier is not None:
            self._values["name_modifier"] = name_modifier
        if segment_modifier is not None:
            self._values["segment_modifier"] = segment_modifier

    @builtins.property
    def hls_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings":
        '''hls_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_settings MedialiveChannel#hls_settings}
        '''
        result = self._values.get("hls_settings")
        assert result is not None, "Required property 'hls_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings", result)

    @builtins.property
    def h265_packaging_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.'''
        result = self._values.get("h265_packaging_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.'''
        result = self._values.get("name_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segment_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_modifier MedialiveChannel#segment_modifier}.'''
        result = self._values.get("segment_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_only_hls_settings": "audioOnlyHlsSettings",
        "fmp4_hls_settings": "fmp4HlsSettings",
        "frame_capture_hls_settings": "frameCaptureHlsSettings",
        "standard_hls_settings": "standardHlsSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings:
    def __init__(
        self,
        *,
        audio_only_hls_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        fmp4_hls_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        frame_capture_hls_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        standard_hls_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_only_hls_settings: audio_only_hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_hls_settings MedialiveChannel#audio_only_hls_settings}
        :param fmp4_hls_settings: fmp4_hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fmp4_hls_settings MedialiveChannel#fmp4_hls_settings}
        :param frame_capture_hls_settings: frame_capture_hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_hls_settings MedialiveChannel#frame_capture_hls_settings}
        :param standard_hls_settings: standard_hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#standard_hls_settings MedialiveChannel#standard_hls_settings}
        '''
        if isinstance(audio_only_hls_settings, dict):
            audio_only_hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings(**audio_only_hls_settings)
        if isinstance(fmp4_hls_settings, dict):
            fmp4_hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings(**fmp4_hls_settings)
        if isinstance(frame_capture_hls_settings, dict):
            frame_capture_hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings(**frame_capture_hls_settings)
        if isinstance(standard_hls_settings, dict):
            standard_hls_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings(**standard_hls_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__33d27d1c5940e97a07417fa05ee86f01775a722d8910f7f8dd2cf938c0c92932)
            check_type(argname="argument audio_only_hls_settings", value=audio_only_hls_settings, expected_type=type_hints["audio_only_hls_settings"])
            check_type(argname="argument fmp4_hls_settings", value=fmp4_hls_settings, expected_type=type_hints["fmp4_hls_settings"])
            check_type(argname="argument frame_capture_hls_settings", value=frame_capture_hls_settings, expected_type=type_hints["frame_capture_hls_settings"])
            check_type(argname="argument standard_hls_settings", value=standard_hls_settings, expected_type=type_hints["standard_hls_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if audio_only_hls_settings is not None:
            self._values["audio_only_hls_settings"] = audio_only_hls_settings
        if fmp4_hls_settings is not None:
            self._values["fmp4_hls_settings"] = fmp4_hls_settings
        if frame_capture_hls_settings is not None:
            self._values["frame_capture_hls_settings"] = frame_capture_hls_settings
        if standard_hls_settings is not None:
            self._values["standard_hls_settings"] = standard_hls_settings

    @builtins.property
    def audio_only_hls_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings"]:
        '''audio_only_hls_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_hls_settings MedialiveChannel#audio_only_hls_settings}
        '''
        result = self._values.get("audio_only_hls_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings"], result)

    @builtins.property
    def fmp4_hls_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings"]:
        '''fmp4_hls_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fmp4_hls_settings MedialiveChannel#fmp4_hls_settings}
        '''
        result = self._values.get("fmp4_hls_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings"], result)

    @builtins.property
    def frame_capture_hls_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings"]:
        '''frame_capture_hls_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_hls_settings MedialiveChannel#frame_capture_hls_settings}
        '''
        result = self._values.get("frame_capture_hls_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings"], result)

    @builtins.property
    def standard_hls_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings"]:
        '''standard_hls_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#standard_hls_settings MedialiveChannel#standard_hls_settings}
        '''
        result = self._values.get("standard_hls_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_group_id": "audioGroupId",
        "audio_only_image": "audioOnlyImage",
        "audio_track_type": "audioTrackType",
        "segment_type": "segmentType",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings:
    def __init__(
        self,
        *,
        audio_group_id: typing.Optional[builtins.str] = None,
        audio_only_image: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage", typing.Dict[builtins.str, typing.Any]]] = None,
        audio_track_type: typing.Optional[builtins.str] = None,
        segment_type: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_group_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_group_id MedialiveChannel#audio_group_id}.
        :param audio_only_image: audio_only_image block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_image MedialiveChannel#audio_only_image}
        :param audio_track_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_track_type MedialiveChannel#audio_track_type}.
        :param segment_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_type MedialiveChannel#segment_type}.
        '''
        if isinstance(audio_only_image, dict):
            audio_only_image = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage(**audio_only_image)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00bee2fc74844a7a2aa0ab27efa0860d297ff9d6e3be49b0ef2198a29ed51440)
            check_type(argname="argument audio_group_id", value=audio_group_id, expected_type=type_hints["audio_group_id"])
            check_type(argname="argument audio_only_image", value=audio_only_image, expected_type=type_hints["audio_only_image"])
            check_type(argname="argument audio_track_type", value=audio_track_type, expected_type=type_hints["audio_track_type"])
            check_type(argname="argument segment_type", value=segment_type, expected_type=type_hints["segment_type"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if audio_group_id is not None:
            self._values["audio_group_id"] = audio_group_id
        if audio_only_image is not None:
            self._values["audio_only_image"] = audio_only_image
        if audio_track_type is not None:
            self._values["audio_track_type"] = audio_track_type
        if segment_type is not None:
            self._values["segment_type"] = segment_type

    @builtins.property
    def audio_group_id(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_group_id MedialiveChannel#audio_group_id}.'''
        result = self._values.get("audio_group_id")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_only_image(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage"]:
        '''audio_only_image block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_image MedialiveChannel#audio_only_image}
        '''
        result = self._values.get("audio_only_image")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage"], result)

    @builtins.property
    def audio_track_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_track_type MedialiveChannel#audio_track_type}.'''
        result = self._values.get("audio_track_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segment_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_type MedialiveChannel#segment_type}.'''
        result = self._values.get("segment_type")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage",
    jsii_struct_bases=[],
    name_mapping={
        "uri": "uri",
        "password_param": "passwordParam",
        "username": "username",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage:
    def __init__(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8dadd426c241e08309967bae721bc636428270f562bc67a1e739468811f6e486)
            check_type(argname="argument uri", value=uri, expected_type=type_hints["uri"])
            check_type(argname="argument password_param", value=password_param, expected_type=type_hints["password_param"])
            check_type(argname="argument username", value=username, expected_type=type_hints["username"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "uri": uri,
        }
        if password_param is not None:
            self._values["password_param"] = password_param
        if username is not None:
            self._values["username"] = username

    @builtins.property
    def uri(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.'''
        result = self._values.get("uri")
        assert result is not None, "Required property 'uri' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def password_param(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.'''
        result = self._values.get("password_param")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def username(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.'''
        result = self._values.get("username")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__107d06e3f642bb3dfdc5fe4283399cbd24e1bbc651c08622c9b10dc360a85278)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPasswordParam")
    def reset_password_param(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPasswordParam", []))

    @jsii.member(jsii_name="resetUsername")
    def reset_username(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUsername", []))

    @builtins.property
    @jsii.member(jsii_name="passwordParamInput")
    def password_param_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "passwordParamInput"))

    @builtins.property
    @jsii.member(jsii_name="uriInput")
    def uri_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "uriInput"))

    @builtins.property
    @jsii.member(jsii_name="usernameInput")
    def username_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "usernameInput"))

    @builtins.property
    @jsii.member(jsii_name="passwordParam")
    def password_param(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "passwordParam"))

    @password_param.setter
    def password_param(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6518bb215f2e874286d0211fe7eed0f8a54f3ac5961c5acc682dc07501b17852)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "passwordParam", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="uri")
    def uri(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "uri"))

    @uri.setter
    def uri(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89a4ce1aad315df9922fd7da09fd63bcce2700afbe27ddefd68078647716a78c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "uri", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="username")
    def username(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "username"))

    @username.setter
    def username(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef8fca0edc72379c12a2d8405732e8e65a58221fe44110f51b99d0f2cb19cd16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "username", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__654bb18c23a8ed6f09c45ddf4fe81d3198262920c49e0873ffe2244c48dd01b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac7983927d6e05bb2bb901cc8081100b1e3bf7ecc636e49ca0046cd34dfe7a54)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioOnlyImage")
    def put_audio_only_image(
        self,
        *,
        uri: builtins.str,
        password_param: typing.Optional[builtins.str] = None,
        username: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param uri: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#uri MedialiveChannel#uri}.
        :param password_param: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#password_param MedialiveChannel#password_param}.
        :param username: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#username MedialiveChannel#username}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage(
            uri=uri, password_param=password_param, username=username
        )

        return typing.cast(None, jsii.invoke(self, "putAudioOnlyImage", [value]))

    @jsii.member(jsii_name="resetAudioGroupId")
    def reset_audio_group_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioGroupId", []))

    @jsii.member(jsii_name="resetAudioOnlyImage")
    def reset_audio_only_image(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioOnlyImage", []))

    @jsii.member(jsii_name="resetAudioTrackType")
    def reset_audio_track_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioTrackType", []))

    @jsii.member(jsii_name="resetSegmentType")
    def reset_segment_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentType", []))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyImage")
    def audio_only_image(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference, jsii.get(self, "audioOnlyImage"))

    @builtins.property
    @jsii.member(jsii_name="audioGroupIdInput")
    def audio_group_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioGroupIdInput"))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyImageInput")
    def audio_only_image_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage], jsii.get(self, "audioOnlyImageInput"))

    @builtins.property
    @jsii.member(jsii_name="audioTrackTypeInput")
    def audio_track_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioTrackTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentTypeInput")
    def segment_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="audioGroupId")
    def audio_group_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioGroupId"))

    @audio_group_id.setter
    def audio_group_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__087084e2e754108acf78f7248f1d38eb11b6cd8d11da7f5dbac31f4de79abff8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioGroupId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioTrackType")
    def audio_track_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioTrackType"))

    @audio_track_type.setter
    def audio_track_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96da34ab54e44049c5e9480d4b9128b9c6fe9dc791a18f2b660e890dfdc1e257)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioTrackType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentType")
    def segment_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentType"))

    @segment_type.setter
    def segment_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa7caf28722781cc1efd3b9d873c2560517bdc4d1b3e07856d1d6d13b691a6b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e8819a670d9210e148891007df795a6193cce224a9ab35f2b808c1a7cceb2fe8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_rendition_sets": "audioRenditionSets",
        "nielsen_id3_behavior": "nielsenId3Behavior",
        "timed_metadata_behavior": "timedMetadataBehavior",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings:
    def __init__(
        self,
        *,
        audio_rendition_sets: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_rendition_sets: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f62bd94492dd2285d4bf0d463d9a549ee8afed0c46063d1bf1ae5813d83f3a7b)
            check_type(argname="argument audio_rendition_sets", value=audio_rendition_sets, expected_type=type_hints["audio_rendition_sets"])
            check_type(argname="argument nielsen_id3_behavior", value=nielsen_id3_behavior, expected_type=type_hints["nielsen_id3_behavior"])
            check_type(argname="argument timed_metadata_behavior", value=timed_metadata_behavior, expected_type=type_hints["timed_metadata_behavior"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if audio_rendition_sets is not None:
            self._values["audio_rendition_sets"] = audio_rendition_sets
        if nielsen_id3_behavior is not None:
            self._values["nielsen_id3_behavior"] = nielsen_id3_behavior
        if timed_metadata_behavior is not None:
            self._values["timed_metadata_behavior"] = timed_metadata_behavior

    @builtins.property
    def audio_rendition_sets(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.'''
        result = self._values.get("audio_rendition_sets")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_id3_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.'''
        result = self._values.get("nielsen_id3_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.'''
        result = self._values.get("timed_metadata_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc4d9209f52ae3caf01bd6eacbcf4207b4a9bdaa82311314ec1c891735383f97)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAudioRenditionSets")
    def reset_audio_rendition_sets(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioRenditionSets", []))

    @jsii.member(jsii_name="resetNielsenId3Behavior")
    def reset_nielsen_id3_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenId3Behavior", []))

    @jsii.member(jsii_name="resetTimedMetadataBehavior")
    def reset_timed_metadata_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataBehavior", []))

    @builtins.property
    @jsii.member(jsii_name="audioRenditionSetsInput")
    def audio_rendition_sets_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioRenditionSetsInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenId3BehaviorInput")
    def nielsen_id3_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenId3BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehaviorInput")
    def timed_metadata_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="audioRenditionSets")
    def audio_rendition_sets(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioRenditionSets"))

    @audio_rendition_sets.setter
    def audio_rendition_sets(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__30868bfe86aecf6855cc46d6705b0aa8247edb9b34d7795e0751d470fd63cae6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioRenditionSets", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nielsenId3Behavior")
    def nielsen_id3_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenId3Behavior"))

    @nielsen_id3_behavior.setter
    def nielsen_id3_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9e00a96ff21a1f1e11df517982f0a4243416310b761c7238052ec42c57ff9c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenId3Behavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehavior")
    def timed_metadata_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataBehavior"))

    @timed_metadata_behavior.setter
    def timed_metadata_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c694eeba4d57191d94e97b1a312eb6a04b6699ca26e0e85da924dc5f7e78c622)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3d42c3b49a5bba38aca8ac4ddfd85ea47f1d1fbd2b480cfbcb90c17c787cce1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93eeb5be6564a3b2389a3f6e6a7e2b4141d18432f783d50c27ea98cc706d947f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69c8133f9087a31fa818e1060e88b7ff21a6678494282dca436e0e591e3886c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8850b2df0b4d1d6a28afcc6eb999dd3ca35c329694a02cc9d26c51d7af662122)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioOnlyHlsSettings")
    def put_audio_only_hls_settings(
        self,
        *,
        audio_group_id: typing.Optional[builtins.str] = None,
        audio_only_image: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage, typing.Dict[builtins.str, typing.Any]]] = None,
        audio_track_type: typing.Optional[builtins.str] = None,
        segment_type: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_group_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_group_id MedialiveChannel#audio_group_id}.
        :param audio_only_image: audio_only_image block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_image MedialiveChannel#audio_only_image}
        :param audio_track_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_track_type MedialiveChannel#audio_track_type}.
        :param segment_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_type MedialiveChannel#segment_type}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings(
            audio_group_id=audio_group_id,
            audio_only_image=audio_only_image,
            audio_track_type=audio_track_type,
            segment_type=segment_type,
        )

        return typing.cast(None, jsii.invoke(self, "putAudioOnlyHlsSettings", [value]))

    @jsii.member(jsii_name="putFmp4HlsSettings")
    def put_fmp4_hls_settings(
        self,
        *,
        audio_rendition_sets: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_rendition_sets: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings(
            audio_rendition_sets=audio_rendition_sets,
            nielsen_id3_behavior=nielsen_id3_behavior,
            timed_metadata_behavior=timed_metadata_behavior,
        )

        return typing.cast(None, jsii.invoke(self, "putFmp4HlsSettings", [value]))

    @jsii.member(jsii_name="putFrameCaptureHlsSettings")
    def put_frame_capture_hls_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings()

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureHlsSettings", [value]))

    @jsii.member(jsii_name="putStandardHlsSettings")
    def put_standard_hls_settings(
        self,
        *,
        m3_u8_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings", typing.Dict[builtins.str, typing.Any]],
        audio_rendition_sets: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param m3_u8_settings: m3u8_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m3u8_settings MedialiveChannel#m3u8_settings}
        :param audio_rendition_sets: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings(
            m3_u8_settings=m3_u8_settings, audio_rendition_sets=audio_rendition_sets
        )

        return typing.cast(None, jsii.invoke(self, "putStandardHlsSettings", [value]))

    @jsii.member(jsii_name="resetAudioOnlyHlsSettings")
    def reset_audio_only_hls_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioOnlyHlsSettings", []))

    @jsii.member(jsii_name="resetFmp4HlsSettings")
    def reset_fmp4_hls_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFmp4HlsSettings", []))

    @jsii.member(jsii_name="resetFrameCaptureHlsSettings")
    def reset_frame_capture_hls_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureHlsSettings", []))

    @jsii.member(jsii_name="resetStandardHlsSettings")
    def reset_standard_hls_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStandardHlsSettings", []))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyHlsSettings")
    def audio_only_hls_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference, jsii.get(self, "audioOnlyHlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="fmp4HlsSettings")
    def fmp4_hls_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference, jsii.get(self, "fmp4HlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureHlsSettings")
    def frame_capture_hls_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference, jsii.get(self, "frameCaptureHlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="standardHlsSettings")
    def standard_hls_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference", jsii.get(self, "standardHlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioOnlyHlsSettingsInput")
    def audio_only_hls_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings], jsii.get(self, "audioOnlyHlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="fmp4HlsSettingsInput")
    def fmp4_hls_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings], jsii.get(self, "fmp4HlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureHlsSettingsInput")
    def frame_capture_hls_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings], jsii.get(self, "frameCaptureHlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="standardHlsSettingsInput")
    def standard_hls_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings"], jsii.get(self, "standardHlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__acdc6355193bbb096f54dae3aee620e9c10ed252f21e0c51f6021ec815987efd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "m3_u8_settings": "m3U8Settings",
        "audio_rendition_sets": "audioRenditionSets",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings:
    def __init__(
        self,
        *,
        m3_u8_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings", typing.Dict[builtins.str, typing.Any]],
        audio_rendition_sets: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param m3_u8_settings: m3u8_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m3u8_settings MedialiveChannel#m3u8_settings}
        :param audio_rendition_sets: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.
        '''
        if isinstance(m3_u8_settings, dict):
            m3_u8_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings(**m3_u8_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__505ea726527c76de4ad31f3771a0884c65aeeb92e02ce34483b1f14cef7785f7)
            check_type(argname="argument m3_u8_settings", value=m3_u8_settings, expected_type=type_hints["m3_u8_settings"])
            check_type(argname="argument audio_rendition_sets", value=audio_rendition_sets, expected_type=type_hints["audio_rendition_sets"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "m3_u8_settings": m3_u8_settings,
        }
        if audio_rendition_sets is not None:
            self._values["audio_rendition_sets"] = audio_rendition_sets

    @builtins.property
    def m3_u8_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings":
        '''m3u8_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m3u8_settings MedialiveChannel#m3u8_settings}
        '''
        result = self._values.get("m3_u8_settings")
        assert result is not None, "Required property 'm3_u8_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings", result)

    @builtins.property
    def audio_rendition_sets(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_rendition_sets MedialiveChannel#audio_rendition_sets}.'''
        result = self._values.get("audio_rendition_sets")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_frames_per_pes": "audioFramesPerPes",
        "audio_pids": "audioPids",
        "ecm_pid": "ecmPid",
        "nielsen_id3_behavior": "nielsenId3Behavior",
        "pat_interval": "patInterval",
        "pcr_control": "pcrControl",
        "pcr_period": "pcrPeriod",
        "pcr_pid": "pcrPid",
        "pmt_interval": "pmtInterval",
        "pmt_pid": "pmtPid",
        "program_num": "programNum",
        "scte35_behavior": "scte35Behavior",
        "scte35_pid": "scte35Pid",
        "timed_metadata_behavior": "timedMetadataBehavior",
        "timed_metadata_pid": "timedMetadataPid",
        "transport_stream_id": "transportStreamId",
        "video_pid": "videoPid",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings:
    def __init__(
        self,
        *,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        scte35_behavior: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param pat_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.
        :param scte35_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_behavior MedialiveChannel#scte35_behavior}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fe461a03b820da35fcafc4349e242e220f02a9d115c78c1d43c882e444a696f)
            check_type(argname="argument audio_frames_per_pes", value=audio_frames_per_pes, expected_type=type_hints["audio_frames_per_pes"])
            check_type(argname="argument audio_pids", value=audio_pids, expected_type=type_hints["audio_pids"])
            check_type(argname="argument ecm_pid", value=ecm_pid, expected_type=type_hints["ecm_pid"])
            check_type(argname="argument nielsen_id3_behavior", value=nielsen_id3_behavior, expected_type=type_hints["nielsen_id3_behavior"])
            check_type(argname="argument pat_interval", value=pat_interval, expected_type=type_hints["pat_interval"])
            check_type(argname="argument pcr_control", value=pcr_control, expected_type=type_hints["pcr_control"])
            check_type(argname="argument pcr_period", value=pcr_period, expected_type=type_hints["pcr_period"])
            check_type(argname="argument pcr_pid", value=pcr_pid, expected_type=type_hints["pcr_pid"])
            check_type(argname="argument pmt_interval", value=pmt_interval, expected_type=type_hints["pmt_interval"])
            check_type(argname="argument pmt_pid", value=pmt_pid, expected_type=type_hints["pmt_pid"])
            check_type(argname="argument program_num", value=program_num, expected_type=type_hints["program_num"])
            check_type(argname="argument scte35_behavior", value=scte35_behavior, expected_type=type_hints["scte35_behavior"])
            check_type(argname="argument scte35_pid", value=scte35_pid, expected_type=type_hints["scte35_pid"])
            check_type(argname="argument timed_metadata_behavior", value=timed_metadata_behavior, expected_type=type_hints["timed_metadata_behavior"])
            check_type(argname="argument timed_metadata_pid", value=timed_metadata_pid, expected_type=type_hints["timed_metadata_pid"])
            check_type(argname="argument transport_stream_id", value=transport_stream_id, expected_type=type_hints["transport_stream_id"])
            check_type(argname="argument video_pid", value=video_pid, expected_type=type_hints["video_pid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if audio_frames_per_pes is not None:
            self._values["audio_frames_per_pes"] = audio_frames_per_pes
        if audio_pids is not None:
            self._values["audio_pids"] = audio_pids
        if ecm_pid is not None:
            self._values["ecm_pid"] = ecm_pid
        if nielsen_id3_behavior is not None:
            self._values["nielsen_id3_behavior"] = nielsen_id3_behavior
        if pat_interval is not None:
            self._values["pat_interval"] = pat_interval
        if pcr_control is not None:
            self._values["pcr_control"] = pcr_control
        if pcr_period is not None:
            self._values["pcr_period"] = pcr_period
        if pcr_pid is not None:
            self._values["pcr_pid"] = pcr_pid
        if pmt_interval is not None:
            self._values["pmt_interval"] = pmt_interval
        if pmt_pid is not None:
            self._values["pmt_pid"] = pmt_pid
        if program_num is not None:
            self._values["program_num"] = program_num
        if scte35_behavior is not None:
            self._values["scte35_behavior"] = scte35_behavior
        if scte35_pid is not None:
            self._values["scte35_pid"] = scte35_pid
        if timed_metadata_behavior is not None:
            self._values["timed_metadata_behavior"] = timed_metadata_behavior
        if timed_metadata_pid is not None:
            self._values["timed_metadata_pid"] = timed_metadata_pid
        if transport_stream_id is not None:
            self._values["transport_stream_id"] = transport_stream_id
        if video_pid is not None:
            self._values["video_pid"] = video_pid

    @builtins.property
    def audio_frames_per_pes(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.'''
        result = self._values.get("audio_frames_per_pes")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def audio_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.'''
        result = self._values.get("audio_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ecm_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.'''
        result = self._values.get("ecm_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_id3_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.'''
        result = self._values.get("nielsen_id3_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pat_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.'''
        result = self._values.get("pat_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.'''
        result = self._values.get("pcr_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pcr_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.'''
        result = self._values.get("pcr_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.'''
        result = self._values.get("pcr_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pmt_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.'''
        result = self._values.get("pmt_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pmt_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.'''
        result = self._values.get("pmt_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_num(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.'''
        result = self._values.get("program_num")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def scte35_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_behavior MedialiveChannel#scte35_behavior}.'''
        result = self._values.get("scte35_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.'''
        result = self._values.get("scte35_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.'''
        result = self._values.get("timed_metadata_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.'''
        result = self._values.get("timed_metadata_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def transport_stream_id(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.'''
        result = self._values.get("transport_stream_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def video_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.'''
        result = self._values.get("video_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d732f86196b41c0671547f94840fab35a5cadf137002ddb8a6dfda16aee7fbf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAudioFramesPerPes")
    def reset_audio_frames_per_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioFramesPerPes", []))

    @jsii.member(jsii_name="resetAudioPids")
    def reset_audio_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioPids", []))

    @jsii.member(jsii_name="resetEcmPid")
    def reset_ecm_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcmPid", []))

    @jsii.member(jsii_name="resetNielsenId3Behavior")
    def reset_nielsen_id3_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenId3Behavior", []))

    @jsii.member(jsii_name="resetPatInterval")
    def reset_pat_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPatInterval", []))

    @jsii.member(jsii_name="resetPcrControl")
    def reset_pcr_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrControl", []))

    @jsii.member(jsii_name="resetPcrPeriod")
    def reset_pcr_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPeriod", []))

    @jsii.member(jsii_name="resetPcrPid")
    def reset_pcr_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPid", []))

    @jsii.member(jsii_name="resetPmtInterval")
    def reset_pmt_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtInterval", []))

    @jsii.member(jsii_name="resetPmtPid")
    def reset_pmt_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtPid", []))

    @jsii.member(jsii_name="resetProgramNum")
    def reset_program_num(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramNum", []))

    @jsii.member(jsii_name="resetScte35Behavior")
    def reset_scte35_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Behavior", []))

    @jsii.member(jsii_name="resetScte35Pid")
    def reset_scte35_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Pid", []))

    @jsii.member(jsii_name="resetTimedMetadataBehavior")
    def reset_timed_metadata_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataBehavior", []))

    @jsii.member(jsii_name="resetTimedMetadataPid")
    def reset_timed_metadata_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataPid", []))

    @jsii.member(jsii_name="resetTransportStreamId")
    def reset_transport_stream_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTransportStreamId", []))

    @jsii.member(jsii_name="resetVideoPid")
    def reset_video_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoPid", []))

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPesInput")
    def audio_frames_per_pes_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "audioFramesPerPesInput"))

    @builtins.property
    @jsii.member(jsii_name="audioPidsInput")
    def audio_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="ecmPidInput")
    def ecm_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ecmPidInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenId3BehaviorInput")
    def nielsen_id3_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenId3BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="patIntervalInput")
    def pat_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "patIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrControlInput")
    def pcr_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrControlInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPeriodInput")
    def pcr_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pcrPeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPidInput")
    def pcr_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrPidInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtIntervalInput")
    def pmt_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pmtIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtPidInput")
    def pmt_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pmtPidInput"))

    @builtins.property
    @jsii.member(jsii_name="programNumInput")
    def program_num_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "programNumInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35BehaviorInput")
    def scte35_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35PidInput")
    def scte35_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35PidInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehaviorInput")
    def timed_metadata_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPidInput")
    def timed_metadata_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataPidInput"))

    @builtins.property
    @jsii.member(jsii_name="transportStreamIdInput")
    def transport_stream_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "transportStreamIdInput"))

    @builtins.property
    @jsii.member(jsii_name="videoPidInput")
    def video_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "videoPidInput"))

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPes")
    def audio_frames_per_pes(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "audioFramesPerPes"))

    @audio_frames_per_pes.setter
    def audio_frames_per_pes(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b4231beffd158c70b82d83bdaf5789afa522c905b8cc2770952ce336c0190c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioFramesPerPes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioPids")
    def audio_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioPids"))

    @audio_pids.setter
    def audio_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f532189fea146143e6b0d19c71fe276b9dff2b4469364b4f167f52f36da0d8ef)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioPids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ecmPid")
    def ecm_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ecmPid"))

    @ecm_pid.setter
    def ecm_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf34d6dc46b152e8033b5349f5a5c5f12018d8a599de1704ed9b27d7dff90fb4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ecmPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nielsenId3Behavior")
    def nielsen_id3_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenId3Behavior"))

    @nielsen_id3_behavior.setter
    def nielsen_id3_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9cc9ff03f9caec3cadcb23783247e1fbadf5e765398f8f9d8632f93027ed4a6a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenId3Behavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="patInterval")
    def pat_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "patInterval"))

    @pat_interval.setter
    def pat_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7baefe9065a258361bbf02f5ca493da1a87dfb3308194dc6043256cbeea39ca6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "patInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrControl")
    def pcr_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrControl"))

    @pcr_control.setter
    def pcr_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f88ed2735f6985f5cd861945eba341b0010aadd0fc1b96a831ac3889077e651)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrPeriod")
    def pcr_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pcrPeriod"))

    @pcr_period.setter
    def pcr_period(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb23e8bcd18bd6cf7c1b58acc7137b8e7e69d23630ee5f429ef05096529249b4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPeriod", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrPid")
    def pcr_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrPid"))

    @pcr_pid.setter
    def pcr_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d880e7feab6eb0e7fc7c2f6fb1307dfb00a3a6c203f2c15a3d335f8e454ecc59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pmtInterval")
    def pmt_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pmtInterval"))

    @pmt_interval.setter
    def pmt_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16601d8d8273b8b1ff213b4d88977e3cb317468c01644c46c1f850ef9fd24a67)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pmtPid")
    def pmt_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pmtPid"))

    @pmt_pid.setter
    def pmt_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16899104a0c04ea2613107bef951b28291b8f13dd17e280810348164c2831c36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="programNum")
    def program_num(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "programNum"))

    @program_num.setter
    def program_num(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58c16b98159329ec59c0ee5a66b875a4a0068423ce7574bb41ed778d8670baa7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programNum", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte35Behavior")
    def scte35_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Behavior"))

    @scte35_behavior.setter
    def scte35_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0812279eb99df43670aefe94e88c73e0f9750c80ac90dfcd040b1ce1a7f5c45)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Behavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte35Pid")
    def scte35_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Pid"))

    @scte35_pid.setter
    def scte35_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__204fd7e348bfc94f47b372f236f08d706ac16f17233859735a0fda6cccbded1b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Pid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehavior")
    def timed_metadata_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataBehavior"))

    @timed_metadata_behavior.setter
    def timed_metadata_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c097911c0083fe6a47407064f10005268df3767d992bec37162fa2cbf8bbc953)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPid")
    def timed_metadata_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataPid"))

    @timed_metadata_pid.setter
    def timed_metadata_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68cd48a4631b12d49bb7518a59e6d72ff97c4dba914bf453177c96c61a629124)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="transportStreamId")
    def transport_stream_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "transportStreamId"))

    @transport_stream_id.setter
    def transport_stream_id(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6502014b27a0e2e2a4e371c2af8589f1dd59a163eb00fe6d2bf802ef44c4944)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "transportStreamId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="videoPid")
    def video_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "videoPid"))

    @video_pid.setter
    def video_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc2a9faa8832a97f7bb1798e644a73c6219a165959aa6ddb96cbba5f664bdac6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4f5c6e44d5e46088d33eb0070244fd4b2361cee5f1485115582ddd56c87e7ed8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a025cd0199179692c492b356dfbcf296fa5cb46a56d2ffa8c1aee6b31a1f2086)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putM3U8Settings")
    def put_m3_u8_settings(
        self,
        *,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        scte35_behavior: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param pat_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.
        :param scte35_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_behavior MedialiveChannel#scte35_behavior}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings(
            audio_frames_per_pes=audio_frames_per_pes,
            audio_pids=audio_pids,
            ecm_pid=ecm_pid,
            nielsen_id3_behavior=nielsen_id3_behavior,
            pat_interval=pat_interval,
            pcr_control=pcr_control,
            pcr_period=pcr_period,
            pcr_pid=pcr_pid,
            pmt_interval=pmt_interval,
            pmt_pid=pmt_pid,
            program_num=program_num,
            scte35_behavior=scte35_behavior,
            scte35_pid=scte35_pid,
            timed_metadata_behavior=timed_metadata_behavior,
            timed_metadata_pid=timed_metadata_pid,
            transport_stream_id=transport_stream_id,
            video_pid=video_pid,
        )

        return typing.cast(None, jsii.invoke(self, "putM3U8Settings", [value]))

    @jsii.member(jsii_name="resetAudioRenditionSets")
    def reset_audio_rendition_sets(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioRenditionSets", []))

    @builtins.property
    @jsii.member(jsii_name="m3U8Settings")
    def m3_u8_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference, jsii.get(self, "m3U8Settings"))

    @builtins.property
    @jsii.member(jsii_name="audioRenditionSetsInput")
    def audio_rendition_sets_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioRenditionSetsInput"))

    @builtins.property
    @jsii.member(jsii_name="m3U8SettingsInput")
    def m3_u8_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings], jsii.get(self, "m3U8SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="audioRenditionSets")
    def audio_rendition_sets(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioRenditionSets"))

    @audio_rendition_sets.setter
    def audio_rendition_sets(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fd9bb141edaaf7bfa3c50d8663bd3645a18cf39ed429e9697083b6a9141a424)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioRenditionSets", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__035248206c4a49502798de5a812ebf0748bf57a90a6f147ed1d45d6e8c693832)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2d2242b072a30ca1ddcedfe13691826042d0d36cf649f7ecc7d4305a0fdfd9f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putHlsSettings")
    def put_hls_settings(
        self,
        *,
        audio_only_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        fmp4_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        frame_capture_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        standard_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_only_hls_settings: audio_only_hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_only_hls_settings MedialiveChannel#audio_only_hls_settings}
        :param fmp4_hls_settings: fmp4_hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fmp4_hls_settings MedialiveChannel#fmp4_hls_settings}
        :param frame_capture_hls_settings: frame_capture_hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_hls_settings MedialiveChannel#frame_capture_hls_settings}
        :param standard_hls_settings: standard_hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#standard_hls_settings MedialiveChannel#standard_hls_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings(
            audio_only_hls_settings=audio_only_hls_settings,
            fmp4_hls_settings=fmp4_hls_settings,
            frame_capture_hls_settings=frame_capture_hls_settings,
            standard_hls_settings=standard_hls_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsSettings", [value]))

    @jsii.member(jsii_name="resetH265PackagingType")
    def reset_h265_packaging_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetH265PackagingType", []))

    @jsii.member(jsii_name="resetNameModifier")
    def reset_name_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameModifier", []))

    @jsii.member(jsii_name="resetSegmentModifier")
    def reset_segment_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentModifier", []))

    @builtins.property
    @jsii.member(jsii_name="hlsSettings")
    def hls_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference, jsii.get(self, "hlsSettings"))

    @builtins.property
    @jsii.member(jsii_name="h265PackagingTypeInput")
    def h265_packaging_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "h265PackagingTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsSettingsInput")
    def hls_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings], jsii.get(self, "hlsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="nameModifierInput")
    def name_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentModifierInput")
    def segment_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="h265PackagingType")
    def h265_packaging_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "h265PackagingType"))

    @h265_packaging_type.setter
    def h265_packaging_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4ab6194529cec9ae9831bed6ed5df00134967d1f29499f6772774da166e506b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "h265PackagingType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nameModifier")
    def name_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameModifier"))

    @name_modifier.setter
    def name_modifier(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27e3d1ef74a2367f5b4614a91a8377e0b6816837e839a8cdbc613584c7e3b872)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameModifier", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentModifier")
    def segment_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentModifier"))

    @segment_modifier.setter
    def segment_modifier(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2bf6a1d2e5d20953a336804c6a6b7debe9ce84c6e0410f9bbb2d26e3d9c4f7d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentModifier", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0331e62a56e1c4ab5c3896b46213855f114484c57625d04f5d369859ac51ae6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c1ecb59bbbcc18b56af031cd793a38b21427125fbb7d6f0ec30683666bdb1dc)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe25285ff98273cbdf4214f409e11b6fc8ea70bf60af151151a591c9e7b20ce6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "h265_packaging_type": "h265PackagingType",
        "name_modifier": "nameModifier",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings:
    def __init__(
        self,
        *,
        h265_packaging_type: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param h265_packaging_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.
        :param name_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0275a37c37c003c974be01bfacc7d691bbf14ba26bc68ab71fecd01919ebce8e)
            check_type(argname="argument h265_packaging_type", value=h265_packaging_type, expected_type=type_hints["h265_packaging_type"])
            check_type(argname="argument name_modifier", value=name_modifier, expected_type=type_hints["name_modifier"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if h265_packaging_type is not None:
            self._values["h265_packaging_type"] = h265_packaging_type
        if name_modifier is not None:
            self._values["name_modifier"] = name_modifier

    @builtins.property
    def h265_packaging_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.'''
        result = self._values.get("h265_packaging_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def name_modifier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.'''
        result = self._values.get("name_modifier")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b67f4043251862273ae0a8911c79895fdbedceef11f39183afb764ab2c17f48b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetH265PackagingType")
    def reset_h265_packaging_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetH265PackagingType", []))

    @jsii.member(jsii_name="resetNameModifier")
    def reset_name_modifier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNameModifier", []))

    @builtins.property
    @jsii.member(jsii_name="h265PackagingTypeInput")
    def h265_packaging_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "h265PackagingTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameModifierInput")
    def name_modifier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameModifierInput"))

    @builtins.property
    @jsii.member(jsii_name="h265PackagingType")
    def h265_packaging_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "h265PackagingType"))

    @h265_packaging_type.setter
    def h265_packaging_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1342751628346947cb530565d3a5ab00c0cb9fec9a5d0afb041d4e3e3f8fe6b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "h265PackagingType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nameModifier")
    def name_modifier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nameModifier"))

    @name_modifier.setter
    def name_modifier(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cca28090746d22f52096e36a8e6d822ef30317c19cdb6155996ccce585e57821)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nameModifier", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb4fab9eea92bbd57951a1c53fc9858863576d329401600691e16309b1dc7725)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings",
    jsii_struct_bases=[],
    name_mapping={"destination": "destination"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination", typing.Dict[builtins.str, typing.Any]],
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination(**destination)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b9c4c26f8da8b6b2b906d4225e91e319acabb3326054f15cd38a28a45c0edfb)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination": destination,
        }

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination", result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__072dc5854640e1ae8abecdb4db98cf160a20ab139adfdcff965711a587ae85dc)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__40a90d8c2f09eb65072cc62988eb66a4535e1b7388e210766d490f5f3ed06e33)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9aeefdcb0836540100db8e198d166f6258ec9032fc964dd70cd27b248eb3284c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b7d204a8ad9cb3b747b74a02eee00a986a015dc2d8401864d2ae196152d4522)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c73475aa07075e9404fb75c358242229a936359d17534b8e14824744c55ff37a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a57e30f78a9e340909956693d57787a915e3a2167852abf7ae4fb27c2bc8d941)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b2fb98ea3314366d2edb8c8e91d73793d82f348c97421b2b42c3e705bcbf3b8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putArchiveOutputSettings")
    def put_archive_output_settings(
        self,
        *,
        container_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        extension: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param container_settings: container_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#container_settings MedialiveChannel#container_settings}
        :param extension: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#extension MedialiveChannel#extension}.
        :param name_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings(
            container_settings=container_settings,
            extension=extension,
            name_modifier=name_modifier,
        )

        return typing.cast(None, jsii.invoke(self, "putArchiveOutputSettings", [value]))

    @jsii.member(jsii_name="putFrameCaptureOutputSettings")
    def put_frame_capture_output_settings(
        self,
        *,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param name_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings(
            name_modifier=name_modifier
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureOutputSettings", [value]))

    @jsii.member(jsii_name="putHlsOutputSettings")
    def put_hls_output_settings(
        self,
        *,
        hls_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings, typing.Dict[builtins.str, typing.Any]],
        h265_packaging_type: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
        segment_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param hls_settings: hls_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_settings MedialiveChannel#hls_settings}
        :param h265_packaging_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.
        :param name_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        :param segment_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segment_modifier MedialiveChannel#segment_modifier}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings(
            hls_settings=hls_settings,
            h265_packaging_type=h265_packaging_type,
            name_modifier=name_modifier,
            segment_modifier=segment_modifier,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsOutputSettings", [value]))

    @jsii.member(jsii_name="putMediaPackageOutputSettings")
    def put_media_package_output_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings()

        return typing.cast(None, jsii.invoke(self, "putMediaPackageOutputSettings", [value]))

    @jsii.member(jsii_name="putMsSmoothOutputSettings")
    def put_ms_smooth_output_settings(
        self,
        *,
        h265_packaging_type: typing.Optional[builtins.str] = None,
        name_modifier: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param h265_packaging_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_packaging_type MedialiveChannel#h265_packaging_type}.
        :param name_modifier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name_modifier MedialiveChannel#name_modifier}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings(
            h265_packaging_type=h265_packaging_type, name_modifier=name_modifier
        )

        return typing.cast(None, jsii.invoke(self, "putMsSmoothOutputSettings", [value]))

    @jsii.member(jsii_name="putMultiplexOutputSettings")
    def put_multiplex_output_settings(
        self,
        *,
        destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination, typing.Dict[builtins.str, typing.Any]],
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings(
            destination=destination
        )

        return typing.cast(None, jsii.invoke(self, "putMultiplexOutputSettings", [value]))

    @jsii.member(jsii_name="putRtmpOutputSettings")
    def put_rtmp_output_settings(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination", typing.Dict[builtins.str, typing.Any]],
        certificate_mode: typing.Optional[builtins.str] = None,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        num_retries: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param certificate_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings(
            destination=destination,
            certificate_mode=certificate_mode,
            connection_retry_interval=connection_retry_interval,
            num_retries=num_retries,
        )

        return typing.cast(None, jsii.invoke(self, "putRtmpOutputSettings", [value]))

    @jsii.member(jsii_name="putUdpOutputSettings")
    def put_udp_output_settings(
        self,
        *,
        container_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings", typing.Dict[builtins.str, typing.Any]],
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination", typing.Dict[builtins.str, typing.Any]],
        buffer_msec: typing.Optional[jsii.Number] = None,
        fec_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param container_settings: container_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#container_settings MedialiveChannel#container_settings}
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param buffer_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_msec MedialiveChannel#buffer_msec}.
        :param fec_output_settings: fec_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fec_output_settings MedialiveChannel#fec_output_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings(
            container_settings=container_settings,
            destination=destination,
            buffer_msec=buffer_msec,
            fec_output_settings=fec_output_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putUdpOutputSettings", [value]))

    @jsii.member(jsii_name="resetArchiveOutputSettings")
    def reset_archive_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchiveOutputSettings", []))

    @jsii.member(jsii_name="resetFrameCaptureOutputSettings")
    def reset_frame_capture_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureOutputSettings", []))

    @jsii.member(jsii_name="resetHlsOutputSettings")
    def reset_hls_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsOutputSettings", []))

    @jsii.member(jsii_name="resetMediaPackageOutputSettings")
    def reset_media_package_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMediaPackageOutputSettings", []))

    @jsii.member(jsii_name="resetMsSmoothOutputSettings")
    def reset_ms_smooth_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMsSmoothOutputSettings", []))

    @jsii.member(jsii_name="resetMultiplexOutputSettings")
    def reset_multiplex_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMultiplexOutputSettings", []))

    @jsii.member(jsii_name="resetRtmpOutputSettings")
    def reset_rtmp_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRtmpOutputSettings", []))

    @jsii.member(jsii_name="resetUdpOutputSettings")
    def reset_udp_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUdpOutputSettings", []))

    @builtins.property
    @jsii.member(jsii_name="archiveOutputSettings")
    def archive_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference, jsii.get(self, "archiveOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureOutputSettings")
    def frame_capture_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference, jsii.get(self, "frameCaptureOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsOutputSettings")
    def hls_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference, jsii.get(self, "hlsOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageOutputSettings")
    def media_package_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference, jsii.get(self, "mediaPackageOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="msSmoothOutputSettings")
    def ms_smooth_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference, jsii.get(self, "msSmoothOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="multiplexOutputSettings")
    def multiplex_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference, jsii.get(self, "multiplexOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="rtmpOutputSettings")
    def rtmp_output_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference", jsii.get(self, "rtmpOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="udpOutputSettings")
    def udp_output_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference", jsii.get(self, "udpOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="archiveOutputSettingsInput")
    def archive_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings], jsii.get(self, "archiveOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureOutputSettingsInput")
    def frame_capture_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings], jsii.get(self, "frameCaptureOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hlsOutputSettingsInput")
    def hls_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings], jsii.get(self, "hlsOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="mediaPackageOutputSettingsInput")
    def media_package_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings], jsii.get(self, "mediaPackageOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="msSmoothOutputSettingsInput")
    def ms_smooth_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings], jsii.get(self, "msSmoothOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="multiplexOutputSettingsInput")
    def multiplex_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings], jsii.get(self, "multiplexOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rtmpOutputSettingsInput")
    def rtmp_output_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings"], jsii.get(self, "rtmpOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="udpOutputSettingsInput")
    def udp_output_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings"], jsii.get(self, "udpOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65ce5ed755fa805339ac7cd59c0debd184f2b6996c0f2039999c7ff6bb70b40a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "destination": "destination",
        "certificate_mode": "certificateMode",
        "connection_retry_interval": "connectionRetryInterval",
        "num_retries": "numRetries",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings:
    def __init__(
        self,
        *,
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination", typing.Dict[builtins.str, typing.Any]],
        certificate_mode: typing.Optional[builtins.str] = None,
        connection_retry_interval: typing.Optional[jsii.Number] = None,
        num_retries: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param certificate_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.
        :param connection_retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.
        :param num_retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.
        '''
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination(**destination)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a3d01378ec495a8cc4b99fb11f06ab1a6b89293db19a19d219318e945537817)
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument certificate_mode", value=certificate_mode, expected_type=type_hints["certificate_mode"])
            check_type(argname="argument connection_retry_interval", value=connection_retry_interval, expected_type=type_hints["connection_retry_interval"])
            check_type(argname="argument num_retries", value=num_retries, expected_type=type_hints["num_retries"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination": destination,
        }
        if certificate_mode is not None:
            self._values["certificate_mode"] = certificate_mode
        if connection_retry_interval is not None:
            self._values["connection_retry_interval"] = connection_retry_interval
        if num_retries is not None:
            self._values["num_retries"] = num_retries

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination", result)

    @builtins.property
    def certificate_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#certificate_mode MedialiveChannel#certificate_mode}.'''
        result = self._values.get("certificate_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def connection_retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#connection_retry_interval MedialiveChannel#connection_retry_interval}.'''
        result = self._values.get("connection_retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def num_retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_retries MedialiveChannel#num_retries}.'''
        result = self._values.get("num_retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a92de9ee230f91be96fbcd14513c8131ff18f59627a3c8acc83506758cd43ef)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e087bf3302b735f36b76daaac8629b9f5e3e7c0920b3dfc2e36d57f021edac1e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3b0a542197404c57f69069ea1fd11663c2d7e4ea1e49e1f101f13ee8acca7c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1847d237831afcd249b5a918fbdf8b14f03a0f4addbf1e1c118526c1424cf16f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__edb8e563f7fcbe6c7e9abf043091db0432e8222c6d7d53a08d5343dfc5c0c055)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="resetCertificateMode")
    def reset_certificate_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCertificateMode", []))

    @jsii.member(jsii_name="resetConnectionRetryInterval")
    def reset_connection_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConnectionRetryInterval", []))

    @jsii.member(jsii_name="resetNumRetries")
    def reset_num_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRetries", []))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="certificateModeInput")
    def certificate_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "certificateModeInput"))

    @builtins.property
    @jsii.member(jsii_name="connectionRetryIntervalInput")
    def connection_retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "connectionRetryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="numRetriesInput")
    def num_retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRetriesInput"))

    @builtins.property
    @jsii.member(jsii_name="certificateMode")
    def certificate_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "certificateMode"))

    @certificate_mode.setter
    def certificate_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df5148aa857709fd39e86034180ebdb2bf07878c39a7b4b9bbe6196c4b2d5104)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "certificateMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="connectionRetryInterval")
    def connection_retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "connectionRetryInterval"))

    @connection_retry_interval.setter
    def connection_retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b9676bb5141538a23caca7fd6a5ce1e4b237def49aa2376b5fb0529fc1b86991)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "connectionRetryInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="numRetries")
    def num_retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRetries"))

    @num_retries.setter
    def num_retries(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8eb863172ce8577c6d5ee541f7c7e4bcbd55f6d1e3b81bbdd8aa2b2d62809093)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRetries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea40e3e28aed6ed4d8f735ba29248bcc8ba10de62e9ed6798fa057a3131438f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "container_settings": "containerSettings",
        "destination": "destination",
        "buffer_msec": "bufferMsec",
        "fec_output_settings": "fecOutputSettings",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings:
    def __init__(
        self,
        *,
        container_settings: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings", typing.Dict[builtins.str, typing.Any]],
        destination: typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination", typing.Dict[builtins.str, typing.Any]],
        buffer_msec: typing.Optional[jsii.Number] = None,
        fec_output_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param container_settings: container_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#container_settings MedialiveChannel#container_settings}
        :param destination: destination block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        :param buffer_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_msec MedialiveChannel#buffer_msec}.
        :param fec_output_settings: fec_output_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fec_output_settings MedialiveChannel#fec_output_settings}
        '''
        if isinstance(container_settings, dict):
            container_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings(**container_settings)
        if isinstance(destination, dict):
            destination = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination(**destination)
        if isinstance(fec_output_settings, dict):
            fec_output_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings(**fec_output_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99298a586749301018091ec4e43011527a4a3ea102790139922e69cbd1269f44)
            check_type(argname="argument container_settings", value=container_settings, expected_type=type_hints["container_settings"])
            check_type(argname="argument destination", value=destination, expected_type=type_hints["destination"])
            check_type(argname="argument buffer_msec", value=buffer_msec, expected_type=type_hints["buffer_msec"])
            check_type(argname="argument fec_output_settings", value=fec_output_settings, expected_type=type_hints["fec_output_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "container_settings": container_settings,
            "destination": destination,
        }
        if buffer_msec is not None:
            self._values["buffer_msec"] = buffer_msec
        if fec_output_settings is not None:
            self._values["fec_output_settings"] = fec_output_settings

    @builtins.property
    def container_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings":
        '''container_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#container_settings MedialiveChannel#container_settings}
        '''
        result = self._values.get("container_settings")
        assert result is not None, "Required property 'container_settings' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings", result)

    @builtins.property
    def destination(
        self,
    ) -> "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination":
        '''destination block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination MedialiveChannel#destination}
        '''
        result = self._values.get("destination")
        assert result is not None, "Required property 'destination' is missing"
        return typing.cast("MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination", result)

    @builtins.property
    def buffer_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_msec MedialiveChannel#buffer_msec}.'''
        result = self._values.get("buffer_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def fec_output_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings"]:
        '''fec_output_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fec_output_settings MedialiveChannel#fec_output_settings}
        '''
        result = self._values.get("fec_output_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings",
    jsii_struct_bases=[],
    name_mapping={"m2_ts_settings": "m2TsSettings"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings:
    def __init__(
        self,
        *,
        m2_ts_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param m2_ts_settings: m2ts_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        '''
        if isinstance(m2_ts_settings, dict):
            m2_ts_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings(**m2_ts_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7dd2b6b8365388e8d58e15bd7945b90860e51c1e269258fabfeee58734728318)
            check_type(argname="argument m2_ts_settings", value=m2_ts_settings, expected_type=type_hints["m2_ts_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if m2_ts_settings is not None:
            self._values["m2_ts_settings"] = m2_ts_settings

    @builtins.property
    def m2_ts_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings"]:
        '''m2ts_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        '''
        result = self._values.get("m2_ts_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings",
    jsii_struct_bases=[],
    name_mapping={
        "absent_input_audio_behavior": "absentInputAudioBehavior",
        "arib": "arib",
        "arib_captions_pid": "aribCaptionsPid",
        "arib_captions_pid_control": "aribCaptionsPidControl",
        "audio_buffer_model": "audioBufferModel",
        "audio_frames_per_pes": "audioFramesPerPes",
        "audio_pids": "audioPids",
        "audio_stream_type": "audioStreamType",
        "bitrate": "bitrate",
        "buffer_model": "bufferModel",
        "cc_descriptor": "ccDescriptor",
        "dvb_nit_settings": "dvbNitSettings",
        "dvb_sdt_settings": "dvbSdtSettings",
        "dvb_sub_pids": "dvbSubPids",
        "dvb_tdt_settings": "dvbTdtSettings",
        "dvb_teletext_pid": "dvbTeletextPid",
        "ebif": "ebif",
        "ebp_audio_interval": "ebpAudioInterval",
        "ebp_lookahead_ms": "ebpLookaheadMs",
        "ebp_placement": "ebpPlacement",
        "ecm_pid": "ecmPid",
        "es_rate_in_pes": "esRateInPes",
        "etv_platform_pid": "etvPlatformPid",
        "etv_signal_pid": "etvSignalPid",
        "fragment_time": "fragmentTime",
        "klv": "klv",
        "klv_data_pids": "klvDataPids",
        "nielsen_id3_behavior": "nielsenId3Behavior",
        "null_packet_bitrate": "nullPacketBitrate",
        "pat_interval": "patInterval",
        "pcr_control": "pcrControl",
        "pcr_period": "pcrPeriod",
        "pcr_pid": "pcrPid",
        "pmt_interval": "pmtInterval",
        "pmt_pid": "pmtPid",
        "program_num": "programNum",
        "rate_mode": "rateMode",
        "scte27_pids": "scte27Pids",
        "scte35_control": "scte35Control",
        "scte35_pid": "scte35Pid",
        "segmentation_markers": "segmentationMarkers",
        "segmentation_style": "segmentationStyle",
        "segmentation_time": "segmentationTime",
        "timed_metadata_behavior": "timedMetadataBehavior",
        "timed_metadata_pid": "timedMetadataPid",
        "transport_stream_id": "transportStreamId",
        "video_pid": "videoPid",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings:
    def __init__(
        self,
        *,
        absent_input_audio_behavior: typing.Optional[builtins.str] = None,
        arib: typing.Optional[builtins.str] = None,
        arib_captions_pid: typing.Optional[builtins.str] = None,
        arib_captions_pid_control: typing.Optional[builtins.str] = None,
        audio_buffer_model: typing.Optional[builtins.str] = None,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        audio_stream_type: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buffer_model: typing.Optional[builtins.str] = None,
        cc_descriptor: typing.Optional[builtins.str] = None,
        dvb_nit_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sdt_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sub_pids: typing.Optional[builtins.str] = None,
        dvb_tdt_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_teletext_pid: typing.Optional[builtins.str] = None,
        ebif: typing.Optional[builtins.str] = None,
        ebp_audio_interval: typing.Optional[builtins.str] = None,
        ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
        ebp_placement: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        es_rate_in_pes: typing.Optional[builtins.str] = None,
        etv_platform_pid: typing.Optional[builtins.str] = None,
        etv_signal_pid: typing.Optional[builtins.str] = None,
        fragment_time: typing.Optional[jsii.Number] = None,
        klv: typing.Optional[builtins.str] = None,
        klv_data_pids: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        null_packet_bitrate: typing.Optional[jsii.Number] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        rate_mode: typing.Optional[builtins.str] = None,
        scte27_pids: typing.Optional[builtins.str] = None,
        scte35_control: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        segmentation_markers: typing.Optional[builtins.str] = None,
        segmentation_style: typing.Optional[builtins.str] = None,
        segmentation_time: typing.Optional[jsii.Number] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param absent_input_audio_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.
        :param arib: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib MedialiveChannel#arib}.
        :param arib_captions_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.
        :param arib_captions_pid_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.
        :param audio_buffer_model: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param audio_stream_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buffer_model: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_model MedialiveChannel#buffer_model}.
        :param cc_descriptor: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.
        :param dvb_nit_settings: dvb_nit_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        :param dvb_sdt_settings: dvb_sdt_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        :param dvb_sub_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param dvb_teletext_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.
        :param ebif: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebif MedialiveChannel#ebif}.
        :param ebp_audio_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.
        :param ebp_lookahead_ms: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.
        :param ebp_placement: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param es_rate_in_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.
        :param etv_platform_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.
        :param etv_signal_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.
        :param fragment_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_time MedialiveChannel#fragment_time}.
        :param klv: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv MedialiveChannel#klv}.
        :param klv_data_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param null_packet_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.
        :param pat_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.
        :param rate_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_mode MedialiveChannel#rate_mode}.
        :param scte27_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.
        :param scte35_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_control MedialiveChannel#scte35_control}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param segmentation_markers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.
        :param segmentation_style: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.
        :param segmentation_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        if isinstance(dvb_nit_settings, dict):
            dvb_nit_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(**dvb_nit_settings)
        if isinstance(dvb_sdt_settings, dict):
            dvb_sdt_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(**dvb_sdt_settings)
        if isinstance(dvb_tdt_settings, dict):
            dvb_tdt_settings = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(**dvb_tdt_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de362bda90236e4c12bfa55069fe4ebc3f1e1014648025e3dc22ac157bc5113f)
            check_type(argname="argument absent_input_audio_behavior", value=absent_input_audio_behavior, expected_type=type_hints["absent_input_audio_behavior"])
            check_type(argname="argument arib", value=arib, expected_type=type_hints["arib"])
            check_type(argname="argument arib_captions_pid", value=arib_captions_pid, expected_type=type_hints["arib_captions_pid"])
            check_type(argname="argument arib_captions_pid_control", value=arib_captions_pid_control, expected_type=type_hints["arib_captions_pid_control"])
            check_type(argname="argument audio_buffer_model", value=audio_buffer_model, expected_type=type_hints["audio_buffer_model"])
            check_type(argname="argument audio_frames_per_pes", value=audio_frames_per_pes, expected_type=type_hints["audio_frames_per_pes"])
            check_type(argname="argument audio_pids", value=audio_pids, expected_type=type_hints["audio_pids"])
            check_type(argname="argument audio_stream_type", value=audio_stream_type, expected_type=type_hints["audio_stream_type"])
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument buffer_model", value=buffer_model, expected_type=type_hints["buffer_model"])
            check_type(argname="argument cc_descriptor", value=cc_descriptor, expected_type=type_hints["cc_descriptor"])
            check_type(argname="argument dvb_nit_settings", value=dvb_nit_settings, expected_type=type_hints["dvb_nit_settings"])
            check_type(argname="argument dvb_sdt_settings", value=dvb_sdt_settings, expected_type=type_hints["dvb_sdt_settings"])
            check_type(argname="argument dvb_sub_pids", value=dvb_sub_pids, expected_type=type_hints["dvb_sub_pids"])
            check_type(argname="argument dvb_tdt_settings", value=dvb_tdt_settings, expected_type=type_hints["dvb_tdt_settings"])
            check_type(argname="argument dvb_teletext_pid", value=dvb_teletext_pid, expected_type=type_hints["dvb_teletext_pid"])
            check_type(argname="argument ebif", value=ebif, expected_type=type_hints["ebif"])
            check_type(argname="argument ebp_audio_interval", value=ebp_audio_interval, expected_type=type_hints["ebp_audio_interval"])
            check_type(argname="argument ebp_lookahead_ms", value=ebp_lookahead_ms, expected_type=type_hints["ebp_lookahead_ms"])
            check_type(argname="argument ebp_placement", value=ebp_placement, expected_type=type_hints["ebp_placement"])
            check_type(argname="argument ecm_pid", value=ecm_pid, expected_type=type_hints["ecm_pid"])
            check_type(argname="argument es_rate_in_pes", value=es_rate_in_pes, expected_type=type_hints["es_rate_in_pes"])
            check_type(argname="argument etv_platform_pid", value=etv_platform_pid, expected_type=type_hints["etv_platform_pid"])
            check_type(argname="argument etv_signal_pid", value=etv_signal_pid, expected_type=type_hints["etv_signal_pid"])
            check_type(argname="argument fragment_time", value=fragment_time, expected_type=type_hints["fragment_time"])
            check_type(argname="argument klv", value=klv, expected_type=type_hints["klv"])
            check_type(argname="argument klv_data_pids", value=klv_data_pids, expected_type=type_hints["klv_data_pids"])
            check_type(argname="argument nielsen_id3_behavior", value=nielsen_id3_behavior, expected_type=type_hints["nielsen_id3_behavior"])
            check_type(argname="argument null_packet_bitrate", value=null_packet_bitrate, expected_type=type_hints["null_packet_bitrate"])
            check_type(argname="argument pat_interval", value=pat_interval, expected_type=type_hints["pat_interval"])
            check_type(argname="argument pcr_control", value=pcr_control, expected_type=type_hints["pcr_control"])
            check_type(argname="argument pcr_period", value=pcr_period, expected_type=type_hints["pcr_period"])
            check_type(argname="argument pcr_pid", value=pcr_pid, expected_type=type_hints["pcr_pid"])
            check_type(argname="argument pmt_interval", value=pmt_interval, expected_type=type_hints["pmt_interval"])
            check_type(argname="argument pmt_pid", value=pmt_pid, expected_type=type_hints["pmt_pid"])
            check_type(argname="argument program_num", value=program_num, expected_type=type_hints["program_num"])
            check_type(argname="argument rate_mode", value=rate_mode, expected_type=type_hints["rate_mode"])
            check_type(argname="argument scte27_pids", value=scte27_pids, expected_type=type_hints["scte27_pids"])
            check_type(argname="argument scte35_control", value=scte35_control, expected_type=type_hints["scte35_control"])
            check_type(argname="argument scte35_pid", value=scte35_pid, expected_type=type_hints["scte35_pid"])
            check_type(argname="argument segmentation_markers", value=segmentation_markers, expected_type=type_hints["segmentation_markers"])
            check_type(argname="argument segmentation_style", value=segmentation_style, expected_type=type_hints["segmentation_style"])
            check_type(argname="argument segmentation_time", value=segmentation_time, expected_type=type_hints["segmentation_time"])
            check_type(argname="argument timed_metadata_behavior", value=timed_metadata_behavior, expected_type=type_hints["timed_metadata_behavior"])
            check_type(argname="argument timed_metadata_pid", value=timed_metadata_pid, expected_type=type_hints["timed_metadata_pid"])
            check_type(argname="argument transport_stream_id", value=transport_stream_id, expected_type=type_hints["transport_stream_id"])
            check_type(argname="argument video_pid", value=video_pid, expected_type=type_hints["video_pid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if absent_input_audio_behavior is not None:
            self._values["absent_input_audio_behavior"] = absent_input_audio_behavior
        if arib is not None:
            self._values["arib"] = arib
        if arib_captions_pid is not None:
            self._values["arib_captions_pid"] = arib_captions_pid
        if arib_captions_pid_control is not None:
            self._values["arib_captions_pid_control"] = arib_captions_pid_control
        if audio_buffer_model is not None:
            self._values["audio_buffer_model"] = audio_buffer_model
        if audio_frames_per_pes is not None:
            self._values["audio_frames_per_pes"] = audio_frames_per_pes
        if audio_pids is not None:
            self._values["audio_pids"] = audio_pids
        if audio_stream_type is not None:
            self._values["audio_stream_type"] = audio_stream_type
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if buffer_model is not None:
            self._values["buffer_model"] = buffer_model
        if cc_descriptor is not None:
            self._values["cc_descriptor"] = cc_descriptor
        if dvb_nit_settings is not None:
            self._values["dvb_nit_settings"] = dvb_nit_settings
        if dvb_sdt_settings is not None:
            self._values["dvb_sdt_settings"] = dvb_sdt_settings
        if dvb_sub_pids is not None:
            self._values["dvb_sub_pids"] = dvb_sub_pids
        if dvb_tdt_settings is not None:
            self._values["dvb_tdt_settings"] = dvb_tdt_settings
        if dvb_teletext_pid is not None:
            self._values["dvb_teletext_pid"] = dvb_teletext_pid
        if ebif is not None:
            self._values["ebif"] = ebif
        if ebp_audio_interval is not None:
            self._values["ebp_audio_interval"] = ebp_audio_interval
        if ebp_lookahead_ms is not None:
            self._values["ebp_lookahead_ms"] = ebp_lookahead_ms
        if ebp_placement is not None:
            self._values["ebp_placement"] = ebp_placement
        if ecm_pid is not None:
            self._values["ecm_pid"] = ecm_pid
        if es_rate_in_pes is not None:
            self._values["es_rate_in_pes"] = es_rate_in_pes
        if etv_platform_pid is not None:
            self._values["etv_platform_pid"] = etv_platform_pid
        if etv_signal_pid is not None:
            self._values["etv_signal_pid"] = etv_signal_pid
        if fragment_time is not None:
            self._values["fragment_time"] = fragment_time
        if klv is not None:
            self._values["klv"] = klv
        if klv_data_pids is not None:
            self._values["klv_data_pids"] = klv_data_pids
        if nielsen_id3_behavior is not None:
            self._values["nielsen_id3_behavior"] = nielsen_id3_behavior
        if null_packet_bitrate is not None:
            self._values["null_packet_bitrate"] = null_packet_bitrate
        if pat_interval is not None:
            self._values["pat_interval"] = pat_interval
        if pcr_control is not None:
            self._values["pcr_control"] = pcr_control
        if pcr_period is not None:
            self._values["pcr_period"] = pcr_period
        if pcr_pid is not None:
            self._values["pcr_pid"] = pcr_pid
        if pmt_interval is not None:
            self._values["pmt_interval"] = pmt_interval
        if pmt_pid is not None:
            self._values["pmt_pid"] = pmt_pid
        if program_num is not None:
            self._values["program_num"] = program_num
        if rate_mode is not None:
            self._values["rate_mode"] = rate_mode
        if scte27_pids is not None:
            self._values["scte27_pids"] = scte27_pids
        if scte35_control is not None:
            self._values["scte35_control"] = scte35_control
        if scte35_pid is not None:
            self._values["scte35_pid"] = scte35_pid
        if segmentation_markers is not None:
            self._values["segmentation_markers"] = segmentation_markers
        if segmentation_style is not None:
            self._values["segmentation_style"] = segmentation_style
        if segmentation_time is not None:
            self._values["segmentation_time"] = segmentation_time
        if timed_metadata_behavior is not None:
            self._values["timed_metadata_behavior"] = timed_metadata_behavior
        if timed_metadata_pid is not None:
            self._values["timed_metadata_pid"] = timed_metadata_pid
        if transport_stream_id is not None:
            self._values["transport_stream_id"] = transport_stream_id
        if video_pid is not None:
            self._values["video_pid"] = video_pid

    @builtins.property
    def absent_input_audio_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.'''
        result = self._values.get("absent_input_audio_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib MedialiveChannel#arib}.'''
        result = self._values.get("arib")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib_captions_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.'''
        result = self._values.get("arib_captions_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def arib_captions_pid_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.'''
        result = self._values.get("arib_captions_pid_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_buffer_model(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.'''
        result = self._values.get("audio_buffer_model")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_frames_per_pes(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.'''
        result = self._values.get("audio_frames_per_pes")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def audio_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.'''
        result = self._values.get("audio_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def audio_stream_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.'''
        result = self._values.get("audio_stream_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buffer_model(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_model MedialiveChannel#buffer_model}.'''
        result = self._values.get("buffer_model")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def cc_descriptor(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.'''
        result = self._values.get("cc_descriptor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dvb_nit_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings"]:
        '''dvb_nit_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        '''
        result = self._values.get("dvb_nit_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings"], result)

    @builtins.property
    def dvb_sdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings"]:
        '''dvb_sdt_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        '''
        result = self._values.get("dvb_sdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings"], result)

    @builtins.property
    def dvb_sub_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.'''
        result = self._values.get("dvb_sub_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def dvb_tdt_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings"]:
        '''dvb_tdt_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        '''
        result = self._values.get("dvb_tdt_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings"], result)

    @builtins.property
    def dvb_teletext_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.'''
        result = self._values.get("dvb_teletext_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebif(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebif MedialiveChannel#ebif}.'''
        result = self._values.get("ebif")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebp_audio_interval(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.'''
        result = self._values.get("ebp_audio_interval")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ebp_lookahead_ms(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.'''
        result = self._values.get("ebp_lookahead_ms")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def ebp_placement(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.'''
        result = self._values.get("ebp_placement")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def ecm_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.'''
        result = self._values.get("ecm_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def es_rate_in_pes(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.'''
        result = self._values.get("es_rate_in_pes")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def etv_platform_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.'''
        result = self._values.get("etv_platform_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def etv_signal_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.'''
        result = self._values.get("etv_signal_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def fragment_time(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_time MedialiveChannel#fragment_time}.'''
        result = self._values.get("fragment_time")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def klv(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv MedialiveChannel#klv}.'''
        result = self._values.get("klv")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def klv_data_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.'''
        result = self._values.get("klv_data_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def nielsen_id3_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.'''
        result = self._values.get("nielsen_id3_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def null_packet_bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.'''
        result = self._values.get("null_packet_bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pat_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.'''
        result = self._values.get("pat_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.'''
        result = self._values.get("pcr_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pcr_period(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.'''
        result = self._values.get("pcr_period")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pcr_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.'''
        result = self._values.get("pcr_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pmt_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.'''
        result = self._values.get("pmt_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def pmt_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.'''
        result = self._values.get("pmt_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def program_num(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.'''
        result = self._values.get("program_num")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def rate_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_mode MedialiveChannel#rate_mode}.'''
        result = self._values.get("rate_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte27_pids(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.'''
        result = self._values.get("scte27_pids")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_control MedialiveChannel#scte35_control}.'''
        result = self._values.get("scte35_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte35_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.'''
        result = self._values.get("scte35_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_markers(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.'''
        result = self._values.get("segmentation_markers")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_style(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.'''
        result = self._values.get("segmentation_style")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def segmentation_time(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.'''
        result = self._values.get("segmentation_time")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def timed_metadata_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.'''
        result = self._values.get("timed_metadata_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timed_metadata_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.'''
        result = self._values.get("timed_metadata_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def transport_stream_id(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.'''
        result = self._values.get("transport_stream_id")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def video_pid(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.'''
        result = self._values.get("video_pid")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings",
    jsii_struct_bases=[],
    name_mapping={
        "network_id": "networkId",
        "network_name": "networkName",
        "rep_interval": "repInterval",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings:
    def __init__(
        self,
        *,
        network_id: jsii.Number,
        network_name: builtins.str,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param network_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_id MedialiveChannel#network_id}.
        :param network_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_name MedialiveChannel#network_name}.
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3bb082e816be0aea5c4958250ce7232a1b517f9a4a6552efc59dad531429d1a)
            check_type(argname="argument network_id", value=network_id, expected_type=type_hints["network_id"])
            check_type(argname="argument network_name", value=network_name, expected_type=type_hints["network_name"])
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "network_id": network_id,
            "network_name": network_name,
        }
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval

    @builtins.property
    def network_id(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_id MedialiveChannel#network_id}.'''
        result = self._values.get("network_id")
        assert result is not None, "Required property 'network_id' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def network_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_name MedialiveChannel#network_name}.'''
        result = self._values.get("network_name")
        assert result is not None, "Required property 'network_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__51b228249d43bf1a9eb63bf1ab6487c9a3d731062a7a0fb1bef2ea39feaecd1a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @builtins.property
    @jsii.member(jsii_name="networkIdInput")
    def network_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "networkIdInput"))

    @builtins.property
    @jsii.member(jsii_name="networkNameInput")
    def network_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "networkNameInput"))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="networkId")
    def network_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "networkId"))

    @network_id.setter
    def network_id(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f12de739ac1f8b23e5ba95feefbaf200a4e6a8b844da23347801639c197acee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "networkId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="networkName")
    def network_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "networkName"))

    @network_name.setter
    def network_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c22a761a3973258e1fd8a2a9a397e32f7bf244c2b510b23be04bfd4e4ad5659d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "networkName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1997326dbd7ac72604bd1e9b9c06b1cf7ab64ffc499abf60fdd7f1c4f63af967)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__134077a70c0b0bab3b498a9df550107ddab53cfc3a73d12a3600ad28c2c7f9a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings",
    jsii_struct_bases=[],
    name_mapping={
        "output_sdt": "outputSdt",
        "rep_interval": "repInterval",
        "service_name": "serviceName",
        "service_provider_name": "serviceProviderName",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings:
    def __init__(
        self,
        *,
        output_sdt: typing.Optional[builtins.str] = None,
        rep_interval: typing.Optional[jsii.Number] = None,
        service_name: typing.Optional[builtins.str] = None,
        service_provider_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_sdt: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_sdt MedialiveChannel#output_sdt}.
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        :param service_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_name MedialiveChannel#service_name}.
        :param service_provider_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84cea417afa48eb04ac59523e6f306eefedcca10d824c253cfe60fdb40c69c73)
            check_type(argname="argument output_sdt", value=output_sdt, expected_type=type_hints["output_sdt"])
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
            check_type(argname="argument service_name", value=service_name, expected_type=type_hints["service_name"])
            check_type(argname="argument service_provider_name", value=service_provider_name, expected_type=type_hints["service_provider_name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if output_sdt is not None:
            self._values["output_sdt"] = output_sdt
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval
        if service_name is not None:
            self._values["service_name"] = service_name
        if service_provider_name is not None:
            self._values["service_provider_name"] = service_provider_name

    @builtins.property
    def output_sdt(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_sdt MedialiveChannel#output_sdt}.'''
        result = self._values.get("output_sdt")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def service_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_name MedialiveChannel#service_name}.'''
        result = self._values.get("service_name")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def service_provider_name(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.'''
        result = self._values.get("service_provider_name")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__585a33bb2e749279ad89c2b0bbc75a08693f650ee8b1fd6956f60016c273a3d0)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetOutputSdt")
    def reset_output_sdt(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputSdt", []))

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @jsii.member(jsii_name="resetServiceName")
    def reset_service_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceName", []))

    @jsii.member(jsii_name="resetServiceProviderName")
    def reset_service_provider_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServiceProviderName", []))

    @builtins.property
    @jsii.member(jsii_name="outputSdtInput")
    def output_sdt_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "outputSdtInput"))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceNameInput")
    def service_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serviceNameInput"))

    @builtins.property
    @jsii.member(jsii_name="serviceProviderNameInput")
    def service_provider_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serviceProviderNameInput"))

    @builtins.property
    @jsii.member(jsii_name="outputSdt")
    def output_sdt(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "outputSdt"))

    @output_sdt.setter
    def output_sdt(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7f700ebae4cdc416a656cfd737a2149671949a415d26f20c5511979823cfe20)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "outputSdt", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e9650e9c631b83f805acc5571e719436c8c58c7132812f3e373d92b7ff5ca1ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="serviceName")
    def service_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serviceName"))

    @service_name.setter
    def service_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0d611add899628a387421282be1e73150857110edcf4db3281c4b4f8e356578)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="serviceProviderName")
    def service_provider_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serviceProviderName"))

    @service_provider_name.setter
    def service_provider_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cdafb2800c6afdbfe7fcf9828cdb02c17afce8dd28d68f1897783fde75188dad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serviceProviderName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1921ca21fe40e03c2399d10d7e81406a9388fe4d95938dc4566e52eb8d5afa6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings",
    jsii_struct_bases=[],
    name_mapping={"rep_interval": "repInterval"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings:
    def __init__(self, *, rep_interval: typing.Optional[jsii.Number] = None) -> None:
        '''
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7931fb0830c916ceb138411454a83cb7a3d260e64e56d37dad7be0802ffb6447)
            check_type(argname="argument rep_interval", value=rep_interval, expected_type=type_hints["rep_interval"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if rep_interval is not None:
            self._values["rep_interval"] = rep_interval

    @builtins.property
    def rep_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.'''
        result = self._values.get("rep_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__803fcf3294aa965af1038f7fc6e07c4669cc9b0931abe080a2b6c8d4dcb8ac81)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetRepInterval")
    def reset_rep_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRepInterval", []))

    @builtins.property
    @jsii.member(jsii_name="repIntervalInput")
    def rep_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "repIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="repInterval")
    def rep_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "repInterval"))

    @rep_interval.setter
    def rep_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27213b76c1c7486bca18e6c23ec7eadce070f8959fbf44cea537f071b134d7d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "repInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ca33f5e09c0235a9bc6df85f63ae660a423528c4b9032aea240518cd18cf8d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff6ea4b1ec30dc1ef8199095ccdb09dd51583401941d2d28f340aa03688da6e1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDvbNitSettings")
    def put_dvb_nit_settings(
        self,
        *,
        network_id: jsii.Number,
        network_name: builtins.str,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param network_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_id MedialiveChannel#network_id}.
        :param network_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_name MedialiveChannel#network_name}.
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings(
            network_id=network_id, network_name=network_name, rep_interval=rep_interval
        )

        return typing.cast(None, jsii.invoke(self, "putDvbNitSettings", [value]))

    @jsii.member(jsii_name="putDvbSdtSettings")
    def put_dvb_sdt_settings(
        self,
        *,
        output_sdt: typing.Optional[builtins.str] = None,
        rep_interval: typing.Optional[jsii.Number] = None,
        service_name: typing.Optional[builtins.str] = None,
        service_provider_name: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_sdt: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_sdt MedialiveChannel#output_sdt}.
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        :param service_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_name MedialiveChannel#service_name}.
        :param service_provider_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#service_provider_name MedialiveChannel#service_provider_name}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings(
            output_sdt=output_sdt,
            rep_interval=rep_interval,
            service_name=service_name,
            service_provider_name=service_provider_name,
        )

        return typing.cast(None, jsii.invoke(self, "putDvbSdtSettings", [value]))

    @jsii.member(jsii_name="putDvbTdtSettings")
    def put_dvb_tdt_settings(
        self,
        *,
        rep_interval: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param rep_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rep_interval MedialiveChannel#rep_interval}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings(
            rep_interval=rep_interval
        )

        return typing.cast(None, jsii.invoke(self, "putDvbTdtSettings", [value]))

    @jsii.member(jsii_name="resetAbsentInputAudioBehavior")
    def reset_absent_input_audio_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAbsentInputAudioBehavior", []))

    @jsii.member(jsii_name="resetArib")
    def reset_arib(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArib", []))

    @jsii.member(jsii_name="resetAribCaptionsPid")
    def reset_arib_captions_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribCaptionsPid", []))

    @jsii.member(jsii_name="resetAribCaptionsPidControl")
    def reset_arib_captions_pid_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribCaptionsPidControl", []))

    @jsii.member(jsii_name="resetAudioBufferModel")
    def reset_audio_buffer_model(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioBufferModel", []))

    @jsii.member(jsii_name="resetAudioFramesPerPes")
    def reset_audio_frames_per_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioFramesPerPes", []))

    @jsii.member(jsii_name="resetAudioPids")
    def reset_audio_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioPids", []))

    @jsii.member(jsii_name="resetAudioStreamType")
    def reset_audio_stream_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioStreamType", []))

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBufferModel")
    def reset_buffer_model(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufferModel", []))

    @jsii.member(jsii_name="resetCcDescriptor")
    def reset_cc_descriptor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCcDescriptor", []))

    @jsii.member(jsii_name="resetDvbNitSettings")
    def reset_dvb_nit_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbNitSettings", []))

    @jsii.member(jsii_name="resetDvbSdtSettings")
    def reset_dvb_sdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSdtSettings", []))

    @jsii.member(jsii_name="resetDvbSubPids")
    def reset_dvb_sub_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSubPids", []))

    @jsii.member(jsii_name="resetDvbTdtSettings")
    def reset_dvb_tdt_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTdtSettings", []))

    @jsii.member(jsii_name="resetDvbTeletextPid")
    def reset_dvb_teletext_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbTeletextPid", []))

    @jsii.member(jsii_name="resetEbif")
    def reset_ebif(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbif", []))

    @jsii.member(jsii_name="resetEbpAudioInterval")
    def reset_ebp_audio_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpAudioInterval", []))

    @jsii.member(jsii_name="resetEbpLookaheadMs")
    def reset_ebp_lookahead_ms(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpLookaheadMs", []))

    @jsii.member(jsii_name="resetEbpPlacement")
    def reset_ebp_placement(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEbpPlacement", []))

    @jsii.member(jsii_name="resetEcmPid")
    def reset_ecm_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcmPid", []))

    @jsii.member(jsii_name="resetEsRateInPes")
    def reset_es_rate_in_pes(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEsRateInPes", []))

    @jsii.member(jsii_name="resetEtvPlatformPid")
    def reset_etv_platform_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEtvPlatformPid", []))

    @jsii.member(jsii_name="resetEtvSignalPid")
    def reset_etv_signal_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEtvSignalPid", []))

    @jsii.member(jsii_name="resetFragmentTime")
    def reset_fragment_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFragmentTime", []))

    @jsii.member(jsii_name="resetKlv")
    def reset_klv(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKlv", []))

    @jsii.member(jsii_name="resetKlvDataPids")
    def reset_klv_data_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetKlvDataPids", []))

    @jsii.member(jsii_name="resetNielsenId3Behavior")
    def reset_nielsen_id3_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenId3Behavior", []))

    @jsii.member(jsii_name="resetNullPacketBitrate")
    def reset_null_packet_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNullPacketBitrate", []))

    @jsii.member(jsii_name="resetPatInterval")
    def reset_pat_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPatInterval", []))

    @jsii.member(jsii_name="resetPcrControl")
    def reset_pcr_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrControl", []))

    @jsii.member(jsii_name="resetPcrPeriod")
    def reset_pcr_period(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPeriod", []))

    @jsii.member(jsii_name="resetPcrPid")
    def reset_pcr_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPcrPid", []))

    @jsii.member(jsii_name="resetPmtInterval")
    def reset_pmt_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtInterval", []))

    @jsii.member(jsii_name="resetPmtPid")
    def reset_pmt_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPmtPid", []))

    @jsii.member(jsii_name="resetProgramNum")
    def reset_program_num(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProgramNum", []))

    @jsii.member(jsii_name="resetRateMode")
    def reset_rate_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRateMode", []))

    @jsii.member(jsii_name="resetScte27Pids")
    def reset_scte27_pids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte27Pids", []))

    @jsii.member(jsii_name="resetScte35Control")
    def reset_scte35_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Control", []))

    @jsii.member(jsii_name="resetScte35Pid")
    def reset_scte35_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Pid", []))

    @jsii.member(jsii_name="resetSegmentationMarkers")
    def reset_segmentation_markers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationMarkers", []))

    @jsii.member(jsii_name="resetSegmentationStyle")
    def reset_segmentation_style(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationStyle", []))

    @jsii.member(jsii_name="resetSegmentationTime")
    def reset_segmentation_time(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSegmentationTime", []))

    @jsii.member(jsii_name="resetTimedMetadataBehavior")
    def reset_timed_metadata_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataBehavior", []))

    @jsii.member(jsii_name="resetTimedMetadataPid")
    def reset_timed_metadata_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimedMetadataPid", []))

    @jsii.member(jsii_name="resetTransportStreamId")
    def reset_transport_stream_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTransportStreamId", []))

    @jsii.member(jsii_name="resetVideoPid")
    def reset_video_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoPid", []))

    @builtins.property
    @jsii.member(jsii_name="dvbNitSettings")
    def dvb_nit_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference, jsii.get(self, "dvbNitSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbSdtSettings")
    def dvb_sdt_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference, jsii.get(self, "dvbSdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettings")
    def dvb_tdt_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference, jsii.get(self, "dvbTdtSettings"))

    @builtins.property
    @jsii.member(jsii_name="absentInputAudioBehaviorInput")
    def absent_input_audio_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "absentInputAudioBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidControlInput")
    def arib_captions_pid_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribCaptionsPidControlInput"))

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidInput")
    def arib_captions_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribCaptionsPidInput"))

    @builtins.property
    @jsii.member(jsii_name="aribInput")
    def arib_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "aribInput"))

    @builtins.property
    @jsii.member(jsii_name="audioBufferModelInput")
    def audio_buffer_model_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioBufferModelInput"))

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPesInput")
    def audio_frames_per_pes_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "audioFramesPerPesInput"))

    @builtins.property
    @jsii.member(jsii_name="audioPidsInput")
    def audio_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="audioStreamTypeInput")
    def audio_stream_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioStreamTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bufferModelInput")
    def buffer_model_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "bufferModelInput"))

    @builtins.property
    @jsii.member(jsii_name="ccDescriptorInput")
    def cc_descriptor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ccDescriptorInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbNitSettingsInput")
    def dvb_nit_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings], jsii.get(self, "dvbNitSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSdtSettingsInput")
    def dvb_sdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings], jsii.get(self, "dvbSdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSubPidsInput")
    def dvb_sub_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dvbSubPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTdtSettingsInput")
    def dvb_tdt_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings], jsii.get(self, "dvbTdtSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbTeletextPidInput")
    def dvb_teletext_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "dvbTeletextPidInput"))

    @builtins.property
    @jsii.member(jsii_name="ebifInput")
    def ebif_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebifInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpAudioIntervalInput")
    def ebp_audio_interval_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebpAudioIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpLookaheadMsInput")
    def ebp_lookahead_ms_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "ebpLookaheadMsInput"))

    @builtins.property
    @jsii.member(jsii_name="ebpPlacementInput")
    def ebp_placement_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ebpPlacementInput"))

    @builtins.property
    @jsii.member(jsii_name="ecmPidInput")
    def ecm_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ecmPidInput"))

    @builtins.property
    @jsii.member(jsii_name="esRateInPesInput")
    def es_rate_in_pes_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "esRateInPesInput"))

    @builtins.property
    @jsii.member(jsii_name="etvPlatformPidInput")
    def etv_platform_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "etvPlatformPidInput"))

    @builtins.property
    @jsii.member(jsii_name="etvSignalPidInput")
    def etv_signal_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "etvSignalPidInput"))

    @builtins.property
    @jsii.member(jsii_name="fragmentTimeInput")
    def fragment_time_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "fragmentTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="klvDataPidsInput")
    def klv_data_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "klvDataPidsInput"))

    @builtins.property
    @jsii.member(jsii_name="klvInput")
    def klv_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "klvInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenId3BehaviorInput")
    def nielsen_id3_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nielsenId3BehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="nullPacketBitrateInput")
    def null_packet_bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "nullPacketBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="patIntervalInput")
    def pat_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "patIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrControlInput")
    def pcr_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrControlInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPeriodInput")
    def pcr_period_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pcrPeriodInput"))

    @builtins.property
    @jsii.member(jsii_name="pcrPidInput")
    def pcr_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pcrPidInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtIntervalInput")
    def pmt_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pmtIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="pmtPidInput")
    def pmt_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pmtPidInput"))

    @builtins.property
    @jsii.member(jsii_name="programNumInput")
    def program_num_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "programNumInput"))

    @builtins.property
    @jsii.member(jsii_name="rateModeInput")
    def rate_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rateModeInput"))

    @builtins.property
    @jsii.member(jsii_name="scte27PidsInput")
    def scte27_pids_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte27PidsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35ControlInput")
    def scte35_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35ControlInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35PidInput")
    def scte35_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35PidInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationMarkersInput")
    def segmentation_markers_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationMarkersInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationStyleInput")
    def segmentation_style_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "segmentationStyleInput"))

    @builtins.property
    @jsii.member(jsii_name="segmentationTimeInput")
    def segmentation_time_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "segmentationTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehaviorInput")
    def timed_metadata_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPidInput")
    def timed_metadata_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timedMetadataPidInput"))

    @builtins.property
    @jsii.member(jsii_name="transportStreamIdInput")
    def transport_stream_id_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "transportStreamIdInput"))

    @builtins.property
    @jsii.member(jsii_name="videoPidInput")
    def video_pid_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "videoPidInput"))

    @builtins.property
    @jsii.member(jsii_name="absentInputAudioBehavior")
    def absent_input_audio_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "absentInputAudioBehavior"))

    @absent_input_audio_behavior.setter
    def absent_input_audio_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd06baf3b60a36a9f3f2ae4990ad656630021979f422c2e5e532223c29fd16b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "absentInputAudioBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="arib")
    def arib(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "arib"))

    @arib.setter
    def arib(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82bda8c9169b61d79b3f4232d08d01ca4272f1951d07aef0e3d6559b4fbcfaf5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "arib", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPid")
    def arib_captions_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aribCaptionsPid"))

    @arib_captions_pid.setter
    def arib_captions_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4c72a219337768856388c02261d4fca3db28b4a0edfa02bae1ab2b48fd9bfb7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "aribCaptionsPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="aribCaptionsPidControl")
    def arib_captions_pid_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "aribCaptionsPidControl"))

    @arib_captions_pid_control.setter
    def arib_captions_pid_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e38087c79df867008c6633af854f990b33b3f9f836d0c30fcc2d647f4d58c54)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "aribCaptionsPidControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioBufferModel")
    def audio_buffer_model(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioBufferModel"))

    @audio_buffer_model.setter
    def audio_buffer_model(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__baef4cb75f1966b629e8ebdef9b78c5d561ea5301731c4b220ccb1786207efe0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioBufferModel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioFramesPerPes")
    def audio_frames_per_pes(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "audioFramesPerPes"))

    @audio_frames_per_pes.setter
    def audio_frames_per_pes(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__516a3b24306ff5cb1bce1a78fa12de2c44f87fc1c17fe9662ae36c4247d9eade)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioFramesPerPes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioPids")
    def audio_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioPids"))

    @audio_pids.setter
    def audio_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8f002a2ba3e8d41d4c52312eab8a83b9a8139b4f548f154d9a54abfbb3f5d9e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioPids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioStreamType")
    def audio_stream_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioStreamType"))

    @audio_stream_type.setter
    def audio_stream_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__492faa3a472aa61e79e77d869cf6ac96e02a86d3b5f5a94daf0533c9dcc04468)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioStreamType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d7911e1b36efcb58195d0164152324e4ae187043370b038a64a9bc1b3cf3ee0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bufferModel")
    def buffer_model(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "bufferModel"))

    @buffer_model.setter
    def buffer_model(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e66a031fbe956dad1c2ecb2c3a9335ef0d96b78d0fc589c2f3071e8f0cbc4c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufferModel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ccDescriptor")
    def cc_descriptor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ccDescriptor"))

    @cc_descriptor.setter
    def cc_descriptor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f839704cddf38b6cda2a22300c45cfb49fe9ae158305c9f830b6e8058f3add9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ccDescriptor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="dvbSubPids")
    def dvb_sub_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dvbSubPids"))

    @dvb_sub_pids.setter
    def dvb_sub_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1c46556d5d42e2629e542484975218e5313e7b8ec40bc1b63cfd32086e862de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dvbSubPids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="dvbTeletextPid")
    def dvb_teletext_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "dvbTeletextPid"))

    @dvb_teletext_pid.setter
    def dvb_teletext_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f34e29301b8b9c00aa67449a3ede2c93dbc50988e83794c6dc56da6b32cf55ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "dvbTeletextPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ebif")
    def ebif(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebif"))

    @ebif.setter
    def ebif(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca1da46eb67189a62ed7ad2f946270003904751cfb098222dfd273f77b60a791)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebif", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ebpAudioInterval")
    def ebp_audio_interval(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebpAudioInterval"))

    @ebp_audio_interval.setter
    def ebp_audio_interval(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d4b5d92f93abd14b456d85a7ec615f5454b83e763be704341aa46446630cec3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpAudioInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ebpLookaheadMs")
    def ebp_lookahead_ms(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "ebpLookaheadMs"))

    @ebp_lookahead_ms.setter
    def ebp_lookahead_ms(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75aec7c4703f02e7ec5eb229687a4351681a2613bb2e82d81fc64766669694b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpLookaheadMs", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ebpPlacement")
    def ebp_placement(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ebpPlacement"))

    @ebp_placement.setter
    def ebp_placement(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__102695b0be65ea6a9ae81fe3271bf2e6344e79567dbb3da35e66b573ba8f0983)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ebpPlacement", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="ecmPid")
    def ecm_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ecmPid"))

    @ecm_pid.setter
    def ecm_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f3677c20218c675d9edfcc8c75e37ae7aad4559b9483539f0a8204e77ef07eda)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ecmPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="esRateInPes")
    def es_rate_in_pes(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "esRateInPes"))

    @es_rate_in_pes.setter
    def es_rate_in_pes(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__90878f46c992a9ca5a95cf7ded50828dcdbd51b6260350f1aa11ea9402ae467f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "esRateInPes", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="etvPlatformPid")
    def etv_platform_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "etvPlatformPid"))

    @etv_platform_pid.setter
    def etv_platform_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fcfe80c43ab3895a1e851ed5e0f1deb862c40955410d74df8009f5cb47eb817b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "etvPlatformPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="etvSignalPid")
    def etv_signal_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "etvSignalPid"))

    @etv_signal_pid.setter
    def etv_signal_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c613f79b4d167eba2315e38f04ff8811dd7b7f09aff348285d394219f540534c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "etvSignalPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fragmentTime")
    def fragment_time(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "fragmentTime"))

    @fragment_time.setter
    def fragment_time(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c42793fa2e03807f4ef3a2e8d8a395ef107d16a85f010d0ff7881904daf19572)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fragmentTime", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="klv")
    def klv(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "klv"))

    @klv.setter
    def klv(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e5e98ce0b0fd62a5831ce5e8ca1112caec2b05e5b63e0a805ab2f6779c4a848)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "klv", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="klvDataPids")
    def klv_data_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "klvDataPids"))

    @klv_data_pids.setter
    def klv_data_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13322a0d69788c9d497e6eae345088e54e76703faf57458f2dd39daa8bd5fc6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "klvDataPids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nielsenId3Behavior")
    def nielsen_id3_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "nielsenId3Behavior"))

    @nielsen_id3_behavior.setter
    def nielsen_id3_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ea6d44521debd67ec7c2fc0a8c0ec53ff41b98dc5339679aa75daa170f7003e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nielsenId3Behavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="nullPacketBitrate")
    def null_packet_bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "nullPacketBitrate"))

    @null_packet_bitrate.setter
    def null_packet_bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f9e2320efd95a9d02dcef047bd2735724d829fc04ca9d9663daa4d66093999de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "nullPacketBitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="patInterval")
    def pat_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "patInterval"))

    @pat_interval.setter
    def pat_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a01f5f168d08636f36f7adf71f74384950694fba8ea798fbc4599b8865914a7f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "patInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrControl")
    def pcr_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrControl"))

    @pcr_control.setter
    def pcr_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bec2f828d7fccf8d4bad57773d2c81a54947c064a89b5b494e9b54304df93191)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrPeriod")
    def pcr_period(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pcrPeriod"))

    @pcr_period.setter
    def pcr_period(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__42d6ed3c518f93611f51ed533615756dff678ed1aa715acdd4b93ed9c7ff658b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPeriod", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pcrPid")
    def pcr_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pcrPid"))

    @pcr_pid.setter
    def pcr_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24a02abc2c3ec7e1cede2c459baafbbe63a5744dde46b63526771da5131e9f27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pcrPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pmtInterval")
    def pmt_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pmtInterval"))

    @pmt_interval.setter
    def pmt_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ec6b29c70bb7ba47d60e1e95a5ef0b2d901dd9d4820463ccaeea76ac81646546)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pmtPid")
    def pmt_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pmtPid"))

    @pmt_pid.setter
    def pmt_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__728d25e9bb97b3f72a54055320cea2789d56c5d53680e8c5f596f3b5a555de8c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pmtPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="programNum")
    def program_num(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "programNum"))

    @program_num.setter
    def program_num(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f18321fcddd3c5fd5b691b9ca105c0410cb8edb689c671af232c1087f620b541)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programNum", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="rateMode")
    def rate_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rateMode"))

    @rate_mode.setter
    def rate_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d2538e68ca87a2128fc3ae4f675f19e4ad8625d4b6053ac890698bfd7ed936f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rateMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte27Pids")
    def scte27_pids(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte27Pids"))

    @scte27_pids.setter
    def scte27_pids(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a19c1ec46916864ba1679d40fa76652feb0c2ac14ee4c7518dcbc099adbd624)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte27Pids", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte35Control")
    def scte35_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Control"))

    @scte35_control.setter
    def scte35_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__baea3bac566763bdf100773d4414840f2c7bdcba5364307e290c55c77b647e23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Control", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte35Pid")
    def scte35_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Pid"))

    @scte35_pid.setter
    def scte35_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dbc204c8f3c0ffa8474bd823a90520b760b4e004cccae6d5c113a66869316f53)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Pid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentationMarkers")
    def segmentation_markers(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationMarkers"))

    @segmentation_markers.setter
    def segmentation_markers(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87c0b30e88bfc2b59f9ebe0a030c9413ba21fb0c266a42f8fd22fac94436db6a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationMarkers", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentationStyle")
    def segmentation_style(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "segmentationStyle"))

    @segmentation_style.setter
    def segmentation_style(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__098816e34bbd211cc49d481ec3ca770cd53560624b227e80d130b216f10fc87f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationStyle", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="segmentationTime")
    def segmentation_time(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "segmentationTime"))

    @segmentation_time.setter
    def segmentation_time(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0e77600a5dcd0192b4c54d1ff62b6ba04a1b05d881c79a45ca9719cb4a5fc3a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "segmentationTime", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataBehavior")
    def timed_metadata_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataBehavior"))

    @timed_metadata_behavior.setter
    def timed_metadata_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__80e089bd6d4fd36d57f75062ce9c44cf63f00085ef7ea07a249316c6a589c935)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timedMetadataPid")
    def timed_metadata_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timedMetadataPid"))

    @timed_metadata_pid.setter
    def timed_metadata_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8ed18bab638cb18eddf931ff03f5fbb3f7078f7ea2db9bc570f79b8fc18580d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timedMetadataPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="transportStreamId")
    def transport_stream_id(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "transportStreamId"))

    @transport_stream_id.setter
    def transport_stream_id(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__444aa605cfa3d338dc811dfa87817a777e091ffc51621a9ffc58ba5ae972d149)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "transportStreamId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="videoPid")
    def video_pid(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "videoPid"))

    @video_pid.setter
    def video_pid(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__909b7a864e071288be23b964898bebeb219dfe062c908f9b4217a8d5e84c7271)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoPid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2bb71e2c7dffb5cdb22cb9c7e81737814c1c9ae854816948ec27b494b6e4f6c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98511e6d4ac86e376b5a15c0c4239abba9b6812d37ca508a51e95e31377e0239)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putM2TsSettings")
    def put_m2_ts_settings(
        self,
        *,
        absent_input_audio_behavior: typing.Optional[builtins.str] = None,
        arib: typing.Optional[builtins.str] = None,
        arib_captions_pid: typing.Optional[builtins.str] = None,
        arib_captions_pid_control: typing.Optional[builtins.str] = None,
        audio_buffer_model: typing.Optional[builtins.str] = None,
        audio_frames_per_pes: typing.Optional[jsii.Number] = None,
        audio_pids: typing.Optional[builtins.str] = None,
        audio_stream_type: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buffer_model: typing.Optional[builtins.str] = None,
        cc_descriptor: typing.Optional[builtins.str] = None,
        dvb_nit_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sub_pids: typing.Optional[builtins.str] = None,
        dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_teletext_pid: typing.Optional[builtins.str] = None,
        ebif: typing.Optional[builtins.str] = None,
        ebp_audio_interval: typing.Optional[builtins.str] = None,
        ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
        ebp_placement: typing.Optional[builtins.str] = None,
        ecm_pid: typing.Optional[builtins.str] = None,
        es_rate_in_pes: typing.Optional[builtins.str] = None,
        etv_platform_pid: typing.Optional[builtins.str] = None,
        etv_signal_pid: typing.Optional[builtins.str] = None,
        fragment_time: typing.Optional[jsii.Number] = None,
        klv: typing.Optional[builtins.str] = None,
        klv_data_pids: typing.Optional[builtins.str] = None,
        nielsen_id3_behavior: typing.Optional[builtins.str] = None,
        null_packet_bitrate: typing.Optional[jsii.Number] = None,
        pat_interval: typing.Optional[jsii.Number] = None,
        pcr_control: typing.Optional[builtins.str] = None,
        pcr_period: typing.Optional[jsii.Number] = None,
        pcr_pid: typing.Optional[builtins.str] = None,
        pmt_interval: typing.Optional[jsii.Number] = None,
        pmt_pid: typing.Optional[builtins.str] = None,
        program_num: typing.Optional[jsii.Number] = None,
        rate_mode: typing.Optional[builtins.str] = None,
        scte27_pids: typing.Optional[builtins.str] = None,
        scte35_control: typing.Optional[builtins.str] = None,
        scte35_pid: typing.Optional[builtins.str] = None,
        segmentation_markers: typing.Optional[builtins.str] = None,
        segmentation_style: typing.Optional[builtins.str] = None,
        segmentation_time: typing.Optional[jsii.Number] = None,
        timed_metadata_behavior: typing.Optional[builtins.str] = None,
        timed_metadata_pid: typing.Optional[builtins.str] = None,
        transport_stream_id: typing.Optional[jsii.Number] = None,
        video_pid: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param absent_input_audio_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#absent_input_audio_behavior MedialiveChannel#absent_input_audio_behavior}.
        :param arib: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib MedialiveChannel#arib}.
        :param arib_captions_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid MedialiveChannel#arib_captions_pid}.
        :param arib_captions_pid_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_captions_pid_control MedialiveChannel#arib_captions_pid_control}.
        :param audio_buffer_model: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_buffer_model MedialiveChannel#audio_buffer_model}.
        :param audio_frames_per_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_frames_per_pes MedialiveChannel#audio_frames_per_pes}.
        :param audio_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pids MedialiveChannel#audio_pids}.
        :param audio_stream_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_stream_type MedialiveChannel#audio_stream_type}.
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buffer_model: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_model MedialiveChannel#buffer_model}.
        :param cc_descriptor: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#cc_descriptor MedialiveChannel#cc_descriptor}.
        :param dvb_nit_settings: dvb_nit_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_nit_settings MedialiveChannel#dvb_nit_settings}
        :param dvb_sdt_settings: dvb_sdt_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sdt_settings MedialiveChannel#dvb_sdt_settings}
        :param dvb_sub_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_pids MedialiveChannel#dvb_sub_pids}.
        :param dvb_tdt_settings: dvb_tdt_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_tdt_settings MedialiveChannel#dvb_tdt_settings}
        :param dvb_teletext_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_teletext_pid MedialiveChannel#dvb_teletext_pid}.
        :param ebif: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebif MedialiveChannel#ebif}.
        :param ebp_audio_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_audio_interval MedialiveChannel#ebp_audio_interval}.
        :param ebp_lookahead_ms: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_lookahead_ms MedialiveChannel#ebp_lookahead_ms}.
        :param ebp_placement: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ebp_placement MedialiveChannel#ebp_placement}.
        :param ecm_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ecm_pid MedialiveChannel#ecm_pid}.
        :param es_rate_in_pes: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#es_rate_in_pes MedialiveChannel#es_rate_in_pes}.
        :param etv_platform_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_platform_pid MedialiveChannel#etv_platform_pid}.
        :param etv_signal_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#etv_signal_pid MedialiveChannel#etv_signal_pid}.
        :param fragment_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fragment_time MedialiveChannel#fragment_time}.
        :param klv: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv MedialiveChannel#klv}.
        :param klv_data_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#klv_data_pids MedialiveChannel#klv_data_pids}.
        :param nielsen_id3_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_id3_behavior MedialiveChannel#nielsen_id3_behavior}.
        :param null_packet_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#null_packet_bitrate MedialiveChannel#null_packet_bitrate}.
        :param pat_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pat_interval MedialiveChannel#pat_interval}.
        :param pcr_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_control MedialiveChannel#pcr_control}.
        :param pcr_period: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_period MedialiveChannel#pcr_period}.
        :param pcr_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pcr_pid MedialiveChannel#pcr_pid}.
        :param pmt_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_interval MedialiveChannel#pmt_interval}.
        :param pmt_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pmt_pid MedialiveChannel#pmt_pid}.
        :param program_num: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_num MedialiveChannel#program_num}.
        :param rate_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_mode MedialiveChannel#rate_mode}.
        :param scte27_pids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_pids MedialiveChannel#scte27_pids}.
        :param scte35_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_control MedialiveChannel#scte35_control}.
        :param scte35_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param segmentation_markers: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_markers MedialiveChannel#segmentation_markers}.
        :param segmentation_style: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_style MedialiveChannel#segmentation_style}.
        :param segmentation_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#segmentation_time MedialiveChannel#segmentation_time}.
        :param timed_metadata_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_behavior MedialiveChannel#timed_metadata_behavior}.
        :param timed_metadata_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timed_metadata_pid MedialiveChannel#timed_metadata_pid}.
        :param transport_stream_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#transport_stream_id MedialiveChannel#transport_stream_id}.
        :param video_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_pid MedialiveChannel#video_pid}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings(
            absent_input_audio_behavior=absent_input_audio_behavior,
            arib=arib,
            arib_captions_pid=arib_captions_pid,
            arib_captions_pid_control=arib_captions_pid_control,
            audio_buffer_model=audio_buffer_model,
            audio_frames_per_pes=audio_frames_per_pes,
            audio_pids=audio_pids,
            audio_stream_type=audio_stream_type,
            bitrate=bitrate,
            buffer_model=buffer_model,
            cc_descriptor=cc_descriptor,
            dvb_nit_settings=dvb_nit_settings,
            dvb_sdt_settings=dvb_sdt_settings,
            dvb_sub_pids=dvb_sub_pids,
            dvb_tdt_settings=dvb_tdt_settings,
            dvb_teletext_pid=dvb_teletext_pid,
            ebif=ebif,
            ebp_audio_interval=ebp_audio_interval,
            ebp_lookahead_ms=ebp_lookahead_ms,
            ebp_placement=ebp_placement,
            ecm_pid=ecm_pid,
            es_rate_in_pes=es_rate_in_pes,
            etv_platform_pid=etv_platform_pid,
            etv_signal_pid=etv_signal_pid,
            fragment_time=fragment_time,
            klv=klv,
            klv_data_pids=klv_data_pids,
            nielsen_id3_behavior=nielsen_id3_behavior,
            null_packet_bitrate=null_packet_bitrate,
            pat_interval=pat_interval,
            pcr_control=pcr_control,
            pcr_period=pcr_period,
            pcr_pid=pcr_pid,
            pmt_interval=pmt_interval,
            pmt_pid=pmt_pid,
            program_num=program_num,
            rate_mode=rate_mode,
            scte27_pids=scte27_pids,
            scte35_control=scte35_control,
            scte35_pid=scte35_pid,
            segmentation_markers=segmentation_markers,
            segmentation_style=segmentation_style,
            segmentation_time=segmentation_time,
            timed_metadata_behavior=timed_metadata_behavior,
            timed_metadata_pid=timed_metadata_pid,
            transport_stream_id=transport_stream_id,
            video_pid=video_pid,
        )

        return typing.cast(None, jsii.invoke(self, "putM2TsSettings", [value]))

    @jsii.member(jsii_name="resetM2TsSettings")
    def reset_m2_ts_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetM2TsSettings", []))

    @builtins.property
    @jsii.member(jsii_name="m2TsSettings")
    def m2_ts_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference, jsii.get(self, "m2TsSettings"))

    @builtins.property
    @jsii.member(jsii_name="m2TsSettingsInput")
    def m2_ts_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings], jsii.get(self, "m2TsSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3eb391b7ec74691bc10de92fcc376acdcb9546854d562dc55a570b12e2cfc507)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination",
    jsii_struct_bases=[],
    name_mapping={"destination_ref_id": "destinationRefId"},
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination:
    def __init__(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e633201d440b4485f612723a45bf5b069e56ce0597d526bb85c62701f22539db)
            check_type(argname="argument destination_ref_id", value=destination_ref_id, expected_type=type_hints["destination_ref_id"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "destination_ref_id": destination_ref_id,
        }

    @builtins.property
    def destination_ref_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.'''
        result = self._values.get("destination_ref_id")
        assert result is not None, "Required property 'destination_ref_id' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17fc7411228a4c5095cea5bfe2c18e0734aad6e362e64bb08d24732379d788c5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="destinationRefIdInput")
    def destination_ref_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "destinationRefIdInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationRefId")
    def destination_ref_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "destinationRefId"))

    @destination_ref_id.setter
    def destination_ref_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9875a851b47071a95a03ec77f90e0ca5cd5d91e2c29555ae750342db19c739a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "destinationRefId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8bc568c870eab5401d022b4120b7abe8523a9caf1c7b4c9acd43b05c5ab3f31)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "column_depth": "columnDepth",
        "include_fec": "includeFec",
        "row_length": "rowLength",
    },
)
class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings:
    def __init__(
        self,
        *,
        column_depth: typing.Optional[jsii.Number] = None,
        include_fec: typing.Optional[builtins.str] = None,
        row_length: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column_depth: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#column_depth MedialiveChannel#column_depth}.
        :param include_fec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#include_fec MedialiveChannel#include_fec}.
        :param row_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#row_length MedialiveChannel#row_length}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d67f33e819068716e60f37f952d481153e18db4b500eb9b50b1ca69c75f661be)
            check_type(argname="argument column_depth", value=column_depth, expected_type=type_hints["column_depth"])
            check_type(argname="argument include_fec", value=include_fec, expected_type=type_hints["include_fec"])
            check_type(argname="argument row_length", value=row_length, expected_type=type_hints["row_length"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if column_depth is not None:
            self._values["column_depth"] = column_depth
        if include_fec is not None:
            self._values["include_fec"] = include_fec
        if row_length is not None:
            self._values["row_length"] = row_length

    @builtins.property
    def column_depth(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#column_depth MedialiveChannel#column_depth}.'''
        result = self._values.get("column_depth")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def include_fec(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#include_fec MedialiveChannel#include_fec}.'''
        result = self._values.get("include_fec")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def row_length(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#row_length MedialiveChannel#row_length}.'''
        result = self._values.get("row_length")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4acb9d22931580f65e2fd086e82817023f5f285f79abb918e98325330a339d80)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetColumnDepth")
    def reset_column_depth(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColumnDepth", []))

    @jsii.member(jsii_name="resetIncludeFec")
    def reset_include_fec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetIncludeFec", []))

    @jsii.member(jsii_name="resetRowLength")
    def reset_row_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRowLength", []))

    @builtins.property
    @jsii.member(jsii_name="columnDepthInput")
    def column_depth_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "columnDepthInput"))

    @builtins.property
    @jsii.member(jsii_name="includeFecInput")
    def include_fec_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "includeFecInput"))

    @builtins.property
    @jsii.member(jsii_name="rowLengthInput")
    def row_length_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "rowLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="columnDepth")
    def column_depth(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "columnDepth"))

    @column_depth.setter
    def column_depth(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f357fad511653cce00760bd54be22b25fdb19ed1f70f550fd4cf318e05f80a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "columnDepth", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="includeFec")
    def include_fec(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "includeFec"))

    @include_fec.setter
    def include_fec(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ccf232775e8d7df4585c20ea36d2a756e0cc4f3f80cc8493cc60fa6f6081d70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "includeFec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="rowLength")
    def row_length(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "rowLength"))

    @row_length.setter
    def row_length(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48936067beb80d14fc5eb888c6c33fcee57016cb87fdc00ded243f9ec67be7a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rowLength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21b2148baf7c5b71b7880ae6321d9beca79d4898493d7814a11626f26057d0db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d26ba35ed68069454954f6596a4d2a444088e6bbfdf5ee5d4b2b11efdec3e8e7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putContainerSettings")
    def put_container_settings(
        self,
        *,
        m2_ts_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param m2_ts_settings: m2ts_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#m2ts_settings MedialiveChannel#m2ts_settings}
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings(
            m2_ts_settings=m2_ts_settings
        )

        return typing.cast(None, jsii.invoke(self, "putContainerSettings", [value]))

    @jsii.member(jsii_name="putDestination")
    def put_destination(self, *, destination_ref_id: builtins.str) -> None:
        '''
        :param destination_ref_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#destination_ref_id MedialiveChannel#destination_ref_id}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination(
            destination_ref_id=destination_ref_id
        )

        return typing.cast(None, jsii.invoke(self, "putDestination", [value]))

    @jsii.member(jsii_name="putFecOutputSettings")
    def put_fec_output_settings(
        self,
        *,
        column_depth: typing.Optional[jsii.Number] = None,
        include_fec: typing.Optional[builtins.str] = None,
        row_length: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param column_depth: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#column_depth MedialiveChannel#column_depth}.
        :param include_fec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#include_fec MedialiveChannel#include_fec}.
        :param row_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#row_length MedialiveChannel#row_length}.
        '''
        value = MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings(
            column_depth=column_depth, include_fec=include_fec, row_length=row_length
        )

        return typing.cast(None, jsii.invoke(self, "putFecOutputSettings", [value]))

    @jsii.member(jsii_name="resetBufferMsec")
    def reset_buffer_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufferMsec", []))

    @jsii.member(jsii_name="resetFecOutputSettings")
    def reset_fec_output_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFecOutputSettings", []))

    @builtins.property
    @jsii.member(jsii_name="containerSettings")
    def container_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference, jsii.get(self, "containerSettings"))

    @builtins.property
    @jsii.member(jsii_name="destination")
    def destination(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference, jsii.get(self, "destination"))

    @builtins.property
    @jsii.member(jsii_name="fecOutputSettings")
    def fec_output_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference, jsii.get(self, "fecOutputSettings"))

    @builtins.property
    @jsii.member(jsii_name="bufferMsecInput")
    def buffer_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufferMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="containerSettingsInput")
    def container_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings], jsii.get(self, "containerSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="destinationInput")
    def destination_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination], jsii.get(self, "destinationInput"))

    @builtins.property
    @jsii.member(jsii_name="fecOutputSettingsInput")
    def fec_output_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings], jsii.get(self, "fecOutputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="bufferMsec")
    def buffer_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufferMsec"))

    @buffer_msec.setter
    def buffer_msec(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__36bb7b6a6829f69d7d50bf413b77db0ef1e5b945f617f9448c89979b7cf23478)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufferMsec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e65c9b1b9488d9eeb251f8bcac648462fde6240f1f42a919f7c9be8582c74e18)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e043a31fd34d8be93878cde90e8eba2a1739189bd2b35cb0751f52071f1dcdb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioDescriptions")
    def put_audio_descriptions(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5ab05f828d5640fa420885cbd63bedfbf35bda1cfb70fe320f8ccec94e80ef5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putAudioDescriptions", [value]))

    @jsii.member(jsii_name="putAvailBlanking")
    def put_avail_blanking(
        self,
        *,
        avail_blanking_image: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage, typing.Dict[builtins.str, typing.Any]]] = None,
        state: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param avail_blanking_image: avail_blanking_image block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#avail_blanking_image MedialiveChannel#avail_blanking_image}
        :param state: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#state MedialiveChannel#state}.
        '''
        value = MedialiveChannelEncoderSettingsAvailBlanking(
            avail_blanking_image=avail_blanking_image, state=state
        )

        return typing.cast(None, jsii.invoke(self, "putAvailBlanking", [value]))

    @jsii.member(jsii_name="putCaptionDescriptions")
    def put_caption_descriptions(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptions, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0065e4da6354279458bb99ac1fb30fdd65084bd228b4fcba5d741a32d5ff901)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCaptionDescriptions", [value]))

    @jsii.member(jsii_name="putGlobalConfiguration")
    def put_global_configuration(
        self,
        *,
        initial_audio_gain: typing.Optional[jsii.Number] = None,
        input_end_action: typing.Optional[builtins.str] = None,
        input_loss_behavior: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior, typing.Dict[builtins.str, typing.Any]]] = None,
        output_locking_mode: typing.Optional[builtins.str] = None,
        output_timing_source: typing.Optional[builtins.str] = None,
        support_low_framerate_inputs: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param initial_audio_gain: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#initial_audio_gain MedialiveChannel#initial_audio_gain}.
        :param input_end_action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_end_action MedialiveChannel#input_end_action}.
        :param input_loss_behavior: input_loss_behavior block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_behavior MedialiveChannel#input_loss_behavior}
        :param output_locking_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_locking_mode MedialiveChannel#output_locking_mode}.
        :param output_timing_source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_timing_source MedialiveChannel#output_timing_source}.
        :param support_low_framerate_inputs: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#support_low_framerate_inputs MedialiveChannel#support_low_framerate_inputs}.
        '''
        value = MedialiveChannelEncoderSettingsGlobalConfiguration(
            initial_audio_gain=initial_audio_gain,
            input_end_action=input_end_action,
            input_loss_behavior=input_loss_behavior,
            output_locking_mode=output_locking_mode,
            output_timing_source=output_timing_source,
            support_low_framerate_inputs=support_low_framerate_inputs,
        )

        return typing.cast(None, jsii.invoke(self, "putGlobalConfiguration", [value]))

    @jsii.member(jsii_name="putMotionGraphicsConfiguration")
    def put_motion_graphics_configuration(
        self,
        *,
        motion_graphics_settings: typing.Union[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings, typing.Dict[builtins.str, typing.Any]],
        motion_graphics_insertion: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param motion_graphics_settings: motion_graphics_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_settings MedialiveChannel#motion_graphics_settings}
        :param motion_graphics_insertion: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#motion_graphics_insertion MedialiveChannel#motion_graphics_insertion}.
        '''
        value = MedialiveChannelEncoderSettingsMotionGraphicsConfiguration(
            motion_graphics_settings=motion_graphics_settings,
            motion_graphics_insertion=motion_graphics_insertion,
        )

        return typing.cast(None, jsii.invoke(self, "putMotionGraphicsConfiguration", [value]))

    @jsii.member(jsii_name="putNielsenConfiguration")
    def put_nielsen_configuration(
        self,
        *,
        distributor_id: typing.Optional[builtins.str] = None,
        nielsen_pcm_to_id3_tagging: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param distributor_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#distributor_id MedialiveChannel#distributor_id}.
        :param nielsen_pcm_to_id3_tagging: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#nielsen_pcm_to_id3_tagging MedialiveChannel#nielsen_pcm_to_id3_tagging}.
        '''
        value = MedialiveChannelEncoderSettingsNielsenConfiguration(
            distributor_id=distributor_id,
            nielsen_pcm_to_id3_tagging=nielsen_pcm_to_id3_tagging,
        )

        return typing.cast(None, jsii.invoke(self, "putNielsenConfiguration", [value]))

    @jsii.member(jsii_name="putOutputGroups")
    def put_output_groups(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0a5b387e2c0c2fc22def35df877e01ec7a4542b740c59524ac54fdb9486db36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putOutputGroups", [value]))

    @jsii.member(jsii_name="putTimecodeConfig")
    def put_timecode_config(
        self,
        *,
        source: builtins.str,
        sync_threshold: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source MedialiveChannel#source}.
        :param sync_threshold: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sync_threshold MedialiveChannel#sync_threshold}.
        '''
        value = MedialiveChannelEncoderSettingsTimecodeConfig(
            source=source, sync_threshold=sync_threshold
        )

        return typing.cast(None, jsii.invoke(self, "putTimecodeConfig", [value]))

    @jsii.member(jsii_name="putVideoDescriptions")
    def put_video_descriptions(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptions", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98e58b9fbeabe7d6dca896f65e67c77d3da857d1ed2297288b1bc89a67b1c613)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putVideoDescriptions", [value]))

    @jsii.member(jsii_name="resetAudioDescriptions")
    def reset_audio_descriptions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioDescriptions", []))

    @jsii.member(jsii_name="resetAvailBlanking")
    def reset_avail_blanking(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAvailBlanking", []))

    @jsii.member(jsii_name="resetCaptionDescriptions")
    def reset_caption_descriptions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionDescriptions", []))

    @jsii.member(jsii_name="resetGlobalConfiguration")
    def reset_global_configuration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGlobalConfiguration", []))

    @jsii.member(jsii_name="resetMotionGraphicsConfiguration")
    def reset_motion_graphics_configuration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMotionGraphicsConfiguration", []))

    @jsii.member(jsii_name="resetNielsenConfiguration")
    def reset_nielsen_configuration(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNielsenConfiguration", []))

    @jsii.member(jsii_name="resetVideoDescriptions")
    def reset_video_descriptions(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoDescriptions", []))

    @builtins.property
    @jsii.member(jsii_name="audioDescriptions")
    def audio_descriptions(
        self,
    ) -> MedialiveChannelEncoderSettingsAudioDescriptionsList:
        return typing.cast(MedialiveChannelEncoderSettingsAudioDescriptionsList, jsii.get(self, "audioDescriptions"))

    @builtins.property
    @jsii.member(jsii_name="availBlanking")
    def avail_blanking(
        self,
    ) -> MedialiveChannelEncoderSettingsAvailBlankingOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsAvailBlankingOutputReference, jsii.get(self, "availBlanking"))

    @builtins.property
    @jsii.member(jsii_name="captionDescriptions")
    def caption_descriptions(
        self,
    ) -> MedialiveChannelEncoderSettingsCaptionDescriptionsList:
        return typing.cast(MedialiveChannelEncoderSettingsCaptionDescriptionsList, jsii.get(self, "captionDescriptions"))

    @builtins.property
    @jsii.member(jsii_name="globalConfiguration")
    def global_configuration(
        self,
    ) -> MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference, jsii.get(self, "globalConfiguration"))

    @builtins.property
    @jsii.member(jsii_name="motionGraphicsConfiguration")
    def motion_graphics_configuration(
        self,
    ) -> MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference, jsii.get(self, "motionGraphicsConfiguration"))

    @builtins.property
    @jsii.member(jsii_name="nielsenConfiguration")
    def nielsen_configuration(
        self,
    ) -> MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference, jsii.get(self, "nielsenConfiguration"))

    @builtins.property
    @jsii.member(jsii_name="outputGroups")
    def output_groups(self) -> MedialiveChannelEncoderSettingsOutputGroupsList:
        return typing.cast(MedialiveChannelEncoderSettingsOutputGroupsList, jsii.get(self, "outputGroups"))

    @builtins.property
    @jsii.member(jsii_name="timecodeConfig")
    def timecode_config(
        self,
    ) -> "MedialiveChannelEncoderSettingsTimecodeConfigOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsTimecodeConfigOutputReference", jsii.get(self, "timecodeConfig"))

    @builtins.property
    @jsii.member(jsii_name="videoDescriptions")
    def video_descriptions(
        self,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsList":
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsList", jsii.get(self, "videoDescriptions"))

    @builtins.property
    @jsii.member(jsii_name="audioDescriptionsInput")
    def audio_descriptions_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]], jsii.get(self, "audioDescriptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="availBlankingInput")
    def avail_blanking_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking], jsii.get(self, "availBlankingInput"))

    @builtins.property
    @jsii.member(jsii_name="captionDescriptionsInput")
    def caption_descriptions_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsCaptionDescriptions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsCaptionDescriptions]]], jsii.get(self, "captionDescriptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="globalConfigurationInput")
    def global_configuration_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsGlobalConfiguration]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsGlobalConfiguration], jsii.get(self, "globalConfigurationInput"))

    @builtins.property
    @jsii.member(jsii_name="motionGraphicsConfigurationInput")
    def motion_graphics_configuration_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfiguration]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfiguration], jsii.get(self, "motionGraphicsConfigurationInput"))

    @builtins.property
    @jsii.member(jsii_name="nielsenConfigurationInput")
    def nielsen_configuration_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsNielsenConfiguration]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsNielsenConfiguration], jsii.get(self, "nielsenConfigurationInput"))

    @builtins.property
    @jsii.member(jsii_name="outputGroupsInput")
    def output_groups_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]], jsii.get(self, "outputGroupsInput"))

    @builtins.property
    @jsii.member(jsii_name="timecodeConfigInput")
    def timecode_config_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsTimecodeConfig"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsTimecodeConfig"], jsii.get(self, "timecodeConfigInput"))

    @builtins.property
    @jsii.member(jsii_name="videoDescriptionsInput")
    def video_descriptions_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsVideoDescriptions"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelEncoderSettingsVideoDescriptions"]]], jsii.get(self, "videoDescriptionsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelEncoderSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d20449c3a02e3287bfeddfb1c284d8c629b10e2c78ee6ea6be40bee07551e368)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsTimecodeConfig",
    jsii_struct_bases=[],
    name_mapping={"source": "source", "sync_threshold": "syncThreshold"},
)
class MedialiveChannelEncoderSettingsTimecodeConfig:
    def __init__(
        self,
        *,
        source: builtins.str,
        sync_threshold: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source MedialiveChannel#source}.
        :param sync_threshold: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sync_threshold MedialiveChannel#sync_threshold}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da41be4e8bc740bcece27a3e1af8c2b7b983d28d0673bb32d6bb3e040dd64196)
            check_type(argname="argument source", value=source, expected_type=type_hints["source"])
            check_type(argname="argument sync_threshold", value=sync_threshold, expected_type=type_hints["sync_threshold"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "source": source,
        }
        if sync_threshold is not None:
            self._values["sync_threshold"] = sync_threshold

    @builtins.property
    def source(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source MedialiveChannel#source}.'''
        result = self._values.get("source")
        assert result is not None, "Required property 'source' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def sync_threshold(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sync_threshold MedialiveChannel#sync_threshold}.'''
        result = self._values.get("sync_threshold")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsTimecodeConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsTimecodeConfigOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsTimecodeConfigOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44e4818f37f82a41ce5f514bc9191de29b2a7aaaea6b827f0500bc5e4cfba884)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetSyncThreshold")
    def reset_sync_threshold(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyncThreshold", []))

    @builtins.property
    @jsii.member(jsii_name="sourceInput")
    def source_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sourceInput"))

    @builtins.property
    @jsii.member(jsii_name="syncThresholdInput")
    def sync_threshold_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "syncThresholdInput"))

    @builtins.property
    @jsii.member(jsii_name="source")
    def source(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "source"))

    @source.setter
    def source(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b48dd0998bc714c8053b39e2a490d3a64838353db15760db80c7a9b659b5bfe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "source", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="syncThreshold")
    def sync_threshold(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "syncThreshold"))

    @sync_threshold.setter
    def sync_threshold(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e15a836fbad5bb55eb4884a2aec1bf3bdb31dbf2f8555e7926a331841a01d23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syncThreshold", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsTimecodeConfig]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsTimecodeConfig], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsTimecodeConfig],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1432542e916eff757d79a293d6c0f6944aed445c1dfa278b71775546b389895d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptions",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "codec_settings": "codecSettings",
        "height": "height",
        "respond_to_afd": "respondToAfd",
        "scaling_behavior": "scalingBehavior",
        "sharpness": "sharpness",
        "width": "width",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptions:
    def __init__(
        self,
        *,
        name: builtins.str,
        codec_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        height: typing.Optional[jsii.Number] = None,
        respond_to_afd: typing.Optional[builtins.str] = None,
        scaling_behavior: typing.Optional[builtins.str] = None,
        sharpness: typing.Optional[jsii.Number] = None,
        width: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        :param codec_settings: codec_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec_settings MedialiveChannel#codec_settings}
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#height MedialiveChannel#height}.
        :param respond_to_afd: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#respond_to_afd MedialiveChannel#respond_to_afd}.
        :param scaling_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scaling_behavior MedialiveChannel#scaling_behavior}.
        :param sharpness: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sharpness MedialiveChannel#sharpness}.
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#width MedialiveChannel#width}.
        '''
        if isinstance(codec_settings, dict):
            codec_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings(**codec_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0fb64949b0bd417c33775b9b43198b75e92ff93a0a65ad2765045ace7375ad50)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument codec_settings", value=codec_settings, expected_type=type_hints["codec_settings"])
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument respond_to_afd", value=respond_to_afd, expected_type=type_hints["respond_to_afd"])
            check_type(argname="argument scaling_behavior", value=scaling_behavior, expected_type=type_hints["scaling_behavior"])
            check_type(argname="argument sharpness", value=sharpness, expected_type=type_hints["sharpness"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
        }
        if codec_settings is not None:
            self._values["codec_settings"] = codec_settings
        if height is not None:
            self._values["height"] = height
        if respond_to_afd is not None:
            self._values["respond_to_afd"] = respond_to_afd
        if scaling_behavior is not None:
            self._values["scaling_behavior"] = scaling_behavior
        if sharpness is not None:
            self._values["sharpness"] = sharpness
        if width is not None:
            self._values["width"] = width

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def codec_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings"]:
        '''codec_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec_settings MedialiveChannel#codec_settings}
        '''
        result = self._values.get("codec_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings"], result)

    @builtins.property
    def height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#height MedialiveChannel#height}.'''
        result = self._values.get("height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def respond_to_afd(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#respond_to_afd MedialiveChannel#respond_to_afd}.'''
        result = self._values.get("respond_to_afd")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scaling_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scaling_behavior MedialiveChannel#scaling_behavior}.'''
        result = self._values.get("scaling_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def sharpness(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#sharpness MedialiveChannel#sharpness}.'''
        result = self._values.get("sharpness")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#width MedialiveChannel#width}.'''
        result = self._values.get("width")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptions(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings",
    jsii_struct_bases=[],
    name_mapping={
        "frame_capture_settings": "frameCaptureSettings",
        "h264_settings": "h264Settings",
        "h265_settings": "h265Settings",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings:
    def __init__(
        self,
        *,
        frame_capture_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        h264_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings", typing.Dict[builtins.str, typing.Any]]] = None,
        h265_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param frame_capture_settings: frame_capture_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_settings MedialiveChannel#frame_capture_settings}
        :param h264_settings: h264_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h264_settings MedialiveChannel#h264_settings}
        :param h265_settings: h265_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_settings MedialiveChannel#h265_settings}
        '''
        if isinstance(frame_capture_settings, dict):
            frame_capture_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings(**frame_capture_settings)
        if isinstance(h264_settings, dict):
            h264_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings(**h264_settings)
        if isinstance(h265_settings, dict):
            h265_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings(**h265_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3801c89a67789a54ac4714b377a1982431f598ee93219c6e81d8186c7ef890e2)
            check_type(argname="argument frame_capture_settings", value=frame_capture_settings, expected_type=type_hints["frame_capture_settings"])
            check_type(argname="argument h264_settings", value=h264_settings, expected_type=type_hints["h264_settings"])
            check_type(argname="argument h265_settings", value=h265_settings, expected_type=type_hints["h265_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if frame_capture_settings is not None:
            self._values["frame_capture_settings"] = frame_capture_settings
        if h264_settings is not None:
            self._values["h264_settings"] = h264_settings
        if h265_settings is not None:
            self._values["h265_settings"] = h265_settings

    @builtins.property
    def frame_capture_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings"]:
        '''frame_capture_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_settings MedialiveChannel#frame_capture_settings}
        '''
        result = self._values.get("frame_capture_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings"], result)

    @builtins.property
    def h264_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings"]:
        '''h264_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h264_settings MedialiveChannel#h264_settings}
        '''
        result = self._values.get("h264_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings"], result)

    @builtins.property
    def h265_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings"]:
        '''h265_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_settings MedialiveChannel#h265_settings}
        '''
        result = self._values.get("h265_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings",
    jsii_struct_bases=[],
    name_mapping={
        "capture_interval": "captureInterval",
        "capture_interval_units": "captureIntervalUnits",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings:
    def __init__(
        self,
        *,
        capture_interval: typing.Optional[jsii.Number] = None,
        capture_interval_units: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param capture_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#capture_interval MedialiveChannel#capture_interval}.
        :param capture_interval_units: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#capture_interval_units MedialiveChannel#capture_interval_units}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98f3f475f4770c7c721a61c97febbbc0dc7bef99ec8f88e19ba7a4d02c2badb9)
            check_type(argname="argument capture_interval", value=capture_interval, expected_type=type_hints["capture_interval"])
            check_type(argname="argument capture_interval_units", value=capture_interval_units, expected_type=type_hints["capture_interval_units"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if capture_interval is not None:
            self._values["capture_interval"] = capture_interval
        if capture_interval_units is not None:
            self._values["capture_interval_units"] = capture_interval_units

    @builtins.property
    def capture_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#capture_interval MedialiveChannel#capture_interval}.'''
        result = self._values.get("capture_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def capture_interval_units(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#capture_interval_units MedialiveChannel#capture_interval_units}.'''
        result = self._values.get("capture_interval_units")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1754bea6e5bb87f405dde68da4c58c37969817ee447e7663dc7ac0818b75ff4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCaptureInterval")
    def reset_capture_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptureInterval", []))

    @jsii.member(jsii_name="resetCaptureIntervalUnits")
    def reset_capture_interval_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptureIntervalUnits", []))

    @builtins.property
    @jsii.member(jsii_name="captureIntervalInput")
    def capture_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "captureIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="captureIntervalUnitsInput")
    def capture_interval_units_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "captureIntervalUnitsInput"))

    @builtins.property
    @jsii.member(jsii_name="captureInterval")
    def capture_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "captureInterval"))

    @capture_interval.setter
    def capture_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e3c2d49546aea6b937d29eab3b42ee27fbbf5f43f534e662f559c0985fce643)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captureInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="captureIntervalUnits")
    def capture_interval_units(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "captureIntervalUnits"))

    @capture_interval_units.setter
    def capture_interval_units(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ce1c2a65c6e068eea5a8dded2d29ba80fe42eabf46ffa0731247b8619d5313f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "captureIntervalUnits", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c5cb31d9b96d5b511bd5bac363ac2f05045ac8b319cb9df164241cbd94f8c0a1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings",
    jsii_struct_bases=[],
    name_mapping={
        "adaptive_quantization": "adaptiveQuantization",
        "afd_signaling": "afdSignaling",
        "bitrate": "bitrate",
        "buf_fill_pct": "bufFillPct",
        "buf_size": "bufSize",
        "color_metadata": "colorMetadata",
        "entropy_encoding": "entropyEncoding",
        "filter_settings": "filterSettings",
        "fixed_afd": "fixedAfd",
        "flicker_aq": "flickerAq",
        "force_field_pictures": "forceFieldPictures",
        "framerate_control": "framerateControl",
        "framerate_denominator": "framerateDenominator",
        "framerate_numerator": "framerateNumerator",
        "gop_b_reference": "gopBReference",
        "gop_closed_cadence": "gopClosedCadence",
        "gop_num_b_frames": "gopNumBFrames",
        "gop_size": "gopSize",
        "gop_size_units": "gopSizeUnits",
        "level": "level",
        "look_ahead_rate_control": "lookAheadRateControl",
        "max_bitrate": "maxBitrate",
        "min_i_interval": "minIInterval",
        "num_ref_frames": "numRefFrames",
        "par_control": "parControl",
        "par_denominator": "parDenominator",
        "par_numerator": "parNumerator",
        "profile": "profile",
        "quality_level": "qualityLevel",
        "qvbr_quality_level": "qvbrQualityLevel",
        "rate_control_mode": "rateControlMode",
        "scan_type": "scanType",
        "scene_change_detect": "sceneChangeDetect",
        "slices": "slices",
        "softness": "softness",
        "spatial_aq": "spatialAq",
        "subgop_length": "subgopLength",
        "syntax": "syntax",
        "temporal_aq": "temporalAq",
        "timecode_insertion": "timecodeInsertion",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings:
    def __init__(
        self,
        *,
        adaptive_quantization: typing.Optional[builtins.str] = None,
        afd_signaling: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buf_fill_pct: typing.Optional[jsii.Number] = None,
        buf_size: typing.Optional[jsii.Number] = None,
        color_metadata: typing.Optional[builtins.str] = None,
        entropy_encoding: typing.Optional[builtins.str] = None,
        filter_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        fixed_afd: typing.Optional[builtins.str] = None,
        flicker_aq: typing.Optional[builtins.str] = None,
        force_field_pictures: typing.Optional[builtins.str] = None,
        framerate_control: typing.Optional[builtins.str] = None,
        framerate_denominator: typing.Optional[jsii.Number] = None,
        framerate_numerator: typing.Optional[jsii.Number] = None,
        gop_b_reference: typing.Optional[builtins.str] = None,
        gop_closed_cadence: typing.Optional[jsii.Number] = None,
        gop_num_b_frames: typing.Optional[jsii.Number] = None,
        gop_size: typing.Optional[jsii.Number] = None,
        gop_size_units: typing.Optional[builtins.str] = None,
        level: typing.Optional[builtins.str] = None,
        look_ahead_rate_control: typing.Optional[builtins.str] = None,
        max_bitrate: typing.Optional[jsii.Number] = None,
        min_i_interval: typing.Optional[jsii.Number] = None,
        num_ref_frames: typing.Optional[jsii.Number] = None,
        par_control: typing.Optional[builtins.str] = None,
        par_denominator: typing.Optional[jsii.Number] = None,
        par_numerator: typing.Optional[jsii.Number] = None,
        profile: typing.Optional[builtins.str] = None,
        quality_level: typing.Optional[builtins.str] = None,
        qvbr_quality_level: typing.Optional[jsii.Number] = None,
        rate_control_mode: typing.Optional[builtins.str] = None,
        scan_type: typing.Optional[builtins.str] = None,
        scene_change_detect: typing.Optional[builtins.str] = None,
        slices: typing.Optional[jsii.Number] = None,
        softness: typing.Optional[jsii.Number] = None,
        spatial_aq: typing.Optional[builtins.str] = None,
        subgop_length: typing.Optional[builtins.str] = None,
        syntax: typing.Optional[builtins.str] = None,
        temporal_aq: typing.Optional[builtins.str] = None,
        timecode_insertion: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param adaptive_quantization: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.
        :param afd_signaling: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buf_fill_pct: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_fill_pct MedialiveChannel#buf_fill_pct}.
        :param buf_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_size MedialiveChannel#buf_size}.
        :param color_metadata: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_metadata MedialiveChannel#color_metadata}.
        :param entropy_encoding: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#entropy_encoding MedialiveChannel#entropy_encoding}.
        :param filter_settings: filter_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        :param fixed_afd: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.
        :param flicker_aq: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.
        :param force_field_pictures: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#force_field_pictures MedialiveChannel#force_field_pictures}.
        :param framerate_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_control MedialiveChannel#framerate_control}.
        :param framerate_denominator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.
        :param framerate_numerator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.
        :param gop_b_reference: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_b_reference MedialiveChannel#gop_b_reference}.
        :param gop_closed_cadence: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.
        :param gop_num_b_frames: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_num_b_frames MedialiveChannel#gop_num_b_frames}.
        :param gop_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size MedialiveChannel#gop_size}.
        :param gop_size_units: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.
        :param level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#level MedialiveChannel#level}.
        :param look_ahead_rate_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.
        :param max_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.
        :param min_i_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.
        :param num_ref_frames: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_ref_frames MedialiveChannel#num_ref_frames}.
        :param par_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_control MedialiveChannel#par_control}.
        :param par_denominator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_denominator MedialiveChannel#par_denominator}.
        :param par_numerator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_numerator MedialiveChannel#par_numerator}.
        :param profile: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.
        :param quality_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#quality_level MedialiveChannel#quality_level}.
        :param qvbr_quality_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.
        :param rate_control_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.
        :param scan_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scan_type MedialiveChannel#scan_type}.
        :param scene_change_detect: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.
        :param slices: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#slices MedialiveChannel#slices}.
        :param softness: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#softness MedialiveChannel#softness}.
        :param spatial_aq: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#spatial_aq MedialiveChannel#spatial_aq}.
        :param subgop_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#subgop_length MedialiveChannel#subgop_length}.
        :param syntax: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#syntax MedialiveChannel#syntax}.
        :param temporal_aq: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_aq MedialiveChannel#temporal_aq}.
        :param timecode_insertion: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.
        '''
        if isinstance(filter_settings, dict):
            filter_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings(**filter_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a61815a02514f60cbf7bda871b5a4c8a21d2a3c25a720d4063891db92790b31)
            check_type(argname="argument adaptive_quantization", value=adaptive_quantization, expected_type=type_hints["adaptive_quantization"])
            check_type(argname="argument afd_signaling", value=afd_signaling, expected_type=type_hints["afd_signaling"])
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument buf_fill_pct", value=buf_fill_pct, expected_type=type_hints["buf_fill_pct"])
            check_type(argname="argument buf_size", value=buf_size, expected_type=type_hints["buf_size"])
            check_type(argname="argument color_metadata", value=color_metadata, expected_type=type_hints["color_metadata"])
            check_type(argname="argument entropy_encoding", value=entropy_encoding, expected_type=type_hints["entropy_encoding"])
            check_type(argname="argument filter_settings", value=filter_settings, expected_type=type_hints["filter_settings"])
            check_type(argname="argument fixed_afd", value=fixed_afd, expected_type=type_hints["fixed_afd"])
            check_type(argname="argument flicker_aq", value=flicker_aq, expected_type=type_hints["flicker_aq"])
            check_type(argname="argument force_field_pictures", value=force_field_pictures, expected_type=type_hints["force_field_pictures"])
            check_type(argname="argument framerate_control", value=framerate_control, expected_type=type_hints["framerate_control"])
            check_type(argname="argument framerate_denominator", value=framerate_denominator, expected_type=type_hints["framerate_denominator"])
            check_type(argname="argument framerate_numerator", value=framerate_numerator, expected_type=type_hints["framerate_numerator"])
            check_type(argname="argument gop_b_reference", value=gop_b_reference, expected_type=type_hints["gop_b_reference"])
            check_type(argname="argument gop_closed_cadence", value=gop_closed_cadence, expected_type=type_hints["gop_closed_cadence"])
            check_type(argname="argument gop_num_b_frames", value=gop_num_b_frames, expected_type=type_hints["gop_num_b_frames"])
            check_type(argname="argument gop_size", value=gop_size, expected_type=type_hints["gop_size"])
            check_type(argname="argument gop_size_units", value=gop_size_units, expected_type=type_hints["gop_size_units"])
            check_type(argname="argument level", value=level, expected_type=type_hints["level"])
            check_type(argname="argument look_ahead_rate_control", value=look_ahead_rate_control, expected_type=type_hints["look_ahead_rate_control"])
            check_type(argname="argument max_bitrate", value=max_bitrate, expected_type=type_hints["max_bitrate"])
            check_type(argname="argument min_i_interval", value=min_i_interval, expected_type=type_hints["min_i_interval"])
            check_type(argname="argument num_ref_frames", value=num_ref_frames, expected_type=type_hints["num_ref_frames"])
            check_type(argname="argument par_control", value=par_control, expected_type=type_hints["par_control"])
            check_type(argname="argument par_denominator", value=par_denominator, expected_type=type_hints["par_denominator"])
            check_type(argname="argument par_numerator", value=par_numerator, expected_type=type_hints["par_numerator"])
            check_type(argname="argument profile", value=profile, expected_type=type_hints["profile"])
            check_type(argname="argument quality_level", value=quality_level, expected_type=type_hints["quality_level"])
            check_type(argname="argument qvbr_quality_level", value=qvbr_quality_level, expected_type=type_hints["qvbr_quality_level"])
            check_type(argname="argument rate_control_mode", value=rate_control_mode, expected_type=type_hints["rate_control_mode"])
            check_type(argname="argument scan_type", value=scan_type, expected_type=type_hints["scan_type"])
            check_type(argname="argument scene_change_detect", value=scene_change_detect, expected_type=type_hints["scene_change_detect"])
            check_type(argname="argument slices", value=slices, expected_type=type_hints["slices"])
            check_type(argname="argument softness", value=softness, expected_type=type_hints["softness"])
            check_type(argname="argument spatial_aq", value=spatial_aq, expected_type=type_hints["spatial_aq"])
            check_type(argname="argument subgop_length", value=subgop_length, expected_type=type_hints["subgop_length"])
            check_type(argname="argument syntax", value=syntax, expected_type=type_hints["syntax"])
            check_type(argname="argument temporal_aq", value=temporal_aq, expected_type=type_hints["temporal_aq"])
            check_type(argname="argument timecode_insertion", value=timecode_insertion, expected_type=type_hints["timecode_insertion"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if adaptive_quantization is not None:
            self._values["adaptive_quantization"] = adaptive_quantization
        if afd_signaling is not None:
            self._values["afd_signaling"] = afd_signaling
        if bitrate is not None:
            self._values["bitrate"] = bitrate
        if buf_fill_pct is not None:
            self._values["buf_fill_pct"] = buf_fill_pct
        if buf_size is not None:
            self._values["buf_size"] = buf_size
        if color_metadata is not None:
            self._values["color_metadata"] = color_metadata
        if entropy_encoding is not None:
            self._values["entropy_encoding"] = entropy_encoding
        if filter_settings is not None:
            self._values["filter_settings"] = filter_settings
        if fixed_afd is not None:
            self._values["fixed_afd"] = fixed_afd
        if flicker_aq is not None:
            self._values["flicker_aq"] = flicker_aq
        if force_field_pictures is not None:
            self._values["force_field_pictures"] = force_field_pictures
        if framerate_control is not None:
            self._values["framerate_control"] = framerate_control
        if framerate_denominator is not None:
            self._values["framerate_denominator"] = framerate_denominator
        if framerate_numerator is not None:
            self._values["framerate_numerator"] = framerate_numerator
        if gop_b_reference is not None:
            self._values["gop_b_reference"] = gop_b_reference
        if gop_closed_cadence is not None:
            self._values["gop_closed_cadence"] = gop_closed_cadence
        if gop_num_b_frames is not None:
            self._values["gop_num_b_frames"] = gop_num_b_frames
        if gop_size is not None:
            self._values["gop_size"] = gop_size
        if gop_size_units is not None:
            self._values["gop_size_units"] = gop_size_units
        if level is not None:
            self._values["level"] = level
        if look_ahead_rate_control is not None:
            self._values["look_ahead_rate_control"] = look_ahead_rate_control
        if max_bitrate is not None:
            self._values["max_bitrate"] = max_bitrate
        if min_i_interval is not None:
            self._values["min_i_interval"] = min_i_interval
        if num_ref_frames is not None:
            self._values["num_ref_frames"] = num_ref_frames
        if par_control is not None:
            self._values["par_control"] = par_control
        if par_denominator is not None:
            self._values["par_denominator"] = par_denominator
        if par_numerator is not None:
            self._values["par_numerator"] = par_numerator
        if profile is not None:
            self._values["profile"] = profile
        if quality_level is not None:
            self._values["quality_level"] = quality_level
        if qvbr_quality_level is not None:
            self._values["qvbr_quality_level"] = qvbr_quality_level
        if rate_control_mode is not None:
            self._values["rate_control_mode"] = rate_control_mode
        if scan_type is not None:
            self._values["scan_type"] = scan_type
        if scene_change_detect is not None:
            self._values["scene_change_detect"] = scene_change_detect
        if slices is not None:
            self._values["slices"] = slices
        if softness is not None:
            self._values["softness"] = softness
        if spatial_aq is not None:
            self._values["spatial_aq"] = spatial_aq
        if subgop_length is not None:
            self._values["subgop_length"] = subgop_length
        if syntax is not None:
            self._values["syntax"] = syntax
        if temporal_aq is not None:
            self._values["temporal_aq"] = temporal_aq
        if timecode_insertion is not None:
            self._values["timecode_insertion"] = timecode_insertion

    @builtins.property
    def adaptive_quantization(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.'''
        result = self._values.get("adaptive_quantization")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def afd_signaling(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.'''
        result = self._values.get("afd_signaling")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buf_fill_pct(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_fill_pct MedialiveChannel#buf_fill_pct}.'''
        result = self._values.get("buf_fill_pct")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buf_size(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_size MedialiveChannel#buf_size}.'''
        result = self._values.get("buf_size")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def color_metadata(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_metadata MedialiveChannel#color_metadata}.'''
        result = self._values.get("color_metadata")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def entropy_encoding(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#entropy_encoding MedialiveChannel#entropy_encoding}.'''
        result = self._values.get("entropy_encoding")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def filter_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings"]:
        '''filter_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        '''
        result = self._values.get("filter_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings"], result)

    @builtins.property
    def fixed_afd(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.'''
        result = self._values.get("fixed_afd")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def flicker_aq(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.'''
        result = self._values.get("flicker_aq")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def force_field_pictures(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#force_field_pictures MedialiveChannel#force_field_pictures}.'''
        result = self._values.get("force_field_pictures")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def framerate_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_control MedialiveChannel#framerate_control}.'''
        result = self._values.get("framerate_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def framerate_denominator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.'''
        result = self._values.get("framerate_denominator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def framerate_numerator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.'''
        result = self._values.get("framerate_numerator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_b_reference(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_b_reference MedialiveChannel#gop_b_reference}.'''
        result = self._values.get("gop_b_reference")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def gop_closed_cadence(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.'''
        result = self._values.get("gop_closed_cadence")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_num_b_frames(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_num_b_frames MedialiveChannel#gop_num_b_frames}.'''
        result = self._values.get("gop_num_b_frames")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_size(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size MedialiveChannel#gop_size}.'''
        result = self._values.get("gop_size")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_size_units(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.'''
        result = self._values.get("gop_size_units")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def level(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#level MedialiveChannel#level}.'''
        result = self._values.get("level")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def look_ahead_rate_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.'''
        result = self._values.get("look_ahead_rate_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.'''
        result = self._values.get("max_bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def min_i_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.'''
        result = self._values.get("min_i_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def num_ref_frames(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_ref_frames MedialiveChannel#num_ref_frames}.'''
        result = self._values.get("num_ref_frames")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def par_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_control MedialiveChannel#par_control}.'''
        result = self._values.get("par_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def par_denominator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_denominator MedialiveChannel#par_denominator}.'''
        result = self._values.get("par_denominator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def par_numerator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_numerator MedialiveChannel#par_numerator}.'''
        result = self._values.get("par_numerator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def profile(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.'''
        result = self._values.get("profile")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def quality_level(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#quality_level MedialiveChannel#quality_level}.'''
        result = self._values.get("quality_level")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def qvbr_quality_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.'''
        result = self._values.get("qvbr_quality_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def rate_control_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.'''
        result = self._values.get("rate_control_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scan_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scan_type MedialiveChannel#scan_type}.'''
        result = self._values.get("scan_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scene_change_detect(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.'''
        result = self._values.get("scene_change_detect")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def slices(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#slices MedialiveChannel#slices}.'''
        result = self._values.get("slices")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def softness(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#softness MedialiveChannel#softness}.'''
        result = self._values.get("softness")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def spatial_aq(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#spatial_aq MedialiveChannel#spatial_aq}.'''
        result = self._values.get("spatial_aq")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def subgop_length(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#subgop_length MedialiveChannel#subgop_length}.'''
        result = self._values.get("subgop_length")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def syntax(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#syntax MedialiveChannel#syntax}.'''
        result = self._values.get("syntax")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def temporal_aq(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_aq MedialiveChannel#temporal_aq}.'''
        result = self._values.get("temporal_aq")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timecode_insertion(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.'''
        result = self._values.get("timecode_insertion")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings",
    jsii_struct_bases=[],
    name_mapping={"temporal_filter_settings": "temporalFilterSettings"},
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings:
    def __init__(
        self,
        *,
        temporal_filter_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param temporal_filter_settings: temporal_filter_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        if isinstance(temporal_filter_settings, dict):
            temporal_filter_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings(**temporal_filter_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82743d7c4fee465e2243b1351c2cf393244638dbca276ebe8e6dd214c44bbfbc)
            check_type(argname="argument temporal_filter_settings", value=temporal_filter_settings, expected_type=type_hints["temporal_filter_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if temporal_filter_settings is not None:
            self._values["temporal_filter_settings"] = temporal_filter_settings

    @builtins.property
    def temporal_filter_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings"]:
        '''temporal_filter_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        result = self._values.get("temporal_filter_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a2b387f12127c019c0e3699a0f6f4eec813102216da1d8bc73c13d0bde0138f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTemporalFilterSettings")
    def put_temporal_filter_settings(
        self,
        *,
        post_filter_sharpening: typing.Optional[builtins.str] = None,
        strength: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param post_filter_sharpening: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.
        :param strength: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#strength MedialiveChannel#strength}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings(
            post_filter_sharpening=post_filter_sharpening, strength=strength
        )

        return typing.cast(None, jsii.invoke(self, "putTemporalFilterSettings", [value]))

    @jsii.member(jsii_name="resetTemporalFilterSettings")
    def reset_temporal_filter_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemporalFilterSettings", []))

    @builtins.property
    @jsii.member(jsii_name="temporalFilterSettings")
    def temporal_filter_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference", jsii.get(self, "temporalFilterSettings"))

    @builtins.property
    @jsii.member(jsii_name="temporalFilterSettingsInput")
    def temporal_filter_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings"], jsii.get(self, "temporalFilterSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98bc97ffac30e661fb1c0f05aa17b06fe01e361877200f64bd59e4ee82da6411)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings",
    jsii_struct_bases=[],
    name_mapping={
        "post_filter_sharpening": "postFilterSharpening",
        "strength": "strength",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings:
    def __init__(
        self,
        *,
        post_filter_sharpening: typing.Optional[builtins.str] = None,
        strength: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param post_filter_sharpening: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.
        :param strength: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#strength MedialiveChannel#strength}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ad32aca8a79082e0ea5f0c8a879819e468a10c0fc9e3e7d7f593ecf3ee45a6d)
            check_type(argname="argument post_filter_sharpening", value=post_filter_sharpening, expected_type=type_hints["post_filter_sharpening"])
            check_type(argname="argument strength", value=strength, expected_type=type_hints["strength"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if post_filter_sharpening is not None:
            self._values["post_filter_sharpening"] = post_filter_sharpening
        if strength is not None:
            self._values["strength"] = strength

    @builtins.property
    def post_filter_sharpening(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.'''
        result = self._values.get("post_filter_sharpening")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def strength(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#strength MedialiveChannel#strength}.'''
        result = self._values.get("strength")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__205a805a4e4a7551bd80e7673a11622ef562227b2b66dabdedc699a7bbd8d046)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPostFilterSharpening")
    def reset_post_filter_sharpening(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPostFilterSharpening", []))

    @jsii.member(jsii_name="resetStrength")
    def reset_strength(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStrength", []))

    @builtins.property
    @jsii.member(jsii_name="postFilterSharpeningInput")
    def post_filter_sharpening_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "postFilterSharpeningInput"))

    @builtins.property
    @jsii.member(jsii_name="strengthInput")
    def strength_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "strengthInput"))

    @builtins.property
    @jsii.member(jsii_name="postFilterSharpening")
    def post_filter_sharpening(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "postFilterSharpening"))

    @post_filter_sharpening.setter
    def post_filter_sharpening(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e73eb26c66ba42e601485a8c493c9550af4653af3b7bbb7d8a421fff0ba64c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "postFilterSharpening", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="strength")
    def strength(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "strength"))

    @strength.setter
    def strength(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60b1e43d66366fa8c51b32482b27463d421501b441c8311f388d3ebc37415c9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "strength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c18f0a15dc4268c31ad54fa585abeed8a3d094560fe9bad29efdeb763d45da6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13df3397a8672c8d8111fb42b2854d991005cd7075461a9441e22c6f61516fb5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFilterSettings")
    def put_filter_settings(
        self,
        *,
        temporal_filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param temporal_filter_settings: temporal_filter_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings(
            temporal_filter_settings=temporal_filter_settings
        )

        return typing.cast(None, jsii.invoke(self, "putFilterSettings", [value]))

    @jsii.member(jsii_name="resetAdaptiveQuantization")
    def reset_adaptive_quantization(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAdaptiveQuantization", []))

    @jsii.member(jsii_name="resetAfdSignaling")
    def reset_afd_signaling(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAfdSignaling", []))

    @jsii.member(jsii_name="resetBitrate")
    def reset_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBitrate", []))

    @jsii.member(jsii_name="resetBufFillPct")
    def reset_buf_fill_pct(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufFillPct", []))

    @jsii.member(jsii_name="resetBufSize")
    def reset_buf_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufSize", []))

    @jsii.member(jsii_name="resetColorMetadata")
    def reset_color_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorMetadata", []))

    @jsii.member(jsii_name="resetEntropyEncoding")
    def reset_entropy_encoding(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEntropyEncoding", []))

    @jsii.member(jsii_name="resetFilterSettings")
    def reset_filter_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterSettings", []))

    @jsii.member(jsii_name="resetFixedAfd")
    def reset_fixed_afd(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFixedAfd", []))

    @jsii.member(jsii_name="resetFlickerAq")
    def reset_flicker_aq(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFlickerAq", []))

    @jsii.member(jsii_name="resetForceFieldPictures")
    def reset_force_field_pictures(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetForceFieldPictures", []))

    @jsii.member(jsii_name="resetFramerateControl")
    def reset_framerate_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFramerateControl", []))

    @jsii.member(jsii_name="resetFramerateDenominator")
    def reset_framerate_denominator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFramerateDenominator", []))

    @jsii.member(jsii_name="resetFramerateNumerator")
    def reset_framerate_numerator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFramerateNumerator", []))

    @jsii.member(jsii_name="resetGopBReference")
    def reset_gop_b_reference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopBReference", []))

    @jsii.member(jsii_name="resetGopClosedCadence")
    def reset_gop_closed_cadence(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopClosedCadence", []))

    @jsii.member(jsii_name="resetGopNumBFrames")
    def reset_gop_num_b_frames(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopNumBFrames", []))

    @jsii.member(jsii_name="resetGopSize")
    def reset_gop_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopSize", []))

    @jsii.member(jsii_name="resetGopSizeUnits")
    def reset_gop_size_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopSizeUnits", []))

    @jsii.member(jsii_name="resetLevel")
    def reset_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLevel", []))

    @jsii.member(jsii_name="resetLookAheadRateControl")
    def reset_look_ahead_rate_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLookAheadRateControl", []))

    @jsii.member(jsii_name="resetMaxBitrate")
    def reset_max_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxBitrate", []))

    @jsii.member(jsii_name="resetMinIInterval")
    def reset_min_i_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMinIInterval", []))

    @jsii.member(jsii_name="resetNumRefFrames")
    def reset_num_ref_frames(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNumRefFrames", []))

    @jsii.member(jsii_name="resetParControl")
    def reset_par_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParControl", []))

    @jsii.member(jsii_name="resetParDenominator")
    def reset_par_denominator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParDenominator", []))

    @jsii.member(jsii_name="resetParNumerator")
    def reset_par_numerator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParNumerator", []))

    @jsii.member(jsii_name="resetProfile")
    def reset_profile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProfile", []))

    @jsii.member(jsii_name="resetQualityLevel")
    def reset_quality_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetQualityLevel", []))

    @jsii.member(jsii_name="resetQvbrQualityLevel")
    def reset_qvbr_quality_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetQvbrQualityLevel", []))

    @jsii.member(jsii_name="resetRateControlMode")
    def reset_rate_control_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRateControlMode", []))

    @jsii.member(jsii_name="resetScanType")
    def reset_scan_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScanType", []))

    @jsii.member(jsii_name="resetSceneChangeDetect")
    def reset_scene_change_detect(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSceneChangeDetect", []))

    @jsii.member(jsii_name="resetSlices")
    def reset_slices(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSlices", []))

    @jsii.member(jsii_name="resetSoftness")
    def reset_softness(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSoftness", []))

    @jsii.member(jsii_name="resetSpatialAq")
    def reset_spatial_aq(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSpatialAq", []))

    @jsii.member(jsii_name="resetSubgopLength")
    def reset_subgop_length(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSubgopLength", []))

    @jsii.member(jsii_name="resetSyntax")
    def reset_syntax(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSyntax", []))

    @jsii.member(jsii_name="resetTemporalAq")
    def reset_temporal_aq(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemporalAq", []))

    @jsii.member(jsii_name="resetTimecodeInsertion")
    def reset_timecode_insertion(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimecodeInsertion", []))

    @builtins.property
    @jsii.member(jsii_name="filterSettings")
    def filter_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference, jsii.get(self, "filterSettings"))

    @builtins.property
    @jsii.member(jsii_name="adaptiveQuantizationInput")
    def adaptive_quantization_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "adaptiveQuantizationInput"))

    @builtins.property
    @jsii.member(jsii_name="afdSignalingInput")
    def afd_signaling_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "afdSignalingInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bufFillPctInput")
    def buf_fill_pct_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufFillPctInput"))

    @builtins.property
    @jsii.member(jsii_name="bufSizeInput")
    def buf_size_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="colorMetadataInput")
    def color_metadata_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="entropyEncodingInput")
    def entropy_encoding_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "entropyEncodingInput"))

    @builtins.property
    @jsii.member(jsii_name="filterSettingsInput")
    def filter_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings], jsii.get(self, "filterSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="fixedAfdInput")
    def fixed_afd_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fixedAfdInput"))

    @builtins.property
    @jsii.member(jsii_name="flickerAqInput")
    def flicker_aq_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "flickerAqInput"))

    @builtins.property
    @jsii.member(jsii_name="forceFieldPicturesInput")
    def force_field_pictures_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "forceFieldPicturesInput"))

    @builtins.property
    @jsii.member(jsii_name="framerateControlInput")
    def framerate_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "framerateControlInput"))

    @builtins.property
    @jsii.member(jsii_name="framerateDenominatorInput")
    def framerate_denominator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "framerateDenominatorInput"))

    @builtins.property
    @jsii.member(jsii_name="framerateNumeratorInput")
    def framerate_numerator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "framerateNumeratorInput"))

    @builtins.property
    @jsii.member(jsii_name="gopBReferenceInput")
    def gop_b_reference_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "gopBReferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="gopClosedCadenceInput")
    def gop_closed_cadence_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gopClosedCadenceInput"))

    @builtins.property
    @jsii.member(jsii_name="gopNumBFramesInput")
    def gop_num_b_frames_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gopNumBFramesInput"))

    @builtins.property
    @jsii.member(jsii_name="gopSizeInput")
    def gop_size_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gopSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="gopSizeUnitsInput")
    def gop_size_units_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "gopSizeUnitsInput"))

    @builtins.property
    @jsii.member(jsii_name="levelInput")
    def level_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "levelInput"))

    @builtins.property
    @jsii.member(jsii_name="lookAheadRateControlInput")
    def look_ahead_rate_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lookAheadRateControlInput"))

    @builtins.property
    @jsii.member(jsii_name="maxBitrateInput")
    def max_bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "maxBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="minIIntervalInput")
    def min_i_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "minIIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="numRefFramesInput")
    def num_ref_frames_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "numRefFramesInput"))

    @builtins.property
    @jsii.member(jsii_name="parControlInput")
    def par_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "parControlInput"))

    @builtins.property
    @jsii.member(jsii_name="parDenominatorInput")
    def par_denominator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "parDenominatorInput"))

    @builtins.property
    @jsii.member(jsii_name="parNumeratorInput")
    def par_numerator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "parNumeratorInput"))

    @builtins.property
    @jsii.member(jsii_name="profileInput")
    def profile_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "profileInput"))

    @builtins.property
    @jsii.member(jsii_name="qualityLevelInput")
    def quality_level_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "qualityLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="qvbrQualityLevelInput")
    def qvbr_quality_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "qvbrQualityLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="rateControlModeInput")
    def rate_control_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rateControlModeInput"))

    @builtins.property
    @jsii.member(jsii_name="scanTypeInput")
    def scan_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scanTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="sceneChangeDetectInput")
    def scene_change_detect_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sceneChangeDetectInput"))

    @builtins.property
    @jsii.member(jsii_name="slicesInput")
    def slices_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "slicesInput"))

    @builtins.property
    @jsii.member(jsii_name="softnessInput")
    def softness_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "softnessInput"))

    @builtins.property
    @jsii.member(jsii_name="spatialAqInput")
    def spatial_aq_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "spatialAqInput"))

    @builtins.property
    @jsii.member(jsii_name="subgopLengthInput")
    def subgop_length_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "subgopLengthInput"))

    @builtins.property
    @jsii.member(jsii_name="syntaxInput")
    def syntax_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "syntaxInput"))

    @builtins.property
    @jsii.member(jsii_name="temporalAqInput")
    def temporal_aq_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "temporalAqInput"))

    @builtins.property
    @jsii.member(jsii_name="timecodeInsertionInput")
    def timecode_insertion_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timecodeInsertionInput"))

    @builtins.property
    @jsii.member(jsii_name="adaptiveQuantization")
    def adaptive_quantization(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "adaptiveQuantization"))

    @adaptive_quantization.setter
    def adaptive_quantization(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3db468156a1a22c701098926f7e9a055ce774aa74c885100db3f98f83cc395ba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "adaptiveQuantization", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="afdSignaling")
    def afd_signaling(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "afdSignaling"))

    @afd_signaling.setter
    def afd_signaling(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14dbc5b7a57255a75ea9a33b85dec374a9c7660bf6f938da607f58f6c2176788)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "afdSignaling", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__796e5493f995b3d8f3851e7662f92c050104392f2d4cf6d20afa9c33f0772dae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bufFillPct")
    def buf_fill_pct(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufFillPct"))

    @buf_fill_pct.setter
    def buf_fill_pct(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c0180a6c84e81e18b24fa21a58db6b38234e08bb6e709a53c7fe89022892b4a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufFillPct", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bufSize")
    def buf_size(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufSize"))

    @buf_size.setter
    def buf_size(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a99f0ed5210f7f25504aa1718680b8268b4067785ee22a8d2f7a501a322b35d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="colorMetadata")
    def color_metadata(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "colorMetadata"))

    @color_metadata.setter
    def color_metadata(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5531c17199cd76d50c3aa88cc117fd71834e7c3ee360d367cf155b54700a42c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "colorMetadata", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="entropyEncoding")
    def entropy_encoding(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "entropyEncoding"))

    @entropy_encoding.setter
    def entropy_encoding(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__647955c3bdce2073ea1719b323b393b60e236b6ffc568c2eda358435b2781e39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "entropyEncoding", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fixedAfd")
    def fixed_afd(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fixedAfd"))

    @fixed_afd.setter
    def fixed_afd(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0cdd7e4285fc632767098a30861184a23b2c56e3cc9d7a2076ff8418e072efb7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fixedAfd", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="flickerAq")
    def flicker_aq(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "flickerAq"))

    @flicker_aq.setter
    def flicker_aq(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f607e15ff8490dc22026eedf751d67e0cbcae9bc0ed7972bd8b1c2638ba09ccd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "flickerAq", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="forceFieldPictures")
    def force_field_pictures(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "forceFieldPictures"))

    @force_field_pictures.setter
    def force_field_pictures(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4150633a1c80600334b5dfb38533bf1b7e3d05983cc09d7cb750647f921f770)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "forceFieldPictures", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="framerateControl")
    def framerate_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "framerateControl"))

    @framerate_control.setter
    def framerate_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fe6d0b87c0a429e9abe84be3f30f285285f59bd91ab837a7ae1b17249a3ee85)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "framerateControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="framerateDenominator")
    def framerate_denominator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "framerateDenominator"))

    @framerate_denominator.setter
    def framerate_denominator(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5d77cbcd2a981b6c6f019bbfff69195238320a31ace07bab6b9e15d1ff2fcc2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "framerateDenominator", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="framerateNumerator")
    def framerate_numerator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "framerateNumerator"))

    @framerate_numerator.setter
    def framerate_numerator(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfac05bc453c30273a086ffe296c133cae54e2a92bf80cb75f689e1e6fd6f24f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "framerateNumerator", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="gopBReference")
    def gop_b_reference(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "gopBReference"))

    @gop_b_reference.setter
    def gop_b_reference(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2803768413936507e975cb3936721d8c151ff0e84670048315cb3981c263073f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopBReference", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="gopClosedCadence")
    def gop_closed_cadence(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gopClosedCadence"))

    @gop_closed_cadence.setter
    def gop_closed_cadence(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a376f25a46db8a9cfde44d923ac128679bea9faa4d790b08ca806558bdeb483)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopClosedCadence", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="gopNumBFrames")
    def gop_num_b_frames(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gopNumBFrames"))

    @gop_num_b_frames.setter
    def gop_num_b_frames(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ea9430a334040b6daac8a620c59d85b36eaa2fd38d4c2fa2294d3adc31d22874)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopNumBFrames", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="gopSize")
    def gop_size(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gopSize"))

    @gop_size.setter
    def gop_size(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85e699d3cd8a2d9e6ac61ce00b78d3cd28711dc79bc8c5013d629b8747fdcf57)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="gopSizeUnits")
    def gop_size_units(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "gopSizeUnits"))

    @gop_size_units.setter
    def gop_size_units(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5122b100e6b7383a4a15735f1fb34489a0c5f36b74dcdade9572ccde73f356e3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopSizeUnits", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="level")
    def level(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "level"))

    @level.setter
    def level(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09e873428e3ba6c0a681e074e545a366800f0bc8e0945c65d7a22ae676514adc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "level", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="lookAheadRateControl")
    def look_ahead_rate_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lookAheadRateControl"))

    @look_ahead_rate_control.setter
    def look_ahead_rate_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bde3394ad57c40f93d322b24d05de7529d002036646649730ac42a0f31f0ea81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lookAheadRateControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="maxBitrate")
    def max_bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "maxBitrate"))

    @max_bitrate.setter
    def max_bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__759c62873266bff2c86794994ee45d143617f2c7cd1ddeabba616ad383c4a9b1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxBitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="minIInterval")
    def min_i_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "minIInterval"))

    @min_i_interval.setter
    def min_i_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b89ce33db9f3a3cf0f7025f0398c68768f92914fe3e5a779c6fae5b5691bce70)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "minIInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="numRefFrames")
    def num_ref_frames(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "numRefFrames"))

    @num_ref_frames.setter
    def num_ref_frames(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc4b00e907866a4bbce463463f674dfbb080719be5c918ee75870e0d1872d712)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "numRefFrames", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="parControl")
    def par_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "parControl"))

    @par_control.setter
    def par_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__036fc44d05df70388e3591a7ff38f3fd16713f0fdca32a956c38b7b327738a74)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "parControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="parDenominator")
    def par_denominator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "parDenominator"))

    @par_denominator.setter
    def par_denominator(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afb50b7aab2bb9fa04c9e43e5e85f3b22b0ac52b1737121e73a9f26005b3f882)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "parDenominator", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="parNumerator")
    def par_numerator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "parNumerator"))

    @par_numerator.setter
    def par_numerator(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef0ccbd4a148b1ec0c76eee3bc5321ebf3858393578feaf98d7b3dca4d5ebfd9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "parNumerator", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="profile")
    def profile(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "profile"))

    @profile.setter
    def profile(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1932d1dff074d835b09e5afb0560054a504c6492e19f1a287581210b608dbcbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "profile", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="qualityLevel")
    def quality_level(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "qualityLevel"))

    @quality_level.setter
    def quality_level(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f6f760b1bd21059b33f667cd1df0678232569108f63a9d4b65f231c92554631)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "qualityLevel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="qvbrQualityLevel")
    def qvbr_quality_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "qvbrQualityLevel"))

    @qvbr_quality_level.setter
    def qvbr_quality_level(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6509588c28c0a32a4aeea1bbf1a99c0f04dd95d2bf382a6fc0fb342e6db89e66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "qvbrQualityLevel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="rateControlMode")
    def rate_control_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rateControlMode"))

    @rate_control_mode.setter
    def rate_control_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e43f8448b1243f483e2cc0d46cd422a6342366351f68d84348a6be15195d7c38)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rateControlMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scanType")
    def scan_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scanType"))

    @scan_type.setter
    def scan_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b222c1a66a597c382cb702b2f3eebc4ab45aac61894de2e730a5e853bbd39829)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scanType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sceneChangeDetect")
    def scene_change_detect(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sceneChangeDetect"))

    @scene_change_detect.setter
    def scene_change_detect(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ea47343492593e01ee4bb134ba82c7be149efbfcd6c2b6b971f0d13fa93ea9d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sceneChangeDetect", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="slices")
    def slices(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "slices"))

    @slices.setter
    def slices(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ceeb4c0b0b7c8cb3ed7a232a2dda93b7d96e2af1592a0e978bf0c6bf6e21b0e7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "slices", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="softness")
    def softness(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "softness"))

    @softness.setter
    def softness(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4401180dbec8f3fbd91f21c65beabb52829940246136dd9839e98d0ca6ad917c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "softness", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="spatialAq")
    def spatial_aq(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "spatialAq"))

    @spatial_aq.setter
    def spatial_aq(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccbfa26751fbc318e4d030650587bae9075f383b4418b14ae945b594d0c29ccd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "spatialAq", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="subgopLength")
    def subgop_length(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "subgopLength"))

    @subgop_length.setter
    def subgop_length(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6828009df3d3f4e973372f03719f8908c542b1d2b9ca60076003ca63d971f62e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "subgopLength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="syntax")
    def syntax(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "syntax"))

    @syntax.setter
    def syntax(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7dc8d4c8420754308bfd316b2be4fa9005e938886af55ed3b5f576ff84d2f4e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "syntax", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="temporalAq")
    def temporal_aq(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "temporalAq"))

    @temporal_aq.setter
    def temporal_aq(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ec06bffe0cd93803c078a164623297f8ce5f48d003543c424c2894dc90e0b44)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "temporalAq", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timecodeInsertion")
    def timecode_insertion(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timecodeInsertion"))

    @timecode_insertion.setter
    def timecode_insertion(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6be1ddb40798cc5b7f429c7bd35e433ff7552d3b570fa2ecbb826a5239122bab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timecodeInsertion", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__313db0194ff00f03710a07e4a8963d0e7cbc880506466d897ba699a7199bb362)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings",
    jsii_struct_bases=[],
    name_mapping={
        "bitrate": "bitrate",
        "framerate_denominator": "framerateDenominator",
        "framerate_numerator": "framerateNumerator",
        "adaptive_quantization": "adaptiveQuantization",
        "afd_signaling": "afdSignaling",
        "alternative_transfer_function": "alternativeTransferFunction",
        "buf_size": "bufSize",
        "color_metadata": "colorMetadata",
        "color_space_settings": "colorSpaceSettings",
        "filter_settings": "filterSettings",
        "fixed_afd": "fixedAfd",
        "flicker_aq": "flickerAq",
        "gop_closed_cadence": "gopClosedCadence",
        "gop_size": "gopSize",
        "gop_size_units": "gopSizeUnits",
        "level": "level",
        "look_ahead_rate_control": "lookAheadRateControl",
        "max_bitrate": "maxBitrate",
        "min_i_interval": "minIInterval",
        "min_qp": "minQp",
        "mv_over_picture_boundaries": "mvOverPictureBoundaries",
        "mv_temporal_predictor": "mvTemporalPredictor",
        "par_denominator": "parDenominator",
        "par_numerator": "parNumerator",
        "profile": "profile",
        "qvbr_quality_level": "qvbrQualityLevel",
        "rate_control_mode": "rateControlMode",
        "scan_type": "scanType",
        "scene_change_detect": "sceneChangeDetect",
        "slices": "slices",
        "tier": "tier",
        "tile_height": "tileHeight",
        "tile_padding": "tilePadding",
        "tile_width": "tileWidth",
        "timecode_burnin_settings": "timecodeBurninSettings",
        "timecode_insertion": "timecodeInsertion",
        "treeblock_size": "treeblockSize",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings:
    def __init__(
        self,
        *,
        bitrate: jsii.Number,
        framerate_denominator: jsii.Number,
        framerate_numerator: jsii.Number,
        adaptive_quantization: typing.Optional[builtins.str] = None,
        afd_signaling: typing.Optional[builtins.str] = None,
        alternative_transfer_function: typing.Optional[builtins.str] = None,
        buf_size: typing.Optional[jsii.Number] = None,
        color_metadata: typing.Optional[builtins.str] = None,
        color_space_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        filter_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        fixed_afd: typing.Optional[builtins.str] = None,
        flicker_aq: typing.Optional[builtins.str] = None,
        gop_closed_cadence: typing.Optional[jsii.Number] = None,
        gop_size: typing.Optional[jsii.Number] = None,
        gop_size_units: typing.Optional[builtins.str] = None,
        level: typing.Optional[builtins.str] = None,
        look_ahead_rate_control: typing.Optional[builtins.str] = None,
        max_bitrate: typing.Optional[jsii.Number] = None,
        min_i_interval: typing.Optional[jsii.Number] = None,
        min_qp: typing.Optional[jsii.Number] = None,
        mv_over_picture_boundaries: typing.Optional[builtins.str] = None,
        mv_temporal_predictor: typing.Optional[builtins.str] = None,
        par_denominator: typing.Optional[jsii.Number] = None,
        par_numerator: typing.Optional[jsii.Number] = None,
        profile: typing.Optional[builtins.str] = None,
        qvbr_quality_level: typing.Optional[jsii.Number] = None,
        rate_control_mode: typing.Optional[builtins.str] = None,
        scan_type: typing.Optional[builtins.str] = None,
        scene_change_detect: typing.Optional[builtins.str] = None,
        slices: typing.Optional[jsii.Number] = None,
        tier: typing.Optional[builtins.str] = None,
        tile_height: typing.Optional[jsii.Number] = None,
        tile_padding: typing.Optional[builtins.str] = None,
        tile_width: typing.Optional[jsii.Number] = None,
        timecode_burnin_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        timecode_insertion: typing.Optional[builtins.str] = None,
        treeblock_size: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param framerate_denominator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.
        :param framerate_numerator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.
        :param adaptive_quantization: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.
        :param afd_signaling: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.
        :param alternative_transfer_function: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alternative_transfer_function MedialiveChannel#alternative_transfer_function}.
        :param buf_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_size MedialiveChannel#buf_size}.
        :param color_metadata: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_metadata MedialiveChannel#color_metadata}.
        :param color_space_settings: color_space_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_settings MedialiveChannel#color_space_settings}
        :param filter_settings: filter_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        :param fixed_afd: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.
        :param flicker_aq: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.
        :param gop_closed_cadence: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.
        :param gop_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size MedialiveChannel#gop_size}.
        :param gop_size_units: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.
        :param level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#level MedialiveChannel#level}.
        :param look_ahead_rate_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.
        :param max_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.
        :param min_i_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.
        :param min_qp: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_qp MedialiveChannel#min_qp}.
        :param mv_over_picture_boundaries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mv_over_picture_boundaries MedialiveChannel#mv_over_picture_boundaries}.
        :param mv_temporal_predictor: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mv_temporal_predictor MedialiveChannel#mv_temporal_predictor}.
        :param par_denominator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_denominator MedialiveChannel#par_denominator}.
        :param par_numerator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_numerator MedialiveChannel#par_numerator}.
        :param profile: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.
        :param qvbr_quality_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.
        :param rate_control_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.
        :param scan_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scan_type MedialiveChannel#scan_type}.
        :param scene_change_detect: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.
        :param slices: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#slices MedialiveChannel#slices}.
        :param tier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tier MedialiveChannel#tier}.
        :param tile_height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_height MedialiveChannel#tile_height}.
        :param tile_padding: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_padding MedialiveChannel#tile_padding}.
        :param tile_width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_width MedialiveChannel#tile_width}.
        :param timecode_burnin_settings: timecode_burnin_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_settings MedialiveChannel#timecode_burnin_settings}
        :param timecode_insertion: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.
        :param treeblock_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#treeblock_size MedialiveChannel#treeblock_size}.
        '''
        if isinstance(color_space_settings, dict):
            color_space_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings(**color_space_settings)
        if isinstance(filter_settings, dict):
            filter_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings(**filter_settings)
        if isinstance(timecode_burnin_settings, dict):
            timecode_burnin_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings(**timecode_burnin_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca6764221b770471d20de4594c096d92fae80d3b69a502cf6b3de8dc6d5bc131)
            check_type(argname="argument bitrate", value=bitrate, expected_type=type_hints["bitrate"])
            check_type(argname="argument framerate_denominator", value=framerate_denominator, expected_type=type_hints["framerate_denominator"])
            check_type(argname="argument framerate_numerator", value=framerate_numerator, expected_type=type_hints["framerate_numerator"])
            check_type(argname="argument adaptive_quantization", value=adaptive_quantization, expected_type=type_hints["adaptive_quantization"])
            check_type(argname="argument afd_signaling", value=afd_signaling, expected_type=type_hints["afd_signaling"])
            check_type(argname="argument alternative_transfer_function", value=alternative_transfer_function, expected_type=type_hints["alternative_transfer_function"])
            check_type(argname="argument buf_size", value=buf_size, expected_type=type_hints["buf_size"])
            check_type(argname="argument color_metadata", value=color_metadata, expected_type=type_hints["color_metadata"])
            check_type(argname="argument color_space_settings", value=color_space_settings, expected_type=type_hints["color_space_settings"])
            check_type(argname="argument filter_settings", value=filter_settings, expected_type=type_hints["filter_settings"])
            check_type(argname="argument fixed_afd", value=fixed_afd, expected_type=type_hints["fixed_afd"])
            check_type(argname="argument flicker_aq", value=flicker_aq, expected_type=type_hints["flicker_aq"])
            check_type(argname="argument gop_closed_cadence", value=gop_closed_cadence, expected_type=type_hints["gop_closed_cadence"])
            check_type(argname="argument gop_size", value=gop_size, expected_type=type_hints["gop_size"])
            check_type(argname="argument gop_size_units", value=gop_size_units, expected_type=type_hints["gop_size_units"])
            check_type(argname="argument level", value=level, expected_type=type_hints["level"])
            check_type(argname="argument look_ahead_rate_control", value=look_ahead_rate_control, expected_type=type_hints["look_ahead_rate_control"])
            check_type(argname="argument max_bitrate", value=max_bitrate, expected_type=type_hints["max_bitrate"])
            check_type(argname="argument min_i_interval", value=min_i_interval, expected_type=type_hints["min_i_interval"])
            check_type(argname="argument min_qp", value=min_qp, expected_type=type_hints["min_qp"])
            check_type(argname="argument mv_over_picture_boundaries", value=mv_over_picture_boundaries, expected_type=type_hints["mv_over_picture_boundaries"])
            check_type(argname="argument mv_temporal_predictor", value=mv_temporal_predictor, expected_type=type_hints["mv_temporal_predictor"])
            check_type(argname="argument par_denominator", value=par_denominator, expected_type=type_hints["par_denominator"])
            check_type(argname="argument par_numerator", value=par_numerator, expected_type=type_hints["par_numerator"])
            check_type(argname="argument profile", value=profile, expected_type=type_hints["profile"])
            check_type(argname="argument qvbr_quality_level", value=qvbr_quality_level, expected_type=type_hints["qvbr_quality_level"])
            check_type(argname="argument rate_control_mode", value=rate_control_mode, expected_type=type_hints["rate_control_mode"])
            check_type(argname="argument scan_type", value=scan_type, expected_type=type_hints["scan_type"])
            check_type(argname="argument scene_change_detect", value=scene_change_detect, expected_type=type_hints["scene_change_detect"])
            check_type(argname="argument slices", value=slices, expected_type=type_hints["slices"])
            check_type(argname="argument tier", value=tier, expected_type=type_hints["tier"])
            check_type(argname="argument tile_height", value=tile_height, expected_type=type_hints["tile_height"])
            check_type(argname="argument tile_padding", value=tile_padding, expected_type=type_hints["tile_padding"])
            check_type(argname="argument tile_width", value=tile_width, expected_type=type_hints["tile_width"])
            check_type(argname="argument timecode_burnin_settings", value=timecode_burnin_settings, expected_type=type_hints["timecode_burnin_settings"])
            check_type(argname="argument timecode_insertion", value=timecode_insertion, expected_type=type_hints["timecode_insertion"])
            check_type(argname="argument treeblock_size", value=treeblock_size, expected_type=type_hints["treeblock_size"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "bitrate": bitrate,
            "framerate_denominator": framerate_denominator,
            "framerate_numerator": framerate_numerator,
        }
        if adaptive_quantization is not None:
            self._values["adaptive_quantization"] = adaptive_quantization
        if afd_signaling is not None:
            self._values["afd_signaling"] = afd_signaling
        if alternative_transfer_function is not None:
            self._values["alternative_transfer_function"] = alternative_transfer_function
        if buf_size is not None:
            self._values["buf_size"] = buf_size
        if color_metadata is not None:
            self._values["color_metadata"] = color_metadata
        if color_space_settings is not None:
            self._values["color_space_settings"] = color_space_settings
        if filter_settings is not None:
            self._values["filter_settings"] = filter_settings
        if fixed_afd is not None:
            self._values["fixed_afd"] = fixed_afd
        if flicker_aq is not None:
            self._values["flicker_aq"] = flicker_aq
        if gop_closed_cadence is not None:
            self._values["gop_closed_cadence"] = gop_closed_cadence
        if gop_size is not None:
            self._values["gop_size"] = gop_size
        if gop_size_units is not None:
            self._values["gop_size_units"] = gop_size_units
        if level is not None:
            self._values["level"] = level
        if look_ahead_rate_control is not None:
            self._values["look_ahead_rate_control"] = look_ahead_rate_control
        if max_bitrate is not None:
            self._values["max_bitrate"] = max_bitrate
        if min_i_interval is not None:
            self._values["min_i_interval"] = min_i_interval
        if min_qp is not None:
            self._values["min_qp"] = min_qp
        if mv_over_picture_boundaries is not None:
            self._values["mv_over_picture_boundaries"] = mv_over_picture_boundaries
        if mv_temporal_predictor is not None:
            self._values["mv_temporal_predictor"] = mv_temporal_predictor
        if par_denominator is not None:
            self._values["par_denominator"] = par_denominator
        if par_numerator is not None:
            self._values["par_numerator"] = par_numerator
        if profile is not None:
            self._values["profile"] = profile
        if qvbr_quality_level is not None:
            self._values["qvbr_quality_level"] = qvbr_quality_level
        if rate_control_mode is not None:
            self._values["rate_control_mode"] = rate_control_mode
        if scan_type is not None:
            self._values["scan_type"] = scan_type
        if scene_change_detect is not None:
            self._values["scene_change_detect"] = scene_change_detect
        if slices is not None:
            self._values["slices"] = slices
        if tier is not None:
            self._values["tier"] = tier
        if tile_height is not None:
            self._values["tile_height"] = tile_height
        if tile_padding is not None:
            self._values["tile_padding"] = tile_padding
        if tile_width is not None:
            self._values["tile_width"] = tile_width
        if timecode_burnin_settings is not None:
            self._values["timecode_burnin_settings"] = timecode_burnin_settings
        if timecode_insertion is not None:
            self._values["timecode_insertion"] = timecode_insertion
        if treeblock_size is not None:
            self._values["treeblock_size"] = treeblock_size

    @builtins.property
    def bitrate(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.'''
        result = self._values.get("bitrate")
        assert result is not None, "Required property 'bitrate' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def framerate_denominator(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.'''
        result = self._values.get("framerate_denominator")
        assert result is not None, "Required property 'framerate_denominator' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def framerate_numerator(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.'''
        result = self._values.get("framerate_numerator")
        assert result is not None, "Required property 'framerate_numerator' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def adaptive_quantization(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.'''
        result = self._values.get("adaptive_quantization")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def afd_signaling(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.'''
        result = self._values.get("afd_signaling")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def alternative_transfer_function(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alternative_transfer_function MedialiveChannel#alternative_transfer_function}.'''
        result = self._values.get("alternative_transfer_function")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def buf_size(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_size MedialiveChannel#buf_size}.'''
        result = self._values.get("buf_size")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def color_metadata(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_metadata MedialiveChannel#color_metadata}.'''
        result = self._values.get("color_metadata")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def color_space_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings"]:
        '''color_space_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_settings MedialiveChannel#color_space_settings}
        '''
        result = self._values.get("color_space_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings"], result)

    @builtins.property
    def filter_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings"]:
        '''filter_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        '''
        result = self._values.get("filter_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings"], result)

    @builtins.property
    def fixed_afd(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.'''
        result = self._values.get("fixed_afd")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def flicker_aq(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.'''
        result = self._values.get("flicker_aq")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def gop_closed_cadence(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.'''
        result = self._values.get("gop_closed_cadence")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_size(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size MedialiveChannel#gop_size}.'''
        result = self._values.get("gop_size")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def gop_size_units(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.'''
        result = self._values.get("gop_size_units")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def level(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#level MedialiveChannel#level}.'''
        result = self._values.get("level")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def look_ahead_rate_control(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.'''
        result = self._values.get("look_ahead_rate_control")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def max_bitrate(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.'''
        result = self._values.get("max_bitrate")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def min_i_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.'''
        result = self._values.get("min_i_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def min_qp(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_qp MedialiveChannel#min_qp}.'''
        result = self._values.get("min_qp")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def mv_over_picture_boundaries(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mv_over_picture_boundaries MedialiveChannel#mv_over_picture_boundaries}.'''
        result = self._values.get("mv_over_picture_boundaries")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def mv_temporal_predictor(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mv_temporal_predictor MedialiveChannel#mv_temporal_predictor}.'''
        result = self._values.get("mv_temporal_predictor")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def par_denominator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_denominator MedialiveChannel#par_denominator}.'''
        result = self._values.get("par_denominator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def par_numerator(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_numerator MedialiveChannel#par_numerator}.'''
        result = self._values.get("par_numerator")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def profile(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.'''
        result = self._values.get("profile")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def qvbr_quality_level(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.'''
        result = self._values.get("qvbr_quality_level")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def rate_control_mode(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.'''
        result = self._values.get("rate_control_mode")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scan_type(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scan_type MedialiveChannel#scan_type}.'''
        result = self._values.get("scan_type")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scene_change_detect(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.'''
        result = self._values.get("scene_change_detect")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def slices(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#slices MedialiveChannel#slices}.'''
        result = self._values.get("slices")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def tier(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tier MedialiveChannel#tier}.'''
        result = self._values.get("tier")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def tile_height(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_height MedialiveChannel#tile_height}.'''
        result = self._values.get("tile_height")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def tile_padding(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_padding MedialiveChannel#tile_padding}.'''
        result = self._values.get("tile_padding")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def tile_width(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_width MedialiveChannel#tile_width}.'''
        result = self._values.get("tile_width")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def timecode_burnin_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings"]:
        '''timecode_burnin_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_settings MedialiveChannel#timecode_burnin_settings}
        '''
        result = self._values.get("timecode_burnin_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings"], result)

    @builtins.property
    def timecode_insertion(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.'''
        result = self._values.get("timecode_insertion")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def treeblock_size(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#treeblock_size MedialiveChannel#treeblock_size}.'''
        result = self._values.get("treeblock_size")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings",
    jsii_struct_bases=[],
    name_mapping={
        "color_space_passthrough_settings": "colorSpacePassthroughSettings",
        "dolby_vision81_settings": "dolbyVision81Settings",
        "hdr10_settings": "hdr10Settings",
        "rec601_settings": "rec601Settings",
        "rec709_settings": "rec709Settings",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings:
    def __init__(
        self,
        *,
        color_space_passthrough_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dolby_vision81_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings", typing.Dict[builtins.str, typing.Any]]] = None,
        hdr10_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings", typing.Dict[builtins.str, typing.Any]]] = None,
        rec601_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings", typing.Dict[builtins.str, typing.Any]]] = None,
        rec709_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param color_space_passthrough_settings: color_space_passthrough_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_passthrough_settings MedialiveChannel#color_space_passthrough_settings}
        :param dolby_vision81_settings: dolby_vision81_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dolby_vision81_settings MedialiveChannel#dolby_vision81_settings}
        :param hdr10_settings: hdr10_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hdr10_settings MedialiveChannel#hdr10_settings}
        :param rec601_settings: rec601_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rec601_settings MedialiveChannel#rec601_settings}
        :param rec709_settings: rec709_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rec709_settings MedialiveChannel#rec709_settings}
        '''
        if isinstance(color_space_passthrough_settings, dict):
            color_space_passthrough_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings(**color_space_passthrough_settings)
        if isinstance(dolby_vision81_settings, dict):
            dolby_vision81_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings(**dolby_vision81_settings)
        if isinstance(hdr10_settings, dict):
            hdr10_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings(**hdr10_settings)
        if isinstance(rec601_settings, dict):
            rec601_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings(**rec601_settings)
        if isinstance(rec709_settings, dict):
            rec709_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings(**rec709_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97758701312993177e9e0ca55a2505580441cb2a5cc7f0c4b4b679b89d392f46)
            check_type(argname="argument color_space_passthrough_settings", value=color_space_passthrough_settings, expected_type=type_hints["color_space_passthrough_settings"])
            check_type(argname="argument dolby_vision81_settings", value=dolby_vision81_settings, expected_type=type_hints["dolby_vision81_settings"])
            check_type(argname="argument hdr10_settings", value=hdr10_settings, expected_type=type_hints["hdr10_settings"])
            check_type(argname="argument rec601_settings", value=rec601_settings, expected_type=type_hints["rec601_settings"])
            check_type(argname="argument rec709_settings", value=rec709_settings, expected_type=type_hints["rec709_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color_space_passthrough_settings is not None:
            self._values["color_space_passthrough_settings"] = color_space_passthrough_settings
        if dolby_vision81_settings is not None:
            self._values["dolby_vision81_settings"] = dolby_vision81_settings
        if hdr10_settings is not None:
            self._values["hdr10_settings"] = hdr10_settings
        if rec601_settings is not None:
            self._values["rec601_settings"] = rec601_settings
        if rec709_settings is not None:
            self._values["rec709_settings"] = rec709_settings

    @builtins.property
    def color_space_passthrough_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings"]:
        '''color_space_passthrough_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_passthrough_settings MedialiveChannel#color_space_passthrough_settings}
        '''
        result = self._values.get("color_space_passthrough_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings"], result)

    @builtins.property
    def dolby_vision81_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings"]:
        '''dolby_vision81_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dolby_vision81_settings MedialiveChannel#dolby_vision81_settings}
        '''
        result = self._values.get("dolby_vision81_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings"], result)

    @builtins.property
    def hdr10_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings"]:
        '''hdr10_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hdr10_settings MedialiveChannel#hdr10_settings}
        '''
        result = self._values.get("hdr10_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings"], result)

    @builtins.property
    def rec601_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings"]:
        '''rec601_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rec601_settings MedialiveChannel#rec601_settings}
        '''
        result = self._values.get("rec601_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings"], result)

    @builtins.property
    def rec709_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings"]:
        '''rec709_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rec709_settings MedialiveChannel#rec709_settings}
        '''
        result = self._values.get("rec709_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5cd819ff751722d5a7aa403108bcc1579e39f7aab303785a642208965dad21d7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df6f9fb5ef68201e257fdedac8bf8dc99fe852e3c8d7f48def9786e7b02dd7dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a6259c0bcc1c87a9cd3725063c726b016be9b04c61b4c4c25793ad5e81fa2a2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e77f9ce0531f6c595c0bd1c1971e94df83a023a822a511843902f374bf4a9cb4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings",
    jsii_struct_bases=[],
    name_mapping={"max_cll": "maxCll", "max_fall": "maxFall"},
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings:
    def __init__(
        self,
        *,
        max_cll: typing.Optional[jsii.Number] = None,
        max_fall: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param max_cll: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_cll MedialiveChannel#max_cll}.
        :param max_fall: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_fall MedialiveChannel#max_fall}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4292eef06a456c57eb6690a33d5a809be2d9a1b275f8ed6186b480a34c988e14)
            check_type(argname="argument max_cll", value=max_cll, expected_type=type_hints["max_cll"])
            check_type(argname="argument max_fall", value=max_fall, expected_type=type_hints["max_fall"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if max_cll is not None:
            self._values["max_cll"] = max_cll
        if max_fall is not None:
            self._values["max_fall"] = max_fall

    @builtins.property
    def max_cll(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_cll MedialiveChannel#max_cll}.'''
        result = self._values.get("max_cll")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def max_fall(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_fall MedialiveChannel#max_fall}.'''
        result = self._values.get("max_fall")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59143d21104a94d5a11103a1d921f9ba4d01c40b63a599b4fd75fd3679b74a5e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetMaxCll")
    def reset_max_cll(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxCll", []))

    @jsii.member(jsii_name="resetMaxFall")
    def reset_max_fall(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxFall", []))

    @builtins.property
    @jsii.member(jsii_name="maxCllInput")
    def max_cll_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "maxCllInput"))

    @builtins.property
    @jsii.member(jsii_name="maxFallInput")
    def max_fall_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "maxFallInput"))

    @builtins.property
    @jsii.member(jsii_name="maxCll")
    def max_cll(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "maxCll"))

    @max_cll.setter
    def max_cll(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12ebec7fc20e828c5724d527a35695a90a714419e7a8c5d2b5d970280d73e740)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxCll", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="maxFall")
    def max_fall(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "maxFall"))

    @max_fall.setter
    def max_fall(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e165db770a440926b1634555222da812ecff7218c3031506a2358b58097d9b6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxFall", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11966f621afbe930c2c309bd7ba46eb3862ae6117b1e925233a5106d547521c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb5b6b7025d8e36967c8bde29643bd88549fefb790494c77a45ff801300b9148)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putColorSpacePassthroughSettings")
    def put_color_space_passthrough_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings()

        return typing.cast(None, jsii.invoke(self, "putColorSpacePassthroughSettings", [value]))

    @jsii.member(jsii_name="putDolbyVision81Settings")
    def put_dolby_vision81_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings()

        return typing.cast(None, jsii.invoke(self, "putDolbyVision81Settings", [value]))

    @jsii.member(jsii_name="putHdr10Settings")
    def put_hdr10_settings(
        self,
        *,
        max_cll: typing.Optional[jsii.Number] = None,
        max_fall: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param max_cll: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_cll MedialiveChannel#max_cll}.
        :param max_fall: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_fall MedialiveChannel#max_fall}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings(
            max_cll=max_cll, max_fall=max_fall
        )

        return typing.cast(None, jsii.invoke(self, "putHdr10Settings", [value]))

    @jsii.member(jsii_name="putRec601Settings")
    def put_rec601_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings()

        return typing.cast(None, jsii.invoke(self, "putRec601Settings", [value]))

    @jsii.member(jsii_name="putRec709Settings")
    def put_rec709_settings(self) -> None:
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings()

        return typing.cast(None, jsii.invoke(self, "putRec709Settings", [value]))

    @jsii.member(jsii_name="resetColorSpacePassthroughSettings")
    def reset_color_space_passthrough_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorSpacePassthroughSettings", []))

    @jsii.member(jsii_name="resetDolbyVision81Settings")
    def reset_dolby_vision81_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDolbyVision81Settings", []))

    @jsii.member(jsii_name="resetHdr10Settings")
    def reset_hdr10_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHdr10Settings", []))

    @jsii.member(jsii_name="resetRec601Settings")
    def reset_rec601_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRec601Settings", []))

    @jsii.member(jsii_name="resetRec709Settings")
    def reset_rec709_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRec709Settings", []))

    @builtins.property
    @jsii.member(jsii_name="colorSpacePassthroughSettings")
    def color_space_passthrough_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference, jsii.get(self, "colorSpacePassthroughSettings"))

    @builtins.property
    @jsii.member(jsii_name="dolbyVision81Settings")
    def dolby_vision81_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference, jsii.get(self, "dolbyVision81Settings"))

    @builtins.property
    @jsii.member(jsii_name="hdr10Settings")
    def hdr10_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference, jsii.get(self, "hdr10Settings"))

    @builtins.property
    @jsii.member(jsii_name="rec601Settings")
    def rec601_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference", jsii.get(self, "rec601Settings"))

    @builtins.property
    @jsii.member(jsii_name="rec709Settings")
    def rec709_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference", jsii.get(self, "rec709Settings"))

    @builtins.property
    @jsii.member(jsii_name="colorSpacePassthroughSettingsInput")
    def color_space_passthrough_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings], jsii.get(self, "colorSpacePassthroughSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dolbyVision81SettingsInput")
    def dolby_vision81_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings], jsii.get(self, "dolbyVision81SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="hdr10SettingsInput")
    def hdr10_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings], jsii.get(self, "hdr10SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rec601SettingsInput")
    def rec601_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings"], jsii.get(self, "rec601SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="rec709SettingsInput")
    def rec709_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings"], jsii.get(self, "rec709SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3bb52b859fd8841b758c1c2d29f0238f38e23dd5c97f2d30449872d113aebe7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7378e7dbbc39f6a0a5dddffa7592a52e942bc15b6e66d30ba9ebf4c7b629bd3f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__502db04b73666f7c6f6d20e13bb354f746317a610559fd7c48a26e0ec35af26c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__db395a91683cb863b65a44ee5dfd4458061c4594b39c525de3de0b75d413134c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9fcbcf10e45393abb88ff9bb57033788408b319eb8331a15c5102f6f40ffcea8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings",
    jsii_struct_bases=[],
    name_mapping={"temporal_filter_settings": "temporalFilterSettings"},
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings:
    def __init__(
        self,
        *,
        temporal_filter_settings: typing.Optional[typing.Union["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param temporal_filter_settings: temporal_filter_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        if isinstance(temporal_filter_settings, dict):
            temporal_filter_settings = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings(**temporal_filter_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6891ba34e46261562b42e9bd82213f23915aae47a058eb48581f5ba8e89d522a)
            check_type(argname="argument temporal_filter_settings", value=temporal_filter_settings, expected_type=type_hints["temporal_filter_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if temporal_filter_settings is not None:
            self._values["temporal_filter_settings"] = temporal_filter_settings

    @builtins.property
    def temporal_filter_settings(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings"]:
        '''temporal_filter_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        result = self._values.get("temporal_filter_settings")
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdfb387e347ef9176b531fefd9019f8557f769e74ae28ae8aa8e433f034397a4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putTemporalFilterSettings")
    def put_temporal_filter_settings(
        self,
        *,
        post_filter_sharpening: typing.Optional[builtins.str] = None,
        strength: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param post_filter_sharpening: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.
        :param strength: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#strength MedialiveChannel#strength}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings(
            post_filter_sharpening=post_filter_sharpening, strength=strength
        )

        return typing.cast(None, jsii.invoke(self, "putTemporalFilterSettings", [value]))

    @jsii.member(jsii_name="resetTemporalFilterSettings")
    def reset_temporal_filter_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTemporalFilterSettings", []))

    @builtins.property
    @jsii.member(jsii_name="temporalFilterSettings")
    def temporal_filter_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference", jsii.get(self, "temporalFilterSettings"))

    @builtins.property
    @jsii.member(jsii_name="temporalFilterSettingsInput")
    def temporal_filter_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings"], jsii.get(self, "temporalFilterSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__702b46fa7c2a80612384c4f7f2dc15211f7ce10eb2fc58f249585bfae72df2d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings",
    jsii_struct_bases=[],
    name_mapping={
        "post_filter_sharpening": "postFilterSharpening",
        "strength": "strength",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings:
    def __init__(
        self,
        *,
        post_filter_sharpening: typing.Optional[builtins.str] = None,
        strength: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param post_filter_sharpening: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.
        :param strength: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#strength MedialiveChannel#strength}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7726c7dad8f2fcf51d7bc9a7e67f862006f24a7425e2d1b243f03216af86fd7f)
            check_type(argname="argument post_filter_sharpening", value=post_filter_sharpening, expected_type=type_hints["post_filter_sharpening"])
            check_type(argname="argument strength", value=strength, expected_type=type_hints["strength"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if post_filter_sharpening is not None:
            self._values["post_filter_sharpening"] = post_filter_sharpening
        if strength is not None:
            self._values["strength"] = strength

    @builtins.property
    def post_filter_sharpening(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#post_filter_sharpening MedialiveChannel#post_filter_sharpening}.'''
        result = self._values.get("post_filter_sharpening")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def strength(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#strength MedialiveChannel#strength}.'''
        result = self._values.get("strength")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d0dc429be022e3554a42fe1f22dd082040f82915187e7294c2e52905fc90c2f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPostFilterSharpening")
    def reset_post_filter_sharpening(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPostFilterSharpening", []))

    @jsii.member(jsii_name="resetStrength")
    def reset_strength(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStrength", []))

    @builtins.property
    @jsii.member(jsii_name="postFilterSharpeningInput")
    def post_filter_sharpening_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "postFilterSharpeningInput"))

    @builtins.property
    @jsii.member(jsii_name="strengthInput")
    def strength_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "strengthInput"))

    @builtins.property
    @jsii.member(jsii_name="postFilterSharpening")
    def post_filter_sharpening(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "postFilterSharpening"))

    @post_filter_sharpening.setter
    def post_filter_sharpening(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1145f32385b9d6735abbe0204a32850050990cfd3bc94206204f617513eb8177)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "postFilterSharpening", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="strength")
    def strength(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "strength"))

    @strength.setter
    def strength(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5077e1b11ba2a11db98aaaee4642ef5bec91f7a38c76b68e9291dee979a86f66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "strength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__78eb096a0930a562e99ca5a3960e6c23bdef7af3242273604428a2a0f00eedbb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__135ad0138a8c5f04cb30e05b537f5d6062712454dc731fad632971114dc6e2fe)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putColorSpaceSettings")
    def put_color_space_settings(
        self,
        *,
        color_space_passthrough_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        dolby_vision81_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings, typing.Dict[builtins.str, typing.Any]]] = None,
        hdr10_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings, typing.Dict[builtins.str, typing.Any]]] = None,
        rec601_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings, typing.Dict[builtins.str, typing.Any]]] = None,
        rec709_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param color_space_passthrough_settings: color_space_passthrough_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_passthrough_settings MedialiveChannel#color_space_passthrough_settings}
        :param dolby_vision81_settings: dolby_vision81_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dolby_vision81_settings MedialiveChannel#dolby_vision81_settings}
        :param hdr10_settings: hdr10_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hdr10_settings MedialiveChannel#hdr10_settings}
        :param rec601_settings: rec601_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rec601_settings MedialiveChannel#rec601_settings}
        :param rec709_settings: rec709_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rec709_settings MedialiveChannel#rec709_settings}
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings(
            color_space_passthrough_settings=color_space_passthrough_settings,
            dolby_vision81_settings=dolby_vision81_settings,
            hdr10_settings=hdr10_settings,
            rec601_settings=rec601_settings,
            rec709_settings=rec709_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putColorSpaceSettings", [value]))

    @jsii.member(jsii_name="putFilterSettings")
    def put_filter_settings(
        self,
        *,
        temporal_filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param temporal_filter_settings: temporal_filter_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_filter_settings MedialiveChannel#temporal_filter_settings}
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings(
            temporal_filter_settings=temporal_filter_settings
        )

        return typing.cast(None, jsii.invoke(self, "putFilterSettings", [value]))

    @jsii.member(jsii_name="putTimecodeBurninSettings")
    def put_timecode_burnin_settings(
        self,
        *,
        prefix: typing.Optional[builtins.str] = None,
        timecode_burnin_font_size: typing.Optional[builtins.str] = None,
        timecode_burnin_position: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param prefix: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#prefix MedialiveChannel#prefix}.
        :param timecode_burnin_font_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_font_size MedialiveChannel#timecode_burnin_font_size}.
        :param timecode_burnin_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_position MedialiveChannel#timecode_burnin_position}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings(
            prefix=prefix,
            timecode_burnin_font_size=timecode_burnin_font_size,
            timecode_burnin_position=timecode_burnin_position,
        )

        return typing.cast(None, jsii.invoke(self, "putTimecodeBurninSettings", [value]))

    @jsii.member(jsii_name="resetAdaptiveQuantization")
    def reset_adaptive_quantization(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAdaptiveQuantization", []))

    @jsii.member(jsii_name="resetAfdSignaling")
    def reset_afd_signaling(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAfdSignaling", []))

    @jsii.member(jsii_name="resetAlternativeTransferFunction")
    def reset_alternative_transfer_function(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAlternativeTransferFunction", []))

    @jsii.member(jsii_name="resetBufSize")
    def reset_buf_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufSize", []))

    @jsii.member(jsii_name="resetColorMetadata")
    def reset_color_metadata(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorMetadata", []))

    @jsii.member(jsii_name="resetColorSpaceSettings")
    def reset_color_space_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorSpaceSettings", []))

    @jsii.member(jsii_name="resetFilterSettings")
    def reset_filter_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterSettings", []))

    @jsii.member(jsii_name="resetFixedAfd")
    def reset_fixed_afd(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFixedAfd", []))

    @jsii.member(jsii_name="resetFlickerAq")
    def reset_flicker_aq(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFlickerAq", []))

    @jsii.member(jsii_name="resetGopClosedCadence")
    def reset_gop_closed_cadence(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopClosedCadence", []))

    @jsii.member(jsii_name="resetGopSize")
    def reset_gop_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopSize", []))

    @jsii.member(jsii_name="resetGopSizeUnits")
    def reset_gop_size_units(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetGopSizeUnits", []))

    @jsii.member(jsii_name="resetLevel")
    def reset_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLevel", []))

    @jsii.member(jsii_name="resetLookAheadRateControl")
    def reset_look_ahead_rate_control(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLookAheadRateControl", []))

    @jsii.member(jsii_name="resetMaxBitrate")
    def reset_max_bitrate(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMaxBitrate", []))

    @jsii.member(jsii_name="resetMinIInterval")
    def reset_min_i_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMinIInterval", []))

    @jsii.member(jsii_name="resetMinQp")
    def reset_min_qp(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMinQp", []))

    @jsii.member(jsii_name="resetMvOverPictureBoundaries")
    def reset_mv_over_picture_boundaries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMvOverPictureBoundaries", []))

    @jsii.member(jsii_name="resetMvTemporalPredictor")
    def reset_mv_temporal_predictor(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetMvTemporalPredictor", []))

    @jsii.member(jsii_name="resetParDenominator")
    def reset_par_denominator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParDenominator", []))

    @jsii.member(jsii_name="resetParNumerator")
    def reset_par_numerator(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetParNumerator", []))

    @jsii.member(jsii_name="resetProfile")
    def reset_profile(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetProfile", []))

    @jsii.member(jsii_name="resetQvbrQualityLevel")
    def reset_qvbr_quality_level(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetQvbrQualityLevel", []))

    @jsii.member(jsii_name="resetRateControlMode")
    def reset_rate_control_mode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRateControlMode", []))

    @jsii.member(jsii_name="resetScanType")
    def reset_scan_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScanType", []))

    @jsii.member(jsii_name="resetSceneChangeDetect")
    def reset_scene_change_detect(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSceneChangeDetect", []))

    @jsii.member(jsii_name="resetSlices")
    def reset_slices(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSlices", []))

    @jsii.member(jsii_name="resetTier")
    def reset_tier(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTier", []))

    @jsii.member(jsii_name="resetTileHeight")
    def reset_tile_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTileHeight", []))

    @jsii.member(jsii_name="resetTilePadding")
    def reset_tile_padding(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTilePadding", []))

    @jsii.member(jsii_name="resetTileWidth")
    def reset_tile_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTileWidth", []))

    @jsii.member(jsii_name="resetTimecodeBurninSettings")
    def reset_timecode_burnin_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimecodeBurninSettings", []))

    @jsii.member(jsii_name="resetTimecodeInsertion")
    def reset_timecode_insertion(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimecodeInsertion", []))

    @jsii.member(jsii_name="resetTreeblockSize")
    def reset_treeblock_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTreeblockSize", []))

    @builtins.property
    @jsii.member(jsii_name="colorSpaceSettings")
    def color_space_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference, jsii.get(self, "colorSpaceSettings"))

    @builtins.property
    @jsii.member(jsii_name="filterSettings")
    def filter_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference, jsii.get(self, "filterSettings"))

    @builtins.property
    @jsii.member(jsii_name="timecodeBurninSettings")
    def timecode_burnin_settings(
        self,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference":
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference", jsii.get(self, "timecodeBurninSettings"))

    @builtins.property
    @jsii.member(jsii_name="adaptiveQuantizationInput")
    def adaptive_quantization_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "adaptiveQuantizationInput"))

    @builtins.property
    @jsii.member(jsii_name="afdSignalingInput")
    def afd_signaling_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "afdSignalingInput"))

    @builtins.property
    @jsii.member(jsii_name="alternativeTransferFunctionInput")
    def alternative_transfer_function_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "alternativeTransferFunctionInput"))

    @builtins.property
    @jsii.member(jsii_name="bitrateInput")
    def bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="bufSizeInput")
    def buf_size_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="colorMetadataInput")
    def color_metadata_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorMetadataInput"))

    @builtins.property
    @jsii.member(jsii_name="colorSpaceSettingsInput")
    def color_space_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings], jsii.get(self, "colorSpaceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="filterSettingsInput")
    def filter_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings], jsii.get(self, "filterSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="fixedAfdInput")
    def fixed_afd_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "fixedAfdInput"))

    @builtins.property
    @jsii.member(jsii_name="flickerAqInput")
    def flicker_aq_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "flickerAqInput"))

    @builtins.property
    @jsii.member(jsii_name="framerateDenominatorInput")
    def framerate_denominator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "framerateDenominatorInput"))

    @builtins.property
    @jsii.member(jsii_name="framerateNumeratorInput")
    def framerate_numerator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "framerateNumeratorInput"))

    @builtins.property
    @jsii.member(jsii_name="gopClosedCadenceInput")
    def gop_closed_cadence_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gopClosedCadenceInput"))

    @builtins.property
    @jsii.member(jsii_name="gopSizeInput")
    def gop_size_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "gopSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="gopSizeUnitsInput")
    def gop_size_units_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "gopSizeUnitsInput"))

    @builtins.property
    @jsii.member(jsii_name="levelInput")
    def level_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "levelInput"))

    @builtins.property
    @jsii.member(jsii_name="lookAheadRateControlInput")
    def look_ahead_rate_control_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "lookAheadRateControlInput"))

    @builtins.property
    @jsii.member(jsii_name="maxBitrateInput")
    def max_bitrate_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "maxBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="minIIntervalInput")
    def min_i_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "minIIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="minQpInput")
    def min_qp_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "minQpInput"))

    @builtins.property
    @jsii.member(jsii_name="mvOverPictureBoundariesInput")
    def mv_over_picture_boundaries_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "mvOverPictureBoundariesInput"))

    @builtins.property
    @jsii.member(jsii_name="mvTemporalPredictorInput")
    def mv_temporal_predictor_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "mvTemporalPredictorInput"))

    @builtins.property
    @jsii.member(jsii_name="parDenominatorInput")
    def par_denominator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "parDenominatorInput"))

    @builtins.property
    @jsii.member(jsii_name="parNumeratorInput")
    def par_numerator_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "parNumeratorInput"))

    @builtins.property
    @jsii.member(jsii_name="profileInput")
    def profile_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "profileInput"))

    @builtins.property
    @jsii.member(jsii_name="qvbrQualityLevelInput")
    def qvbr_quality_level_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "qvbrQualityLevelInput"))

    @builtins.property
    @jsii.member(jsii_name="rateControlModeInput")
    def rate_control_mode_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "rateControlModeInput"))

    @builtins.property
    @jsii.member(jsii_name="scanTypeInput")
    def scan_type_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scanTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="sceneChangeDetectInput")
    def scene_change_detect_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sceneChangeDetectInput"))

    @builtins.property
    @jsii.member(jsii_name="slicesInput")
    def slices_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "slicesInput"))

    @builtins.property
    @jsii.member(jsii_name="tierInput")
    def tier_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tierInput"))

    @builtins.property
    @jsii.member(jsii_name="tileHeightInput")
    def tile_height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "tileHeightInput"))

    @builtins.property
    @jsii.member(jsii_name="tilePaddingInput")
    def tile_padding_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "tilePaddingInput"))

    @builtins.property
    @jsii.member(jsii_name="tileWidthInput")
    def tile_width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "tileWidthInput"))

    @builtins.property
    @jsii.member(jsii_name="timecodeBurninSettingsInput")
    def timecode_burnin_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings"], jsii.get(self, "timecodeBurninSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="timecodeInsertionInput")
    def timecode_insertion_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timecodeInsertionInput"))

    @builtins.property
    @jsii.member(jsii_name="treeblockSizeInput")
    def treeblock_size_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "treeblockSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="adaptiveQuantization")
    def adaptive_quantization(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "adaptiveQuantization"))

    @adaptive_quantization.setter
    def adaptive_quantization(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fbd3c43828bf03a2f1e3809ed62cedb722b28dfe1426cefcb081f7b00876d33d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "adaptiveQuantization", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="afdSignaling")
    def afd_signaling(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "afdSignaling"))

    @afd_signaling.setter
    def afd_signaling(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03c1a80d2cfe8cd856c93aa456cf25322e7f71bb9de44a86ac244322ed5a8963)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "afdSignaling", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="alternativeTransferFunction")
    def alternative_transfer_function(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "alternativeTransferFunction"))

    @alternative_transfer_function.setter
    def alternative_transfer_function(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96921a6038e5cb719bbf83b21d6d453cc40d68cce58a27e1dcc6be63d84e5dad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "alternativeTransferFunction", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bitrate")
    def bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bitrate"))

    @bitrate.setter
    def bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38562ce2f53a9036a4859c3ce31a0e018a3980a1af9d304195f6a77ab13e6b48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bufSize")
    def buf_size(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufSize"))

    @buf_size.setter
    def buf_size(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__295ea06f5530b5c3202d5aa47ec10eb2c1ec8e92cfcbc6192e2b3faeb0659f40)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="colorMetadata")
    def color_metadata(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "colorMetadata"))

    @color_metadata.setter
    def color_metadata(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21c5a39dd984aa843c16af05f31b676c1a23b1405c0ea9b9059b24b70ce21915)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "colorMetadata", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="fixedAfd")
    def fixed_afd(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "fixedAfd"))

    @fixed_afd.setter
    def fixed_afd(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32310ffb5d128d829c8b4b40f56e290db9f4db49a9278d0ef013eceedae409b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "fixedAfd", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="flickerAq")
    def flicker_aq(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "flickerAq"))

    @flicker_aq.setter
    def flicker_aq(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__384b07104828c84ffb77d2f48e6e6f3dd8e19544ad4c7976c4ea125525884c31)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "flickerAq", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="framerateDenominator")
    def framerate_denominator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "framerateDenominator"))

    @framerate_denominator.setter
    def framerate_denominator(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6163f45f2c1d7ebe087ba9eba5cac46d5cde9aad15cc7317b907d9a5e5306876)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "framerateDenominator", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="framerateNumerator")
    def framerate_numerator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "framerateNumerator"))

    @framerate_numerator.setter
    def framerate_numerator(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__91b5f1c579ae3deda7e943eacd9358c6479fee606c525a3b5baffa7b8152fb28)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "framerateNumerator", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="gopClosedCadence")
    def gop_closed_cadence(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gopClosedCadence"))

    @gop_closed_cadence.setter
    def gop_closed_cadence(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f5ebfd7ece2a99121c04c29e58f1027fb040e1dcbd5f52b34a94f7a9b00b8b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopClosedCadence", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="gopSize")
    def gop_size(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "gopSize"))

    @gop_size.setter
    def gop_size(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__789a8f032d7413ed2cb9e0e3e5bd11bbc9e5eb3ea61e4e08cb76ad55602ff40b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="gopSizeUnits")
    def gop_size_units(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "gopSizeUnits"))

    @gop_size_units.setter
    def gop_size_units(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__adecff611c0a20826af8a6e12ef6922e451160d3310dfdd30124765f386a028e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "gopSizeUnits", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="level")
    def level(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "level"))

    @level.setter
    def level(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0f13fa2bbbb1ee36f702e7b236ba0ffaa3e40d404790c158b81ea2683051b91f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "level", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="lookAheadRateControl")
    def look_ahead_rate_control(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "lookAheadRateControl"))

    @look_ahead_rate_control.setter
    def look_ahead_rate_control(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3ec10e2a76b836ff5a10fa534d620f9f48289927ac35e1a914228215fc1feb8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lookAheadRateControl", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="maxBitrate")
    def max_bitrate(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "maxBitrate"))

    @max_bitrate.setter
    def max_bitrate(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a220c3701a61be13c086037233b2e14b2474f6f23e5815d40483bf223357ff7f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maxBitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="minIInterval")
    def min_i_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "minIInterval"))

    @min_i_interval.setter
    def min_i_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1992b27d2765199a036627ee87fe2f2019154afaa3374eb9a5b16886c0e9c2ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "minIInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="minQp")
    def min_qp(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "minQp"))

    @min_qp.setter
    def min_qp(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52165836a612d4483297a4d1d797180dbe5fd5b6f4f1cdfcd000dc1a0fc17272)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "minQp", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="mvOverPictureBoundaries")
    def mv_over_picture_boundaries(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mvOverPictureBoundaries"))

    @mv_over_picture_boundaries.setter
    def mv_over_picture_boundaries(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5821ac71dbf16bf64a76de6de2e14fb88bfcc36a918ca15c0184bab968759172)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mvOverPictureBoundaries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="mvTemporalPredictor")
    def mv_temporal_predictor(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "mvTemporalPredictor"))

    @mv_temporal_predictor.setter
    def mv_temporal_predictor(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45cd5136f6aee83b3071e73d04a17adad6c7ef4d282b49b394c8829a8efd4e47)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "mvTemporalPredictor", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="parDenominator")
    def par_denominator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "parDenominator"))

    @par_denominator.setter
    def par_denominator(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a655720c1c412b87f99410d491c60d56ae0c1754bdcb848aa62987d7726f3a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "parDenominator", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="parNumerator")
    def par_numerator(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "parNumerator"))

    @par_numerator.setter
    def par_numerator(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4476e8f3843532f6617472ef123c9312e4836b1848923bac45a86119cf10dca1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "parNumerator", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="profile")
    def profile(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "profile"))

    @profile.setter
    def profile(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27b9a2ee38f7a485b24d403f6b6c2486e36a60d33656f32d218f07b4150ef3d8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "profile", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="qvbrQualityLevel")
    def qvbr_quality_level(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "qvbrQualityLevel"))

    @qvbr_quality_level.setter
    def qvbr_quality_level(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9315099d79de89665f4c52648ab5c5bf7764d6d0c14b0279a6085e5d16864aeb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "qvbrQualityLevel", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="rateControlMode")
    def rate_control_mode(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "rateControlMode"))

    @rate_control_mode.setter
    def rate_control_mode(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__adda17e77bdadd24b2cd05e9dfe877916c8ab9d134054baa298dc028fa1495f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "rateControlMode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scanType")
    def scan_type(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scanType"))

    @scan_type.setter
    def scan_type(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a9f99a37d161734d44c3762865096043fa3f955005f466c86bdab62d1619d83)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scanType", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sceneChangeDetect")
    def scene_change_detect(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sceneChangeDetect"))

    @scene_change_detect.setter
    def scene_change_detect(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95650106d4f49e24cfb3e3d634091a5ff007fa053bf92179fa0856020563fccb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sceneChangeDetect", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="slices")
    def slices(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "slices"))

    @slices.setter
    def slices(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bfc3523d4e8583ed17a1ba9c96c6987a702e5751d89f98f7d1bfbbb55c67fce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "slices", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tier")
    def tier(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "tier"))

    @tier.setter
    def tier(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__867289c33c6ac8db9ad9af8f513006e384f189b206a82a2123a1dcf5c6ddfd72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tier", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tileHeight")
    def tile_height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "tileHeight"))

    @tile_height.setter
    def tile_height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f21942f70c4a083c4ec058f256bcfdffe7975caf1e06e8149935cf756b63f9c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tileHeight", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tilePadding")
    def tile_padding(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "tilePadding"))

    @tile_padding.setter
    def tile_padding(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ea37cfeda01cea736b1c42be496526fcdf84385219dc1b564855b321974eb59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tilePadding", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tileWidth")
    def tile_width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "tileWidth"))

    @tile_width.setter
    def tile_width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1cbbb8416d8227aaaeffbe8a9dd840cf0c5f6c7a6a060e46cf0beb0e4663fbe0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tileWidth", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timecodeInsertion")
    def timecode_insertion(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timecodeInsertion"))

    @timecode_insertion.setter
    def timecode_insertion(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__046cdd98cbcd8895881c3c2959fa8480eb7a1eea9abcf3e82fbbe57cc27ef11e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timecodeInsertion", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="treeblockSize")
    def treeblock_size(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "treeblockSize"))

    @treeblock_size.setter
    def treeblock_size(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fd12fc2e5e481e814106a2b5ee0265e1a3ba2893c229867755b2f6f3a4171f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "treeblockSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8692b159ca9a412720b9e5f480dca19ff8b9e7f9ff6ca5d46ddfe03afea1c24)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings",
    jsii_struct_bases=[],
    name_mapping={
        "prefix": "prefix",
        "timecode_burnin_font_size": "timecodeBurninFontSize",
        "timecode_burnin_position": "timecodeBurninPosition",
    },
)
class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings:
    def __init__(
        self,
        *,
        prefix: typing.Optional[builtins.str] = None,
        timecode_burnin_font_size: typing.Optional[builtins.str] = None,
        timecode_burnin_position: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param prefix: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#prefix MedialiveChannel#prefix}.
        :param timecode_burnin_font_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_font_size MedialiveChannel#timecode_burnin_font_size}.
        :param timecode_burnin_position: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_position MedialiveChannel#timecode_burnin_position}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__459fdc6f5e9f0c78cbbe02545db2e55e635bf61a5f85d981a2e36e8d67e6b44e)
            check_type(argname="argument prefix", value=prefix, expected_type=type_hints["prefix"])
            check_type(argname="argument timecode_burnin_font_size", value=timecode_burnin_font_size, expected_type=type_hints["timecode_burnin_font_size"])
            check_type(argname="argument timecode_burnin_position", value=timecode_burnin_position, expected_type=type_hints["timecode_burnin_position"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if prefix is not None:
            self._values["prefix"] = prefix
        if timecode_burnin_font_size is not None:
            self._values["timecode_burnin_font_size"] = timecode_burnin_font_size
        if timecode_burnin_position is not None:
            self._values["timecode_burnin_position"] = timecode_burnin_position

    @builtins.property
    def prefix(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#prefix MedialiveChannel#prefix}.'''
        result = self._values.get("prefix")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timecode_burnin_font_size(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_font_size MedialiveChannel#timecode_burnin_font_size}.'''
        result = self._values.get("timecode_burnin_font_size")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def timecode_burnin_position(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_position MedialiveChannel#timecode_burnin_position}.'''
        result = self._values.get("timecode_burnin_position")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04a5e9ca289bf6f6037bf2947bff223a87fd6acc1ee8a96fad5b5e64061b4acb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetPrefix")
    def reset_prefix(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPrefix", []))

    @jsii.member(jsii_name="resetTimecodeBurninFontSize")
    def reset_timecode_burnin_font_size(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimecodeBurninFontSize", []))

    @jsii.member(jsii_name="resetTimecodeBurninPosition")
    def reset_timecode_burnin_position(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTimecodeBurninPosition", []))

    @builtins.property
    @jsii.member(jsii_name="prefixInput")
    def prefix_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "prefixInput"))

    @builtins.property
    @jsii.member(jsii_name="timecodeBurninFontSizeInput")
    def timecode_burnin_font_size_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timecodeBurninFontSizeInput"))

    @builtins.property
    @jsii.member(jsii_name="timecodeBurninPositionInput")
    def timecode_burnin_position_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "timecodeBurninPositionInput"))

    @builtins.property
    @jsii.member(jsii_name="prefix")
    def prefix(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "prefix"))

    @prefix.setter
    def prefix(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc4c6eb1472c19cd48a5819e5423fc458773eca178f1dea4941d47e65296ab58)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "prefix", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timecodeBurninFontSize")
    def timecode_burnin_font_size(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timecodeBurninFontSize"))

    @timecode_burnin_font_size.setter
    def timecode_burnin_font_size(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__039a481dc15dd3a21381fc8cffc4d9566040b9e068755b4b8aa2b722147d095e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timecodeBurninFontSize", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="timecodeBurninPosition")
    def timecode_burnin_position(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "timecodeBurninPosition"))

    @timecode_burnin_position.setter
    def timecode_burnin_position(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6018630d7b56c921dcb2cafeeb5b3e4e7197e3d19fbd4cd51ea0f8548e5c0644)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "timecodeBurninPosition", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa96a36e06b4c31a629f0818c441bbf62fd1b81782dc77348b89822f63f60c15)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__000f705e913d665d933139dcdbbab91209f0a1fdebde599d698f78291816484c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFrameCaptureSettings")
    def put_frame_capture_settings(
        self,
        *,
        capture_interval: typing.Optional[jsii.Number] = None,
        capture_interval_units: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param capture_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#capture_interval MedialiveChannel#capture_interval}.
        :param capture_interval_units: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#capture_interval_units MedialiveChannel#capture_interval_units}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings(
            capture_interval=capture_interval,
            capture_interval_units=capture_interval_units,
        )

        return typing.cast(None, jsii.invoke(self, "putFrameCaptureSettings", [value]))

    @jsii.member(jsii_name="putH264Settings")
    def put_h264_settings(
        self,
        *,
        adaptive_quantization: typing.Optional[builtins.str] = None,
        afd_signaling: typing.Optional[builtins.str] = None,
        bitrate: typing.Optional[jsii.Number] = None,
        buf_fill_pct: typing.Optional[jsii.Number] = None,
        buf_size: typing.Optional[jsii.Number] = None,
        color_metadata: typing.Optional[builtins.str] = None,
        entropy_encoding: typing.Optional[builtins.str] = None,
        filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        fixed_afd: typing.Optional[builtins.str] = None,
        flicker_aq: typing.Optional[builtins.str] = None,
        force_field_pictures: typing.Optional[builtins.str] = None,
        framerate_control: typing.Optional[builtins.str] = None,
        framerate_denominator: typing.Optional[jsii.Number] = None,
        framerate_numerator: typing.Optional[jsii.Number] = None,
        gop_b_reference: typing.Optional[builtins.str] = None,
        gop_closed_cadence: typing.Optional[jsii.Number] = None,
        gop_num_b_frames: typing.Optional[jsii.Number] = None,
        gop_size: typing.Optional[jsii.Number] = None,
        gop_size_units: typing.Optional[builtins.str] = None,
        level: typing.Optional[builtins.str] = None,
        look_ahead_rate_control: typing.Optional[builtins.str] = None,
        max_bitrate: typing.Optional[jsii.Number] = None,
        min_i_interval: typing.Optional[jsii.Number] = None,
        num_ref_frames: typing.Optional[jsii.Number] = None,
        par_control: typing.Optional[builtins.str] = None,
        par_denominator: typing.Optional[jsii.Number] = None,
        par_numerator: typing.Optional[jsii.Number] = None,
        profile: typing.Optional[builtins.str] = None,
        quality_level: typing.Optional[builtins.str] = None,
        qvbr_quality_level: typing.Optional[jsii.Number] = None,
        rate_control_mode: typing.Optional[builtins.str] = None,
        scan_type: typing.Optional[builtins.str] = None,
        scene_change_detect: typing.Optional[builtins.str] = None,
        slices: typing.Optional[jsii.Number] = None,
        softness: typing.Optional[jsii.Number] = None,
        spatial_aq: typing.Optional[builtins.str] = None,
        subgop_length: typing.Optional[builtins.str] = None,
        syntax: typing.Optional[builtins.str] = None,
        temporal_aq: typing.Optional[builtins.str] = None,
        timecode_insertion: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param adaptive_quantization: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.
        :param afd_signaling: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param buf_fill_pct: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_fill_pct MedialiveChannel#buf_fill_pct}.
        :param buf_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_size MedialiveChannel#buf_size}.
        :param color_metadata: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_metadata MedialiveChannel#color_metadata}.
        :param entropy_encoding: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#entropy_encoding MedialiveChannel#entropy_encoding}.
        :param filter_settings: filter_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        :param fixed_afd: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.
        :param flicker_aq: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.
        :param force_field_pictures: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#force_field_pictures MedialiveChannel#force_field_pictures}.
        :param framerate_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_control MedialiveChannel#framerate_control}.
        :param framerate_denominator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.
        :param framerate_numerator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.
        :param gop_b_reference: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_b_reference MedialiveChannel#gop_b_reference}.
        :param gop_closed_cadence: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.
        :param gop_num_b_frames: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_num_b_frames MedialiveChannel#gop_num_b_frames}.
        :param gop_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size MedialiveChannel#gop_size}.
        :param gop_size_units: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.
        :param level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#level MedialiveChannel#level}.
        :param look_ahead_rate_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.
        :param max_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.
        :param min_i_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.
        :param num_ref_frames: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#num_ref_frames MedialiveChannel#num_ref_frames}.
        :param par_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_control MedialiveChannel#par_control}.
        :param par_denominator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_denominator MedialiveChannel#par_denominator}.
        :param par_numerator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_numerator MedialiveChannel#par_numerator}.
        :param profile: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.
        :param quality_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#quality_level MedialiveChannel#quality_level}.
        :param qvbr_quality_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.
        :param rate_control_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.
        :param scan_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scan_type MedialiveChannel#scan_type}.
        :param scene_change_detect: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.
        :param slices: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#slices MedialiveChannel#slices}.
        :param softness: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#softness MedialiveChannel#softness}.
        :param spatial_aq: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#spatial_aq MedialiveChannel#spatial_aq}.
        :param subgop_length: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#subgop_length MedialiveChannel#subgop_length}.
        :param syntax: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#syntax MedialiveChannel#syntax}.
        :param temporal_aq: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#temporal_aq MedialiveChannel#temporal_aq}.
        :param timecode_insertion: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings(
            adaptive_quantization=adaptive_quantization,
            afd_signaling=afd_signaling,
            bitrate=bitrate,
            buf_fill_pct=buf_fill_pct,
            buf_size=buf_size,
            color_metadata=color_metadata,
            entropy_encoding=entropy_encoding,
            filter_settings=filter_settings,
            fixed_afd=fixed_afd,
            flicker_aq=flicker_aq,
            force_field_pictures=force_field_pictures,
            framerate_control=framerate_control,
            framerate_denominator=framerate_denominator,
            framerate_numerator=framerate_numerator,
            gop_b_reference=gop_b_reference,
            gop_closed_cadence=gop_closed_cadence,
            gop_num_b_frames=gop_num_b_frames,
            gop_size=gop_size,
            gop_size_units=gop_size_units,
            level=level,
            look_ahead_rate_control=look_ahead_rate_control,
            max_bitrate=max_bitrate,
            min_i_interval=min_i_interval,
            num_ref_frames=num_ref_frames,
            par_control=par_control,
            par_denominator=par_denominator,
            par_numerator=par_numerator,
            profile=profile,
            quality_level=quality_level,
            qvbr_quality_level=qvbr_quality_level,
            rate_control_mode=rate_control_mode,
            scan_type=scan_type,
            scene_change_detect=scene_change_detect,
            slices=slices,
            softness=softness,
            spatial_aq=spatial_aq,
            subgop_length=subgop_length,
            syntax=syntax,
            temporal_aq=temporal_aq,
            timecode_insertion=timecode_insertion,
        )

        return typing.cast(None, jsii.invoke(self, "putH264Settings", [value]))

    @jsii.member(jsii_name="putH265Settings")
    def put_h265_settings(
        self,
        *,
        bitrate: jsii.Number,
        framerate_denominator: jsii.Number,
        framerate_numerator: jsii.Number,
        adaptive_quantization: typing.Optional[builtins.str] = None,
        afd_signaling: typing.Optional[builtins.str] = None,
        alternative_transfer_function: typing.Optional[builtins.str] = None,
        buf_size: typing.Optional[jsii.Number] = None,
        color_metadata: typing.Optional[builtins.str] = None,
        color_space_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        fixed_afd: typing.Optional[builtins.str] = None,
        flicker_aq: typing.Optional[builtins.str] = None,
        gop_closed_cadence: typing.Optional[jsii.Number] = None,
        gop_size: typing.Optional[jsii.Number] = None,
        gop_size_units: typing.Optional[builtins.str] = None,
        level: typing.Optional[builtins.str] = None,
        look_ahead_rate_control: typing.Optional[builtins.str] = None,
        max_bitrate: typing.Optional[jsii.Number] = None,
        min_i_interval: typing.Optional[jsii.Number] = None,
        min_qp: typing.Optional[jsii.Number] = None,
        mv_over_picture_boundaries: typing.Optional[builtins.str] = None,
        mv_temporal_predictor: typing.Optional[builtins.str] = None,
        par_denominator: typing.Optional[jsii.Number] = None,
        par_numerator: typing.Optional[jsii.Number] = None,
        profile: typing.Optional[builtins.str] = None,
        qvbr_quality_level: typing.Optional[jsii.Number] = None,
        rate_control_mode: typing.Optional[builtins.str] = None,
        scan_type: typing.Optional[builtins.str] = None,
        scene_change_detect: typing.Optional[builtins.str] = None,
        slices: typing.Optional[jsii.Number] = None,
        tier: typing.Optional[builtins.str] = None,
        tile_height: typing.Optional[jsii.Number] = None,
        tile_padding: typing.Optional[builtins.str] = None,
        tile_width: typing.Optional[jsii.Number] = None,
        timecode_burnin_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        timecode_insertion: typing.Optional[builtins.str] = None,
        treeblock_size: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bitrate MedialiveChannel#bitrate}.
        :param framerate_denominator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_denominator MedialiveChannel#framerate_denominator}.
        :param framerate_numerator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#framerate_numerator MedialiveChannel#framerate_numerator}.
        :param adaptive_quantization: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#adaptive_quantization MedialiveChannel#adaptive_quantization}.
        :param afd_signaling: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#afd_signaling MedialiveChannel#afd_signaling}.
        :param alternative_transfer_function: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#alternative_transfer_function MedialiveChannel#alternative_transfer_function}.
        :param buf_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buf_size MedialiveChannel#buf_size}.
        :param color_metadata: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_metadata MedialiveChannel#color_metadata}.
        :param color_space_settings: color_space_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_settings MedialiveChannel#color_space_settings}
        :param filter_settings: filter_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_settings MedialiveChannel#filter_settings}
        :param fixed_afd: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#fixed_afd MedialiveChannel#fixed_afd}.
        :param flicker_aq: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#flicker_aq MedialiveChannel#flicker_aq}.
        :param gop_closed_cadence: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_closed_cadence MedialiveChannel#gop_closed_cadence}.
        :param gop_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size MedialiveChannel#gop_size}.
        :param gop_size_units: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#gop_size_units MedialiveChannel#gop_size_units}.
        :param level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#level MedialiveChannel#level}.
        :param look_ahead_rate_control: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#look_ahead_rate_control MedialiveChannel#look_ahead_rate_control}.
        :param max_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#max_bitrate MedialiveChannel#max_bitrate}.
        :param min_i_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_i_interval MedialiveChannel#min_i_interval}.
        :param min_qp: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#min_qp MedialiveChannel#min_qp}.
        :param mv_over_picture_boundaries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mv_over_picture_boundaries MedialiveChannel#mv_over_picture_boundaries}.
        :param mv_temporal_predictor: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#mv_temporal_predictor MedialiveChannel#mv_temporal_predictor}.
        :param par_denominator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_denominator MedialiveChannel#par_denominator}.
        :param par_numerator: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#par_numerator MedialiveChannel#par_numerator}.
        :param profile: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#profile MedialiveChannel#profile}.
        :param qvbr_quality_level: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#qvbr_quality_level MedialiveChannel#qvbr_quality_level}.
        :param rate_control_mode: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#rate_control_mode MedialiveChannel#rate_control_mode}.
        :param scan_type: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scan_type MedialiveChannel#scan_type}.
        :param scene_change_detect: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scene_change_detect MedialiveChannel#scene_change_detect}.
        :param slices: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#slices MedialiveChannel#slices}.
        :param tier: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tier MedialiveChannel#tier}.
        :param tile_height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_height MedialiveChannel#tile_height}.
        :param tile_padding: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_padding MedialiveChannel#tile_padding}.
        :param tile_width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tile_width MedialiveChannel#tile_width}.
        :param timecode_burnin_settings: timecode_burnin_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_burnin_settings MedialiveChannel#timecode_burnin_settings}
        :param timecode_insertion: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#timecode_insertion MedialiveChannel#timecode_insertion}.
        :param treeblock_size: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#treeblock_size MedialiveChannel#treeblock_size}.
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings(
            bitrate=bitrate,
            framerate_denominator=framerate_denominator,
            framerate_numerator=framerate_numerator,
            adaptive_quantization=adaptive_quantization,
            afd_signaling=afd_signaling,
            alternative_transfer_function=alternative_transfer_function,
            buf_size=buf_size,
            color_metadata=color_metadata,
            color_space_settings=color_space_settings,
            filter_settings=filter_settings,
            fixed_afd=fixed_afd,
            flicker_aq=flicker_aq,
            gop_closed_cadence=gop_closed_cadence,
            gop_size=gop_size,
            gop_size_units=gop_size_units,
            level=level,
            look_ahead_rate_control=look_ahead_rate_control,
            max_bitrate=max_bitrate,
            min_i_interval=min_i_interval,
            min_qp=min_qp,
            mv_over_picture_boundaries=mv_over_picture_boundaries,
            mv_temporal_predictor=mv_temporal_predictor,
            par_denominator=par_denominator,
            par_numerator=par_numerator,
            profile=profile,
            qvbr_quality_level=qvbr_quality_level,
            rate_control_mode=rate_control_mode,
            scan_type=scan_type,
            scene_change_detect=scene_change_detect,
            slices=slices,
            tier=tier,
            tile_height=tile_height,
            tile_padding=tile_padding,
            tile_width=tile_width,
            timecode_burnin_settings=timecode_burnin_settings,
            timecode_insertion=timecode_insertion,
            treeblock_size=treeblock_size,
        )

        return typing.cast(None, jsii.invoke(self, "putH265Settings", [value]))

    @jsii.member(jsii_name="resetFrameCaptureSettings")
    def reset_frame_capture_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFrameCaptureSettings", []))

    @jsii.member(jsii_name="resetH264Settings")
    def reset_h264_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetH264Settings", []))

    @jsii.member(jsii_name="resetH265Settings")
    def reset_h265_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetH265Settings", []))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureSettings")
    def frame_capture_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference, jsii.get(self, "frameCaptureSettings"))

    @builtins.property
    @jsii.member(jsii_name="h264Settings")
    def h264_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference, jsii.get(self, "h264Settings"))

    @builtins.property
    @jsii.member(jsii_name="h265Settings")
    def h265_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference, jsii.get(self, "h265Settings"))

    @builtins.property
    @jsii.member(jsii_name="frameCaptureSettingsInput")
    def frame_capture_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings], jsii.get(self, "frameCaptureSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="h264SettingsInput")
    def h264_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings], jsii.get(self, "h264SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="h265SettingsInput")
    def h265_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings], jsii.get(self, "h265SettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__112437124e30bf183f3af30eb6fc5576f9ed579046e6be3ac3715a0ce02ae010)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsVideoDescriptionsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd6adb5735655d546b6aa301ab02ce2634c95bf652bf211a779bc35c927c2e5f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a07f39658bff36f59e4ff2148804f1afaf9958f439e149d832f40cbd71e88286)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__698590c1420ee9fca74c9cda6d32989f759d7443d8a8e2b2ccdf8dd901d3a76f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c02032b932a5a2486bc0cacddeeea114255cdc60a941d38b0b7c0b93d4542eff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae7bb077b85cc268394b12143c96420614051603beddfa0de9e2e981882f3611)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsVideoDescriptions]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsVideoDescriptions]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsVideoDescriptions]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6510b25a9653182306c47681763bb7216a2697fcf273d856c4ca1d10da5c337e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6c6e07aee8ccc99a2da588164a001945f2cf3611402d9532f9c62ca4693264a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putCodecSettings")
    def put_codec_settings(
        self,
        *,
        frame_capture_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        h264_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings, typing.Dict[builtins.str, typing.Any]]] = None,
        h265_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param frame_capture_settings: frame_capture_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#frame_capture_settings MedialiveChannel#frame_capture_settings}
        :param h264_settings: h264_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h264_settings MedialiveChannel#h264_settings}
        :param h265_settings: h265_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#h265_settings MedialiveChannel#h265_settings}
        '''
        value = MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings(
            frame_capture_settings=frame_capture_settings,
            h264_settings=h264_settings,
            h265_settings=h265_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putCodecSettings", [value]))

    @jsii.member(jsii_name="resetCodecSettings")
    def reset_codec_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodecSettings", []))

    @jsii.member(jsii_name="resetHeight")
    def reset_height(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHeight", []))

    @jsii.member(jsii_name="resetRespondToAfd")
    def reset_respond_to_afd(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRespondToAfd", []))

    @jsii.member(jsii_name="resetScalingBehavior")
    def reset_scaling_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScalingBehavior", []))

    @jsii.member(jsii_name="resetSharpness")
    def reset_sharpness(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSharpness", []))

    @jsii.member(jsii_name="resetWidth")
    def reset_width(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetWidth", []))

    @builtins.property
    @jsii.member(jsii_name="codecSettings")
    def codec_settings(
        self,
    ) -> MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference:
        return typing.cast(MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference, jsii.get(self, "codecSettings"))

    @builtins.property
    @jsii.member(jsii_name="codecSettingsInput")
    def codec_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings]:
        return typing.cast(typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings], jsii.get(self, "codecSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="respondToAfdInput")
    def respond_to_afd_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "respondToAfdInput"))

    @builtins.property
    @jsii.member(jsii_name="scalingBehaviorInput")
    def scaling_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scalingBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="sharpnessInput")
    def sharpness_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sharpnessInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a54851c8288843ab3cc6601cabd91dddf5d40e0fed128d72156f7ba17110c1ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7b9217d626dc5b264f9c9e58f13b813c9eaedd6dc5ece9dd39f507ecf80427cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="respondToAfd")
    def respond_to_afd(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "respondToAfd"))

    @respond_to_afd.setter
    def respond_to_afd(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__98dd5bf390a24b09409fe1defebea6515438aaa0ffdd0fe0e3ba49b54a8f06ab)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "respondToAfd", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scalingBehavior")
    def scaling_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scalingBehavior"))

    @scaling_behavior.setter
    def scaling_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8bee286b59ba09ac4cbebd7f5cbdcdffdb3fd7eb792564b56fb0bef26ad40e5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scalingBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sharpness")
    def sharpness(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sharpness"))

    @sharpness.setter
    def sharpness(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65be266269c079458cff5e034494d02d1901e6a9b0c4d70e4ca0aff1dc7210cf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sharpness", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b4b912b33fea644114a924bc8c6d624c3fd91749529a4ab5c1fe00ee93b6cf5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsVideoDescriptions]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsVideoDescriptions]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsVideoDescriptions]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b214dbbca70cc92ca58765db8ff4478698d6918503dab389d58c3c592d40b532)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachments",
    jsii_struct_bases=[],
    name_mapping={
        "input_attachment_name": "inputAttachmentName",
        "input_id": "inputId",
        "automatic_input_failover_settings": "automaticInputFailoverSettings",
        "input_settings": "inputSettings",
    },
)
class MedialiveChannelInputAttachments:
    def __init__(
        self,
        *,
        input_attachment_name: builtins.str,
        input_id: builtins.str,
        automatic_input_failover_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        input_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param input_attachment_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_attachment_name MedialiveChannel#input_attachment_name}.
        :param input_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_id MedialiveChannel#input_id}.
        :param automatic_input_failover_settings: automatic_input_failover_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#automatic_input_failover_settings MedialiveChannel#automatic_input_failover_settings}
        :param input_settings: input_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_settings MedialiveChannel#input_settings}
        '''
        if isinstance(automatic_input_failover_settings, dict):
            automatic_input_failover_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings(**automatic_input_failover_settings)
        if isinstance(input_settings, dict):
            input_settings = MedialiveChannelInputAttachmentsInputSettings(**input_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f574e9f7a2ff21554e93f73557cbb05bf352b1058732258e6dc6c94086018485)
            check_type(argname="argument input_attachment_name", value=input_attachment_name, expected_type=type_hints["input_attachment_name"])
            check_type(argname="argument input_id", value=input_id, expected_type=type_hints["input_id"])
            check_type(argname="argument automatic_input_failover_settings", value=automatic_input_failover_settings, expected_type=type_hints["automatic_input_failover_settings"])
            check_type(argname="argument input_settings", value=input_settings, expected_type=type_hints["input_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "input_attachment_name": input_attachment_name,
            "input_id": input_id,
        }
        if automatic_input_failover_settings is not None:
            self._values["automatic_input_failover_settings"] = automatic_input_failover_settings
        if input_settings is not None:
            self._values["input_settings"] = input_settings

    @builtins.property
    def input_attachment_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_attachment_name MedialiveChannel#input_attachment_name}.'''
        result = self._values.get("input_attachment_name")
        assert result is not None, "Required property 'input_attachment_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def input_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_id MedialiveChannel#input_id}.'''
        result = self._values.get("input_id")
        assert result is not None, "Required property 'input_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def automatic_input_failover_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings"]:
        '''automatic_input_failover_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#automatic_input_failover_settings MedialiveChannel#automatic_input_failover_settings}
        '''
        result = self._values.get("automatic_input_failover_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings"], result)

    @builtins.property
    def input_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettings"]:
        '''input_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_settings MedialiveChannel#input_settings}
        '''
        result = self._values.get("input_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachments(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings",
    jsii_struct_bases=[],
    name_mapping={
        "secondary_input_id": "secondaryInputId",
        "error_clear_time_msec": "errorClearTimeMsec",
        "failover_condition": "failoverCondition",
        "input_preference": "inputPreference",
    },
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings:
    def __init__(
        self,
        *,
        secondary_input_id: builtins.str,
        error_clear_time_msec: typing.Optional[jsii.Number] = None,
        failover_condition: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition", typing.Dict[builtins.str, typing.Any]]]]] = None,
        input_preference: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param secondary_input_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#secondary_input_id MedialiveChannel#secondary_input_id}.
        :param error_clear_time_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#error_clear_time_msec MedialiveChannel#error_clear_time_msec}.
        :param failover_condition: failover_condition block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#failover_condition MedialiveChannel#failover_condition}
        :param input_preference: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_preference MedialiveChannel#input_preference}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__227a8b7f3d1c071e9fd3f5fc715426e66c728881abe2b91332fff49f2c899e50)
            check_type(argname="argument secondary_input_id", value=secondary_input_id, expected_type=type_hints["secondary_input_id"])
            check_type(argname="argument error_clear_time_msec", value=error_clear_time_msec, expected_type=type_hints["error_clear_time_msec"])
            check_type(argname="argument failover_condition", value=failover_condition, expected_type=type_hints["failover_condition"])
            check_type(argname="argument input_preference", value=input_preference, expected_type=type_hints["input_preference"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "secondary_input_id": secondary_input_id,
        }
        if error_clear_time_msec is not None:
            self._values["error_clear_time_msec"] = error_clear_time_msec
        if failover_condition is not None:
            self._values["failover_condition"] = failover_condition
        if input_preference is not None:
            self._values["input_preference"] = input_preference

    @builtins.property
    def secondary_input_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#secondary_input_id MedialiveChannel#secondary_input_id}.'''
        result = self._values.get("secondary_input_id")
        assert result is not None, "Required property 'secondary_input_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def error_clear_time_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#error_clear_time_msec MedialiveChannel#error_clear_time_msec}.'''
        result = self._values.get("error_clear_time_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def failover_condition(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition"]]]:
        '''failover_condition block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#failover_condition MedialiveChannel#failover_condition}
        '''
        result = self._values.get("failover_condition")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition"]]], result)

    @builtins.property
    def input_preference(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_preference MedialiveChannel#input_preference}.'''
        result = self._values.get("input_preference")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition",
    jsii_struct_bases=[],
    name_mapping={"failover_condition_settings": "failoverConditionSettings"},
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition:
    def __init__(
        self,
        *,
        failover_condition_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param failover_condition_settings: failover_condition_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#failover_condition_settings MedialiveChannel#failover_condition_settings}
        '''
        if isinstance(failover_condition_settings, dict):
            failover_condition_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings(**failover_condition_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f41b5f481440c814b2e6fca75d7fe62fd91cd68f1f2abaf0779ccf45432ee92)
            check_type(argname="argument failover_condition_settings", value=failover_condition_settings, expected_type=type_hints["failover_condition_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if failover_condition_settings is not None:
            self._values["failover_condition_settings"] = failover_condition_settings

    @builtins.property
    def failover_condition_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings"]:
        '''failover_condition_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#failover_condition_settings MedialiveChannel#failover_condition_settings}
        '''
        result = self._values.get("failover_condition_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_silence_settings": "audioSilenceSettings",
        "input_loss_settings": "inputLossSettings",
        "video_black_settings": "videoBlackSettings",
    },
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings:
    def __init__(
        self,
        *,
        audio_silence_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        input_loss_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        video_black_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_silence_settings: audio_silence_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_silence_settings MedialiveChannel#audio_silence_settings}
        :param input_loss_settings: input_loss_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_settings MedialiveChannel#input_loss_settings}
        :param video_black_settings: video_black_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_black_settings MedialiveChannel#video_black_settings}
        '''
        if isinstance(audio_silence_settings, dict):
            audio_silence_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings(**audio_silence_settings)
        if isinstance(input_loss_settings, dict):
            input_loss_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings(**input_loss_settings)
        if isinstance(video_black_settings, dict):
            video_black_settings = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings(**video_black_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25613eec22c8855750ce8ba9d1c3a2639488c37d9c6fc3f42a313cf462ff42ca)
            check_type(argname="argument audio_silence_settings", value=audio_silence_settings, expected_type=type_hints["audio_silence_settings"])
            check_type(argname="argument input_loss_settings", value=input_loss_settings, expected_type=type_hints["input_loss_settings"])
            check_type(argname="argument video_black_settings", value=video_black_settings, expected_type=type_hints["video_black_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if audio_silence_settings is not None:
            self._values["audio_silence_settings"] = audio_silence_settings
        if input_loss_settings is not None:
            self._values["input_loss_settings"] = input_loss_settings
        if video_black_settings is not None:
            self._values["video_black_settings"] = video_black_settings

    @builtins.property
    def audio_silence_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings"]:
        '''audio_silence_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_silence_settings MedialiveChannel#audio_silence_settings}
        '''
        result = self._values.get("audio_silence_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings"], result)

    @builtins.property
    def input_loss_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings"]:
        '''input_loss_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_settings MedialiveChannel#input_loss_settings}
        '''
        result = self._values.get("input_loss_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings"], result)

    @builtins.property
    def video_black_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings"]:
        '''video_black_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_black_settings MedialiveChannel#video_black_settings}
        '''
        result = self._values.get("video_black_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_selector_name": "audioSelectorName",
        "audio_silence_threshold_msec": "audioSilenceThresholdMsec",
    },
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings:
    def __init__(
        self,
        *,
        audio_selector_name: builtins.str,
        audio_silence_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param audio_selector_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.
        :param audio_silence_threshold_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_silence_threshold_msec MedialiveChannel#audio_silence_threshold_msec}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b317a512a6c812eb1407c2b7314dc3f5332a859882eb0c3dc0430c1b91072e0)
            check_type(argname="argument audio_selector_name", value=audio_selector_name, expected_type=type_hints["audio_selector_name"])
            check_type(argname="argument audio_silence_threshold_msec", value=audio_silence_threshold_msec, expected_type=type_hints["audio_silence_threshold_msec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "audio_selector_name": audio_selector_name,
        }
        if audio_silence_threshold_msec is not None:
            self._values["audio_silence_threshold_msec"] = audio_silence_threshold_msec

    @builtins.property
    def audio_selector_name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.'''
        result = self._values.get("audio_selector_name")
        assert result is not None, "Required property 'audio_selector_name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def audio_silence_threshold_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_silence_threshold_msec MedialiveChannel#audio_silence_threshold_msec}.'''
        result = self._values.get("audio_silence_threshold_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b01b2b0165afc4141b856928bffcff49a8fd828c5b45ec6c9436cd3cf64851fa)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetAudioSilenceThresholdMsec")
    def reset_audio_silence_threshold_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioSilenceThresholdMsec", []))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorNameInput")
    def audio_selector_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "audioSelectorNameInput"))

    @builtins.property
    @jsii.member(jsii_name="audioSilenceThresholdMsecInput")
    def audio_silence_threshold_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "audioSilenceThresholdMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorName")
    def audio_selector_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "audioSelectorName"))

    @audio_selector_name.setter
    def audio_selector_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc817326741b0f75874ab75d63ddc6e39810443bc461a2c6c3c00065f811dc32)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioSelectorName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="audioSilenceThresholdMsec")
    def audio_silence_threshold_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "audioSilenceThresholdMsec"))

    @audio_silence_threshold_msec.setter
    def audio_silence_threshold_msec(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7bf8e5530304e3b80b67b51a09b83c7c1a660b97030fdd6186562b4c2190032)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "audioSilenceThresholdMsec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a8d2bc603a1cc26549c70851d9ce39f37a3a53b014b10b55ab12255671b58d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings",
    jsii_struct_bases=[],
    name_mapping={"input_loss_threshold_msec": "inputLossThresholdMsec"},
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings:
    def __init__(
        self,
        *,
        input_loss_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param input_loss_threshold_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_threshold_msec MedialiveChannel#input_loss_threshold_msec}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bfbf23ee0ebcd32872ea627d4a2fb7b3ec001215abc8a11a07589a63677894cc)
            check_type(argname="argument input_loss_threshold_msec", value=input_loss_threshold_msec, expected_type=type_hints["input_loss_threshold_msec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if input_loss_threshold_msec is not None:
            self._values["input_loss_threshold_msec"] = input_loss_threshold_msec

    @builtins.property
    def input_loss_threshold_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_threshold_msec MedialiveChannel#input_loss_threshold_msec}.'''
        result = self._values.get("input_loss_threshold_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7635f0a18af4b031c2a4d6eb5e13323b38ab685c9c8b9ead8afb46eeec60212f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetInputLossThresholdMsec")
    def reset_input_loss_threshold_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossThresholdMsec", []))

    @builtins.property
    @jsii.member(jsii_name="inputLossThresholdMsecInput")
    def input_loss_threshold_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "inputLossThresholdMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossThresholdMsec")
    def input_loss_threshold_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "inputLossThresholdMsec"))

    @input_loss_threshold_msec.setter
    def input_loss_threshold_msec(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65a62b3e177d4c7d112d8f05e80491908be3b6de2471a00f28ba6b26d90660df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputLossThresholdMsec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09671e364114ddbfd9f6fe278bc94341dbb34e250eb986ec016eebad4f74e985)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7704513d728d7b314b411e8fbd718908d21ab8c190c676156a667990d267a23)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioSilenceSettings")
    def put_audio_silence_settings(
        self,
        *,
        audio_selector_name: builtins.str,
        audio_silence_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param audio_selector_name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_selector_name MedialiveChannel#audio_selector_name}.
        :param audio_silence_threshold_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_silence_threshold_msec MedialiveChannel#audio_silence_threshold_msec}.
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings(
            audio_selector_name=audio_selector_name,
            audio_silence_threshold_msec=audio_silence_threshold_msec,
        )

        return typing.cast(None, jsii.invoke(self, "putAudioSilenceSettings", [value]))

    @jsii.member(jsii_name="putInputLossSettings")
    def put_input_loss_settings(
        self,
        *,
        input_loss_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param input_loss_threshold_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_threshold_msec MedialiveChannel#input_loss_threshold_msec}.
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings(
            input_loss_threshold_msec=input_loss_threshold_msec
        )

        return typing.cast(None, jsii.invoke(self, "putInputLossSettings", [value]))

    @jsii.member(jsii_name="putVideoBlackSettings")
    def put_video_black_settings(
        self,
        *,
        black_detect_threshold: typing.Optional[jsii.Number] = None,
        video_black_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param black_detect_threshold: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#black_detect_threshold MedialiveChannel#black_detect_threshold}.
        :param video_black_threshold_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_black_threshold_msec MedialiveChannel#video_black_threshold_msec}.
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings(
            black_detect_threshold=black_detect_threshold,
            video_black_threshold_msec=video_black_threshold_msec,
        )

        return typing.cast(None, jsii.invoke(self, "putVideoBlackSettings", [value]))

    @jsii.member(jsii_name="resetAudioSilenceSettings")
    def reset_audio_silence_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioSilenceSettings", []))

    @jsii.member(jsii_name="resetInputLossSettings")
    def reset_input_loss_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputLossSettings", []))

    @jsii.member(jsii_name="resetVideoBlackSettings")
    def reset_video_black_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoBlackSettings", []))

    @builtins.property
    @jsii.member(jsii_name="audioSilenceSettings")
    def audio_silence_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference, jsii.get(self, "audioSilenceSettings"))

    @builtins.property
    @jsii.member(jsii_name="inputLossSettings")
    def input_loss_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference, jsii.get(self, "inputLossSettings"))

    @builtins.property
    @jsii.member(jsii_name="videoBlackSettings")
    def video_black_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference", jsii.get(self, "videoBlackSettings"))

    @builtins.property
    @jsii.member(jsii_name="audioSilenceSettingsInput")
    def audio_silence_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings], jsii.get(self, "audioSilenceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputLossSettingsInput")
    def input_loss_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings], jsii.get(self, "inputLossSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="videoBlackSettingsInput")
    def video_black_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings"], jsii.get(self, "videoBlackSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af3e6918a79f5b507e432d3482f87afdb3b731c518274046b8f690838a2b1570)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings",
    jsii_struct_bases=[],
    name_mapping={
        "black_detect_threshold": "blackDetectThreshold",
        "video_black_threshold_msec": "videoBlackThresholdMsec",
    },
)
class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings:
    def __init__(
        self,
        *,
        black_detect_threshold: typing.Optional[jsii.Number] = None,
        video_black_threshold_msec: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param black_detect_threshold: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#black_detect_threshold MedialiveChannel#black_detect_threshold}.
        :param video_black_threshold_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_black_threshold_msec MedialiveChannel#video_black_threshold_msec}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc4c009e88d51d16bc67dad7d68e8f3ecab5444605db3f4a7b00990fe47a778a)
            check_type(argname="argument black_detect_threshold", value=black_detect_threshold, expected_type=type_hints["black_detect_threshold"])
            check_type(argname="argument video_black_threshold_msec", value=video_black_threshold_msec, expected_type=type_hints["video_black_threshold_msec"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if black_detect_threshold is not None:
            self._values["black_detect_threshold"] = black_detect_threshold
        if video_black_threshold_msec is not None:
            self._values["video_black_threshold_msec"] = video_black_threshold_msec

    @builtins.property
    def black_detect_threshold(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#black_detect_threshold MedialiveChannel#black_detect_threshold}.'''
        result = self._values.get("black_detect_threshold")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def video_black_threshold_msec(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_black_threshold_msec MedialiveChannel#video_black_threshold_msec}.'''
        result = self._values.get("video_black_threshold_msec")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f8307ff325e5273bce740bfbc1abf5d929c48085e724c533d88688410d8061a4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBlackDetectThreshold")
    def reset_black_detect_threshold(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBlackDetectThreshold", []))

    @jsii.member(jsii_name="resetVideoBlackThresholdMsec")
    def reset_video_black_threshold_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoBlackThresholdMsec", []))

    @builtins.property
    @jsii.member(jsii_name="blackDetectThresholdInput")
    def black_detect_threshold_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "blackDetectThresholdInput"))

    @builtins.property
    @jsii.member(jsii_name="videoBlackThresholdMsecInput")
    def video_black_threshold_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "videoBlackThresholdMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="blackDetectThreshold")
    def black_detect_threshold(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "blackDetectThreshold"))

    @black_detect_threshold.setter
    def black_detect_threshold(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04edfb70ebb3bb8ce8454c7bdd39102a47f877a05a035285f7561c4e35684877)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "blackDetectThreshold", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="videoBlackThresholdMsec")
    def video_black_threshold_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "videoBlackThresholdMsec"))

    @video_black_threshold_msec.setter
    def video_black_threshold_msec(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12394ada4a76f5dd24ed2c37b3ad1b217ebc75110d48f0dbedd432ee0dbb5dbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "videoBlackThresholdMsec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b8fbbe850aececb907e839c0120f257ec3b73daf44d21f29421b17f7ec07158)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__40420794f3a85cd7ee24ce9b18522a3790edc6611fcb76cbe1e9b09b7bbcec5f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d10918afdd71fda9dd1d967100a6b3f22d5a9a1f49f2c349276b68307569c018)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c83d06280cc9456ee5f994937ceb4f6a19b16f6e83ab77ca91bb47e44a30c1ac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc7dc781185323db847078bae358251ba5bab42cc98976ff8139fe63ddbacd39)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59290e32ccdcbe0e9e61a857180320bc59501577274b521efb6627acb4b0753c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd47d2621bcb010d2c9aa067c98bf3e980f1de66b1a22bd30cb43991931a4a9a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49f1c5eef4ff77f6134c23ecdd88bc3f7e5b74ee6c4558a3944fe4ab2ad01c65)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putFailoverConditionSettings")
    def put_failover_condition_settings(
        self,
        *,
        audio_silence_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        input_loss_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        video_black_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_silence_settings: audio_silence_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_silence_settings MedialiveChannel#audio_silence_settings}
        :param input_loss_settings: input_loss_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_loss_settings MedialiveChannel#input_loss_settings}
        :param video_black_settings: video_black_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_black_settings MedialiveChannel#video_black_settings}
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings(
            audio_silence_settings=audio_silence_settings,
            input_loss_settings=input_loss_settings,
            video_black_settings=video_black_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putFailoverConditionSettings", [value]))

    @jsii.member(jsii_name="resetFailoverConditionSettings")
    def reset_failover_condition_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFailoverConditionSettings", []))

    @builtins.property
    @jsii.member(jsii_name="failoverConditionSettings")
    def failover_condition_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference, jsii.get(self, "failoverConditionSettings"))

    @builtins.property
    @jsii.member(jsii_name="failoverConditionSettingsInput")
    def failover_condition_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings], jsii.get(self, "failoverConditionSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe4154ddb1dfef5411fa314b629e6d14350715dff1d134ac5975f7e23f41ac36)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fbf7e35f521dc3f3f2f1c4504308bbb429c7293bca1e89a14ddbfaea5a208ecd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putFailoverCondition")
    def put_failover_condition(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d062aab62d134a168fc8c20163440468a76732e196c04cac01e01b04c072f391)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFailoverCondition", [value]))

    @jsii.member(jsii_name="resetErrorClearTimeMsec")
    def reset_error_clear_time_msec(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetErrorClearTimeMsec", []))

    @jsii.member(jsii_name="resetFailoverCondition")
    def reset_failover_condition(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFailoverCondition", []))

    @jsii.member(jsii_name="resetInputPreference")
    def reset_input_preference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputPreference", []))

    @builtins.property
    @jsii.member(jsii_name="failoverCondition")
    def failover_condition(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList, jsii.get(self, "failoverCondition"))

    @builtins.property
    @jsii.member(jsii_name="errorClearTimeMsecInput")
    def error_clear_time_msec_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "errorClearTimeMsecInput"))

    @builtins.property
    @jsii.member(jsii_name="failoverConditionInput")
    def failover_condition_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]], jsii.get(self, "failoverConditionInput"))

    @builtins.property
    @jsii.member(jsii_name="inputPreferenceInput")
    def input_preference_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputPreferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="secondaryInputIdInput")
    def secondary_input_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "secondaryInputIdInput"))

    @builtins.property
    @jsii.member(jsii_name="errorClearTimeMsec")
    def error_clear_time_msec(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "errorClearTimeMsec"))

    @error_clear_time_msec.setter
    def error_clear_time_msec(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__faccc771e29d19b951b5a477fc68d66987958ebbd098e9638f76ec712a59751a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "errorClearTimeMsec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputPreference")
    def input_preference(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputPreference"))

    @input_preference.setter
    def input_preference(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__268e4edaa06c22881472129292c6fb2053da3d9ba0bdeb49bcc478a38eb6ff10)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputPreference", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="secondaryInputId")
    def secondary_input_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "secondaryInputId"))

    @secondary_input_id.setter
    def secondary_input_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__090135b0257fbc7cfaaa8cb8bcf527c7b85ee7821726b52142c190da75006a5b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "secondaryInputId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9216be390459bbc1c5af98b92980d7e3c3902ae0fa624c32e26a04e54d5bf832)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_selector": "audioSelector",
        "caption_selector": "captionSelector",
        "deblock_filter": "deblockFilter",
        "denoise_filter": "denoiseFilter",
        "filter_strength": "filterStrength",
        "input_filter": "inputFilter",
        "network_input_settings": "networkInputSettings",
        "scte35_pid": "scte35Pid",
        "smpte2038_data_preference": "smpte2038DataPreference",
        "source_end_behavior": "sourceEndBehavior",
        "video_selector": "videoSelector",
    },
)
class MedialiveChannelInputAttachmentsInputSettings:
    def __init__(
        self,
        *,
        audio_selector: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelector", typing.Dict[builtins.str, typing.Any]]]]] = None,
        caption_selector: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelector", typing.Dict[builtins.str, typing.Any]]]]] = None,
        deblock_filter: typing.Optional[builtins.str] = None,
        denoise_filter: typing.Optional[builtins.str] = None,
        filter_strength: typing.Optional[jsii.Number] = None,
        input_filter: typing.Optional[builtins.str] = None,
        network_input_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        scte35_pid: typing.Optional[jsii.Number] = None,
        smpte2038_data_preference: typing.Optional[builtins.str] = None,
        source_end_behavior: typing.Optional[builtins.str] = None,
        video_selector: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsVideoSelector", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_selector: audio_selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_selector MedialiveChannel#audio_selector}
        :param caption_selector: caption_selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_selector MedialiveChannel#caption_selector}
        :param deblock_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#deblock_filter MedialiveChannel#deblock_filter}.
        :param denoise_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#denoise_filter MedialiveChannel#denoise_filter}.
        :param filter_strength: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_strength MedialiveChannel#filter_strength}.
        :param input_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_filter MedialiveChannel#input_filter}.
        :param network_input_settings: network_input_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_input_settings MedialiveChannel#network_input_settings}
        :param scte35_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param smpte2038_data_preference: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#smpte2038_data_preference MedialiveChannel#smpte2038_data_preference}.
        :param source_end_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_end_behavior MedialiveChannel#source_end_behavior}.
        :param video_selector: video_selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_selector MedialiveChannel#video_selector}
        '''
        if isinstance(network_input_settings, dict):
            network_input_settings = MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings(**network_input_settings)
        if isinstance(video_selector, dict):
            video_selector = MedialiveChannelInputAttachmentsInputSettingsVideoSelector(**video_selector)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__363668c580fd76d99646cbdb06b0fa6b9e4b41504a33c62e17b076395bc2fef8)
            check_type(argname="argument audio_selector", value=audio_selector, expected_type=type_hints["audio_selector"])
            check_type(argname="argument caption_selector", value=caption_selector, expected_type=type_hints["caption_selector"])
            check_type(argname="argument deblock_filter", value=deblock_filter, expected_type=type_hints["deblock_filter"])
            check_type(argname="argument denoise_filter", value=denoise_filter, expected_type=type_hints["denoise_filter"])
            check_type(argname="argument filter_strength", value=filter_strength, expected_type=type_hints["filter_strength"])
            check_type(argname="argument input_filter", value=input_filter, expected_type=type_hints["input_filter"])
            check_type(argname="argument network_input_settings", value=network_input_settings, expected_type=type_hints["network_input_settings"])
            check_type(argname="argument scte35_pid", value=scte35_pid, expected_type=type_hints["scte35_pid"])
            check_type(argname="argument smpte2038_data_preference", value=smpte2038_data_preference, expected_type=type_hints["smpte2038_data_preference"])
            check_type(argname="argument source_end_behavior", value=source_end_behavior, expected_type=type_hints["source_end_behavior"])
            check_type(argname="argument video_selector", value=video_selector, expected_type=type_hints["video_selector"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if audio_selector is not None:
            self._values["audio_selector"] = audio_selector
        if caption_selector is not None:
            self._values["caption_selector"] = caption_selector
        if deblock_filter is not None:
            self._values["deblock_filter"] = deblock_filter
        if denoise_filter is not None:
            self._values["denoise_filter"] = denoise_filter
        if filter_strength is not None:
            self._values["filter_strength"] = filter_strength
        if input_filter is not None:
            self._values["input_filter"] = input_filter
        if network_input_settings is not None:
            self._values["network_input_settings"] = network_input_settings
        if scte35_pid is not None:
            self._values["scte35_pid"] = scte35_pid
        if smpte2038_data_preference is not None:
            self._values["smpte2038_data_preference"] = smpte2038_data_preference
        if source_end_behavior is not None:
            self._values["source_end_behavior"] = source_end_behavior
        if video_selector is not None:
            self._values["video_selector"] = video_selector

    @builtins.property
    def audio_selector(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelector"]]]:
        '''audio_selector block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_selector MedialiveChannel#audio_selector}
        '''
        result = self._values.get("audio_selector")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelector"]]], result)

    @builtins.property
    def caption_selector(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsCaptionSelector"]]]:
        '''caption_selector block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_selector MedialiveChannel#caption_selector}
        '''
        result = self._values.get("caption_selector")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsCaptionSelector"]]], result)

    @builtins.property
    def deblock_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#deblock_filter MedialiveChannel#deblock_filter}.'''
        result = self._values.get("deblock_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def denoise_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#denoise_filter MedialiveChannel#denoise_filter}.'''
        result = self._values.get("denoise_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def filter_strength(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_strength MedialiveChannel#filter_strength}.'''
        result = self._values.get("filter_strength")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def input_filter(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_filter MedialiveChannel#input_filter}.'''
        result = self._values.get("input_filter")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def network_input_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings"]:
        '''network_input_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_input_settings MedialiveChannel#network_input_settings}
        '''
        result = self._values.get("network_input_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings"], result)

    @builtins.property
    def scte35_pid(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.'''
        result = self._values.get("scte35_pid")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def smpte2038_data_preference(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#smpte2038_data_preference MedialiveChannel#smpte2038_data_preference}.'''
        result = self._values.get("smpte2038_data_preference")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def source_end_behavior(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_end_behavior MedialiveChannel#source_end_behavior}.'''
        result = self._values.get("source_end_behavior")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def video_selector(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsVideoSelector"]:
        '''video_selector block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_selector MedialiveChannel#video_selector}
        '''
        result = self._values.get("video_selector")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsVideoSelector"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelector",
    jsii_struct_bases=[],
    name_mapping={"name": "name", "selector_settings": "selectorSettings"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelector:
    def __init__(
        self,
        *,
        name: builtins.str,
        selector_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        :param selector_settings: selector_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#selector_settings MedialiveChannel#selector_settings}
        '''
        if isinstance(selector_settings, dict):
            selector_settings = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings(**selector_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6df57a9db32e32791e7c55305cfb855edfd3fa9529d7fb5cd23bee87c0889b92)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument selector_settings", value=selector_settings, expected_type=type_hints["selector_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
        }
        if selector_settings is not None:
            self._values["selector_settings"] = selector_settings

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def selector_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings"]:
        '''selector_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#selector_settings MedialiveChannel#selector_settings}
        '''
        result = self._values.get("selector_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c16026d061fa5c009b6f569f4c9259c79b6e5558f8496b4aeca6d8e31a6dcf73)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9a0f0122a57dbdce9ed65af5858cc985913cc5ac8636435afaf2e28d34dbf439)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__89a9a124d55db23a53ed9dc3f83ea80df2311a11d3e537d90738e7dacc768777)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4cfdcb73a4979f198779f51140e6b8d68d754b5155343708558a0c9e01aad0e1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b197aea0aa938a50b663faf663381a15bc73eb79caa2e94bdf3a6353802336a0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9628dbfbf9d3ec1717fcc7fa0ef85e910f6c93183fd0514abb0e886a653f4d99)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fcbc83665c35251d2fad2ba07dfe611397aef5a97f8d0836fd4325f183701d40)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSelectorSettings")
    def put_selector_settings(
        self,
        *,
        audio_hls_rendition_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection", typing.Dict[builtins.str, typing.Any]]] = None,
        audio_language_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection", typing.Dict[builtins.str, typing.Any]]] = None,
        audio_pid_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection", typing.Dict[builtins.str, typing.Any]]] = None,
        audio_track_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_hls_rendition_selection: audio_hls_rendition_selection block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_hls_rendition_selection MedialiveChannel#audio_hls_rendition_selection}
        :param audio_language_selection: audio_language_selection block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_language_selection MedialiveChannel#audio_language_selection}
        :param audio_pid_selection: audio_pid_selection block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pid_selection MedialiveChannel#audio_pid_selection}
        :param audio_track_selection: audio_track_selection block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_track_selection MedialiveChannel#audio_track_selection}
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings(
            audio_hls_rendition_selection=audio_hls_rendition_selection,
            audio_language_selection=audio_language_selection,
            audio_pid_selection=audio_pid_selection,
            audio_track_selection=audio_track_selection,
        )

        return typing.cast(None, jsii.invoke(self, "putSelectorSettings", [value]))

    @jsii.member(jsii_name="resetSelectorSettings")
    def reset_selector_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelectorSettings", []))

    @builtins.property
    @jsii.member(jsii_name="selectorSettings")
    def selector_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference", jsii.get(self, "selectorSettings"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="selectorSettingsInput")
    def selector_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings"], jsii.get(self, "selectorSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff3d45002f3cce79adb214b19707e01c785313a621ae159008dce292992e571d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsAudioSelector]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsAudioSelector]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad7111958db3c2623bc38b43e5c232a60241b29b674f2da7f6e718226bb94df4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings",
    jsii_struct_bases=[],
    name_mapping={
        "audio_hls_rendition_selection": "audioHlsRenditionSelection",
        "audio_language_selection": "audioLanguageSelection",
        "audio_pid_selection": "audioPidSelection",
        "audio_track_selection": "audioTrackSelection",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings:
    def __init__(
        self,
        *,
        audio_hls_rendition_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection", typing.Dict[builtins.str, typing.Any]]] = None,
        audio_language_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection", typing.Dict[builtins.str, typing.Any]]] = None,
        audio_pid_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection", typing.Dict[builtins.str, typing.Any]]] = None,
        audio_track_selection: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_hls_rendition_selection: audio_hls_rendition_selection block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_hls_rendition_selection MedialiveChannel#audio_hls_rendition_selection}
        :param audio_language_selection: audio_language_selection block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_language_selection MedialiveChannel#audio_language_selection}
        :param audio_pid_selection: audio_pid_selection block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pid_selection MedialiveChannel#audio_pid_selection}
        :param audio_track_selection: audio_track_selection block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_track_selection MedialiveChannel#audio_track_selection}
        '''
        if isinstance(audio_hls_rendition_selection, dict):
            audio_hls_rendition_selection = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection(**audio_hls_rendition_selection)
        if isinstance(audio_language_selection, dict):
            audio_language_selection = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection(**audio_language_selection)
        if isinstance(audio_pid_selection, dict):
            audio_pid_selection = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection(**audio_pid_selection)
        if isinstance(audio_track_selection, dict):
            audio_track_selection = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection(**audio_track_selection)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__212ea04fbb431447865faeb530763866bdf802e60361f078a042d9ee24617fc4)
            check_type(argname="argument audio_hls_rendition_selection", value=audio_hls_rendition_selection, expected_type=type_hints["audio_hls_rendition_selection"])
            check_type(argname="argument audio_language_selection", value=audio_language_selection, expected_type=type_hints["audio_language_selection"])
            check_type(argname="argument audio_pid_selection", value=audio_pid_selection, expected_type=type_hints["audio_pid_selection"])
            check_type(argname="argument audio_track_selection", value=audio_track_selection, expected_type=type_hints["audio_track_selection"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if audio_hls_rendition_selection is not None:
            self._values["audio_hls_rendition_selection"] = audio_hls_rendition_selection
        if audio_language_selection is not None:
            self._values["audio_language_selection"] = audio_language_selection
        if audio_pid_selection is not None:
            self._values["audio_pid_selection"] = audio_pid_selection
        if audio_track_selection is not None:
            self._values["audio_track_selection"] = audio_track_selection

    @builtins.property
    def audio_hls_rendition_selection(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection"]:
        '''audio_hls_rendition_selection block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_hls_rendition_selection MedialiveChannel#audio_hls_rendition_selection}
        '''
        result = self._values.get("audio_hls_rendition_selection")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection"], result)

    @builtins.property
    def audio_language_selection(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection"]:
        '''audio_language_selection block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_language_selection MedialiveChannel#audio_language_selection}
        '''
        result = self._values.get("audio_language_selection")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection"], result)

    @builtins.property
    def audio_pid_selection(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection"]:
        '''audio_pid_selection block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_pid_selection MedialiveChannel#audio_pid_selection}
        '''
        result = self._values.get("audio_pid_selection")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection"], result)

    @builtins.property
    def audio_track_selection(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection"]:
        '''audio_track_selection block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_track_selection MedialiveChannel#audio_track_selection}
        '''
        result = self._values.get("audio_track_selection")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection",
    jsii_struct_bases=[],
    name_mapping={"group_id": "groupId", "name": "name"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection:
    def __init__(self, *, group_id: builtins.str, name: builtins.str) -> None:
        '''
        :param group_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#group_id MedialiveChannel#group_id}.
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1c2b9b32f70f6ab7b6e72eec40c0df3feb620d245feafb911464be6f790fcb15)
            check_type(argname="argument group_id", value=group_id, expected_type=type_hints["group_id"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "group_id": group_id,
            "name": name,
        }

    @builtins.property
    def group_id(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#group_id MedialiveChannel#group_id}.'''
        result = self._values.get("group_id")
        assert result is not None, "Required property 'group_id' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc78e4a943e6956944ae5b38a64e8600f749888f3e9fcc18a6e59bd70f53c0f1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="groupIdInput")
    def group_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "groupIdInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="groupId")
    def group_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "groupId"))

    @group_id.setter
    def group_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4765b82843b7e41d4b1349c71d8e7d296ce0f4bac0fcf85e4766e9291952c111)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "groupId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f15971bc626f3ef91a726e02aad960a45157d2c8e137ae180a9c39960ffd532)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21d904bf00c8a2009fe0b02246d57b6ac50a8fa95c2ff2680bda4aef4de89e0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection",
    jsii_struct_bases=[],
    name_mapping={
        "language_code": "languageCode",
        "language_selection_policy": "languageSelectionPolicy",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection:
    def __init__(
        self,
        *,
        language_code: builtins.str,
        language_selection_policy: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param language_code: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_selection_policy: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_selection_policy MedialiveChannel#language_selection_policy}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__901114bbb5f2018f931ce999547bfdc68b2ffe31bcc56f65813880f20c943813)
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument language_selection_policy", value=language_selection_policy, expected_type=type_hints["language_selection_policy"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "language_code": language_code,
        }
        if language_selection_policy is not None:
            self._values["language_selection_policy"] = language_selection_policy

    @builtins.property
    def language_code(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        assert result is not None, "Required property 'language_code' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def language_selection_policy(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_selection_policy MedialiveChannel#language_selection_policy}.'''
        result = self._values.get("language_selection_policy")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c858bf9974ca458848f06f9ba00b0e0743b1b724e5330c91bbaf8b669940fa3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetLanguageSelectionPolicy")
    def reset_language_selection_policy(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageSelectionPolicy", []))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="languageSelectionPolicyInput")
    def language_selection_policy_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageSelectionPolicyInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3f0e84c497ededd2846b5057fa08266600aa7369f58755c36d253ff0fe9951a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="languageSelectionPolicy")
    def language_selection_policy(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageSelectionPolicy"))

    @language_selection_policy.setter
    def language_selection_policy(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21cc9540f9b5e8ead0dbe8e29f785ff8954298a7505c22ac757d5e3317a460cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageSelectionPolicy", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc9733a54c06a76ae4d72828456710c24af3aa2505e6cf1cc7d469322aa201db)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection",
    jsii_struct_bases=[],
    name_mapping={"pid": "pid"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection:
    def __init__(self, *, pid: jsii.Number) -> None:
        '''
        :param pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92be96f929616df58dc7e2440179d9a2d86880df81496929057916a2a17e9721)
            check_type(argname="argument pid", value=pid, expected_type=type_hints["pid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "pid": pid,
        }

    @builtins.property
    def pid(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.'''
        result = self._values.get("pid")
        assert result is not None, "Required property 'pid' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f13ae3022205e37c6924f311e08ed6c305e1501abc37269165b325946e2f8b9f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="pidInput")
    def pid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pidInput"))

    @builtins.property
    @jsii.member(jsii_name="pid")
    def pid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pid"))

    @pid.setter
    def pid(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b3aaea08bb34e14db4688646ada8e6f93652090afe0330692c0bae349703f18)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__87fee67be55ac3b1b0b59505b6917d60cbc872abd3717c88f48f2d7b8c27c3e5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection",
    jsii_struct_bases=[],
    name_mapping={"tracks": "tracks", "dolby_e_decode": "dolbyEDecode"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection:
    def __init__(
        self,
        *,
        tracks: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks", typing.Dict[builtins.str, typing.Any]]]],
        dolby_e_decode: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param tracks: tracks block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tracks MedialiveChannel#tracks}
        :param dolby_e_decode: dolby_e_decode block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dolby_e_decode MedialiveChannel#dolby_e_decode}
        '''
        if isinstance(dolby_e_decode, dict):
            dolby_e_decode = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode(**dolby_e_decode)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7afca43c38192230b761adaf97228936d1c4980b2c08b0c0bb58e33261375080)
            check_type(argname="argument tracks", value=tracks, expected_type=type_hints["tracks"])
            check_type(argname="argument dolby_e_decode", value=dolby_e_decode, expected_type=type_hints["dolby_e_decode"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "tracks": tracks,
        }
        if dolby_e_decode is not None:
            self._values["dolby_e_decode"] = dolby_e_decode

    @builtins.property
    def tracks(
        self,
    ) -> typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks"]]:
        '''tracks block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tracks MedialiveChannel#tracks}
        '''
        result = self._values.get("tracks")
        assert result is not None, "Required property 'tracks' is missing"
        return typing.cast(typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks"]], result)

    @builtins.property
    def dolby_e_decode(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode"]:
        '''dolby_e_decode block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dolby_e_decode MedialiveChannel#dolby_e_decode}
        '''
        result = self._values.get("dolby_e_decode")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode",
    jsii_struct_bases=[],
    name_mapping={"program_selection": "programSelection"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode:
    def __init__(self, *, program_selection: builtins.str) -> None:
        '''
        :param program_selection: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_selection MedialiveChannel#program_selection}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01fc3ebcfefb2db13cc0afcb03216d74e8993fa0f0f1072c9af5bea6a6285477)
            check_type(argname="argument program_selection", value=program_selection, expected_type=type_hints["program_selection"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "program_selection": program_selection,
        }

    @builtins.property
    def program_selection(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_selection MedialiveChannel#program_selection}.'''
        result = self._values.get("program_selection")
        assert result is not None, "Required property 'program_selection' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__caa67451a4380200dfa0cbac4aad3da671eeb74b1914b76f734f2e3c9cdbd01a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="programSelectionInput")
    def program_selection_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "programSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="programSelection")
    def program_selection(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "programSelection"))

    @program_selection.setter
    def program_selection(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37ded4835cabbb3a83ec4fc55e7bef824d3fe1cb9d7579e90df0eb5898589f2c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "programSelection", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eba968199e084e8729b907672a46c8dd520f76c30a7d3e462da149ead3108bc2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad9c4acd62655fd0b926cbab44613a16f054fb592f8b560a3b53c744a635174e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putDolbyEDecode")
    def put_dolby_e_decode(self, *, program_selection: builtins.str) -> None:
        '''
        :param program_selection: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#program_selection MedialiveChannel#program_selection}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode(
            program_selection=program_selection
        )

        return typing.cast(None, jsii.invoke(self, "putDolbyEDecode", [value]))

    @jsii.member(jsii_name="putTracks")
    def put_tracks(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa2fffb0fdd98c1eb787e243f7ea8305f9d775ea94f8aa9aa0831d03cdc63477)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTracks", [value]))

    @jsii.member(jsii_name="resetDolbyEDecode")
    def reset_dolby_e_decode(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDolbyEDecode", []))

    @builtins.property
    @jsii.member(jsii_name="dolbyEDecode")
    def dolby_e_decode(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutputReference, jsii.get(self, "dolbyEDecode"))

    @builtins.property
    @jsii.member(jsii_name="tracks")
    def tracks(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksList":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksList", jsii.get(self, "tracks"))

    @builtins.property
    @jsii.member(jsii_name="dolbyEDecodeInput")
    def dolby_e_decode_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode], jsii.get(self, "dolbyEDecodeInput"))

    @builtins.property
    @jsii.member(jsii_name="tracksInput")
    def tracks_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks"]]], jsii.get(self, "tracksInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d128f3864fb3d7c80ac43217f3fceba4eb2fdae5d7fbebd44a8eaa8f48256d7e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks",
    jsii_struct_bases=[],
    name_mapping={"track": "track"},
)
class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks:
    def __init__(self, *, track: jsii.Number) -> None:
        '''
        :param track: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#track MedialiveChannel#track}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d44f434197978335a840d491298873584ef64a77b2985dbc7f33959880e60be)
            check_type(argname="argument track", value=track, expected_type=type_hints["track"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "track": track,
        }

    @builtins.property
    def track(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#track MedialiveChannel#track}.'''
        result = self._values.get("track")
        assert result is not None, "Required property 'track' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00750658092e1fc0046fd265dcac1c0ea49f36be4436183926cf7d6705828563)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1fd4c004a1a4714f359412262eec8d2748d62161c90ae96f97f4e46422baaa74)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c38e7c50b6f4fd5ec582a1e84d30b854abcf8449b1dfb9959b011eececf8056a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bdcf91b5c7194e5fb27b5009fca5ae5e06b72b581d2aee3697fe74b95adf50e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__678a44d2fb16a0fb12c1ba11ce8d0b025df32c979727c315d9e4697d4ba48171)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3947a5ca9a3b53fc602181878099a7fce9276b9490b04605b60f32b87b92426)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68434757bff2148b2275e73a5b3597a418f565cdf75c153cc3119a3bd2f88e14)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="trackInput")
    def track_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "trackInput"))

    @builtins.property
    @jsii.member(jsii_name="track")
    def track(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "track"))

    @track.setter
    def track(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6062a0582fc0adccd0c8ecc8d5aff9e25bb660cfd3db5da27f5bffda08e42957)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "track", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07fe545dcc726b4e002ecfe45976f329a25f390ac8b8c3126cfa4821634cf19f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd9cc21bc7c50c7ec01c92ca975c8bbd5ebaa42718c2e97806818e01183aff1b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioHlsRenditionSelection")
    def put_audio_hls_rendition_selection(
        self,
        *,
        group_id: builtins.str,
        name: builtins.str,
    ) -> None:
        '''
        :param group_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#group_id MedialiveChannel#group_id}.
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection(
            group_id=group_id, name=name
        )

        return typing.cast(None, jsii.invoke(self, "putAudioHlsRenditionSelection", [value]))

    @jsii.member(jsii_name="putAudioLanguageSelection")
    def put_audio_language_selection(
        self,
        *,
        language_code: builtins.str,
        language_selection_policy: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param language_code: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.
        :param language_selection_policy: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_selection_policy MedialiveChannel#language_selection_policy}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection(
            language_code=language_code,
            language_selection_policy=language_selection_policy,
        )

        return typing.cast(None, jsii.invoke(self, "putAudioLanguageSelection", [value]))

    @jsii.member(jsii_name="putAudioPidSelection")
    def put_audio_pid_selection(self, *, pid: jsii.Number) -> None:
        '''
        :param pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection(
            pid=pid
        )

        return typing.cast(None, jsii.invoke(self, "putAudioPidSelection", [value]))

    @jsii.member(jsii_name="putAudioTrackSelection")
    def put_audio_track_selection(
        self,
        *,
        tracks: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks, typing.Dict[builtins.str, typing.Any]]]],
        dolby_e_decode: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param tracks: tracks block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#tracks MedialiveChannel#tracks}
        :param dolby_e_decode: dolby_e_decode block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dolby_e_decode MedialiveChannel#dolby_e_decode}
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection(
            tracks=tracks, dolby_e_decode=dolby_e_decode
        )

        return typing.cast(None, jsii.invoke(self, "putAudioTrackSelection", [value]))

    @jsii.member(jsii_name="resetAudioHlsRenditionSelection")
    def reset_audio_hls_rendition_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioHlsRenditionSelection", []))

    @jsii.member(jsii_name="resetAudioLanguageSelection")
    def reset_audio_language_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioLanguageSelection", []))

    @jsii.member(jsii_name="resetAudioPidSelection")
    def reset_audio_pid_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioPidSelection", []))

    @jsii.member(jsii_name="resetAudioTrackSelection")
    def reset_audio_track_selection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioTrackSelection", []))

    @builtins.property
    @jsii.member(jsii_name="audioHlsRenditionSelection")
    def audio_hls_rendition_selection(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference, jsii.get(self, "audioHlsRenditionSelection"))

    @builtins.property
    @jsii.member(jsii_name="audioLanguageSelection")
    def audio_language_selection(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference, jsii.get(self, "audioLanguageSelection"))

    @builtins.property
    @jsii.member(jsii_name="audioPidSelection")
    def audio_pid_selection(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference, jsii.get(self, "audioPidSelection"))

    @builtins.property
    @jsii.member(jsii_name="audioTrackSelection")
    def audio_track_selection(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference, jsii.get(self, "audioTrackSelection"))

    @builtins.property
    @jsii.member(jsii_name="audioHlsRenditionSelectionInput")
    def audio_hls_rendition_selection_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection], jsii.get(self, "audioHlsRenditionSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="audioLanguageSelectionInput")
    def audio_language_selection_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection], jsii.get(self, "audioLanguageSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="audioPidSelectionInput")
    def audio_pid_selection_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection], jsii.get(self, "audioPidSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="audioTrackSelectionInput")
    def audio_track_selection_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection], jsii.get(self, "audioTrackSelectionInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__556267930d80699190b2fba7e8f948dd5d63b6a4b676f436e26dad90b4a5a8cb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelector",
    jsii_struct_bases=[],
    name_mapping={
        "name": "name",
        "language_code": "languageCode",
        "selector_settings": "selectorSettings",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelector:
    def __init__(
        self,
        *,
        name: builtins.str,
        language_code: typing.Optional[builtins.str] = None,
        selector_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.
        :param language_code: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.
        :param selector_settings: selector_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#selector_settings MedialiveChannel#selector_settings}
        '''
        if isinstance(selector_settings, dict):
            selector_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings(**selector_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2fa4bb50378b3f650ae4ef8a75b86d8d4381c2b99b1a2805bc921ec4de5837c5)
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument language_code", value=language_code, expected_type=type_hints["language_code"])
            check_type(argname="argument selector_settings", value=selector_settings, expected_type=type_hints["selector_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "name": name,
        }
        if language_code is not None:
            self._values["language_code"] = language_code
        if selector_settings is not None:
            self._values["selector_settings"] = selector_settings

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#name MedialiveChannel#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def language_code(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#language_code MedialiveChannel#language_code}.'''
        result = self._values.get("language_code")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def selector_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings"]:
        '''selector_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#selector_settings MedialiveChannel#selector_settings}
        '''
        result = self._values.get("selector_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07c11b69c3c6aada55adfeb967d2650c86c64298c99a05da98074afe21ec73a1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c753e5218a37c6f38dd8b622f096029ec67c7e31e0c1d4db5c72cc8b8a9daa9f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cad0f9589d2e2f1d69ea46faaa444c19c333130c0c64101b7474f4df4059f89b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ceb63020b18137d8dadc333bff3d25b3a262fbe27c7e0b7e29affc8e01b0d4ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a695ec164c58ad32b0894c79d5c9c752bb672fc1e71635daf7d4ed08cf69a18f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c819e4144d1b44e92cab96610ea50fea21324d4655a8c6fa94420cdf21fde67)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67f97e73fe20a04337e7505c0cb5ddfcafd198cc09693b5b5a6f4bbbe1fa5034)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putSelectorSettings")
    def put_selector_settings(
        self,
        *,
        ancillary_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        arib_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sub_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        embedded_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        scte20_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        scte27_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        teletext_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param ancillary_source_settings: ancillary_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ancillary_source_settings MedialiveChannel#ancillary_source_settings}
        :param arib_source_settings: arib_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_source_settings MedialiveChannel#arib_source_settings}
        :param dvb_sub_source_settings: dvb_sub_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_source_settings MedialiveChannel#dvb_sub_source_settings}
        :param embedded_source_settings: embedded_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_source_settings MedialiveChannel#embedded_source_settings}
        :param scte20_source_settings: scte20_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_source_settings MedialiveChannel#scte20_source_settings}
        :param scte27_source_settings: scte27_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_source_settings MedialiveChannel#scte27_source_settings}
        :param teletext_source_settings: teletext_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_source_settings MedialiveChannel#teletext_source_settings}
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings(
            ancillary_source_settings=ancillary_source_settings,
            arib_source_settings=arib_source_settings,
            dvb_sub_source_settings=dvb_sub_source_settings,
            embedded_source_settings=embedded_source_settings,
            scte20_source_settings=scte20_source_settings,
            scte27_source_settings=scte27_source_settings,
            teletext_source_settings=teletext_source_settings,
        )

        return typing.cast(None, jsii.invoke(self, "putSelectorSettings", [value]))

    @jsii.member(jsii_name="resetLanguageCode")
    def reset_language_code(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLanguageCode", []))

    @jsii.member(jsii_name="resetSelectorSettings")
    def reset_selector_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSelectorSettings", []))

    @builtins.property
    @jsii.member(jsii_name="selectorSettings")
    def selector_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference", jsii.get(self, "selectorSettings"))

    @builtins.property
    @jsii.member(jsii_name="languageCodeInput")
    def language_code_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "languageCodeInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="selectorSettingsInput")
    def selector_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings"], jsii.get(self, "selectorSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="languageCode")
    def language_code(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "languageCode"))

    @language_code.setter
    def language_code(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b73783a684b18051c0de07cfa7353ba729e3abefa2b98ccfbff76e8e27f7629)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "languageCode", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61c4722d8a305f8a907ec298d1869683c3abc57cc73874405429c6e4ea4f1eed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d48868956b0e916f5db6853c0cb145f303c635941def2071895326af2f34a23f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings",
    jsii_struct_bases=[],
    name_mapping={
        "ancillary_source_settings": "ancillarySourceSettings",
        "arib_source_settings": "aribSourceSettings",
        "dvb_sub_source_settings": "dvbSubSourceSettings",
        "embedded_source_settings": "embeddedSourceSettings",
        "scte20_source_settings": "scte20SourceSettings",
        "scte27_source_settings": "scte27SourceSettings",
        "teletext_source_settings": "teletextSourceSettings",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings:
    def __init__(
        self,
        *,
        ancillary_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        arib_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        dvb_sub_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        embedded_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        scte20_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        scte27_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        teletext_source_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings", typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param ancillary_source_settings: ancillary_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ancillary_source_settings MedialiveChannel#ancillary_source_settings}
        :param arib_source_settings: arib_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_source_settings MedialiveChannel#arib_source_settings}
        :param dvb_sub_source_settings: dvb_sub_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_source_settings MedialiveChannel#dvb_sub_source_settings}
        :param embedded_source_settings: embedded_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_source_settings MedialiveChannel#embedded_source_settings}
        :param scte20_source_settings: scte20_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_source_settings MedialiveChannel#scte20_source_settings}
        :param scte27_source_settings: scte27_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_source_settings MedialiveChannel#scte27_source_settings}
        :param teletext_source_settings: teletext_source_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_source_settings MedialiveChannel#teletext_source_settings}
        '''
        if isinstance(ancillary_source_settings, dict):
            ancillary_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings(**ancillary_source_settings)
        if isinstance(arib_source_settings, dict):
            arib_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings(**arib_source_settings)
        if isinstance(dvb_sub_source_settings, dict):
            dvb_sub_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings(**dvb_sub_source_settings)
        if isinstance(embedded_source_settings, dict):
            embedded_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings(**embedded_source_settings)
        if isinstance(scte20_source_settings, dict):
            scte20_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings(**scte20_source_settings)
        if isinstance(scte27_source_settings, dict):
            scte27_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings(**scte27_source_settings)
        if isinstance(teletext_source_settings, dict):
            teletext_source_settings = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings(**teletext_source_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4512bec7d1daadcbb56c44a744390c3bf2bea809814eab937fcf8b1ae3839add)
            check_type(argname="argument ancillary_source_settings", value=ancillary_source_settings, expected_type=type_hints["ancillary_source_settings"])
            check_type(argname="argument arib_source_settings", value=arib_source_settings, expected_type=type_hints["arib_source_settings"])
            check_type(argname="argument dvb_sub_source_settings", value=dvb_sub_source_settings, expected_type=type_hints["dvb_sub_source_settings"])
            check_type(argname="argument embedded_source_settings", value=embedded_source_settings, expected_type=type_hints["embedded_source_settings"])
            check_type(argname="argument scte20_source_settings", value=scte20_source_settings, expected_type=type_hints["scte20_source_settings"])
            check_type(argname="argument scte27_source_settings", value=scte27_source_settings, expected_type=type_hints["scte27_source_settings"])
            check_type(argname="argument teletext_source_settings", value=teletext_source_settings, expected_type=type_hints["teletext_source_settings"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ancillary_source_settings is not None:
            self._values["ancillary_source_settings"] = ancillary_source_settings
        if arib_source_settings is not None:
            self._values["arib_source_settings"] = arib_source_settings
        if dvb_sub_source_settings is not None:
            self._values["dvb_sub_source_settings"] = dvb_sub_source_settings
        if embedded_source_settings is not None:
            self._values["embedded_source_settings"] = embedded_source_settings
        if scte20_source_settings is not None:
            self._values["scte20_source_settings"] = scte20_source_settings
        if scte27_source_settings is not None:
            self._values["scte27_source_settings"] = scte27_source_settings
        if teletext_source_settings is not None:
            self._values["teletext_source_settings"] = teletext_source_settings

    @builtins.property
    def ancillary_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings"]:
        '''ancillary_source_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ancillary_source_settings MedialiveChannel#ancillary_source_settings}
        '''
        result = self._values.get("ancillary_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings"], result)

    @builtins.property
    def arib_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings"]:
        '''arib_source_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#arib_source_settings MedialiveChannel#arib_source_settings}
        '''
        result = self._values.get("arib_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings"], result)

    @builtins.property
    def dvb_sub_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings"]:
        '''dvb_sub_source_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#dvb_sub_source_settings MedialiveChannel#dvb_sub_source_settings}
        '''
        result = self._values.get("dvb_sub_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings"], result)

    @builtins.property
    def embedded_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings"]:
        '''embedded_source_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#embedded_source_settings MedialiveChannel#embedded_source_settings}
        '''
        result = self._values.get("embedded_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings"], result)

    @builtins.property
    def scte20_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings"]:
        '''scte20_source_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_source_settings MedialiveChannel#scte20_source_settings}
        '''
        result = self._values.get("scte20_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings"], result)

    @builtins.property
    def scte27_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings"]:
        '''scte27_source_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte27_source_settings MedialiveChannel#scte27_source_settings}
        '''
        result = self._values.get("scte27_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings"], result)

    @builtins.property
    def teletext_source_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings"]:
        '''teletext_source_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#teletext_source_settings MedialiveChannel#teletext_source_settings}
        '''
        result = self._values.get("teletext_source_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings"], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings",
    jsii_struct_bases=[],
    name_mapping={"source_ancillary_channel_number": "sourceAncillaryChannelNumber"},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings:
    def __init__(
        self,
        *,
        source_ancillary_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param source_ancillary_channel_number: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_ancillary_channel_number MedialiveChannel#source_ancillary_channel_number}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b5672bbe4760d98c85293bb833a61ba9b561a42a42eb4d6328cfda65c5cd34b0)
            check_type(argname="argument source_ancillary_channel_number", value=source_ancillary_channel_number, expected_type=type_hints["source_ancillary_channel_number"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if source_ancillary_channel_number is not None:
            self._values["source_ancillary_channel_number"] = source_ancillary_channel_number

    @builtins.property
    def source_ancillary_channel_number(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_ancillary_channel_number MedialiveChannel#source_ancillary_channel_number}.'''
        result = self._values.get("source_ancillary_channel_number")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0ce9c9d761628fec842a8ae859bc34f7ae169eda4be0290173ec2e133371408b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetSourceAncillaryChannelNumber")
    def reset_source_ancillary_channel_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSourceAncillaryChannelNumber", []))

    @builtins.property
    @jsii.member(jsii_name="sourceAncillaryChannelNumberInput")
    def source_ancillary_channel_number_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "sourceAncillaryChannelNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceAncillaryChannelNumber")
    def source_ancillary_channel_number(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "sourceAncillaryChannelNumber"))

    @source_ancillary_channel_number.setter
    def source_ancillary_channel_number(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc1be241e1715bc926bf595305c14032e14ecf2c2070f907aa345c16c4b18fca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sourceAncillaryChannelNumber", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04b1212f2962bcf2577aae46f3790cffc6976b2f84bcb9f1f0ea1b68b65a3629)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings",
    jsii_struct_bases=[],
    name_mapping={},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings:
    def __init__(self) -> None:
        self._values: typing.Dict[builtins.str, typing.Any] = {}

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b4bf40ef7cce9bdc908988970d2d5057fec184ff69e0d8f12a6f02d0e0c17240)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52ee69c550f1e67bbf3978c397ed1f31878d7727da930694510d0e05f4d1a0c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings",
    jsii_struct_bases=[],
    name_mapping={"ocr_language": "ocrLanguage", "pid": "pid"},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings:
    def __init__(
        self,
        *,
        ocr_language: typing.Optional[builtins.str] = None,
        pid: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ocr_language: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ocr_language MedialiveChannel#ocr_language}.
        :param pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd40bc3120c4c86a52b0b5f0ab2a682c8bb9aacbe09674068968000b8548452a)
            check_type(argname="argument ocr_language", value=ocr_language, expected_type=type_hints["ocr_language"])
            check_type(argname="argument pid", value=pid, expected_type=type_hints["pid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ocr_language is not None:
            self._values["ocr_language"] = ocr_language
        if pid is not None:
            self._values["pid"] = pid

    @builtins.property
    def ocr_language(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ocr_language MedialiveChannel#ocr_language}.'''
        result = self._values.get("ocr_language")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pid(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.'''
        result = self._values.get("pid")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7fe190fab105d31ed42fc094e4080b365bb1688554f081819a6dc9ab6c552ba2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetOcrLanguage")
    def reset_ocr_language(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOcrLanguage", []))

    @jsii.member(jsii_name="resetPid")
    def reset_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPid", []))

    @builtins.property
    @jsii.member(jsii_name="ocrLanguageInput")
    def ocr_language_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ocrLanguageInput"))

    @builtins.property
    @jsii.member(jsii_name="pidInput")
    def pid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pidInput"))

    @builtins.property
    @jsii.member(jsii_name="ocrLanguage")
    def ocr_language(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ocrLanguage"))

    @ocr_language.setter
    def ocr_language(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2cea272a82f817c44001b08495db67629b5e58c9e2c77f226e935c4556070f12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ocrLanguage", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pid")
    def pid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pid"))

    @pid.setter
    def pid(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b83dda0cb0313241f5c39cb9c8b883e4e79390b506f548ff61d3a00b5a5fc134)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34122f2934e7adf5085f62c20a2b20974140b0c641df4966f2e03e24c813fee3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings",
    jsii_struct_bases=[],
    name_mapping={
        "convert608_to708": "convert608To708",
        "scte20_detection": "scte20Detection",
        "source608_channel_number": "source608ChannelNumber",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings:
    def __init__(
        self,
        *,
        convert608_to708: typing.Optional[builtins.str] = None,
        scte20_detection: typing.Optional[builtins.str] = None,
        source608_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param convert608_to708: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.
        :param scte20_detection: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_detection MedialiveChannel#scte20_detection}.
        :param source608_channel_number: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c560ad4dc592308fbcc2123e1ed8f65f684651554d5188313792e92d9d8ef68f)
            check_type(argname="argument convert608_to708", value=convert608_to708, expected_type=type_hints["convert608_to708"])
            check_type(argname="argument scte20_detection", value=scte20_detection, expected_type=type_hints["scte20_detection"])
            check_type(argname="argument source608_channel_number", value=source608_channel_number, expected_type=type_hints["source608_channel_number"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if convert608_to708 is not None:
            self._values["convert608_to708"] = convert608_to708
        if scte20_detection is not None:
            self._values["scte20_detection"] = scte20_detection
        if source608_channel_number is not None:
            self._values["source608_channel_number"] = source608_channel_number

    @builtins.property
    def convert608_to708(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.'''
        result = self._values.get("convert608_to708")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def scte20_detection(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_detection MedialiveChannel#scte20_detection}.'''
        result = self._values.get("scte20_detection")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def source608_channel_number(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.'''
        result = self._values.get("source608_channel_number")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8811b99c2c97e3502f2952b77a121b500fea85f75cad233b0893d881528f180d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConvert608To708")
    def reset_convert608_to708(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConvert608To708", []))

    @jsii.member(jsii_name="resetScte20Detection")
    def reset_scte20_detection(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte20Detection", []))

    @jsii.member(jsii_name="resetSource608ChannelNumber")
    def reset_source608_channel_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource608ChannelNumber", []))

    @builtins.property
    @jsii.member(jsii_name="convert608To708Input")
    def convert608_to708_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "convert608To708Input"))

    @builtins.property
    @jsii.member(jsii_name="scte20DetectionInput")
    def scte20_detection_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte20DetectionInput"))

    @builtins.property
    @jsii.member(jsii_name="source608ChannelNumberInput")
    def source608_channel_number_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "source608ChannelNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="convert608To708")
    def convert608_to708(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "convert608To708"))

    @convert608_to708.setter
    def convert608_to708(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5100b45b0093ba72263d4f9b345ea4ebf8e34465c80fa8a22fe867a9214b783a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "convert608To708", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte20Detection")
    def scte20_detection(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte20Detection"))

    @scte20_detection.setter
    def scte20_detection(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08d91abe9f952345a4b02bcda9eccb84e3d6d9fbb0908a74e4dd46057089f10e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte20Detection", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="source608ChannelNumber")
    def source608_channel_number(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "source608ChannelNumber"))

    @source608_channel_number.setter
    def source608_channel_number(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f1626c17c70691bbe6f7b4e66e56a140404dee4ff033c36af94b34d08b9e2dc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "source608ChannelNumber", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c0cfeba2c0af1fc75211ea8ef23324ff92d66c51fd043a457c3fd50ea462f26)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fb85cef857bcf2ebca6dbfecdc042a340d231322aeb6ef3584de3b781a1bda53)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAncillarySourceSettings")
    def put_ancillary_source_settings(
        self,
        *,
        source_ancillary_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param source_ancillary_channel_number: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_ancillary_channel_number MedialiveChannel#source_ancillary_channel_number}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings(
            source_ancillary_channel_number=source_ancillary_channel_number
        )

        return typing.cast(None, jsii.invoke(self, "putAncillarySourceSettings", [value]))

    @jsii.member(jsii_name="putAribSourceSettings")
    def put_arib_source_settings(self) -> None:
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings()

        return typing.cast(None, jsii.invoke(self, "putAribSourceSettings", [value]))

    @jsii.member(jsii_name="putDvbSubSourceSettings")
    def put_dvb_sub_source_settings(
        self,
        *,
        ocr_language: typing.Optional[builtins.str] = None,
        pid: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ocr_language: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ocr_language MedialiveChannel#ocr_language}.
        :param pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings(
            ocr_language=ocr_language, pid=pid
        )

        return typing.cast(None, jsii.invoke(self, "putDvbSubSourceSettings", [value]))

    @jsii.member(jsii_name="putEmbeddedSourceSettings")
    def put_embedded_source_settings(
        self,
        *,
        convert608_to708: typing.Optional[builtins.str] = None,
        scte20_detection: typing.Optional[builtins.str] = None,
        source608_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param convert608_to708: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.
        :param scte20_detection: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte20_detection MedialiveChannel#scte20_detection}.
        :param source608_channel_number: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings(
            convert608_to708=convert608_to708,
            scte20_detection=scte20_detection,
            source608_channel_number=source608_channel_number,
        )

        return typing.cast(None, jsii.invoke(self, "putEmbeddedSourceSettings", [value]))

    @jsii.member(jsii_name="putScte20SourceSettings")
    def put_scte20_source_settings(
        self,
        *,
        convert608_to708: typing.Optional[builtins.str] = None,
        source608_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param convert608_to708: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.
        :param source608_channel_number: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings(
            convert608_to708=convert608_to708,
            source608_channel_number=source608_channel_number,
        )

        return typing.cast(None, jsii.invoke(self, "putScte20SourceSettings", [value]))

    @jsii.member(jsii_name="putScte27SourceSettings")
    def put_scte27_source_settings(
        self,
        *,
        ocr_language: typing.Optional[builtins.str] = None,
        pid: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ocr_language: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ocr_language MedialiveChannel#ocr_language}.
        :param pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings(
            ocr_language=ocr_language, pid=pid
        )

        return typing.cast(None, jsii.invoke(self, "putScte27SourceSettings", [value]))

    @jsii.member(jsii_name="putTeletextSourceSettings")
    def put_teletext_source_settings(
        self,
        *,
        output_rectangle: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle", typing.Dict[builtins.str, typing.Any]]] = None,
        page_number: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_rectangle: output_rectangle block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_rectangle MedialiveChannel#output_rectangle}
        :param page_number: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#page_number MedialiveChannel#page_number}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings(
            output_rectangle=output_rectangle, page_number=page_number
        )

        return typing.cast(None, jsii.invoke(self, "putTeletextSourceSettings", [value]))

    @jsii.member(jsii_name="resetAncillarySourceSettings")
    def reset_ancillary_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAncillarySourceSettings", []))

    @jsii.member(jsii_name="resetAribSourceSettings")
    def reset_arib_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAribSourceSettings", []))

    @jsii.member(jsii_name="resetDvbSubSourceSettings")
    def reset_dvb_sub_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDvbSubSourceSettings", []))

    @jsii.member(jsii_name="resetEmbeddedSourceSettings")
    def reset_embedded_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEmbeddedSourceSettings", []))

    @jsii.member(jsii_name="resetScte20SourceSettings")
    def reset_scte20_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte20SourceSettings", []))

    @jsii.member(jsii_name="resetScte27SourceSettings")
    def reset_scte27_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte27SourceSettings", []))

    @jsii.member(jsii_name="resetTeletextSourceSettings")
    def reset_teletext_source_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTeletextSourceSettings", []))

    @builtins.property
    @jsii.member(jsii_name="ancillarySourceSettings")
    def ancillary_source_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference, jsii.get(self, "ancillarySourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="aribSourceSettings")
    def arib_source_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutputReference, jsii.get(self, "aribSourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="dvbSubSourceSettings")
    def dvb_sub_source_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutputReference, jsii.get(self, "dvbSubSourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="embeddedSourceSettings")
    def embedded_source_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference, jsii.get(self, "embeddedSourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="scte20SourceSettings")
    def scte20_source_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference", jsii.get(self, "scte20SourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="scte27SourceSettings")
    def scte27_source_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference", jsii.get(self, "scte27SourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="teletextSourceSettings")
    def teletext_source_settings(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference", jsii.get(self, "teletextSourceSettings"))

    @builtins.property
    @jsii.member(jsii_name="ancillarySourceSettingsInput")
    def ancillary_source_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings], jsii.get(self, "ancillarySourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="aribSourceSettingsInput")
    def arib_source_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings], jsii.get(self, "aribSourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="dvbSubSourceSettingsInput")
    def dvb_sub_source_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings], jsii.get(self, "dvbSubSourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="embeddedSourceSettingsInput")
    def embedded_source_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings], jsii.get(self, "embeddedSourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte20SourceSettingsInput")
    def scte20_source_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings"], jsii.get(self, "scte20SourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte27SourceSettingsInput")
    def scte27_source_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings"], jsii.get(self, "scte27SourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="teletextSourceSettingsInput")
    def teletext_source_settings_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings"], jsii.get(self, "teletextSourceSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b76103b15a28d2c3db80fa1879c758834891cb54681e7efb49f20f4a4f4703f4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings",
    jsii_struct_bases=[],
    name_mapping={
        "convert608_to708": "convert608To708",
        "source608_channel_number": "source608ChannelNumber",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings:
    def __init__(
        self,
        *,
        convert608_to708: typing.Optional[builtins.str] = None,
        source608_channel_number: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param convert608_to708: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.
        :param source608_channel_number: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59d8301956a222b6ee3b961f531526a3ded2ff147e04fb258d5361d1b28f7736)
            check_type(argname="argument convert608_to708", value=convert608_to708, expected_type=type_hints["convert608_to708"])
            check_type(argname="argument source608_channel_number", value=source608_channel_number, expected_type=type_hints["source608_channel_number"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if convert608_to708 is not None:
            self._values["convert608_to708"] = convert608_to708
        if source608_channel_number is not None:
            self._values["source608_channel_number"] = source608_channel_number

    @builtins.property
    def convert608_to708(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#convert_608_to_708 MedialiveChannel#convert_608_to_708}.'''
        result = self._values.get("convert608_to708")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def source608_channel_number(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_608_channel_number MedialiveChannel#source_608_channel_number}.'''
        result = self._values.get("source608_channel_number")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae315e53901fdd4c34b5abea87aa1f5f8db9be93b61d4104ecd3be89a54adde8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetConvert608To708")
    def reset_convert608_to708(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetConvert608To708", []))

    @jsii.member(jsii_name="resetSource608ChannelNumber")
    def reset_source608_channel_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSource608ChannelNumber", []))

    @builtins.property
    @jsii.member(jsii_name="convert608To708Input")
    def convert608_to708_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "convert608To708Input"))

    @builtins.property
    @jsii.member(jsii_name="source608ChannelNumberInput")
    def source608_channel_number_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "source608ChannelNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="convert608To708")
    def convert608_to708(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "convert608To708"))

    @convert608_to708.setter
    def convert608_to708(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99f958478589f328609e2f560f7af99e53dec596ae525154cdc270632e51e295)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "convert608To708", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="source608ChannelNumber")
    def source608_channel_number(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "source608ChannelNumber"))

    @source608_channel_number.setter
    def source608_channel_number(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__230d2b0e85f4302769178039a4ec4d5482b2bc60f7d09c5328987f780d5bb25a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "source608ChannelNumber", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa4369a287c4c87ca198e728ee8de4a4e2cd7ced656207b11ffeca060fe1192f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings",
    jsii_struct_bases=[],
    name_mapping={"ocr_language": "ocrLanguage", "pid": "pid"},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings:
    def __init__(
        self,
        *,
        ocr_language: typing.Optional[builtins.str] = None,
        pid: typing.Optional[jsii.Number] = None,
    ) -> None:
        '''
        :param ocr_language: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ocr_language MedialiveChannel#ocr_language}.
        :param pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d7ac12881eaeacf09475f4e0042af4943b55a5e2fc3bcfc2e934be0801423b19)
            check_type(argname="argument ocr_language", value=ocr_language, expected_type=type_hints["ocr_language"])
            check_type(argname="argument pid", value=pid, expected_type=type_hints["pid"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if ocr_language is not None:
            self._values["ocr_language"] = ocr_language
        if pid is not None:
            self._values["pid"] = pid

    @builtins.property
    def ocr_language(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#ocr_language MedialiveChannel#ocr_language}.'''
        result = self._values.get("ocr_language")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def pid(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#pid MedialiveChannel#pid}.'''
        result = self._values.get("pid")
        return typing.cast(typing.Optional[jsii.Number], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6f076a18e74172d2ac6106ef0a74edd83e98c3ce4ece0294d7fe28c37f199b3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetOcrLanguage")
    def reset_ocr_language(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOcrLanguage", []))

    @jsii.member(jsii_name="resetPid")
    def reset_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPid", []))

    @builtins.property
    @jsii.member(jsii_name="ocrLanguageInput")
    def ocr_language_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "ocrLanguageInput"))

    @builtins.property
    @jsii.member(jsii_name="pidInput")
    def pid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "pidInput"))

    @builtins.property
    @jsii.member(jsii_name="ocrLanguage")
    def ocr_language(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "ocrLanguage"))

    @ocr_language.setter
    def ocr_language(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19f66b7eae03ec7f2d7894f2e5005a914db01ba6ce6699b4109325e0c97d51ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "ocrLanguage", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="pid")
    def pid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "pid"))

    @pid.setter
    def pid(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d59755ea127ebf01436831b035f2cc00225962ed67d63ccec1b5c546fb1e886)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c73e00c8b8c63a3a2805134d321fbb2afd3ee8fab5c19d4f56d7b8fad0a012e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings",
    jsii_struct_bases=[],
    name_mapping={"output_rectangle": "outputRectangle", "page_number": "pageNumber"},
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings:
    def __init__(
        self,
        *,
        output_rectangle: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle", typing.Dict[builtins.str, typing.Any]]] = None,
        page_number: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param output_rectangle: output_rectangle block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_rectangle MedialiveChannel#output_rectangle}
        :param page_number: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#page_number MedialiveChannel#page_number}.
        '''
        if isinstance(output_rectangle, dict):
            output_rectangle = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle(**output_rectangle)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b1c79f110b2373d69fdccf1b05dff2e0ce9f513144e4c88b083a5b325db565a)
            check_type(argname="argument output_rectangle", value=output_rectangle, expected_type=type_hints["output_rectangle"])
            check_type(argname="argument page_number", value=page_number, expected_type=type_hints["page_number"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if output_rectangle is not None:
            self._values["output_rectangle"] = output_rectangle
        if page_number is not None:
            self._values["page_number"] = page_number

    @builtins.property
    def output_rectangle(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle"]:
        '''output_rectangle block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#output_rectangle MedialiveChannel#output_rectangle}
        '''
        result = self._values.get("output_rectangle")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle"], result)

    @builtins.property
    def page_number(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#page_number MedialiveChannel#page_number}.'''
        result = self._values.get("page_number")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle",
    jsii_struct_bases=[],
    name_mapping={
        "height": "height",
        "left_offset": "leftOffset",
        "top_offset": "topOffset",
        "width": "width",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle:
    def __init__(
        self,
        *,
        height: jsii.Number,
        left_offset: jsii.Number,
        top_offset: jsii.Number,
        width: jsii.Number,
    ) -> None:
        '''
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#height MedialiveChannel#height}.
        :param left_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#left_offset MedialiveChannel#left_offset}.
        :param top_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#top_offset MedialiveChannel#top_offset}.
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#width MedialiveChannel#width}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2b7609b75c29c35a2e8cebb126b85ac9c84420cec1fc6de803381e08163f6b2)
            check_type(argname="argument height", value=height, expected_type=type_hints["height"])
            check_type(argname="argument left_offset", value=left_offset, expected_type=type_hints["left_offset"])
            check_type(argname="argument top_offset", value=top_offset, expected_type=type_hints["top_offset"])
            check_type(argname="argument width", value=width, expected_type=type_hints["width"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "height": height,
            "left_offset": left_offset,
            "top_offset": top_offset,
            "width": width,
        }

    @builtins.property
    def height(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#height MedialiveChannel#height}.'''
        result = self._values.get("height")
        assert result is not None, "Required property 'height' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def left_offset(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#left_offset MedialiveChannel#left_offset}.'''
        result = self._values.get("left_offset")
        assert result is not None, "Required property 'left_offset' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def top_offset(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#top_offset MedialiveChannel#top_offset}.'''
        result = self._values.get("top_offset")
        assert result is not None, "Required property 'top_offset' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def width(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#width MedialiveChannel#width}.'''
        result = self._values.get("width")
        assert result is not None, "Required property 'width' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4406ae3579868a527f42feaf426dae24d85a08e4e90fb910b6f35f5b91d9d8f9)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="heightInput")
    def height_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "heightInput"))

    @builtins.property
    @jsii.member(jsii_name="leftOffsetInput")
    def left_offset_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "leftOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="topOffsetInput")
    def top_offset_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "topOffsetInput"))

    @builtins.property
    @jsii.member(jsii_name="widthInput")
    def width_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "widthInput"))

    @builtins.property
    @jsii.member(jsii_name="height")
    def height(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "height"))

    @height.setter
    def height(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d1049022fe6fdd7fd26f2032830798b9e51e1d238c0d7cecb267ddcd901f5a9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "height", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="leftOffset")
    def left_offset(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "leftOffset"))

    @left_offset.setter
    def left_offset(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c834316f4da2f54360ba4c5f42c4bc864be391d10b56f9a7ed16d130e91aa9c8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "leftOffset", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="topOffset")
    def top_offset(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "topOffset"))

    @top_offset.setter
    def top_offset(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f2f13deb39378e145a4747da78db38ceacb2b08cda5b2169203ac1aa91d644df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "topOffset", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="width")
    def width(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "width"))

    @width.setter
    def width(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__27c3e0744aa4b25d66275ce3619dc4d701cd378f99a5ec258f4f4cd432681b23)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "width", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cee2a6abb8a8ff81d29e9dfac4468a9cf784c935279cb9b64bb8c7778ec079be)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0d33876661a32c0061a3175f43e889f7cc6d769a93158c9db87d33cb070ebf22)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putOutputRectangle")
    def put_output_rectangle(
        self,
        *,
        height: jsii.Number,
        left_offset: jsii.Number,
        top_offset: jsii.Number,
        width: jsii.Number,
    ) -> None:
        '''
        :param height: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#height MedialiveChannel#height}.
        :param left_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#left_offset MedialiveChannel#left_offset}.
        :param top_offset: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#top_offset MedialiveChannel#top_offset}.
        :param width: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#width MedialiveChannel#width}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle(
            height=height, left_offset=left_offset, top_offset=top_offset, width=width
        )

        return typing.cast(None, jsii.invoke(self, "putOutputRectangle", [value]))

    @jsii.member(jsii_name="resetOutputRectangle")
    def reset_output_rectangle(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetOutputRectangle", []))

    @jsii.member(jsii_name="resetPageNumber")
    def reset_page_number(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPageNumber", []))

    @builtins.property
    @jsii.member(jsii_name="outputRectangle")
    def output_rectangle(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference, jsii.get(self, "outputRectangle"))

    @builtins.property
    @jsii.member(jsii_name="outputRectangleInput")
    def output_rectangle_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle], jsii.get(self, "outputRectangleInput"))

    @builtins.property
    @jsii.member(jsii_name="pageNumberInput")
    def page_number_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "pageNumberInput"))

    @builtins.property
    @jsii.member(jsii_name="pageNumber")
    def page_number(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "pageNumber"))

    @page_number.setter
    def page_number(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41491c500530dcf1e96c9b7f1255a6b94a0dd49085c42a3f8f6bede9feb7599f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "pageNumber", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9fd0c5468df71066e851a344f7db5657599d620224c1cb4034ea78b56d5f68b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "hls_input_settings": "hlsInputSettings",
        "server_validation": "serverValidation",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings:
    def __init__(
        self,
        *,
        hls_input_settings: typing.Optional[typing.Union["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings", typing.Dict[builtins.str, typing.Any]]] = None,
        server_validation: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param hls_input_settings: hls_input_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_input_settings MedialiveChannel#hls_input_settings}
        :param server_validation: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#server_validation MedialiveChannel#server_validation}.
        '''
        if isinstance(hls_input_settings, dict):
            hls_input_settings = MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings(**hls_input_settings)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9375f8b20ed8dd3a7e20479f5eba64d1fefbab3d0b41f73b6db5cd7c7b7e04ee)
            check_type(argname="argument hls_input_settings", value=hls_input_settings, expected_type=type_hints["hls_input_settings"])
            check_type(argname="argument server_validation", value=server_validation, expected_type=type_hints["server_validation"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if hls_input_settings is not None:
            self._values["hls_input_settings"] = hls_input_settings
        if server_validation is not None:
            self._values["server_validation"] = server_validation

    @builtins.property
    def hls_input_settings(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings"]:
        '''hls_input_settings block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_input_settings MedialiveChannel#hls_input_settings}
        '''
        result = self._values.get("hls_input_settings")
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings"], result)

    @builtins.property
    def server_validation(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#server_validation MedialiveChannel#server_validation}.'''
        result = self._values.get("server_validation")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings",
    jsii_struct_bases=[],
    name_mapping={
        "bandwidth": "bandwidth",
        "buffer_segments": "bufferSegments",
        "retries": "retries",
        "retry_interval": "retryInterval",
        "scte35_source": "scte35Source",
    },
)
class MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings:
    def __init__(
        self,
        *,
        bandwidth: typing.Optional[jsii.Number] = None,
        buffer_segments: typing.Optional[jsii.Number] = None,
        retries: typing.Optional[jsii.Number] = None,
        retry_interval: typing.Optional[jsii.Number] = None,
        scte35_source: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bandwidth: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bandwidth MedialiveChannel#bandwidth}.
        :param buffer_segments: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_segments MedialiveChannel#buffer_segments}.
        :param retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#retries MedialiveChannel#retries}.
        :param retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#retry_interval MedialiveChannel#retry_interval}.
        :param scte35_source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_source MedialiveChannel#scte35_source}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2523c83ff34e7fb44006fb645a84d5c8ce5849101059b27cb890bbb6a0c8d483)
            check_type(argname="argument bandwidth", value=bandwidth, expected_type=type_hints["bandwidth"])
            check_type(argname="argument buffer_segments", value=buffer_segments, expected_type=type_hints["buffer_segments"])
            check_type(argname="argument retries", value=retries, expected_type=type_hints["retries"])
            check_type(argname="argument retry_interval", value=retry_interval, expected_type=type_hints["retry_interval"])
            check_type(argname="argument scte35_source", value=scte35_source, expected_type=type_hints["scte35_source"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if bandwidth is not None:
            self._values["bandwidth"] = bandwidth
        if buffer_segments is not None:
            self._values["buffer_segments"] = buffer_segments
        if retries is not None:
            self._values["retries"] = retries
        if retry_interval is not None:
            self._values["retry_interval"] = retry_interval
        if scte35_source is not None:
            self._values["scte35_source"] = scte35_source

    @builtins.property
    def bandwidth(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bandwidth MedialiveChannel#bandwidth}.'''
        result = self._values.get("bandwidth")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def buffer_segments(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_segments MedialiveChannel#buffer_segments}.'''
        result = self._values.get("buffer_segments")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def retries(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#retries MedialiveChannel#retries}.'''
        result = self._values.get("retries")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def retry_interval(self) -> typing.Optional[jsii.Number]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#retry_interval MedialiveChannel#retry_interval}.'''
        result = self._values.get("retry_interval")
        return typing.cast(typing.Optional[jsii.Number], result)

    @builtins.property
    def scte35_source(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_source MedialiveChannel#scte35_source}.'''
        result = self._values.get("scte35_source")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76492ebef543e7b50fa02531c45b943f7772a43bfd644ffbb7204539490a6e4e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetBandwidth")
    def reset_bandwidth(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBandwidth", []))

    @jsii.member(jsii_name="resetBufferSegments")
    def reset_buffer_segments(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetBufferSegments", []))

    @jsii.member(jsii_name="resetRetries")
    def reset_retries(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetries", []))

    @jsii.member(jsii_name="resetRetryInterval")
    def reset_retry_interval(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRetryInterval", []))

    @jsii.member(jsii_name="resetScte35Source")
    def reset_scte35_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Source", []))

    @builtins.property
    @jsii.member(jsii_name="bandwidthInput")
    def bandwidth_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bandwidthInput"))

    @builtins.property
    @jsii.member(jsii_name="bufferSegmentsInput")
    def buffer_segments_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "bufferSegmentsInput"))

    @builtins.property
    @jsii.member(jsii_name="retriesInput")
    def retries_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "retriesInput"))

    @builtins.property
    @jsii.member(jsii_name="retryIntervalInput")
    def retry_interval_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "retryIntervalInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35SourceInput")
    def scte35_source_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "scte35SourceInput"))

    @builtins.property
    @jsii.member(jsii_name="bandwidth")
    def bandwidth(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bandwidth"))

    @bandwidth.setter
    def bandwidth(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e424fda93cfaefce0f39e63382c242c029496c678148e7893f8c3629cc9fb66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bandwidth", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="bufferSegments")
    def buffer_segments(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "bufferSegments"))

    @buffer_segments.setter
    def buffer_segments(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ae1b44a363ff0d3a9287d3fd4c7930480f2ebbdf79238be3ec0a5bdbd231138)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "bufferSegments", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="retries")
    def retries(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "retries"))

    @retries.setter
    def retries(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c400d25c67e14d70b4f8bea6288668c4d4f675cf0f2b3ecacb4c26ed7066ccc0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "retries", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="retryInterval")
    def retry_interval(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "retryInterval"))

    @retry_interval.setter
    def retry_interval(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7751de7b394f4256228fc61644dcfba9cc1d25045320468739a8675ecde35972)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "retryInterval", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte35Source")
    def scte35_source(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "scte35Source"))

    @scte35_source.setter
    def scte35_source(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce3e830f78bdf24f28763161b239f2e91a9f31abb510a0712974fc4896bb27a9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Source", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__285113b7cf33a713c3a72cbb1be4c9472196edfce187417b4fcf9c072c146f3d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__827c1284be22095bb5dcceaa925f9b2f30bd3f9e1977ac2cb24849dd19f162f1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putHlsInputSettings")
    def put_hls_input_settings(
        self,
        *,
        bandwidth: typing.Optional[jsii.Number] = None,
        buffer_segments: typing.Optional[jsii.Number] = None,
        retries: typing.Optional[jsii.Number] = None,
        retry_interval: typing.Optional[jsii.Number] = None,
        scte35_source: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param bandwidth: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#bandwidth MedialiveChannel#bandwidth}.
        :param buffer_segments: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#buffer_segments MedialiveChannel#buffer_segments}.
        :param retries: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#retries MedialiveChannel#retries}.
        :param retry_interval: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#retry_interval MedialiveChannel#retry_interval}.
        :param scte35_source: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_source MedialiveChannel#scte35_source}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings(
            bandwidth=bandwidth,
            buffer_segments=buffer_segments,
            retries=retries,
            retry_interval=retry_interval,
            scte35_source=scte35_source,
        )

        return typing.cast(None, jsii.invoke(self, "putHlsInputSettings", [value]))

    @jsii.member(jsii_name="resetHlsInputSettings")
    def reset_hls_input_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetHlsInputSettings", []))

    @jsii.member(jsii_name="resetServerValidation")
    def reset_server_validation(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetServerValidation", []))

    @builtins.property
    @jsii.member(jsii_name="hlsInputSettings")
    def hls_input_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference, jsii.get(self, "hlsInputSettings"))

    @builtins.property
    @jsii.member(jsii_name="hlsInputSettingsInput")
    def hls_input_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings], jsii.get(self, "hlsInputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="serverValidationInput")
    def server_validation_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "serverValidationInput"))

    @builtins.property
    @jsii.member(jsii_name="serverValidation")
    def server_validation(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "serverValidation"))

    @server_validation.setter
    def server_validation(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c23f10c5d3482d41bea65c6fb8e2c7e634c511df03ce9353cdb0569859129034)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "serverValidation", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee7ebedbb3b62880af84b8964767cae491b28112a9844719813a12f90dbb0dc8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsInputSettingsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3150983100c9fbf2b66fa30050118c38fcf61bb3f91cc1d4e364ba97cf6606db)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="putAudioSelector")
    def put_audio_selector(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bcc0236363d0acf8ab9924fbb069f3a328d16173151cd71c365bdc0b43da6b41)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putAudioSelector", [value]))

    @jsii.member(jsii_name="putCaptionSelector")
    def put_caption_selector(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__02da279620c08b08a6a6c9a0accb43c8973eed0a5b59c9e490c96dec5a18d569)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCaptionSelector", [value]))

    @jsii.member(jsii_name="putNetworkInputSettings")
    def put_network_input_settings(
        self,
        *,
        hls_input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        server_validation: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param hls_input_settings: hls_input_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#hls_input_settings MedialiveChannel#hls_input_settings}
        :param server_validation: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#server_validation MedialiveChannel#server_validation}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings(
            hls_input_settings=hls_input_settings, server_validation=server_validation
        )

        return typing.cast(None, jsii.invoke(self, "putNetworkInputSettings", [value]))

    @jsii.member(jsii_name="putVideoSelector")
    def put_video_selector(
        self,
        *,
        color_space: typing.Optional[builtins.str] = None,
        color_space_usage: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color_space: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space MedialiveChannel#color_space}.
        :param color_space_usage: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_usage MedialiveChannel#color_space_usage}.
        '''
        value = MedialiveChannelInputAttachmentsInputSettingsVideoSelector(
            color_space=color_space, color_space_usage=color_space_usage
        )

        return typing.cast(None, jsii.invoke(self, "putVideoSelector", [value]))

    @jsii.member(jsii_name="resetAudioSelector")
    def reset_audio_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAudioSelector", []))

    @jsii.member(jsii_name="resetCaptionSelector")
    def reset_caption_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCaptionSelector", []))

    @jsii.member(jsii_name="resetDeblockFilter")
    def reset_deblock_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDeblockFilter", []))

    @jsii.member(jsii_name="resetDenoiseFilter")
    def reset_denoise_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDenoiseFilter", []))

    @jsii.member(jsii_name="resetFilterStrength")
    def reset_filter_strength(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterStrength", []))

    @jsii.member(jsii_name="resetInputFilter")
    def reset_input_filter(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputFilter", []))

    @jsii.member(jsii_name="resetNetworkInputSettings")
    def reset_network_input_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNetworkInputSettings", []))

    @jsii.member(jsii_name="resetScte35Pid")
    def reset_scte35_pid(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetScte35Pid", []))

    @jsii.member(jsii_name="resetSmpte2038DataPreference")
    def reset_smpte2038_data_preference(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSmpte2038DataPreference", []))

    @jsii.member(jsii_name="resetSourceEndBehavior")
    def reset_source_end_behavior(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSourceEndBehavior", []))

    @jsii.member(jsii_name="resetVideoSelector")
    def reset_video_selector(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVideoSelector", []))

    @builtins.property
    @jsii.member(jsii_name="audioSelector")
    def audio_selector(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList, jsii.get(self, "audioSelector"))

    @builtins.property
    @jsii.member(jsii_name="captionSelector")
    def caption_selector(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList, jsii.get(self, "captionSelector"))

    @builtins.property
    @jsii.member(jsii_name="networkInputSettings")
    def network_input_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference, jsii.get(self, "networkInputSettings"))

    @builtins.property
    @jsii.member(jsii_name="videoSelector")
    def video_selector(
        self,
    ) -> "MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference":
        return typing.cast("MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference", jsii.get(self, "videoSelector"))

    @builtins.property
    @jsii.member(jsii_name="audioSelectorInput")
    def audio_selector_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]], jsii.get(self, "audioSelectorInput"))

    @builtins.property
    @jsii.member(jsii_name="captionSelectorInput")
    def caption_selector_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]], jsii.get(self, "captionSelectorInput"))

    @builtins.property
    @jsii.member(jsii_name="deblockFilterInput")
    def deblock_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "deblockFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="denoiseFilterInput")
    def denoise_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "denoiseFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="filterStrengthInput")
    def filter_strength_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "filterStrengthInput"))

    @builtins.property
    @jsii.member(jsii_name="inputFilterInput")
    def input_filter_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputFilterInput"))

    @builtins.property
    @jsii.member(jsii_name="networkInputSettingsInput")
    def network_input_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings], jsii.get(self, "networkInputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="scte35PidInput")
    def scte35_pid_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "scte35PidInput"))

    @builtins.property
    @jsii.member(jsii_name="smpte2038DataPreferenceInput")
    def smpte2038_data_preference_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "smpte2038DataPreferenceInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceEndBehaviorInput")
    def source_end_behavior_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "sourceEndBehaviorInput"))

    @builtins.property
    @jsii.member(jsii_name="videoSelectorInput")
    def video_selector_input(
        self,
    ) -> typing.Optional["MedialiveChannelInputAttachmentsInputSettingsVideoSelector"]:
        return typing.cast(typing.Optional["MedialiveChannelInputAttachmentsInputSettingsVideoSelector"], jsii.get(self, "videoSelectorInput"))

    @builtins.property
    @jsii.member(jsii_name="deblockFilter")
    def deblock_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "deblockFilter"))

    @deblock_filter.setter
    def deblock_filter(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61d9a237676d9f19861a0b0926c8e178948a21c4572d469ccbd18b1355f000ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "deblockFilter", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="denoiseFilter")
    def denoise_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "denoiseFilter"))

    @denoise_filter.setter
    def denoise_filter(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__137f54b23e40af745319ececc84f900c3ff6c623a1be3cb44bc80c8560beaefe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "denoiseFilter", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="filterStrength")
    def filter_strength(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "filterStrength"))

    @filter_strength.setter
    def filter_strength(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e80fb829955fd6481578c1411a4c24ce86e868876067f689ef36e55ba4dcefec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "filterStrength", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputFilter")
    def input_filter(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputFilter"))

    @input_filter.setter
    def input_filter(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__90ef0f123c94b0785c0a5dc525b3b798ac5c52d32e370845fe6de8b9f672fabc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputFilter", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="scte35Pid")
    def scte35_pid(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "scte35Pid"))

    @scte35_pid.setter
    def scte35_pid(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9da81a3ba6e4480c9fb2373e894cb78a9bce8388edf54ad0b066c2a026f2248e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "scte35Pid", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="smpte2038DataPreference")
    def smpte2038_data_preference(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "smpte2038DataPreference"))

    @smpte2038_data_preference.setter
    def smpte2038_data_preference(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9306c0ed252cec39f92405c745bae4de7b822572080b9c7f6caeb16567cbe95d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "smpte2038DataPreference", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="sourceEndBehavior")
    def source_end_behavior(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "sourceEndBehavior"))

    @source_end_behavior.setter
    def source_end_behavior(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5726995fffe2d1f3fb793f49bb45978d43e605a40efe4878ca770324ee278f48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "sourceEndBehavior", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettings], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettings],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3bebfa0560125170540d64b7f3264a24448c0631fa103fb02e6e5e8f9e8e7f6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsVideoSelector",
    jsii_struct_bases=[],
    name_mapping={"color_space": "colorSpace", "color_space_usage": "colorSpaceUsage"},
)
class MedialiveChannelInputAttachmentsInputSettingsVideoSelector:
    def __init__(
        self,
        *,
        color_space: typing.Optional[builtins.str] = None,
        color_space_usage: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param color_space: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space MedialiveChannel#color_space}.
        :param color_space_usage: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_usage MedialiveChannel#color_space_usage}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f813685589f7460156489b251ec10ed3775b68abbd93549c462026b66e0154f)
            check_type(argname="argument color_space", value=color_space, expected_type=type_hints["color_space"])
            check_type(argname="argument color_space_usage", value=color_space_usage, expected_type=type_hints["color_space_usage"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if color_space is not None:
            self._values["color_space"] = color_space
        if color_space_usage is not None:
            self._values["color_space_usage"] = color_space_usage

    @builtins.property
    def color_space(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space MedialiveChannel#color_space}.'''
        result = self._values.get("color_space")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def color_space_usage(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#color_space_usage MedialiveChannel#color_space_usage}.'''
        result = self._values.get("color_space_usage")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputAttachmentsInputSettingsVideoSelector(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e27263d933207e44f1b04ebecf382056030026fdc3ed4616ef57ff21316a7948)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetColorSpace")
    def reset_color_space(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorSpace", []))

    @jsii.member(jsii_name="resetColorSpaceUsage")
    def reset_color_space_usage(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetColorSpaceUsage", []))

    @builtins.property
    @jsii.member(jsii_name="colorSpaceInput")
    def color_space_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorSpaceInput"))

    @builtins.property
    @jsii.member(jsii_name="colorSpaceUsageInput")
    def color_space_usage_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "colorSpaceUsageInput"))

    @builtins.property
    @jsii.member(jsii_name="colorSpace")
    def color_space(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "colorSpace"))

    @color_space.setter
    def color_space(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4628071aab22f4156474c05d89416ed1875b8368ef67bf8ece4d82107c7d80f8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "colorSpace", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="colorSpaceUsage")
    def color_space_usage(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "colorSpaceUsage"))

    @color_space_usage.setter
    def color_space_usage(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__631bc56b985201c9bba7429908354748cad2e5a2421f5fee0569aa462858727b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "colorSpaceUsage", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettingsVideoSelector]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettingsVideoSelector], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsVideoSelector],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f979572306edc6336cd6d2432a4f2fff0b31320883fd1551233685f71d0a85fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ae6e04c58af140628b96a8b26d0a87f57aaff2bd0f124b384b60fa4983f4b5e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "MedialiveChannelInputAttachmentsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__145304d1fe196219257c88ada031538850d6678edcabd0563ca9441308a6d1c9)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("MedialiveChannelInputAttachmentsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__504af6bfbdc6e9af192179258a2034b0fbf8624345341ceeb9a23c4786a6dff1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2cbc89fb49499091d59241155183148dcf567563ec4b6229c46af575ab14ac6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bc77edb3cf15afea6a9be1330102f397beb26a10c0c0159cc23cdcbebd1c64ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachments]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachments]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachments]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c25c833b67a9b614ee3597aac8046de2f48a5c985ffe63fe49a1cd6a6dce618e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class MedialiveChannelInputAttachmentsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputAttachmentsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8374024fc03437bd18ab93b1665f3a739522dea513e71b21a432c1d9388f6be5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAutomaticInputFailoverSettings")
    def put_automatic_input_failover_settings(
        self,
        *,
        secondary_input_id: builtins.str,
        error_clear_time_msec: typing.Optional[jsii.Number] = None,
        failover_condition: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, typing.Dict[builtins.str, typing.Any]]]]] = None,
        input_preference: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param secondary_input_id: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#secondary_input_id MedialiveChannel#secondary_input_id}.
        :param error_clear_time_msec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#error_clear_time_msec MedialiveChannel#error_clear_time_msec}.
        :param failover_condition: failover_condition block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#failover_condition MedialiveChannel#failover_condition}
        :param input_preference: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_preference MedialiveChannel#input_preference}.
        '''
        value = MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings(
            secondary_input_id=secondary_input_id,
            error_clear_time_msec=error_clear_time_msec,
            failover_condition=failover_condition,
            input_preference=input_preference,
        )

        return typing.cast(None, jsii.invoke(self, "putAutomaticInputFailoverSettings", [value]))

    @jsii.member(jsii_name="putInputSettings")
    def put_input_settings(
        self,
        *,
        audio_selector: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, typing.Dict[builtins.str, typing.Any]]]]] = None,
        caption_selector: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, typing.Dict[builtins.str, typing.Any]]]]] = None,
        deblock_filter: typing.Optional[builtins.str] = None,
        denoise_filter: typing.Optional[builtins.str] = None,
        filter_strength: typing.Optional[jsii.Number] = None,
        input_filter: typing.Optional[builtins.str] = None,
        network_input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
        scte35_pid: typing.Optional[jsii.Number] = None,
        smpte2038_data_preference: typing.Optional[builtins.str] = None,
        source_end_behavior: typing.Optional[builtins.str] = None,
        video_selector: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsVideoSelector, typing.Dict[builtins.str, typing.Any]]] = None,
    ) -> None:
        '''
        :param audio_selector: audio_selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#audio_selector MedialiveChannel#audio_selector}
        :param caption_selector: caption_selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#caption_selector MedialiveChannel#caption_selector}
        :param deblock_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#deblock_filter MedialiveChannel#deblock_filter}.
        :param denoise_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#denoise_filter MedialiveChannel#denoise_filter}.
        :param filter_strength: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#filter_strength MedialiveChannel#filter_strength}.
        :param input_filter: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_filter MedialiveChannel#input_filter}.
        :param network_input_settings: network_input_settings block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#network_input_settings MedialiveChannel#network_input_settings}
        :param scte35_pid: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#scte35_pid MedialiveChannel#scte35_pid}.
        :param smpte2038_data_preference: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#smpte2038_data_preference MedialiveChannel#smpte2038_data_preference}.
        :param source_end_behavior: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#source_end_behavior MedialiveChannel#source_end_behavior}.
        :param video_selector: video_selector block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#video_selector MedialiveChannel#video_selector}
        '''
        value = MedialiveChannelInputAttachmentsInputSettings(
            audio_selector=audio_selector,
            caption_selector=caption_selector,
            deblock_filter=deblock_filter,
            denoise_filter=denoise_filter,
            filter_strength=filter_strength,
            input_filter=input_filter,
            network_input_settings=network_input_settings,
            scte35_pid=scte35_pid,
            smpte2038_data_preference=smpte2038_data_preference,
            source_end_behavior=source_end_behavior,
            video_selector=video_selector,
        )

        return typing.cast(None, jsii.invoke(self, "putInputSettings", [value]))

    @jsii.member(jsii_name="resetAutomaticInputFailoverSettings")
    def reset_automatic_input_failover_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAutomaticInputFailoverSettings", []))

    @jsii.member(jsii_name="resetInputSettings")
    def reset_input_settings(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInputSettings", []))

    @builtins.property
    @jsii.member(jsii_name="automaticInputFailoverSettings")
    def automatic_input_failover_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference, jsii.get(self, "automaticInputFailoverSettings"))

    @builtins.property
    @jsii.member(jsii_name="inputSettings")
    def input_settings(
        self,
    ) -> MedialiveChannelInputAttachmentsInputSettingsOutputReference:
        return typing.cast(MedialiveChannelInputAttachmentsInputSettingsOutputReference, jsii.get(self, "inputSettings"))

    @builtins.property
    @jsii.member(jsii_name="automaticInputFailoverSettingsInput")
    def automatic_input_failover_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings], jsii.get(self, "automaticInputFailoverSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputAttachmentNameInput")
    def input_attachment_name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputAttachmentNameInput"))

    @builtins.property
    @jsii.member(jsii_name="inputIdInput")
    def input_id_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputIdInput"))

    @builtins.property
    @jsii.member(jsii_name="inputSettingsInput")
    def input_settings_input(
        self,
    ) -> typing.Optional[MedialiveChannelInputAttachmentsInputSettings]:
        return typing.cast(typing.Optional[MedialiveChannelInputAttachmentsInputSettings], jsii.get(self, "inputSettingsInput"))

    @builtins.property
    @jsii.member(jsii_name="inputAttachmentName")
    def input_attachment_name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputAttachmentName"))

    @input_attachment_name.setter
    def input_attachment_name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d0f97b62ffd0c5ea3abd21164c603ca76c5a5bba777773546b8bb161ac02832)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputAttachmentName", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputId")
    def input_id(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputId"))

    @input_id.setter
    def input_id(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46d4638c455b0ce3a7084b5b08ab7cb8a672c2dc80dde65e3119559a5293e190)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputId", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachments]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachments]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachments]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__53c3afea549b02f0575960e4f31a31fb0f8c07a566b88869c9d223b077f3ee64)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputSpecification",
    jsii_struct_bases=[],
    name_mapping={
        "codec": "codec",
        "input_resolution": "inputResolution",
        "maximum_bitrate": "maximumBitrate",
    },
)
class MedialiveChannelInputSpecification:
    def __init__(
        self,
        *,
        codec: builtins.str,
        input_resolution: builtins.str,
        maximum_bitrate: builtins.str,
    ) -> None:
        '''
        :param codec: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec MedialiveChannel#codec}.
        :param input_resolution: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_resolution MedialiveChannel#input_resolution}.
        :param maximum_bitrate: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maximum_bitrate MedialiveChannel#maximum_bitrate}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6dfc3b88f0f352a3610a165eddcc4bba415849372e5395b12c67e7699dfc5b7a)
            check_type(argname="argument codec", value=codec, expected_type=type_hints["codec"])
            check_type(argname="argument input_resolution", value=input_resolution, expected_type=type_hints["input_resolution"])
            check_type(argname="argument maximum_bitrate", value=maximum_bitrate, expected_type=type_hints["maximum_bitrate"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "codec": codec,
            "input_resolution": input_resolution,
            "maximum_bitrate": maximum_bitrate,
        }

    @builtins.property
    def codec(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#codec MedialiveChannel#codec}.'''
        result = self._values.get("codec")
        assert result is not None, "Required property 'codec' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def input_resolution(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#input_resolution MedialiveChannel#input_resolution}.'''
        result = self._values.get("input_resolution")
        assert result is not None, "Required property 'input_resolution' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def maximum_bitrate(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maximum_bitrate MedialiveChannel#maximum_bitrate}.'''
        result = self._values.get("maximum_bitrate")
        assert result is not None, "Required property 'maximum_bitrate' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelInputSpecification(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelInputSpecificationOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelInputSpecificationOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__211fd0f16fe33b8b65b54c8fd0291c2be26c16ede7caad48509af0e34651cd3a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="codecInput")
    def codec_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "codecInput"))

    @builtins.property
    @jsii.member(jsii_name="inputResolutionInput")
    def input_resolution_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "inputResolutionInput"))

    @builtins.property
    @jsii.member(jsii_name="maximumBitrateInput")
    def maximum_bitrate_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maximumBitrateInput"))

    @builtins.property
    @jsii.member(jsii_name="codec")
    def codec(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "codec"))

    @codec.setter
    def codec(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0d46c26bb905da0ec447e54c533257edb2a341a284caae92ed98c3a16ac3881)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "codec", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="inputResolution")
    def input_resolution(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "inputResolution"))

    @input_resolution.setter
    def input_resolution(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34de9a8adba235f01ada26fec1bfe6b0940085c698178fe1cde04c58be8ae4b8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "inputResolution", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="maximumBitrate")
    def maximum_bitrate(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maximumBitrate"))

    @maximum_bitrate.setter
    def maximum_bitrate(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__05a3f62172a4c7546502dbb44e5d4bd5ac2aee603a0ebaa5d5c883a75002fa85)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maximumBitrate", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelInputSpecification]:
        return typing.cast(typing.Optional[MedialiveChannelInputSpecification], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelInputSpecification],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b00c2ff9237d8deed4b79d797694056b88b873289aa41481bf5b35e314af413)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelMaintenance",
    jsii_struct_bases=[],
    name_mapping={
        "maintenance_day": "maintenanceDay",
        "maintenance_start_time": "maintenanceStartTime",
    },
)
class MedialiveChannelMaintenance:
    def __init__(
        self,
        *,
        maintenance_day: builtins.str,
        maintenance_start_time: builtins.str,
    ) -> None:
        '''
        :param maintenance_day: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance_day MedialiveChannel#maintenance_day}.
        :param maintenance_start_time: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance_start_time MedialiveChannel#maintenance_start_time}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__725df49a8d68d098e41b12aa3dd29ca2a97b670a1bd76b3eaa1f4641abdb1566)
            check_type(argname="argument maintenance_day", value=maintenance_day, expected_type=type_hints["maintenance_day"])
            check_type(argname="argument maintenance_start_time", value=maintenance_start_time, expected_type=type_hints["maintenance_start_time"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "maintenance_day": maintenance_day,
            "maintenance_start_time": maintenance_start_time,
        }

    @builtins.property
    def maintenance_day(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance_day MedialiveChannel#maintenance_day}.'''
        result = self._values.get("maintenance_day")
        assert result is not None, "Required property 'maintenance_day' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def maintenance_start_time(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#maintenance_start_time MedialiveChannel#maintenance_start_time}.'''
        result = self._values.get("maintenance_start_time")
        assert result is not None, "Required property 'maintenance_start_time' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelMaintenance(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelMaintenanceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelMaintenanceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2df44842b464782de08f74cdba340af09818a18d8229fc715a221206f3c5630f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @builtins.property
    @jsii.member(jsii_name="maintenanceDayInput")
    def maintenance_day_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maintenanceDayInput"))

    @builtins.property
    @jsii.member(jsii_name="maintenanceStartTimeInput")
    def maintenance_start_time_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "maintenanceStartTimeInput"))

    @builtins.property
    @jsii.member(jsii_name="maintenanceDay")
    def maintenance_day(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maintenanceDay"))

    @maintenance_day.setter
    def maintenance_day(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45f9287f898e6fdccf5d160f879b935d015546557d66524a0cacfc535b6a5851)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maintenanceDay", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="maintenanceStartTime")
    def maintenance_start_time(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "maintenanceStartTime"))

    @maintenance_start_time.setter
    def maintenance_start_time(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee80008edf152ce0de5f25125c205c03ac6a006cf4e40840cd726000e8383b99)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "maintenanceStartTime", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelMaintenance]:
        return typing.cast(typing.Optional[MedialiveChannelMaintenance], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[MedialiveChannelMaintenance],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c4d69fd664ef25d56e952fbcda31667dba12faf15204b781ca9c9d2eea1b285)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelTimeouts",
    jsii_struct_bases=[],
    name_mapping={"create": "create", "delete": "delete", "update": "update"},
)
class MedialiveChannelTimeouts:
    def __init__(
        self,
        *,
        create: typing.Optional[builtins.str] = None,
        delete: typing.Optional[builtins.str] = None,
        update: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param create: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#create MedialiveChannel#create}.
        :param delete: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#delete MedialiveChannel#delete}.
        :param update: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#update MedialiveChannel#update}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1458d40e4acbe7b3fdc61c53f0925012f46ad0d9bac9526bbacfb42e5181c29)
            check_type(argname="argument create", value=create, expected_type=type_hints["create"])
            check_type(argname="argument delete", value=delete, expected_type=type_hints["delete"])
            check_type(argname="argument update", value=update, expected_type=type_hints["update"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if create is not None:
            self._values["create"] = create
        if delete is not None:
            self._values["delete"] = delete
        if update is not None:
            self._values["update"] = update

    @builtins.property
    def create(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#create MedialiveChannel#create}.'''
        result = self._values.get("create")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def delete(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#delete MedialiveChannel#delete}.'''
        result = self._values.get("delete")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def update(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#update MedialiveChannel#update}.'''
        result = self._values.get("update")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelTimeouts(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelTimeoutsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelTimeoutsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67f84c294048a0308510a708837c7df197c09d114ca036fe0dcd35b8c056b510)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetCreate")
    def reset_create(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCreate", []))

    @jsii.member(jsii_name="resetDelete")
    def reset_delete(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDelete", []))

    @jsii.member(jsii_name="resetUpdate")
    def reset_update(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUpdate", []))

    @builtins.property
    @jsii.member(jsii_name="createInput")
    def create_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "createInput"))

    @builtins.property
    @jsii.member(jsii_name="deleteInput")
    def delete_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "deleteInput"))

    @builtins.property
    @jsii.member(jsii_name="updateInput")
    def update_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "updateInput"))

    @builtins.property
    @jsii.member(jsii_name="create")
    def create(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "create"))

    @create.setter
    def create(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcb144d180a2c6bd24f9be3340d40b60465d6ce1ed8cda8a8640b11168622096)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "create", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="delete")
    def delete(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "delete"))

    @delete.setter
    def delete(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b3977d0ab8c48fda329ae9fa38ccff87bfc0c98dbc61ca75f366bb0b74a9a6a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "delete", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="update")
    def update(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "update"))

    @update.setter
    def update(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7543d84d5a7a6fa37c95178bdcb3f4d74e8c1b510a539c6e6f026213712f0836)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "update", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelTimeouts]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelTimeouts]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelTimeouts]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae5f0374c15e5338fb07e0fb5231f9dc2df5961483fe614ecf04b7ae8b945cf0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelVpc",
    jsii_struct_bases=[],
    name_mapping={
        "public_address_allocation_ids": "publicAddressAllocationIds",
        "subnet_ids": "subnetIds",
        "security_group_ids": "securityGroupIds",
    },
)
class MedialiveChannelVpc:
    def __init__(
        self,
        *,
        public_address_allocation_ids: typing.Sequence[builtins.str],
        subnet_ids: typing.Sequence[builtins.str],
        security_group_ids: typing.Optional[typing.Sequence[builtins.str]] = None,
    ) -> None:
        '''
        :param public_address_allocation_ids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#public_address_allocation_ids MedialiveChannel#public_address_allocation_ids}.
        :param subnet_ids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#subnet_ids MedialiveChannel#subnet_ids}.
        :param security_group_ids: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#security_group_ids MedialiveChannel#security_group_ids}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__979fb642021a79f0e2ac0e2049e090eb6d8eebe96eaa7b46b61bcc6ea2551717)
            check_type(argname="argument public_address_allocation_ids", value=public_address_allocation_ids, expected_type=type_hints["public_address_allocation_ids"])
            check_type(argname="argument subnet_ids", value=subnet_ids, expected_type=type_hints["subnet_ids"])
            check_type(argname="argument security_group_ids", value=security_group_ids, expected_type=type_hints["security_group_ids"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "public_address_allocation_ids": public_address_allocation_ids,
            "subnet_ids": subnet_ids,
        }
        if security_group_ids is not None:
            self._values["security_group_ids"] = security_group_ids

    @builtins.property
    def public_address_allocation_ids(self) -> typing.List[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#public_address_allocation_ids MedialiveChannel#public_address_allocation_ids}.'''
        result = self._values.get("public_address_allocation_ids")
        assert result is not None, "Required property 'public_address_allocation_ids' is missing"
        return typing.cast(typing.List[builtins.str], result)

    @builtins.property
    def subnet_ids(self) -> typing.List[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#subnet_ids MedialiveChannel#subnet_ids}.'''
        result = self._values.get("subnet_ids")
        assert result is not None, "Required property 'subnet_ids' is missing"
        return typing.cast(typing.List[builtins.str], result)

    @builtins.property
    def security_group_ids(self) -> typing.Optional[typing.List[builtins.str]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/medialive_channel#security_group_ids MedialiveChannel#security_group_ids}.'''
        result = self._values.get("security_group_ids")
        return typing.cast(typing.Optional[typing.List[builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "MedialiveChannelVpc(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class MedialiveChannelVpcOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.medialiveChannel.MedialiveChannelVpcOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58aee1e6d2ddf5aad211e93a3116fa10b9118178d155ee9e047245e06dc67853)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute])

    @jsii.member(jsii_name="resetSecurityGroupIds")
    def reset_security_group_ids(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSecurityGroupIds", []))

    @builtins.property
    @jsii.member(jsii_name="availabilityZones")
    def availability_zones(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "availabilityZones"))

    @builtins.property
    @jsii.member(jsii_name="networkInterfaceIds")
    def network_interface_ids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "networkInterfaceIds"))

    @builtins.property
    @jsii.member(jsii_name="publicAddressAllocationIdsInput")
    def public_address_allocation_ids_input(
        self,
    ) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "publicAddressAllocationIdsInput"))

    @builtins.property
    @jsii.member(jsii_name="securityGroupIdsInput")
    def security_group_ids_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "securityGroupIdsInput"))

    @builtins.property
    @jsii.member(jsii_name="subnetIdsInput")
    def subnet_ids_input(self) -> typing.Optional[typing.List[builtins.str]]:
        return typing.cast(typing.Optional[typing.List[builtins.str]], jsii.get(self, "subnetIdsInput"))

    @builtins.property
    @jsii.member(jsii_name="publicAddressAllocationIds")
    def public_address_allocation_ids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "publicAddressAllocationIds"))

    @public_address_allocation_ids.setter
    def public_address_allocation_ids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9caa331e8f00c3fa9f1295988dbdfa135ac94b04e0fb2b3fbeda4afbeb03fa09)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "publicAddressAllocationIds", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="securityGroupIds")
    def security_group_ids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "securityGroupIds"))

    @security_group_ids.setter
    def security_group_ids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ecaef4798eae26259b54b6653477577c0009b75c28df7602e1acc021dd499980)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "securityGroupIds", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="subnetIds")
    def subnet_ids(self) -> typing.List[builtins.str]:
        return typing.cast(typing.List[builtins.str], jsii.get(self, "subnetIds"))

    @subnet_ids.setter
    def subnet_ids(self, value: typing.List[builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__217edd3c09f22615edf41f92b73ddd28cc6a010c49a3f9927dd7ccd81bb0fbf1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "subnetIds", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(self) -> typing.Optional[MedialiveChannelVpc]:
        return typing.cast(typing.Optional[MedialiveChannelVpc], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(self, value: typing.Optional[MedialiveChannelVpc]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d8f185aba6279b376ab420908942f2d5088e5f6d1a076762cb9a439cf3ac0b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


__all__ = [
    "MedialiveChannel",
    "MedialiveChannelCdiInputSpecification",
    "MedialiveChannelCdiInputSpecificationOutputReference",
    "MedialiveChannelConfig",
    "MedialiveChannelDestinations",
    "MedialiveChannelDestinationsList",
    "MedialiveChannelDestinationsMediaPackageSettings",
    "MedialiveChannelDestinationsMediaPackageSettingsList",
    "MedialiveChannelDestinationsMediaPackageSettingsOutputReference",
    "MedialiveChannelDestinationsMultiplexSettings",
    "MedialiveChannelDestinationsMultiplexSettingsOutputReference",
    "MedialiveChannelDestinationsOutputReference",
    "MedialiveChannelDestinationsSettings",
    "MedialiveChannelDestinationsSettingsList",
    "MedialiveChannelDestinationsSettingsOutputReference",
    "MedialiveChannelEncoderSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptions",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsList",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2SettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsList",
    "MedialiveChannelEncoderSettingsAudioDescriptionsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsList",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevelsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsList",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsOutputReference",
    "MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsOutputReference",
    "MedialiveChannelEncoderSettingsAvailBlanking",
    "MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage",
    "MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImageOutputReference",
    "MedialiveChannelEncoderSettingsAvailBlankingOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptions",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFontOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFontOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettingsOutputReference",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsList",
    "MedialiveChannelEncoderSettingsCaptionDescriptionsOutputReference",
    "MedialiveChannelEncoderSettingsGlobalConfiguration",
    "MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior",
    "MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate",
    "MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlateOutputReference",
    "MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorOutputReference",
    "MedialiveChannelEncoderSettingsGlobalConfigurationOutputReference",
    "MedialiveChannelEncoderSettingsMotionGraphicsConfiguration",
    "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings",
    "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings",
    "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsMotionGraphicsConfigurationOutputReference",
    "MedialiveChannelEncoderSettingsNielsenConfiguration",
    "MedialiveChannelEncoderSettingsNielsenConfigurationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroups",
    "MedialiveChannelEncoderSettingsOutputGroupsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3SettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServerOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputs",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsList",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImageOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8SettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestinationOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsOutputReference",
    "MedialiveChannelEncoderSettingsOutputReference",
    "MedialiveChannelEncoderSettingsTimecodeConfig",
    "MedialiveChannelEncoderSettingsTimecodeConfigOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptions",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81SettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10SettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601SettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709SettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsOutputReference",
    "MedialiveChannelEncoderSettingsVideoDescriptionsList",
    "MedialiveChannelEncoderSettingsVideoDescriptionsOutputReference",
    "MedialiveChannelInputAttachments",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettingsOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettingsOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionList",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionOutputReference",
    "MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettings",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelector",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorList",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelectionOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelectionOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelectionOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecodeOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksList",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracksOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelector",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorList",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangleOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings",
    "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings",
    "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsOutputReference",
    "MedialiveChannelInputAttachmentsInputSettingsVideoSelector",
    "MedialiveChannelInputAttachmentsInputSettingsVideoSelectorOutputReference",
    "MedialiveChannelInputAttachmentsList",
    "MedialiveChannelInputAttachmentsOutputReference",
    "MedialiveChannelInputSpecification",
    "MedialiveChannelInputSpecificationOutputReference",
    "MedialiveChannelMaintenance",
    "MedialiveChannelMaintenanceOutputReference",
    "MedialiveChannelTimeouts",
    "MedialiveChannelTimeoutsOutputReference",
    "MedialiveChannelVpc",
    "MedialiveChannelVpcOutputReference",
]

publication.publish()

def _typecheckingstub__04f3c7f6cd0e910f5f02bd6517f4aae85191d7c625f469954fc74c3d44dc71fe(
    scope: _constructs_77d1e7e8.Construct,
    id_: builtins.str,
    *,
    channel_class: builtins.str,
    destinations: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinations, typing.Dict[builtins.str, typing.Any]]]],
    encoder_settings: typing.Union[MedialiveChannelEncoderSettings, typing.Dict[builtins.str, typing.Any]],
    input_attachments: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachments, typing.Dict[builtins.str, typing.Any]]]],
    input_specification: typing.Union[MedialiveChannelInputSpecification, typing.Dict[builtins.str, typing.Any]],
    name: builtins.str,
    cdi_input_specification: typing.Optional[typing.Union[MedialiveChannelCdiInputSpecification, typing.Dict[builtins.str, typing.Any]]] = None,
    id: typing.Optional[builtins.str] = None,
    log_level: typing.Optional[builtins.str] = None,
    maintenance: typing.Optional[typing.Union[MedialiveChannelMaintenance, typing.Dict[builtins.str, typing.Any]]] = None,
    region: typing.Optional[builtins.str] = None,
    role_arn: typing.Optional[builtins.str] = None,
    start_channel: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    tags_all: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    timeouts: typing.Optional[typing.Union[MedialiveChannelTimeouts, typing.Dict[builtins.str, typing.Any]]] = None,
    vpc: typing.Optional[typing.Union[MedialiveChannelVpc, typing.Dict[builtins.str, typing.Any]]] = None,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__abd1591e8fb4ea0d2c32742e9eceb1055f98262b249ea40a0cca1c9399569204(
    scope: _constructs_77d1e7e8.Construct,
    import_to_id: builtins.str,
    import_from_id: builtins.str,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__10f7138e41e59c6e2428523a5d263b8fa31328f1c110865edb952515a85a356b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinations, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__950c57d254fc00b40f52bbb27f1bf33458633a7bb07d721569b0318a88bdc499(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachments, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13b55029f5abb5b1e9f6c0ba9aabcca5d42c740989662a99bc53a9ad60bdf1ba(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d41f970f7587317392b42ee8ee98e023618276abfec1deff8b35a328cf4beb91(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db1f688ea0d7dbc13b2d754c2e9a90fe074f9f26edf845a10e3c964291d5bf8a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__888401aa86fc299f60751601602551a40f9b90be4ae97283362455f390a6e8a4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9ef9bc6747a719d2c617e8162aae127867f14d3156d25b75bfafdd8cc799365(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fe3feff26fe3795e24994aeff8c17a985557e8c365866724420d40bc3dcc8a7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d906e75acabeba64d26bf363910ceecd620b5c5a65d51734d63c3bdcfc625efb(
    value: typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae0fcf3ed65969dda6679a1992af0cb2763670846ae4d9401e2bf45038007277(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94064523e676f0c0f79a80d6a7a7d337861ca6bc49a2d99d3b8cfa4ed6e9ec81(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bdf74d495e436623c71e6dd1e1efd39ce7c8fd638f6dfc021d8d31479db0a18(
    *,
    resolution: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c99319cba552a4ad7d8ed0a630bf741557bc605dc8344c54f38f5c3c53cdff44(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98474376a45a16d01fcafa145372edb1d7843544df9177d212766638ddae6971(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__025424eeb682df14905f94e38fd28402eb38a1dcca5843dc52f5c3d0d1308bf6(
    value: typing.Optional[MedialiveChannelCdiInputSpecification],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e5fb6e76fec0078544ab6843d7d60cb5b5cb528b1f827743a1820607262b6a7(
    *,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    channel_class: builtins.str,
    destinations: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinations, typing.Dict[builtins.str, typing.Any]]]],
    encoder_settings: typing.Union[MedialiveChannelEncoderSettings, typing.Dict[builtins.str, typing.Any]],
    input_attachments: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachments, typing.Dict[builtins.str, typing.Any]]]],
    input_specification: typing.Union[MedialiveChannelInputSpecification, typing.Dict[builtins.str, typing.Any]],
    name: builtins.str,
    cdi_input_specification: typing.Optional[typing.Union[MedialiveChannelCdiInputSpecification, typing.Dict[builtins.str, typing.Any]]] = None,
    id: typing.Optional[builtins.str] = None,
    log_level: typing.Optional[builtins.str] = None,
    maintenance: typing.Optional[typing.Union[MedialiveChannelMaintenance, typing.Dict[builtins.str, typing.Any]]] = None,
    region: typing.Optional[builtins.str] = None,
    role_arn: typing.Optional[builtins.str] = None,
    start_channel: typing.Optional[typing.Union[builtins.bool, _cdktf_9a9027ec.IResolvable]] = None,
    tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    tags_all: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    timeouts: typing.Optional[typing.Union[MedialiveChannelTimeouts, typing.Dict[builtins.str, typing.Any]]] = None,
    vpc: typing.Optional[typing.Union[MedialiveChannelVpc, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2cf82edb425410acaa870a03f0867b3cfd81185bdbef10cdd5d5f49f1f648e9(
    *,
    id: builtins.str,
    media_package_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
    multiplex_settings: typing.Optional[typing.Union[MedialiveChannelDestinationsMultiplexSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsSettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f30339bbf3e31e39073b80b03b6494647610f3e52c6372eeb0fd961cf7fcfd4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9bd4e087ef5aee8cc9acd06fd82c195c684d44b3829c2331afc61c03b5940491(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb9ed7a937cd5ffecb7e54fa787744472cd5226bc353bc5bbbec4c7e4992f4ce(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d199b3ff82e23adc812ad80d2a64f9f3d40841210b0f03cf1b3f5de04af847fd(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5ba4fed272b32475e7e736966f0b78064b588e69c6dfc15041b7dcede20c6e9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e05f75eb035272db9c6cb3d5858f6486f1505b67cba14dbdf46882e637a2cd7b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinations]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3aa8d21024095a71eecc6e55784e01d2ee553f6214dda31982efe27d01d99862(
    *,
    channel_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5a6eb1421e43dfc42dcaad1d945f6a2234852cec1624925d5b77de3d99805b7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab4db363e9186fe77d791a9e8181df99a2363a2a67d99c7d5d4debc56d54dbef(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ff1acb63979cb90cc63fd7e96586f7ff4ea3bcd3a8872cef8a9483551504bb9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3c0cf7d3f7e55246a5f9bfea1fb4e2249b7ae7e894cd71163724849bddbea56(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab113f7f15d1a85e4000339348469e97bc9814201fac42b308e88144b4c2bdd4(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86e105dd66125bd8faacbf97b6e12bbb3920da707fe06a19b51afbb7b97f2ef1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsMediaPackageSettings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd1bbe0edd68dba55d2f480fc5be85429e73627e2a59d989c6859f68616fde03(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab9ecbfed9bfa6966064cbd6bc8b54c2400a08beee829f51a6dd1c718c81ef4f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02ee1a7e97183806501e111ace51c4debd217e39d621e375562482ca65f1e534(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinationsMediaPackageSettings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2bb59fe546a356c9d3f5faef382bba9a011e2be6128d74d176188b99ec352029(
    *,
    multiplex_id: builtins.str,
    program_name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0593e17171d3508d4b9315d46e5461ab9dd38c7d07f8d15b18e51b281a9742f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__771ebc9a87dc45c8320b616f9ad6a572261a179c16ced320c76133b48ab1a458(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd243113bd281e08f760d4c00f71e9219d94f3e04292e0d1a9d53d609d83be31(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b824361a2f53869f6f37f0976ceaa7d309809e069db245eaabaa5d4e552e571(
    value: typing.Optional[MedialiveChannelDestinationsMultiplexSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4874782a36ed8041eb8b303543b408a3c5b813a8ff5d54a335b0be502d71b88d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__809c180f58397ceb7bb7c5b54d01acb788343ea1c63659e9de3d2e622eee5679(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsMediaPackageSettings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42d96d21591abbe992d1d83e0cb064c94594aa1fb7d6c999541c2b2971a9b14e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelDestinationsSettings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d8e2906babd9c556b2258f250d4b2a7fef36e5cbae7566280e8e6f41b2358e8d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80055540988036964ec17bebdc81dccaaac775f336497f133a36de26100faeb6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinations]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58d5b79f49d66839ddd99afae52d62bcc5eda6128d7db435b9bd4af5a28e1f11(
    *,
    password_param: typing.Optional[builtins.str] = None,
    stream_name: typing.Optional[builtins.str] = None,
    url: typing.Optional[builtins.str] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60c57f01343632d22e4411000896967231217b331bab1e45805261199e1a1b4f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42b43d5999af04fc1cbf8ff69b0b18d93acbd0e23665d0422328ece75941f86d(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8977656e24a06052309d36573a2c3db34ad70460f7a15aba5fc1c58b5173eca7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e035ea2c5a65c1f7f12940afce2df05bbc5afd8bc3ac704970fdd04daaee7c4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__243a71e111ceebaec60ce15cbb611b2b4dbbb4e7c4fb0b82553ab9c3b4ecf87b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eddca424a2ced5919ae50bb316d39f72bc684b1dd4bf2ffa13cd72cfa7d02055(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelDestinationsSettings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67eb6f922e25a803ae199623cd8782617e2664038345bfe3a7ee832a1e990d38(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85e15189ebc8e3531413972df1518de4061118936554cd587c0ddf8372b5ed1e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19309631fef4b9f33a1b3f8e536ccc126a88ecafc4d077803898e3f864aca8b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6448c1d8a007d5ab52763e1c034eef6639d04437fc01c9b062d2256a6c5d4c15(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efcc4141072689d78494a17ebe1771044f0980c6491cb489337c56a223f00c4e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfe8c6d275fb29ac727e384485246a40dd163c2b97dd9e6f8991f7177f26c3db(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelDestinationsSettings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be3998ed1be31ccb5355012fc5403dba48eb0e4b280bf98bb02dec19c581907e(
    *,
    output_groups: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, typing.Dict[builtins.str, typing.Any]]]],
    timecode_config: typing.Union[MedialiveChannelEncoderSettingsTimecodeConfig, typing.Dict[builtins.str, typing.Any]],
    audio_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, typing.Dict[builtins.str, typing.Any]]]]] = None,
    avail_blanking: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAvailBlanking, typing.Dict[builtins.str, typing.Any]]] = None,
    caption_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptions, typing.Dict[builtins.str, typing.Any]]]]] = None,
    global_configuration: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsGlobalConfiguration, typing.Dict[builtins.str, typing.Any]]] = None,
    motion_graphics_configuration: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsMotionGraphicsConfiguration, typing.Dict[builtins.str, typing.Any]]] = None,
    nielsen_configuration: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsNielsenConfiguration, typing.Dict[builtins.str, typing.Any]]] = None,
    video_descriptions: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptions, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16c90649b9dba0534bb76f77af6568aa947c1b5f1bab994cc35534a1092ad431(
    *,
    audio_selector_name: builtins.str,
    name: builtins.str,
    audio_normalization_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    audio_type: typing.Optional[builtins.str] = None,
    audio_type_control: typing.Optional[builtins.str] = None,
    audio_watermark_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    codec_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    language_code: typing.Optional[builtins.str] = None,
    language_code_control: typing.Optional[builtins.str] = None,
    remix_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    stream_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80c487db4b688733ad449de073805088d00d8600f5658dad154d3c6744a0deaf(
    *,
    algorithm: typing.Optional[builtins.str] = None,
    algorithm_control: typing.Optional[builtins.str] = None,
    target_lkfs: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f0bf4915e3b33fc2fee3ee2afef86e9c6a48e03ebfdff47754df971aa92bf9d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__50ba9a7c0efd6ba96c5ec2073b0ea7293c4fe8644126fe45b7a401c354bb0446(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a87bcd4c7364c7fab8d873419455bc9979a432ad6e8c90269bf73d100d19983(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf42330a64b9bffac282c54452b1a3acf60e32c6b235828dbdf3e9e0f4f2a445(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9d30dedcf16b2296e97a6cac685eba3620bcb58c262e52688540b36c9e3125c(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioNormalizationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6c07381c617a2872450db31ce525381785c48081f54a4ddb0feaf4c90dfe28c(
    *,
    nielsen_watermarks_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f470d4232869a7083e97fcaefb9847e784b5ec8b10507c30510d4b4e545bee15(
    *,
    nielsen_cbet_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    nielsen_distribution_type: typing.Optional[builtins.str] = None,
    nielsen_naes_ii_nw_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20445fe0e799d3cd34bdedcbf7a76ad604488a10a80250b055d80651ac7b7783(
    *,
    cbet_check_digit_string: builtins.str,
    cbet_stepaside: builtins.str,
    csid: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__623b6b9b45ae84133f982b637a37b2ebb71ac82493ebf8398415319c883c853b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bc51663ec4004768abe9c203bc4143f81ca7ec1c974c8d100d473f8fd39af79(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d4dfa4ca9488d13233429ffde8ac1eadc153118c9469bb30b6a61cb61c6d62fd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd8449322e0176a2e3f6b77583f3696f2b33d7e756ecc0b8f40e86e895bce3f5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36fb846a7545068180e57b8e10ecdd41b7cd6e7584a3ef81743867aaf50ef5cb(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenCbetSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0acad1bb0cc8c74ac45abc2f3ba8a77cc05cb4fb7c80dadc6fe5d3e49f6b0ac(
    *,
    check_digit_string: builtins.str,
    sid: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__532bbca29a7c6a9df0da5f0889c1387c2be1100dd6df3729ee2bf7180ec7fc47(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4e56126dea70c1110b1b2d262730d91f05b1b50216211f415aab0bb6309033a(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36d6b5486d954551a267ac0bcd04d87a1c7ac64fec2675a235248c9063891869(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f9f33c8ddfd2eb7ca41bc0a823e370f275238d1501458b419ca836ab3756a22(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b02a89033c32b9fb992a2eb867050c1509230ad4a61c659a2253280f6712ce08(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e58512175d74b467009f16bfa6e53b26b9202c7dd4eab1ccc3e021edeb6e3db(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02cb081d41b52a654b470c781225278b396fc341788c935ee2e345bd1bb2f096(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab56da719e3b6f83c8bc2104a826eee2d631984ea448b114b2234713177beb5e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__270350867f3cf9636012f7a05c80929961b374d5244111080664fbc90223a7b6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3088ff3def293a98fd0efbc73943db21ac8ee24bc9827074d3b6e89414801ea(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__821659b060d3eb8d9e8a6856a8e25b3f88bef405941a07c06b01b83350732a03(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2efcbdc26315c454f4111850327c42c1876e7d9f8ef4801398222daf702e4af1(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettingsNielsenNaesIiNwSettings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5949aa575c27c2330038af92ca08aa36e7876a73f4865157ddbebe7be07830f7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46a149b802240b8a20e0635e52c2b86fdcadea73cdd8a349bfc863b98a5cce86(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettingsNielsenWatermarksSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7f3d4782eb60c48010e67af0cddccd04458860c509689c36f848189a436afef(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4dadd4ff7f69d8ba2104c6d045433ce0a1f16cd28c7a676e9385dd99739568d5(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsAudioWatermarkSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc1747d2966394c058c1ee4df365010e6aaf7389dd2982e140a9eb1a5ac29979(
    *,
    aac_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ac3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    eac3_atmos_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    eac3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    mp2_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    pass_through_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    wav_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__802e31da1bdc41c7f9d5e8fe5a40cfcdc795b78e8307d94edd794c0e3a97ac71(
    *,
    bitrate: typing.Optional[jsii.Number] = None,
    coding_mode: typing.Optional[builtins.str] = None,
    input_type: typing.Optional[builtins.str] = None,
    profile: typing.Optional[builtins.str] = None,
    rate_control_mode: typing.Optional[builtins.str] = None,
    raw_format: typing.Optional[builtins.str] = None,
    sample_rate: typing.Optional[jsii.Number] = None,
    spec: typing.Optional[builtins.str] = None,
    vbr_quality: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06d5716d27ad02e0b01b120c88f3a149ca3e02671f894442889d11240737bb73(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc619c7c501419d95243cf4c22fb24b422243deb99caa435dc1f180c5acca511(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__202083f00903f21de090c1a94d4e6d6ae3c7d6b45ac5ff45e60a96d653130671(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25ab8bb44e2dac63846e09d79dea153617e4045f78b901571f3019c33f7134d7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef0b52aa2a7d3cc9f588c4b9d99f2965fa477bf762d5c9fd6c407525c75369fa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f3e7f020463b69aa575417fa50bc1cc1b4128b4cef9b887369832c2f0eb2252(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a8155a7835f73c85284471611146aa250b87b13a85b8c53f4e0f95b1c642a1f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a12ee8ee09a68dea8f0a68cacf7854fc7e1032f700ac36cee597e983a1dce6a9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3dcead2a653b6723a0d135518ceb1d9b62f8228699f3dacd01453e56996ff333(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99a5e1b2b26df3e919c25deb991fad51efdc0e2b9949e0714ddca18b603dbc04(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3393c632378a7fcdd5097b94df051a8a778d311360a366975ded205d81d7332f(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAacSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24b48b3c912a5c72d483046b8a136d7e1a4fd7fba294fbceb92fb00b4178dc16(
    *,
    bitrate: typing.Optional[jsii.Number] = None,
    bitstream_mode: typing.Optional[builtins.str] = None,
    coding_mode: typing.Optional[builtins.str] = None,
    dialnorm: typing.Optional[jsii.Number] = None,
    drc_profile: typing.Optional[builtins.str] = None,
    lfe_filter: typing.Optional[builtins.str] = None,
    metadata_control: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__789142aa4395c58837a9b6c601ab577a514684356c1a965fce6046ac50b0dfac(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf20d4ef564a9fb023d6329d892a003bc432202fe296ba738802729a2fa224f0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__544fdfb43886bb4f00678fb248f622fd2d1e54979f91346689bbe82aa7ec0de2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3421763b5026bfaf0e030696beb5dfcad95a588af8af5ef5781d8357b72c1a5e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc1d250bb7a52215d8ae1c116f093d5525f11a4fbc4f5c1885880728436d7578(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e23c82046e2552f9b5ffd81f9d07846be004ad621746e05e846d0e8d0c15f5e7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38c5e8c1d9f6ef78a7d4c25a9c431fefda530131509d1f8fe805d59a729fe27c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c373a1c819b966257cd6a0a7e8999d60c7f9997fecd6cdfbd9fec6df5edbbe3b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a7a3dc38f787eb1c980e17fb9c956b5e52768602a8ff2950b530e1c3d01a65f(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsAc3Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__586f4289ae60e4a7c64ae5b36f68007adebe36b3a94668f5559611838dc55e2f(
    *,
    bitrate: typing.Optional[jsii.Number] = None,
    coding_mode: typing.Optional[builtins.str] = None,
    dialnorm: typing.Optional[jsii.Number] = None,
    drc_line: typing.Optional[builtins.str] = None,
    drc_rf: typing.Optional[builtins.str] = None,
    height_trim: typing.Optional[jsii.Number] = None,
    surround_trim: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87037ac1f9e134c505aba16d45308fc54085c998f221326f4df19cb05380b787(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd829a400e619f3043eb5e6c2fcacc78d7484d55ab2529587f5a76c6dfd04d6f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e2922a58feac2ecf1053c2190d6d5dc4489f01c1537fa5a10650f7ce76d5aa2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e5155c49bf1abd13353cc59574e082f39b9edf38ef3559ff07c2b8b2ad01dd7(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__961ef440a5f78a8252f3927ed05c69d8006db3a468d2c5592e2bdc0ba57f05d3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__668026c7bf32e50d3c7ce7c638383b80cf2e41d5794facbd9380b4f4d38c4514(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b435f61f3b52b5c2ad11db0c6b1a7295aca47950def1f5d6fbc3c885dca0ece(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16be18f5c394819c759669e853d50113c326591c219e91bc8a79e91a49838ef5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b7f020d200fc15afb6922cd6c59ffb774dbad30b123b340e5ed6d2224b05da44(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3AtmosSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d0187b4150e157229426fddc0208e7bd458801af866dffba8910c6f6a0ce578(
    *,
    attenuation_control: typing.Optional[builtins.str] = None,
    bitrate: typing.Optional[jsii.Number] = None,
    bitstream_mode: typing.Optional[builtins.str] = None,
    coding_mode: typing.Optional[builtins.str] = None,
    dc_filter: typing.Optional[builtins.str] = None,
    dialnorm: typing.Optional[jsii.Number] = None,
    drc_line: typing.Optional[builtins.str] = None,
    drc_rf: typing.Optional[builtins.str] = None,
    lfe_control: typing.Optional[builtins.str] = None,
    lfe_filter: typing.Optional[builtins.str] = None,
    lo_ro_center_mix_level: typing.Optional[jsii.Number] = None,
    lo_ro_surround_mix_level: typing.Optional[jsii.Number] = None,
    lt_rt_center_mix_level: typing.Optional[jsii.Number] = None,
    lt_rt_surround_mix_level: typing.Optional[jsii.Number] = None,
    metadata_control: typing.Optional[builtins.str] = None,
    passthrough_control: typing.Optional[builtins.str] = None,
    phase_control: typing.Optional[builtins.str] = None,
    stereo_downmix: typing.Optional[builtins.str] = None,
    surround_ex_mode: typing.Optional[builtins.str] = None,
    surround_mode: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc64159e416489f08069658a7f04584470471de904f086c4aabc7f9e9ac355ef(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c40cefc4fdc4952599f3e4796d799c230b3a4d7e1e89c101ca995ffcf02580d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c75d65fd2335aade7bced4a577a22cd49a44bcbc703c1110493d4564afdc27c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04b46db1edb742f9f0cda24227ecca0322891148cd8dca36e6010dfaa9c336e8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1469e6ea1fb23c6e67624d40a3c800b990af2f0d7c44b873c3d8c9c50c00c939(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__138fed7253c1f2cff3e8cefd61b75e3daf46ef00adb2b823e0ba48438bd28b03(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4789f065941000d46a40b78ce7a39fa533b3109c46741f06c98fc49bf2bae39a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf77935d4dedbc40a3ccb05b0de40bc04e63099bf876b45050ecfd07cf563b52(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__693a513e74d6e016ae053742d312b5215508edbe2d6a17ee005794b90a522256(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29996268529be4779706e1059e508b74540e62e805bada9a0610d5164c9b5126(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d8396e17a0c9413d42270a35307df3273b9287dd27ed617a0f004fa779236d1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e7bc24ed2a69a34fd1595cd711c0a5cd68b0d797a1f53cf40b26ac39920fe87(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee4a870997f7a04d792d3fca2dcab08651e433a564add59aee88faebd6394bc6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a188858053a2a5b0ea05c68902c12412a0d3e6e176b2d3189669b3c839414d25(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48af5f97bbc4cc3a9f737d73a736eae34e2d0ea4feef085c7e8f8b0334082804(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa8543c7e52cfb6e29a3e0021f14cf5192370cc4762ddf9c8cd3770e07b28094(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c6c33f140b77c1c5e9a321ffc61b4f2456dc7d2ca99d64ebd55a75e274b49de(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed240b388804ed0797976d069223aaaee9921ba5871dca1bf712f63e55f58c3a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d81ca1ff1e11f30ba4580a95109b3a6841dcdb94ba51589693b3780ede7ec4b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94d49a2a7809c654668c169638c19eaa30a487160cb2e55272b8805acb8dbfff(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8635c5b6488b6f00c704e6c52efcc249ac3d3adc0b6d9581490e3bcc4e145184(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8588ad1202d654a65460284600b2666bf665df4b4c660add649398eb84e256b0(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsEac3Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87c925aec3da382660db34dec415b91e0717ea12d3650312a2aad7d0c9be8f9e(
    *,
    bitrate: typing.Optional[jsii.Number] = None,
    coding_mode: typing.Optional[builtins.str] = None,
    sample_rate: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25ef19b51b9dab854b3c3be6b4371da831d2404389685240a83ef6c56e40a8e4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6586d039166172bf391b8c4359e1feea8d3b1bedf1878a7b8b19ccf93da2cc1a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d66073d5b1baeb205a908cf6145918d7ea06da560370029b3aa59454802955b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9bd0dd7042a272ef8fc28de1faedaf3a11a3eeb251db668e642652b51ae294f6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5db2a9d8d58f5077eb0dfb7f498620f2eaf857d575497a54c5abf3e41f8cf55(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsMp2Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__702b8ee4d2f117e2eea80be5456167f86b6e8f1a294e6e08a2468f5876f17f23(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__180a2d0671b48de79ad617d0e6cc7934e0259cc9e0bae9dfa53918fd42aa2b7d(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e8ed0a9934194e86f2f13b55dd449c4af72359c7d96a0d7484c220a1acd3865(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__765fa64e46099fffcfd3d7a7f2dffd586526c5caec84a8ed0c9a8202871a6b39(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsPassThroughSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a39a1fb68f88e1088da272d1117a79cec24c38d1d99abf87d41808300b432879(
    *,
    bit_depth: typing.Optional[jsii.Number] = None,
    coding_mode: typing.Optional[builtins.str] = None,
    sample_rate: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ebc9975deebeeb4656e42009e1d1d151ca9b1f52807e14115a6cd5e310210eb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1edca5cc0d60d5dc29894568220f7932c4ed603ba98970ae73ae16593f503d8b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__138a66f09db6b8b9bd1ba926c32e69f3c1df9ff415b61dd54f030177a5c6ab9f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__90ab871b28f863309004a8d7967623dfb4e7e3ea4cf9cc88ad26e9dd5e21f51f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82e7beba4df83c5f75bbc9163750d04b512465fa13a0d6f68dcc77d308cb8208(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsCodecSettingsWavSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52b7d35bcdc66b4e697516a882830d914b2d070f334184293ef1b761a46ad66c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c9a3fd95d3ea06dcc25b092208501321edb85b3a32097024642ce7bba789ded(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__137de7b1eb128db2ea42f1062f813fca518f76ca445b11fe3089d37d024a4de7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fda0392bfe29b81945ca04d077349bf0b0cadf03d9dd1993a8f16d5a81080716(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e73163141cd4b0ef034d7e408f32d070be71f72712c519a9979da95fa55d4cf9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3065f4702c467841670e3b2d9e6434c97915b8be9c88d87720cd0d99041a81e2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptions]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb23b5fe83d0aa16b7d5f2225851c1ff8a27a8a671e41154c7f52f8c5dd12155(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ea34ec5fcff4d0698bdae943b56ea2e6fcaaf83424431ec7fdcb6f01f52aacb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f76f2220237e5259c99d056d4a48de32af848bddfdd3230fd9abad6f975394f7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a84fce341e0972935dfb58a4c5446f028f15124437184411d61d64aa3d36df5d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__919eb037823f241dc203d9a6a158718988746efcdf331c9b3d6712a9aa983e56(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f569dae4c8fc7b13558c0fb8cec30f31061d96d211ada7675ead0a4ca453ef4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a6856be9b2846a6375b07a2b2a29e7a94ecc6fa33812f9866fd7fc659d0c9f80(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__22a250636376a8780fe47bf4b3ccccd5b8c0472ee13a056aa8b3862020a073a0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8af23194b7056fed94c6ae232c6ba89f50aa8daf48e6ca9de88c2df71a8744c8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__569885f30328974924c99c6cbcd91ec00b08a3f761f8e91de8fd8d93bc0db758(
    *,
    channel_mappings: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, typing.Dict[builtins.str, typing.Any]]]],
    channels_in: typing.Optional[jsii.Number] = None,
    channels_out: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ebcc2167fc051c1cce8ff35b82454605d76a7c415f4ecda2973154245a10ee3(
    *,
    input_channel_levels: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, typing.Dict[builtins.str, typing.Any]]]],
    output_channel: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__833c5b3779b210c9609fc14d700149be912cefcf694937510f1e6471636ca77a(
    *,
    gain: jsii.Number,
    input_channel: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b41f9b33d7d6d1afedbc249174cb15f993680981b65f6baad22fcb25c1050a8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76c43be71620ab3b429eaa5470cc9ad6c16c63a076d3a076e76f0478fd111d3b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8f4f03e446802a6be91060857cbbdf92744cce28a431e6851423209a53b3e66(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb75fb86131fb3811c31cf9370315c51b71f3467a249e79205a674d164691be7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3afca2263b6cbc8562858d810cbc7b9c04dc8b4a8c9ee2bb6850665c90e3751b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1746807dea8ca814bd063633c8ba0185edab0e733d05655bbce9673da645909f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__067b1f76513726c25a49387b693174c6126a67697bac456187aad7f23fc638ae(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__300a2b9dc7ebb138a377005f46a111eb39264a42b539335b2e48b5ac1aaed306(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b3bb1555afe3f677f33a9f4f6f83ed816499d7dec7316b64f595c7235dda615(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca22c2d77072de61f9d85ea506e575dd44f670ff9bcdcf6f8d5faca69924fae8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e590fe142ce1436e0d918c77fce6e6e1daaca695ce7746a8511d390970be60e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b879535b625fd2947aef1783ecbaf2fd6a5dc8a8143b601a00594adf5fec81e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e426c12239b2e61b0b8ac443e14d45c967cfec32ef44c094aab45e28f07209c3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0302414948c149a5a43f27031303e04f5b4df360535c18fc870ae0118d563c1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2db81913609ebd0498f71c40286fe31888f4f0a636e0b4e92a625dcb184262b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__420854ab6b2783d09c117e72340b64f2a54124303aecc5cf01c9685697de7a0d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__484b6d16dae67eebb38995d98ab227334df96a2b4ffccc91d683b6faf7f18701(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d69c7d6cde349993c2e15754339a63c575021022c2738be8322236c811be1ac(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappingsInputChannelLevels, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0f97de375b6a99b5195b263bd82957e0767f3d336f832c3bed97080956845ae(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__844852ac945892c0bf25558d3cbe7cb5c59d10d2533ae5617ddcaf5a79cb534a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aed5045ad4a23823e34feead48703709a10b1777a322d9e689b99e20552eacc1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a102f9f653ee9e2e9c1b4ff52f91a3cc0015976220c5cc31f453e4d84fc7d54f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettingsChannelMappings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a82f701a71b73da119a433fc1431228967c6780f1dc4eb923aba93c8867532fc(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7aa4ae6a6d97fa5de6cc3d48bf168c2992712f633bd00b5499d2895a8d7b78e0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7097b1cf9d968354bceff91424cded1379038d00af4add1385b552018c39bc36(
    value: typing.Optional[MedialiveChannelEncoderSettingsAudioDescriptionsRemixSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69fe30fc3c25ea29c4780b777507c07162de2f6371e478ad77db046ca8c9b057(
    *,
    avail_blanking_image: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage, typing.Dict[builtins.str, typing.Any]]] = None,
    state: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9157bf161def38c03e3c59d8d14e19f0e1a212647f824d4a45f9442d85a66c52(
    *,
    uri: builtins.str,
    password_param: typing.Optional[builtins.str] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6d89a3ddfe1c150a465c09d10597caf9d19fcdbbfff464ad4b34b41c69d39ea(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35656b0481a4933b7daeb88bf19eaa0bfedc19f6a670c11ec612237d14caf4ac(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41c73b54ee74a4996cfd701b8d93a0ae6596ec436f8fe60d1679ce2248ff846c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3575b5e28280ba979319586d01dbe3bbc3f8480d7aea186539064cf19f17d94e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78d4d33868a5f22c15be772c0b795d2a19860e06e9537fb2c469841da877603a(
    value: typing.Optional[MedialiveChannelEncoderSettingsAvailBlankingAvailBlankingImage],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0de94ae9d5612f2deebe8c98416eae78c8ae04aedaae59e4c6ed6e21b2115b31(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1576ebf24e169456ff6134d914df33859404e6a87b05d6eb0451ded07d0de503(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c950a472449dcf561775f2beda6c0e746b44fe4810595845578e2f97c8b1469a(
    value: typing.Optional[MedialiveChannelEncoderSettingsAvailBlanking],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85b503ac12158cc0dc7ca10c2bd8f526a132d3848a944db8cbda52b19023833d(
    *,
    caption_selector_name: builtins.str,
    name: builtins.str,
    accessibility: typing.Optional[builtins.str] = None,
    destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    language_code: typing.Optional[builtins.str] = None,
    language_description: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33ca26e515248c4661989fa4f799780e6d4c9acafed9dfc3e4d971898e66d036(
    *,
    arib_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    burn_in_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dvb_sub_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ebu_tt_d_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    embedded_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    embedded_plus_scte20_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    rtmp_caption_info_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    scte20_plus_embedded_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    scte27_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    smpte_tt_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    teletext_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ttml_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    webvtt_destination_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b28f75938ad1a144e5f8e47e18c065ddac52716cf3a93a6b7eb2c9edb2846053(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4756ca2f2d725d38d7c8dab6e77bcc194c896144749eb2b4e36198616bce2da4(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsAribDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7763887be104989b6c6aa5ae8d7d70ed9ac5884023e4f571d520a3f84f54fa6f(
    *,
    outline_color: builtins.str,
    teletext_grid_control: builtins.str,
    alignment: typing.Optional[builtins.str] = None,
    background_color: typing.Optional[builtins.str] = None,
    background_opacity: typing.Optional[jsii.Number] = None,
    font: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont, typing.Dict[builtins.str, typing.Any]]] = None,
    font_color: typing.Optional[builtins.str] = None,
    font_opacity: typing.Optional[jsii.Number] = None,
    font_resolution: typing.Optional[jsii.Number] = None,
    font_size: typing.Optional[builtins.str] = None,
    outline_size: typing.Optional[jsii.Number] = None,
    shadow_color: typing.Optional[builtins.str] = None,
    shadow_opacity: typing.Optional[jsii.Number] = None,
    shadow_x_offset: typing.Optional[jsii.Number] = None,
    shadow_y_offset: typing.Optional[jsii.Number] = None,
    x_position: typing.Optional[jsii.Number] = None,
    y_position: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__065fdb7a1db059531a179b04227587b01f23d6fd760ef14cdbd7740ca64c0ecf(
    *,
    uri: builtins.str,
    password_param: typing.Optional[builtins.str] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__317f733bd49757fdd0b8c17a798148f7388ca54ffa1cb603ea58538df6d88cf3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13f9b2f32339c56d91ca318998cf1b6b7ef9e573bf750e473c3ba0996850a735(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__003ddbc7df7d85a294a799f42188d919e4376206d781e5bffe3c856ebf0c4a14(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9944c935da8020a753b1eb08b87c8a005a99d6a9181ba6e18a8f09718add1eae(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d4240c46b3288b9e3ce68e2bf40b9bf1563d8ec71f5c3c3e1a74952b321a45df(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettingsFont],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ab760158323f2566ec30c29367a8e39acdf43cd38fd2b1b62d7782f45c0d5a5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2405f948437428e48b0b8a89735b95ee72553d72cb1982291cc4f2270186b01c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a9960a9a1910483ebb97aad0336e4253f8dfafa75cf7c4dd2c3fe9c397dd4006(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__800131d9ad1c7d8dcd7aff6401ac6874dd4f1f465a52be662dd2542bc9a97e8d(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab18c1555650ed61414fb4e86aaec315f5875a87f2e9b99433825d99b35e7a8e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8d11b48f716cd5f5d8098bdd42c79cc81a91bf567d4c29adfb32858270cf652(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea4d0eb3609d61a80f933cd841a146254e612e89fb71e05a34ec130d344d1a8d(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd84dd468a34aca463e8a78f494e893dcd93c466a0e613495333d2a7d83149c0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fb5d44e72e23a5235f504afd22cccb0906b90b16dd078298e1b5d2f9a676a2c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__746894c23d31d7fc862195e69f56c0f9646687fb9629b7367906dec4bf87a40a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__614f4f8bcc2ab815287d962bcff4b67c9c66b9c4e1ed9f65465bb1e228bbc1ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d19165b2f6939edb5cdd7d50bbe553a4c9f04ddd0c3c75259a48b9aacea67438(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__312b8a21cd8d73d7ee673d0cfad208b3a406d5c214b292d77937a4d61a3ef509(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7a660ebe69c607721ca6a89a92f1a084d6c0f7f547e4132f017ba2550a95c63(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b9baf5994e953c9296f907ed6dc0d070f15928a19bb89f90136b4a765491f8e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2452c9766b2ae0ba7587f5b690fd2beea122748f89dd1a0ee097fd0c3b673c73(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19473786347148e5c8f5dc54a8eb18d6fe7996cd492c766d3b0d8c29c83200c2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9196117fbaead6c007ee4f50b68d63bb03704e1ddc08960506d27fa158b6f1a0(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsBurnInDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16c2adee11438f414f498f85afdbd6a78039b11bae09e860d5337dd3f7c21728(
    *,
    alignment: typing.Optional[builtins.str] = None,
    background_color: typing.Optional[builtins.str] = None,
    background_opacity: typing.Optional[jsii.Number] = None,
    font: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont, typing.Dict[builtins.str, typing.Any]]] = None,
    font_color: typing.Optional[builtins.str] = None,
    font_opacity: typing.Optional[jsii.Number] = None,
    font_resolution: typing.Optional[jsii.Number] = None,
    font_size: typing.Optional[builtins.str] = None,
    outline_color: typing.Optional[builtins.str] = None,
    outline_size: typing.Optional[jsii.Number] = None,
    shadow_color: typing.Optional[builtins.str] = None,
    shadow_opacity: typing.Optional[jsii.Number] = None,
    shadow_x_offset: typing.Optional[jsii.Number] = None,
    shadow_y_offset: typing.Optional[jsii.Number] = None,
    teletext_grid_control: typing.Optional[builtins.str] = None,
    x_position: typing.Optional[jsii.Number] = None,
    y_position: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5c63ec0f70f016c08fad71e20693cbf414734a31bcadf801d21c485dc729c7a5(
    *,
    uri: builtins.str,
    password_param: typing.Optional[builtins.str] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6657c661826fab8bb19081ad70a56b0d08d2044762bd19741366e008eccace28(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08261222bb522a542c6a37fa7b5f1502dd711bbe031e02e40d8e10573818f9e1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c2b1968760f87e05066653ec530d285ade96ffb3e1a2c799385fc04b506fe82(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cfac541683575c5bd0ade307ae1c4c5a60317922158a3e2484fc7a0c4c18cf81(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2bb7e9c2a48421eb6e04d8b2e086c87a1e563219d9ecd80339699a88f3798ce1(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettingsFont],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f38f75ca776ab3e9fa60c6b5f2582451e85ec5757a5196c936ea1182f8fd3ed7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9831a5882c6036c24f9839d6762d79b54cdb3aa02b2d87b4affe67c73d3248c8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bab5a44fdf44ef6e24fa599f582f0825a7b11107758f081aafbc7a364eee9326(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55a9ae1e923a8cb5e14f51863709a318c919e490907d414aa7405082e88a42c6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__470ba44719abf11e2c81aefb4afe437d98486c3a6fd1c24ede5f7ba416f2153c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__23dcdc4a016a5244b69e6bac5ba7d203085c6f08fe71551b74590ea5525f32e5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a018f3f16516a15e75bf38895fb9c1014f5bcdd0cbbec94d803de25573a7bfe(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91710b68892a0c922e08ecfb2b06fc76e47109ddcaa216d1c276bab4485bd98b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2bb40377ad7a22d30c8cef0a02397e6882b068cad7d8129ca333619e04b0eace(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5fb47276ec210e894bbf1028a31a8c41909dd56875a342513494204815955a65(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31d7da3bd32a14836f4e52e50354a7518aa8ca8aedc43e1c74550f612afe545f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fee34ae2d7f83e1fe1e4a0bb6ebe263ccf2d654b2b977b2da8000e15dea04f49(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94792955a1639d1375229c77df43240b4db57a274dfafee1054b0f0b86b8a9f7(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fac1865dc55bfd6afe4b0f3c40ef5b0317eb81d17492ad7387f37e99b1652b9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd2eee5b3cd614fa9f557c5838e2eef061a8a28d140f778ccc2b6f1ad331c9f6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21f1faff08037f386e1aac4a8a43b10fcfb1a1ee1f78d8ee11d509818de4397c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__267d04433a0f856091a50761001c87928515572a7d3d2be14cb5894a20d32a0d(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8307daa541ca1d7c911be209673d51b687afaecb0235b4a476e51fe1faaa9544(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsDvbSubDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a618bc979db53e58135909d1e6f8dc81c66e24768be07b43033bce96a716b062(
    *,
    copyright_holder: typing.Optional[builtins.str] = None,
    fill_line_gap: typing.Optional[builtins.str] = None,
    font_family: typing.Optional[builtins.str] = None,
    style_control: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48328cd40caf065a38533d06594b6d6fe315515d4b0302bf547e8e8a367ff3bc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__360050341a36f3b9ca3d7d90eeadc7d3defbab49fa07b20ea904108fd3c54bf2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0dc8b020de349356f1b78f5d40f54821eb649d9462ee044029e28d1b91f67c80(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b9d80681e81ad596aff27adde179903e818c1472af42c4490710f7e1463332f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7338b2d631d6e295d390191fbf413ac935fa78714dbb2c3b4e49bd905733664(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36cf99bf13390ffdf5d48bf1cd2ac5d0af81f6a83362ed4adf18b198b696d6d2(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEbuTtDDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97d25027433a56285a7b02a595d78a1f2bfefc4b5b28033aa56427307030d053(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__703d839db145a57cf73d3d8d8c1deaed7f993fdbe4ae3a23da8a2d28d7317067(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__772c4cd5c44dae5e5cc1644e536e5b369cb7a479ae040475906d85e051e0a3e9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b205ae80d0ea4e457d331e93ec379fc40f0b613cfa3a174a0e418b40f439dc32(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsEmbeddedPlusScte20DestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e46e27ec16cf10af76a2f5be461b7916edd25b469410ff39a1cc56c02969b131(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f53629adc1edcae2c743f848990e7ddf64aa45145d1e087f06f2cb44ced78bde(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__328b2316f9b031475fa0bd2ea9ffe4e664cf179115faf9b324c0ee919d5f000e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a2b8a25a85f01c6fcee677b59dcd5dd14671af56cad6743d74a1a983c4e3884(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsRtmpCaptionInfoDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__424c0caeace83a67f8742751f6a43a47c02a91a2115114c59674384150612bb9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3f75e07d32c8b0c8b90f2563425be06990f6b89b9b751bec9bb1b650065e154(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte20PlusEmbeddedDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57001e7011b109bcceada36b95b5a284796e7ef8220cd03f1f455cd65e5c52d0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b497b0b2acdef79b4e7bdb6ddd4b5eac79cef9588be21ca3555ccc09f1cf9b1c(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsScte27DestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00ac1e14ea20acf942d26a9a3320271ba9ae065ff22dfde1e37995abfaa61695(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7853dc4e967abe7886b616f6722941a26ea76e5377ee373eec28bc820ce4e917(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsSmpteTtDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a4a97e47446b758fb1d0e9d2f5e96c79aad85926c86e59f868d89de2bce9754(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__455d51fa9776a700d830da37580e4070946476b0973a22d6406270ef5ef4285b(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTeletextDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5506fdbe81986a1190771380d1de18d3478f2109bb06ed8c71131d798f87445(
    *,
    style_control: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0f81fff6044683cc0f39a6cab02b1e83eb292ee4699358f59e5fa88e046d393(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__426690a0079a4b78cfcccf6dacfb28cc74efb8319d9359894bc2f7574ce6af39(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f6c0e50a9f5d63fb694d6e1ef990b07289f79840986f9601b19b24eaf02a66c(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsTtmlDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b564c0bfedf9f1c6dca3711e67d153168db90a26eca053e16a61508f14ead1c(
    *,
    style_control: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7afa444fcc4dfff6ceaec96c0287ca0f2f2733b7cc90fa6bebb2f0346a55037a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5db4e72c65eaa0aa2df12465689c2d88d0559a851ff782cc95007ce111e0c48f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fba7dad3a525f5210e1369f93ed2558a024fdf3b8dd3915f3f9c151fe8e7d25(
    value: typing.Optional[MedialiveChannelEncoderSettingsCaptionDescriptionsDestinationSettingsWebvttDestinationSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f74ee1a8232cf4cbbbcf0a064e17dabf27cb8f1e748bf1c8fe149b1e68bb26fd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6b53017e9cd2aeb1f968a02236a230defb13034984977209e48f4edb2899833(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5cdddc3cf0ef40f6075af5c50b649bc9b9017af3e4a8d31bace6c07f60f37a8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd68a27e9068d311a142200e370a01346398d31278f7d0b95b46d818076491ce(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f9629eca0d53faa558ca04d229940f42f644854ad5f1195ec2965ff560c795d(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd34d142e25e96b77ffc63f2afadac8be11af6a0ed14cc081b64c792c335cfd5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsCaptionDescriptions]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54035dfa52a6a2547b4983e141f515046e7833140e227ed57908dc94b40c6dad(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f50aee4f29f2158d8102bfa8b93f42c8e69ee0967e0315e67d388f97912b3a3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e46724418028a6db17ce0d86698cff8cfb5dc9e51004ea877f979880f8507145(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d65635745317c16b28198364e470ecf15c5306b48feca87e929c2a7d68fd189a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf0e534af411041a34ba590fd4946d88de6dc2990a6bd52841eed717d895c1fc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93238f10f22896d23990f941b31dd19994ff891d7d5bf1b00f4a227f34178f11(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74e0a4e519305780b8db74cd1c24c4ba30528106be143eb31e3b94087c5fa711(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsCaptionDescriptions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6598d8cadd753da741fa4e2ac7f15f7c44160198c04edcec7e61ae3489b7bc27(
    *,
    initial_audio_gain: typing.Optional[jsii.Number] = None,
    input_end_action: typing.Optional[builtins.str] = None,
    input_loss_behavior: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior, typing.Dict[builtins.str, typing.Any]]] = None,
    output_locking_mode: typing.Optional[builtins.str] = None,
    output_timing_source: typing.Optional[builtins.str] = None,
    support_low_framerate_inputs: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff51bd3a5b88a45f50676aa2e8ab5f36913abde26b9d2a090a3c0fe03b3ee9ad(
    *,
    black_frame_msec: typing.Optional[jsii.Number] = None,
    input_loss_image_color: typing.Optional[builtins.str] = None,
    input_loss_image_slate: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate, typing.Dict[builtins.str, typing.Any]]] = None,
    input_loss_image_type: typing.Optional[builtins.str] = None,
    repeat_frame_msec: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c92dfbdd7dbe629241d038de850d2e4786f023cbd35922aef7f54ebaa545b7f(
    *,
    uri: builtins.str,
    password_param: typing.Optional[builtins.str] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf7512b90198682abc35748d9a86bb0f0ae9f7b4ef909a2db7139b3cbd8750e5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1e7bfbf89279a7a2feacc89a8cccabe8794f31133ba005babeed8d2d5bbbb86(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b74d3b54c52fbe8c94287cff556fdffd57ff7fd52d12af8873fee66f9c1ce866(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb087a0353ab1d648752b5bdb4689a9b354b841673a6ebf41050ee3f2dc8c2d5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11c196cda4d41518b76f557b0ffaabe94fc1163d35f22cff2e2b27513ebf9028(
    value: typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehaviorInputLossImageSlate],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e88e4b19fd57ada7016f1a59d4d50b99bd3d1b7e63ec0c13aad449981a2c4038(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49ebb75a266e4116fa4894eb6ccb1ffa3c0acb8414bb1d5907cfc01deece1fd2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6015adf6d498ae06c426b91634215433cabd7812d69dc6890fc94d8d613381bf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6337c1de267f67eb3a52cb797a031a6c10bcf1b6cf2764bbceaf896a4e1c913e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f8e871b740e96c62f104c390fd8eb1e1f1d803c2d3ad21c9aa14de19c4798882(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8eb301cb804440bfd7d29a39da1812211e3784c5d5a2b2277acf47c7d4361b0(
    value: typing.Optional[MedialiveChannelEncoderSettingsGlobalConfigurationInputLossBehavior],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72e122c485955c1c503d9305e86c6d548b084239de303a5dca75d37e5954fcb5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4882a2c53fac9d7636a45d12b6d34b0f229f7d9c1eec17ec27d9c987ec8217bf(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0334a7c38d264511815ef3f2b07745d50fa604c0b238c215f7d28b78c45aeeaa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__efe2dd9ee8370914ad6a15174fd60e12a5e06be1a2b7f58acc99eb9322a3c8ae(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c33611d58ff525531fd3f775ed746d89ebee19b3abeac5c091a2c550436b746(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4faf56f91d61cbdd25b3d8c47a3898fa7c3f0126fc3ddff1751dd2add4655944(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28e0bbc7c1d0c6b9895643657ea9f1933fe1215564f13214a39ff7bd3b3f976c(
    value: typing.Optional[MedialiveChannelEncoderSettingsGlobalConfiguration],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfa28fffff7b5303b34a9786ad181dc05e0d584a64e748b454a6cad2f960087d(
    *,
    motion_graphics_settings: typing.Union[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings, typing.Dict[builtins.str, typing.Any]],
    motion_graphics_insertion: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d375d17f9c26d9f1df951c3dfe0fd2d08fd922da091a0b62b4c0a80621709bf2(
    *,
    html_motion_graphics_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82a8373f0c664b9c350e43e42a8a77d0db2b6378ef790d3067a3f7a82135600b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfb4a87512fe4f36f38365e054398c6f8779afe44c6566577ec62cc419b5061f(
    value: typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettingsHtmlMotionGraphicsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1dc65c438545ab6c60bcc580c6e4d188ac9736ca32c4d6203eaba00d94afabd2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f04630a567cee69585163947095b1c2b7769de5b12647c85fc487942d682b47d(
    value: typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfigurationMotionGraphicsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf176cbd97e046180fa854910cc0fe2baf8e297796aa018c77111ca1b84f0e09(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__395b4eaa1c0a6d71b3eec0363582551f4eaad4c5c15755481127d224fb6c6c56(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db153a3f1abba87c6fc6ce8e5622e5a02ea3530fbe4e7326dbb130e89c696993(
    value: typing.Optional[MedialiveChannelEncoderSettingsMotionGraphicsConfiguration],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12f030295aca6d9f1acf8cbc5bba430c5a412ceddd1c687c32112c2aa84ab073(
    *,
    distributor_id: typing.Optional[builtins.str] = None,
    nielsen_pcm_to_id3_tagging: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6723e619ea73be6cd31030b80cbf9f8d065bd32a10f67899687125b7b099f905(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a469d7103541dd25da2de21e29a861c957ac9fe85ec16b8505ff8cf3516a0b55(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7312f86c8db292bf666755c05faf4d574a98d8d8a7b48832de5120b7e2bbc6bf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afb9725f65f8e523ddd8593432867e8571074174872e27d299f88d37aed9c193(
    value: typing.Optional[MedialiveChannelEncoderSettingsNielsenConfiguration],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62024e4759d68376aa340afc51b0b0f721b64d3235e2fc14ab1e6294ae2d0358(
    *,
    output_group_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings, typing.Dict[builtins.str, typing.Any]],
    outputs: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputs, typing.Dict[builtins.str, typing.Any]]]],
    name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff0383b914645378f0424d6c558189c701f18036bbfd3dd16bbe27e03f065813(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0425686028f7481a073e0210aab99c897ed0d7905897bc4287e590a7347ff92(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1fec8b9adcabeb212140e14d8779097aae2e1f39968283902e7082f5618a4a01(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e190df335c5bf0a143101cb4b410348bdb5a13ad0fc618bf9e0686642ca1979(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f465d05f10b4dc78faa0599dbcd46e780e93ecd6bb054695be736eb488e0c126(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__123d61f0391f6e15a8c4f54449ad77bf7d9a4199535c3575b85c26ca0151f646(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroups]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9932daff9757645a9bdfd768b8d760b717a94bd313aa781e54839d7cd2ac01a2(
    *,
    archive_group_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
    frame_capture_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    hls_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    media_package_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ms_smooth_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    multiplex_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    rtmp_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    udp_group_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9166e40588f38b47f545a32795713ab9ae15c557db7ab43ca49883fe269768cd(
    *,
    destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
    archive_cdn_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    rollover_interval: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__055d99f207ab8383c81dee80e087bbaf055985511771b6da0b1b1038a19c6d1e(
    *,
    archive_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7db35eaacb41548c0157ee7aead247f07cd0887af00c209380a389cad7bd6590(
    *,
    canned_acl: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91f7f043e978e10ee95fe0770ba7a8c4fc59b807305c753bf043a510aad16e38(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff0ff3d7737dfb26a4dda0db451a202cb06f48df54fd32d209633e73cefc10af(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2ff973d1fe48f1c36bfce42bc00f2f4cfd4d3b0d874c9a6ecf55e1639a259bd(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettingsArchiveS3Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4499bd21e4dce50779b8e92bdeb68ce0942e179f277ec05d32d67d057df03f3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07ab79197d3221a104d0c2419c84b694828abeced68116ea5a683ed2c5318a2f(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsArchiveCdnSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0aec561930ab81079b67c59194d355cd26ec95c573cdc291921ed0ee52543e5(
    *,
    destination_ref_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0c1ed9285f2479cc95fcf6727981cfa89c415291dbc90d266d45db5bb1bfea6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__563cec715e3f8ff49515566cf0d815f629cb4f58d1471bca10d11811f4191aae(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b8331a9a0f3bbda60ee3af0cce42aba5a097eeafbf61b7d8b9dad7448ed80b9(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettingsDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__808d4e31096e6c8639f990a391e1c113ba0ecbb489269104fe296d1d506d450e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__348d547a55e7ca7103f1d5613fb7ce6421af0e6f5670855f0a2132ba14c46122(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3c8e509bac27b0ac3f725038c6740b4097683c3b17fce289073b9700b9f5c3d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__860d69e4a99275e82811e1a03a061057a0f7048b3514c15f499275a4301729ed(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b44a7ca6e398f948175d6abea5388b188eeac8cbd7f286479ccb72d7ca5d085(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f7c3c339a6eaf8270cc192d427c92c7fa52e88738770f1a978321e61a2012f2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e18cecb85358da336d6c54c66e3566f4dd3c4387db7d7cecc0fb587a3cc0ae5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e449d00c14cf6fb6682a786b23d4dfc76b181a6a7cb826582f8d66b58c2bfbd8(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68fc5240659b8cbd054d2ffa357e0a5c631a6f06514417683e79385056977c44(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f9e9deff415f3887e641a99f3350c0667f23e00ccccde0bd09a36c2c9933841(
    *,
    destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
    frame_capture_cdn_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24497a88e8dc40ed18a44d6b4eb1ab553ff7b036dc72832f5782c32cb78f75e4(
    *,
    destination_ref_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b62b5bd433ec8ae6e2400e90708817b9ee336a5bae939a96796c50f90549c05(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a508c9ce0e1d269c50e4dede5d90a1df0969dd55a4861c9e71ce484de692e9c1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bf54ee97210e5dc1ea12489e3799d396b6403a637271eb38bc0ecb4b0f94847d(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb4f03d54acb20ade58153a137b95187514e24907c7c650aaad8f00372867364(
    *,
    frame_capture_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0d6c5a97b2c988d35a7d1741c200925767e2e1f2feba7d991a10b476c31224b(
    *,
    canned_acl: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43e37a95b6b104fa2c868319588eb5783ecf1f62ea8afde4309ec687b2e44658(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e12d95e15001dfcde867329ebd206dec3a768bf55d9f570cbd949c94a8667e8f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd89c12dfb6d99df0fc60c57766c2101aeb881597e0faf9833070409b901b2dd(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettingsFrameCaptureS3Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0dbb7b4412af361dc9c2f98a1b445c26ca136f2cbeec2f93dc70dbe6cf1b0793(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8cc54712f87caa22f46633ba30573bb120a971c3b960133fef7c1f02c8c181ec(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettingsFrameCaptureCdnSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f39933249d88905b0ce72ec7e93ce1dea5b8d72a7565939018ffbbd1e577944(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3742997cbc1ea7084df12842e6e4624b32b530015948e116504d62ace63bb61(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsFrameCaptureGroupSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d3e77a46a10e4d3f96759a35d029036fc4a9e53dd2117258a22752b504869bc(
    *,
    destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
    ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
    base_url_content: typing.Optional[builtins.str] = None,
    base_url_content1: typing.Optional[builtins.str] = None,
    base_url_manifest: typing.Optional[builtins.str] = None,
    base_url_manifest1: typing.Optional[builtins.str] = None,
    caption_language_mappings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, typing.Dict[builtins.str, typing.Any]]]]] = None,
    caption_language_setting: typing.Optional[builtins.str] = None,
    client_cache: typing.Optional[builtins.str] = None,
    codec_specification: typing.Optional[builtins.str] = None,
    constant_iv: typing.Optional[builtins.str] = None,
    directory_structure: typing.Optional[builtins.str] = None,
    discontinuity_tags: typing.Optional[builtins.str] = None,
    encryption_type: typing.Optional[builtins.str] = None,
    hls_cdn_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
    hls_id3_segment_tagging: typing.Optional[builtins.str] = None,
    iframe_only_playlists: typing.Optional[builtins.str] = None,
    incomplete_segment_behavior: typing.Optional[builtins.str] = None,
    index_n_segments: typing.Optional[jsii.Number] = None,
    input_loss_action: typing.Optional[builtins.str] = None,
    iv_in_manifest: typing.Optional[builtins.str] = None,
    iv_source: typing.Optional[builtins.str] = None,
    keep_segments: typing.Optional[jsii.Number] = None,
    key_format: typing.Optional[builtins.str] = None,
    key_format_versions: typing.Optional[builtins.str] = None,
    key_provider_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    manifest_compression: typing.Optional[builtins.str] = None,
    manifest_duration_format: typing.Optional[builtins.str] = None,
    min_segment_length: typing.Optional[jsii.Number] = None,
    mode: typing.Optional[builtins.str] = None,
    output_selection: typing.Optional[builtins.str] = None,
    program_date_time: typing.Optional[builtins.str] = None,
    program_date_time_clock: typing.Optional[builtins.str] = None,
    program_date_time_period: typing.Optional[jsii.Number] = None,
    redundant_manifest: typing.Optional[builtins.str] = None,
    segment_length: typing.Optional[jsii.Number] = None,
    segments_per_subdirectory: typing.Optional[jsii.Number] = None,
    stream_inf_resolution: typing.Optional[builtins.str] = None,
    timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
    timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
    timestamp_delta_milliseconds: typing.Optional[jsii.Number] = None,
    ts_file_mode: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98171dc00c91805f854e57a021335041565cbf26896f3170da6dcdb89a1a94c8(
    *,
    caption_channel: jsii.Number,
    language_code: builtins.str,
    language_description: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28b3bf9cce8a444cc0ad57b68c3e4889ceac416d029e8ab6568d6846758e70ea(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78b5d4e9961c06042b9c530e13be07ae4bedbf66412e87160b4ad43ffb7f4f24(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54060746c5d297526cfc1ba55b4e0eb509499e57d90820fff1c07d8e452a79cd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c3528051156c28c1a3bd540371add719567036fe807dfed18df43764534c72f(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f69676a8d1bf6f5e5746cf534899a8d4a4a7536390b0b1710946506b61b50b8(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44383b3b8f280513cf2be0be0ea1bd9f50c6be13a52d9c688f19d7b4ecbbe8aa(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21a9f1b118e7db528d24c459ee492187b52b96e4beb52714450747f86cecead6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__455aa61a485d019056935c4779b4bbcb0f4933fca9c035efa23e40b8554c4756(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb7f4df25a45dbe83989d44315968e02d3234eb23aa48181a0108a7c6a7527f3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5716dcea2b26520a8e30c2ed53af5916ebaea96a1de796b839666ce7f54a1fe1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a10fc5144a845cbd5b179e7b8635beec00a61f574d124cf827e3bd4d1d1e301e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed158c330d355dd28c0ce409d7e015261dbf8688549f1f6afc770bfdc05a724c(
    *,
    destination_ref_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab0b08ff2a2eb9194c633da296faa4c8eabab6ba5e5897ffd4f321be38cbd5c6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6284d3212c7ec7bb36ab4482e1fd1a9cf67b92f674d642081de015f51ff12dd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d7b4b0963e6b75a975855d31bb79904a4d2b8954e3ece7cd88adbf88f00072e(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb77ae124b07180b1263761560e3e106dbc40b309e8b891cee203d1dbeaa6e0a(
    *,
    hls_akamai_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    hls_basic_put_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    hls_media_store_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    hls_s3_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    hls_webdav_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e79ea6b8524853ed6cf040b2004974e190135c970d7f7dc7b5ef08dfef20aaac(
    *,
    connection_retry_interval: typing.Optional[jsii.Number] = None,
    filecache_duration: typing.Optional[jsii.Number] = None,
    http_transfer_mode: typing.Optional[builtins.str] = None,
    num_retries: typing.Optional[jsii.Number] = None,
    restart_delay: typing.Optional[jsii.Number] = None,
    salt: typing.Optional[builtins.str] = None,
    token: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc571cf4a82afc41b548e29830215c2a5b6cf2e1b1b2a6c8ed3e89d0440629a8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fcaaa4dbfbc55278f30d47431d240a62bfce9a441fd11cd57bc11197cd5ce5a4(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__18a40869de1d656d676a03e2980836ad8edeb257723dbaf8b70b2915444d0791(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d4c2381d03bb8dc33d2f61e6ed8bf08048e4367ce092105d04f8e6846d4fbe0b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03a6b24bdc289023878f6b5e0a0d91839aa255c000eb353bc253f4fac5c71f0b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29208915a1e38ca87eebbbf4d10b4b185d27bdedec64954b3d2e6873cad388df(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4325c1ea1f7fd0cfbaa9068a78f38cac7974a2eb93b6c85f3201444246280de(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c37a6e1b6907637ba6c2a11931d77bd2996da2212225ba2a364cd1d3851674a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4087bd57b576600f30162e13fe330812e946a1ab962be76d987caf145eb6a0a0(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsAkamaiSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f1a7b348608edbf402927dfcfbb630bc9b12e5f12cfa4d013df7059c2eb0d84(
    *,
    connection_retry_interval: typing.Optional[jsii.Number] = None,
    filecache_duration: typing.Optional[jsii.Number] = None,
    num_retries: typing.Optional[jsii.Number] = None,
    restart_delay: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f07325f7b65548ea8d4e798f9f539a2c9ee73ce0903a17cb4e54b7fac2debf37(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7635ceb321785b302935d8c7a8a6ffa1c7bdff9da315bf791f4c574781b136da(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88292dd0cddd50a815ddae7fdd914fe611b4cc5a8ec5accd76c74c844894b6cc(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b4bbfc56c8d575f02bb0fcea57f8e48b2294c9837d7da97dadac28bd17a7936(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8be603bd42d16cb6945bd2373e0fe7bbf8a235251028b6cad5ced06b807d7da6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a4a2e2b13ba8405874b37dc7afef00d0b9e305f38118a7d0c1a70ad6d1641f9(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsBasicPutSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a741b457b0bd56e8480aee55635348b570c502a0e488b2a33cb2b3a5105373f(
    *,
    connection_retry_interval: typing.Optional[jsii.Number] = None,
    filecache_duration: typing.Optional[jsii.Number] = None,
    media_store_storage_class: typing.Optional[builtins.str] = None,
    num_retries: typing.Optional[jsii.Number] = None,
    restart_delay: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cedb5f1ad763785a1619b106bde2dde60f1c03888994e87132afc8adae24dbde(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e4cad0880dd55d07acf19ceb61556278bd070b6fa00eaf85f76013872e3da40(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__70815122aab40ab4a902777c320dd4a8ad4f6bcc4234307fdedc1903f153ab1a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d27566df56a10fa5819ea4c63e3437dc8102470b245a19391e54a0f7e296c59c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44e96e1b1b622689de45e57a3ab3cc9b8207a7008ab8dcc84b226a701a0d296b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5401f49454936bb6cc51c9ed665e171b96b9fc14e68c96a68c0a71c918786d4b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ef0df2ae43090ebdd9b7c56dd64a31ba3467693807d27644dfee9aa50c31f33(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsMediaStoreSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c06ec6287449a8fa094776399ab2e1b1eef6ccd2167d5852b416024d857c52fb(
    *,
    canned_acl: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f8146600b6fbcb5da5572bfd78568a003cf550d4d1352b0c15411369e6d8b4f3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11c67aa4791cde0dad935f37ad8a9afce3144f80c2a6bd8caa341439ac19e495(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5227b55f1aa4d94f2a566d5a31f33b15d5a7d67ee2cb6f5f4009a748e53e353c(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsS3Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe320a9f6a7925ae798c86a5a3c5f0dfd3a2e0bd5dcba09f2125baffcedfc56e(
    *,
    connection_retry_interval: typing.Optional[jsii.Number] = None,
    filecache_duration: typing.Optional[jsii.Number] = None,
    http_transfer_mode: typing.Optional[builtins.str] = None,
    num_retries: typing.Optional[jsii.Number] = None,
    restart_delay: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e4e728515cbd566d114bb592b625cb7a04187bbfc41e0adc2646a2b7ba0e072(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5af7d1a71989ac25858b9c9fc58840ca37692d94b3934cf8bda43050195fa42b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9ef7e77573000b61d5f0dd8ced5c8d28671e47d592add727c0adcd44f49ef96(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e17e0c0188326be6cfe3f61a497b62447976b78018943b6a3727a5e59ef736e0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc1761bcfee50b084c1f6fba13000a955e6ab01f0fe1e40c95f7bbc6974539d5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c18f509763178fb7356f8deb4294d486c8d97e4f606711af83cd73f61174567(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb38a1cef9c141098b54ff0da455173dc400f26027f77c3a80b679e17d1b5d19(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettingsHlsWebdavSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe2c124a2dd20d1aead31ee01be64fa69b94a82e645934c63a7479002886c0f9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6a1310a456d36cc94879bb14be90f53eaa24abc292f9b0fd009d0dc685e797d(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__64c8a7c554a14e53984a5cbf69a837a03a53a41cc70f39d0defccbace5769f2b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26ff68d72c2b41c74453ddd951fa3f862cf0975352ce6ef3aa2cf2e3e91f83b8(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9db914d45ff66991f70862caa023fb40d77d3e37ce84bd691e629722568f2380(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e9bdf919b01c0adb595834626edf4a3b9c90d381dff6dab36f7c99038e6d62b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d64d880aded20395451955df047cb4678bb8c1ecd3b56d81b64f837ad13c6599(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c1b99c9899a80b6482dcf210fa6badf13116c8571ed12ffcd5bed14f97b0e1a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f5551a2d55ec6c2b7da0a108b88b7e4f59044eaca84798239d6d3cfb046a130(
    *,
    static_key_settings: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fcbee35588f7f3b2c983b6b57965e26abbff5f00dd5815186bef532bf8e2223a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__905a2dd0ed31c90a82ef34b2cb26aa4ef00bbaf6f2a35a91192aa81b7f45cf30(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d5a2607c247e51f821aa6e2cb012f34cbe5d2cbf486025de79b9199585d25865(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ce89b1ca76dd3e101b49e3394cde390daf00daaffd5305ee511701f9f9907cb(
    *,
    static_key_value: builtins.str,
    key_provider_server: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d015b68da10573853f451c3bd87d12e87272510c63f270221d1cdbb4974ad96(
    *,
    uri: builtins.str,
    password_param: typing.Optional[builtins.str] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e39a020a3ed3330d8db5acaf3ebd21986650187041f2e651e6b772cc900d212(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6c90f88391d1eee744f5e3e920bf866214ede3ca643a3fc34cb8155443e49d9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__beeeacc4a46d47c4dfd48bd2ffd1fe88ccbf361b35bfafef8e7b18ec78149cab(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4aab4b062c08578635a2dbee7f513f592287cba65a7a0b3582273a33003108ec(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba6e632849e1551f5ec7eb477e5d57d0e1d82665736c31a85c3ffd5888b903fe(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettingsKeyProviderServer],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7680301c84ace136d6ae7e922a0db13a8f2fb273f7cf979e60aae5e93df3d36(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__211c54f1e2450f1ed16d8f755ba647997d8da2add2d5cee4165a358b19c85a86(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b90d98f4b20e98969c2ef744c71e1f14ad8f0d700ffea9c972eb69a8f5dd9015(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b9316f4d84a991ce1a1399999766d908a5d2bcfc92c0999eb41a6fe3bbea61b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dbbe1534e9de1135054e3a14f675395dcf5273974a7b0ff6570cb63fbf5bff82(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4793f6283f94e46c2c5f26d4a783a3ed738638f64f858063482f1311f763b0bf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d12630bba7b886171c2d34c99a4fdf54689c535ff335032467ea62d75889901e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b85891cbbaa993c31b0ab6022bdd5629c6d33aeb476f19af5b15d14553475f9a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39c2b2ce786a763301fcae184b301348547478a8d6c5e9fa7d22fc582041c63b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsKeyProviderSettingsStaticKeySettings]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0066f4f9e4fdc4821ae640975afe50a5cc4eed6e322e166fc5abaa50b06d2a6e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca9120716ed70af982e585e6e857b7dd5f4a1dee250ef88eb11780f639c7107b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsCaptionLanguageMappings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d13e4272f6230fe666b305ef6f9fc4963c9cba4da9fc8ce8e7bde598e84b807(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettingsHlsCdnSettings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c9e1ba1bb229ec45bdeee54c0c6e149e0d4b5f268bc96d02547b85f97cd2918(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__64c48fda691af0a34b256454c77c479100a40dc0820a5bb3316d4c33c1ef3a0f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f3ede1a781825dad110fc27e574d14924162e6d0a2b21a1c457499a93a4f5db9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4b4725d855ed87d30be399047c580d9d390827646d37c0843e26f8699f8c0fb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fc8fa715259e79a9fcbf57cf0ab27fa5198fcdff947a7bc07337a8a2c3c0e42(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc5d61723d02317c36d8fb6a8e501a2a13ed0ac9eaee73626c3a2dd3d2220be4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1706ca85d6db095dea6484e7ce24ca1e3fcf1646e1442e0c9ecbfdcfdaa6906f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8507b56ab1a0c099ceed04be894fa7f820f1d027388fb084241597554527093(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__969b07c699b0e175c7306cede47896fe20f837850452cc71515c96421ae57d04(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21ff387221370c3d40526219e56c8420fad96a5de09d3b878a3b49ac3d5107cf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf36c2ebe974da03a14fe94d9304649e32b3a4d3eebd09163b3eb32d15745db1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b08b81a0284030a912012323b37a7d45ab0920481cefdd60ce10c243af356f3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc56a5ced6ca1498cfe9f8a5483b6aeea89856ab52b59b1ef0fd3abdcefc7e4e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce52e50e3596d3be8a6f79bc00883b684bcbcd71b690dd3b83c76b0d194c22e2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__73ce7f563362f83e77795df72c8c09ae73ba4ebfe25bc1cb4ff1eb6ef9ee061a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff70ddfd7096ad6aad0b485b480abe06f32d6d8c7b628980cfab030a229f942b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3e0df999b0e6d4ddb2177cebe8684ce17fe22aad383d32af570d18c65442c18(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e178c549d036fe3c747dd57ce83f09dc3e1139aa5a45f064d8b033701d83a10b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b68c5687fd1424a22503e40a7d6c9569e67d38808a09e5bba601d5eefba7faa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afa025450bd9fb70e44b0bd39da5893fb9aa5d449047780aa2bdd0915dcc5a02(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8889c3599d85d6880eec1df958863b7cbaae4e1a156275eea48ad8946e70332b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdd337a1037eaec0a945260ec37589f59414f1eec0e9956acc4d42bbc34d847f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43112ea62dfd78d3086df29d02ed19aaa74e7ebb23f850e96b5400a2ad93b1fd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ae78a7eee57f820d1f846018dfe6244c5f7dd553e4c639e799a9be5fd53c8a1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4a2c9d6b4f754748148e15a7071b81668fc2b869127af1760e0b2d1d52f9703(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4991d344b9921c5ed0dad29e1f0d35a38293be91f2d57f59603718a219e28834(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d912404d02fad256fb3017951d58e7d96d11f501e37f8532a8059722e473396b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__880391b2e298c9475f1c97db11294f8f64433a984281797dac68c5e646fe43ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d3cbdb44949f2db4c597440ae9929e95ec48551662317ed580fec996427223d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b2e3e35f0f75acc1081f1955d61a0ab7bc239afee695363d560d564f219aa437(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a1cf62e641fc6b01b0f883952a1ae6560b06e2f2ebb87407f2816c53e311bd35(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__545d006bc474fd87dacae7662519b9207ceb0f385e4ba6fd0485c358763db6bf(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__734c0a0a142aed6247f53b0421c022816c6500e6ee75e585b8b680cc44c984f2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f31036bfe08fe717932e90cca8849764749008e93e6f03563f88a43b1f807985(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7987206dcc046bdb01d29fe73bc37f9f91e30a9b5f1cf48138fd3257eaf4d3f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5fe444a144fdd345623ef1482b6029bd70e8113f99df2822a12f4d390962d1ed(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fca9c1ea84fdfa2f0fd284d352155bac35d6912d1c2afce931ffa1d966372201(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d6887a37817fa230953d86172a82608213185b69002bf0b185779d675c90139(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ba45c15fb1c39a3bf398789668b000a608146a3fb37c6670e385e888ed57199(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsHlsGroupSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d193a832796187bb5953d2fe9a927618c4e2fed6b2f46f61899c6b8c2e11c01(
    *,
    destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae019133aa863dc55689471093df3f1c2b69ec8cf4abb3796f729e36bfca77f1(
    *,
    destination_ref_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc3a4004f2e1a32c51431e4633c8eed9932da8f8c82a136cc0e0571e16db7784(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ebf0f27dc84cd2d7e1f7470a8ecebddd3564415d36daa5eb34516acf495dad5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e188d3a707109cebbcc5d2180340e872a38adaa2fb24beee68d74903f448a93(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettingsDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe4ba8f6799a50a4abb8978906afa8a2da3d5e2f8c0f2774f68ae2dd1bc2eed5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5f11e2dadb5f91768caed5222df267cd0ae9b29571e66bfaa7de45419844076(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMediaPackageGroupSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f27f026554ece78ce428dc242f50ded405d4305c49520299ba8adba1d9c6eff7(
    *,
    destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination, typing.Dict[builtins.str, typing.Any]],
    acquisition_point_id: typing.Optional[builtins.str] = None,
    audio_only_timecode_control: typing.Optional[builtins.str] = None,
    certificate_mode: typing.Optional[builtins.str] = None,
    connection_retry_interval: typing.Optional[jsii.Number] = None,
    event_id: typing.Optional[builtins.str] = None,
    event_id_mode: typing.Optional[builtins.str] = None,
    event_stop_behavior: typing.Optional[builtins.str] = None,
    filecache_duration: typing.Optional[jsii.Number] = None,
    fragment_length: typing.Optional[jsii.Number] = None,
    input_loss_action: typing.Optional[builtins.str] = None,
    num_retries: typing.Optional[jsii.Number] = None,
    restart_delay: typing.Optional[jsii.Number] = None,
    segmentation_mode: typing.Optional[builtins.str] = None,
    send_delay_ms: typing.Optional[jsii.Number] = None,
    sparse_track_type: typing.Optional[builtins.str] = None,
    stream_manifest_behavior: typing.Optional[builtins.str] = None,
    timestamp_offset: typing.Optional[builtins.str] = None,
    timestamp_offset_mode: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d091731b65e48b6a20df6fcaaef823a1a57b5b125ee8dab7d3bb54fbe9a28f5(
    *,
    destination_ref_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff180655243ddf118feab7bb04e0268f36e694ffdb744141cb789f35605abfab(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__202cd0463ee42715898ab0477415aba2d61cc886a47890b85b28e22b96d446ab(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7bc27d9b2f584b166e5d0ea4a4861fd4e0b003e6052397d92618ea1861151869(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettingsDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74cb65977858f3ecfcb35075c4efe6afdb8f2a42a63e6b6e4df1ff9441961a6c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__734c08bf1d927114cae2d187b51287f55337a0cc4d5aa7198d75f8e958e63408(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__570b808e87fc3d6123af4960395146e2719feb2b444779b190c9d717fd76252b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c96150e516b31db37cd9340cdb90ff09cc9873b1a7a66e397346510404844423(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__867afaa421f4ab41823a2f74ee97acb9816a3818de1d31ffd28d5ccab4ea3c55(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcd62f951d1c8fff185ce80cf8a5e060a6999f3c5a3a39043ee8cebe67bfc1b4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3329cbb610fa0648b6ed4a6254757bf9a28f57d985016355ddd27d64c29b9b21(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74a4ebac4e0e5ab12c02dab3f803d2e4520acc87786eac7710329a39af2794a7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f46e8b75ee8323ee7879a0f94dbcf6a479f6744815127a7e884ffb814678ce9e(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da86c2a4f011d2175304d1f8a835c1a17bc4b608e5d2be8f700da99ec80b08f8(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__05eea303c6dd2028ec978f9777594c8d9fcd931a0a52ce86f8c86093fe6f7c9c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4114d0847d5da500372e99bc9a8bc34726fe3e8d7ce305c75a095e7604c9a543(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eb55a3008c351bc0471332a63eae106d8e849c4b117f6db09019c4f6473a185a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3d9b6da19b60ec246240c3383741c7287188b9e0ebb826df70ef58a50e3d629(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee27de70cc25f1261bd513489e7b7d888faba2c3eff8a9cc04b9d1bb1d3e405d(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3afd64cd7f77511e728fc5a1f85a28b2a098d4515d0bd0aef824010b458f60d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b19ae9c0fceb3b46d81730c2c7abdd61968e5b1c69ad7c4804a231ff5f3c920(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b02f8710081c5271bd6450a58d7b32b6bcd32000e8cbee0037546523e7bc10ef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__537778cad25b44fd9d629e2faf01489eb01376cac2afbbd097764a95e6aeabce(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f12462a106ad8c9f95467a79597af69eabb6f7c7eebc2a5b971180694efd536(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMsSmoothGroupSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62e5b022861096929f138e5103c33c5081f8b1ecbfc9e52e0c97db3d8c9a42d0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1226769bc3d23d11d194f9f83ad1dbfa4739fe1e10a7124a672f30d183d16207(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsMultiplexGroupSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__607391768da9f554ec289c926e8d309d99738979779e65e05f6108be74e3f1dc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3553ccea4c75bf5af224fda66799560e1e37e0d66a1dfebf68dd5f6918282218(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsArchiveGroupSettings, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__846ec298a6b0c76194d9b516d6c6b9839879312a8eaeb3a57d7ab69a0de99a5a(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__155a21b7da33baa08c142846386a32f141271d13d1036503902aef6d47806d45(
    *,
    ad_markers: typing.Optional[typing.Sequence[builtins.str]] = None,
    authentication_scheme: typing.Optional[builtins.str] = None,
    cache_full_behavior: typing.Optional[builtins.str] = None,
    cache_length: typing.Optional[jsii.Number] = None,
    caption_data: typing.Optional[builtins.str] = None,
    input_loss_action: typing.Optional[builtins.str] = None,
    restart_delay: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24c0e1e8ebf41f8de0572547773689cf8c24ff184eef4676d91dcb101a59485f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ad926fd2bb8c3c84f660a0cf597fa07b60a97c18413b4cf6d77d76918260eb3(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31e52da84299d580b5a52c4cd08f6a559133d9fe4f18ba877fd85e5d12f85c58(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a89d280cc1e26fcec658f14019178ebdab40d94eb16699d06143a2aaf67c621a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__716db227caa0f366244c78be7b8ecadf95b22324f9446092492fa49d153bbe05(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93e6d2cdf9331260dc7b6dfccc872542e9a0775faca6f112630154b229bd8137(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ab7793553bd7d375a29ea67ca3f089791b3c15d6f6531d1bbd224a4466ddabe(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef270cbf065f937d649fc67586c9af05fe63fffa04c88d753904784056589ea5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8127d0be4d3860b457fe9eb630067c064252afe137788c3b43597d1601e19e73(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsRtmpGroupSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3be8365ff6eed70ce175026f4c0a29eed5b2e773a0eccebf037a7006656cf0b(
    *,
    input_loss_action: typing.Optional[builtins.str] = None,
    timed_metadata_id3_frame: typing.Optional[builtins.str] = None,
    timed_metadata_id3_period: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ade462389972f10a31ea98edc254eb95db4130444856af65e47bd0b1659d6cf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5a13b877fae6ada499aeac1393a3748b8c99ab93f1999bec71fe7b128c8649b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__20e6e25b352fbe8a51af7ff2e507908bbdabccccafee7d6b93c7a0abed3249f6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__411617ca731152de2f71e2a2a5d10043a4966930cd5cb2fed2e57e340a447f33(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9f36c734d56c4e634070a72c14011f66c5755cc292376213c5d7b93696652b8(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputGroupSettingsUdpGroupSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__54632b84292704fe7cec36266814d471b5b6c9e24446860bbefc13b6da6c4476(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__86c72399fc003535426df8bc70ad77b4ec1a7add1b5e1d66327679b1f74bd923(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputs, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d678ab4eb056b08f2d74d3f22a8dc9d0117006f447e1cc50fa3f663ecb2b5a97(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b82995d51effa78a7aea7216aa420d65f1d3d2666d328ea6b08263e4316ad34d(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroups]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0693c827bce0b71e4bd85ec0eb946287e5d12918bdcc24fcd766af7058343d8c(
    *,
    output_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings, typing.Dict[builtins.str, typing.Any]],
    audio_description_names: typing.Optional[typing.Sequence[builtins.str]] = None,
    caption_description_names: typing.Optional[typing.Sequence[builtins.str]] = None,
    output_name: typing.Optional[builtins.str] = None,
    video_description_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee6a451bb0d4bc8162a885fffc7464e7e6a95244bf0cd3d55b43510438001429(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0ce3f2343efb3cd66e6aef060ed9b361e1dcaf712d6638c92202d02dfb65389(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4af6e7934109bd0cf9bcb1ffb3d1f9f4a578bae892aa6cf89e42f3ddbaa56527(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__069d075a5f6c8d04fa235e9357c5f56e57ed0a922af2c83c264d8973c3ed3d9b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2bde817d563754204013192b4d6cd8b006d3c762fc480d71c6f447a773dd16b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__524c959312a7b396b00cf342c11f480da91ce2d72bc21d0536c7646d2d2ad66e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsOutputGroupsOutputs]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d0fe5a0954f8d884e38808c523d203ab0d5a40ccfbac8e5320d523f91acf165(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0c1df947fe848ed51ff7e46f158e0cd1acdafe151e6aad892eff87f572ba117(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83a1958dd625f7937e464f66d7a629c817f9cd0e5ff2eb505a343bb3bbd58889(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f499281ec8fb97d85e918ad9b816f1fefed7265ebe3aee93db2bbd7f334e18a1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5be0479bdaf93c01418c642e8e6ad2a6565c9ad0102e6b2e03785b41cf8ee0e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f718355059da1d35d3480074066f03794f99a1ea7595b0f5a52aa0dd855cedd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsOutputGroupsOutputs]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1abe05aad53cddb828528a340338834b09b0aaeaa4d604c2c2a082d20403d250(
    *,
    archive_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    frame_capture_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    hls_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    media_package_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    ms_smooth_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    multiplex_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    rtmp_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    udp_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e82837ecae4f5c9e6949c0662db603d2afa97d53daea0537566c21ad919ca3d(
    *,
    container_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    extension: typing.Optional[builtins.str] = None,
    name_modifier: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__449f3eb52669f544eb815372b72652769984a797ee847c0131b94e1b331243d2(
    *,
    m2_ts_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    raw_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aabac85aba1829eabb74c06171babc82d9d78b1b02a5e31a2e9f1f41fe6dbf45(
    *,
    absent_input_audio_behavior: typing.Optional[builtins.str] = None,
    arib: typing.Optional[builtins.str] = None,
    arib_captions_pid: typing.Optional[builtins.str] = None,
    arib_captions_pid_control: typing.Optional[builtins.str] = None,
    audio_buffer_model: typing.Optional[builtins.str] = None,
    audio_frames_per_pes: typing.Optional[jsii.Number] = None,
    audio_pids: typing.Optional[builtins.str] = None,
    audio_stream_type: typing.Optional[builtins.str] = None,
    bitrate: typing.Optional[jsii.Number] = None,
    buffer_model: typing.Optional[builtins.str] = None,
    cc_descriptor: typing.Optional[builtins.str] = None,
    dvb_nit_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dvb_sdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dvb_sub_pids: typing.Optional[builtins.str] = None,
    dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dvb_teletext_pid: typing.Optional[builtins.str] = None,
    ebif: typing.Optional[builtins.str] = None,
    ebp_audio_interval: typing.Optional[builtins.str] = None,
    ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
    ebp_placement: typing.Optional[builtins.str] = None,
    ecm_pid: typing.Optional[builtins.str] = None,
    es_rate_in_pes: typing.Optional[builtins.str] = None,
    etv_platform_pid: typing.Optional[builtins.str] = None,
    etv_signal_pid: typing.Optional[builtins.str] = None,
    fragment_time: typing.Optional[jsii.Number] = None,
    klv: typing.Optional[builtins.str] = None,
    klv_data_pids: typing.Optional[builtins.str] = None,
    nielsen_id3_behavior: typing.Optional[builtins.str] = None,
    null_packet_bitrate: typing.Optional[jsii.Number] = None,
    pat_interval: typing.Optional[jsii.Number] = None,
    pcr_control: typing.Optional[builtins.str] = None,
    pcr_period: typing.Optional[jsii.Number] = None,
    pcr_pid: typing.Optional[builtins.str] = None,
    pmt_interval: typing.Optional[jsii.Number] = None,
    pmt_pid: typing.Optional[builtins.str] = None,
    program_num: typing.Optional[jsii.Number] = None,
    rate_mode: typing.Optional[builtins.str] = None,
    scte27_pids: typing.Optional[builtins.str] = None,
    scte35_control: typing.Optional[builtins.str] = None,
    scte35_pid: typing.Optional[builtins.str] = None,
    segmentation_markers: typing.Optional[builtins.str] = None,
    segmentation_style: typing.Optional[builtins.str] = None,
    segmentation_time: typing.Optional[jsii.Number] = None,
    timed_metadata_behavior: typing.Optional[builtins.str] = None,
    timed_metadata_pid: typing.Optional[builtins.str] = None,
    transport_stream_id: typing.Optional[jsii.Number] = None,
    video_pid: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06d7c8fa5a086eef9ce3dd521d41d1426f8d850217de339262582152fd84d174(
    *,
    network_id: jsii.Number,
    network_name: builtins.str,
    rep_interval: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48ade4f7cd3d2bbcc23c015ebf1a3e29c4339dc5d0b84b4169ee4945f3cc907d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f686fd0f445a5ab7f31bec52826318ac0209aca3a977f376e0ea4d0120c515a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14b267a48a5028c4c09ffc0de2170f172e5d11a292f5de51400a8050d27ac3eb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63165dea76368127c6addaace41b4844c08c7f64fc98c039d2c723a1b2f73ab0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__903ef858b7a67285d66187fa75089a3d4171b976a6c90edfeaaf21427a06e867(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f34ed21b85c9c578bf01be79307802c610bb47c652ba6843ab0cdd34cb1ee29f(
    *,
    output_sdt: typing.Optional[builtins.str] = None,
    rep_interval: typing.Optional[jsii.Number] = None,
    service_name: typing.Optional[builtins.str] = None,
    service_provider_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8441c2e01db2a70d1264c054b357d69998db7ffe301f6d9d112d85721707f3c3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b194757f47e22370e2133c8bff961bdb17ff1341d257e9c20c0157300914cb7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48f734b0d623431a3db3e91e21b938f204f3e5f3014db49f1fbc2224ae1462d1(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__684ebf22ffcc8d0a562ab060a81e6d675789fee5d8b5ff453a7041fc2085d814(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1cad02ed5cc5c89c31e4c7400caa964ef2b50f9d408fa02485424bdca33b0fb9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c708e76fdae55d8850bb79c4a344e2ad26e3d3932e6f28619603cc5ab77cea7c(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bb5897926594730c2938182a58f7b888205341695c2c650a20507fb707d39c7(
    *,
    rep_interval: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c033eb49abab0c986588c4f9dae5c9b03d23a5431798a515ab1506c12df27d2e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7fb30ef912893fd5f11bec60d3039ac70e77232bf181de8c4c5672e25213f84(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14283c53b0bf2477392b52d677fa2786f03a739e8b18f44fb6d486f83260efe5(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__054b43b80d9c2b8a7a634d4356087b384c98bf855399d9c2ca7b495ecbf838f1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aee26335b0a4786104646de14ee82151e9d707047844348feedf67c1b09b2452(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__256b5e081d62c5ad92fff9c0f7d5228a9653f33f9f546669d3665d4e451e0c5c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__915bf0e963d437a66888b67631b5cde246ae3825a1d49c2c56921dfde5c1144d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9f0ef805d15adba3914048b82623c4654cc7a77b891a0eb6bf7ace644689c98(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ad938b49b31ba4999fadf92ad6ad2b5174a89443e73662caa3ccc3c8a92c9d3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fece82ebb8e96df9a5e68c0e99b1caabcd568a424e985254a4157f54ed49daa8(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9cf223850b2a4992518b4bfff8eeeee5a681d21b6fa0c506daad029cf2716f4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e1e80433316c4f850ce27280e1ef7f6d3be78d773ddbe754f5db472d2a38a7f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__232ef8bc9c14481bea2c72cf195f65397951e70b4fb56278866e9684bd9090aa(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4cdb7bfbf30d4202422eec02210ae530ccad61e5fe2eba4bcf0e09e4d6d64412(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bed41206f50fd848721deb6c1f6b06392a6c3f37c41b0a474fc2dfda33138db(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b87e5e41d3bf89cb6ceece047c0c7c015808b7956ab191f8b6fe7d2bfb5d49ce(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__590fcc4cdb1edd2c3e24d6cb97f93e8cb8228ff2fa31ed445ba4637af224d301(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c74cbf04eb1e6e3d0d1885b6fc504a30d65c227e98d1741c1b4c9113972437f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__573634107c7330bae7d1e51e0a2eabead7342fb3dc5e763e3165847b1b170cfc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__751ea88af1b2ee2869506a895998b045bf5f55c3d55f52d512e1ad54538780f6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f72e607f0da83a74afe7fdbe2029ea65687659465cdeebdc64ee177cd69b60f1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__522a07da9533991879a5c8fbfbf6b3b6c216ec031ec4f3c0db88643bbc72da40(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f09f790b3cbe7f9d519e9fc7abc334efffeaec90bcb129fa3b0245048557bdc2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__969df866bb8fc994b39e419cc75c85fd5538af6a2164628478a2fcafed822dde(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__73d76fb0eed216115ae8249dede918ad72baf31f3eadda79c172ec22371bc656(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c49e238bee77ee6768d50d7a7d6b2638397a357a799dfab5c070a4e1f048ae69(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4aa2884d2a78ca80d40aef2927ac0da3ab757921c6d914485829def2d5b33cef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e6b61b1441ccc4e9c5190f173c65a175132e843cce0ae6afa3fb272ebea5e847(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1847960708b77f432cc6ecd9f8fcf75636d656b08636cb99cfdd4879feadc193(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3287f87c74f61247e56872dcd9002aff65d92ff0a88f8779e073303aac9e4c11(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd2e5b25fb94bb89456c1c4ea153b8c35165abe8b9955e80add11d4dfcdfe693(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d738284fb311c5f84485accce660b81f7ccc5086febcbca11461530a3ee7147d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa27efcef36a7ad9db7be7114bf8930c0fde262b3005270d6220dd0bec4a6103(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db7f0388d8e663d3336874b017b0a9193b3766f05fe2e746b9cbad43fd25242b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bdb11bd1f5ef3180a7ae893c93de140a6bde85c553bf6a87e75af26f410869ac(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59f6a0d756f7e8022ae0b6a7a28f100eeb4f5ecfb43b21f4a969cc249f25a34c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__94574187fb4d797659bf320aeec78c289b0c455582da5d86481c70673eeb254f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e962cd80a75aa8ee69fe1b61ef1c19e9906e54affb136c8815f3bee8ab2bb482(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__152480e390b782758b4270f8af92957126b594f58c5ee2ed26897768fb18a7c3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5e6382de26cb25e02f97134c9720d98cd512ec5af8fa0c3237669990d00f440c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__187210b056b2fed622b490cfcf29d8e1d3642c44daf2c3d71a387a093c81428c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__40e33913c0595a444d19ad18d34a933b1b1734a8f04fdf91d9d8c9cb8468867c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d3c99fc2c3441fd12233a913212b3fe56dc561b44d11e08a4e9e07c94a84873(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fbef52da38bf9973099a497825d59011962b9b46fb58717a38064892b72a14ee(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4afa40c10894e80d8d4c970858c4936bcaccba99ae9d6d30dd79ab9da2c92a4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd30c91c0e4d126e6c2139ef5c2ac0cd85bdba6a7cbf9923ff3fa1dad7ff76fc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9538d9b594c7e2bc3145733164799cf70b8b5a497b68cf97c79e5a8328c71582(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec0d5450a3ec2ef92e04f714735771de04ca026e4b7b498d67f11fdcf1c00c4c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ba8eae9b2633194df41625858f2c38d0a57d2f74fcc33572be74e387d1e1656(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsM2TsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7bd1e1c2d6d1636690ca95e5b68d63997bb6aeeff36159e5d45db0761dacf991(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a2cfbe973de987d8e080f527b1863464505b6ce14e94674c61705b7d6eb3dda(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9cf58f955fae9771db1ba7b782c7f2d7efc78782a615c4e92260014d6a3dc907(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb7b866ccdd0ad4d22d97ca7cf3ce5f5ab01e192a917320e5e2a28c5b7016214(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettingsContainerSettingsRawSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c48617dd0bb46746891b96ef8c16150f1c4acedb101654c1f065ca5e878f3a7d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8c8aaeb56afd08506dbe8b15bf94316a900da593ff99af5fe7d25d0787deef8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f5b11ce74af20418fb335982fdd94417b2a7f24943d10e1fbee1ebe2d1588a6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8374c539cecb38a6530fc78745988cf4e78b29e377ec04662dc759c256455b25(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsArchiveOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52bd4ad12c50e9c67a116b5a048a515cb839f9287d0e3277c7689cec0f4a0a42(
    *,
    name_modifier: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3ae4f9aebe866eef279d31c74b9761a953c45bdea21245b4591ed574b9436f8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07db487bd69b3837ea4aaf592eb922ffb6ccfd4a0a80eee6023cfb999f81e0f6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57facc2e53b688f909a9e6fde92d6794ae1328f8ab529db7d59caa51754e4636(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsFrameCaptureOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49f36407fa4103e97bded639a1bc5f4b6f234012ab2830e6591bc56d9f608792(
    *,
    hls_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings, typing.Dict[builtins.str, typing.Any]],
    h265_packaging_type: typing.Optional[builtins.str] = None,
    name_modifier: typing.Optional[builtins.str] = None,
    segment_modifier: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__33d27d1c5940e97a07417fa05ee86f01775a722d8910f7f8dd2cf938c0c92932(
    *,
    audio_only_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    fmp4_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    frame_capture_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    standard_hls_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00bee2fc74844a7a2aa0ab27efa0860d297ff9d6e3be49b0ef2198a29ed51440(
    *,
    audio_group_id: typing.Optional[builtins.str] = None,
    audio_only_image: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage, typing.Dict[builtins.str, typing.Any]]] = None,
    audio_track_type: typing.Optional[builtins.str] = None,
    segment_type: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8dadd426c241e08309967bae721bc636428270f562bc67a1e739468811f6e486(
    *,
    uri: builtins.str,
    password_param: typing.Optional[builtins.str] = None,
    username: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__107d06e3f642bb3dfdc5fe4283399cbd24e1bbc651c08622c9b10dc360a85278(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6518bb215f2e874286d0211fe7eed0f8a54f3ac5961c5acc682dc07501b17852(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89a4ce1aad315df9922fd7da09fd63bcce2700afbe27ddefd68078647716a78c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef8fca0edc72379c12a2d8405732e8e65a58221fe44110f51b99d0f2cb19cd16(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__654bb18c23a8ed6f09c45ddf4fe81d3198262920c49e0873ffe2244c48dd01b0(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettingsAudioOnlyImage],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac7983927d6e05bb2bb901cc8081100b1e3bf7ecc636e49ca0046cd34dfe7a54(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__087084e2e754108acf78f7248f1d38eb11b6cd8d11da7f5dbac31f4de79abff8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96da34ab54e44049c5e9480d4b9128b9c6fe9dc791a18f2b660e890dfdc1e257(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa7caf28722781cc1efd3b9d873c2560517bdc4d1b3e07856d1d6d13b691a6b2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e8819a670d9210e148891007df795a6193cce224a9ab35f2b808c1a7cceb2fe8(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsAudioOnlyHlsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f62bd94492dd2285d4bf0d463d9a549ee8afed0c46063d1bf1ae5813d83f3a7b(
    *,
    audio_rendition_sets: typing.Optional[builtins.str] = None,
    nielsen_id3_behavior: typing.Optional[builtins.str] = None,
    timed_metadata_behavior: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc4d9209f52ae3caf01bd6eacbcf4207b4a9bdaa82311314ec1c891735383f97(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__30868bfe86aecf6855cc46d6705b0aa8247edb9b34d7795e0751d470fd63cae6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9e00a96ff21a1f1e11df517982f0a4243416310b761c7238052ec42c57ff9c6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c694eeba4d57191d94e97b1a312eb6a04b6699ca26e0e85da924dc5f7e78c622(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3d42c3b49a5bba38aca8ac4ddfd85ea47f1d1fbd2b480cfbcb90c17c787cce1(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFmp4HlsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93eeb5be6564a3b2389a3f6e6a7e2b4141d18432f783d50c27ea98cc706d947f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69c8133f9087a31fa818e1060e88b7ff21a6678494282dca436e0e591e3886c6(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsFrameCaptureHlsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8850b2df0b4d1d6a28afcc6eb999dd3ca35c329694a02cc9d26c51d7af662122(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__acdc6355193bbb096f54dae3aee620e9c10ed252f21e0c51f6021ec815987efd(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__505ea726527c76de4ad31f3771a0884c65aeeb92e02ce34483b1f14cef7785f7(
    *,
    m3_u8_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings, typing.Dict[builtins.str, typing.Any]],
    audio_rendition_sets: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fe461a03b820da35fcafc4349e242e220f02a9d115c78c1d43c882e444a696f(
    *,
    audio_frames_per_pes: typing.Optional[jsii.Number] = None,
    audio_pids: typing.Optional[builtins.str] = None,
    ecm_pid: typing.Optional[builtins.str] = None,
    nielsen_id3_behavior: typing.Optional[builtins.str] = None,
    pat_interval: typing.Optional[jsii.Number] = None,
    pcr_control: typing.Optional[builtins.str] = None,
    pcr_period: typing.Optional[jsii.Number] = None,
    pcr_pid: typing.Optional[builtins.str] = None,
    pmt_interval: typing.Optional[jsii.Number] = None,
    pmt_pid: typing.Optional[builtins.str] = None,
    program_num: typing.Optional[jsii.Number] = None,
    scte35_behavior: typing.Optional[builtins.str] = None,
    scte35_pid: typing.Optional[builtins.str] = None,
    timed_metadata_behavior: typing.Optional[builtins.str] = None,
    timed_metadata_pid: typing.Optional[builtins.str] = None,
    transport_stream_id: typing.Optional[jsii.Number] = None,
    video_pid: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d732f86196b41c0671547f94840fab35a5cadf137002ddb8a6dfda16aee7fbf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b4231beffd158c70b82d83bdaf5789afa522c905b8cc2770952ce336c0190c9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f532189fea146143e6b0d19c71fe276b9dff2b4469364b4f167f52f36da0d8ef(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf34d6dc46b152e8033b5349f5a5c5f12018d8a599de1704ed9b27d7dff90fb4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9cc9ff03f9caec3cadcb23783247e1fbadf5e765398f8f9d8632f93027ed4a6a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7baefe9065a258361bbf02f5ca493da1a87dfb3308194dc6043256cbeea39ca6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f88ed2735f6985f5cd861945eba341b0010aadd0fc1b96a831ac3889077e651(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb23e8bcd18bd6cf7c1b58acc7137b8e7e69d23630ee5f429ef05096529249b4(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d880e7feab6eb0e7fc7c2f6fb1307dfb00a3a6c203f2c15a3d335f8e454ecc59(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16601d8d8273b8b1ff213b4d88977e3cb317468c01644c46c1f850ef9fd24a67(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16899104a0c04ea2613107bef951b28291b8f13dd17e280810348164c2831c36(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58c16b98159329ec59c0ee5a66b875a4a0068423ce7574bb41ed778d8670baa7(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0812279eb99df43670aefe94e88c73e0f9750c80ac90dfcd040b1ce1a7f5c45(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__204fd7e348bfc94f47b372f236f08d706ac16f17233859735a0fda6cccbded1b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c097911c0083fe6a47407064f10005268df3767d992bec37162fa2cbf8bbc953(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68cd48a4631b12d49bb7518a59e6d72ff97c4dba914bf453177c96c61a629124(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6502014b27a0e2e2a4e371c2af8589f1dd59a163eb00fe6d2bf802ef44c4944(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc2a9faa8832a97f7bb1798e644a73c6219a165959aa6ddb96cbba5f664bdac6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4f5c6e44d5e46088d33eb0070244fd4b2361cee5f1485115582ddd56c87e7ed8(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettingsM3U8Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a025cd0199179692c492b356dfbcf296fa5cb46a56d2ffa8c1aee6b31a1f2086(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fd9bb141edaaf7bfa3c50d8663bd3645a18cf39ed429e9697083b6a9141a424(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__035248206c4a49502798de5a812ebf0748bf57a90a6f147ed1d45d6e8c693832(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettingsHlsSettingsStandardHlsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2d2242b072a30ca1ddcedfe13691826042d0d36cf649f7ecc7d4305a0fdfd9f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4ab6194529cec9ae9831bed6ed5df00134967d1f29499f6772774da166e506b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27e3d1ef74a2367f5b4614a91a8377e0b6816837e839a8cdbc613584c7e3b872(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2bf6a1d2e5d20953a336804c6a6b7debe9ce84c6e0410f9bbb2d26e3d9c4f7d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0331e62a56e1c4ab5c3896b46213855f114484c57625d04f5d369859ac51ae6b(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsHlsOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c1ecb59bbbcc18b56af031cd793a38b21427125fbb7d6f0ec30683666bdb1dc(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe25285ff98273cbdf4214f409e11b6fc8ea70bf60af151151a591c9e7b20ce6(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMediaPackageOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0275a37c37c003c974be01bfacc7d691bbf14ba26bc68ab71fecd01919ebce8e(
    *,
    h265_packaging_type: typing.Optional[builtins.str] = None,
    name_modifier: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b67f4043251862273ae0a8911c79895fdbedceef11f39183afb764ab2c17f48b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1342751628346947cb530565d3a5ab00c0cb9fec9a5d0afb041d4e3e3f8fe6b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cca28090746d22f52096e36a8e6d822ef30317c19cdb6155996ccce585e57821(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb4fab9eea92bbd57951a1c53fc9858863576d329401600691e16309b1dc7725(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMsSmoothOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b9c4c26f8da8b6b2b906d4225e91e319acabb3326054f15cd38a28a45c0edfb(
    *,
    destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination, typing.Dict[builtins.str, typing.Any]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__072dc5854640e1ae8abecdb4db98cf160a20ab139adfdcff965711a587ae85dc(
    *,
    destination_ref_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__40a90d8c2f09eb65072cc62988eb66a4535e1b7388e210766d490f5f3ed06e33(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9aeefdcb0836540100db8e198d166f6258ec9032fc964dd70cd27b248eb3284c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b7d204a8ad9cb3b747b74a02eee00a986a015dc2d8401864d2ae196152d4522(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettingsDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c73475aa07075e9404fb75c358242229a936359d17534b8e14824744c55ff37a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a57e30f78a9e340909956693d57787a915e3a2167852abf7ae4fb27c2bc8d941(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsMultiplexOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b2fb98ea3314366d2edb8c8e91d73793d82f348c97421b2b42c3e705bcbf3b8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65ce5ed755fa805339ac7cd59c0debd184f2b6996c0f2039999c7ff6bb70b40a(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a3d01378ec495a8cc4b99fb11f06ab1a6b89293db19a19d219318e945537817(
    *,
    destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination, typing.Dict[builtins.str, typing.Any]],
    certificate_mode: typing.Optional[builtins.str] = None,
    connection_retry_interval: typing.Optional[jsii.Number] = None,
    num_retries: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a92de9ee230f91be96fbcd14513c8131ff18f59627a3c8acc83506758cd43ef(
    *,
    destination_ref_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e087bf3302b735f36b76daaac8629b9f5e3e7c0920b3dfc2e36d57f021edac1e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3b0a542197404c57f69069ea1fd11663c2d7e4ea1e49e1f101f13ee8acca7c8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1847d237831afcd249b5a918fbdf8b14f03a0f4addbf1e1c118526c1424cf16f(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettingsDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__edb8e563f7fcbe6c7e9abf043091db0432e8222c6d7d53a08d5343dfc5c0c055(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df5148aa857709fd39e86034180ebdb2bf07878c39a7b4b9bbe6196c4b2d5104(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b9676bb5141538a23caca7fd6a5ce1e4b237def49aa2376b5fb0529fc1b86991(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8eb863172ce8577c6d5ee541f7c7e4bcbd55f6d1e3b81bbdd8aa2b2d62809093(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea40e3e28aed6ed4d8f735ba29248bcc8ba10de62e9ed6798fa057a3131438f0(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsRtmpOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99298a586749301018091ec4e43011527a4a3ea102790139922e69cbd1269f44(
    *,
    container_settings: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings, typing.Dict[builtins.str, typing.Any]],
    destination: typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination, typing.Dict[builtins.str, typing.Any]],
    buffer_msec: typing.Optional[jsii.Number] = None,
    fec_output_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7dd2b6b8365388e8d58e15bd7945b90860e51c1e269258fabfeee58734728318(
    *,
    m2_ts_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de362bda90236e4c12bfa55069fe4ebc3f1e1014648025e3dc22ac157bc5113f(
    *,
    absent_input_audio_behavior: typing.Optional[builtins.str] = None,
    arib: typing.Optional[builtins.str] = None,
    arib_captions_pid: typing.Optional[builtins.str] = None,
    arib_captions_pid_control: typing.Optional[builtins.str] = None,
    audio_buffer_model: typing.Optional[builtins.str] = None,
    audio_frames_per_pes: typing.Optional[jsii.Number] = None,
    audio_pids: typing.Optional[builtins.str] = None,
    audio_stream_type: typing.Optional[builtins.str] = None,
    bitrate: typing.Optional[jsii.Number] = None,
    buffer_model: typing.Optional[builtins.str] = None,
    cc_descriptor: typing.Optional[builtins.str] = None,
    dvb_nit_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dvb_sdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dvb_sub_pids: typing.Optional[builtins.str] = None,
    dvb_tdt_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dvb_teletext_pid: typing.Optional[builtins.str] = None,
    ebif: typing.Optional[builtins.str] = None,
    ebp_audio_interval: typing.Optional[builtins.str] = None,
    ebp_lookahead_ms: typing.Optional[jsii.Number] = None,
    ebp_placement: typing.Optional[builtins.str] = None,
    ecm_pid: typing.Optional[builtins.str] = None,
    es_rate_in_pes: typing.Optional[builtins.str] = None,
    etv_platform_pid: typing.Optional[builtins.str] = None,
    etv_signal_pid: typing.Optional[builtins.str] = None,
    fragment_time: typing.Optional[jsii.Number] = None,
    klv: typing.Optional[builtins.str] = None,
    klv_data_pids: typing.Optional[builtins.str] = None,
    nielsen_id3_behavior: typing.Optional[builtins.str] = None,
    null_packet_bitrate: typing.Optional[jsii.Number] = None,
    pat_interval: typing.Optional[jsii.Number] = None,
    pcr_control: typing.Optional[builtins.str] = None,
    pcr_period: typing.Optional[jsii.Number] = None,
    pcr_pid: typing.Optional[builtins.str] = None,
    pmt_interval: typing.Optional[jsii.Number] = None,
    pmt_pid: typing.Optional[builtins.str] = None,
    program_num: typing.Optional[jsii.Number] = None,
    rate_mode: typing.Optional[builtins.str] = None,
    scte27_pids: typing.Optional[builtins.str] = None,
    scte35_control: typing.Optional[builtins.str] = None,
    scte35_pid: typing.Optional[builtins.str] = None,
    segmentation_markers: typing.Optional[builtins.str] = None,
    segmentation_style: typing.Optional[builtins.str] = None,
    segmentation_time: typing.Optional[jsii.Number] = None,
    timed_metadata_behavior: typing.Optional[builtins.str] = None,
    timed_metadata_pid: typing.Optional[builtins.str] = None,
    transport_stream_id: typing.Optional[jsii.Number] = None,
    video_pid: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3bb082e816be0aea5c4958250ce7232a1b517f9a4a6552efc59dad531429d1a(
    *,
    network_id: jsii.Number,
    network_name: builtins.str,
    rep_interval: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__51b228249d43bf1a9eb63bf1ab6487c9a3d731062a7a0fb1bef2ea39feaecd1a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f12de739ac1f8b23e5ba95feefbaf200a4e6a8b844da23347801639c197acee(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c22a761a3973258e1fd8a2a9a397e32f7bf244c2b510b23be04bfd4e4ad5659d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1997326dbd7ac72604bd1e9b9c06b1cf7ab64ffc499abf60fdd7f1c4f63af967(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__134077a70c0b0bab3b498a9df550107ddab53cfc3a73d12a3600ad28c2c7f9a1(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbNitSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84cea417afa48eb04ac59523e6f306eefedcca10d824c253cfe60fdb40c69c73(
    *,
    output_sdt: typing.Optional[builtins.str] = None,
    rep_interval: typing.Optional[jsii.Number] = None,
    service_name: typing.Optional[builtins.str] = None,
    service_provider_name: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__585a33bb2e749279ad89c2b0bbc75a08693f650ee8b1fd6956f60016c273a3d0(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7f700ebae4cdc416a656cfd737a2149671949a415d26f20c5511979823cfe20(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e9650e9c631b83f805acc5571e719436c8c58c7132812f3e373d92b7ff5ca1ad(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0d611add899628a387421282be1e73150857110edcf4db3281c4b4f8e356578(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cdafb2800c6afdbfe7fcf9828cdb02c17afce8dd28d68f1897783fde75188dad(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1921ca21fe40e03c2399d10d7e81406a9388fe4d95938dc4566e52eb8d5afa6(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbSdtSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7931fb0830c916ceb138411454a83cb7a3d260e64e56d37dad7be0802ffb6447(
    *,
    rep_interval: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__803fcf3294aa965af1038f7fc6e07c4669cc9b0931abe080a2b6c8d4dcb8ac81(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27213b76c1c7486bca18e6c23ec7eadce070f8959fbf44cea537f071b134d7d6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ca33f5e09c0235a9bc6df85f63ae660a423528c4b9032aea240518cd18cf8d7(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettingsDvbTdtSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff6ea4b1ec30dc1ef8199095ccdb09dd51583401941d2d28f340aa03688da6e1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd06baf3b60a36a9f3f2ae4990ad656630021979f422c2e5e532223c29fd16b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82bda8c9169b61d79b3f4232d08d01ca4272f1951d07aef0e3d6559b4fbcfaf5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4c72a219337768856388c02261d4fca3db28b4a0edfa02bae1ab2b48fd9bfb7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e38087c79df867008c6633af854f990b33b3f9f836d0c30fcc2d647f4d58c54(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__baef4cb75f1966b629e8ebdef9b78c5d561ea5301731c4b220ccb1786207efe0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__516a3b24306ff5cb1bce1a78fa12de2c44f87fc1c17fe9662ae36c4247d9eade(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8f002a2ba3e8d41d4c52312eab8a83b9a8139b4f548f154d9a54abfbb3f5d9e1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__492faa3a472aa61e79e77d869cf6ac96e02a86d3b5f5a94daf0533c9dcc04468(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d7911e1b36efcb58195d0164152324e4ae187043370b038a64a9bc1b3cf3ee0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e66a031fbe956dad1c2ecb2c3a9335ef0d96b78d0fc589c2f3071e8f0cbc4c3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f839704cddf38b6cda2a22300c45cfb49fe9ae158305c9f830b6e8058f3add9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1c46556d5d42e2629e542484975218e5313e7b8ec40bc1b63cfd32086e862de(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f34e29301b8b9c00aa67449a3ede2c93dbc50988e83794c6dc56da6b32cf55ed(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca1da46eb67189a62ed7ad2f946270003904751cfb098222dfd273f77b60a791(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d4b5d92f93abd14b456d85a7ec615f5454b83e763be704341aa46446630cec3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75aec7c4703f02e7ec5eb229687a4351681a2613bb2e82d81fc64766669694b2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__102695b0be65ea6a9ae81fe3271bf2e6344e79567dbb3da35e66b573ba8f0983(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f3677c20218c675d9edfcc8c75e37ae7aad4559b9483539f0a8204e77ef07eda(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__90878f46c992a9ca5a95cf7ded50828dcdbd51b6260350f1aa11ea9402ae467f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fcfe80c43ab3895a1e851ed5e0f1deb862c40955410d74df8009f5cb47eb817b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c613f79b4d167eba2315e38f04ff8811dd7b7f09aff348285d394219f540534c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c42793fa2e03807f4ef3a2e8d8a395ef107d16a85f010d0ff7881904daf19572(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e5e98ce0b0fd62a5831ce5e8ca1112caec2b05e5b63e0a805ab2f6779c4a848(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13322a0d69788c9d497e6eae345088e54e76703faf57458f2dd39daa8bd5fc6f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ea6d44521debd67ec7c2fc0a8c0ec53ff41b98dc5339679aa75daa170f7003e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f9e2320efd95a9d02dcef047bd2735724d829fc04ca9d9663daa4d66093999de(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a01f5f168d08636f36f7adf71f74384950694fba8ea798fbc4599b8865914a7f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bec2f828d7fccf8d4bad57773d2c81a54947c064a89b5b494e9b54304df93191(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__42d6ed3c518f93611f51ed533615756dff678ed1aa715acdd4b93ed9c7ff658b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24a02abc2c3ec7e1cede2c459baafbbe63a5744dde46b63526771da5131e9f27(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ec6b29c70bb7ba47d60e1e95a5ef0b2d901dd9d4820463ccaeea76ac81646546(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__728d25e9bb97b3f72a54055320cea2789d56c5d53680e8c5f596f3b5a555de8c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f18321fcddd3c5fd5b691b9ca105c0410cb8edb689c671af232c1087f620b541(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d2538e68ca87a2128fc3ae4f675f19e4ad8625d4b6053ac890698bfd7ed936f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a19c1ec46916864ba1679d40fa76652feb0c2ac14ee4c7518dcbc099adbd624(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__baea3bac566763bdf100773d4414840f2c7bdcba5364307e290c55c77b647e23(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dbc204c8f3c0ffa8474bd823a90520b760b4e004cccae6d5c113a66869316f53(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87c0b30e88bfc2b59f9ebe0a030c9413ba21fb0c266a42f8fd22fac94436db6a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__098816e34bbd211cc49d481ec3ca770cd53560624b227e80d130b216f10fc87f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0e77600a5dcd0192b4c54d1ff62b6ba04a1b05d881c79a45ca9719cb4a5fc3a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__80e089bd6d4fd36d57f75062ce9c44cf63f00085ef7ea07a249316c6a589c935(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8ed18bab638cb18eddf931ff03f5fbb3f7078f7ea2db9bc570f79b8fc18580d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__444aa605cfa3d338dc811dfa87817a777e091ffc51621a9ffc58ba5ae972d149(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__909b7a864e071288be23b964898bebeb219dfe062c908f9b4217a8d5e84c7271(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2bb71e2c7dffb5cdb22cb9c7e81737814c1c9ae854816948ec27b494b6e4f6c(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettingsM2TsSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98511e6d4ac86e376b5a15c0c4239abba9b6812d37ca508a51e95e31377e0239(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3eb391b7ec74691bc10de92fcc376acdcb9546854d562dc55a570b12e2cfc507(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsContainerSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e633201d440b4485f612723a45bf5b069e56ce0597d526bb85c62701f22539db(
    *,
    destination_ref_id: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17fc7411228a4c5095cea5bfe2c18e0734aad6e362e64bb08d24732379d788c5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9875a851b47071a95a03ec77f90e0ca5cd5d91e2c29555ae750342db19c739a7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8bc568c870eab5401d022b4120b7abe8523a9caf1c7b4c9acd43b05c5ab3f31(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsDestination],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d67f33e819068716e60f37f952d481153e18db4b500eb9b50b1ca69c75f661be(
    *,
    column_depth: typing.Optional[jsii.Number] = None,
    include_fec: typing.Optional[builtins.str] = None,
    row_length: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4acb9d22931580f65e2fd086e82817023f5f285f79abb918e98325330a339d80(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f357fad511653cce00760bd54be22b25fdb19ed1f70f550fd4cf318e05f80a9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ccf232775e8d7df4585c20ea36d2a756e0cc4f3f80cc8493cc60fa6f6081d70(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48936067beb80d14fc5eb888c6c33fcee57016cb87fdc00ded243f9ec67be7a0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21b2148baf7c5b71b7880ae6321d9beca79d4898493d7814a11626f26057d0db(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettingsFecOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d26ba35ed68069454954f6596a4d2a444088e6bbfdf5ee5d4b2b11efdec3e8e7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__36bb7b6a6829f69d7d50bf413b77db0ef1e5b945f617f9448c89979b7cf23478(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e65c9b1b9488d9eeb251f8bcac648462fde6240f1f42a919f7c9be8582c74e18(
    value: typing.Optional[MedialiveChannelEncoderSettingsOutputGroupsOutputsOutputSettingsUdpOutputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e043a31fd34d8be93878cde90e8eba2a1739189bd2b35cb0751f52071f1dcdb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5ab05f828d5640fa420885cbd63bedfbf35bda1cfb70fe320f8ccec94e80ef5(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsAudioDescriptions, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0065e4da6354279458bb99ac1fb30fdd65084bd228b4fcba5d741a32d5ff901(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsCaptionDescriptions, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0a5b387e2c0c2fc22def35df877e01ec7a4542b740c59524ac54fdb9486db36(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsOutputGroups, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98e58b9fbeabe7d6dca896f65e67c77d3da857d1ed2297288b1bc89a67b1c613(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptions, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d20449c3a02e3287bfeddfb1c284d8c629b10e2c78ee6ea6be40bee07551e368(
    value: typing.Optional[MedialiveChannelEncoderSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da41be4e8bc740bcece27a3e1af8c2b7b983d28d0673bb32d6bb3e040dd64196(
    *,
    source: builtins.str,
    sync_threshold: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44e4818f37f82a41ce5f514bc9191de29b2a7aaaea6b827f0500bc5e4cfba884(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b48dd0998bc714c8053b39e2a490d3a64838353db15760db80c7a9b659b5bfe(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e15a836fbad5bb55eb4884a2aec1bf3bdb31dbf2f8555e7926a331841a01d23(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1432542e916eff757d79a293d6c0f6944aed445c1dfa278b71775546b389895d(
    value: typing.Optional[MedialiveChannelEncoderSettingsTimecodeConfig],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0fb64949b0bd417c33775b9b43198b75e92ff93a0a65ad2765045ace7375ad50(
    *,
    name: builtins.str,
    codec_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    height: typing.Optional[jsii.Number] = None,
    respond_to_afd: typing.Optional[builtins.str] = None,
    scaling_behavior: typing.Optional[builtins.str] = None,
    sharpness: typing.Optional[jsii.Number] = None,
    width: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3801c89a67789a54ac4714b377a1982431f598ee93219c6e81d8186c7ef890e2(
    *,
    frame_capture_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    h264_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    h265_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98f3f475f4770c7c721a61c97febbbc0dc7bef99ec8f88e19ba7a4d02c2badb9(
    *,
    capture_interval: typing.Optional[jsii.Number] = None,
    capture_interval_units: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1754bea6e5bb87f405dde68da4c58c37969817ee447e7663dc7ac0818b75ff4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e3c2d49546aea6b937d29eab3b42ee27fbbf5f43f534e662f559c0985fce643(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ce1c2a65c6e068eea5a8dded2d29ba80fe42eabf46ffa0731247b8619d5313f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c5cb31d9b96d5b511bd5bac363ac2f05045ac8b319cb9df164241cbd94f8c0a1(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsFrameCaptureSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a61815a02514f60cbf7bda871b5a4c8a21d2a3c25a720d4063891db92790b31(
    *,
    adaptive_quantization: typing.Optional[builtins.str] = None,
    afd_signaling: typing.Optional[builtins.str] = None,
    bitrate: typing.Optional[jsii.Number] = None,
    buf_fill_pct: typing.Optional[jsii.Number] = None,
    buf_size: typing.Optional[jsii.Number] = None,
    color_metadata: typing.Optional[builtins.str] = None,
    entropy_encoding: typing.Optional[builtins.str] = None,
    filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    fixed_afd: typing.Optional[builtins.str] = None,
    flicker_aq: typing.Optional[builtins.str] = None,
    force_field_pictures: typing.Optional[builtins.str] = None,
    framerate_control: typing.Optional[builtins.str] = None,
    framerate_denominator: typing.Optional[jsii.Number] = None,
    framerate_numerator: typing.Optional[jsii.Number] = None,
    gop_b_reference: typing.Optional[builtins.str] = None,
    gop_closed_cadence: typing.Optional[jsii.Number] = None,
    gop_num_b_frames: typing.Optional[jsii.Number] = None,
    gop_size: typing.Optional[jsii.Number] = None,
    gop_size_units: typing.Optional[builtins.str] = None,
    level: typing.Optional[builtins.str] = None,
    look_ahead_rate_control: typing.Optional[builtins.str] = None,
    max_bitrate: typing.Optional[jsii.Number] = None,
    min_i_interval: typing.Optional[jsii.Number] = None,
    num_ref_frames: typing.Optional[jsii.Number] = None,
    par_control: typing.Optional[builtins.str] = None,
    par_denominator: typing.Optional[jsii.Number] = None,
    par_numerator: typing.Optional[jsii.Number] = None,
    profile: typing.Optional[builtins.str] = None,
    quality_level: typing.Optional[builtins.str] = None,
    qvbr_quality_level: typing.Optional[jsii.Number] = None,
    rate_control_mode: typing.Optional[builtins.str] = None,
    scan_type: typing.Optional[builtins.str] = None,
    scene_change_detect: typing.Optional[builtins.str] = None,
    slices: typing.Optional[jsii.Number] = None,
    softness: typing.Optional[jsii.Number] = None,
    spatial_aq: typing.Optional[builtins.str] = None,
    subgop_length: typing.Optional[builtins.str] = None,
    syntax: typing.Optional[builtins.str] = None,
    temporal_aq: typing.Optional[builtins.str] = None,
    timecode_insertion: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82743d7c4fee465e2243b1351c2cf393244638dbca276ebe8e6dd214c44bbfbc(
    *,
    temporal_filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a2b387f12127c019c0e3699a0f6f4eec813102216da1d8bc73c13d0bde0138f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98bc97ffac30e661fb1c0f05aa17b06fe01e361877200f64bd59e4ee82da6411(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ad32aca8a79082e0ea5f0c8a879819e468a10c0fc9e3e7d7f593ecf3ee45a6d(
    *,
    post_filter_sharpening: typing.Optional[builtins.str] = None,
    strength: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__205a805a4e4a7551bd80e7673a11622ef562227b2b66dabdedc699a7bbd8d046(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e73eb26c66ba42e601485a8c493c9550af4653af3b7bbb7d8a421fff0ba64c8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60b1e43d66366fa8c51b32482b27463d421501b441c8311f388d3ebc37415c9a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c18f0a15dc4268c31ad54fa585abeed8a3d094560fe9bad29efdeb763d45da6(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264SettingsFilterSettingsTemporalFilterSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13df3397a8672c8d8111fb42b2854d991005cd7075461a9441e22c6f61516fb5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3db468156a1a22c701098926f7e9a055ce774aa74c885100db3f98f83cc395ba(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14dbc5b7a57255a75ea9a33b85dec374a9c7660bf6f938da607f58f6c2176788(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__796e5493f995b3d8f3851e7662f92c050104392f2d4cf6d20afa9c33f0772dae(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c0180a6c84e81e18b24fa21a58db6b38234e08bb6e709a53c7fe89022892b4a7(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a99f0ed5210f7f25504aa1718680b8268b4067785ee22a8d2f7a501a322b35d3(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5531c17199cd76d50c3aa88cc117fd71834e7c3ee360d367cf155b54700a42c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__647955c3bdce2073ea1719b323b393b60e236b6ffc568c2eda358435b2781e39(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0cdd7e4285fc632767098a30861184a23b2c56e3cc9d7a2076ff8418e072efb7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f607e15ff8490dc22026eedf751d67e0cbcae9bc0ed7972bd8b1c2638ba09ccd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4150633a1c80600334b5dfb38533bf1b7e3d05983cc09d7cb750647f921f770(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fe6d0b87c0a429e9abe84be3f30f285285f59bd91ab837a7ae1b17249a3ee85(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5d77cbcd2a981b6c6f019bbfff69195238320a31ace07bab6b9e15d1ff2fcc2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfac05bc453c30273a086ffe296c133cae54e2a92bf80cb75f689e1e6fd6f24f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2803768413936507e975cb3936721d8c151ff0e84670048315cb3981c263073f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a376f25a46db8a9cfde44d923ac128679bea9faa4d790b08ca806558bdeb483(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ea9430a334040b6daac8a620c59d85b36eaa2fd38d4c2fa2294d3adc31d22874(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85e699d3cd8a2d9e6ac61ce00b78d3cd28711dc79bc8c5013d629b8747fdcf57(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5122b100e6b7383a4a15735f1fb34489a0c5f36b74dcdade9572ccde73f356e3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09e873428e3ba6c0a681e074e545a366800f0bc8e0945c65d7a22ae676514adc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bde3394ad57c40f93d322b24d05de7529d002036646649730ac42a0f31f0ea81(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__759c62873266bff2c86794994ee45d143617f2c7cd1ddeabba616ad383c4a9b1(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b89ce33db9f3a3cf0f7025f0398c68768f92914fe3e5a779c6fae5b5691bce70(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc4b00e907866a4bbce463463f674dfbb080719be5c918ee75870e0d1872d712(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__036fc44d05df70388e3591a7ff38f3fd16713f0fdca32a956c38b7b327738a74(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afb50b7aab2bb9fa04c9e43e5e85f3b22b0ac52b1737121e73a9f26005b3f882(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef0ccbd4a148b1ec0c76eee3bc5321ebf3858393578feaf98d7b3dca4d5ebfd9(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1932d1dff074d835b09e5afb0560054a504c6492e19f1a287581210b608dbcbd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f6f760b1bd21059b33f667cd1df0678232569108f63a9d4b65f231c92554631(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6509588c28c0a32a4aeea1bbf1a99c0f04dd95d2bf382a6fc0fb342e6db89e66(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e43f8448b1243f483e2cc0d46cd422a6342366351f68d84348a6be15195d7c38(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b222c1a66a597c382cb702b2f3eebc4ab45aac61894de2e730a5e853bbd39829(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ea47343492593e01ee4bb134ba82c7be149efbfcd6c2b6b971f0d13fa93ea9d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ceeb4c0b0b7c8cb3ed7a232a2dda93b7d96e2af1592a0e978bf0c6bf6e21b0e7(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4401180dbec8f3fbd91f21c65beabb52829940246136dd9839e98d0ca6ad917c(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccbfa26751fbc318e4d030650587bae9075f383b4418b14ae945b594d0c29ccd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6828009df3d3f4e973372f03719f8908c542b1d2b9ca60076003ca63d971f62e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7dc8d4c8420754308bfd316b2be4fa9005e938886af55ed3b5f576ff84d2f4e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ec06bffe0cd93803c078a164623297f8ce5f48d003543c424c2894dc90e0b44(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6be1ddb40798cc5b7f429c7bd35e433ff7552d3b570fa2ecbb826a5239122bab(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__313db0194ff00f03710a07e4a8963d0e7cbc880506466d897ba699a7199bb362(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH264Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca6764221b770471d20de4594c096d92fae80d3b69a502cf6b3de8dc6d5bc131(
    *,
    bitrate: jsii.Number,
    framerate_denominator: jsii.Number,
    framerate_numerator: jsii.Number,
    adaptive_quantization: typing.Optional[builtins.str] = None,
    afd_signaling: typing.Optional[builtins.str] = None,
    alternative_transfer_function: typing.Optional[builtins.str] = None,
    buf_size: typing.Optional[jsii.Number] = None,
    color_metadata: typing.Optional[builtins.str] = None,
    color_space_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    fixed_afd: typing.Optional[builtins.str] = None,
    flicker_aq: typing.Optional[builtins.str] = None,
    gop_closed_cadence: typing.Optional[jsii.Number] = None,
    gop_size: typing.Optional[jsii.Number] = None,
    gop_size_units: typing.Optional[builtins.str] = None,
    level: typing.Optional[builtins.str] = None,
    look_ahead_rate_control: typing.Optional[builtins.str] = None,
    max_bitrate: typing.Optional[jsii.Number] = None,
    min_i_interval: typing.Optional[jsii.Number] = None,
    min_qp: typing.Optional[jsii.Number] = None,
    mv_over_picture_boundaries: typing.Optional[builtins.str] = None,
    mv_temporal_predictor: typing.Optional[builtins.str] = None,
    par_denominator: typing.Optional[jsii.Number] = None,
    par_numerator: typing.Optional[jsii.Number] = None,
    profile: typing.Optional[builtins.str] = None,
    qvbr_quality_level: typing.Optional[jsii.Number] = None,
    rate_control_mode: typing.Optional[builtins.str] = None,
    scan_type: typing.Optional[builtins.str] = None,
    scene_change_detect: typing.Optional[builtins.str] = None,
    slices: typing.Optional[jsii.Number] = None,
    tier: typing.Optional[builtins.str] = None,
    tile_height: typing.Optional[jsii.Number] = None,
    tile_padding: typing.Optional[builtins.str] = None,
    tile_width: typing.Optional[jsii.Number] = None,
    timecode_burnin_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    timecode_insertion: typing.Optional[builtins.str] = None,
    treeblock_size: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97758701312993177e9e0ca55a2505580441cb2a5cc7f0c4b4b679b89d392f46(
    *,
    color_space_passthrough_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dolby_vision81_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    hdr10_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    rec601_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings, typing.Dict[builtins.str, typing.Any]]] = None,
    rec709_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5cd819ff751722d5a7aa403108bcc1579e39f7aab303785a642208965dad21d7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df6f9fb5ef68201e257fdedac8bf8dc99fe852e3c8d7f48def9786e7b02dd7dd(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsColorSpacePassthroughSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a6259c0bcc1c87a9cd3725063c726b016be9b04c61b4c4c25793ad5e81fa2a2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e77f9ce0531f6c595c0bd1c1971e94df83a023a822a511843902f374bf4a9cb4(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsDolbyVision81Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4292eef06a456c57eb6690a33d5a809be2d9a1b275f8ed6186b480a34c988e14(
    *,
    max_cll: typing.Optional[jsii.Number] = None,
    max_fall: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59143d21104a94d5a11103a1d921f9ba4d01c40b63a599b4fd75fd3679b74a5e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12ebec7fc20e828c5724d527a35695a90a714419e7a8c5d2b5d970280d73e740(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e165db770a440926b1634555222da812ecff7218c3031506a2358b58097d9b6(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11966f621afbe930c2c309bd7ba46eb3862ae6117b1e925233a5106d547521c6(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsHdr10Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb5b6b7025d8e36967c8bde29643bd88549fefb790494c77a45ff801300b9148(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3bb52b859fd8841b758c1c2d29f0238f38e23dd5c97f2d30449872d113aebe7(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7378e7dbbc39f6a0a5dddffa7592a52e942bc15b6e66d30ba9ebf4c7b629bd3f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__502db04b73666f7c6f6d20e13bb354f746317a610559fd7c48a26e0ec35af26c(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec601Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__db395a91683cb863b65a44ee5dfd4458061c4594b39c525de3de0b75d413134c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9fcbcf10e45393abb88ff9bb57033788408b319eb8331a15c5102f6f40ffcea8(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsColorSpaceSettingsRec709Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6891ba34e46261562b42e9bd82213f23915aae47a058eb48581f5ba8e89d522a(
    *,
    temporal_filter_settings: typing.Optional[typing.Union[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdfb387e347ef9176b531fefd9019f8557f769e74ae28ae8aa8e433f034397a4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__702b46fa7c2a80612384c4f7f2dc15211f7ce10eb2fc58f249585bfae72df2d7(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7726c7dad8f2fcf51d7bc9a7e67f862006f24a7425e2d1b243f03216af86fd7f(
    *,
    post_filter_sharpening: typing.Optional[builtins.str] = None,
    strength: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d0dc429be022e3554a42fe1f22dd082040f82915187e7294c2e52905fc90c2f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1145f32385b9d6735abbe0204a32850050990cfd3bc94206204f617513eb8177(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5077e1b11ba2a11db98aaaee4642ef5bec91f7a38c76b68e9291dee979a86f66(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__78eb096a0930a562e99ca5a3960e6c23bdef7af3242273604428a2a0f00eedbb(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsFilterSettingsTemporalFilterSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__135ad0138a8c5f04cb30e05b537f5d6062712454dc731fad632971114dc6e2fe(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fbd3c43828bf03a2f1e3809ed62cedb722b28dfe1426cefcb081f7b00876d33d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03c1a80d2cfe8cd856c93aa456cf25322e7f71bb9de44a86ac244322ed5a8963(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96921a6038e5cb719bbf83b21d6d453cc40d68cce58a27e1dcc6be63d84e5dad(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38562ce2f53a9036a4859c3ce31a0e018a3980a1af9d304195f6a77ab13e6b48(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__295ea06f5530b5c3202d5aa47ec10eb2c1ec8e92cfcbc6192e2b3faeb0659f40(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21c5a39dd984aa843c16af05f31b676c1a23b1405c0ea9b9059b24b70ce21915(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32310ffb5d128d829c8b4b40f56e290db9f4db49a9278d0ef013eceedae409b5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__384b07104828c84ffb77d2f48e6e6f3dd8e19544ad4c7976c4ea125525884c31(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6163f45f2c1d7ebe087ba9eba5cac46d5cde9aad15cc7317b907d9a5e5306876(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__91b5f1c579ae3deda7e943eacd9358c6479fee606c525a3b5baffa7b8152fb28(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f5ebfd7ece2a99121c04c29e58f1027fb040e1dcbd5f52b34a94f7a9b00b8b5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__789a8f032d7413ed2cb9e0e3e5bd11bbc9e5eb3ea61e4e08cb76ad55602ff40b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__adecff611c0a20826af8a6e12ef6922e451160d3310dfdd30124765f386a028e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0f13fa2bbbb1ee36f702e7b236ba0ffaa3e40d404790c158b81ea2683051b91f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3ec10e2a76b836ff5a10fa534d620f9f48289927ac35e1a914228215fc1feb8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a220c3701a61be13c086037233b2e14b2474f6f23e5815d40483bf223357ff7f(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1992b27d2765199a036627ee87fe2f2019154afaa3374eb9a5b16886c0e9c2ee(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52165836a612d4483297a4d1d797180dbe5fd5b6f4f1cdfcd000dc1a0fc17272(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5821ac71dbf16bf64a76de6de2e14fb88bfcc36a918ca15c0184bab968759172(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45cd5136f6aee83b3071e73d04a17adad6c7ef4d282b49b394c8829a8efd4e47(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a655720c1c412b87f99410d491c60d56ae0c1754bdcb848aa62987d7726f3a0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4476e8f3843532f6617472ef123c9312e4836b1848923bac45a86119cf10dca1(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27b9a2ee38f7a485b24d403f6b6c2486e36a60d33656f32d218f07b4150ef3d8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9315099d79de89665f4c52648ab5c5bf7764d6d0c14b0279a6085e5d16864aeb(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__adda17e77bdadd24b2cd05e9dfe877916c8ab9d134054baa298dc028fa1495f4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a9f99a37d161734d44c3762865096043fa3f955005f466c86bdab62d1619d83(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95650106d4f49e24cfb3e3d634091a5ff007fa053bf92179fa0856020563fccb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bfc3523d4e8583ed17a1ba9c96c6987a702e5751d89f98f7d1bfbbb55c67fce(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__867289c33c6ac8db9ad9af8f513006e384f189b206a82a2123a1dcf5c6ddfd72(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f21942f70c4a083c4ec058f256bcfdffe7975caf1e06e8149935cf756b63f9c8(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ea37cfeda01cea736b1c42be496526fcdf84385219dc1b564855b321974eb59(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1cbbb8416d8227aaaeffbe8a9dd840cf0c5f6c7a6a060e46cf0beb0e4663fbe0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__046cdd98cbcd8895881c3c2959fa8480eb7a1eea9abcf3e82fbbe57cc27ef11e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fd12fc2e5e481e814106a2b5ee0265e1a3ba2893c229867755b2f6f3a4171f4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8692b159ca9a412720b9e5f480dca19ff8b9e7f9ff6ca5d46ddfe03afea1c24(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265Settings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__459fdc6f5e9f0c78cbbe02545db2e55e635bf61a5f85d981a2e36e8d67e6b44e(
    *,
    prefix: typing.Optional[builtins.str] = None,
    timecode_burnin_font_size: typing.Optional[builtins.str] = None,
    timecode_burnin_position: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04a5e9ca289bf6f6037bf2947bff223a87fd6acc1ee8a96fad5b5e64061b4acb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc4c6eb1472c19cd48a5819e5423fc458773eca178f1dea4941d47e65296ab58(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__039a481dc15dd3a21381fc8cffc4d9566040b9e068755b4b8aa2b722147d095e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6018630d7b56c921dcb2cafeeb5b3e4e7197e3d19fbd4cd51ea0f8548e5c0644(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa96a36e06b4c31a629f0818c441bbf62fd1b81782dc77348b89822f63f60c15(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettingsH265SettingsTimecodeBurninSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__000f705e913d665d933139dcdbbab91209f0a1fdebde599d698f78291816484c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__112437124e30bf183f3af30eb6fc5576f9ed579046e6be3ac3715a0ce02ae010(
    value: typing.Optional[MedialiveChannelEncoderSettingsVideoDescriptionsCodecSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd6adb5735655d546b6aa301ab02ce2634c95bf652bf211a779bc35c927c2e5f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a07f39658bff36f59e4ff2148804f1afaf9958f439e149d832f40cbd71e88286(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__698590c1420ee9fca74c9cda6d32989f759d7443d8a8e2b2ccdf8dd901d3a76f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c02032b932a5a2486bc0cacddeeea114255cdc60a941d38b0b7c0b93d4542eff(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae7bb077b85cc268394b12143c96420614051603beddfa0de9e2e981882f3611(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6510b25a9653182306c47681763bb7216a2697fcf273d856c4ca1d10da5c337e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelEncoderSettingsVideoDescriptions]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6c6e07aee8ccc99a2da588164a001945f2cf3611402d9532f9c62ca4693264a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a54851c8288843ab3cc6601cabd91dddf5d40e0fed128d72156f7ba17110c1ee(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7b9217d626dc5b264f9c9e58f13b813c9eaedd6dc5ece9dd39f507ecf80427cb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__98dd5bf390a24b09409fe1defebea6515438aaa0ffdd0fe0e3ba49b54a8f06ab(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8bee286b59ba09ac4cbebd7f5cbdcdffdb3fd7eb792564b56fb0bef26ad40e5a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65be266269c079458cff5e034494d02d1901e6a9b0c4d70e4ca0aff1dc7210cf(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b4b912b33fea644114a924bc8c6d624c3fd91749529a4ab5c1fe00ee93b6cf5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b214dbbca70cc92ca58765db8ff4478698d6918503dab389d58c3c592d40b532(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelEncoderSettingsVideoDescriptions]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f574e9f7a2ff21554e93f73557cbb05bf352b1058732258e6dc6c94086018485(
    *,
    input_attachment_name: builtins.str,
    input_id: builtins.str,
    automatic_input_failover_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__227a8b7f3d1c071e9fd3f5fc715426e66c728881abe2b91332fff49f2c899e50(
    *,
    secondary_input_id: builtins.str,
    error_clear_time_msec: typing.Optional[jsii.Number] = None,
    failover_condition: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, typing.Dict[builtins.str, typing.Any]]]]] = None,
    input_preference: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f41b5f481440c814b2e6fca75d7fe62fd91cd68f1f2abaf0779ccf45432ee92(
    *,
    failover_condition_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25613eec22c8855750ce8ba9d1c3a2639488c37d9c6fc3f42a313cf462ff42ca(
    *,
    audio_silence_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    input_loss_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    video_black_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b317a512a6c812eb1407c2b7314dc3f5332a859882eb0c3dc0430c1b91072e0(
    *,
    audio_selector_name: builtins.str,
    audio_silence_threshold_msec: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b01b2b0165afc4141b856928bffcff49a8fd828c5b45ec6c9436cd3cf64851fa(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc817326741b0f75874ab75d63ddc6e39810443bc461a2c6c3c00065f811dc32(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7bf8e5530304e3b80b67b51a09b83c7c1a660b97030fdd6186562b4c2190032(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a8d2bc603a1cc26549c70851d9ce39f37a3a53b014b10b55ab12255671b58d9(
    value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsAudioSilenceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bfbf23ee0ebcd32872ea627d4a2fb7b3ec001215abc8a11a07589a63677894cc(
    *,
    input_loss_threshold_msec: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7635f0a18af4b031c2a4d6eb5e13323b38ab685c9c8b9ead8afb46eeec60212f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65a62b3e177d4c7d112d8f05e80491908be3b6de2471a00f28ba6b26d90660df(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09671e364114ddbfd9f6fe278bc94341dbb34e250eb986ec016eebad4f74e985(
    value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsInputLossSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7704513d728d7b314b411e8fbd718908d21ab8c190c676156a667990d267a23(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af3e6918a79f5b507e432d3482f87afdb3b731c518274046b8f690838a2b1570(
    value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc4c009e88d51d16bc67dad7d68e8f3ecab5444605db3f4a7b00990fe47a778a(
    *,
    black_detect_threshold: typing.Optional[jsii.Number] = None,
    video_black_threshold_msec: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f8307ff325e5273bce740bfbc1abf5d929c48085e724c533d88688410d8061a4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04edfb70ebb3bb8ce8454c7bdd39102a47f877a05a035285f7561c4e35684877(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12394ada4a76f5dd24ed2c37b3ad1b217ebc75110d48f0dbedd432ee0dbb5dbd(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b8fbbe850aececb907e839c0120f257ec3b73daf44d21f29421b17f7ec07158(
    value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverConditionFailoverConditionSettingsVideoBlackSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__40420794f3a85cd7ee24ce9b18522a3790edc6611fcb76cbe1e9b09b7bbcec5f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d10918afdd71fda9dd1d967100a6b3f22d5a9a1f49f2c349276b68307569c018(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c83d06280cc9456ee5f994937ceb4f6a19b16f6e83ab77ca91bb47e44a30c1ac(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc7dc781185323db847078bae358251ba5bab42cc98976ff8139fe63ddbacd39(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59290e32ccdcbe0e9e61a857180320bc59501577274b521efb6627acb4b0753c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd47d2621bcb010d2c9aa067c98bf3e980f1de66b1a22bd30cb43991931a4a9a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49f1c5eef4ff77f6134c23ecdd88bc3f7e5b74ee6c4558a3944fe4ab2ad01c65(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe4154ddb1dfef5411fa314b629e6d14350715dff1d134ac5975f7e23f41ac36(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fbf7e35f521dc3f3f2f1c4504308bbb429c7293bca1e89a14ddbfaea5a208ecd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d062aab62d134a168fc8c20163440468a76732e196c04cac01e01b04c072f391(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettingsFailoverCondition, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__faccc771e29d19b951b5a477fc68d66987958ebbd098e9638f76ec712a59751a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__268e4edaa06c22881472129292c6fb2053da3d9ba0bdeb49bcc478a38eb6ff10(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__090135b0257fbc7cfaaa8cb8bcf527c7b85ee7821726b52142c190da75006a5b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9216be390459bbc1c5af98b92980d7e3c3902ae0fa624c32e26a04e54d5bf832(
    value: typing.Optional[MedialiveChannelInputAttachmentsAutomaticInputFailoverSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__363668c580fd76d99646cbdb06b0fa6b9e4b41504a33c62e17b076395bc2fef8(
    *,
    audio_selector: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, typing.Dict[builtins.str, typing.Any]]]]] = None,
    caption_selector: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, typing.Dict[builtins.str, typing.Any]]]]] = None,
    deblock_filter: typing.Optional[builtins.str] = None,
    denoise_filter: typing.Optional[builtins.str] = None,
    filter_strength: typing.Optional[jsii.Number] = None,
    input_filter: typing.Optional[builtins.str] = None,
    network_input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    scte35_pid: typing.Optional[jsii.Number] = None,
    smpte2038_data_preference: typing.Optional[builtins.str] = None,
    source_end_behavior: typing.Optional[builtins.str] = None,
    video_selector: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsVideoSelector, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6df57a9db32e32791e7c55305cfb855edfd3fa9529d7fb5cd23bee87c0889b92(
    *,
    name: builtins.str,
    selector_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c16026d061fa5c009b6f569f4c9259c79b6e5558f8496b4aeca6d8e31a6dcf73(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9a0f0122a57dbdce9ed65af5858cc985913cc5ac8636435afaf2e28d34dbf439(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__89a9a124d55db23a53ed9dc3f83ea80df2311a11d3e537d90738e7dacc768777(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4cfdcb73a4979f198779f51140e6b8d68d754b5155343708558a0c9e01aad0e1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b197aea0aa938a50b663faf663381a15bc73eb79caa2e94bdf3a6353802336a0(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9628dbfbf9d3ec1717fcc7fa0ef85e910f6c93183fd0514abb0e886a653f4d99(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelector]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fcbc83665c35251d2fad2ba07dfe611397aef5a97f8d0836fd4325f183701d40(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff3d45002f3cce79adb214b19707e01c785313a621ae159008dce292992e571d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad7111958db3c2623bc38b43e5c232a60241b29b674f2da7f6e718226bb94df4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsAudioSelector]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__212ea04fbb431447865faeb530763866bdf802e60361f078a042d9ee24617fc4(
    *,
    audio_hls_rendition_selection: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection, typing.Dict[builtins.str, typing.Any]]] = None,
    audio_language_selection: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection, typing.Dict[builtins.str, typing.Any]]] = None,
    audio_pid_selection: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection, typing.Dict[builtins.str, typing.Any]]] = None,
    audio_track_selection: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1c2b9b32f70f6ab7b6e72eec40c0df3feb620d245feafb911464be6f790fcb15(
    *,
    group_id: builtins.str,
    name: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc78e4a943e6956944ae5b38a64e8600f749888f3e9fcc18a6e59bd70f53c0f1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4765b82843b7e41d4b1349c71d8e7d296ce0f4bac0fcf85e4766e9291952c111(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f15971bc626f3ef91a726e02aad960a45157d2c8e137ae180a9c39960ffd532(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21d904bf00c8a2009fe0b02246d57b6ac50a8fa95c2ff2680bda4aef4de89e0b(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioHlsRenditionSelection],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__901114bbb5f2018f931ce999547bfdc68b2ffe31bcc56f65813880f20c943813(
    *,
    language_code: builtins.str,
    language_selection_policy: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c858bf9974ca458848f06f9ba00b0e0743b1b724e5330c91bbaf8b669940fa3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3f0e84c497ededd2846b5057fa08266600aa7369f58755c36d253ff0fe9951a6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21cc9540f9b5e8ead0dbe8e29f785ff8954298a7505c22ac757d5e3317a460cb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc9733a54c06a76ae4d72828456710c24af3aa2505e6cf1cc7d469322aa201db(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioLanguageSelection],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92be96f929616df58dc7e2440179d9a2d86880df81496929057916a2a17e9721(
    *,
    pid: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f13ae3022205e37c6924f311e08ed6c305e1501abc37269165b325946e2f8b9f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b3aaea08bb34e14db4688646ada8e6f93652090afe0330692c0bae349703f18(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__87fee67be55ac3b1b0b59505b6917d60cbc872abd3717c88f48f2d7b8c27c3e5(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioPidSelection],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7afca43c38192230b761adaf97228936d1c4980b2c08b0c0bb58e33261375080(
    *,
    tracks: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks, typing.Dict[builtins.str, typing.Any]]]],
    dolby_e_decode: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01fc3ebcfefb2db13cc0afcb03216d74e8993fa0f0f1072c9af5bea6a6285477(
    *,
    program_selection: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__caa67451a4380200dfa0cbac4aad3da671eeb74b1914b76f734f2e3c9cdbd01a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37ded4835cabbb3a83ec4fc55e7bef824d3fe1cb9d7579e90df0eb5898589f2c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eba968199e084e8729b907672a46c8dd520f76c30a7d3e462da149ead3108bc2(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionDolbyEDecode],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad9c4acd62655fd0b926cbab44613a16f054fb592f8b560a3b53c744a635174e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa2fffb0fdd98c1eb787e243f7ea8305f9d775ea94f8aa9aa0831d03cdc63477(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d128f3864fb3d7c80ac43217f3fceba4eb2fdae5d7fbebd44a8eaa8f48256d7e(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelection],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d44f434197978335a840d491298873584ef64a77b2985dbc7f33959880e60be(
    *,
    track: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00750658092e1fc0046fd265dcac1c0ea49f36be4436183926cf7d6705828563(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1fd4c004a1a4714f359412262eec8d2748d62161c90ae96f97f4e46422baaa74(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c38e7c50b6f4fd5ec582a1e84d30b854abcf8449b1dfb9959b011eececf8056a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bdcf91b5c7194e5fb27b5009fca5ae5e06b72b581d2aee3697fe74b95adf50e4(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__678a44d2fb16a0fb12c1ba11ce8d0b025df32c979727c315d9e4697d4ba48171(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3947a5ca9a3b53fc602181878099a7fce9276b9490b04605b60f32b87b92426(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68434757bff2148b2275e73a5b3597a418f565cdf75c153cc3119a3bd2f88e14(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6062a0582fc0adccd0c8ecc8d5aff9e25bb660cfd3db5da27f5bffda08e42957(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07fe545dcc726b4e002ecfe45976f329a25f390ac8b8c3126cfa4821634cf19f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettingsAudioTrackSelectionTracks]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd9cc21bc7c50c7ec01c92ca975c8bbd5ebaa42718c2e97806818e01183aff1b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__556267930d80699190b2fba7e8f948dd5d63b6a4b676f436e26dad90b4a5a8cb(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsAudioSelectorSelectorSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2fa4bb50378b3f650ae4ef8a75b86d8d4381c2b99b1a2805bc921ec4de5837c5(
    *,
    name: builtins.str,
    language_code: typing.Optional[builtins.str] = None,
    selector_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07c11b69c3c6aada55adfeb967d2650c86c64298c99a05da98074afe21ec73a1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c753e5218a37c6f38dd8b622f096029ec67c7e31e0c1d4db5c72cc8b8a9daa9f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cad0f9589d2e2f1d69ea46faaa444c19c333130c0c64101b7474f4df4059f89b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ceb63020b18137d8dadc333bff3d25b3a262fbe27c7e0b7e29affc8e01b0d4ec(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a695ec164c58ad32b0894c79d5c9c752bb672fc1e71635daf7d4ed08cf69a18f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c819e4144d1b44e92cab96610ea50fea21324d4655a8c6fa94420cdf21fde67(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67f97e73fe20a04337e7505c0cb5ddfcafd198cc09693b5b5a6f4bbbe1fa5034(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b73783a684b18051c0de07cfa7353ba729e3abefa2b98ccfbff76e8e27f7629(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61c4722d8a305f8a907ec298d1869683c3abc57cc73874405429c6e4ea4f1eed(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d48868956b0e916f5db6853c0cb145f303c635941def2071895326af2f34a23f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachmentsInputSettingsCaptionSelector]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4512bec7d1daadcbb56c44a744390c3bf2bea809814eab937fcf8b1ae3839add(
    *,
    ancillary_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    arib_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    dvb_sub_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    embedded_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    scte20_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    scte27_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    teletext_source_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings, typing.Dict[builtins.str, typing.Any]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b5672bbe4760d98c85293bb833a61ba9b561a42a42eb4d6328cfda65c5cd34b0(
    *,
    source_ancillary_channel_number: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0ce9c9d761628fec842a8ae859bc34f7ae169eda4be0290173ec2e133371408b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc1be241e1715bc926bf595305c14032e14ecf2c2070f907aa345c16c4b18fca(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04b1212f2962bcf2577aae46f3790cffc6976b2f84bcb9f1f0ea1b68b65a3629(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAncillarySourceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b4bf40ef7cce9bdc908988970d2d5057fec184ff69e0d8f12a6f02d0e0c17240(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52ee69c550f1e67bbf3978c397ed1f31878d7727da930694510d0e05f4d1a0c9(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsAribSourceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd40bc3120c4c86a52b0b5f0ab2a682c8bb9aacbe09674068968000b8548452a(
    *,
    ocr_language: typing.Optional[builtins.str] = None,
    pid: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7fe190fab105d31ed42fc094e4080b365bb1688554f081819a6dc9ab6c552ba2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2cea272a82f817c44001b08495db67629b5e58c9e2c77f226e935c4556070f12(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b83dda0cb0313241f5c39cb9c8b883e4e79390b506f548ff61d3a00b5a5fc134(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34122f2934e7adf5085f62c20a2b20974140b0c641df4966f2e03e24c813fee3(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsDvbSubSourceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c560ad4dc592308fbcc2123e1ed8f65f684651554d5188313792e92d9d8ef68f(
    *,
    convert608_to708: typing.Optional[builtins.str] = None,
    scte20_detection: typing.Optional[builtins.str] = None,
    source608_channel_number: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8811b99c2c97e3502f2952b77a121b500fea85f75cad233b0893d881528f180d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5100b45b0093ba72263d4f9b345ea4ebf8e34465c80fa8a22fe867a9214b783a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08d91abe9f952345a4b02bcda9eccb84e3d6d9fbb0908a74e4dd46057089f10e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f1626c17c70691bbe6f7b4e66e56a140404dee4ff033c36af94b34d08b9e2dc(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c0cfeba2c0af1fc75211ea8ef23324ff92d66c51fd043a457c3fd50ea462f26(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsEmbeddedSourceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fb85cef857bcf2ebca6dbfecdc042a340d231322aeb6ef3584de3b781a1bda53(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b76103b15a28d2c3db80fa1879c758834891cb54681e7efb49f20f4a4f4703f4(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59d8301956a222b6ee3b961f531526a3ded2ff147e04fb258d5361d1b28f7736(
    *,
    convert608_to708: typing.Optional[builtins.str] = None,
    source608_channel_number: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae315e53901fdd4c34b5abea87aa1f5f8db9be93b61d4104ecd3be89a54adde8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99f958478589f328609e2f560f7af99e53dec596ae525154cdc270632e51e295(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__230d2b0e85f4302769178039a4ec4d5482b2bc60f7d09c5328987f780d5bb25a(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa4369a287c4c87ca198e728ee8de4a4e2cd7ced656207b11ffeca060fe1192f(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte20SourceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d7ac12881eaeacf09475f4e0042af4943b55a5e2fc3bcfc2e934be0801423b19(
    *,
    ocr_language: typing.Optional[builtins.str] = None,
    pid: typing.Optional[jsii.Number] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6f076a18e74172d2ac6106ef0a74edd83e98c3ce4ece0294d7fe28c37f199b3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19f66b7eae03ec7f2d7894f2e5005a914db01ba6ce6699b4109325e0c97d51ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d59755ea127ebf01436831b035f2cc00225962ed67d63ccec1b5c546fb1e886(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c73e00c8b8c63a3a2805134d321fbb2afd3ee8fab5c19d4f56d7b8fad0a012e(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsScte27SourceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b1c79f110b2373d69fdccf1b05dff2e0ce9f513144e4c88b083a5b325db565a(
    *,
    output_rectangle: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle, typing.Dict[builtins.str, typing.Any]]] = None,
    page_number: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2b7609b75c29c35a2e8cebb126b85ac9c84420cec1fc6de803381e08163f6b2(
    *,
    height: jsii.Number,
    left_offset: jsii.Number,
    top_offset: jsii.Number,
    width: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4406ae3579868a527f42feaf426dae24d85a08e4e90fb910b6f35f5b91d9d8f9(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d1049022fe6fdd7fd26f2032830798b9e51e1d238c0d7cecb267ddcd901f5a9b(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c834316f4da2f54360ba4c5f42c4bc864be391d10b56f9a7ed16d130e91aa9c8(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f2f13deb39378e145a4747da78db38ceacb2b08cda5b2169203ac1aa91d644df(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__27c3e0744aa4b25d66275ce3619dc4d701cd378f99a5ec258f4f4cd432681b23(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cee2a6abb8a8ff81d29e9dfac4468a9cf784c935279cb9b64bb8c7778ec079be(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettingsOutputRectangle],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0d33876661a32c0061a3175f43e889f7cc6d769a93158c9db87d33cb070ebf22(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41491c500530dcf1e96c9b7f1255a6b94a0dd49085c42a3f8f6bede9feb7599f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9fd0c5468df71066e851a344f7db5657599d620224c1cb4034ea78b56d5f68b(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsCaptionSelectorSelectorSettingsTeletextSourceSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9375f8b20ed8dd3a7e20479f5eba64d1fefbab3d0b41f73b6db5cd7c7b7e04ee(
    *,
    hls_input_settings: typing.Optional[typing.Union[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings, typing.Dict[builtins.str, typing.Any]]] = None,
    server_validation: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2523c83ff34e7fb44006fb645a84d5c8ce5849101059b27cb890bbb6a0c8d483(
    *,
    bandwidth: typing.Optional[jsii.Number] = None,
    buffer_segments: typing.Optional[jsii.Number] = None,
    retries: typing.Optional[jsii.Number] = None,
    retry_interval: typing.Optional[jsii.Number] = None,
    scte35_source: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76492ebef543e7b50fa02531c45b943f7772a43bfd644ffbb7204539490a6e4e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e424fda93cfaefce0f39e63382c242c029496c678148e7893f8c3629cc9fb66(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ae1b44a363ff0d3a9287d3fd4c7930480f2ebbdf79238be3ec0a5bdbd231138(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c400d25c67e14d70b4f8bea6288668c4d4f675cf0f2b3ecacb4c26ed7066ccc0(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7751de7b394f4256228fc61644dcfba9cc1d25045320468739a8675ecde35972(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce3e830f78bdf24f28763161b239f2e91a9f31abb510a0712974fc4896bb27a9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__285113b7cf33a713c3a72cbb1be4c9472196edfce187417b4fcf9c072c146f3d(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettingsHlsInputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__827c1284be22095bb5dcceaa925f9b2f30bd3f9e1977ac2cb24849dd19f162f1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c23f10c5d3482d41bea65c6fb8e2c7e634c511df03ce9353cdb0569859129034(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee7ebedbb3b62880af84b8964767cae491b28112a9844719813a12f90dbb0dc8(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsNetworkInputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3150983100c9fbf2b66fa30050118c38fcf61bb3f91cc1d4e364ba97cf6606db(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bcc0236363d0acf8ab9924fbb069f3a328d16173151cd71c365bdc0b43da6b41(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsAudioSelector, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__02da279620c08b08a6a6c9a0accb43c8973eed0a5b59c9e490c96dec5a18d569(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[MedialiveChannelInputAttachmentsInputSettingsCaptionSelector, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61d9a237676d9f19861a0b0926c8e178948a21c4572d469ccbd18b1355f000ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__137f54b23e40af745319ececc84f900c3ff6c623a1be3cb44bc80c8560beaefe(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e80fb829955fd6481578c1411a4c24ce86e868876067f689ef36e55ba4dcefec(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__90ef0f123c94b0785c0a5dc525b3b798ac5c52d32e370845fe6de8b9f672fabc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9da81a3ba6e4480c9fb2373e894cb78a9bce8388edf54ad0b066c2a026f2248e(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9306c0ed252cec39f92405c745bae4de7b822572080b9c7f6caeb16567cbe95d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5726995fffe2d1f3fb793f49bb45978d43e605a40efe4878ca770324ee278f48(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3bebfa0560125170540d64b7f3264a24448c0631fa103fb02e6e5e8f9e8e7f6(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettings],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f813685589f7460156489b251ec10ed3775b68abbd93549c462026b66e0154f(
    *,
    color_space: typing.Optional[builtins.str] = None,
    color_space_usage: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e27263d933207e44f1b04ebecf382056030026fdc3ed4616ef57ff21316a7948(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4628071aab22f4156474c05d89416ed1875b8368ef67bf8ece4d82107c7d80f8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__631bc56b985201c9bba7429908354748cad2e5a2421f5fee0569aa462858727b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f979572306edc6336cd6d2432a4f2fff0b31320883fd1551233685f71d0a85fc(
    value: typing.Optional[MedialiveChannelInputAttachmentsInputSettingsVideoSelector],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ae6e04c58af140628b96a8b26d0a87f57aaff2bd0f124b384b60fa4983f4b5e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__145304d1fe196219257c88ada031538850d6678edcabd0563ca9441308a6d1c9(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__504af6bfbdc6e9af192179258a2034b0fbf8624345341ceeb9a23c4786a6dff1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2cbc89fb49499091d59241155183148dcf567563ec4b6229c46af575ab14ac6(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bc77edb3cf15afea6a9be1330102f397beb26a10c0c0159cc23cdcbebd1c64ec(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c25c833b67a9b614ee3597aac8046de2f48a5c985ffe63fe49a1cd6a6dce618e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[MedialiveChannelInputAttachments]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8374024fc03437bd18ab93b1665f3a739522dea513e71b21a432c1d9388f6be5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d0f97b62ffd0c5ea3abd21164c603ca76c5a5bba777773546b8bb161ac02832(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46d4638c455b0ce3a7084b5b08ab7cb8a672c2dc80dde65e3119559a5293e190(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__53c3afea549b02f0575960e4f31a31fb0f8c07a566b88869c9d223b077f3ee64(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelInputAttachments]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6dfc3b88f0f352a3610a165eddcc4bba415849372e5395b12c67e7699dfc5b7a(
    *,
    codec: builtins.str,
    input_resolution: builtins.str,
    maximum_bitrate: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__211fd0f16fe33b8b65b54c8fd0291c2be26c16ede7caad48509af0e34651cd3a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0d46c26bb905da0ec447e54c533257edb2a341a284caae92ed98c3a16ac3881(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34de9a8adba235f01ada26fec1bfe6b0940085c698178fe1cde04c58be8ae4b8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__05a3f62172a4c7546502dbb44e5d4bd5ac2aee603a0ebaa5d5c883a75002fa85(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b00c2ff9237d8deed4b79d797694056b88b873289aa41481bf5b35e314af413(
    value: typing.Optional[MedialiveChannelInputSpecification],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__725df49a8d68d098e41b12aa3dd29ca2a97b670a1bd76b3eaa1f4641abdb1566(
    *,
    maintenance_day: builtins.str,
    maintenance_start_time: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2df44842b464782de08f74cdba340af09818a18d8229fc715a221206f3c5630f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45f9287f898e6fdccf5d160f879b935d015546557d66524a0cacfc535b6a5851(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee80008edf152ce0de5f25125c205c03ac6a006cf4e40840cd726000e8383b99(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c4d69fd664ef25d56e952fbcda31667dba12faf15204b781ca9c9d2eea1b285(
    value: typing.Optional[MedialiveChannelMaintenance],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1458d40e4acbe7b3fdc61c53f0925012f46ad0d9bac9526bbacfb42e5181c29(
    *,
    create: typing.Optional[builtins.str] = None,
    delete: typing.Optional[builtins.str] = None,
    update: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67f84c294048a0308510a708837c7df197c09d114ca036fe0dcd35b8c056b510(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcb144d180a2c6bd24f9be3340d40b60465d6ce1ed8cda8a8640b11168622096(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b3977d0ab8c48fda329ae9fa38ccff87bfc0c98dbc61ca75f366bb0b74a9a6a6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7543d84d5a7a6fa37c95178bdcb3f4d74e8c1b510a539c6e6f026213712f0836(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae5f0374c15e5338fb07e0fb5231f9dc2df5961483fe614ecf04b7ae8b945cf0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, MedialiveChannelTimeouts]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__979fb642021a79f0e2ac0e2049e090eb6d8eebe96eaa7b46b61bcc6ea2551717(
    *,
    public_address_allocation_ids: typing.Sequence[builtins.str],
    subnet_ids: typing.Sequence[builtins.str],
    security_group_ids: typing.Optional[typing.Sequence[builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58aee1e6d2ddf5aad211e93a3116fa10b9118178d155ee9e047245e06dc67853(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9caa331e8f00c3fa9f1295988dbdfa135ac94b04e0fb2b3fbeda4afbeb03fa09(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ecaef4798eae26259b54b6653477577c0009b75c28df7602e1acc021dd499980(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__217edd3c09f22615edf41f92b73ddd28cc6a010c49a3f9927dd7ccd81bb0fbf1(
    value: typing.List[builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d8f185aba6279b376ab420908942f2d5088e5f6d1a076762cb9a439cf3ac0b5(
    value: typing.Optional[MedialiveChannelVpc],
) -> None:
    """Type checking stubs"""
    pass
