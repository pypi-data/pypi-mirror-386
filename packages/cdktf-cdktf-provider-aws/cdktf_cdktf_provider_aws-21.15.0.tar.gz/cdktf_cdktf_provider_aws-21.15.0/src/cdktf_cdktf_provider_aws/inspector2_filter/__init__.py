r'''
# `aws_inspector2_filter`

Refer to the Terraform Registry for docs: [`aws_inspector2_filter`](https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter).
'''
from pkgutil import extend_path
__path__ = extend_path(__path__, __name__)

import abc
import builtins
import datetime
import enum
import typing

import jsii
import publication
import typing_extensions

import typeguard
from importlib.metadata import version as _metadata_package_version
TYPEGUARD_MAJOR_VERSION = int(_metadata_package_version('typeguard').split('.')[0])

def check_type(argname: str, value: object, expected_type: typing.Any) -> typing.Any:
    if TYPEGUARD_MAJOR_VERSION <= 2:
        return typeguard.check_type(argname=argname, value=value, expected_type=expected_type) # type:ignore
    else:
        if isinstance(value, jsii._reference_map.InterfaceDynamicProxy): # pyright: ignore [reportAttributeAccessIssue]
           pass
        else:
            if TYPEGUARD_MAJOR_VERSION == 3:
                typeguard.config.collection_check_strategy = typeguard.CollectionCheckStrategy.ALL_ITEMS # type:ignore
                typeguard.check_type(value=value, expected_type=expected_type) # type:ignore
            else:
                typeguard.check_type(value=value, expected_type=expected_type, collection_check_strategy=typeguard.CollectionCheckStrategy.ALL_ITEMS) # type:ignore

from .._jsii import *

import cdktf as _cdktf_9a9027ec
import constructs as _constructs_77d1e7e8


class Inspector2Filter(
    _cdktf_9a9027ec.TerraformResource,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2Filter",
):
    '''Represents a {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter aws_inspector2_filter}.'''

    def __init__(
        self,
        scope: _constructs_77d1e7e8.Construct,
        id: builtins.str,
        *,
        action: builtins.str,
        name: builtins.str,
        description: typing.Optional[builtins.str] = None,
        filter_criteria: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteria", typing.Dict[builtins.str, typing.Any]]]]] = None,
        reason: typing.Optional[builtins.str] = None,
        region: typing.Optional[builtins.str] = None,
        tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''Create a new {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter aws_inspector2_filter} Resource.

        :param scope: The scope in which to define this construct.
        :param id: The scoped construct ID. Must be unique amongst siblings in the same scope
        :param action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#action Inspector2Filter#action}.
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#name Inspector2Filter#name}.
        :param description: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#description Inspector2Filter#description}.
        :param filter_criteria: filter_criteria block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#filter_criteria Inspector2Filter#filter_criteria}
        :param reason: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#reason Inspector2Filter#reason}.
        :param region: Region where this resource will be `managed <https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints>`_. Defaults to the Region set in the `provider configuration <https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference>`_. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#region Inspector2Filter#region}
        :param tags: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#tags Inspector2Filter#tags}.
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12f9c10d57cb5e78e18b8f3cecb6ef5391597c18e70360a4274c87127137a892)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument id", value=id, expected_type=type_hints["id"])
        config = Inspector2FilterConfig(
            action=action,
            name=name,
            description=description,
            filter_criteria=filter_criteria,
            reason=reason,
            region=region,
            tags=tags,
            connection=connection,
            count=count,
            depends_on=depends_on,
            for_each=for_each,
            lifecycle=lifecycle,
            provider=provider,
            provisioners=provisioners,
        )

        jsii.create(self.__class__, self, [scope, id, config])

    @jsii.member(jsii_name="generateConfigForImport")
    @builtins.classmethod
    def generate_config_for_import(
        cls,
        scope: _constructs_77d1e7e8.Construct,
        import_to_id: builtins.str,
        import_from_id: builtins.str,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    ) -> _cdktf_9a9027ec.ImportableResource:
        '''Generates CDKTF code for importing a Inspector2Filter resource upon running "cdktf plan ".

        :param scope: The scope in which to define this construct.
        :param import_to_id: The construct id used in the generated config for the Inspector2Filter to import.
        :param import_from_id: The id of the existing Inspector2Filter that should be imported. Refer to the {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#import import section} in the documentation of this resource for the id to use
        :param provider: ? Optional instance of the provider where the Inspector2Filter to import is found.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df5e2ceab9945f544e00d34d0610a8573ab3e3d935e9d666ff74f71a61bfca70)
            check_type(argname="argument scope", value=scope, expected_type=type_hints["scope"])
            check_type(argname="argument import_to_id", value=import_to_id, expected_type=type_hints["import_to_id"])
            check_type(argname="argument import_from_id", value=import_from_id, expected_type=type_hints["import_from_id"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
        return typing.cast(_cdktf_9a9027ec.ImportableResource, jsii.sinvoke(cls, "generateConfigForImport", [scope, import_to_id, import_from_id, provider]))

    @jsii.member(jsii_name="putFilterCriteria")
    def put_filter_criteria(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteria", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6431aac6c54e1e83ef64040692c575966f4d050029197516a6a673dd4b3ecaf0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFilterCriteria", [value]))

    @jsii.member(jsii_name="resetDescription")
    def reset_description(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetDescription", []))

    @jsii.member(jsii_name="resetFilterCriteria")
    def reset_filter_criteria(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilterCriteria", []))

    @jsii.member(jsii_name="resetReason")
    def reset_reason(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetReason", []))

    @jsii.member(jsii_name="resetRegion")
    def reset_region(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRegion", []))

    @jsii.member(jsii_name="resetTags")
    def reset_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTags", []))

    @jsii.member(jsii_name="synthesizeAttributes")
    def _synthesize_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeAttributes", []))

    @jsii.member(jsii_name="synthesizeHclAttributes")
    def _synthesize_hcl_attributes(self) -> typing.Mapping[builtins.str, typing.Any]:
        return typing.cast(typing.Mapping[builtins.str, typing.Any], jsii.invoke(self, "synthesizeHclAttributes", []))

    @jsii.python.classproperty
    @jsii.member(jsii_name="tfResourceType")
    def TF_RESOURCE_TYPE(cls) -> builtins.str:
        return typing.cast(builtins.str, jsii.sget(cls, "tfResourceType"))

    @builtins.property
    @jsii.member(jsii_name="arn")
    def arn(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "arn"))

    @builtins.property
    @jsii.member(jsii_name="filterCriteria")
    def filter_criteria(self) -> "Inspector2FilterFilterCriteriaList":
        return typing.cast("Inspector2FilterFilterCriteriaList", jsii.get(self, "filterCriteria"))

    @builtins.property
    @jsii.member(jsii_name="tagsAll")
    def tags_all(self) -> _cdktf_9a9027ec.StringMap:
        return typing.cast(_cdktf_9a9027ec.StringMap, jsii.get(self, "tagsAll"))

    @builtins.property
    @jsii.member(jsii_name="actionInput")
    def action_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "actionInput"))

    @builtins.property
    @jsii.member(jsii_name="descriptionInput")
    def description_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "descriptionInput"))

    @builtins.property
    @jsii.member(jsii_name="filterCriteriaInput")
    def filter_criteria_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteria"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteria"]]], jsii.get(self, "filterCriteriaInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="reasonInput")
    def reason_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "reasonInput"))

    @builtins.property
    @jsii.member(jsii_name="regionInput")
    def region_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "regionInput"))

    @builtins.property
    @jsii.member(jsii_name="tagsInput")
    def tags_input(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], jsii.get(self, "tagsInput"))

    @builtins.property
    @jsii.member(jsii_name="action")
    def action(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "action"))

    @action.setter
    def action(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d3d7a59abcebb54165c9be3a3c578d781ef13588efed1bd67b43ea1f81941e2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "action", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="description")
    def description(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "description"))

    @description.setter
    def description(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b44a83cd810d19e2cbbaf613c4f8f6a7758d64ba7edfc8f20e1481af4957dec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "description", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "name"))

    @name.setter
    def name(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de2c9a50d01eef5890fe004ac1f219b00acc4274cd1d4c4fbe4eee88af24f75e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "name", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="reason")
    def reason(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "reason"))

    @reason.setter
    def reason(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b213beed5424fa0b77983dc09272a159d03c54122bc94375861ece1164277557)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "reason", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="region")
    def region(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "region"))

    @region.setter
    def region(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9eacc743e0a2a4b2eb8924b353d3f650ffb95117a97bd795aa3b747fae8d707d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "region", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="tags")
    def tags(self) -> typing.Mapping[builtins.str, builtins.str]:
        return typing.cast(typing.Mapping[builtins.str, builtins.str], jsii.get(self, "tags"))

    @tags.setter
    def tags(self, value: typing.Mapping[builtins.str, builtins.str]) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1934a2b26c8582750cf336b81f3b20597747453a7b76f4833951acf94acc1061)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "tags", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterConfig",
    jsii_struct_bases=[_cdktf_9a9027ec.TerraformMetaArguments],
    name_mapping={
        "connection": "connection",
        "count": "count",
        "depends_on": "dependsOn",
        "for_each": "forEach",
        "lifecycle": "lifecycle",
        "provider": "provider",
        "provisioners": "provisioners",
        "action": "action",
        "name": "name",
        "description": "description",
        "filter_criteria": "filterCriteria",
        "reason": "reason",
        "region": "region",
        "tags": "tags",
    },
)
class Inspector2FilterConfig(_cdktf_9a9027ec.TerraformMetaArguments):
    def __init__(
        self,
        *,
        connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
        count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
        depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
        for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
        lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
        provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
        provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
        action: builtins.str,
        name: builtins.str,
        description: typing.Optional[builtins.str] = None,
        filter_criteria: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteria", typing.Dict[builtins.str, typing.Any]]]]] = None,
        reason: typing.Optional[builtins.str] = None,
        region: typing.Optional[builtins.str] = None,
        tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    ) -> None:
        '''
        :param connection: 
        :param count: 
        :param depends_on: 
        :param for_each: 
        :param lifecycle: 
        :param provider: 
        :param provisioners: 
        :param action: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#action Inspector2Filter#action}.
        :param name: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#name Inspector2Filter#name}.
        :param description: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#description Inspector2Filter#description}.
        :param filter_criteria: filter_criteria block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#filter_criteria Inspector2Filter#filter_criteria}
        :param reason: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#reason Inspector2Filter#reason}.
        :param region: Region where this resource will be `managed <https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints>`_. Defaults to the Region set in the `provider configuration <https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference>`_. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#region Inspector2Filter#region}
        :param tags: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#tags Inspector2Filter#tags}.
        '''
        if isinstance(lifecycle, dict):
            lifecycle = _cdktf_9a9027ec.TerraformResourceLifecycle(**lifecycle)
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a8af0e2e4c6673331afa6485355a9079ca0b1a35a4aa39fadd2e52f35add3c83)
            check_type(argname="argument connection", value=connection, expected_type=type_hints["connection"])
            check_type(argname="argument count", value=count, expected_type=type_hints["count"])
            check_type(argname="argument depends_on", value=depends_on, expected_type=type_hints["depends_on"])
            check_type(argname="argument for_each", value=for_each, expected_type=type_hints["for_each"])
            check_type(argname="argument lifecycle", value=lifecycle, expected_type=type_hints["lifecycle"])
            check_type(argname="argument provider", value=provider, expected_type=type_hints["provider"])
            check_type(argname="argument provisioners", value=provisioners, expected_type=type_hints["provisioners"])
            check_type(argname="argument action", value=action, expected_type=type_hints["action"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument description", value=description, expected_type=type_hints["description"])
            check_type(argname="argument filter_criteria", value=filter_criteria, expected_type=type_hints["filter_criteria"])
            check_type(argname="argument reason", value=reason, expected_type=type_hints["reason"])
            check_type(argname="argument region", value=region, expected_type=type_hints["region"])
            check_type(argname="argument tags", value=tags, expected_type=type_hints["tags"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "action": action,
            "name": name,
        }
        if connection is not None:
            self._values["connection"] = connection
        if count is not None:
            self._values["count"] = count
        if depends_on is not None:
            self._values["depends_on"] = depends_on
        if for_each is not None:
            self._values["for_each"] = for_each
        if lifecycle is not None:
            self._values["lifecycle"] = lifecycle
        if provider is not None:
            self._values["provider"] = provider
        if provisioners is not None:
            self._values["provisioners"] = provisioners
        if description is not None:
            self._values["description"] = description
        if filter_criteria is not None:
            self._values["filter_criteria"] = filter_criteria
        if reason is not None:
            self._values["reason"] = reason
        if region is not None:
            self._values["region"] = region
        if tags is not None:
            self._values["tags"] = tags

    @builtins.property
    def connection(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("connection")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, _cdktf_9a9027ec.WinrmProvisionerConnection]], result)

    @builtins.property
    def count(
        self,
    ) -> typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("count")
        return typing.cast(typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]], result)

    @builtins.property
    def depends_on(
        self,
    ) -> typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("depends_on")
        return typing.cast(typing.Optional[typing.List[_cdktf_9a9027ec.ITerraformDependable]], result)

    @builtins.property
    def for_each(self) -> typing.Optional[_cdktf_9a9027ec.ITerraformIterator]:
        '''
        :stability: experimental
        '''
        result = self._values.get("for_each")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.ITerraformIterator], result)

    @builtins.property
    def lifecycle(self) -> typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle]:
        '''
        :stability: experimental
        '''
        result = self._values.get("lifecycle")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformResourceLifecycle], result)

    @builtins.property
    def provider(self) -> typing.Optional[_cdktf_9a9027ec.TerraformProvider]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provider")
        return typing.cast(typing.Optional[_cdktf_9a9027ec.TerraformProvider], result)

    @builtins.property
    def provisioners(
        self,
    ) -> typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]]:
        '''
        :stability: experimental
        '''
        result = self._values.get("provisioners")
        return typing.cast(typing.Optional[typing.List[typing.Union[_cdktf_9a9027ec.FileProvisioner, _cdktf_9a9027ec.LocalExecProvisioner, _cdktf_9a9027ec.RemoteExecProvisioner]]], result)

    @builtins.property
    def action(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#action Inspector2Filter#action}.'''
        result = self._values.get("action")
        assert result is not None, "Required property 'action' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def name(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#name Inspector2Filter#name}.'''
        result = self._values.get("name")
        assert result is not None, "Required property 'name' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def description(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#description Inspector2Filter#description}.'''
        result = self._values.get("description")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def filter_criteria(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteria"]]]:
        '''filter_criteria block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#filter_criteria Inspector2Filter#filter_criteria}
        '''
        result = self._values.get("filter_criteria")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteria"]]], result)

    @builtins.property
    def reason(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#reason Inspector2Filter#reason}.'''
        result = self._values.get("reason")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def region(self) -> typing.Optional[builtins.str]:
        '''Region where this resource will be `managed <https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints>`_. Defaults to the Region set in the `provider configuration <https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference>`_.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#region Inspector2Filter#region}
        '''
        result = self._values.get("region")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def tags(self) -> typing.Optional[typing.Mapping[builtins.str, builtins.str]]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#tags Inspector2Filter#tags}.'''
        result = self._values.get("tags")
        return typing.cast(typing.Optional[typing.Mapping[builtins.str, builtins.str]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterConfig(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteria",
    jsii_struct_bases=[],
    name_mapping={
        "aws_account_id": "awsAccountId",
        "code_repository_project_name": "codeRepositoryProjectName",
        "code_repository_provider_type": "codeRepositoryProviderType",
        "code_vulnerability_detector_name": "codeVulnerabilityDetectorName",
        "code_vulnerability_detector_tags": "codeVulnerabilityDetectorTags",
        "code_vulnerability_file_path": "codeVulnerabilityFilePath",
        "component_id": "componentId",
        "component_type": "componentType",
        "ec2_instance_image_id": "ec2InstanceImageId",
        "ec2_instance_subnet_id": "ec2InstanceSubnetId",
        "ec2_instance_vpc_id": "ec2InstanceVpcId",
        "ecr_image_architecture": "ecrImageArchitecture",
        "ecr_image_hash": "ecrImageHash",
        "ecr_image_in_use_count": "ecrImageInUseCount",
        "ecr_image_last_in_use_at": "ecrImageLastInUseAt",
        "ecr_image_pushed_at": "ecrImagePushedAt",
        "ecr_image_registry": "ecrImageRegistry",
        "ecr_image_repository_name": "ecrImageRepositoryName",
        "ecr_image_tags": "ecrImageTags",
        "epss_score": "epssScore",
        "exploit_available": "exploitAvailable",
        "finding_arn": "findingArn",
        "finding_status": "findingStatus",
        "finding_type": "findingType",
        "first_observed_at": "firstObservedAt",
        "fix_available": "fixAvailable",
        "inspector_score": "inspectorScore",
        "lambda_function_execution_role_arn": "lambdaFunctionExecutionRoleArn",
        "lambda_function_last_modified_at": "lambdaFunctionLastModifiedAt",
        "lambda_function_layers": "lambdaFunctionLayers",
        "lambda_function_name": "lambdaFunctionName",
        "lambda_function_runtime": "lambdaFunctionRuntime",
        "last_observed_at": "lastObservedAt",
        "network_protocol": "networkProtocol",
        "port_range": "portRange",
        "related_vulnerabilities": "relatedVulnerabilities",
        "resource_id": "resourceId",
        "resource_tags": "resourceTags",
        "resource_type": "resourceType",
        "severity": "severity",
        "title": "title",
        "updated_at": "updatedAt",
        "vendor_severity": "vendorSeverity",
        "vulnerability_id": "vulnerabilityId",
        "vulnerability_source": "vulnerabilitySource",
        "vulnerable_packages": "vulnerablePackages",
    },
)
class Inspector2FilterFilterCriteria:
    def __init__(
        self,
        *,
        aws_account_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaAwsAccountId", typing.Dict[builtins.str, typing.Any]]]]] = None,
        code_repository_project_name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaCodeRepositoryProjectName", typing.Dict[builtins.str, typing.Any]]]]] = None,
        code_repository_provider_type: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaCodeRepositoryProviderType", typing.Dict[builtins.str, typing.Any]]]]] = None,
        code_vulnerability_detector_name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName", typing.Dict[builtins.str, typing.Any]]]]] = None,
        code_vulnerability_detector_tags: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags", typing.Dict[builtins.str, typing.Any]]]]] = None,
        code_vulnerability_file_path: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath", typing.Dict[builtins.str, typing.Any]]]]] = None,
        component_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaComponentId", typing.Dict[builtins.str, typing.Any]]]]] = None,
        component_type: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaComponentType", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ec2_instance_image_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEc2InstanceImageId", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ec2_instance_subnet_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEc2InstanceSubnetId", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ec2_instance_vpc_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEc2InstanceVpcId", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ecr_image_architecture: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEcrImageArchitecture", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ecr_image_hash: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEcrImageHash", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ecr_image_in_use_count: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEcrImageInUseCount", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ecr_image_last_in_use_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEcrImageLastInUseAt", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ecr_image_pushed_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEcrImagePushedAt", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ecr_image_registry: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEcrImageRegistry", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ecr_image_repository_name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEcrImageRepositoryName", typing.Dict[builtins.str, typing.Any]]]]] = None,
        ecr_image_tags: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEcrImageTags", typing.Dict[builtins.str, typing.Any]]]]] = None,
        epss_score: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaEpssScore", typing.Dict[builtins.str, typing.Any]]]]] = None,
        exploit_available: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaExploitAvailable", typing.Dict[builtins.str, typing.Any]]]]] = None,
        finding_arn: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaFindingArn", typing.Dict[builtins.str, typing.Any]]]]] = None,
        finding_status: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaFindingStatus", typing.Dict[builtins.str, typing.Any]]]]] = None,
        finding_type: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaFindingType", typing.Dict[builtins.str, typing.Any]]]]] = None,
        first_observed_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaFirstObservedAt", typing.Dict[builtins.str, typing.Any]]]]] = None,
        fix_available: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaFixAvailable", typing.Dict[builtins.str, typing.Any]]]]] = None,
        inspector_score: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaInspectorScore", typing.Dict[builtins.str, typing.Any]]]]] = None,
        lambda_function_execution_role_arn: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn", typing.Dict[builtins.str, typing.Any]]]]] = None,
        lambda_function_last_modified_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt", typing.Dict[builtins.str, typing.Any]]]]] = None,
        lambda_function_layers: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaLambdaFunctionLayers", typing.Dict[builtins.str, typing.Any]]]]] = None,
        lambda_function_name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaLambdaFunctionName", typing.Dict[builtins.str, typing.Any]]]]] = None,
        lambda_function_runtime: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaLambdaFunctionRuntime", typing.Dict[builtins.str, typing.Any]]]]] = None,
        last_observed_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaLastObservedAt", typing.Dict[builtins.str, typing.Any]]]]] = None,
        network_protocol: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaNetworkProtocol", typing.Dict[builtins.str, typing.Any]]]]] = None,
        port_range: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaPortRange", typing.Dict[builtins.str, typing.Any]]]]] = None,
        related_vulnerabilities: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaRelatedVulnerabilities", typing.Dict[builtins.str, typing.Any]]]]] = None,
        resource_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaResourceId", typing.Dict[builtins.str, typing.Any]]]]] = None,
        resource_tags: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaResourceTags", typing.Dict[builtins.str, typing.Any]]]]] = None,
        resource_type: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaResourceType", typing.Dict[builtins.str, typing.Any]]]]] = None,
        severity: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaSeverity", typing.Dict[builtins.str, typing.Any]]]]] = None,
        title: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaTitle", typing.Dict[builtins.str, typing.Any]]]]] = None,
        updated_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaUpdatedAt", typing.Dict[builtins.str, typing.Any]]]]] = None,
        vendor_severity: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVendorSeverity", typing.Dict[builtins.str, typing.Any]]]]] = None,
        vulnerability_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerabilityId", typing.Dict[builtins.str, typing.Any]]]]] = None,
        vulnerability_source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerabilitySource", typing.Dict[builtins.str, typing.Any]]]]] = None,
        vulnerable_packages: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackages", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param aws_account_id: aws_account_id block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#aws_account_id Inspector2Filter#aws_account_id}
        :param code_repository_project_name: code_repository_project_name block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_repository_project_name Inspector2Filter#code_repository_project_name}
        :param code_repository_provider_type: code_repository_provider_type block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_repository_provider_type Inspector2Filter#code_repository_provider_type}
        :param code_vulnerability_detector_name: code_vulnerability_detector_name block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_vulnerability_detector_name Inspector2Filter#code_vulnerability_detector_name}
        :param code_vulnerability_detector_tags: code_vulnerability_detector_tags block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_vulnerability_detector_tags Inspector2Filter#code_vulnerability_detector_tags}
        :param code_vulnerability_file_path: code_vulnerability_file_path block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_vulnerability_file_path Inspector2Filter#code_vulnerability_file_path}
        :param component_id: component_id block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#component_id Inspector2Filter#component_id}
        :param component_type: component_type block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#component_type Inspector2Filter#component_type}
        :param ec2_instance_image_id: ec2_instance_image_id block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ec2_instance_image_id Inspector2Filter#ec2_instance_image_id}
        :param ec2_instance_subnet_id: ec2_instance_subnet_id block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ec2_instance_subnet_id Inspector2Filter#ec2_instance_subnet_id}
        :param ec2_instance_vpc_id: ec2_instance_vpc_id block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ec2_instance_vpc_id Inspector2Filter#ec2_instance_vpc_id}
        :param ecr_image_architecture: ecr_image_architecture block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_architecture Inspector2Filter#ecr_image_architecture}
        :param ecr_image_hash: ecr_image_hash block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_hash Inspector2Filter#ecr_image_hash}
        :param ecr_image_in_use_count: ecr_image_in_use_count block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_in_use_count Inspector2Filter#ecr_image_in_use_count}
        :param ecr_image_last_in_use_at: ecr_image_last_in_use_at block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_last_in_use_at Inspector2Filter#ecr_image_last_in_use_at}
        :param ecr_image_pushed_at: ecr_image_pushed_at block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_pushed_at Inspector2Filter#ecr_image_pushed_at}
        :param ecr_image_registry: ecr_image_registry block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_registry Inspector2Filter#ecr_image_registry}
        :param ecr_image_repository_name: ecr_image_repository_name block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_repository_name Inspector2Filter#ecr_image_repository_name}
        :param ecr_image_tags: ecr_image_tags block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_tags Inspector2Filter#ecr_image_tags}
        :param epss_score: epss_score block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#epss_score Inspector2Filter#epss_score}
        :param exploit_available: exploit_available block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#exploit_available Inspector2Filter#exploit_available}
        :param finding_arn: finding_arn block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#finding_arn Inspector2Filter#finding_arn}
        :param finding_status: finding_status block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#finding_status Inspector2Filter#finding_status}
        :param finding_type: finding_type block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#finding_type Inspector2Filter#finding_type}
        :param first_observed_at: first_observed_at block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#first_observed_at Inspector2Filter#first_observed_at}
        :param fix_available: fix_available block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#fix_available Inspector2Filter#fix_available}
        :param inspector_score: inspector_score block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#inspector_score Inspector2Filter#inspector_score}
        :param lambda_function_execution_role_arn: lambda_function_execution_role_arn block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_execution_role_arn Inspector2Filter#lambda_function_execution_role_arn}
        :param lambda_function_last_modified_at: lambda_function_last_modified_at block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_last_modified_at Inspector2Filter#lambda_function_last_modified_at}
        :param lambda_function_layers: lambda_function_layers block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_layers Inspector2Filter#lambda_function_layers}
        :param lambda_function_name: lambda_function_name block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_name Inspector2Filter#lambda_function_name}
        :param lambda_function_runtime: lambda_function_runtime block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_runtime Inspector2Filter#lambda_function_runtime}
        :param last_observed_at: last_observed_at block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#last_observed_at Inspector2Filter#last_observed_at}
        :param network_protocol: network_protocol block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#network_protocol Inspector2Filter#network_protocol}
        :param port_range: port_range block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#port_range Inspector2Filter#port_range}
        :param related_vulnerabilities: related_vulnerabilities block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#related_vulnerabilities Inspector2Filter#related_vulnerabilities}
        :param resource_id: resource_id block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#resource_id Inspector2Filter#resource_id}
        :param resource_tags: resource_tags block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#resource_tags Inspector2Filter#resource_tags}
        :param resource_type: resource_type block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#resource_type Inspector2Filter#resource_type}
        :param severity: severity block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#severity Inspector2Filter#severity}
        :param title: title block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#title Inspector2Filter#title}
        :param updated_at: updated_at block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#updated_at Inspector2Filter#updated_at}
        :param vendor_severity: vendor_severity block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#vendor_severity Inspector2Filter#vendor_severity}
        :param vulnerability_id: vulnerability_id block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#vulnerability_id Inspector2Filter#vulnerability_id}
        :param vulnerability_source: vulnerability_source block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#vulnerability_source Inspector2Filter#vulnerability_source}
        :param vulnerable_packages: vulnerable_packages block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#vulnerable_packages Inspector2Filter#vulnerable_packages}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5666efa08acb27a7c5ce4cba127a939042c48c874ff2b464223a132d02a45e37)
            check_type(argname="argument aws_account_id", value=aws_account_id, expected_type=type_hints["aws_account_id"])
            check_type(argname="argument code_repository_project_name", value=code_repository_project_name, expected_type=type_hints["code_repository_project_name"])
            check_type(argname="argument code_repository_provider_type", value=code_repository_provider_type, expected_type=type_hints["code_repository_provider_type"])
            check_type(argname="argument code_vulnerability_detector_name", value=code_vulnerability_detector_name, expected_type=type_hints["code_vulnerability_detector_name"])
            check_type(argname="argument code_vulnerability_detector_tags", value=code_vulnerability_detector_tags, expected_type=type_hints["code_vulnerability_detector_tags"])
            check_type(argname="argument code_vulnerability_file_path", value=code_vulnerability_file_path, expected_type=type_hints["code_vulnerability_file_path"])
            check_type(argname="argument component_id", value=component_id, expected_type=type_hints["component_id"])
            check_type(argname="argument component_type", value=component_type, expected_type=type_hints["component_type"])
            check_type(argname="argument ec2_instance_image_id", value=ec2_instance_image_id, expected_type=type_hints["ec2_instance_image_id"])
            check_type(argname="argument ec2_instance_subnet_id", value=ec2_instance_subnet_id, expected_type=type_hints["ec2_instance_subnet_id"])
            check_type(argname="argument ec2_instance_vpc_id", value=ec2_instance_vpc_id, expected_type=type_hints["ec2_instance_vpc_id"])
            check_type(argname="argument ecr_image_architecture", value=ecr_image_architecture, expected_type=type_hints["ecr_image_architecture"])
            check_type(argname="argument ecr_image_hash", value=ecr_image_hash, expected_type=type_hints["ecr_image_hash"])
            check_type(argname="argument ecr_image_in_use_count", value=ecr_image_in_use_count, expected_type=type_hints["ecr_image_in_use_count"])
            check_type(argname="argument ecr_image_last_in_use_at", value=ecr_image_last_in_use_at, expected_type=type_hints["ecr_image_last_in_use_at"])
            check_type(argname="argument ecr_image_pushed_at", value=ecr_image_pushed_at, expected_type=type_hints["ecr_image_pushed_at"])
            check_type(argname="argument ecr_image_registry", value=ecr_image_registry, expected_type=type_hints["ecr_image_registry"])
            check_type(argname="argument ecr_image_repository_name", value=ecr_image_repository_name, expected_type=type_hints["ecr_image_repository_name"])
            check_type(argname="argument ecr_image_tags", value=ecr_image_tags, expected_type=type_hints["ecr_image_tags"])
            check_type(argname="argument epss_score", value=epss_score, expected_type=type_hints["epss_score"])
            check_type(argname="argument exploit_available", value=exploit_available, expected_type=type_hints["exploit_available"])
            check_type(argname="argument finding_arn", value=finding_arn, expected_type=type_hints["finding_arn"])
            check_type(argname="argument finding_status", value=finding_status, expected_type=type_hints["finding_status"])
            check_type(argname="argument finding_type", value=finding_type, expected_type=type_hints["finding_type"])
            check_type(argname="argument first_observed_at", value=first_observed_at, expected_type=type_hints["first_observed_at"])
            check_type(argname="argument fix_available", value=fix_available, expected_type=type_hints["fix_available"])
            check_type(argname="argument inspector_score", value=inspector_score, expected_type=type_hints["inspector_score"])
            check_type(argname="argument lambda_function_execution_role_arn", value=lambda_function_execution_role_arn, expected_type=type_hints["lambda_function_execution_role_arn"])
            check_type(argname="argument lambda_function_last_modified_at", value=lambda_function_last_modified_at, expected_type=type_hints["lambda_function_last_modified_at"])
            check_type(argname="argument lambda_function_layers", value=lambda_function_layers, expected_type=type_hints["lambda_function_layers"])
            check_type(argname="argument lambda_function_name", value=lambda_function_name, expected_type=type_hints["lambda_function_name"])
            check_type(argname="argument lambda_function_runtime", value=lambda_function_runtime, expected_type=type_hints["lambda_function_runtime"])
            check_type(argname="argument last_observed_at", value=last_observed_at, expected_type=type_hints["last_observed_at"])
            check_type(argname="argument network_protocol", value=network_protocol, expected_type=type_hints["network_protocol"])
            check_type(argname="argument port_range", value=port_range, expected_type=type_hints["port_range"])
            check_type(argname="argument related_vulnerabilities", value=related_vulnerabilities, expected_type=type_hints["related_vulnerabilities"])
            check_type(argname="argument resource_id", value=resource_id, expected_type=type_hints["resource_id"])
            check_type(argname="argument resource_tags", value=resource_tags, expected_type=type_hints["resource_tags"])
            check_type(argname="argument resource_type", value=resource_type, expected_type=type_hints["resource_type"])
            check_type(argname="argument severity", value=severity, expected_type=type_hints["severity"])
            check_type(argname="argument title", value=title, expected_type=type_hints["title"])
            check_type(argname="argument updated_at", value=updated_at, expected_type=type_hints["updated_at"])
            check_type(argname="argument vendor_severity", value=vendor_severity, expected_type=type_hints["vendor_severity"])
            check_type(argname="argument vulnerability_id", value=vulnerability_id, expected_type=type_hints["vulnerability_id"])
            check_type(argname="argument vulnerability_source", value=vulnerability_source, expected_type=type_hints["vulnerability_source"])
            check_type(argname="argument vulnerable_packages", value=vulnerable_packages, expected_type=type_hints["vulnerable_packages"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if aws_account_id is not None:
            self._values["aws_account_id"] = aws_account_id
        if code_repository_project_name is not None:
            self._values["code_repository_project_name"] = code_repository_project_name
        if code_repository_provider_type is not None:
            self._values["code_repository_provider_type"] = code_repository_provider_type
        if code_vulnerability_detector_name is not None:
            self._values["code_vulnerability_detector_name"] = code_vulnerability_detector_name
        if code_vulnerability_detector_tags is not None:
            self._values["code_vulnerability_detector_tags"] = code_vulnerability_detector_tags
        if code_vulnerability_file_path is not None:
            self._values["code_vulnerability_file_path"] = code_vulnerability_file_path
        if component_id is not None:
            self._values["component_id"] = component_id
        if component_type is not None:
            self._values["component_type"] = component_type
        if ec2_instance_image_id is not None:
            self._values["ec2_instance_image_id"] = ec2_instance_image_id
        if ec2_instance_subnet_id is not None:
            self._values["ec2_instance_subnet_id"] = ec2_instance_subnet_id
        if ec2_instance_vpc_id is not None:
            self._values["ec2_instance_vpc_id"] = ec2_instance_vpc_id
        if ecr_image_architecture is not None:
            self._values["ecr_image_architecture"] = ecr_image_architecture
        if ecr_image_hash is not None:
            self._values["ecr_image_hash"] = ecr_image_hash
        if ecr_image_in_use_count is not None:
            self._values["ecr_image_in_use_count"] = ecr_image_in_use_count
        if ecr_image_last_in_use_at is not None:
            self._values["ecr_image_last_in_use_at"] = ecr_image_last_in_use_at
        if ecr_image_pushed_at is not None:
            self._values["ecr_image_pushed_at"] = ecr_image_pushed_at
        if ecr_image_registry is not None:
            self._values["ecr_image_registry"] = ecr_image_registry
        if ecr_image_repository_name is not None:
            self._values["ecr_image_repository_name"] = ecr_image_repository_name
        if ecr_image_tags is not None:
            self._values["ecr_image_tags"] = ecr_image_tags
        if epss_score is not None:
            self._values["epss_score"] = epss_score
        if exploit_available is not None:
            self._values["exploit_available"] = exploit_available
        if finding_arn is not None:
            self._values["finding_arn"] = finding_arn
        if finding_status is not None:
            self._values["finding_status"] = finding_status
        if finding_type is not None:
            self._values["finding_type"] = finding_type
        if first_observed_at is not None:
            self._values["first_observed_at"] = first_observed_at
        if fix_available is not None:
            self._values["fix_available"] = fix_available
        if inspector_score is not None:
            self._values["inspector_score"] = inspector_score
        if lambda_function_execution_role_arn is not None:
            self._values["lambda_function_execution_role_arn"] = lambda_function_execution_role_arn
        if lambda_function_last_modified_at is not None:
            self._values["lambda_function_last_modified_at"] = lambda_function_last_modified_at
        if lambda_function_layers is not None:
            self._values["lambda_function_layers"] = lambda_function_layers
        if lambda_function_name is not None:
            self._values["lambda_function_name"] = lambda_function_name
        if lambda_function_runtime is not None:
            self._values["lambda_function_runtime"] = lambda_function_runtime
        if last_observed_at is not None:
            self._values["last_observed_at"] = last_observed_at
        if network_protocol is not None:
            self._values["network_protocol"] = network_protocol
        if port_range is not None:
            self._values["port_range"] = port_range
        if related_vulnerabilities is not None:
            self._values["related_vulnerabilities"] = related_vulnerabilities
        if resource_id is not None:
            self._values["resource_id"] = resource_id
        if resource_tags is not None:
            self._values["resource_tags"] = resource_tags
        if resource_type is not None:
            self._values["resource_type"] = resource_type
        if severity is not None:
            self._values["severity"] = severity
        if title is not None:
            self._values["title"] = title
        if updated_at is not None:
            self._values["updated_at"] = updated_at
        if vendor_severity is not None:
            self._values["vendor_severity"] = vendor_severity
        if vulnerability_id is not None:
            self._values["vulnerability_id"] = vulnerability_id
        if vulnerability_source is not None:
            self._values["vulnerability_source"] = vulnerability_source
        if vulnerable_packages is not None:
            self._values["vulnerable_packages"] = vulnerable_packages

    @builtins.property
    def aws_account_id(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaAwsAccountId"]]]:
        '''aws_account_id block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#aws_account_id Inspector2Filter#aws_account_id}
        '''
        result = self._values.get("aws_account_id")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaAwsAccountId"]]], result)

    @builtins.property
    def code_repository_project_name(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeRepositoryProjectName"]]]:
        '''code_repository_project_name block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_repository_project_name Inspector2Filter#code_repository_project_name}
        '''
        result = self._values.get("code_repository_project_name")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeRepositoryProjectName"]]], result)

    @builtins.property
    def code_repository_provider_type(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeRepositoryProviderType"]]]:
        '''code_repository_provider_type block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_repository_provider_type Inspector2Filter#code_repository_provider_type}
        '''
        result = self._values.get("code_repository_provider_type")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeRepositoryProviderType"]]], result)

    @builtins.property
    def code_vulnerability_detector_name(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName"]]]:
        '''code_vulnerability_detector_name block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_vulnerability_detector_name Inspector2Filter#code_vulnerability_detector_name}
        '''
        result = self._values.get("code_vulnerability_detector_name")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName"]]], result)

    @builtins.property
    def code_vulnerability_detector_tags(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags"]]]:
        '''code_vulnerability_detector_tags block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_vulnerability_detector_tags Inspector2Filter#code_vulnerability_detector_tags}
        '''
        result = self._values.get("code_vulnerability_detector_tags")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags"]]], result)

    @builtins.property
    def code_vulnerability_file_path(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath"]]]:
        '''code_vulnerability_file_path block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#code_vulnerability_file_path Inspector2Filter#code_vulnerability_file_path}
        '''
        result = self._values.get("code_vulnerability_file_path")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath"]]], result)

    @builtins.property
    def component_id(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaComponentId"]]]:
        '''component_id block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#component_id Inspector2Filter#component_id}
        '''
        result = self._values.get("component_id")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaComponentId"]]], result)

    @builtins.property
    def component_type(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaComponentType"]]]:
        '''component_type block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#component_type Inspector2Filter#component_type}
        '''
        result = self._values.get("component_type")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaComponentType"]]], result)

    @builtins.property
    def ec2_instance_image_id(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEc2InstanceImageId"]]]:
        '''ec2_instance_image_id block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ec2_instance_image_id Inspector2Filter#ec2_instance_image_id}
        '''
        result = self._values.get("ec2_instance_image_id")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEc2InstanceImageId"]]], result)

    @builtins.property
    def ec2_instance_subnet_id(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEc2InstanceSubnetId"]]]:
        '''ec2_instance_subnet_id block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ec2_instance_subnet_id Inspector2Filter#ec2_instance_subnet_id}
        '''
        result = self._values.get("ec2_instance_subnet_id")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEc2InstanceSubnetId"]]], result)

    @builtins.property
    def ec2_instance_vpc_id(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEc2InstanceVpcId"]]]:
        '''ec2_instance_vpc_id block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ec2_instance_vpc_id Inspector2Filter#ec2_instance_vpc_id}
        '''
        result = self._values.get("ec2_instance_vpc_id")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEc2InstanceVpcId"]]], result)

    @builtins.property
    def ecr_image_architecture(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageArchitecture"]]]:
        '''ecr_image_architecture block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_architecture Inspector2Filter#ecr_image_architecture}
        '''
        result = self._values.get("ecr_image_architecture")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageArchitecture"]]], result)

    @builtins.property
    def ecr_image_hash(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageHash"]]]:
        '''ecr_image_hash block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_hash Inspector2Filter#ecr_image_hash}
        '''
        result = self._values.get("ecr_image_hash")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageHash"]]], result)

    @builtins.property
    def ecr_image_in_use_count(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageInUseCount"]]]:
        '''ecr_image_in_use_count block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_in_use_count Inspector2Filter#ecr_image_in_use_count}
        '''
        result = self._values.get("ecr_image_in_use_count")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageInUseCount"]]], result)

    @builtins.property
    def ecr_image_last_in_use_at(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageLastInUseAt"]]]:
        '''ecr_image_last_in_use_at block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_last_in_use_at Inspector2Filter#ecr_image_last_in_use_at}
        '''
        result = self._values.get("ecr_image_last_in_use_at")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageLastInUseAt"]]], result)

    @builtins.property
    def ecr_image_pushed_at(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImagePushedAt"]]]:
        '''ecr_image_pushed_at block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_pushed_at Inspector2Filter#ecr_image_pushed_at}
        '''
        result = self._values.get("ecr_image_pushed_at")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImagePushedAt"]]], result)

    @builtins.property
    def ecr_image_registry(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageRegistry"]]]:
        '''ecr_image_registry block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_registry Inspector2Filter#ecr_image_registry}
        '''
        result = self._values.get("ecr_image_registry")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageRegistry"]]], result)

    @builtins.property
    def ecr_image_repository_name(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageRepositoryName"]]]:
        '''ecr_image_repository_name block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_repository_name Inspector2Filter#ecr_image_repository_name}
        '''
        result = self._values.get("ecr_image_repository_name")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageRepositoryName"]]], result)

    @builtins.property
    def ecr_image_tags(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageTags"]]]:
        '''ecr_image_tags block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#ecr_image_tags Inspector2Filter#ecr_image_tags}
        '''
        result = self._values.get("ecr_image_tags")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEcrImageTags"]]], result)

    @builtins.property
    def epss_score(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEpssScore"]]]:
        '''epss_score block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#epss_score Inspector2Filter#epss_score}
        '''
        result = self._values.get("epss_score")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaEpssScore"]]], result)

    @builtins.property
    def exploit_available(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaExploitAvailable"]]]:
        '''exploit_available block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#exploit_available Inspector2Filter#exploit_available}
        '''
        result = self._values.get("exploit_available")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaExploitAvailable"]]], result)

    @builtins.property
    def finding_arn(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFindingArn"]]]:
        '''finding_arn block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#finding_arn Inspector2Filter#finding_arn}
        '''
        result = self._values.get("finding_arn")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFindingArn"]]], result)

    @builtins.property
    def finding_status(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFindingStatus"]]]:
        '''finding_status block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#finding_status Inspector2Filter#finding_status}
        '''
        result = self._values.get("finding_status")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFindingStatus"]]], result)

    @builtins.property
    def finding_type(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFindingType"]]]:
        '''finding_type block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#finding_type Inspector2Filter#finding_type}
        '''
        result = self._values.get("finding_type")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFindingType"]]], result)

    @builtins.property
    def first_observed_at(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFirstObservedAt"]]]:
        '''first_observed_at block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#first_observed_at Inspector2Filter#first_observed_at}
        '''
        result = self._values.get("first_observed_at")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFirstObservedAt"]]], result)

    @builtins.property
    def fix_available(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFixAvailable"]]]:
        '''fix_available block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#fix_available Inspector2Filter#fix_available}
        '''
        result = self._values.get("fix_available")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaFixAvailable"]]], result)

    @builtins.property
    def inspector_score(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaInspectorScore"]]]:
        '''inspector_score block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#inspector_score Inspector2Filter#inspector_score}
        '''
        result = self._values.get("inspector_score")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaInspectorScore"]]], result)

    @builtins.property
    def lambda_function_execution_role_arn(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn"]]]:
        '''lambda_function_execution_role_arn block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_execution_role_arn Inspector2Filter#lambda_function_execution_role_arn}
        '''
        result = self._values.get("lambda_function_execution_role_arn")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn"]]], result)

    @builtins.property
    def lambda_function_last_modified_at(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt"]]]:
        '''lambda_function_last_modified_at block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_last_modified_at Inspector2Filter#lambda_function_last_modified_at}
        '''
        result = self._values.get("lambda_function_last_modified_at")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt"]]], result)

    @builtins.property
    def lambda_function_layers(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionLayers"]]]:
        '''lambda_function_layers block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_layers Inspector2Filter#lambda_function_layers}
        '''
        result = self._values.get("lambda_function_layers")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionLayers"]]], result)

    @builtins.property
    def lambda_function_name(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionName"]]]:
        '''lambda_function_name block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_name Inspector2Filter#lambda_function_name}
        '''
        result = self._values.get("lambda_function_name")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionName"]]], result)

    @builtins.property
    def lambda_function_runtime(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionRuntime"]]]:
        '''lambda_function_runtime block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lambda_function_runtime Inspector2Filter#lambda_function_runtime}
        '''
        result = self._values.get("lambda_function_runtime")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLambdaFunctionRuntime"]]], result)

    @builtins.property
    def last_observed_at(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLastObservedAt"]]]:
        '''last_observed_at block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#last_observed_at Inspector2Filter#last_observed_at}
        '''
        result = self._values.get("last_observed_at")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaLastObservedAt"]]], result)

    @builtins.property
    def network_protocol(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaNetworkProtocol"]]]:
        '''network_protocol block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#network_protocol Inspector2Filter#network_protocol}
        '''
        result = self._values.get("network_protocol")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaNetworkProtocol"]]], result)

    @builtins.property
    def port_range(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaPortRange"]]]:
        '''port_range block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#port_range Inspector2Filter#port_range}
        '''
        result = self._values.get("port_range")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaPortRange"]]], result)

    @builtins.property
    def related_vulnerabilities(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaRelatedVulnerabilities"]]]:
        '''related_vulnerabilities block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#related_vulnerabilities Inspector2Filter#related_vulnerabilities}
        '''
        result = self._values.get("related_vulnerabilities")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaRelatedVulnerabilities"]]], result)

    @builtins.property
    def resource_id(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceId"]]]:
        '''resource_id block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#resource_id Inspector2Filter#resource_id}
        '''
        result = self._values.get("resource_id")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceId"]]], result)

    @builtins.property
    def resource_tags(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceTags"]]]:
        '''resource_tags block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#resource_tags Inspector2Filter#resource_tags}
        '''
        result = self._values.get("resource_tags")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceTags"]]], result)

    @builtins.property
    def resource_type(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceType"]]]:
        '''resource_type block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#resource_type Inspector2Filter#resource_type}
        '''
        result = self._values.get("resource_type")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceType"]]], result)

    @builtins.property
    def severity(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaSeverity"]]]:
        '''severity block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#severity Inspector2Filter#severity}
        '''
        result = self._values.get("severity")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaSeverity"]]], result)

    @builtins.property
    def title(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaTitle"]]]:
        '''title block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#title Inspector2Filter#title}
        '''
        result = self._values.get("title")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaTitle"]]], result)

    @builtins.property
    def updated_at(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaUpdatedAt"]]]:
        '''updated_at block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#updated_at Inspector2Filter#updated_at}
        '''
        result = self._values.get("updated_at")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaUpdatedAt"]]], result)

    @builtins.property
    def vendor_severity(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVendorSeverity"]]]:
        '''vendor_severity block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#vendor_severity Inspector2Filter#vendor_severity}
        '''
        result = self._values.get("vendor_severity")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVendorSeverity"]]], result)

    @builtins.property
    def vulnerability_id(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerabilityId"]]]:
        '''vulnerability_id block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#vulnerability_id Inspector2Filter#vulnerability_id}
        '''
        result = self._values.get("vulnerability_id")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerabilityId"]]], result)

    @builtins.property
    def vulnerability_source(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerabilitySource"]]]:
        '''vulnerability_source block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#vulnerability_source Inspector2Filter#vulnerability_source}
        '''
        result = self._values.get("vulnerability_source")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerabilitySource"]]], result)

    @builtins.property
    def vulnerable_packages(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackages"]]]:
        '''vulnerable_packages block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#vulnerable_packages Inspector2Filter#vulnerable_packages}
        '''
        result = self._values.get("vulnerable_packages")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackages"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteria(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaAwsAccountId",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaAwsAccountId:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__684dfded7d52490ec9a7661e631e287325268d79d62d6dc86dede198105d489d)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaAwsAccountId(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaAwsAccountIdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaAwsAccountIdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eff13b6b60e8cfab60fa7290022ed2552ab15702b19f583a32875530d2f43c90)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaAwsAccountIdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d49c63fb4a7644c23be9b88be19a430126443ac4f67c33380566ab81a77e96f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaAwsAccountIdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f5021bf11fbf2fe114f52a54c6c40dec5b8d8efe06fe2327fad431e80ffd174)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4e22f3529234722875ce4b5b8be5dce2decf46c8b259536b53db12037f1d4f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0293661ac9f2a1b27d7a6bae3a39457498ad95713521c07f145ebbaa81cca9c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaAwsAccountId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaAwsAccountId]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaAwsAccountId]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75ebb4af68ecee0bd9b752cb873b38e42a67b4ae7138e1f6b4a727559e025ce0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaAwsAccountIdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaAwsAccountIdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6c54c6e3cc7ec18d8a234ad543eab3f64cdd44fe8eef06f86f0acf1fdd32b024)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5fe436b7639ade05cbed0b662970bfd5d4a967f8e290c4ee351ad4d6bdcc9e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b77dd5edf6232fad4af589dff094beca0a173528f888729fab1d3b381865c0d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaAwsAccountId]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaAwsAccountId]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaAwsAccountId]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be731898bfc5c9d24b5c213e2a0636b6d95eaa8557cd211738957184d9488abd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeRepositoryProjectName",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaCodeRepositoryProjectName:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__51456be732e389cc7565a5978446ddef5fa5f1d94ee63fbda1a9092c2802575f)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaCodeRepositoryProjectName(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaCodeRepositoryProjectNameList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeRepositoryProjectNameList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__843da1977b9641774aa431176a64efe90f0c0884987f01ca7a06a7cb8f2318dd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaCodeRepositoryProjectNameOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd6a8b882dfcbd89d2f851601829b83a005436390b25f65863a4bb0e21e8adab)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaCodeRepositoryProjectNameOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e162b41141ee21527fe32af6d00e2e971327fb960addfb40c043bbb07df0284e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4fe36c646a90ca545174eee27f48866d480248c3db95371d0e9d702f864a1b05)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c59e2299686cd8068a043140b934fd96e817daf285785f56152c36686f31d9da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProjectName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProjectName]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProjectName]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__031dcff09ce2c9473a195a104850811c63ef2b287efc3e4e72835e830168e75f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaCodeRepositoryProjectNameOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeRepositoryProjectNameOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d83bdd4c0a265b94e3e9712e53c24c689ebcd49821a70b869ed9ae11f4fc43a4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa339894cc1bbdfa65d67ed931e82b1bdfbdc0ee0284228cad4d0f9703ee8dfc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a302f35b9457577fb6d3509c3deb33bc4b888c5e97b6a36b0d2aacaaa6ae85fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeRepositoryProjectName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeRepositoryProjectName]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeRepositoryProjectName]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8e2fcf8581380ec90ace54f8f9edc2ce216750b4e5aab1b7f65e2704b571f486)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeRepositoryProviderType",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaCodeRepositoryProviderType:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9115499d3740aa57a095234e097d5ec7bb9eb09317e1042382e9549ac72cb36a)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaCodeRepositoryProviderType(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b56c56f1746c86de5917430b7f3c0fe116e4ac9d19fc39862e2a6b02b66e31e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bdc13c6fc664cec61d8172a9945208e7ddf40291dcc9226623edbfd93ef3dc7e)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0cedf9c3eec8ba44371ea1d67448ccf81813a07d1f322f01cc45984220a4e17)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ca99977ceed1c65bb9554e42d559fc084140f48ba8bc698b0853978527ee5e7a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a249576af1b30ed63ef69677736004f1d444054bb7b253e375b8dd933605862)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProviderType]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProviderType]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProviderType]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45551ae3ad399d92f8770374972303ccc94632fd6d41a7cdd14d0ad7077ff6dd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ccd2cd7f57a3f6868f1d23dbdae4ef56bfb8fb1f7aa60cc3d501d632d4d05eea)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a1f11245efd7daf683122bc55bc4b4f93e2b63640fd9c7d53b647798685eeaf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6b7ec5a074a091f07b529c3893ccb373050a86434c18ac4f87e7945d3f70ba1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeRepositoryProviderType]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeRepositoryProviderType]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeRepositoryProviderType]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d02bcd1a17a3a4a601c89b7c1f1bec80f43eaaa22a96a0ee0588746ade061a8f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac1f1da779b6f5238ac2eb7f85f9b976f1233af80c70696290d8c426645aa240)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e0d2ed8a0402fb9b5ad1d645929a23512bbdc83a3847265b7e023674dd1a2813)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__10cf6e17d1c0fbb0bd3157bb42187b85bf2bfb9840b19844a596c88e8185cc51)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f6fc43b36ebad91aeed0260537a3a066f8c0b2c6fd6967914a5438b4296f5a62)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bcff2623ba5c493a30fdd023c0a6d5c6750691b279ed484a0b8b06dc0a0462e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63ca652f285267697a4099b92af8af5c8022fca0df5a399093e29d0352c6b9f7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0a4192d3d7117ea3a3efd60b0fc4e162a48699e27793ef2f8ca9d90575461824)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb18c5e3823c7eb4e91b901985ed7a83f708876a56bdd28df4861e61246f0378)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e28b362ff4a1d7673ce8c80ed30964004e50b490327de9002597c5cc0a6e04e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74b5a1206b51c37848d4a1b407c7cb4279e439508efec338a9f30f2ea96b95d0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9b4261fb7cae6b05c0e9b56edb5993fff1833d4b4aab3245aeeeca6cc4e7c5a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93685c6a3faf6188c97ae56c23266e63fd9fdc5887b25eaed4a6acdfbed516c1)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__26d0de9ef4ff4d0407fffd2e658ad04e0c344ab135948132adbeacc175bb38d7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41e015b63d2c50656851c02f974de2db1d61517442d87366c08ccdeb15951a02)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a83c8c77abbd8d4eccd38653aebcc619047c351892be086d7af9938c778b6c5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fd131c27336098e0e33500079638a60fad47565defe935150e25398e98dc04c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c26a02e5c1c3839391451fa2193e5f84058b31648e04ee6ea6ec0af616aa48a7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__31795f4856238cf06ecc61562b0592d1ae1c1c3c1d39e8d6944f68bd3cf77218)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de78e575f9c37f6facb2d413b5a55f5569b1927180af800593ef13736491df7c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae07b34f77dce48020e6fc7df4bb85288a701d8e3500a1b4041c65b8a4cc0861)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ea643b1e31b6b01f558710a527a7c0db8da30d21ed753dadb6de146cc3f5e19)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b50a9ff618bc753497e0a3eb2c570f79a26e9b9070417f88e8b38901057eae4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__92e9e39a4c3165b6cf5088ff752ccb584ad41efd54df5540c6d79225c19aa4d1)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__97325bf107679964d7db50f8325d95690f9be8466fb3ae866fe43610f24cc887)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b1aaa654905ef4f86362939d1241627af10437f0895addc0471021da79ec5e6)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c72a60596c31b48da41365b2f25428cf98e55f193f0ed20d7ef6fcca9e49dd16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__325e703a66478f48f6dc5db9b6122c1b138e6617bea47d482a9d60595db31873)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__65c5e33ac9040140dc98b387d1b2da5d6b5ed546b3937682ecbd48892d0f499e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eec586ce60a25f45f903658d4c84adf45b908aa7fe63a251075bb29e1a018d81)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d4b4992d30fbd6fa4516d63522b1a25a40ea638afa6f9fe20a5e1f68ebce2db)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__238853c1bb6d13ecfcd5e2317c68b9ceac62287fd0f7c7a6deac99b532cb4982)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47dedb2a0d4d454b80f9bedbd2a483662055fdfc941c68a4ed8ca88410083434)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__812e3d878e7df6415221b140a8a299278ebcfec947224e9ea79be2c8a41b4b07)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaComponentId",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaComponentId:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e90edf61e4d9f3ae2b985ed5f83a891faa717678fb103bd37eb1a61a4e93a7a3)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaComponentId(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaComponentIdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaComponentIdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__314e7b0c616f92f646bdb1e51b88a7d0a348d479b15871b3d33b701521c03e16)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaComponentIdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f30a7a988d2edef3e98db0c198387a8e091d0ce93a5891757bc617c55704376c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaComponentIdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93a21e9e885a221b7401c850f7bb65130be99511d877122fd0fafc755a62bacc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41d76634951d81c2f004f1cce4337dc2011e07f67ce3fb060c1467fbb900fc95)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8dd0147040fc58dd1c0452d88cc2239a7f77142454d6b8cf0122ceba365474b2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentId]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentId]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__38333803f5b685f30896e9a5b805dc411d2f925baedaf47f63eed68246a984a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaComponentIdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaComponentIdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e391494c9bac7be5f754bc3eabd297c4c90f6ebd81e4438df413b7adf9c037d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__82f90b16546d5073a38ecd6cc493d43d2c8e10d611c0e13b05655c42d8367da8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__789117168b5dbb9ed133e983cbf8fec34438a9daa108480cf8d004016f39e6a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaComponentId]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaComponentId]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaComponentId]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00427470067077b6e5931b3aa6f5048ad19a9aafeda184d375c3c035af82a01e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaComponentType",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaComponentType:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37a08facf77d9ff8ca17db907ea952bb54eb9c27ad521ed5c99f3f865192b0cc)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaComponentType(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaComponentTypeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaComponentTypeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__737d25c374826c3d896822e85a1894bed916e64048f9bdec139af654fb7486d4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaComponentTypeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e16e24725ebfa4d05117a6d458aff6a631abd010191b6b1fe08e721b2e58819)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaComponentTypeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7ed5c9323b33492b33c76bb1dfc12ab39729548f2caaa34036fa97ba618e178)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99b3e58741e5eec1909f677e612cb300521d10e0557a72dd90771696a82945f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6eba1f3732e58aea1398fa1eb9e0d4f028fef2088f2244788b4fc2165d8e8dce)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentType]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentType]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentType]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__850b1f65bdf1ec7089e0446e82186af689fa31fc82857e9f1718d146541b997e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaComponentTypeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaComponentTypeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a065c16443de3072dbeeda1e561f85a6cdefe18b88b770c0d67e209ad7a7a17c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d2d32fa7964829f731c349018e28742533401f717f19309a1a42564cd5c5b6b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__881f483a6bc75aa8f37be32e45c870d7c31c0170aba88df4c2f52bfefd2fbf68)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaComponentType]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaComponentType]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaComponentType]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6fdb9b202515cc232fae3f62754a64294f844e862e3ed5cff6460cd93ac70ed5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceImageId",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaEc2InstanceImageId:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__085adc136afbeb8f4e50999546a777fffa2f93428a9528b336c6c0612f43e13f)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEc2InstanceImageId(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEc2InstanceImageIdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceImageIdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7aaf31aa4897f46f9f3f4fe69e5f6aa3b3fe16042efbcc3f3b71448f2572e7b5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEc2InstanceImageIdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd4fcf8036a03eb4b317c45b538e942d7bc8816a7b69df650c6baaecc73b0bf7)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEc2InstanceImageIdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3113bbeb01929da2a434674083815232eeb30333709f80184d5df19b22c93918)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__934efcad1d7403c4e7d1b625efa2b07bcfd1b1c212bb9aa7b781b934d4b85c2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c41e35974b872ebc1609e5e33fd0cce71c66663fca3070dd3dfd9d4ec22523e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceImageId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceImageId]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceImageId]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2ce672b379f9a9d0aa747f982dd3234bc04172934bf2240d6144424079aea345)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEc2InstanceImageIdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceImageIdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__655379833ded102b40bdb0e02c629d9a93775ac9d1006b381ead2a4da9ef9edf)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3dfba7483575c50af0258d5edf41ef1aaff924eec77e610ef4ffe3b048f606b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c9a7de3922fb5f7765da8b347890ace5d6fa58c12bb2be91b2822fc327acf876)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceImageId]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceImageId]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceImageId]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__932b8d1094e55c8bba0b23988ea74acd1b122c0d912deeefb7e4ca024e52731b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceSubnetId",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaEc2InstanceSubnetId:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__453f25bcd6711820eefcb6c68216b1b75573e5571aeeba7a9efd3f3420dd2b1e)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEc2InstanceSubnetId(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEc2InstanceSubnetIdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceSubnetIdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__101d28d79626e4b8896e439c31f0eb61b92f78039d3d49a20fd2e358a70adbf2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEc2InstanceSubnetIdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4559fb0f93f6d641cf48e9514ba865f7a19bca9c9239aacd2b478425f4246ff3)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEc2InstanceSubnetIdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34e4edea6abaf02601ec1642993b7c1f1c2db096de1349361e3a224cc02c7363)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67248ae35f26ff004c315bf5d4a2f7d03a0b33d6985d1cbe960c25bc1838dc24)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93ec274a25f5af0d6f0edb337e67beb1f0840f96dadc02e62ff5c211db8573d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceSubnetId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceSubnetId]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceSubnetId]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__872c5a9f5d995fb0b6db28e54369b14bc1e2931d8810c17c659f71dedbef7dd8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEc2InstanceSubnetIdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceSubnetIdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a219f132d8e07cd635413984f7d956727152e674d5937dcd15d77e73eedd443d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28fb53ac8294d70bdb452af1056fe01b7f5075876db4471b0fc710efca655900)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c109c286529b8f9ddfbe6c88a27ec4baef781cc38dc469f22a485b40ac9fa872)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceSubnetId]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceSubnetId]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceSubnetId]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ae4a6c25ef2d186e2d0fc741beb033a1acd2891548e68a4cc3ddb687f030b00)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceVpcId",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaEc2InstanceVpcId:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__435382e0f0624d7d5eb022e1275e5f25dc131553871aaf65774d1aa8e3cd3e77)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEc2InstanceVpcId(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEc2InstanceVpcIdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceVpcIdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8789d5dfbd0b7cadeaac56e061fb5bb6496bcd5efb682abe1a1e50b8ab6ae4d2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEc2InstanceVpcIdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__530555675a08765bf59274c56a6768763d7fa4107ba588239280f2b67113bbc7)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEc2InstanceVpcIdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d25af075d431c0a84bd2c9f9d587ff3143f079629cec86dee53a318e8442f457)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__799ddbc464c198bbbfbe4cbc968ea0ecd564efaa4a97240b095507e910f42462)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c5ab38e32fce07d7eb7764145df4aa6ade0777205475e579dfa4fdaf0584386)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceVpcId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceVpcId]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceVpcId]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f91450763bcb27c77f3da17897b8a785c5154323e2821f229dde32d4dab7a5fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEc2InstanceVpcIdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEc2InstanceVpcIdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__29ae47a7ed64fe900f52689855594bed0bc987622d95d365e4478c26e5f1501d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__499721e64de66575075e392ca6e39dfc81674c79a65f5cd34e0b7e2659df40ea)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fa0ae265920b7dc930d5d1c6d1d9404b7c5ebb385b1ca81fa5cf1c4e3d63fd7c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceVpcId]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceVpcId]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceVpcId]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83dc82f01c4d1aeaf1efbf6d66d722ab7fe621c4aa49e5c7d1f29a9a2a5abd56)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageArchitecture",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaEcrImageArchitecture:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__286f8224a8dbaa125364b4ee1b728cfcc00e3ee672028525229c1818f2dd31d3)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEcrImageArchitecture(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEcrImageArchitectureList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageArchitectureList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__99de8a642f9d46297057fda890ee6e8c1a3f261b4912ca668b2a0ace5c0e96a2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEcrImageArchitectureOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e4334a3176fe119ab89b7757aea1e0a903797ffee5101fba7a3b16e5ae4b6fb)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEcrImageArchitectureOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32ee0424d39ad171a1942c0e2e419f9ec4afd011d437514b86b5ce11048a2729)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0cc7f51d772a350bb20c70573a37d2d915cf7cdf9540018709447dd3d02c9c96)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84cc3a5d23152d3e40e1221c088c9658cf18b3f91679544008005db772995604)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageArchitecture]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageArchitecture]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageArchitecture]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__549413e0fede71fe6fcfa65b13c71dea7c6f2489f3396474025a2e7d527bc036)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEcrImageArchitectureOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageArchitectureOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0486fd64e1a1d306eb4c5fcfcda4b3da9e4067ab61ac689fbcc68b9339ec3884)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f27b6d6f8eb4923a0c2e63ae9c9a16fc7a71ec7c3102b48e527f32a9b91f462a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ac92e5416d2e69a79171495b8b8d695062fd6d13122ccc24fc5e9bb517150f03)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageArchitecture]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageArchitecture]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageArchitecture]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eca7e794392588fabfd5b94712e371b13bc6a79429492ee4ea30a7e9a912eb85)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageHash",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaEcrImageHash:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c68a36e6ea94efd3b4a42ac102f6111cef1a044149c95a069f89877b6d03bf04)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEcrImageHash(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEcrImageHashList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageHashList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c64d4abe2150755b9190413e872af29e606f5337e9af237c6df94bb54a6524d1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEcrImageHashOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f94d5bdd21183f4c0f976f09539f04d09fdb72cfb0aa625277357e1c1ae9294b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEcrImageHashOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__044bed7bb7612c3d144e476952033135dc8a05aeb8623fd345fd18f0a0443d2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3ad21b0f9d4c6d584cb2bc189200cfe87ccccc553fa97404263dcda4d29f4094)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d6f707f3904eea8cd18123ae3be686476575b4d79f9fd127cbc7b58ca0ff7145)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageHash]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageHash]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageHash]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__404cf5c7db690f62011c951cbb2f435f4eece86377b2678edb45d62c0cbfa76a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEcrImageHashOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageHashOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e5dd8ef904101cc38ddd75418c1d4b03d79eaa9eb458e7c162895605ac7e290)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__71ed0ecd38e7af66d3d0f58d5fac6d42d841ff296622d23bdbe90055cfbf6a71)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__542c3c398a5619f2129200fb0a8e19591f39930ba49ed7661bca7b5020216ed9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageHash]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageHash]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageHash]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed320fc836c8495fdef1692840589f6d4dacacdd19601082d43ca78ca3cb031b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageInUseCount",
    jsii_struct_bases=[],
    name_mapping={
        "lower_inclusive": "lowerInclusive",
        "upper_inclusive": "upperInclusive",
    },
)
class Inspector2FilterFilterCriteriaEcrImageInUseCount:
    def __init__(
        self,
        *,
        lower_inclusive: jsii.Number,
        upper_inclusive: jsii.Number,
    ) -> None:
        '''
        :param lower_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lower_inclusive Inspector2Filter#lower_inclusive}.
        :param upper_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#upper_inclusive Inspector2Filter#upper_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34c4ab2785ceeedc67bb848eef3b8580d0f8a40dc8d294550d2730bd7b5c33f4)
            check_type(argname="argument lower_inclusive", value=lower_inclusive, expected_type=type_hints["lower_inclusive"])
            check_type(argname="argument upper_inclusive", value=upper_inclusive, expected_type=type_hints["upper_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "lower_inclusive": lower_inclusive,
            "upper_inclusive": upper_inclusive,
        }

    @builtins.property
    def lower_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lower_inclusive Inspector2Filter#lower_inclusive}.'''
        result = self._values.get("lower_inclusive")
        assert result is not None, "Required property 'lower_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def upper_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#upper_inclusive Inspector2Filter#upper_inclusive}.'''
        result = self._values.get("upper_inclusive")
        assert result is not None, "Required property 'upper_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEcrImageInUseCount(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEcrImageInUseCountList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageInUseCountList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57e750a4b7e30ca4f79fe19bdf5b8760de122c9cb7de8ef39ce404a833d8a591)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEcrImageInUseCountOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c8b67bd6c94189f2759507a9da1043f8a54ff39b08719e4250e604b3a253f9b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEcrImageInUseCountOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c728e9746f72c8af5d66422ce904614086ac39b7e669c3195cc475967aca42ed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__73f24346a40fdbd739101d2f52b7cf95a8550b5ff7556fbc989a34b862fe182a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1f0bccd6e7f222fdc8efabfe3dcd682dd44668ca63aa723288d2d255384e1310)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageInUseCount]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageInUseCount]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageInUseCount]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdddefd74bad44c285cf454982b50258be55eb3027ec1c4a70a4a6d437c51907)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEcrImageInUseCountOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageInUseCountOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d44df9164284d339fabe271fa634c12920453d77895477fcffa3d5ab31f5019)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="lowerInclusiveInput")
    def lower_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "lowerInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="upperInclusiveInput")
    def upper_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "upperInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="lowerInclusive")
    def lower_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "lowerInclusive"))

    @lower_inclusive.setter
    def lower_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5a20d63301413f014e62409c325e69f5798021db32cd14896d90fb4074cc0360)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lowerInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="upperInclusive")
    def upper_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "upperInclusive"))

    @upper_inclusive.setter
    def upper_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3faf36e55ddb1f9f015442caf1de067ef2aba9f155cab9cfb7619fd29487ddba)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "upperInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageInUseCount]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageInUseCount]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageInUseCount]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81198c68add0ca25539ac89708200182e838f886b80406746e4a6332ffbf8a00)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageLastInUseAt",
    jsii_struct_bases=[],
    name_mapping={
        "end_inclusive": "endInclusive",
        "start_inclusive": "startInclusive",
    },
)
class Inspector2FilterFilterCriteriaEcrImageLastInUseAt:
    def __init__(
        self,
        *,
        end_inclusive: typing.Optional[builtins.str] = None,
        start_inclusive: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param end_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.
        :param start_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7331a1cc419a68cc8c137197c08a50ff55134fbfaa0b4727ea46b6cc31db5965)
            check_type(argname="argument end_inclusive", value=end_inclusive, expected_type=type_hints["end_inclusive"])
            check_type(argname="argument start_inclusive", value=start_inclusive, expected_type=type_hints["start_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if end_inclusive is not None:
            self._values["end_inclusive"] = end_inclusive
        if start_inclusive is not None:
            self._values["start_inclusive"] = start_inclusive

    @builtins.property
    def end_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.'''
        result = self._values.get("end_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def start_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.'''
        result = self._values.get("start_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEcrImageLastInUseAt(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEcrImageLastInUseAtList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageLastInUseAtList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07109e1cdda874230e917a4efa245be3e1f349530a0674425d8b0a15ed7d63a5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEcrImageLastInUseAtOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1617c4a4fb2d00fc9546540de28e10d15ddcc823792e0767fa123212974cbb03)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEcrImageLastInUseAtOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a52e93d3f2afa7e614ab92fdba86044c60da46c76342e366df436d5d5a7e9a6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60e1f0c6c23283136ab4ca0c51f1a1fd43f3806eb62f377710d46b885e25f757)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8d0565758309f78355c187a70d4e4333850c7831d145a3ff5e21d82f54243587)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageLastInUseAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageLastInUseAt]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageLastInUseAt]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c881314e394ca47cdd7eb9a4f82a9eb99a61b4d0df376d797261780c8613f29f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEcrImageLastInUseAtOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageLastInUseAtOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dca6768ce9462e0573eff9ad24b3e0cff9e93658fbefed3c7199e22c3ecf4a2b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetEndInclusive")
    def reset_end_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEndInclusive", []))

    @jsii.member(jsii_name="resetStartInclusive")
    def reset_start_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStartInclusive", []))

    @builtins.property
    @jsii.member(jsii_name="endInclusiveInput")
    def end_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "endInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="startInclusiveInput")
    def start_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "startInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="endInclusive")
    def end_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "endInclusive"))

    @end_inclusive.setter
    def end_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__820f957e654b3142526fb11d78fd43f9005cb796c0bacdeaa85836e925f3e5c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "endInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="startInclusive")
    def start_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "startInclusive"))

    @start_inclusive.setter
    def start_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69f9878ca6dcfce888bcc57d67f364e3c9851d253e190c57d0cbedc7270a46ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "startInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageLastInUseAt]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageLastInUseAt]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageLastInUseAt]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__132c32548a395aa185748f4eadb37f62e808179f27c5c14ea6ec9021d6596082)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImagePushedAt",
    jsii_struct_bases=[],
    name_mapping={
        "end_inclusive": "endInclusive",
        "start_inclusive": "startInclusive",
    },
)
class Inspector2FilterFilterCriteriaEcrImagePushedAt:
    def __init__(
        self,
        *,
        end_inclusive: typing.Optional[builtins.str] = None,
        start_inclusive: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param end_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.
        :param start_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4ae918abcfb94235586825fa306d60db85b7cc098381d2646687958bd261d3d2)
            check_type(argname="argument end_inclusive", value=end_inclusive, expected_type=type_hints["end_inclusive"])
            check_type(argname="argument start_inclusive", value=start_inclusive, expected_type=type_hints["start_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if end_inclusive is not None:
            self._values["end_inclusive"] = end_inclusive
        if start_inclusive is not None:
            self._values["start_inclusive"] = start_inclusive

    @builtins.property
    def end_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.'''
        result = self._values.get("end_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def start_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.'''
        result = self._values.get("start_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEcrImagePushedAt(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEcrImagePushedAtList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImagePushedAtList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e8d9134de68ac82e741df26c01e58715e4ade0377e34d472535a1be021cf619)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEcrImagePushedAtOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f45c065e15d94c2a78fe4e49bbf4f31a7f97f7250febb0dd00546d6516f85985)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEcrImagePushedAtOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__62e22a7d305abe3727124ccd1db35d2dd5b1c4d907b0b8d108d00779bc454911)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__065554f028c0f117dcb2036acd6221bd4ea66633cc4c4e8bc3b36b032d6ebd6e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a30e984d4df8abde2c0100c33e11abc2fa092c62de6d2f443a3569dd513049ad)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImagePushedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImagePushedAt]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImagePushedAt]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47535ed6c49d9298095ce0716ee8b59229ebe20f39e30de1862d040b439a4ad4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEcrImagePushedAtOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImagePushedAtOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2586ccad2b02edb06228503fe6c09f2a4fcbf084b39806c382d86af5344c62d6)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetEndInclusive")
    def reset_end_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEndInclusive", []))

    @jsii.member(jsii_name="resetStartInclusive")
    def reset_start_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStartInclusive", []))

    @builtins.property
    @jsii.member(jsii_name="endInclusiveInput")
    def end_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "endInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="startInclusiveInput")
    def start_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "startInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="endInclusive")
    def end_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "endInclusive"))

    @end_inclusive.setter
    def end_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0cb445799851604c5ecc3033869416c217ff0cc4bf1be1e6a84a8705c1b6cc7e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "endInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="startInclusive")
    def start_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "startInclusive"))

    @start_inclusive.setter
    def start_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__784b6d24f6b7c5edf963ceaac72ed8105740f1b66a0fb0f424d0dd4e738d4f53)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "startInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImagePushedAt]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImagePushedAt]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImagePushedAt]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__13044318c2f1ec00f34354cad8e4e14300a521c0f2d033a019a53c33511a17e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageRegistry",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaEcrImageRegistry:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c133ad0996c79aa0bac51e0d50bbf534ca2093f48121169b9f9835857db3d228)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEcrImageRegistry(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEcrImageRegistryList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageRegistryList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cdba249d9b5775ebcf7ae1b2362eaefc8d58cf86ce1cf46f22a1be2cbda85924)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEcrImageRegistryOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e78b68d76fdc31fcfcf935e902c63b2feea218f3352d3d9f2b1b24b002879b38)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEcrImageRegistryOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4eddb3aee37760d24daaa424e7efd85fc8ae01addc5476ef95f39c4f15830390)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__908f0239936e775c4c2952fd5f082ec32ed5193cb446ab05cf9b6518fe85f01e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f1b11909b45431568685559f83d044b5559d25e17579c29f4290193fae6b33c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRegistry]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRegistry]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRegistry]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bd9b223385bb3b2ea2eb5ed2d9e4daf82c76ae73e50fb777d8467388296a62e0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEcrImageRegistryOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageRegistryOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44648940120237f1bbd84fd6c1619867b36b41642d02cf4dbd4d85a0a1588707)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e0da7d463f12bd3a8cebd0312f965e66e844df7875e25a752bbdf07f7f5ad4d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3d1e47ee16dfbae594cdf6992c6a771ef895c72d1b43700ce55e51a6c7811b4c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageRegistry]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageRegistry]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageRegistry]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__40eb7b1573a72073f8ddd72208e943ffb19e35c75c038a7b913e6b8a3138ed52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageRepositoryName",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaEcrImageRepositoryName:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a84a9ac435d0db33698e0a7b2dc9a6725126b5e524260734d26da861dd111a03)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEcrImageRepositoryName(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEcrImageRepositoryNameList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageRepositoryNameList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3db1be1b5e66f28cfae939ac49c745f25afde18fa5aef3d838649e9b74f2415)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEcrImageRepositoryNameOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b521a4aafee1bc5dc78d7f67ebc4e21a442a4323de406a36a48b4f34ce70191c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEcrImageRepositoryNameOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb0be94a2ebfb9e3329e079afe155459fb2035c2c545555bad57aac66aa3e7a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b986fcd3b557041b09d6fa64c43ae6bfb778f3e3316d5a28ea34c540e1a3b38b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21090e1e896c54370622dbc7506af3455d9157ae562785b32438e3892b49a0c3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRepositoryName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRepositoryName]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRepositoryName]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae713568f58a8f1e8fef9279f69bfdff09e689f5cfc4d0f061ab1b00b3ce5909)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEcrImageRepositoryNameOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageRepositoryNameOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7cc8bfcf781455e6e6ca7c52806945722d28c10ebf3ce5461b9cb9ac19047ffb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__95904f1e2ecf83a06d4c6195311a4bf39957871ba46e658b11eb698dd9920154)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__15a046da60ed23b69ae7273dad05d5291ef2cb3bf37d088ed85f786298053f8f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageRepositoryName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageRepositoryName]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageRepositoryName]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__039991a52adf7885adde3093bfe0d07d1b9105c8bb31693db93aae0fd7e3fdbc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageTags",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaEcrImageTags:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c61d94b7eb4d0674ace3b0894bf11f94b4c685c617d973452265637534950021)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEcrImageTags(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEcrImageTagsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageTagsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__19c46b4800f2663519908bca58cb2d6bc5f9aa574187388a857395819c159e9f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEcrImageTagsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7139195818fc9faa05417507ae90e9874faea7bea4837bb53d5b304154e8b2c9)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEcrImageTagsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0c75ec297d6c3f7aff1d641b90fbe560c852bd7cee794d98fb3a4ed618037792)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1440422ff9f43718fa5dfafde5dfb859b2a80a8eacb4e8376eadac87ff121ac0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5d3d703f64c4bba2ce1b9c74b364ab57af9e997e456e15c6ab1fdb9ec04b6429)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageTags]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageTags]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageTags]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3661f7b2b4f0dfe2ddf40c74c6157f35121febb01f75ad6e51edeb4250e2f66f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEcrImageTagsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEcrImageTagsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aff0a267e1b607a1649c9734aa0b013d1342d4476e9e117ca2c0b52cdff58f74)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a5ef2caab9c1ba69fe6536b68b215a2ddb379fe22979db34792bfb24de5ae12)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__63e26fa549643deacc069ba74047b95c2d900390165802c96215c43544eba3bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageTags]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageTags]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageTags]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b241acfbdfcb40cae97bd399138bd42f9840599f68520fc101e9f754acd00c2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEpssScore",
    jsii_struct_bases=[],
    name_mapping={
        "lower_inclusive": "lowerInclusive",
        "upper_inclusive": "upperInclusive",
    },
)
class Inspector2FilterFilterCriteriaEpssScore:
    def __init__(
        self,
        *,
        lower_inclusive: jsii.Number,
        upper_inclusive: jsii.Number,
    ) -> None:
        '''
        :param lower_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lower_inclusive Inspector2Filter#lower_inclusive}.
        :param upper_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#upper_inclusive Inspector2Filter#upper_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6966a6563c978a9b316c92e10a78998509b4eafcfd7f8823c96857e27485472f)
            check_type(argname="argument lower_inclusive", value=lower_inclusive, expected_type=type_hints["lower_inclusive"])
            check_type(argname="argument upper_inclusive", value=upper_inclusive, expected_type=type_hints["upper_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "lower_inclusive": lower_inclusive,
            "upper_inclusive": upper_inclusive,
        }

    @builtins.property
    def lower_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lower_inclusive Inspector2Filter#lower_inclusive}.'''
        result = self._values.get("lower_inclusive")
        assert result is not None, "Required property 'lower_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def upper_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#upper_inclusive Inspector2Filter#upper_inclusive}.'''
        result = self._values.get("upper_inclusive")
        assert result is not None, "Required property 'upper_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaEpssScore(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaEpssScoreList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEpssScoreList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9928ee170a17dd18eb23d8b137e7dbbaff097c3fa6a10db227af87a03cf13914)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaEpssScoreOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__267eecb86af57dd23078bba08283a4538b9cbbe26513ac2dc932d9fd5bd85d0c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaEpssScoreOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__52daed344e25ed7bb8f3678de2b8ae31a8e652192054717f954a334a29fe9d61)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c1ddecf719f6a9eebea325c87a87eb5f29f30e8623eed6835330c13788e12c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__988f60d991cfba22eb7da770a83a40beca2200ebff08cd43752031299e0c98d8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEpssScore]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEpssScore]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEpssScore]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2278e8fd05c507323bf81e4f8d27a2cab4dc3d76be3cf2859a39fdddd160fc4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaEpssScoreOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaEpssScoreOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bdd49181e3b0cb4b05d62bdd2e1d60866c95671ad18a9ebab0a1917733f52a64)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="lowerInclusiveInput")
    def lower_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "lowerInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="upperInclusiveInput")
    def upper_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "upperInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="lowerInclusive")
    def lower_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "lowerInclusive"))

    @lower_inclusive.setter
    def lower_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a914c8696d575889dfec92f440ff8f1e6a9c98e447670f999b564b6971b588d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lowerInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="upperInclusive")
    def upper_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "upperInclusive"))

    @upper_inclusive.setter
    def upper_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7f3bc037567c40b192b18fddaf2639f8aaf597b64f9796898542ebbe0e3d6c63)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "upperInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEpssScore]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEpssScore]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEpssScore]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__56a8e0b95b0fd9a26097239e108663f6fa061ff08dc9a52cd39a2207a29849f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaExploitAvailable",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaExploitAvailable:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9d5a08d1d34e7683a3bd47ef5e9726179b550916a1190b02b0e368eb6264d29)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaExploitAvailable(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaExploitAvailableList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaExploitAvailableList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9e1ba0981c3c6512f9cdf1c72b5a274c547938d07a07b6757f2dca8c3859db24)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaExploitAvailableOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1554366df41c03a013beeb5b065a0d31afb9928620d53e79b2a2813573ef362f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaExploitAvailableOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a0d46832e1318845806c8ba60b6c6b0dde3929f6d4c68a4acbae923c711f299a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__77c00bd7247e5356f3357e6b592c390e545d977f8959887bde1b4593a5f669aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e794a4a6adf5c62b8dc3c00c9e1091096a96922b42ceaf5b32647b307edeab1f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaExploitAvailable]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaExploitAvailable]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaExploitAvailable]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0837a3c1ffd21f2513c0fd92119ebaa19a603165abecb3d5bcbefe9b9af8191b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaExploitAvailableOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaExploitAvailableOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32bd29334fbfe48b7ceb980bec32d94d9b4599ac4b591e3850d9d8416e42101e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__34187b6cba9c17beba9db60fb6a6c83ca0ab4956dd9036a0ef0b80aa9ca9def3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9263c6e569b5541e350c8e7edb4c034a221edf2ce1749ac29ebb5d54c66b333c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaExploitAvailable]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaExploitAvailable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaExploitAvailable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ccdc31bf9a36cbbf1d3a5b2abdca9761bdec804f6e4a9d7e3eb045d552bc543)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingArn",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaFindingArn:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a882a788d71a0f7df030da827ab6c88a60b8517549686e94be7505bcc6bd4152)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaFindingArn(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaFindingArnList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingArnList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d8a3d1b1693ff782f341b79e48737fa8fe2a976b2a069c6486dff1b17fe1917)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaFindingArnOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8a34fa0805846b4b3ef14b778535573cc0cbc0a486f19e264d1883f3ac1d74b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaFindingArnOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a7f12b49e331201ac1cc445c2a583456596e66c6a997b105ae684d1691af25fe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__46f1affa4ad97fa9fd6a42e153e0d4e51aa1a364315646b7f3b972fbb47ca935)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c8efa63a24901818724751a638d4cbf4ba2abf5d6b3c11728c5ab4a14b6dd94)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingArn]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingArn]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingArn]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2e16b82d62d25b649b9b5d6b8f36bba5d3ee4c5cc9939bfd3c12b95fb3615676)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaFindingArnOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingArnOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__73710fbf4f52be8c596e59bfc35089cdddbe652b62dc9ae1339d31c297b72f9f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__742139c98f6346e26cc2e872dc7d9ccd7de7f7ccf216f43455a5b775d09cc27d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7c9193d64e74ab5f6372de475f95de138099a11349daec1c16d25f16c55076e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingArn]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingArn]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingArn]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75e128a19935e9c3100872488909c00b481f2ef4da37d81adda3b728ad6e4284)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingStatus",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaFindingStatus:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2eaa96ed9e66810e864fe97abb85eb8f016d9d3bd4c86d0e29427b6946c5c49)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaFindingStatus(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaFindingStatusList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingStatusList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1ace5d6b2de9c3772cc1227198518c0d654b806cdbadd2549aceaf2f68fe68d1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaFindingStatusOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d6cb09c4d87d1bb9cf3642be65871aacfbf5a893f925f9d6d6684fe184651a0)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaFindingStatusOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4fb6a508f56cef606f0fe71151698bde60f94ad6e2a04c9cf9380a8032eeb69a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03eff47cc71132da236fc0e0a24ab5ab5dc06c128a56f8732eed504f3098d7af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__101cb9b836c636434516700ebe4740420b6dbb5ec61c52a65103e0e5aec835fa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingStatus]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingStatus]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingStatus]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab6db6168a1f3a6611318cad9c0b57b670ae4ddde24c6a149a3926a4b058ce67)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaFindingStatusOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingStatusOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c0b7e574d6a950fb716964cc9adc8a5a8335a5440261ac108ec576f050f408a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d44d291fdff4f9ed42e6a0f1e193519898e4ed23d11430004a1a74c19e64cf7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__08e03dae4118c933867a915c7792089cab20a3e7b410037863eae4f5b745b03d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingStatus]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingStatus]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingStatus]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8187c567e92dab370835aa727775a0f7c326342b28932471e907bc2123facab6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingType",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaFindingType:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f3dce94a74cb95671c9653778caf535fe2fb6b71a2bbb92fe55d47531eb6a61)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaFindingType(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaFindingTypeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingTypeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6dbca7d3a2dd8095de8fa649b2ac03a2582aaa88666e0cea147c5686680abebb)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaFindingTypeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__921353911d17a3609c01244ecc16abde62a83e8012feb33aaccf6b72eefd3967)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaFindingTypeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eef84155abf17bc20014cc26d5b5b3e1c31ad2c4720d7dcc51e29532dbccf528)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5ae2dd016636adebf99fd73398d23e5424d7978b7247cba70c6bf5b391c17b7a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ce36da12d53be40be2e80993c9f4f5b358fedbcf265f8a47823995abd230ef87)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingType]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingType]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingType]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e1806b8e4c1403f0fc796ba2cad872d95799071026c2678a723f80de8df72748)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaFindingTypeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFindingTypeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc53f2dd5cbed0ae99dbb731ba8dac1eb4110e8710359de09f036e0043ac7506)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ced377b5c4aee39b4c5ed16c92b1600b01ac3242edf984d434cecb6047628154)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28b2c2d75a22358e7e1aff95b79e87bb4a8085f5727fd86be3924cd0e09a4bed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingType]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingType]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingType]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a57a67125924368ebc361dde4ea5da26aed8af912b44c73a52f28ddc71cf8630)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFirstObservedAt",
    jsii_struct_bases=[],
    name_mapping={
        "end_inclusive": "endInclusive",
        "start_inclusive": "startInclusive",
    },
)
class Inspector2FilterFilterCriteriaFirstObservedAt:
    def __init__(
        self,
        *,
        end_inclusive: typing.Optional[builtins.str] = None,
        start_inclusive: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param end_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.
        :param start_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43808e850b7bc32384fed5f021d6719767cccedd16afdc852aac4972286e6305)
            check_type(argname="argument end_inclusive", value=end_inclusive, expected_type=type_hints["end_inclusive"])
            check_type(argname="argument start_inclusive", value=start_inclusive, expected_type=type_hints["start_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if end_inclusive is not None:
            self._values["end_inclusive"] = end_inclusive
        if start_inclusive is not None:
            self._values["start_inclusive"] = start_inclusive

    @builtins.property
    def end_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.'''
        result = self._values.get("end_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def start_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.'''
        result = self._values.get("start_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaFirstObservedAt(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaFirstObservedAtList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFirstObservedAtList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e63e8c1589c4d876155c15042739926c937a6d947e2bc1fd0c8e64415b7c4880)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaFirstObservedAtOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de774b292ef2b1b42dc49adaeb7ad0b5056eb5687eceb48918248a27bbfdef27)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaFirstObservedAtOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6b880fb476099ad8a5dfe8e0fe151ab6db1f3d4d75ffc5e67d8044238be0d128)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2a33768edba422248fd604bea12801f3a84bf146bd1b987b5406304a0fa79d9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16c9e3a36a3a80e8beda939bd9bb604a5fc9d13cc9e0c3300b20980c3ad08bd9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFirstObservedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFirstObservedAt]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFirstObservedAt]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ef346c1a2ea631e51795f6fd53f479c3b620ff4efc53171e97553c188a55fb48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaFirstObservedAtOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFirstObservedAtOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__43a23e152051362e1ec9af97ab0a8757937b839214d21ecbb5455a7afcd6644d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetEndInclusive")
    def reset_end_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEndInclusive", []))

    @jsii.member(jsii_name="resetStartInclusive")
    def reset_start_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStartInclusive", []))

    @builtins.property
    @jsii.member(jsii_name="endInclusiveInput")
    def end_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "endInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="startInclusiveInput")
    def start_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "startInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="endInclusive")
    def end_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "endInclusive"))

    @end_inclusive.setter
    def end_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8255c17f38d73b0441ca39e333b0d3490d12cf3bd3edcc1fa188ba765631750b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "endInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="startInclusive")
    def start_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "startInclusive"))

    @start_inclusive.setter
    def start_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1fadc09e371395a96fccf836c2ec7fed1833314ae80a03ecbd87152d86cd1857)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "startInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFirstObservedAt]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFirstObservedAt]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFirstObservedAt]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7396da4dd2de3d3cf5ffa3e9845c7667d7085e549177f81d0c02158a2ceda4e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFixAvailable",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaFixAvailable:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f727f80d4bf7531b182eab82bfb773e1bcdd4340d7d8620749b5b1350fcd07c2)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaFixAvailable(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaFixAvailableList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFixAvailableList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__09bf634a0ae5e157677ef3eecf5db4ae4224f76399c95d660e893ba3ded3763d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaFixAvailableOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4bb7e6f7257085762b6ec60868bcf596a1a81211699ac1b2400bdfa40275e467)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaFixAvailableOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__548fcb08fbc47994f8170a2daa6b0712bd80d1086d09005ffbaecdd8f6b72dd0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e58642b46a967cc3e1b7c7a9f09af53cf731fcc649d32bbc56c1d5527c288d59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d472a8f9ba408b4a7095667a5c957042ef3b59fc8c3038f6b96bbf5cbaa81398)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFixAvailable]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFixAvailable]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFixAvailable]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0debe87e728f7d0e2a364e310baee50c46527fda57a5c224a86203ce45685c2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaFixAvailableOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaFixAvailableOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ebae05523976d6352f96be6d32db3816d035346e7bd7e852a5bc9a3f07fa3fb3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9c26ba0191a1a4332dcad24812e83d8d3d7f0b0e3ff827ea2f95d64bbc5c79d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__df9bf36d9c0a81bb9021b046792cef135f9673dbc178b978cbe4b226335ff5fe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFixAvailable]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFixAvailable]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFixAvailable]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e03d41ade3e07d8d67b5a854a1741c023019bf8fbf481b58b4efa077a13b1e4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaInspectorScore",
    jsii_struct_bases=[],
    name_mapping={
        "lower_inclusive": "lowerInclusive",
        "upper_inclusive": "upperInclusive",
    },
)
class Inspector2FilterFilterCriteriaInspectorScore:
    def __init__(
        self,
        *,
        lower_inclusive: jsii.Number,
        upper_inclusive: jsii.Number,
    ) -> None:
        '''
        :param lower_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lower_inclusive Inspector2Filter#lower_inclusive}.
        :param upper_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#upper_inclusive Inspector2Filter#upper_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0fa5e6b38b56de31c2f38400db0ebb99c5dbddb347faacd25c8460763e4138e8)
            check_type(argname="argument lower_inclusive", value=lower_inclusive, expected_type=type_hints["lower_inclusive"])
            check_type(argname="argument upper_inclusive", value=upper_inclusive, expected_type=type_hints["upper_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "lower_inclusive": lower_inclusive,
            "upper_inclusive": upper_inclusive,
        }

    @builtins.property
    def lower_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lower_inclusive Inspector2Filter#lower_inclusive}.'''
        result = self._values.get("lower_inclusive")
        assert result is not None, "Required property 'lower_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def upper_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#upper_inclusive Inspector2Filter#upper_inclusive}.'''
        result = self._values.get("upper_inclusive")
        assert result is not None, "Required property 'upper_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaInspectorScore(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaInspectorScoreList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaInspectorScoreList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__adf55b59d26432b29e788965099cf1e354149303a19694fa9fede0baacdac9cd)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaInspectorScoreOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b714263a075edf96a50a3895906b62a27842a8c928ab66a5b9fed96437daeb9)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaInspectorScoreOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f70fb6f9f3df709b391917822bf8453b087be7597ac6f1ef4ca0ba16b8d3e807)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3fb9c20fc0522773737484df8c0bfa8fd8cf78115d977965274464d9e85c4ad5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a3c5eeae17be486429cdea0837e6197e7b323ab67112fc7a60a96d4a2ba2ce86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaInspectorScore]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaInspectorScore]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaInspectorScore]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14dcf5957902753d8d60aee529b9e31f7e5e3e309d4fccb3b66e7cd61fafc268)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaInspectorScoreOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaInspectorScoreOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__41364ad80a90cbed1eff4adce3bdee23a1e211df21b8e8cacc8ca18106d6651e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="lowerInclusiveInput")
    def lower_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "lowerInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="upperInclusiveInput")
    def upper_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "upperInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="lowerInclusive")
    def lower_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "lowerInclusive"))

    @lower_inclusive.setter
    def lower_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b77553279d9189055ba94ae87fa8f5c09bbe6bfeccea7ddfd493e0c9d0825b5e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lowerInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="upperInclusive")
    def upper_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "upperInclusive"))

    @upper_inclusive.setter
    def upper_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44b8a676071ec3a0321b1aefdbd6b4c28b565265dd5195f0d0bc06f631122df3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "upperInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaInspectorScore]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaInspectorScore]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaInspectorScore]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e0e9963e172cb6ad782c039678d71495d338ebb8cad793717275fbdddc102d0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__783640538ddeb31296c93e5478c8492d4459f09aec3efb4aefec23bb407065e1)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f75cd3dfcb4db649521c813d29497c3bedb326c913b93770c011d0c080a5b95d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__403853b6b25dcaa5b8ac00e04fb3d54fd021aef209c695cc50437a00d0cfc965)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__504dd606a41187e1d8bae6f0e13d336b728bfc865ad9fec21faf6fc0c6fd4f17)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__590488ba695e07d7151b74b766bf5998c969f26be07320926b1510512cbeecb3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7cc9d57079d82e59627757985d883a940af3ebff15529db9b22cc59cdeecd40a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2209ee1f1da5a9d972a6a0a289ce7286584e99ce2dba348a4d6a8b88e84d6e46)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8c9a6f66f0a8c5763803469adb5ed4e7ff95746e0118f2b76539107e74533ab5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c239a52c0f094398ac273512ee4e5110a95854b7df81c7fe7b18d196887a877a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2c367749ba63c3abe0ba2b5e51e7b751c0313ee52328c001266b66977310442)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__496e06c58a8b6b3ea4f930d005617b81ccc7a80819ddcd26a1643521ac6eabb1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt",
    jsii_struct_bases=[],
    name_mapping={
        "end_inclusive": "endInclusive",
        "start_inclusive": "startInclusive",
    },
)
class Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt:
    def __init__(
        self,
        *,
        end_inclusive: typing.Optional[builtins.str] = None,
        start_inclusive: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param end_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.
        :param start_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58c4df5bb88096f2496460b9fa72499240b1015bd1ca2aac6020aa3f31108395)
            check_type(argname="argument end_inclusive", value=end_inclusive, expected_type=type_hints["end_inclusive"])
            check_type(argname="argument start_inclusive", value=start_inclusive, expected_type=type_hints["start_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if end_inclusive is not None:
            self._values["end_inclusive"] = end_inclusive
        if start_inclusive is not None:
            self._values["start_inclusive"] = start_inclusive

    @builtins.property
    def end_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.'''
        result = self._values.get("end_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def start_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.'''
        result = self._values.get("start_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb469fa88e1b58eb0e8812b26c96ce04bb2ba9466cad12e75df8baa47895d803)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ce8e6bdecc73faea0e789e8f3c27b35542678a351bd2d061380c0d28ece15f2)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dfcb65263162e01b3aeb5f8b333b852fb1ddbd55e1194d1355476755595a6636)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__005140f3f09cb1828c32170342ef0b5ae2ea3860fc6bff58f75862ccb1016ee3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57efccc1d1f6307f1ce1953321c4074fcd1be268c528f8376001aab88392e226)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cffe2e2ed3d5759830d7c346f3c6990cb56cb9fdff01a6fce4e10e67ff103e59)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8397142fa07c66416cceebf11135cd42e695718f02065640d01d7b3374601c4)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetEndInclusive")
    def reset_end_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEndInclusive", []))

    @jsii.member(jsii_name="resetStartInclusive")
    def reset_start_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStartInclusive", []))

    @builtins.property
    @jsii.member(jsii_name="endInclusiveInput")
    def end_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "endInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="startInclusiveInput")
    def start_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "startInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="endInclusive")
    def end_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "endInclusive"))

    @end_inclusive.setter
    def end_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fdee24da19d36f173424fed4706957cbe299eaaa58b1eddd6b389f0a93d10a27)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "endInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="startInclusive")
    def start_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "startInclusive"))

    @start_inclusive.setter
    def start_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be1dfde47d4495975cdcb285e5a6b0ff51aff10e209ee7234d13da03a7b0f453)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "startInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7d649d4924e4821ea21ee6ab356b9fe14f3b176a59dee597f2fd561029d8b7f9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionLayers",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaLambdaFunctionLayers:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0e083efaae191cf5dfda479897a7c5a3254ab0e21c2b3d7813b0d97a900bd65b)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaLambdaFunctionLayers(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaLambdaFunctionLayersList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionLayersList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9670d82d5acfad9a18ac4c787963f9d477d33a5da1c309d09f0cf7efd88e2eed)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaLambdaFunctionLayersOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__502ad7690e32ca57c09df768b8b81850bd85e9ba0fa7910c151328870268333f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaLambdaFunctionLayersOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e829ca9e1c714e84299dc0bde08bc82aefc96ec56eefdbc107d07f3e3443d30)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d7eb519428f324b4e187261e8c92b2714407ac5cdf39560e8377d974ba32811)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f77e606518a6905a3839d46dd0b37c393f8932088b54a23801b07b9e6def5a19)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLayers]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLayers]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLayers]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3b09d48ef1003eff84b580e7a7f2f6d5284f97694ac4871d136256cd976c781f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaLambdaFunctionLayersOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionLayersOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49bd12cefe700e377064a48377a1b148e1eed6e1ecbfa1d058217f7ee25dc57f)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d79aeddee5aeebbb1b04d6a7175cbc919db159d90d2c37f260f2260a1ac33c5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae12ee28333745f6adb94d96d8b7f55878837a0cd9190283ac5b1a3938582330)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionLayers]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionLayers]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionLayers]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7c5a515002b459f2de4d63aff925ba01fb57d137dbfa08401b2b39c514a2670)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionName",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaLambdaFunctionName:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d44a43cc784eda685a74802344b557151c430e4a0ffee18e7a4063c405572751)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaLambdaFunctionName(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaLambdaFunctionNameList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionNameList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__728ae313b37aa5cde92a00fee824a1c28d11c2997bfa0fc5a4fdd8c6bfca4e90)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaLambdaFunctionNameOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__823772ffbecaa253ed059de016829594280613da7b4342a29032d2ece5b7f146)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaLambdaFunctionNameOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__998b5219ca424555ef9c5bb4335851145b84a64e39efa8bcdbf534987dc57bdf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4af7ed8fa3cbdf59a3d34dd8cb90b4ba8d52e0f1192331814a4af82430a6ba0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb1e864aae6e40201e3e526b7dc9d60489540ca55ea2355b6e6bdb94fb5c7224)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionName]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionName]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a49960b658f54ab7b538eefddcf80e6edc71512b01ec0c281eb49a668c951988)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaLambdaFunctionNameOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionNameOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc8297908470e987c5cfa15257f72da9bc38cdf7feab6c64b36bed40437efed3)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3228b2b31e2b91264ab1503d0ad57934beab6701acf80bbc0abcc326948edbfb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__74a321022f374b84ff497e6cd78d1550ba0242e17f85bf58b20a52ff078b2bcd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionName]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionName]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b0fe1902ac39e9a8e7a6e18dce1f8d5af7d875bea176cc95c08af167037aaaee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionRuntime",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaLambdaFunctionRuntime:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ed488d3b9ff2c187b8428101894acb712c2effb4128a34869c83d2a40b573c1d)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaLambdaFunctionRuntime(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaLambdaFunctionRuntimeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionRuntimeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6e63bb680e976f4f9f54012b24ea3f96127929c8f13006aa9f799ccb471121c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaLambdaFunctionRuntimeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__05320e146a852af7446ab02e6fe55d34be9a2cb36d18a23956b64137f53e0753)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaLambdaFunctionRuntimeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7591fb7127e157b56a8f002492d43580a814106ee630a8c365023185c02bc7fb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2c0fdf085d617f4967939b8e7e09b9b58a49c18a80e7dfc1158d462779118c6e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b084f4716dcddb3ec95b149075f509e5550ed48f6d9adfff8b728cabab864a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionRuntime]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionRuntime]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionRuntime]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__55e35c7602487b783edad04dfc3cd78d462bba60acaaf20efee9743bfc81cd72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaLambdaFunctionRuntimeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLambdaFunctionRuntimeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a55b28acef52923971e641925dd9d5b6179cd65eb9578333b36b739abae10e31)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff284d4a582a9dcaee087dd9e4bf91f8617ccb48ae9c629ceb18d9d5a9e94c6e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__48e5e082b440fdb2b71cae2f166a665542a14fe90d6e5c466a964d0f5d5a2a71)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionRuntime]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionRuntime]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionRuntime]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__741182676979286772071c1201b2d1a827a7f28da6bc9a6d82f092052a7b183e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLastObservedAt",
    jsii_struct_bases=[],
    name_mapping={
        "end_inclusive": "endInclusive",
        "start_inclusive": "startInclusive",
    },
)
class Inspector2FilterFilterCriteriaLastObservedAt:
    def __init__(
        self,
        *,
        end_inclusive: typing.Optional[builtins.str] = None,
        start_inclusive: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param end_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.
        :param start_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__45e231423457ec6b0b91b64bd5353264b1092d5075fc30d7fe9286042981aa3d)
            check_type(argname="argument end_inclusive", value=end_inclusive, expected_type=type_hints["end_inclusive"])
            check_type(argname="argument start_inclusive", value=start_inclusive, expected_type=type_hints["start_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if end_inclusive is not None:
            self._values["end_inclusive"] = end_inclusive
        if start_inclusive is not None:
            self._values["start_inclusive"] = start_inclusive

    @builtins.property
    def end_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.'''
        result = self._values.get("end_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def start_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.'''
        result = self._values.get("start_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaLastObservedAt(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaLastObservedAtList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLastObservedAtList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__103c0ca8cc119013660f4cfd93850b9d9c68bbf471c5c43ed9f86545ecf7367a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaLastObservedAtOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__60e80b315e7d2507ed1f461ad2a0dc41a5ce08b615726138e869e3c9275fb19f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaLastObservedAtOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__68ed271d22a25cd284e0360606f0539f3f248259babab89c6cb2626427cf2499)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b254b6e45eba61b216bf155dce5fe1fdf74ac5b37e8323fc04133dde169f77c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1e738455f8c14ab113221be2251b257adc5ea15fe6b6637d4ab655f741b07941)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLastObservedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLastObservedAt]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLastObservedAt]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__999d769c39604dc554d2b528e29ea01249a0a7c123f789a22850bf804e04aa3f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaLastObservedAtOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaLastObservedAtOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__374db02117a281af0cdd71df55632687e858863439581efaa765611afa090c9e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetEndInclusive")
    def reset_end_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEndInclusive", []))

    @jsii.member(jsii_name="resetStartInclusive")
    def reset_start_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStartInclusive", []))

    @builtins.property
    @jsii.member(jsii_name="endInclusiveInput")
    def end_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "endInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="startInclusiveInput")
    def start_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "startInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="endInclusive")
    def end_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "endInclusive"))

    @end_inclusive.setter
    def end_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0be99107884aecb3c3798ee8690751f51a1f1804468721b7ea918597651ec4c0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "endInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="startInclusive")
    def start_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "startInclusive"))

    @start_inclusive.setter
    def start_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8d8c983910308a8a77b507b16056de9686350edfbf0988036932bafa390111f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "startInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLastObservedAt]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLastObservedAt]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLastObservedAt]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c3956035f3e356444e308e53aaabf6bd884c6a76ff27399f7428b81578b2b66)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8eb12db2347fcc860fc6a1961df52891b45788ccf9163b60f790368cf688c216)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1117389e0b1803bfb765e28a32907583c336e5c994644d5faaaef67bae08e9f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__793a74ef479a178250c8a0b495a1b9a6af123e0faeb9627c16135b87d768e2aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__28b70afe087587078445ed732de290fe66164ea545652c059152e17ab793825f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d082e706ee98206a407095fc7f04b68c00138b9eaa1adcb1cb491964a75a359)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteria]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteria]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteria]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__734bc9bd8615e7be704ce5b135979b34f75779c5ff198480beb91ded6c9155d4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaNetworkProtocol",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaNetworkProtocol:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__acfba0f3037c61903014dbfd77f2d2ab0405369ca90a0aadb5da7a3f1b1960e6)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaNetworkProtocol(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaNetworkProtocolList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaNetworkProtocolList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__35aa39fb6c87a26c7a16ff236de91c2a788edcdb3aa25f52b87ab645becc719b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaNetworkProtocolOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__afd451ae64d56f17dc804bf8a7a9f0d575c198047b8862f9a827f7ab2f2338a3)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaNetworkProtocolOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e5a551046517dacbe332070f1e54ca6ac6eb01e54d1eccad86ce09187560a031)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__57d1050a534c693484782f23fb3cad6ad3ef23f1c25ed596ad9490e7d9f5ea09)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6bb6e0470aa50f42cddab5ca73097e2bff532282b573be1715e5ab6dac1efdf6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaNetworkProtocol]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaNetworkProtocol]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaNetworkProtocol]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4fc585c1a76fdbc7bd1360d19439f8967840d5855ad8a77c1245bb06b68c3fc4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaNetworkProtocolOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaNetworkProtocolOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad3a066b619da6c163bb533c00e682969e5a379ca57244e6c7d9c8b8cc87e518)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__461d76ad776b241cac3fb0b0191699c6e9a956e8457bf35a3f4eb63d557fde77)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a4ad41b8758790b556520c3bc4ee14328d2d6e0c51ba3168791c9609a610a588)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaNetworkProtocol]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaNetworkProtocol]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaNetworkProtocol]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__03a958b3e1c69a72ae35502a8a7581c499bad8a2b0984bb7d8d0b299389026de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2ccfcb9cf42ef716a75241aa71e4b66d5e375c35d9b765806623261f5e9a72a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putAwsAccountId")
    def put_aws_account_id(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaAwsAccountId, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6809cd9c1587b4deddaf10c51d31d599aa55a04bb6164196b81e79e4794b56b6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putAwsAccountId", [value]))

    @jsii.member(jsii_name="putCodeRepositoryProjectName")
    def put_code_repository_project_name(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeRepositoryProjectName, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aad8322d0266f452c252a3dc58192c6fd29321efeb1d99b621ea6a7088c46533)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCodeRepositoryProjectName", [value]))

    @jsii.member(jsii_name="putCodeRepositoryProviderType")
    def put_code_repository_provider_type(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeRepositoryProviderType, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6218852e8fc49af6f6a152a2d2e45621b6b041442750c3a9b9e544e502d09832)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCodeRepositoryProviderType", [value]))

    @jsii.member(jsii_name="putCodeVulnerabilityDetectorName")
    def put_code_vulnerability_detector_name(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fc4df2bd1f6f77da638329b7fd6ddfa80f7f1167df151bbc7641dcf7f1afab1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCodeVulnerabilityDetectorName", [value]))

    @jsii.member(jsii_name="putCodeVulnerabilityDetectorTags")
    def put_code_vulnerability_detector_tags(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96ab6d5979b95bf0f950a699aac7d53768c894516f1bb9f7875d330a8bb6a7d3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCodeVulnerabilityDetectorTags", [value]))

    @jsii.member(jsii_name="putCodeVulnerabilityFilePath")
    def put_code_vulnerability_file_path(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a11ec778a7f5f88a0443f6af65ccba01b69ddeb917786e5f959755c33847f418)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putCodeVulnerabilityFilePath", [value]))

    @jsii.member(jsii_name="putComponentId")
    def put_component_id(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaComponentId, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6aeb1147dfa88ef4faea4a067fd7c5ba70b0f59d6fdb92abb8b8c1f57c676ae)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putComponentId", [value]))

    @jsii.member(jsii_name="putComponentType")
    def put_component_type(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaComponentType, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a5f2d1ffd6c89e072f87b4082ce8a0e486e40c6f48a0701d2e902f9f1713c099)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putComponentType", [value]))

    @jsii.member(jsii_name="putEc2InstanceImageId")
    def put_ec2_instance_image_id(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceImageId, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dcefbeb1895455f6e6e06a7b28d8cfe98b4158191e95643e030d17162e7f4771)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEc2InstanceImageId", [value]))

    @jsii.member(jsii_name="putEc2InstanceSubnetId")
    def put_ec2_instance_subnet_id(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceSubnetId, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5dd8bda4d1e436c988f65a4dc2b7559621cff82458abd45350c8597fa7d22ae0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEc2InstanceSubnetId", [value]))

    @jsii.member(jsii_name="putEc2InstanceVpcId")
    def put_ec2_instance_vpc_id(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceVpcId, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bea54ed9e157e1c8b5dceddc6bb8f51f8e4969bd6e3c56db8461e034949a5ca0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEc2InstanceVpcId", [value]))

    @jsii.member(jsii_name="putEcrImageArchitecture")
    def put_ecr_image_architecture(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageArchitecture, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__438ed3a8723d725059b1094f15cd2afe3b59db87488a83fc4e905f18704cfdd2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEcrImageArchitecture", [value]))

    @jsii.member(jsii_name="putEcrImageHash")
    def put_ecr_image_hash(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageHash, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c333a38eff1b425dff8a5877bc963bef1cb8201b31be13606d8819fee4a06f9b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEcrImageHash", [value]))

    @jsii.member(jsii_name="putEcrImageInUseCount")
    def put_ecr_image_in_use_count(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageInUseCount, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__662c73a01fbb067602e5f1cb9e218b10db2f2f21a5479e505d15296e5e588555)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEcrImageInUseCount", [value]))

    @jsii.member(jsii_name="putEcrImageLastInUseAt")
    def put_ecr_image_last_in_use_at(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageLastInUseAt, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__96c7032868773821a279c5938ea895e8a6cd7a9c328d77e1cc5d8f8c4e8cc754)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEcrImageLastInUseAt", [value]))

    @jsii.member(jsii_name="putEcrImagePushedAt")
    def put_ecr_image_pushed_at(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImagePushedAt, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__110865f4f38c186e44206efba992d03e9c8264b1668afdd37f5a8fcbbab8735c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEcrImagePushedAt", [value]))

    @jsii.member(jsii_name="putEcrImageRegistry")
    def put_ecr_image_registry(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageRegistry, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e10ec5272834131b85a7de29d7668cef0dce9a3287519eec04c0b36ccade6195)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEcrImageRegistry", [value]))

    @jsii.member(jsii_name="putEcrImageRepositoryName")
    def put_ecr_image_repository_name(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageRepositoryName, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__83c0179f6ca18840888c8474bf103fc8f62ca8d7734509c7f1c86a870eb36e89)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEcrImageRepositoryName", [value]))

    @jsii.member(jsii_name="putEcrImageTags")
    def put_ecr_image_tags(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageTags, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__16b1aedcbd8b62ddb24aa70f1973aca9ba0ebbaccb8a36865b6de61c62cfd01e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEcrImageTags", [value]))

    @jsii.member(jsii_name="putEpssScore")
    def put_epss_score(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEpssScore, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__40cb785add6dbf14d963c90c26f70301dda1c4cb574c2bcb7f07e050ad4d0bfe)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEpssScore", [value]))

    @jsii.member(jsii_name="putExploitAvailable")
    def put_exploit_available(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaExploitAvailable, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b1d86a23b41d3f1082003b61c6de56f60f9afd777d114947da1f8542c240851e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putExploitAvailable", [value]))

    @jsii.member(jsii_name="putFindingArn")
    def put_finding_arn(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingArn, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__198ee2a86e058050c6c6cc3fd34d2a401c583c4373bc2894c7ddcf45dbf97c2e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFindingArn", [value]))

    @jsii.member(jsii_name="putFindingStatus")
    def put_finding_status(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingStatus, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b5fabce57f06070ed99b47c0033a79c3d97ec75c29d5b172467accdb8765fac)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFindingStatus", [value]))

    @jsii.member(jsii_name="putFindingType")
    def put_finding_type(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingType, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b930690537cf151ee76db23c38468e14e1929b46e076a6ce686e09501d2055b3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFindingType", [value]))

    @jsii.member(jsii_name="putFirstObservedAt")
    def put_first_observed_at(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFirstObservedAt, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__88bc33768378f75098fd5b3fd7392bd5807a013376ca36e2efeeed8b738dc90c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFirstObservedAt", [value]))

    @jsii.member(jsii_name="putFixAvailable")
    def put_fix_available(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFixAvailable, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a94192c960ffdcd3964610050ffd8f62c82ccfbfea3d47fe9ae8aed11a88c71)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFixAvailable", [value]))

    @jsii.member(jsii_name="putInspectorScore")
    def put_inspector_score(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaInspectorScore, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__398f7020cdcfa8110d3ed4665bcb8dbad092598b858f28c7ef399fa37cfcf50c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putInspectorScore", [value]))

    @jsii.member(jsii_name="putLambdaFunctionExecutionRoleArn")
    def put_lambda_function_execution_role_arn(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ae15c80f8fb266254b363d3351338d982d4e043824b785cc6c2e7246b51a318b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putLambdaFunctionExecutionRoleArn", [value]))

    @jsii.member(jsii_name="putLambdaFunctionLastModifiedAt")
    def put_lambda_function_last_modified_at(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fe80178d721bc8a02ed263023ff0c37271b15a03c5fb58d415e2cb338cfee5d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putLambdaFunctionLastModifiedAt", [value]))

    @jsii.member(jsii_name="putLambdaFunctionLayers")
    def put_lambda_function_layers(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionLayers, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12c4878258102bbb880c2589981684796ced9a84872e8d322093f48a1016d6b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putLambdaFunctionLayers", [value]))

    @jsii.member(jsii_name="putLambdaFunctionName")
    def put_lambda_function_name(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionName, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e350f876846475bef9723cfebfdf28125764a547d68e5e4303c2ede6749bc2df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putLambdaFunctionName", [value]))

    @jsii.member(jsii_name="putLambdaFunctionRuntime")
    def put_lambda_function_runtime(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionRuntime, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9556dfadbaace8e437bcf9b5c3ce6fa86ad9453bb962ed00ea394aa9e8c8a200)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putLambdaFunctionRuntime", [value]))

    @jsii.member(jsii_name="putLastObservedAt")
    def put_last_observed_at(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLastObservedAt, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__da17ccb01a01cb2f8ba7da5de56e9e92d156cc54c20dd97073f321daf2bfc5a8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putLastObservedAt", [value]))

    @jsii.member(jsii_name="putNetworkProtocol")
    def put_network_protocol(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaNetworkProtocol, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7a4707c80b20f88f06a69906a76628eaedd099ab32ed4168a32ad0afbb3489d8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putNetworkProtocol", [value]))

    @jsii.member(jsii_name="putPortRange")
    def put_port_range(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaPortRange", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__370ea21ce87fe637a476ae41cb01385f02e7950a32884d71af44f1496f880229)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putPortRange", [value]))

    @jsii.member(jsii_name="putRelatedVulnerabilities")
    def put_related_vulnerabilities(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaRelatedVulnerabilities", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d0a9956083f9ccfcce6d95707d3252d1337addedb6e67893a7ef8cf5e5a15c5c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putRelatedVulnerabilities", [value]))

    @jsii.member(jsii_name="putResourceId")
    def put_resource_id(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaResourceId", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5cd8d05a3207d9dbd17512f837bef5c9bbf803ab405edc1e40bfe67234765ec7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putResourceId", [value]))

    @jsii.member(jsii_name="putResourceTags")
    def put_resource_tags(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaResourceTags", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__aa37aef0838411da3400dadba8b91248624fcf0ba7cc68dc80f5bc44c69990b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putResourceTags", [value]))

    @jsii.member(jsii_name="putResourceType")
    def put_resource_type(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaResourceType", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d89c53f8fb9c69ca51ba38d572c98cd76a2a2f1a82ee15d8b1b05496a414e66f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putResourceType", [value]))

    @jsii.member(jsii_name="putSeverity")
    def put_severity(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaSeverity", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__896281e9fb466403ca62da7a4420a34d4c8bbf4ec51def1de07f176016af4ee1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSeverity", [value]))

    @jsii.member(jsii_name="putTitle")
    def put_title(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaTitle", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__442213fbe1636c0efb8812b08efd91630ec7456908b8e9b797e1458393e2af1c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putTitle", [value]))

    @jsii.member(jsii_name="putUpdatedAt")
    def put_updated_at(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaUpdatedAt", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a947b01974530b9f29712747eb684661cf45816467111e35c786054d78ef25e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putUpdatedAt", [value]))

    @jsii.member(jsii_name="putVendorSeverity")
    def put_vendor_severity(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVendorSeverity", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a2185920c353b49637f60b05c55630fc60ec25a6e2593e6c6a94130e1c984012)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putVendorSeverity", [value]))

    @jsii.member(jsii_name="putVulnerabilityId")
    def put_vulnerability_id(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerabilityId", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3e0fb2060ba7112bc69c982a112d1e38fab8caa521b6b04a2dd3a9586f5c500d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putVulnerabilityId", [value]))

    @jsii.member(jsii_name="putVulnerabilitySource")
    def put_vulnerability_source(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerabilitySource", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4b6930564f16ece05d9419fb78138b22b88916c66e19eabac7ea3dc5a58defa4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putVulnerabilitySource", [value]))

    @jsii.member(jsii_name="putVulnerablePackages")
    def put_vulnerable_packages(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackages", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__be525aa342faf7d035a430e3f13f15f0bd0c69c30302c1246c2803cb6fd716a2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putVulnerablePackages", [value]))

    @jsii.member(jsii_name="resetAwsAccountId")
    def reset_aws_account_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetAwsAccountId", []))

    @jsii.member(jsii_name="resetCodeRepositoryProjectName")
    def reset_code_repository_project_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodeRepositoryProjectName", []))

    @jsii.member(jsii_name="resetCodeRepositoryProviderType")
    def reset_code_repository_provider_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodeRepositoryProviderType", []))

    @jsii.member(jsii_name="resetCodeVulnerabilityDetectorName")
    def reset_code_vulnerability_detector_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodeVulnerabilityDetectorName", []))

    @jsii.member(jsii_name="resetCodeVulnerabilityDetectorTags")
    def reset_code_vulnerability_detector_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodeVulnerabilityDetectorTags", []))

    @jsii.member(jsii_name="resetCodeVulnerabilityFilePath")
    def reset_code_vulnerability_file_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetCodeVulnerabilityFilePath", []))

    @jsii.member(jsii_name="resetComponentId")
    def reset_component_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetComponentId", []))

    @jsii.member(jsii_name="resetComponentType")
    def reset_component_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetComponentType", []))

    @jsii.member(jsii_name="resetEc2InstanceImageId")
    def reset_ec2_instance_image_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEc2InstanceImageId", []))

    @jsii.member(jsii_name="resetEc2InstanceSubnetId")
    def reset_ec2_instance_subnet_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEc2InstanceSubnetId", []))

    @jsii.member(jsii_name="resetEc2InstanceVpcId")
    def reset_ec2_instance_vpc_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEc2InstanceVpcId", []))

    @jsii.member(jsii_name="resetEcrImageArchitecture")
    def reset_ecr_image_architecture(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcrImageArchitecture", []))

    @jsii.member(jsii_name="resetEcrImageHash")
    def reset_ecr_image_hash(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcrImageHash", []))

    @jsii.member(jsii_name="resetEcrImageInUseCount")
    def reset_ecr_image_in_use_count(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcrImageInUseCount", []))

    @jsii.member(jsii_name="resetEcrImageLastInUseAt")
    def reset_ecr_image_last_in_use_at(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcrImageLastInUseAt", []))

    @jsii.member(jsii_name="resetEcrImagePushedAt")
    def reset_ecr_image_pushed_at(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcrImagePushedAt", []))

    @jsii.member(jsii_name="resetEcrImageRegistry")
    def reset_ecr_image_registry(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcrImageRegistry", []))

    @jsii.member(jsii_name="resetEcrImageRepositoryName")
    def reset_ecr_image_repository_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcrImageRepositoryName", []))

    @jsii.member(jsii_name="resetEcrImageTags")
    def reset_ecr_image_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEcrImageTags", []))

    @jsii.member(jsii_name="resetEpssScore")
    def reset_epss_score(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEpssScore", []))

    @jsii.member(jsii_name="resetExploitAvailable")
    def reset_exploit_available(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetExploitAvailable", []))

    @jsii.member(jsii_name="resetFindingArn")
    def reset_finding_arn(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFindingArn", []))

    @jsii.member(jsii_name="resetFindingStatus")
    def reset_finding_status(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFindingStatus", []))

    @jsii.member(jsii_name="resetFindingType")
    def reset_finding_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFindingType", []))

    @jsii.member(jsii_name="resetFirstObservedAt")
    def reset_first_observed_at(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFirstObservedAt", []))

    @jsii.member(jsii_name="resetFixAvailable")
    def reset_fix_available(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFixAvailable", []))

    @jsii.member(jsii_name="resetInspectorScore")
    def reset_inspector_score(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetInspectorScore", []))

    @jsii.member(jsii_name="resetLambdaFunctionExecutionRoleArn")
    def reset_lambda_function_execution_role_arn(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLambdaFunctionExecutionRoleArn", []))

    @jsii.member(jsii_name="resetLambdaFunctionLastModifiedAt")
    def reset_lambda_function_last_modified_at(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLambdaFunctionLastModifiedAt", []))

    @jsii.member(jsii_name="resetLambdaFunctionLayers")
    def reset_lambda_function_layers(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLambdaFunctionLayers", []))

    @jsii.member(jsii_name="resetLambdaFunctionName")
    def reset_lambda_function_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLambdaFunctionName", []))

    @jsii.member(jsii_name="resetLambdaFunctionRuntime")
    def reset_lambda_function_runtime(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLambdaFunctionRuntime", []))

    @jsii.member(jsii_name="resetLastObservedAt")
    def reset_last_observed_at(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetLastObservedAt", []))

    @jsii.member(jsii_name="resetNetworkProtocol")
    def reset_network_protocol(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetNetworkProtocol", []))

    @jsii.member(jsii_name="resetPortRange")
    def reset_port_range(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetPortRange", []))

    @jsii.member(jsii_name="resetRelatedVulnerabilities")
    def reset_related_vulnerabilities(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRelatedVulnerabilities", []))

    @jsii.member(jsii_name="resetResourceId")
    def reset_resource_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetResourceId", []))

    @jsii.member(jsii_name="resetResourceTags")
    def reset_resource_tags(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetResourceTags", []))

    @jsii.member(jsii_name="resetResourceType")
    def reset_resource_type(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetResourceType", []))

    @jsii.member(jsii_name="resetSeverity")
    def reset_severity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSeverity", []))

    @jsii.member(jsii_name="resetTitle")
    def reset_title(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetTitle", []))

    @jsii.member(jsii_name="resetUpdatedAt")
    def reset_updated_at(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetUpdatedAt", []))

    @jsii.member(jsii_name="resetVendorSeverity")
    def reset_vendor_severity(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVendorSeverity", []))

    @jsii.member(jsii_name="resetVulnerabilityId")
    def reset_vulnerability_id(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVulnerabilityId", []))

    @jsii.member(jsii_name="resetVulnerabilitySource")
    def reset_vulnerability_source(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVulnerabilitySource", []))

    @jsii.member(jsii_name="resetVulnerablePackages")
    def reset_vulnerable_packages(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVulnerablePackages", []))

    @builtins.property
    @jsii.member(jsii_name="awsAccountId")
    def aws_account_id(self) -> Inspector2FilterFilterCriteriaAwsAccountIdList:
        return typing.cast(Inspector2FilterFilterCriteriaAwsAccountIdList, jsii.get(self, "awsAccountId"))

    @builtins.property
    @jsii.member(jsii_name="codeRepositoryProjectName")
    def code_repository_project_name(
        self,
    ) -> Inspector2FilterFilterCriteriaCodeRepositoryProjectNameList:
        return typing.cast(Inspector2FilterFilterCriteriaCodeRepositoryProjectNameList, jsii.get(self, "codeRepositoryProjectName"))

    @builtins.property
    @jsii.member(jsii_name="codeRepositoryProviderType")
    def code_repository_provider_type(
        self,
    ) -> Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeList:
        return typing.cast(Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeList, jsii.get(self, "codeRepositoryProviderType"))

    @builtins.property
    @jsii.member(jsii_name="codeVulnerabilityDetectorName")
    def code_vulnerability_detector_name(
        self,
    ) -> Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameList:
        return typing.cast(Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameList, jsii.get(self, "codeVulnerabilityDetectorName"))

    @builtins.property
    @jsii.member(jsii_name="codeVulnerabilityDetectorTags")
    def code_vulnerability_detector_tags(
        self,
    ) -> Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsList:
        return typing.cast(Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsList, jsii.get(self, "codeVulnerabilityDetectorTags"))

    @builtins.property
    @jsii.member(jsii_name="codeVulnerabilityFilePath")
    def code_vulnerability_file_path(
        self,
    ) -> Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathList:
        return typing.cast(Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathList, jsii.get(self, "codeVulnerabilityFilePath"))

    @builtins.property
    @jsii.member(jsii_name="componentId")
    def component_id(self) -> Inspector2FilterFilterCriteriaComponentIdList:
        return typing.cast(Inspector2FilterFilterCriteriaComponentIdList, jsii.get(self, "componentId"))

    @builtins.property
    @jsii.member(jsii_name="componentType")
    def component_type(self) -> Inspector2FilterFilterCriteriaComponentTypeList:
        return typing.cast(Inspector2FilterFilterCriteriaComponentTypeList, jsii.get(self, "componentType"))

    @builtins.property
    @jsii.member(jsii_name="ec2InstanceImageId")
    def ec2_instance_image_id(
        self,
    ) -> Inspector2FilterFilterCriteriaEc2InstanceImageIdList:
        return typing.cast(Inspector2FilterFilterCriteriaEc2InstanceImageIdList, jsii.get(self, "ec2InstanceImageId"))

    @builtins.property
    @jsii.member(jsii_name="ec2InstanceSubnetId")
    def ec2_instance_subnet_id(
        self,
    ) -> Inspector2FilterFilterCriteriaEc2InstanceSubnetIdList:
        return typing.cast(Inspector2FilterFilterCriteriaEc2InstanceSubnetIdList, jsii.get(self, "ec2InstanceSubnetId"))

    @builtins.property
    @jsii.member(jsii_name="ec2InstanceVpcId")
    def ec2_instance_vpc_id(self) -> Inspector2FilterFilterCriteriaEc2InstanceVpcIdList:
        return typing.cast(Inspector2FilterFilterCriteriaEc2InstanceVpcIdList, jsii.get(self, "ec2InstanceVpcId"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageArchitecture")
    def ecr_image_architecture(
        self,
    ) -> Inspector2FilterFilterCriteriaEcrImageArchitectureList:
        return typing.cast(Inspector2FilterFilterCriteriaEcrImageArchitectureList, jsii.get(self, "ecrImageArchitecture"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageHash")
    def ecr_image_hash(self) -> Inspector2FilterFilterCriteriaEcrImageHashList:
        return typing.cast(Inspector2FilterFilterCriteriaEcrImageHashList, jsii.get(self, "ecrImageHash"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageInUseCount")
    def ecr_image_in_use_count(
        self,
    ) -> Inspector2FilterFilterCriteriaEcrImageInUseCountList:
        return typing.cast(Inspector2FilterFilterCriteriaEcrImageInUseCountList, jsii.get(self, "ecrImageInUseCount"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageLastInUseAt")
    def ecr_image_last_in_use_at(
        self,
    ) -> Inspector2FilterFilterCriteriaEcrImageLastInUseAtList:
        return typing.cast(Inspector2FilterFilterCriteriaEcrImageLastInUseAtList, jsii.get(self, "ecrImageLastInUseAt"))

    @builtins.property
    @jsii.member(jsii_name="ecrImagePushedAt")
    def ecr_image_pushed_at(self) -> Inspector2FilterFilterCriteriaEcrImagePushedAtList:
        return typing.cast(Inspector2FilterFilterCriteriaEcrImagePushedAtList, jsii.get(self, "ecrImagePushedAt"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageRegistry")
    def ecr_image_registry(self) -> Inspector2FilterFilterCriteriaEcrImageRegistryList:
        return typing.cast(Inspector2FilterFilterCriteriaEcrImageRegistryList, jsii.get(self, "ecrImageRegistry"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageRepositoryName")
    def ecr_image_repository_name(
        self,
    ) -> Inspector2FilterFilterCriteriaEcrImageRepositoryNameList:
        return typing.cast(Inspector2FilterFilterCriteriaEcrImageRepositoryNameList, jsii.get(self, "ecrImageRepositoryName"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageTags")
    def ecr_image_tags(self) -> Inspector2FilterFilterCriteriaEcrImageTagsList:
        return typing.cast(Inspector2FilterFilterCriteriaEcrImageTagsList, jsii.get(self, "ecrImageTags"))

    @builtins.property
    @jsii.member(jsii_name="epssScore")
    def epss_score(self) -> Inspector2FilterFilterCriteriaEpssScoreList:
        return typing.cast(Inspector2FilterFilterCriteriaEpssScoreList, jsii.get(self, "epssScore"))

    @builtins.property
    @jsii.member(jsii_name="exploitAvailable")
    def exploit_available(self) -> Inspector2FilterFilterCriteriaExploitAvailableList:
        return typing.cast(Inspector2FilterFilterCriteriaExploitAvailableList, jsii.get(self, "exploitAvailable"))

    @builtins.property
    @jsii.member(jsii_name="findingArn")
    def finding_arn(self) -> Inspector2FilterFilterCriteriaFindingArnList:
        return typing.cast(Inspector2FilterFilterCriteriaFindingArnList, jsii.get(self, "findingArn"))

    @builtins.property
    @jsii.member(jsii_name="findingStatus")
    def finding_status(self) -> Inspector2FilterFilterCriteriaFindingStatusList:
        return typing.cast(Inspector2FilterFilterCriteriaFindingStatusList, jsii.get(self, "findingStatus"))

    @builtins.property
    @jsii.member(jsii_name="findingType")
    def finding_type(self) -> Inspector2FilterFilterCriteriaFindingTypeList:
        return typing.cast(Inspector2FilterFilterCriteriaFindingTypeList, jsii.get(self, "findingType"))

    @builtins.property
    @jsii.member(jsii_name="firstObservedAt")
    def first_observed_at(self) -> Inspector2FilterFilterCriteriaFirstObservedAtList:
        return typing.cast(Inspector2FilterFilterCriteriaFirstObservedAtList, jsii.get(self, "firstObservedAt"))

    @builtins.property
    @jsii.member(jsii_name="fixAvailable")
    def fix_available(self) -> Inspector2FilterFilterCriteriaFixAvailableList:
        return typing.cast(Inspector2FilterFilterCriteriaFixAvailableList, jsii.get(self, "fixAvailable"))

    @builtins.property
    @jsii.member(jsii_name="inspectorScore")
    def inspector_score(self) -> Inspector2FilterFilterCriteriaInspectorScoreList:
        return typing.cast(Inspector2FilterFilterCriteriaInspectorScoreList, jsii.get(self, "inspectorScore"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionExecutionRoleArn")
    def lambda_function_execution_role_arn(
        self,
    ) -> Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnList:
        return typing.cast(Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnList, jsii.get(self, "lambdaFunctionExecutionRoleArn"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionLastModifiedAt")
    def lambda_function_last_modified_at(
        self,
    ) -> Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtList:
        return typing.cast(Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtList, jsii.get(self, "lambdaFunctionLastModifiedAt"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionLayers")
    def lambda_function_layers(
        self,
    ) -> Inspector2FilterFilterCriteriaLambdaFunctionLayersList:
        return typing.cast(Inspector2FilterFilterCriteriaLambdaFunctionLayersList, jsii.get(self, "lambdaFunctionLayers"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionName")
    def lambda_function_name(
        self,
    ) -> Inspector2FilterFilterCriteriaLambdaFunctionNameList:
        return typing.cast(Inspector2FilterFilterCriteriaLambdaFunctionNameList, jsii.get(self, "lambdaFunctionName"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionRuntime")
    def lambda_function_runtime(
        self,
    ) -> Inspector2FilterFilterCriteriaLambdaFunctionRuntimeList:
        return typing.cast(Inspector2FilterFilterCriteriaLambdaFunctionRuntimeList, jsii.get(self, "lambdaFunctionRuntime"))

    @builtins.property
    @jsii.member(jsii_name="lastObservedAt")
    def last_observed_at(self) -> Inspector2FilterFilterCriteriaLastObservedAtList:
        return typing.cast(Inspector2FilterFilterCriteriaLastObservedAtList, jsii.get(self, "lastObservedAt"))

    @builtins.property
    @jsii.member(jsii_name="networkProtocol")
    def network_protocol(self) -> Inspector2FilterFilterCriteriaNetworkProtocolList:
        return typing.cast(Inspector2FilterFilterCriteriaNetworkProtocolList, jsii.get(self, "networkProtocol"))

    @builtins.property
    @jsii.member(jsii_name="portRange")
    def port_range(self) -> "Inspector2FilterFilterCriteriaPortRangeList":
        return typing.cast("Inspector2FilterFilterCriteriaPortRangeList", jsii.get(self, "portRange"))

    @builtins.property
    @jsii.member(jsii_name="relatedVulnerabilities")
    def related_vulnerabilities(
        self,
    ) -> "Inspector2FilterFilterCriteriaRelatedVulnerabilitiesList":
        return typing.cast("Inspector2FilterFilterCriteriaRelatedVulnerabilitiesList", jsii.get(self, "relatedVulnerabilities"))

    @builtins.property
    @jsii.member(jsii_name="resourceId")
    def resource_id(self) -> "Inspector2FilterFilterCriteriaResourceIdList":
        return typing.cast("Inspector2FilterFilterCriteriaResourceIdList", jsii.get(self, "resourceId"))

    @builtins.property
    @jsii.member(jsii_name="resourceTags")
    def resource_tags(self) -> "Inspector2FilterFilterCriteriaResourceTagsList":
        return typing.cast("Inspector2FilterFilterCriteriaResourceTagsList", jsii.get(self, "resourceTags"))

    @builtins.property
    @jsii.member(jsii_name="resourceType")
    def resource_type(self) -> "Inspector2FilterFilterCriteriaResourceTypeList":
        return typing.cast("Inspector2FilterFilterCriteriaResourceTypeList", jsii.get(self, "resourceType"))

    @builtins.property
    @jsii.member(jsii_name="severity")
    def severity(self) -> "Inspector2FilterFilterCriteriaSeverityList":
        return typing.cast("Inspector2FilterFilterCriteriaSeverityList", jsii.get(self, "severity"))

    @builtins.property
    @jsii.member(jsii_name="title")
    def title(self) -> "Inspector2FilterFilterCriteriaTitleList":
        return typing.cast("Inspector2FilterFilterCriteriaTitleList", jsii.get(self, "title"))

    @builtins.property
    @jsii.member(jsii_name="updatedAt")
    def updated_at(self) -> "Inspector2FilterFilterCriteriaUpdatedAtList":
        return typing.cast("Inspector2FilterFilterCriteriaUpdatedAtList", jsii.get(self, "updatedAt"))

    @builtins.property
    @jsii.member(jsii_name="vendorSeverity")
    def vendor_severity(self) -> "Inspector2FilterFilterCriteriaVendorSeverityList":
        return typing.cast("Inspector2FilterFilterCriteriaVendorSeverityList", jsii.get(self, "vendorSeverity"))

    @builtins.property
    @jsii.member(jsii_name="vulnerabilityId")
    def vulnerability_id(self) -> "Inspector2FilterFilterCriteriaVulnerabilityIdList":
        return typing.cast("Inspector2FilterFilterCriteriaVulnerabilityIdList", jsii.get(self, "vulnerabilityId"))

    @builtins.property
    @jsii.member(jsii_name="vulnerabilitySource")
    def vulnerability_source(
        self,
    ) -> "Inspector2FilterFilterCriteriaVulnerabilitySourceList":
        return typing.cast("Inspector2FilterFilterCriteriaVulnerabilitySourceList", jsii.get(self, "vulnerabilitySource"))

    @builtins.property
    @jsii.member(jsii_name="vulnerablePackages")
    def vulnerable_packages(
        self,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesList":
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesList", jsii.get(self, "vulnerablePackages"))

    @builtins.property
    @jsii.member(jsii_name="awsAccountIdInput")
    def aws_account_id_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaAwsAccountId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaAwsAccountId]]], jsii.get(self, "awsAccountIdInput"))

    @builtins.property
    @jsii.member(jsii_name="codeRepositoryProjectNameInput")
    def code_repository_project_name_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProjectName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProjectName]]], jsii.get(self, "codeRepositoryProjectNameInput"))

    @builtins.property
    @jsii.member(jsii_name="codeRepositoryProviderTypeInput")
    def code_repository_provider_type_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProviderType]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProviderType]]], jsii.get(self, "codeRepositoryProviderTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="codeVulnerabilityDetectorNameInput")
    def code_vulnerability_detector_name_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]]], jsii.get(self, "codeVulnerabilityDetectorNameInput"))

    @builtins.property
    @jsii.member(jsii_name="codeVulnerabilityDetectorTagsInput")
    def code_vulnerability_detector_tags_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]]], jsii.get(self, "codeVulnerabilityDetectorTagsInput"))

    @builtins.property
    @jsii.member(jsii_name="codeVulnerabilityFilePathInput")
    def code_vulnerability_file_path_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]]], jsii.get(self, "codeVulnerabilityFilePathInput"))

    @builtins.property
    @jsii.member(jsii_name="componentIdInput")
    def component_id_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentId]]], jsii.get(self, "componentIdInput"))

    @builtins.property
    @jsii.member(jsii_name="componentTypeInput")
    def component_type_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentType]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentType]]], jsii.get(self, "componentTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="ec2InstanceImageIdInput")
    def ec2_instance_image_id_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceImageId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceImageId]]], jsii.get(self, "ec2InstanceImageIdInput"))

    @builtins.property
    @jsii.member(jsii_name="ec2InstanceSubnetIdInput")
    def ec2_instance_subnet_id_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceSubnetId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceSubnetId]]], jsii.get(self, "ec2InstanceSubnetIdInput"))

    @builtins.property
    @jsii.member(jsii_name="ec2InstanceVpcIdInput")
    def ec2_instance_vpc_id_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceVpcId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceVpcId]]], jsii.get(self, "ec2InstanceVpcIdInput"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageArchitectureInput")
    def ecr_image_architecture_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageArchitecture]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageArchitecture]]], jsii.get(self, "ecrImageArchitectureInput"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageHashInput")
    def ecr_image_hash_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageHash]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageHash]]], jsii.get(self, "ecrImageHashInput"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageInUseCountInput")
    def ecr_image_in_use_count_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageInUseCount]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageInUseCount]]], jsii.get(self, "ecrImageInUseCountInput"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageLastInUseAtInput")
    def ecr_image_last_in_use_at_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageLastInUseAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageLastInUseAt]]], jsii.get(self, "ecrImageLastInUseAtInput"))

    @builtins.property
    @jsii.member(jsii_name="ecrImagePushedAtInput")
    def ecr_image_pushed_at_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImagePushedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImagePushedAt]]], jsii.get(self, "ecrImagePushedAtInput"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageRegistryInput")
    def ecr_image_registry_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRegistry]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRegistry]]], jsii.get(self, "ecrImageRegistryInput"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageRepositoryNameInput")
    def ecr_image_repository_name_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRepositoryName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRepositoryName]]], jsii.get(self, "ecrImageRepositoryNameInput"))

    @builtins.property
    @jsii.member(jsii_name="ecrImageTagsInput")
    def ecr_image_tags_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageTags]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageTags]]], jsii.get(self, "ecrImageTagsInput"))

    @builtins.property
    @jsii.member(jsii_name="epssScoreInput")
    def epss_score_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEpssScore]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEpssScore]]], jsii.get(self, "epssScoreInput"))

    @builtins.property
    @jsii.member(jsii_name="exploitAvailableInput")
    def exploit_available_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaExploitAvailable]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaExploitAvailable]]], jsii.get(self, "exploitAvailableInput"))

    @builtins.property
    @jsii.member(jsii_name="findingArnInput")
    def finding_arn_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingArn]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingArn]]], jsii.get(self, "findingArnInput"))

    @builtins.property
    @jsii.member(jsii_name="findingStatusInput")
    def finding_status_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingStatus]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingStatus]]], jsii.get(self, "findingStatusInput"))

    @builtins.property
    @jsii.member(jsii_name="findingTypeInput")
    def finding_type_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingType]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingType]]], jsii.get(self, "findingTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="firstObservedAtInput")
    def first_observed_at_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFirstObservedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFirstObservedAt]]], jsii.get(self, "firstObservedAtInput"))

    @builtins.property
    @jsii.member(jsii_name="fixAvailableInput")
    def fix_available_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFixAvailable]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFixAvailable]]], jsii.get(self, "fixAvailableInput"))

    @builtins.property
    @jsii.member(jsii_name="inspectorScoreInput")
    def inspector_score_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaInspectorScore]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaInspectorScore]]], jsii.get(self, "inspectorScoreInput"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionExecutionRoleArnInput")
    def lambda_function_execution_role_arn_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]]], jsii.get(self, "lambdaFunctionExecutionRoleArnInput"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionLastModifiedAtInput")
    def lambda_function_last_modified_at_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]]], jsii.get(self, "lambdaFunctionLastModifiedAtInput"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionLayersInput")
    def lambda_function_layers_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLayers]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLayers]]], jsii.get(self, "lambdaFunctionLayersInput"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionNameInput")
    def lambda_function_name_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionName]]], jsii.get(self, "lambdaFunctionNameInput"))

    @builtins.property
    @jsii.member(jsii_name="lambdaFunctionRuntimeInput")
    def lambda_function_runtime_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionRuntime]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionRuntime]]], jsii.get(self, "lambdaFunctionRuntimeInput"))

    @builtins.property
    @jsii.member(jsii_name="lastObservedAtInput")
    def last_observed_at_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLastObservedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLastObservedAt]]], jsii.get(self, "lastObservedAtInput"))

    @builtins.property
    @jsii.member(jsii_name="networkProtocolInput")
    def network_protocol_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaNetworkProtocol]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaNetworkProtocol]]], jsii.get(self, "networkProtocolInput"))

    @builtins.property
    @jsii.member(jsii_name="portRangeInput")
    def port_range_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaPortRange"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaPortRange"]]], jsii.get(self, "portRangeInput"))

    @builtins.property
    @jsii.member(jsii_name="relatedVulnerabilitiesInput")
    def related_vulnerabilities_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaRelatedVulnerabilities"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaRelatedVulnerabilities"]]], jsii.get(self, "relatedVulnerabilitiesInput"))

    @builtins.property
    @jsii.member(jsii_name="resourceIdInput")
    def resource_id_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceId"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceId"]]], jsii.get(self, "resourceIdInput"))

    @builtins.property
    @jsii.member(jsii_name="resourceTagsInput")
    def resource_tags_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceTags"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceTags"]]], jsii.get(self, "resourceTagsInput"))

    @builtins.property
    @jsii.member(jsii_name="resourceTypeInput")
    def resource_type_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceType"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaResourceType"]]], jsii.get(self, "resourceTypeInput"))

    @builtins.property
    @jsii.member(jsii_name="severityInput")
    def severity_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaSeverity"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaSeverity"]]], jsii.get(self, "severityInput"))

    @builtins.property
    @jsii.member(jsii_name="titleInput")
    def title_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaTitle"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaTitle"]]], jsii.get(self, "titleInput"))

    @builtins.property
    @jsii.member(jsii_name="updatedAtInput")
    def updated_at_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaUpdatedAt"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaUpdatedAt"]]], jsii.get(self, "updatedAtInput"))

    @builtins.property
    @jsii.member(jsii_name="vendorSeverityInput")
    def vendor_severity_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVendorSeverity"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVendorSeverity"]]], jsii.get(self, "vendorSeverityInput"))

    @builtins.property
    @jsii.member(jsii_name="vulnerabilityIdInput")
    def vulnerability_id_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerabilityId"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerabilityId"]]], jsii.get(self, "vulnerabilityIdInput"))

    @builtins.property
    @jsii.member(jsii_name="vulnerabilitySourceInput")
    def vulnerability_source_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerabilitySource"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerabilitySource"]]], jsii.get(self, "vulnerabilitySourceInput"))

    @builtins.property
    @jsii.member(jsii_name="vulnerablePackagesInput")
    def vulnerable_packages_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackages"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackages"]]], jsii.get(self, "vulnerablePackagesInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteria]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteria]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteria]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8b547f274a2000a468885edbc7a70a3d762b45fb069c4e6794512c6ec88f0fb3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaPortRange",
    jsii_struct_bases=[],
    name_mapping={
        "begin_inclusive": "beginInclusive",
        "end_inclusive": "endInclusive",
    },
)
class Inspector2FilterFilterCriteriaPortRange:
    def __init__(
        self,
        *,
        begin_inclusive: jsii.Number,
        end_inclusive: jsii.Number,
    ) -> None:
        '''
        :param begin_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#begin_inclusive Inspector2Filter#begin_inclusive}.
        :param end_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b2ea0da29f62f9a272c5ab7c6feebd98e7eb6c57357c3d6417b9d834a26fb975)
            check_type(argname="argument begin_inclusive", value=begin_inclusive, expected_type=type_hints["begin_inclusive"])
            check_type(argname="argument end_inclusive", value=end_inclusive, expected_type=type_hints["end_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "begin_inclusive": begin_inclusive,
            "end_inclusive": end_inclusive,
        }

    @builtins.property
    def begin_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#begin_inclusive Inspector2Filter#begin_inclusive}.'''
        result = self._values.get("begin_inclusive")
        assert result is not None, "Required property 'begin_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def end_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.'''
        result = self._values.get("end_inclusive")
        assert result is not None, "Required property 'end_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaPortRange(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaPortRangeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaPortRangeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c5c4373056e3d369fef30e61592decbf9032559e6ac23c5a47c18656a36a3fe)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaPortRangeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69d695e2f7917d2b74d5b341842b37965aff47d0be1acc76c592f765af41f3d3)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaPortRangeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e7612aec184a4ab94a81f7967e1d533ec02f1fcbe59c77c74061c8dc6d1e509d)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a359bbc5efe95bb7a8c14f5d3e654b4fc92dbb0b15d8f5149a8f1040f1aa222)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4c349c7603053a533ce846d68de5065b8214532054b9b76026a1c6e3589ae958)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaPortRange]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaPortRange]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaPortRange]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__67fe9177f7a63c1d0b1db82f851de311e0747c6ccdf11608d4b58798fdf7e56f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaPortRangeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaPortRangeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fff194c29247ce85dffddc2469acca95b4d5d7bacd1eb65ea8fcc15e5e39c56b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="beginInclusiveInput")
    def begin_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "beginInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="endInclusiveInput")
    def end_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "endInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="beginInclusive")
    def begin_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "beginInclusive"))

    @begin_inclusive.setter
    def begin_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4ec80069c72630fdabd188c4ea4f3c8cc009d4032a23b7748b6bb0e04f4e992)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "beginInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="endInclusive")
    def end_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "endInclusive"))

    @end_inclusive.setter
    def end_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c19b68a55ece84810ad6adfbb5449a7ed96bb83e2dab8e3f1f8e0760298847b5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "endInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaPortRange]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaPortRange]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaPortRange]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d6613a8478c5ce4284388ee5f7885363d411ebedde8bdd1241963713e93a897)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaRelatedVulnerabilities",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaRelatedVulnerabilities:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32674a053b7b3e1c95ce9bb686b5ba9790d24e83d748c859563da8c251cf941a)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaRelatedVulnerabilities(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaRelatedVulnerabilitiesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaRelatedVulnerabilitiesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b06c5102e29b734a26ca8d644f681118e49c94947c60de2766f6248582d11d17)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaRelatedVulnerabilitiesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7bd3b6d78c51bc364c5ec179b24cc8b30e4683c179c530bddeca520c58a58dbe)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaRelatedVulnerabilitiesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f8bc2181f1494c244aef644b1e21391603bb36371c5f3147bcde01cc01ebd1c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__932ed394402f396a5a29d1091a817340cf5fc985c47d2ece1bd802caffa62f08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fed6e93c53a4e69c767992a2910bcc3eef1bc6d42235a5268c97382e0263d8b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaRelatedVulnerabilities]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaRelatedVulnerabilities]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaRelatedVulnerabilities]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__993bf1545e9300b79a24630a3c5a32b922c60e0b814da95edf8f391b08383a0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaRelatedVulnerabilitiesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaRelatedVulnerabilitiesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a4fcfac5993977148c9c836f123163f62024fd2be74f6c95b4e211357020506)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44d16997198b10cd6963ec5f0e5dfd732628188b51dca52b1439c040890d8be7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17f87bac26ef12663c3122ddaef03209b20baa033ca2b38eb6d81f03fe45bd6f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaRelatedVulnerabilities]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaRelatedVulnerabilities]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaRelatedVulnerabilities]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49d27bc29ae350ca8e8b402237ab871686e2ef621bf64484039b2b79d70a4d13)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceId",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaResourceId:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f212663fbde53528980e7fd9bf575bd2bbd5230174d7183d71deae1376d2dd52)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaResourceId(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaResourceIdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceIdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4fe7e06b55cf2e37a5c721b689df0712e312d112fe883b2f2bd6a6e8f87a5d6c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaResourceIdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4df3457b1e3e41eee902d61ba50eb889365e674ae17d931c9cba4fce8a442ed9)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaResourceIdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc099dae502aaf21f25ce6e8053c292d0bae04520475387bba8e12afa1c09e5e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1afb225052d57f3b0fb06a3bba1cc44e32411daecdbfa6ffa136c3ddd7a3d779)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb99d9d1e1d64dba53d27114786b615901b6ef108b566dcec715b8db15ea6f86)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceId]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceId]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81156665c176594a459d99d14210e6deaef0db300685d17597cd6beaed34614e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaResourceIdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceIdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__81e1320caf7e7bac8dc73d3cb2cf42a91aa02324456c8a1e7acb28b34593094e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__66bc058468b8c19bf70053bb4eeec372a2cc7a48859b193eb61aebce58009aa6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ae2973b1826f81e7ed57bf453dbcc30c687b8b226fa3351235aea6445539617)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceId]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceId]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceId]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f0d9f4d7ebf31dbf97ff76e2b0ea63147766f566bda61d4baf52d8130a29c0b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceTags",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "key": "key", "value": "value"},
)
class Inspector2FilterFilterCriteriaResourceTags:
    def __init__(
        self,
        *,
        comparison: builtins.str,
        key: builtins.str,
        value: builtins.str,
    ) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param key: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#key Inspector2Filter#key}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c9ea363897a0eea94e195a712c665cc6d3b135762754f66ec3f46fe2d4a9eddf)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument key", value=key, expected_type=type_hints["key"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "key": key,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def key(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#key Inspector2Filter#key}.'''
        result = self._values.get("key")
        assert result is not None, "Required property 'key' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaResourceTags(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaResourceTagsList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceTagsList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c962ee8d4f104a132237c5397da7139e843b2203391f87fcdd8b0ab0c15ec76a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaResourceTagsOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__61811b8824fa4a3473dc13860f5e8782992a65c5e89cff8c4359c2ec1be1afba)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaResourceTagsOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4e0e745da8111bc63cdf23753062061268dd3cb3301869c3c303bc50171e3c8c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__823a4879490f2794b7226ab28b7c9221c49cbfe9e16208b81b8a27be3df9ca28)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__629bcad72bf4b69c202e71f98816fc29778aa18129059d4e32bd5b219720b9e0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceTags]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceTags]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceTags]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b7f207c7d9af3596b82055fcdb529263677bd029efe83d471a93c829794a2f0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaResourceTagsOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceTagsOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__448dadbf6839c704a918a9a2e638257b2ba7d1febca098a27390ff4e3ef88574)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="keyInput")
    def key_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "keyInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8ba83aef35fe12ee7c9463360080b83f8cd198abab05044834ddabd75e5e222c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="key")
    def key(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "key"))

    @key.setter
    def key(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b6bc7b7b277329a6b562efc34dc120cf3bb189b77b99de9b6d37c1d9fa7107f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "key", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8cfcadcd10949c1bc10f40b5b5145bdc234a7c7d98098aa36fc2fc2fe75de73c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceTags]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceTags]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceTags]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2f95099255c3d5985e2b5e971d06b8eaa19a160c4d91f146a51cabd5923cda52)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceType",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaResourceType:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b6065fe82dbc58c76435574139be75bcc78ef57fadee8f816aea6e1c326772f4)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaResourceType(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaResourceTypeList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceTypeList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eaac3847a0e6c9169daae9584352c6376bc74a10153eb48a99d4ae323a7ddf6e)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaResourceTypeOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f62f14067131ed08a43f6fddd091e2b28e1e875e4c8f19facb9a9b7449fbe13)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaResourceTypeOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb8fe795078e33f8378164fb7ccbe900353fbfd56ed6fa2c96fe0ff8c325a137)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c6b6f1986f04f749b55e5a10a6a586321b40a9ced19c330b6465e15161e2828c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad72e5be47f80e3164a51be002e65c50792fdfc7705d14e6802ce9a51cd303eb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceType]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceType]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceType]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b8c0e3b50a94697d883d15b1c7f3613cfd9ddf5d9cb326187683aaebffa3583c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaResourceTypeOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaResourceTypeOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9d8ce9aa40d73976f09d01155887c94140565405f2d434db61a932030150160c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__84c88f308d91dde0b8789768983f86e9b527a0d6bb2d042ae3e953e7bfebe1f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__44c7ab20217d1dab06646e619765ca7df4ca5ee2b4944afa4fd9d9811ec4e8bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceType]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceType]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceType]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9e7e1b2ff79afda12f61b26742115758c570d43947cf79bd60781e5e33ff100)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaSeverity",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaSeverity:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__069a2b904d84fd25f09a78c273bb7f20c0711e13d84bab9644623a95ed7868dd)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaSeverity(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaSeverityList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaSeverityList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3541fc8194bf0f84234556bf58e201deffa9c3860500741f2fa22ebf3e4515af)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaSeverityOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b254caec562dc35fcc4a0e0cf22afab6c04309c2ad8a153376bbebfe0e15dfe)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaSeverityOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4a8383f2b05c4ad1abc03a23e6312bc2990b76300ceb4b1ed72ee749a8a4914c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9f0de1e4eda417a8d8672790b414275500551fe19e19531b144827959dc2c2ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__37885b54cc27416c0f2aef35614147858b5cd32be52d94fe878c50870e00b9ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaSeverity]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaSeverity]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaSeverity]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__69b54ed754be93395a77a00ad60198bbae6f3870bc883f998a197f7ec56fd417)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaSeverityOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaSeverityOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__366e99a46c55813f9f600e3e52af1655f69f8ecd29f9fde7a7f94f1366daad1c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__243d1ae548c5269a080ff7c7697af0db03f7779d5ed8e60352bdbc6e58272cca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__316924d62d8f4e4d2bdf56c353f650d874beaf9206500ea4f509c18a79febf4e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaSeverity]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaSeverity]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaSeverity]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e270a408f6f793e4100150a6c3231c6329cbdaeeca966af908b0a8a4b8d287aa)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaTitle",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaTitle:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8a41587e2b6ec8044f6e9d51c2f05a2791b5116228cf21b215ce7b971934b097)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaTitle(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaTitleList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaTitleList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__bb38e089d0c8420a61056a25689c77f51bb4e075dfc81f5fb3ef1ab3a7dcaed1)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaTitleOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f52668e5d465934369af07c4f67d19a5ef1daa7c5680ed4d3704aebac6032c4)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaTitleOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cb4eea16f22324c5efc57d8c691274867ac83d55cf34418d3026021f3d0cc5bb)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__719ce7029fdbc425bad97993eb9c8f1edb28d27ce4b300e8571dd99d7f52d4a5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b606f933ae573028f37bcbb6dda1b56b763b7b24d2e40ea7cee8738bc99cefde)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaTitle]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaTitle]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaTitle]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__fc67264b73ce97281843859bbec059889184b5c361c47711c0ff37d715b9d1cd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaTitleOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaTitleOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__47e05d19bb4e3151939292e9d5c91b9958fe8ad091ed1bd7ffadd82b70761852)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1218055f56a522815fa39bc1ab807dabd4f019ac03585cb6495c9e21bf3d19f8)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__842b195a70431d27abdb7ba55a9b730a13652b1cc0b13de98e571ef31adfa503)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaTitle]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaTitle]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaTitle]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__542352096a8b889fa714404b1eed32654d31157db31b11ffb0f10b2a3ce88568)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaUpdatedAt",
    jsii_struct_bases=[],
    name_mapping={
        "end_inclusive": "endInclusive",
        "start_inclusive": "startInclusive",
    },
)
class Inspector2FilterFilterCriteriaUpdatedAt:
    def __init__(
        self,
        *,
        end_inclusive: typing.Optional[builtins.str] = None,
        start_inclusive: typing.Optional[builtins.str] = None,
    ) -> None:
        '''
        :param end_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.
        :param start_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eba7b01bc76f9bb3cebb24c42c2f4b2ea1241906bc7ddb1f612c1053e6e0006d)
            check_type(argname="argument end_inclusive", value=end_inclusive, expected_type=type_hints["end_inclusive"])
            check_type(argname="argument start_inclusive", value=start_inclusive, expected_type=type_hints["start_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if end_inclusive is not None:
            self._values["end_inclusive"] = end_inclusive
        if start_inclusive is not None:
            self._values["start_inclusive"] = start_inclusive

    @builtins.property
    def end_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#end_inclusive Inspector2Filter#end_inclusive}.'''
        result = self._values.get("end_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    @builtins.property
    def start_inclusive(self) -> typing.Optional[builtins.str]:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#start_inclusive Inspector2Filter#start_inclusive}.'''
        result = self._values.get("start_inclusive")
        return typing.cast(typing.Optional[builtins.str], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaUpdatedAt(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaUpdatedAtList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaUpdatedAtList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21ef353b82934af348b457c5ab7b3bdafb5a863e4f354ebb7c23c9069f9a3c1c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaUpdatedAtOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5643f3e803b3b31cf46b5f8c264448d97d103a03f1bd0bb355d748600c27d5ae)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaUpdatedAtOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__513a762641b169ccd2218462d2dd0aad18cd5a51b3c34348e4243d00de6fd993)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f488810ebfc0efe55adf49f0e312cdf4173378973808209535ac6d7c207eb792)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49a0e659db436d823a5044401b35228bc6701febbd0f3ab16769bed99f93ab11)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaUpdatedAt]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaUpdatedAt]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaUpdatedAt]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5116fdf387516d277fa63f20a5c7cb4674c46429ee00fb0f6a2f65be6e286327)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaUpdatedAtOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaUpdatedAtOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72fa2e60b7b4579bc01f45e9313865140e3c9ea43070a110316951050b31f326)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="resetEndInclusive")
    def reset_end_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEndInclusive", []))

    @jsii.member(jsii_name="resetStartInclusive")
    def reset_start_inclusive(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetStartInclusive", []))

    @builtins.property
    @jsii.member(jsii_name="endInclusiveInput")
    def end_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "endInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="startInclusiveInput")
    def start_inclusive_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "startInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="endInclusive")
    def end_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "endInclusive"))

    @end_inclusive.setter
    def end_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__24b2f77d6323014de93d410c7bc4b5c3261dc64d6877057b87975917ebf93a7f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "endInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="startInclusive")
    def start_inclusive(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "startInclusive"))

    @start_inclusive.setter
    def start_inclusive(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__17d740b6a9a52393ca0c0baed606f3ba1b1e471e4fccaa5197267aa588bae4a3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "startInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaUpdatedAt]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaUpdatedAt]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaUpdatedAt]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff1dc6f27cefe66fdb2ffd3d0a75644b753f80db008d27490709ab69a74edf2f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVendorSeverity",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVendorSeverity:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__07f399548e07aeb9999f888cad53a3d44e5bdaac61da4d6af07737244344acfd)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVendorSeverity(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVendorSeverityList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVendorSeverityList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__af320e5f66d6f84a4929091eddb2a318aa00077ca5f6c6542c9ba9d8c220ff29)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVendorSeverityOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f98a79034d108067b17e6b477f2817d149b351e8935933ead9222993ced143e8)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVendorSeverityOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d791559a2512a3681c74f793965d8415c308044c501cfc0da7d9cad902801fc)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8fe0198848cfc43affaa26ec0a9f5d4c96f555ac2eaf8ea1fd657dd12b0f5b0a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f13e5f3dfc6d67d91d870ecb918fe2f16b27e9de75fe5778b500359912208bca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVendorSeverity]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVendorSeverity]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVendorSeverity]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21e608c078c77f4f0150fa5bbcc4eacc139fa8d18719ef20e8405d29dfd46c38)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVendorSeverityOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVendorSeverityOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ee61458f85912efbb9902032fcd91a1474ef3aad7382d6c8ef63bccb8ef248f2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1fb38b3e946ee7b600c02deb220778fa2f6e46ec0afe22d157790133adab6131)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__367349929f021a8f163e5bac21791deefa6b70b7fddebe97effd5f74daff7856)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVendorSeverity]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVendorSeverity]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVendorSeverity]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d788f8f0fd9b0e97a713d3079da76e02faad4248e776b40e378e73d1c3dcc3df)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerabilityId",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerabilityId:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a785c066f2dba5d2389e7256be144168cdb97d1598da2716afcf3e5cc3dbd83)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerabilityId(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerabilityIdList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerabilityIdList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1a1bc8e93c4c838753e860a901c00d13c019f2ba87f13a133132d3af0d290b4a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerabilityIdOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__75092b3da09ac502d90c1d1a0812a37fe20dacdfa4de0c2916b2a28395953b7c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerabilityIdOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d553383e0b722d18d53cd2b97ae520abca455d2a99147e0f0354ee559d8420d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e630f0375b5b101cd6d131d479c8fef2a1ba6504797e223b3212e61ea444c363)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__00fb390cbe7592d77b8a51179c00ebb3cc01a3c734eea9f04a22a289658206e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerabilityId]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerabilityId]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerabilityId]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cc5ca92f0e8afcc7c6c53b50625c99d872149f453123df69e964c631e990d917)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerabilityIdOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerabilityIdOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a266e8eb54796c1eef60d6a1b43edc17a40bc7b75de35de5debc4786afc19039)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__76a32061ebafb162fbe089583434fbbd7bcdc82add09fcdb7ec09cbce30384ca)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__05cdc2bf57852d590454cba7943df6616e0661df30806e176dcd6f26ce55fdd0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerabilityId]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerabilityId]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerabilityId]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff225169a08d5c61fe27db4f1378675400e99d00063db5d0358f08d88dfeef01)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerabilitySource",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerabilitySource:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f4f13f2bae6fca62cb01fab2205c30fcc7a74dc5baffff6fa91e000b8378438d)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerabilitySource(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerabilitySourceList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerabilitySourceList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2d1c3bf0d7fd0e42b27c7eb1e9bec5b45ab62c0c89200e518cea9461b438d162)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerabilitySourceOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4d6d1f1ceb60e1fa5c1f71ea0bccd728210eb40c15181ef70416909603970aa0)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerabilitySourceOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__790195794dbddc9ed9bc164292344786ad8658886624b03f93476cc93b7ef2c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__928c80c95830be1e0c9af61a4fbdd27769723fb2acfe680b398ec6337e123bb5)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__593b034df9f01feccb7c01668d7df14397355774157c8620c0a4bcad2eb49e4f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerabilitySource]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerabilitySource]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerabilitySource]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__152b81547acd76093bf238ad255da4cd72ab189a5fd4cbc33a22f68375a1150a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerabilitySourceOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerabilitySourceOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__304b26c8cd872e8645330dac6f83fa7bf96c336e8f5c9d68a109c217e389add8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e3c67dfe587c7758a724a69b3cc43c7547225b8159aa9814920b9cbb101aefd2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ecd5db1547d6f85205b2d7523ac94df9b12b5cd1ff5c7fd30d7cafba68447f53)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerabilitySource]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerabilitySource]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerabilitySource]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6d33c284c56db0079a74dddbe6b0671d73fee2dc587f874f32fd685a43c11d80)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackages",
    jsii_struct_bases=[],
    name_mapping={
        "architecture": "architecture",
        "epoch": "epoch",
        "file_path": "filePath",
        "name": "name",
        "release": "release",
        "source_lambda_layer_arn": "sourceLambdaLayerArn",
        "source_layer_hash": "sourceLayerHash",
        "version": "version",
    },
)
class Inspector2FilterFilterCriteriaVulnerablePackages:
    def __init__(
        self,
        *,
        architecture: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture", typing.Dict[builtins.str, typing.Any]]]]] = None,
        epoch: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesEpoch", typing.Dict[builtins.str, typing.Any]]]]] = None,
        file_path: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesFilePath", typing.Dict[builtins.str, typing.Any]]]]] = None,
        name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesName", typing.Dict[builtins.str, typing.Any]]]]] = None,
        release: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesRelease", typing.Dict[builtins.str, typing.Any]]]]] = None,
        source_lambda_layer_arn: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn", typing.Dict[builtins.str, typing.Any]]]]] = None,
        source_layer_hash: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash", typing.Dict[builtins.str, typing.Any]]]]] = None,
        version: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesVersion", typing.Dict[builtins.str, typing.Any]]]]] = None,
    ) -> None:
        '''
        :param architecture: architecture block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#architecture Inspector2Filter#architecture}
        :param epoch: epoch block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#epoch Inspector2Filter#epoch}
        :param file_path: file_path block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#file_path Inspector2Filter#file_path}
        :param name: name block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#name Inspector2Filter#name}
        :param release: release block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#release Inspector2Filter#release}
        :param source_lambda_layer_arn: source_lambda_layer_arn block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#source_lambda_layer_arn Inspector2Filter#source_lambda_layer_arn}
        :param source_layer_hash: source_layer_hash block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#source_layer_hash Inspector2Filter#source_layer_hash}
        :param version: version block. Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#version Inspector2Filter#version}
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__58d7a7ab0c55e18864fea08272bf8f5a28a403b2060f7ec7c6f7a5d23aed35b9)
            check_type(argname="argument architecture", value=architecture, expected_type=type_hints["architecture"])
            check_type(argname="argument epoch", value=epoch, expected_type=type_hints["epoch"])
            check_type(argname="argument file_path", value=file_path, expected_type=type_hints["file_path"])
            check_type(argname="argument name", value=name, expected_type=type_hints["name"])
            check_type(argname="argument release", value=release, expected_type=type_hints["release"])
            check_type(argname="argument source_lambda_layer_arn", value=source_lambda_layer_arn, expected_type=type_hints["source_lambda_layer_arn"])
            check_type(argname="argument source_layer_hash", value=source_layer_hash, expected_type=type_hints["source_layer_hash"])
            check_type(argname="argument version", value=version, expected_type=type_hints["version"])
        self._values: typing.Dict[builtins.str, typing.Any] = {}
        if architecture is not None:
            self._values["architecture"] = architecture
        if epoch is not None:
            self._values["epoch"] = epoch
        if file_path is not None:
            self._values["file_path"] = file_path
        if name is not None:
            self._values["name"] = name
        if release is not None:
            self._values["release"] = release
        if source_lambda_layer_arn is not None:
            self._values["source_lambda_layer_arn"] = source_lambda_layer_arn
        if source_layer_hash is not None:
            self._values["source_layer_hash"] = source_layer_hash
        if version is not None:
            self._values["version"] = version

    @builtins.property
    def architecture(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture"]]]:
        '''architecture block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#architecture Inspector2Filter#architecture}
        '''
        result = self._values.get("architecture")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture"]]], result)

    @builtins.property
    def epoch(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesEpoch"]]]:
        '''epoch block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#epoch Inspector2Filter#epoch}
        '''
        result = self._values.get("epoch")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesEpoch"]]], result)

    @builtins.property
    def file_path(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesFilePath"]]]:
        '''file_path block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#file_path Inspector2Filter#file_path}
        '''
        result = self._values.get("file_path")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesFilePath"]]], result)

    @builtins.property
    def name(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesName"]]]:
        '''name block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#name Inspector2Filter#name}
        '''
        result = self._values.get("name")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesName"]]], result)

    @builtins.property
    def release(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesRelease"]]]:
        '''release block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#release Inspector2Filter#release}
        '''
        result = self._values.get("release")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesRelease"]]], result)

    @builtins.property
    def source_lambda_layer_arn(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn"]]]:
        '''source_lambda_layer_arn block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#source_lambda_layer_arn Inspector2Filter#source_lambda_layer_arn}
        '''
        result = self._values.get("source_lambda_layer_arn")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn"]]], result)

    @builtins.property
    def source_layer_hash(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash"]]]:
        '''source_layer_hash block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#source_layer_hash Inspector2Filter#source_layer_hash}
        '''
        result = self._values.get("source_layer_hash")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash"]]], result)

    @builtins.property
    def version(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesVersion"]]]:
        '''version block.

        Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#version Inspector2Filter#version}
        '''
        result = self._values.get("version")
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesVersion"]]], result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackages(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__585e458c895676725bfa6d9d11c0624da0864df91b02f5548e6fca058296efd5)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ff2ff61de2350b8d5bb958648648d7f07fd4ccd92613a544a72d79e5606ff2fa)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6f6771ca97f3ee085696d84b390b66d92ede78f23691fb6ff9381a0d6c1be60b)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7895c584eb92b7c427cb69a6d8617732dc87a1bc1ad08a928731014e3ce9c776)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__eec028883108fad331a093c0a8115059a9e4e7c8372bf2e67daba97fe0eb0266)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c2680f1d7b09350e4a22f4085e5f4d3f92b134e7e951abe7d76eff184828621f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__04708a862e14f840a889494c5f3c484636a068f013b98614611de24f94361cbf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9cccc500acfd7d3e4698a1e71e15f1bf082ca963b54247f43d81c5764011d162)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3a4752ffe52bd321df5a96810a135fe545e49bc59e78b2aca4a7ef63206cd7c1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e4a63bf8b137756babaddaba62184fcbc5173f21990a0a3d15020834b35565d7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85c0af70d4d558e6fa868ee53c0e8d21eebbe1164f0e29fe96cae1ede7516e2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesEpoch",
    jsii_struct_bases=[],
    name_mapping={
        "lower_inclusive": "lowerInclusive",
        "upper_inclusive": "upperInclusive",
    },
)
class Inspector2FilterFilterCriteriaVulnerablePackagesEpoch:
    def __init__(
        self,
        *,
        lower_inclusive: jsii.Number,
        upper_inclusive: jsii.Number,
    ) -> None:
        '''
        :param lower_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lower_inclusive Inspector2Filter#lower_inclusive}.
        :param upper_inclusive: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#upper_inclusive Inspector2Filter#upper_inclusive}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b91237babcd694171e0d3304fb406abf83ee0562bc1d58bb4f140484bd8d1036)
            check_type(argname="argument lower_inclusive", value=lower_inclusive, expected_type=type_hints["lower_inclusive"])
            check_type(argname="argument upper_inclusive", value=upper_inclusive, expected_type=type_hints["upper_inclusive"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "lower_inclusive": lower_inclusive,
            "upper_inclusive": upper_inclusive,
        }

    @builtins.property
    def lower_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#lower_inclusive Inspector2Filter#lower_inclusive}.'''
        result = self._values.get("lower_inclusive")
        assert result is not None, "Required property 'lower_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    @builtins.property
    def upper_inclusive(self) -> jsii.Number:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#upper_inclusive Inspector2Filter#upper_inclusive}.'''
        result = self._values.get("upper_inclusive")
        assert result is not None, "Required property 'upper_inclusive' is missing"
        return typing.cast(jsii.Number, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackagesEpoch(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerablePackagesEpochList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesEpochList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b12e8529b980255d1217cabb824c16b487bc011661cadd3d8dd9901dabdfa9d5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesEpochOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__21554218daadd5b18b6bf59d68980a71d142410c1129a2c745a703fb3510a9a5)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesEpochOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7c691a53473476fe8e251ca5fdb130e6b7d7d8b63d13f3d513970134935e2cff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4588ff43cd1dcd4253ceadee8393d7354156a98b66b1543e403e1e5688dc021c)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6dfaf49ea136b40e1590848ef76f7d28a117fd659518e2265b6ec463cfe3983f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3bf7e6358d016cb75d59da5b28359727cea2b76dd69cb66cc6747edc7c766017)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesEpochOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesEpochOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dd3ca133dd437bd57c2acb53e2472e84614b3162b5f40c782f4b7e6a27c56d2d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="lowerInclusiveInput")
    def lower_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "lowerInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="upperInclusiveInput")
    def upper_inclusive_input(self) -> typing.Optional[jsii.Number]:
        return typing.cast(typing.Optional[jsii.Number], jsii.get(self, "upperInclusiveInput"))

    @builtins.property
    @jsii.member(jsii_name="lowerInclusive")
    def lower_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "lowerInclusive"))

    @lower_inclusive.setter
    def lower_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c8e599815f4b80069cf0c43afb3472abf11ba97197deea211ec8307b64a785ee)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "lowerInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="upperInclusive")
    def upper_inclusive(self) -> jsii.Number:
        return typing.cast(jsii.Number, jsii.get(self, "upperInclusive"))

    @upper_inclusive.setter
    def upper_inclusive(self, value: jsii.Number) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__887799eb876a00434a3e312b7e16296445656c3b8369285f54a0ffb7551aa104)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "upperInclusive", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__39b456c66d17007bc5648190c9de8686c7022606f6cc33d99024afa5eef59eed)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesFilePath",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerablePackagesFilePath:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__412fa57d060ea55b5fc6810891eaad2ddd9d603cff93bb5d348b71c0caece9c3)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackagesFilePath(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerablePackagesFilePathList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesFilePathList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f1d1f1e79ce69022774939c1433d5131060e05280d44b25c0de86cf6954a04ec)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesFilePathOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b102701696d61b45861e0424bb25b436d6aac15a1288f270b23ba5698ea1ca1)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesFilePathOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__22a5e2a32bd45c918b2afa79a913bb6dc684da15ee73cb8a28b9de1a1a5661e2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e19b92771220b419ea61575d41e38809604b315945d9cc7c628310b5d82d0757)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__72684efba8a86643a535ca9baf467c6709596483808593a3c04fb921ed80d1b7)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__a256f7b1ddbee0ed595891d34d126b130cb5504d6a332cfe38a5dfac34ebe3da)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesFilePathOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesFilePathOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__06aa40f30f8099df7d44f55e5b4f0d51eb8e4879b782742f6d7e30b419e99c7d)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__49662dee9fa95c4848e569c272f34274ffb0974263bc5bf298abddb46a2c6a16)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f0b461cedc03aaf09cee68459f2d4d5674f662ff4bf12442467480adff1f2496)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5aaa99197d92987b444bb5d64348580fdcdc83c261d98937ebbd8622ab4528d6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4747ad4bc67bf1a4df8133b448028ba808cf1f2a17bf455946d1078341c13d22)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ffa81b6e11fd320b727f16f62bdce43152f77929314863a4ffc61b17ea24958f)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e2caba5a1ff452bbfb418f32fb8f56e4783ea5b0441ceeee805db8aeed36ec3f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f4c421287552e426a68b383d7e4c03830fd823ef2e9aa4e0d04a7df46146fbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c7ede31c60f7f7df86c465a38d8d06569ff295c60ec83495d873201455e1d7a4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackages]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackages]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackages]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__188ae8f34eeeb79bd92160b07172bb31fe3c52a2a9b42e4b08d83edac0737050)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesName",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerablePackagesName:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ab719a3dc65dc1f651e590d2202f3b6efa85cd8e09be298b15099bb402e97c48)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackagesName(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerablePackagesNameList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesNameList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8379ba07caae21d22cc072d2a6ed723f6730e3e85e91c06d44573a4a0f013dc5)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesNameOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6e3080c8441b96dce3a7c36ae06994c5e18d793de09061cc86325f5f29be67ad)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesNameOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__badb636bd455a05de41290df7e63f6b2a58b759f0e796fb802baa323e7d62ae0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32336898678caa3e6b8f91f8f004dc6e647b0352cadeb4cc6e704ce7d30bb7af)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0151e07c5d83114bd1bf5c47b4c7734bf85e13d4ab5c2898984ae14c22563fbd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesName]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesName]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f33953bdc7a2343c3582c0b45b3b2a37bc9cb125e451df00ae4ce82e22a65249)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesNameOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesNameOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b12ce4a3c24e24ca4c52cf5eebd634e7eb177e0d80f80b8ac43527e83a77a379)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f5c61fa099c46518a234e71ba8bd7fd53d18484d08e671ab0fd99f90577b197e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__32c04c02d170cd91f9a865c5aaa072cbcdcf64c09289a0eb5bab08314cdcef2e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesName]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesName]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesName]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__12782510d2666573556b062defea328eec2480389f4c62f534aaf10ca520b78a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59618f282ae5dfa431c37552ee9f3095245f6714f963ef97e316849d01405ae8)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @jsii.member(jsii_name="putArchitecture")
    def put_architecture(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ba618c789aae72b2c7b1c9214fece9e311dda417bc76ddd0fce175ee967ca9f1)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putArchitecture", [value]))

    @jsii.member(jsii_name="putEpoch")
    def put_epoch(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d6e15310c9390b30f5446f60162c9cae8e8d75d92704fe2e369b63d8dd9d2e08)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putEpoch", [value]))

    @jsii.member(jsii_name="putFilePath")
    def put_file_path(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__0b000fb0f42b994d97d36792597bf78e2fe51b644fb3f7750f19a38e796b9931)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putFilePath", [value]))

    @jsii.member(jsii_name="putName")
    def put_name(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesName, typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__85577c89308706e39b7f63b5271dd6d48bce32e940113d15a887a9d5401ad6fd)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putName", [value]))

    @jsii.member(jsii_name="putRelease")
    def put_release(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesRelease", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7e436e88df391f280e55031afcaa307e05d1010c578af81b6ab77ac8c36c21d2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putRelease", [value]))

    @jsii.member(jsii_name="putSourceLambdaLayerArn")
    def put_source_lambda_layer_arn(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__25672ec68c5a3121e9414ab0181c2f6dc773a58f74c5ac026db98fe405329e48)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSourceLambdaLayerArn", [value]))

    @jsii.member(jsii_name="putSourceLayerHash")
    def put_source_layer_hash(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d9c51c9d5a05273f5b2065636fb3418d393d2bf6ec1d3044a333fe35ce819ee2)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putSourceLayerHash", [value]))

    @jsii.member(jsii_name="putVersion")
    def put_version(
        self,
        value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union["Inspector2FilterFilterCriteriaVulnerablePackagesVersion", typing.Dict[builtins.str, typing.Any]]]],
    ) -> None:
        '''
        :param value: -
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__11539f43ed726c5f3c2c75ea8bab8d22a9330fdf96690ed181fa5c2c5dceccf0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        return typing.cast(None, jsii.invoke(self, "putVersion", [value]))

    @jsii.member(jsii_name="resetArchitecture")
    def reset_architecture(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetArchitecture", []))

    @jsii.member(jsii_name="resetEpoch")
    def reset_epoch(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetEpoch", []))

    @jsii.member(jsii_name="resetFilePath")
    def reset_file_path(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetFilePath", []))

    @jsii.member(jsii_name="resetName")
    def reset_name(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetName", []))

    @jsii.member(jsii_name="resetRelease")
    def reset_release(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetRelease", []))

    @jsii.member(jsii_name="resetSourceLambdaLayerArn")
    def reset_source_lambda_layer_arn(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSourceLambdaLayerArn", []))

    @jsii.member(jsii_name="resetSourceLayerHash")
    def reset_source_layer_hash(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetSourceLayerHash", []))

    @jsii.member(jsii_name="resetVersion")
    def reset_version(self) -> None:
        return typing.cast(None, jsii.invoke(self, "resetVersion", []))

    @builtins.property
    @jsii.member(jsii_name="architecture")
    def architecture(
        self,
    ) -> Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureList:
        return typing.cast(Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureList, jsii.get(self, "architecture"))

    @builtins.property
    @jsii.member(jsii_name="epoch")
    def epoch(self) -> Inspector2FilterFilterCriteriaVulnerablePackagesEpochList:
        return typing.cast(Inspector2FilterFilterCriteriaVulnerablePackagesEpochList, jsii.get(self, "epoch"))

    @builtins.property
    @jsii.member(jsii_name="filePath")
    def file_path(self) -> Inspector2FilterFilterCriteriaVulnerablePackagesFilePathList:
        return typing.cast(Inspector2FilterFilterCriteriaVulnerablePackagesFilePathList, jsii.get(self, "filePath"))

    @builtins.property
    @jsii.member(jsii_name="name")
    def name(self) -> Inspector2FilterFilterCriteriaVulnerablePackagesNameList:
        return typing.cast(Inspector2FilterFilterCriteriaVulnerablePackagesNameList, jsii.get(self, "name"))

    @builtins.property
    @jsii.member(jsii_name="release")
    def release(self) -> "Inspector2FilterFilterCriteriaVulnerablePackagesReleaseList":
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesReleaseList", jsii.get(self, "release"))

    @builtins.property
    @jsii.member(jsii_name="sourceLambdaLayerArn")
    def source_lambda_layer_arn(
        self,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnList":
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnList", jsii.get(self, "sourceLambdaLayerArn"))

    @builtins.property
    @jsii.member(jsii_name="sourceLayerHash")
    def source_layer_hash(
        self,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashList":
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashList", jsii.get(self, "sourceLayerHash"))

    @builtins.property
    @jsii.member(jsii_name="version")
    def version(self) -> "Inspector2FilterFilterCriteriaVulnerablePackagesVersionList":
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesVersionList", jsii.get(self, "version"))

    @builtins.property
    @jsii.member(jsii_name="architectureInput")
    def architecture_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]]], jsii.get(self, "architectureInput"))

    @builtins.property
    @jsii.member(jsii_name="epochInput")
    def epoch_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]]], jsii.get(self, "epochInput"))

    @builtins.property
    @jsii.member(jsii_name="filePathInput")
    def file_path_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]]], jsii.get(self, "filePathInput"))

    @builtins.property
    @jsii.member(jsii_name="nameInput")
    def name_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesName]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesName]]], jsii.get(self, "nameInput"))

    @builtins.property
    @jsii.member(jsii_name="releaseInput")
    def release_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesRelease"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesRelease"]]], jsii.get(self, "releaseInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceLambdaLayerArnInput")
    def source_lambda_layer_arn_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn"]]], jsii.get(self, "sourceLambdaLayerArnInput"))

    @builtins.property
    @jsii.member(jsii_name="sourceLayerHashInput")
    def source_layer_hash_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash"]]], jsii.get(self, "sourceLayerHashInput"))

    @builtins.property
    @jsii.member(jsii_name="versionInput")
    def version_input(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesVersion"]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List["Inspector2FilterFilterCriteriaVulnerablePackagesVersion"]]], jsii.get(self, "versionInput"))

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackages]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackages]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackages]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__736735ca241503f20d781040ea1b55fb0625ce8baec67e5c3b7e80f4974ebd65)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesRelease",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerablePackagesRelease:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c20a078d390ff5218ae49a6eb0d023f606f590565e0f90254f52edb6ddd765e7)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackagesRelease(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerablePackagesReleaseList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesReleaseList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__8257a280e574ddac1b2719bd9b1b92a20f68878000caa5e33ea7807a862976e7)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesReleaseOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__7ea839a728beb9e3df3d9b13fd4387ad225f4b9c4c5f80552553d9e8c6caa650)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesReleaseOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f0c1e609b60d9cbcd3be2f5a765f21c3e0ca52aa22274c73b0d8c2961e07efb6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f7c04e2173ea204c4d92b240d73ade747967a7511533a5c6bbb16c4a9465341b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__01c30e6cd375fc0ada027284f7f18bc180bbb3cf423790a944dd51093067b129)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesRelease]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesRelease]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesRelease]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5b2f51293e83df53811593440f9c70acccb7d5b6268fc8ec758906adfecbf1c9)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesReleaseOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesReleaseOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9b627090fd95e26c643cb9c19b3a60761e348045ef07caaa385cba0465786d46)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cf613c57fd251af0124e1dac27693783955089534672ba50e28c758a3bf4f07f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__397fe77a78634c66551e2d6bab326d63fd657ae929954fab46c6c28f3ad4729a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesRelease]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesRelease]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesRelease]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad45d13fd53dfad0a64d6ea69db50f4aaf824f99ea7846433743ef6f0fcdf7bf)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b947e50169caead10e23f4ba48e070f86afd94c388bade0c262e915a2c83261c)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__14ab42cc9bb805ef063dbbc9aa96f228d3db55e4c680dd91be710a134d25a67b)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3beea9af5aa143f8da7292d377d505a85870191986decdfe17624d4b5cf704b1)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__59988536bc30b8b3def44d02138fa06096d038ad903d2f6614fdb04bc98c44c4)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__220693b9a91ea38a70a5120f884aa8d8a8394fffe3dfd0bd287b49559c7514ec)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__018e853d10ed95dbe4e9c5ccba21f57fd69eb187f0f3273abeaf75d37e1e3955)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2002de6d32768dca92d0b2049d3e3a74ef288471171589f3e78e939b74146f2b)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2a6e59413110322f19a43e6bb88de2c2f27ce802611d5b3f46cd83a276183f7a)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__3c70be6fdf3cc1f56936fe41edc017e0fa2179c8cf62e320550453d24b7b55c6)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__2b9b19ca1f7654ed9576f262f5a5dda05d403e5128d3031b659b8f9e4b0d11ff)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__cd53dbbefcf3daa329d02050e25dd5653923e67f9251e0f237d2c1352c14781f)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__93b286d86a5bebfb6b5765ae7e6269e22c3560d2c2731ae6ca62536cefbe52e6)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__049d0ca7345e4c4a2bf218aba6ac1f34e39557d5fb969e472c3d8441a1f88bb2)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__483da1ed8943d9bca14904a1819524321ea39c0e9a9cb82b8bb560131a0547cd)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1b72df815409fd3651e4ffcfecfefcb7b388dfd390ed044d787ec3baab8303b0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__f21f6a355eb3fe8312d305b8822bcab64e4cebeff74e0bfb58d5eaf30a0d48d0)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b608ae7c7e8be4396c3bd39e8f266579468df42bb44bd68665d765f5a3430ff3)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__e62be033c0c040a1c50c1d32af3106c8c7b6dab8b947b4a4dd6e1dec73058b9e)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d093ebe1b714ec91f9802d1219a27f334e2b9ed29c0d612f04aff0a295228f30)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__6ff6386090727e5558efe47403e5079865f0b706e0d078960464509465eb8d72)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__dc2fd7bb0566b137dd27b262eb4490a29993a298bdb103c497a5b449ceea3e90)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__9ac6269fa4c2071c7955ef92442a7eb3647c90214d9b47fc17cf8290e8b51b11)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


@jsii.data_type(
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesVersion",
    jsii_struct_bases=[],
    name_mapping={"comparison": "comparison", "value": "value"},
)
class Inspector2FilterFilterCriteriaVulnerablePackagesVersion:
    def __init__(self, *, comparison: builtins.str, value: builtins.str) -> None:
        '''
        :param comparison: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.
        :param value: Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__b2be4f0cba5bed9692f3ac87df79d09391ec157f015bb4b6e378ebbafd766ac3)
            check_type(argname="argument comparison", value=comparison, expected_type=type_hints["comparison"])
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        self._values: typing.Dict[builtins.str, typing.Any] = {
            "comparison": comparison,
            "value": value,
        }

    @builtins.property
    def comparison(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#comparison Inspector2Filter#comparison}.'''
        result = self._values.get("comparison")
        assert result is not None, "Required property 'comparison' is missing"
        return typing.cast(builtins.str, result)

    @builtins.property
    def value(self) -> builtins.str:
        '''Docs at Terraform Registry: {@link https://registry.terraform.io/providers/hashicorp/aws/6.18.0/docs/resources/inspector2_filter#value Inspector2Filter#value}.'''
        result = self._values.get("value")
        assert result is not None, "Required property 'value' is missing"
        return typing.cast(builtins.str, result)

    def __eq__(self, rhs: typing.Any) -> builtins.bool:
        return isinstance(rhs, self.__class__) and rhs._values == self._values

    def __ne__(self, rhs: typing.Any) -> builtins.bool:
        return not (rhs == self)

    def __repr__(self) -> str:
        return "Inspector2FilterFilterCriteriaVulnerablePackagesVersion(%s)" % ", ".join(
            k + "=" + repr(v) for k, v in self._values.items()
        )


class Inspector2FilterFilterCriteriaVulnerablePackagesVersionList(
    _cdktf_9a9027ec.ComplexList,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesVersionList",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        wraps_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param wraps_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c65c344ed4676b980e2dd079cd5bed959928603680b0ec9e18677190bb77263c)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument wraps_set", value=wraps_set, expected_type=type_hints["wraps_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, wraps_set])

    @jsii.member(jsii_name="get")
    def get(
        self,
        index: jsii.Number,
    ) -> "Inspector2FilterFilterCriteriaVulnerablePackagesVersionOutputReference":
        '''
        :param index: the index of the item to return.
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__ad6cac05916308ca93699b4590a67de820e0159ae903535d1195f353cd6ce37c)
            check_type(argname="argument index", value=index, expected_type=type_hints["index"])
        return typing.cast("Inspector2FilterFilterCriteriaVulnerablePackagesVersionOutputReference", jsii.invoke(self, "get", [index]))

    @builtins.property
    @jsii.member(jsii_name="terraformAttribute")
    def _terraform_attribute(self) -> builtins.str:
        '''The attribute on the parent resource this class is referencing.'''
        return typing.cast(builtins.str, jsii.get(self, "terraformAttribute"))

    @_terraform_attribute.setter
    def _terraform_attribute(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__4fe57db095ad1575541fa043add9be7a994c95313f58dc046e1cabc48761403a)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformAttribute", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="terraformResource")
    def _terraform_resource(self) -> _cdktf_9a9027ec.IInterpolatingParent:
        '''The parent resource.'''
        return typing.cast(_cdktf_9a9027ec.IInterpolatingParent, jsii.get(self, "terraformResource"))

    @_terraform_resource.setter
    def _terraform_resource(self, value: _cdktf_9a9027ec.IInterpolatingParent) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__de6e186cc4edad2b299b490773321fce9ab90f6e1e8548d2e887869652a45920)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "terraformResource", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="wrapsSet")
    def _wraps_set(self) -> builtins.bool:
        '''whether the list is wrapping a set (will add tolist() to be able to access an item via an index).'''
        return typing.cast(builtins.bool, jsii.get(self, "wrapsSet"))

    @_wraps_set.setter
    def _wraps_set(self, value: builtins.bool) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1fcff6e68a20903d7d44e6be1beacbc4456ebbe9a44a7a27140070163b8597de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "wrapsSet", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesVersion]]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesVersion]]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesVersion]]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__240f022ae9d1428aaee18c711dd3b971010428b991312e33344567bcc3333807)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


class Inspector2FilterFilterCriteriaVulnerablePackagesVersionOutputReference(
    _cdktf_9a9027ec.ComplexObject,
    metaclass=jsii.JSIIMeta,
    jsii_type="@cdktf/provider-aws.inspector2Filter.Inspector2FilterFilterCriteriaVulnerablePackagesVersionOutputReference",
):
    def __init__(
        self,
        terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
        terraform_attribute: builtins.str,
        complex_object_index: jsii.Number,
        complex_object_is_from_set: builtins.bool,
    ) -> None:
        '''
        :param terraform_resource: The parent resource.
        :param terraform_attribute: The attribute on the parent resource this class is referencing.
        :param complex_object_index: the index of this item in the list.
        :param complex_object_is_from_set: whether the list is wrapping a set (will add tolist() to be able to access an item via an index).
        '''
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__d2ba4d18c3471bdc360f6b877b77f60848352a9e9c0533d3ed492b3889a9d5fe)
            check_type(argname="argument terraform_resource", value=terraform_resource, expected_type=type_hints["terraform_resource"])
            check_type(argname="argument terraform_attribute", value=terraform_attribute, expected_type=type_hints["terraform_attribute"])
            check_type(argname="argument complex_object_index", value=complex_object_index, expected_type=type_hints["complex_object_index"])
            check_type(argname="argument complex_object_is_from_set", value=complex_object_is_from_set, expected_type=type_hints["complex_object_is_from_set"])
        jsii.create(self.__class__, self, [terraform_resource, terraform_attribute, complex_object_index, complex_object_is_from_set])

    @builtins.property
    @jsii.member(jsii_name="comparisonInput")
    def comparison_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "comparisonInput"))

    @builtins.property
    @jsii.member(jsii_name="valueInput")
    def value_input(self) -> typing.Optional[builtins.str]:
        return typing.cast(typing.Optional[builtins.str], jsii.get(self, "valueInput"))

    @builtins.property
    @jsii.member(jsii_name="comparison")
    def comparison(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "comparison"))

    @comparison.setter
    def comparison(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__5f8c71595d4d51ff000e2bf1ecbd20212d033c005738452c25461d752151b008)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "comparison", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="value")
    def value(self) -> builtins.str:
        return typing.cast(builtins.str, jsii.get(self, "value"))

    @value.setter
    def value(self, value: builtins.str) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__c3fe7afefc1d178699c2274e7331c52ab56a37b62e8b699ae349fb6c26d68060)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "value", value) # pyright: ignore[reportArgumentType]

    @builtins.property
    @jsii.member(jsii_name="internalValue")
    def internal_value(
        self,
    ) -> typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesVersion]]:
        return typing.cast(typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesVersion]], jsii.get(self, "internalValue"))

    @internal_value.setter
    def internal_value(
        self,
        value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesVersion]],
    ) -> None:
        if __debug__:
            type_hints = typing.get_type_hints(_typecheckingstub__1d3a7c1802b52afad1d9417d9402ca00acdcaff6b27c46f62b7640dd4bb7d7de)
            check_type(argname="argument value", value=value, expected_type=type_hints["value"])
        jsii.set(self, "internalValue", value) # pyright: ignore[reportArgumentType]


__all__ = [
    "Inspector2Filter",
    "Inspector2FilterConfig",
    "Inspector2FilterFilterCriteria",
    "Inspector2FilterFilterCriteriaAwsAccountId",
    "Inspector2FilterFilterCriteriaAwsAccountIdList",
    "Inspector2FilterFilterCriteriaAwsAccountIdOutputReference",
    "Inspector2FilterFilterCriteriaCodeRepositoryProjectName",
    "Inspector2FilterFilterCriteriaCodeRepositoryProjectNameList",
    "Inspector2FilterFilterCriteriaCodeRepositoryProjectNameOutputReference",
    "Inspector2FilterFilterCriteriaCodeRepositoryProviderType",
    "Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeList",
    "Inspector2FilterFilterCriteriaCodeRepositoryProviderTypeOutputReference",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameList",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorNameOutputReference",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsList",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTagsOutputReference",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathList",
    "Inspector2FilterFilterCriteriaCodeVulnerabilityFilePathOutputReference",
    "Inspector2FilterFilterCriteriaComponentId",
    "Inspector2FilterFilterCriteriaComponentIdList",
    "Inspector2FilterFilterCriteriaComponentIdOutputReference",
    "Inspector2FilterFilterCriteriaComponentType",
    "Inspector2FilterFilterCriteriaComponentTypeList",
    "Inspector2FilterFilterCriteriaComponentTypeOutputReference",
    "Inspector2FilterFilterCriteriaEc2InstanceImageId",
    "Inspector2FilterFilterCriteriaEc2InstanceImageIdList",
    "Inspector2FilterFilterCriteriaEc2InstanceImageIdOutputReference",
    "Inspector2FilterFilterCriteriaEc2InstanceSubnetId",
    "Inspector2FilterFilterCriteriaEc2InstanceSubnetIdList",
    "Inspector2FilterFilterCriteriaEc2InstanceSubnetIdOutputReference",
    "Inspector2FilterFilterCriteriaEc2InstanceVpcId",
    "Inspector2FilterFilterCriteriaEc2InstanceVpcIdList",
    "Inspector2FilterFilterCriteriaEc2InstanceVpcIdOutputReference",
    "Inspector2FilterFilterCriteriaEcrImageArchitecture",
    "Inspector2FilterFilterCriteriaEcrImageArchitectureList",
    "Inspector2FilterFilterCriteriaEcrImageArchitectureOutputReference",
    "Inspector2FilterFilterCriteriaEcrImageHash",
    "Inspector2FilterFilterCriteriaEcrImageHashList",
    "Inspector2FilterFilterCriteriaEcrImageHashOutputReference",
    "Inspector2FilterFilterCriteriaEcrImageInUseCount",
    "Inspector2FilterFilterCriteriaEcrImageInUseCountList",
    "Inspector2FilterFilterCriteriaEcrImageInUseCountOutputReference",
    "Inspector2FilterFilterCriteriaEcrImageLastInUseAt",
    "Inspector2FilterFilterCriteriaEcrImageLastInUseAtList",
    "Inspector2FilterFilterCriteriaEcrImageLastInUseAtOutputReference",
    "Inspector2FilterFilterCriteriaEcrImagePushedAt",
    "Inspector2FilterFilterCriteriaEcrImagePushedAtList",
    "Inspector2FilterFilterCriteriaEcrImagePushedAtOutputReference",
    "Inspector2FilterFilterCriteriaEcrImageRegistry",
    "Inspector2FilterFilterCriteriaEcrImageRegistryList",
    "Inspector2FilterFilterCriteriaEcrImageRegistryOutputReference",
    "Inspector2FilterFilterCriteriaEcrImageRepositoryName",
    "Inspector2FilterFilterCriteriaEcrImageRepositoryNameList",
    "Inspector2FilterFilterCriteriaEcrImageRepositoryNameOutputReference",
    "Inspector2FilterFilterCriteriaEcrImageTags",
    "Inspector2FilterFilterCriteriaEcrImageTagsList",
    "Inspector2FilterFilterCriteriaEcrImageTagsOutputReference",
    "Inspector2FilterFilterCriteriaEpssScore",
    "Inspector2FilterFilterCriteriaEpssScoreList",
    "Inspector2FilterFilterCriteriaEpssScoreOutputReference",
    "Inspector2FilterFilterCriteriaExploitAvailable",
    "Inspector2FilterFilterCriteriaExploitAvailableList",
    "Inspector2FilterFilterCriteriaExploitAvailableOutputReference",
    "Inspector2FilterFilterCriteriaFindingArn",
    "Inspector2FilterFilterCriteriaFindingArnList",
    "Inspector2FilterFilterCriteriaFindingArnOutputReference",
    "Inspector2FilterFilterCriteriaFindingStatus",
    "Inspector2FilterFilterCriteriaFindingStatusList",
    "Inspector2FilterFilterCriteriaFindingStatusOutputReference",
    "Inspector2FilterFilterCriteriaFindingType",
    "Inspector2FilterFilterCriteriaFindingTypeList",
    "Inspector2FilterFilterCriteriaFindingTypeOutputReference",
    "Inspector2FilterFilterCriteriaFirstObservedAt",
    "Inspector2FilterFilterCriteriaFirstObservedAtList",
    "Inspector2FilterFilterCriteriaFirstObservedAtOutputReference",
    "Inspector2FilterFilterCriteriaFixAvailable",
    "Inspector2FilterFilterCriteriaFixAvailableList",
    "Inspector2FilterFilterCriteriaFixAvailableOutputReference",
    "Inspector2FilterFilterCriteriaInspectorScore",
    "Inspector2FilterFilterCriteriaInspectorScoreList",
    "Inspector2FilterFilterCriteriaInspectorScoreOutputReference",
    "Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn",
    "Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnList",
    "Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArnOutputReference",
    "Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt",
    "Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtList",
    "Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAtOutputReference",
    "Inspector2FilterFilterCriteriaLambdaFunctionLayers",
    "Inspector2FilterFilterCriteriaLambdaFunctionLayersList",
    "Inspector2FilterFilterCriteriaLambdaFunctionLayersOutputReference",
    "Inspector2FilterFilterCriteriaLambdaFunctionName",
    "Inspector2FilterFilterCriteriaLambdaFunctionNameList",
    "Inspector2FilterFilterCriteriaLambdaFunctionNameOutputReference",
    "Inspector2FilterFilterCriteriaLambdaFunctionRuntime",
    "Inspector2FilterFilterCriteriaLambdaFunctionRuntimeList",
    "Inspector2FilterFilterCriteriaLambdaFunctionRuntimeOutputReference",
    "Inspector2FilterFilterCriteriaLastObservedAt",
    "Inspector2FilterFilterCriteriaLastObservedAtList",
    "Inspector2FilterFilterCriteriaLastObservedAtOutputReference",
    "Inspector2FilterFilterCriteriaList",
    "Inspector2FilterFilterCriteriaNetworkProtocol",
    "Inspector2FilterFilterCriteriaNetworkProtocolList",
    "Inspector2FilterFilterCriteriaNetworkProtocolOutputReference",
    "Inspector2FilterFilterCriteriaOutputReference",
    "Inspector2FilterFilterCriteriaPortRange",
    "Inspector2FilterFilterCriteriaPortRangeList",
    "Inspector2FilterFilterCriteriaPortRangeOutputReference",
    "Inspector2FilterFilterCriteriaRelatedVulnerabilities",
    "Inspector2FilterFilterCriteriaRelatedVulnerabilitiesList",
    "Inspector2FilterFilterCriteriaRelatedVulnerabilitiesOutputReference",
    "Inspector2FilterFilterCriteriaResourceId",
    "Inspector2FilterFilterCriteriaResourceIdList",
    "Inspector2FilterFilterCriteriaResourceIdOutputReference",
    "Inspector2FilterFilterCriteriaResourceTags",
    "Inspector2FilterFilterCriteriaResourceTagsList",
    "Inspector2FilterFilterCriteriaResourceTagsOutputReference",
    "Inspector2FilterFilterCriteriaResourceType",
    "Inspector2FilterFilterCriteriaResourceTypeList",
    "Inspector2FilterFilterCriteriaResourceTypeOutputReference",
    "Inspector2FilterFilterCriteriaSeverity",
    "Inspector2FilterFilterCriteriaSeverityList",
    "Inspector2FilterFilterCriteriaSeverityOutputReference",
    "Inspector2FilterFilterCriteriaTitle",
    "Inspector2FilterFilterCriteriaTitleList",
    "Inspector2FilterFilterCriteriaTitleOutputReference",
    "Inspector2FilterFilterCriteriaUpdatedAt",
    "Inspector2FilterFilterCriteriaUpdatedAtList",
    "Inspector2FilterFilterCriteriaUpdatedAtOutputReference",
    "Inspector2FilterFilterCriteriaVendorSeverity",
    "Inspector2FilterFilterCriteriaVendorSeverityList",
    "Inspector2FilterFilterCriteriaVendorSeverityOutputReference",
    "Inspector2FilterFilterCriteriaVulnerabilityId",
    "Inspector2FilterFilterCriteriaVulnerabilityIdList",
    "Inspector2FilterFilterCriteriaVulnerabilityIdOutputReference",
    "Inspector2FilterFilterCriteriaVulnerabilitySource",
    "Inspector2FilterFilterCriteriaVulnerabilitySourceList",
    "Inspector2FilterFilterCriteriaVulnerabilitySourceOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackages",
    "Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture",
    "Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesArchitectureOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackagesEpoch",
    "Inspector2FilterFilterCriteriaVulnerablePackagesEpochList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesEpochOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackagesFilePath",
    "Inspector2FilterFilterCriteriaVulnerablePackagesFilePathList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesFilePathOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackagesList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesName",
    "Inspector2FilterFilterCriteriaVulnerablePackagesNameList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesNameOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackagesOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackagesRelease",
    "Inspector2FilterFilterCriteriaVulnerablePackagesReleaseList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesReleaseOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn",
    "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArnOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash",
    "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHashOutputReference",
    "Inspector2FilterFilterCriteriaVulnerablePackagesVersion",
    "Inspector2FilterFilterCriteriaVulnerablePackagesVersionList",
    "Inspector2FilterFilterCriteriaVulnerablePackagesVersionOutputReference",
]

publication.publish()

def _typecheckingstub__12f9c10d57cb5e78e18b8f3cecb6ef5391597c18e70360a4274c87127137a892(
    scope: _constructs_77d1e7e8.Construct,
    id: builtins.str,
    *,
    action: builtins.str,
    name: builtins.str,
    description: typing.Optional[builtins.str] = None,
    filter_criteria: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteria, typing.Dict[builtins.str, typing.Any]]]]] = None,
    reason: typing.Optional[builtins.str] = None,
    region: typing.Optional[builtins.str] = None,
    tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df5e2ceab9945f544e00d34d0610a8573ab3e3d935e9d666ff74f71a61bfca70(
    scope: _constructs_77d1e7e8.Construct,
    import_to_id: builtins.str,
    import_from_id: builtins.str,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6431aac6c54e1e83ef64040692c575966f4d050029197516a6a673dd4b3ecaf0(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteria, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d3d7a59abcebb54165c9be3a3c578d781ef13588efed1bd67b43ea1f81941e2b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b44a83cd810d19e2cbbaf613c4f8f6a7758d64ba7edfc8f20e1481af4957dec(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de2c9a50d01eef5890fe004ac1f219b00acc4274cd1d4c4fbe4eee88af24f75e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b213beed5424fa0b77983dc09272a159d03c54122bc94375861ece1164277557(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9eacc743e0a2a4b2eb8924b353d3f650ffb95117a97bd795aa3b747fae8d707d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1934a2b26c8582750cf336b81f3b20597747453a7b76f4833951acf94acc1061(
    value: typing.Mapping[builtins.str, builtins.str],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a8af0e2e4c6673331afa6485355a9079ca0b1a35a4aa39fadd2e52f35add3c83(
    *,
    connection: typing.Optional[typing.Union[typing.Union[_cdktf_9a9027ec.SSHProvisionerConnection, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.WinrmProvisionerConnection, typing.Dict[builtins.str, typing.Any]]]] = None,
    count: typing.Optional[typing.Union[jsii.Number, _cdktf_9a9027ec.TerraformCount]] = None,
    depends_on: typing.Optional[typing.Sequence[_cdktf_9a9027ec.ITerraformDependable]] = None,
    for_each: typing.Optional[_cdktf_9a9027ec.ITerraformIterator] = None,
    lifecycle: typing.Optional[typing.Union[_cdktf_9a9027ec.TerraformResourceLifecycle, typing.Dict[builtins.str, typing.Any]]] = None,
    provider: typing.Optional[_cdktf_9a9027ec.TerraformProvider] = None,
    provisioners: typing.Optional[typing.Sequence[typing.Union[typing.Union[_cdktf_9a9027ec.FileProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.LocalExecProvisioner, typing.Dict[builtins.str, typing.Any]], typing.Union[_cdktf_9a9027ec.RemoteExecProvisioner, typing.Dict[builtins.str, typing.Any]]]]] = None,
    action: builtins.str,
    name: builtins.str,
    description: typing.Optional[builtins.str] = None,
    filter_criteria: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteria, typing.Dict[builtins.str, typing.Any]]]]] = None,
    reason: typing.Optional[builtins.str] = None,
    region: typing.Optional[builtins.str] = None,
    tags: typing.Optional[typing.Mapping[builtins.str, builtins.str]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5666efa08acb27a7c5ce4cba127a939042c48c874ff2b464223a132d02a45e37(
    *,
    aws_account_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaAwsAccountId, typing.Dict[builtins.str, typing.Any]]]]] = None,
    code_repository_project_name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeRepositoryProjectName, typing.Dict[builtins.str, typing.Any]]]]] = None,
    code_repository_provider_type: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeRepositoryProviderType, typing.Dict[builtins.str, typing.Any]]]]] = None,
    code_vulnerability_detector_name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName, typing.Dict[builtins.str, typing.Any]]]]] = None,
    code_vulnerability_detector_tags: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags, typing.Dict[builtins.str, typing.Any]]]]] = None,
    code_vulnerability_file_path: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath, typing.Dict[builtins.str, typing.Any]]]]] = None,
    component_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaComponentId, typing.Dict[builtins.str, typing.Any]]]]] = None,
    component_type: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaComponentType, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ec2_instance_image_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceImageId, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ec2_instance_subnet_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceSubnetId, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ec2_instance_vpc_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceVpcId, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ecr_image_architecture: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageArchitecture, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ecr_image_hash: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageHash, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ecr_image_in_use_count: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageInUseCount, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ecr_image_last_in_use_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageLastInUseAt, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ecr_image_pushed_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImagePushedAt, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ecr_image_registry: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageRegistry, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ecr_image_repository_name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageRepositoryName, typing.Dict[builtins.str, typing.Any]]]]] = None,
    ecr_image_tags: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageTags, typing.Dict[builtins.str, typing.Any]]]]] = None,
    epss_score: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEpssScore, typing.Dict[builtins.str, typing.Any]]]]] = None,
    exploit_available: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaExploitAvailable, typing.Dict[builtins.str, typing.Any]]]]] = None,
    finding_arn: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingArn, typing.Dict[builtins.str, typing.Any]]]]] = None,
    finding_status: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingStatus, typing.Dict[builtins.str, typing.Any]]]]] = None,
    finding_type: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingType, typing.Dict[builtins.str, typing.Any]]]]] = None,
    first_observed_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFirstObservedAt, typing.Dict[builtins.str, typing.Any]]]]] = None,
    fix_available: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFixAvailable, typing.Dict[builtins.str, typing.Any]]]]] = None,
    inspector_score: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaInspectorScore, typing.Dict[builtins.str, typing.Any]]]]] = None,
    lambda_function_execution_role_arn: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn, typing.Dict[builtins.str, typing.Any]]]]] = None,
    lambda_function_last_modified_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt, typing.Dict[builtins.str, typing.Any]]]]] = None,
    lambda_function_layers: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionLayers, typing.Dict[builtins.str, typing.Any]]]]] = None,
    lambda_function_name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionName, typing.Dict[builtins.str, typing.Any]]]]] = None,
    lambda_function_runtime: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionRuntime, typing.Dict[builtins.str, typing.Any]]]]] = None,
    last_observed_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLastObservedAt, typing.Dict[builtins.str, typing.Any]]]]] = None,
    network_protocol: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaNetworkProtocol, typing.Dict[builtins.str, typing.Any]]]]] = None,
    port_range: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaPortRange, typing.Dict[builtins.str, typing.Any]]]]] = None,
    related_vulnerabilities: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaRelatedVulnerabilities, typing.Dict[builtins.str, typing.Any]]]]] = None,
    resource_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaResourceId, typing.Dict[builtins.str, typing.Any]]]]] = None,
    resource_tags: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaResourceTags, typing.Dict[builtins.str, typing.Any]]]]] = None,
    resource_type: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaResourceType, typing.Dict[builtins.str, typing.Any]]]]] = None,
    severity: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaSeverity, typing.Dict[builtins.str, typing.Any]]]]] = None,
    title: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaTitle, typing.Dict[builtins.str, typing.Any]]]]] = None,
    updated_at: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaUpdatedAt, typing.Dict[builtins.str, typing.Any]]]]] = None,
    vendor_severity: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVendorSeverity, typing.Dict[builtins.str, typing.Any]]]]] = None,
    vulnerability_id: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerabilityId, typing.Dict[builtins.str, typing.Any]]]]] = None,
    vulnerability_source: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerabilitySource, typing.Dict[builtins.str, typing.Any]]]]] = None,
    vulnerable_packages: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackages, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__684dfded7d52490ec9a7661e631e287325268d79d62d6dc86dede198105d489d(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eff13b6b60e8cfab60fa7290022ed2552ab15702b19f583a32875530d2f43c90(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d49c63fb4a7644c23be9b88be19a430126443ac4f67c33380566ab81a77e96f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f5021bf11fbf2fe114f52a54c6c40dec5b8d8efe06fe2327fad431e80ffd174(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4e22f3529234722875ce4b5b8be5dce2decf46c8b259536b53db12037f1d4f7(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0293661ac9f2a1b27d7a6bae3a39457498ad95713521c07f145ebbaa81cca9c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75ebb4af68ecee0bd9b752cb873b38e42a67b4ae7138e1f6b4a727559e025ce0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaAwsAccountId]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6c54c6e3cc7ec18d8a234ad543eab3f64cdd44fe8eef06f86f0acf1fdd32b024(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5fe436b7639ade05cbed0b662970bfd5d4a967f8e290c4ee351ad4d6bdcc9e2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b77dd5edf6232fad4af589dff094beca0a173528f888729fab1d3b381865c0d9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be731898bfc5c9d24b5c213e2a0636b6d95eaa8557cd211738957184d9488abd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaAwsAccountId]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__51456be732e389cc7565a5978446ddef5fa5f1d94ee63fbda1a9092c2802575f(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__843da1977b9641774aa431176a64efe90f0c0884987f01ca7a06a7cb8f2318dd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd6a8b882dfcbd89d2f851601829b83a005436390b25f65863a4bb0e21e8adab(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e162b41141ee21527fe32af6d00e2e971327fb960addfb40c043bbb07df0284e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4fe36c646a90ca545174eee27f48866d480248c3db95371d0e9d702f864a1b05(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c59e2299686cd8068a043140b934fd96e817daf285785f56152c36686f31d9da(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__031dcff09ce2c9473a195a104850811c63ef2b287efc3e4e72835e830168e75f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProjectName]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d83bdd4c0a265b94e3e9712e53c24c689ebcd49821a70b869ed9ae11f4fc43a4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa339894cc1bbdfa65d67ed931e82b1bdfbdc0ee0284228cad4d0f9703ee8dfc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a302f35b9457577fb6d3509c3deb33bc4b888c5e97b6a36b0d2aacaaa6ae85fa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8e2fcf8581380ec90ace54f8f9edc2ce216750b4e5aab1b7f65e2704b571f486(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeRepositoryProjectName]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9115499d3740aa57a095234e097d5ec7bb9eb09317e1042382e9549ac72cb36a(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b56c56f1746c86de5917430b7f3c0fe116e4ac9d19fc39862e2a6b02b66e31e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bdc13c6fc664cec61d8172a9945208e7ddf40291dcc9226623edbfd93ef3dc7e(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0cedf9c3eec8ba44371ea1d67448ccf81813a07d1f322f01cc45984220a4e17(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ca99977ceed1c65bb9554e42d559fc084140f48ba8bc698b0853978527ee5e7a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a249576af1b30ed63ef69677736004f1d444054bb7b253e375b8dd933605862(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45551ae3ad399d92f8770374972303ccc94632fd6d41a7cdd14d0ad7077ff6dd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeRepositoryProviderType]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ccd2cd7f57a3f6868f1d23dbdae4ef56bfb8fb1f7aa60cc3d501d632d4d05eea(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a1f11245efd7daf683122bc55bc4b4f93e2b63640fd9c7d53b647798685eeaf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6b7ec5a074a091f07b529c3893ccb373050a86434c18ac4f87e7945d3f70ba1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d02bcd1a17a3a4a601c89b7c1f1bec80f43eaaa22a96a0ee0588746ade061a8f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeRepositoryProviderType]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac1f1da779b6f5238ac2eb7f85f9b976f1233af80c70696290d8c426645aa240(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e0d2ed8a0402fb9b5ad1d645929a23512bbdc83a3847265b7e023674dd1a2813(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__10cf6e17d1c0fbb0bd3157bb42187b85bf2bfb9840b19844a596c88e8185cc51(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f6fc43b36ebad91aeed0260537a3a066f8c0b2c6fd6967914a5438b4296f5a62(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bcff2623ba5c493a30fdd023c0a6d5c6750691b279ed484a0b8b06dc0a0462e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63ca652f285267697a4099b92af8af5c8022fca0df5a399093e29d0352c6b9f7(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0a4192d3d7117ea3a3efd60b0fc4e162a48699e27793ef2f8ca9d90575461824(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb18c5e3823c7eb4e91b901985ed7a83f708876a56bdd28df4861e61246f0378(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e28b362ff4a1d7673ce8c80ed30964004e50b490327de9002597c5cc0a6e04e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74b5a1206b51c37848d4a1b407c7cb4279e439508efec338a9f30f2ea96b95d0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9b4261fb7cae6b05c0e9b56edb5993fff1833d4b4aab3245aeeeca6cc4e7c5a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93685c6a3faf6188c97ae56c23266e63fd9fdc5887b25eaed4a6acdfbed516c1(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__26d0de9ef4ff4d0407fffd2e658ad04e0c344ab135948132adbeacc175bb38d7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41e015b63d2c50656851c02f974de2db1d61517442d87366c08ccdeb15951a02(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a83c8c77abbd8d4eccd38653aebcc619047c351892be086d7af9938c778b6c5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fd131c27336098e0e33500079638a60fad47565defe935150e25398e98dc04c6(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c26a02e5c1c3839391451fa2193e5f84058b31648e04ee6ea6ec0af616aa48a7(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__31795f4856238cf06ecc61562b0592d1ae1c1c3c1d39e8d6944f68bd3cf77218(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de78e575f9c37f6facb2d413b5a55f5569b1927180af800593ef13736491df7c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae07b34f77dce48020e6fc7df4bb85288a701d8e3500a1b4041c65b8a4cc0861(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ea643b1e31b6b01f558710a527a7c0db8da30d21ed753dadb6de146cc3f5e19(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b50a9ff618bc753497e0a3eb2c570f79a26e9b9070417f88e8b38901057eae4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__92e9e39a4c3165b6cf5088ff752ccb584ad41efd54df5540c6d79225c19aa4d1(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__97325bf107679964d7db50f8325d95690f9be8466fb3ae866fe43610f24cc887(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b1aaa654905ef4f86362939d1241627af10437f0895addc0471021da79ec5e6(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c72a60596c31b48da41365b2f25428cf98e55f193f0ed20d7ef6fcca9e49dd16(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__325e703a66478f48f6dc5db9b6122c1b138e6617bea47d482a9d60595db31873(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__65c5e33ac9040140dc98b387d1b2da5d6b5ed546b3937682ecbd48892d0f499e(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eec586ce60a25f45f903658d4c84adf45b908aa7fe63a251075bb29e1a018d81(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d4b4992d30fbd6fa4516d63522b1a25a40ea638afa6f9fe20a5e1f68ebce2db(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__238853c1bb6d13ecfcd5e2317c68b9ceac62287fd0f7c7a6deac99b532cb4982(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47dedb2a0d4d454b80f9bedbd2a483662055fdfc941c68a4ed8ca88410083434(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__812e3d878e7df6415221b140a8a299278ebcfec947224e9ea79be2c8a41b4b07(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e90edf61e4d9f3ae2b985ed5f83a891faa717678fb103bd37eb1a61a4e93a7a3(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__314e7b0c616f92f646bdb1e51b88a7d0a348d479b15871b3d33b701521c03e16(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f30a7a988d2edef3e98db0c198387a8e091d0ce93a5891757bc617c55704376c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93a21e9e885a221b7401c850f7bb65130be99511d877122fd0fafc755a62bacc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41d76634951d81c2f004f1cce4337dc2011e07f67ce3fb060c1467fbb900fc95(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8dd0147040fc58dd1c0452d88cc2239a7f77142454d6b8cf0122ceba365474b2(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__38333803f5b685f30896e9a5b805dc411d2f925baedaf47f63eed68246a984a5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentId]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e391494c9bac7be5f754bc3eabd297c4c90f6ebd81e4438df413b7adf9c037d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__82f90b16546d5073a38ecd6cc493d43d2c8e10d611c0e13b05655c42d8367da8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__789117168b5dbb9ed133e983cbf8fec34438a9daa108480cf8d004016f39e6a3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00427470067077b6e5931b3aa6f5048ad19a9aafeda184d375c3c035af82a01e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaComponentId]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37a08facf77d9ff8ca17db907ea952bb54eb9c27ad521ed5c99f3f865192b0cc(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__737d25c374826c3d896822e85a1894bed916e64048f9bdec139af654fb7486d4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e16e24725ebfa4d05117a6d458aff6a631abd010191b6b1fe08e721b2e58819(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7ed5c9323b33492b33c76bb1dfc12ab39729548f2caaa34036fa97ba618e178(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99b3e58741e5eec1909f677e612cb300521d10e0557a72dd90771696a82945f1(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6eba1f3732e58aea1398fa1eb9e0d4f028fef2088f2244788b4fc2165d8e8dce(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__850b1f65bdf1ec7089e0446e82186af689fa31fc82857e9f1718d146541b997e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaComponentType]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a065c16443de3072dbeeda1e561f85a6cdefe18b88b770c0d67e209ad7a7a17c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d2d32fa7964829f731c349018e28742533401f717f19309a1a42564cd5c5b6b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__881f483a6bc75aa8f37be32e45c870d7c31c0170aba88df4c2f52bfefd2fbf68(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6fdb9b202515cc232fae3f62754a64294f844e862e3ed5cff6460cd93ac70ed5(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaComponentType]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__085adc136afbeb8f4e50999546a777fffa2f93428a9528b336c6c0612f43e13f(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7aaf31aa4897f46f9f3f4fe69e5f6aa3b3fe16042efbcc3f3b71448f2572e7b5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd4fcf8036a03eb4b317c45b538e942d7bc8816a7b69df650c6baaecc73b0bf7(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3113bbeb01929da2a434674083815232eeb30333709f80184d5df19b22c93918(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__934efcad1d7403c4e7d1b625efa2b07bcfd1b1c212bb9aa7b781b934d4b85c2b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c41e35974b872ebc1609e5e33fd0cce71c66663fca3070dd3dfd9d4ec22523e4(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2ce672b379f9a9d0aa747f982dd3234bc04172934bf2240d6144424079aea345(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceImageId]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__655379833ded102b40bdb0e02c629d9a93775ac9d1006b381ead2a4da9ef9edf(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3dfba7483575c50af0258d5edf41ef1aaff924eec77e610ef4ffe3b048f606b5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c9a7de3922fb5f7765da8b347890ace5d6fa58c12bb2be91b2822fc327acf876(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__932b8d1094e55c8bba0b23988ea74acd1b122c0d912deeefb7e4ca024e52731b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceImageId]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__453f25bcd6711820eefcb6c68216b1b75573e5571aeeba7a9efd3f3420dd2b1e(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__101d28d79626e4b8896e439c31f0eb61b92f78039d3d49a20fd2e358a70adbf2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4559fb0f93f6d641cf48e9514ba865f7a19bca9c9239aacd2b478425f4246ff3(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34e4edea6abaf02601ec1642993b7c1f1c2db096de1349361e3a224cc02c7363(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67248ae35f26ff004c315bf5d4a2f7d03a0b33d6985d1cbe960c25bc1838dc24(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93ec274a25f5af0d6f0edb337e67beb1f0840f96dadc02e62ff5c211db8573d2(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__872c5a9f5d995fb0b6db28e54369b14bc1e2931d8810c17c659f71dedbef7dd8(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceSubnetId]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a219f132d8e07cd635413984f7d956727152e674d5937dcd15d77e73eedd443d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28fb53ac8294d70bdb452af1056fe01b7f5075876db4471b0fc710efca655900(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c109c286529b8f9ddfbe6c88a27ec4baef781cc38dc469f22a485b40ac9fa872(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ae4a6c25ef2d186e2d0fc741beb033a1acd2891548e68a4cc3ddb687f030b00(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceSubnetId]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__435382e0f0624d7d5eb022e1275e5f25dc131553871aaf65774d1aa8e3cd3e77(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8789d5dfbd0b7cadeaac56e061fb5bb6496bcd5efb682abe1a1e50b8ab6ae4d2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__530555675a08765bf59274c56a6768763d7fa4107ba588239280f2b67113bbc7(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d25af075d431c0a84bd2c9f9d587ff3143f079629cec86dee53a318e8442f457(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__799ddbc464c198bbbfbe4cbc968ea0ecd564efaa4a97240b095507e910f42462(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c5ab38e32fce07d7eb7764145df4aa6ade0777205475e579dfa4fdaf0584386(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f91450763bcb27c77f3da17897b8a785c5154323e2821f229dde32d4dab7a5fd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEc2InstanceVpcId]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__29ae47a7ed64fe900f52689855594bed0bc987622d95d365e4478c26e5f1501d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__499721e64de66575075e392ca6e39dfc81674c79a65f5cd34e0b7e2659df40ea(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fa0ae265920b7dc930d5d1c6d1d9404b7c5ebb385b1ca81fa5cf1c4e3d63fd7c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83dc82f01c4d1aeaf1efbf6d66d722ab7fe621c4aa49e5c7d1f29a9a2a5abd56(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEc2InstanceVpcId]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__286f8224a8dbaa125364b4ee1b728cfcc00e3ee672028525229c1818f2dd31d3(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__99de8a642f9d46297057fda890ee6e8c1a3f261b4912ca668b2a0ace5c0e96a2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e4334a3176fe119ab89b7757aea1e0a903797ffee5101fba7a3b16e5ae4b6fb(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32ee0424d39ad171a1942c0e2e419f9ec4afd011d437514b86b5ce11048a2729(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0cc7f51d772a350bb20c70573a37d2d915cf7cdf9540018709447dd3d02c9c96(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84cc3a5d23152d3e40e1221c088c9658cf18b3f91679544008005db772995604(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__549413e0fede71fe6fcfa65b13c71dea7c6f2489f3396474025a2e7d527bc036(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageArchitecture]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0486fd64e1a1d306eb4c5fcfcda4b3da9e4067ab61ac689fbcc68b9339ec3884(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f27b6d6f8eb4923a0c2e63ae9c9a16fc7a71ec7c3102b48e527f32a9b91f462a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ac92e5416d2e69a79171495b8b8d695062fd6d13122ccc24fc5e9bb517150f03(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eca7e794392588fabfd5b94712e371b13bc6a79429492ee4ea30a7e9a912eb85(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageArchitecture]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c68a36e6ea94efd3b4a42ac102f6111cef1a044149c95a069f89877b6d03bf04(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c64d4abe2150755b9190413e872af29e606f5337e9af237c6df94bb54a6524d1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f94d5bdd21183f4c0f976f09539f04d09fdb72cfb0aa625277357e1c1ae9294b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__044bed7bb7612c3d144e476952033135dc8a05aeb8623fd345fd18f0a0443d2b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3ad21b0f9d4c6d584cb2bc189200cfe87ccccc553fa97404263dcda4d29f4094(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d6f707f3904eea8cd18123ae3be686476575b4d79f9fd127cbc7b58ca0ff7145(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__404cf5c7db690f62011c951cbb2f435f4eece86377b2678edb45d62c0cbfa76a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageHash]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e5dd8ef904101cc38ddd75418c1d4b03d79eaa9eb458e7c162895605ac7e290(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__71ed0ecd38e7af66d3d0f58d5fac6d42d841ff296622d23bdbe90055cfbf6a71(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__542c3c398a5619f2129200fb0a8e19591f39930ba49ed7661bca7b5020216ed9(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed320fc836c8495fdef1692840589f6d4dacacdd19601082d43ca78ca3cb031b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageHash]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34c4ab2785ceeedc67bb848eef3b8580d0f8a40dc8d294550d2730bd7b5c33f4(
    *,
    lower_inclusive: jsii.Number,
    upper_inclusive: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57e750a4b7e30ca4f79fe19bdf5b8760de122c9cb7de8ef39ce404a833d8a591(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c8b67bd6c94189f2759507a9da1043f8a54ff39b08719e4250e604b3a253f9b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c728e9746f72c8af5d66422ce904614086ac39b7e669c3195cc475967aca42ed(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__73f24346a40fdbd739101d2f52b7cf95a8550b5ff7556fbc989a34b862fe182a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1f0bccd6e7f222fdc8efabfe3dcd682dd44668ca63aa723288d2d255384e1310(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdddefd74bad44c285cf454982b50258be55eb3027ec1c4a70a4a6d437c51907(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageInUseCount]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d44df9164284d339fabe271fa634c12920453d77895477fcffa3d5ab31f5019(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5a20d63301413f014e62409c325e69f5798021db32cd14896d90fb4074cc0360(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3faf36e55ddb1f9f015442caf1de067ef2aba9f155cab9cfb7619fd29487ddba(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81198c68add0ca25539ac89708200182e838f886b80406746e4a6332ffbf8a00(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageInUseCount]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7331a1cc419a68cc8c137197c08a50ff55134fbfaa0b4727ea46b6cc31db5965(
    *,
    end_inclusive: typing.Optional[builtins.str] = None,
    start_inclusive: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07109e1cdda874230e917a4efa245be3e1f349530a0674425d8b0a15ed7d63a5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1617c4a4fb2d00fc9546540de28e10d15ddcc823792e0767fa123212974cbb03(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a52e93d3f2afa7e614ab92fdba86044c60da46c76342e366df436d5d5a7e9a6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60e1f0c6c23283136ab4ca0c51f1a1fd43f3806eb62f377710d46b885e25f757(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8d0565758309f78355c187a70d4e4333850c7831d145a3ff5e21d82f54243587(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c881314e394ca47cdd7eb9a4f82a9eb99a61b4d0df376d797261780c8613f29f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageLastInUseAt]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dca6768ce9462e0573eff9ad24b3e0cff9e93658fbefed3c7199e22c3ecf4a2b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__820f957e654b3142526fb11d78fd43f9005cb796c0bacdeaa85836e925f3e5c1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69f9878ca6dcfce888bcc57d67f364e3c9851d253e190c57d0cbedc7270a46ee(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__132c32548a395aa185748f4eadb37f62e808179f27c5c14ea6ec9021d6596082(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageLastInUseAt]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4ae918abcfb94235586825fa306d60db85b7cc098381d2646687958bd261d3d2(
    *,
    end_inclusive: typing.Optional[builtins.str] = None,
    start_inclusive: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e8d9134de68ac82e741df26c01e58715e4ade0377e34d472535a1be021cf619(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f45c065e15d94c2a78fe4e49bbf4f31a7f97f7250febb0dd00546d6516f85985(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__62e22a7d305abe3727124ccd1db35d2dd5b1c4d907b0b8d108d00779bc454911(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__065554f028c0f117dcb2036acd6221bd4ea66633cc4c4e8bc3b36b032d6ebd6e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a30e984d4df8abde2c0100c33e11abc2fa092c62de6d2f443a3569dd513049ad(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47535ed6c49d9298095ce0716ee8b59229ebe20f39e30de1862d040b439a4ad4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImagePushedAt]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2586ccad2b02edb06228503fe6c09f2a4fcbf084b39806c382d86af5344c62d6(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0cb445799851604c5ecc3033869416c217ff0cc4bf1be1e6a84a8705c1b6cc7e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__784b6d24f6b7c5edf963ceaac72ed8105740f1b66a0fb0f424d0dd4e738d4f53(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__13044318c2f1ec00f34354cad8e4e14300a521c0f2d033a019a53c33511a17e4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImagePushedAt]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c133ad0996c79aa0bac51e0d50bbf534ca2093f48121169b9f9835857db3d228(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cdba249d9b5775ebcf7ae1b2362eaefc8d58cf86ce1cf46f22a1be2cbda85924(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e78b68d76fdc31fcfcf935e902c63b2feea218f3352d3d9f2b1b24b002879b38(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4eddb3aee37760d24daaa424e7efd85fc8ae01addc5476ef95f39c4f15830390(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__908f0239936e775c4c2952fd5f082ec32ed5193cb446ab05cf9b6518fe85f01e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f1b11909b45431568685559f83d044b5559d25e17579c29f4290193fae6b33c(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bd9b223385bb3b2ea2eb5ed2d9e4daf82c76ae73e50fb777d8467388296a62e0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRegistry]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44648940120237f1bbd84fd6c1619867b36b41642d02cf4dbd4d85a0a1588707(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e0da7d463f12bd3a8cebd0312f965e66e844df7875e25a752bbdf07f7f5ad4d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3d1e47ee16dfbae594cdf6992c6a771ef895c72d1b43700ce55e51a6c7811b4c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__40eb7b1573a72073f8ddd72208e943ffb19e35c75c038a7b913e6b8a3138ed52(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageRegistry]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a84a9ac435d0db33698e0a7b2dc9a6725126b5e524260734d26da861dd111a03(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3db1be1b5e66f28cfae939ac49c745f25afde18fa5aef3d838649e9b74f2415(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b521a4aafee1bc5dc78d7f67ebc4e21a442a4323de406a36a48b4f34ce70191c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb0be94a2ebfb9e3329e079afe155459fb2035c2c545555bad57aac66aa3e7a5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b986fcd3b557041b09d6fa64c43ae6bfb778f3e3316d5a28ea34c540e1a3b38b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21090e1e896c54370622dbc7506af3455d9157ae562785b32438e3892b49a0c3(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae713568f58a8f1e8fef9279f69bfdff09e689f5cfc4d0f061ab1b00b3ce5909(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageRepositoryName]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7cc8bfcf781455e6e6ca7c52806945722d28c10ebf3ce5461b9cb9ac19047ffb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__95904f1e2ecf83a06d4c6195311a4bf39957871ba46e658b11eb698dd9920154(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__15a046da60ed23b69ae7273dad05d5291ef2cb3bf37d088ed85f786298053f8f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__039991a52adf7885adde3093bfe0d07d1b9105c8bb31693db93aae0fd7e3fdbc(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageRepositoryName]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c61d94b7eb4d0674ace3b0894bf11f94b4c685c617d973452265637534950021(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__19c46b4800f2663519908bca58cb2d6bc5f9aa574187388a857395819c159e9f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7139195818fc9faa05417507ae90e9874faea7bea4837bb53d5b304154e8b2c9(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0c75ec297d6c3f7aff1d641b90fbe560c852bd7cee794d98fb3a4ed618037792(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1440422ff9f43718fa5dfafde5dfb859b2a80a8eacb4e8376eadac87ff121ac0(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5d3d703f64c4bba2ce1b9c74b364ab57af9e997e456e15c6ab1fdb9ec04b6429(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3661f7b2b4f0dfe2ddf40c74c6157f35121febb01f75ad6e51edeb4250e2f66f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEcrImageTags]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aff0a267e1b607a1649c9734aa0b013d1342d4476e9e117ca2c0b52cdff58f74(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a5ef2caab9c1ba69fe6536b68b215a2ddb379fe22979db34792bfb24de5ae12(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__63e26fa549643deacc069ba74047b95c2d900390165802c96215c43544eba3bf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b241acfbdfcb40cae97bd399138bd42f9840599f68520fc101e9f754acd00c2(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEcrImageTags]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6966a6563c978a9b316c92e10a78998509b4eafcfd7f8823c96857e27485472f(
    *,
    lower_inclusive: jsii.Number,
    upper_inclusive: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9928ee170a17dd18eb23d8b137e7dbbaff097c3fa6a10db227af87a03cf13914(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__267eecb86af57dd23078bba08283a4538b9cbbe26513ac2dc932d9fd5bd85d0c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__52daed344e25ed7bb8f3678de2b8ae31a8e652192054717f954a334a29fe9d61(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c1ddecf719f6a9eebea325c87a87eb5f29f30e8623eed6835330c13788e12c0(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__988f60d991cfba22eb7da770a83a40beca2200ebff08cd43752031299e0c98d8(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2278e8fd05c507323bf81e4f8d27a2cab4dc3d76be3cf2859a39fdddd160fc4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaEpssScore]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bdd49181e3b0cb4b05d62bdd2e1d60866c95671ad18a9ebab0a1917733f52a64(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a914c8696d575889dfec92f440ff8f1e6a9c98e447670f999b564b6971b588d2(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7f3bc037567c40b192b18fddaf2639f8aaf597b64f9796898542ebbe0e3d6c63(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__56a8e0b95b0fd9a26097239e108663f6fa061ff08dc9a52cd39a2207a29849f0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaEpssScore]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9d5a08d1d34e7683a3bd47ef5e9726179b550916a1190b02b0e368eb6264d29(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9e1ba0981c3c6512f9cdf1c72b5a274c547938d07a07b6757f2dca8c3859db24(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1554366df41c03a013beeb5b065a0d31afb9928620d53e79b2a2813573ef362f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a0d46832e1318845806c8ba60b6c6b0dde3929f6d4c68a4acbae923c711f299a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__77c00bd7247e5356f3357e6b592c390e545d977f8959887bde1b4593a5f669aa(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e794a4a6adf5c62b8dc3c00c9e1091096a96922b42ceaf5b32647b307edeab1f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0837a3c1ffd21f2513c0fd92119ebaa19a603165abecb3d5bcbefe9b9af8191b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaExploitAvailable]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32bd29334fbfe48b7ceb980bec32d94d9b4599ac4b591e3850d9d8416e42101e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__34187b6cba9c17beba9db60fb6a6c83ca0ab4956dd9036a0ef0b80aa9ca9def3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9263c6e569b5541e350c8e7edb4c034a221edf2ce1749ac29ebb5d54c66b333c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ccdc31bf9a36cbbf1d3a5b2abdca9761bdec804f6e4a9d7e3eb045d552bc543(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaExploitAvailable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a882a788d71a0f7df030da827ab6c88a60b8517549686e94be7505bcc6bd4152(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d8a3d1b1693ff782f341b79e48737fa8fe2a976b2a069c6486dff1b17fe1917(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8a34fa0805846b4b3ef14b778535573cc0cbc0a486f19e264d1883f3ac1d74b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a7f12b49e331201ac1cc445c2a583456596e66c6a997b105ae684d1691af25fe(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__46f1affa4ad97fa9fd6a42e153e0d4e51aa1a364315646b7f3b972fbb47ca935(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c8efa63a24901818724751a638d4cbf4ba2abf5d6b3c11728c5ab4a14b6dd94(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2e16b82d62d25b649b9b5d6b8f36bba5d3ee4c5cc9939bfd3c12b95fb3615676(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingArn]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__73710fbf4f52be8c596e59bfc35089cdddbe652b62dc9ae1339d31c297b72f9f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__742139c98f6346e26cc2e872dc7d9ccd7de7f7ccf216f43455a5b775d09cc27d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7c9193d64e74ab5f6372de475f95de138099a11349daec1c16d25f16c55076e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75e128a19935e9c3100872488909c00b481f2ef4da37d81adda3b728ad6e4284(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingArn]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2eaa96ed9e66810e864fe97abb85eb8f016d9d3bd4c86d0e29427b6946c5c49(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1ace5d6b2de9c3772cc1227198518c0d654b806cdbadd2549aceaf2f68fe68d1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d6cb09c4d87d1bb9cf3642be65871aacfbf5a893f925f9d6d6684fe184651a0(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4fb6a508f56cef606f0fe71151698bde60f94ad6e2a04c9cf9380a8032eeb69a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03eff47cc71132da236fc0e0a24ab5ab5dc06c128a56f8732eed504f3098d7af(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__101cb9b836c636434516700ebe4740420b6dbb5ec61c52a65103e0e5aec835fa(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab6db6168a1f3a6611318cad9c0b57b670ae4ddde24c6a149a3926a4b058ce67(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingStatus]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c0b7e574d6a950fb716964cc9adc8a5a8335a5440261ac108ec576f050f408a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d44d291fdff4f9ed42e6a0f1e193519898e4ed23d11430004a1a74c19e64cf7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__08e03dae4118c933867a915c7792089cab20a3e7b410037863eae4f5b745b03d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8187c567e92dab370835aa727775a0f7c326342b28932471e907bc2123facab6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingStatus]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f3dce94a74cb95671c9653778caf535fe2fb6b71a2bbb92fe55d47531eb6a61(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6dbca7d3a2dd8095de8fa649b2ac03a2582aaa88666e0cea147c5686680abebb(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__921353911d17a3609c01244ecc16abde62a83e8012feb33aaccf6b72eefd3967(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eef84155abf17bc20014cc26d5b5b3e1c31ad2c4720d7dcc51e29532dbccf528(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5ae2dd016636adebf99fd73398d23e5424d7978b7247cba70c6bf5b391c17b7a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ce36da12d53be40be2e80993c9f4f5b358fedbcf265f8a47823995abd230ef87(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e1806b8e4c1403f0fc796ba2cad872d95799071026c2678a723f80de8df72748(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFindingType]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc53f2dd5cbed0ae99dbb731ba8dac1eb4110e8710359de09f036e0043ac7506(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ced377b5c4aee39b4c5ed16c92b1600b01ac3242edf984d434cecb6047628154(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28b2c2d75a22358e7e1aff95b79e87bb4a8085f5727fd86be3924cd0e09a4bed(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a57a67125924368ebc361dde4ea5da26aed8af912b44c73a52f28ddc71cf8630(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFindingType]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43808e850b7bc32384fed5f021d6719767cccedd16afdc852aac4972286e6305(
    *,
    end_inclusive: typing.Optional[builtins.str] = None,
    start_inclusive: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e63e8c1589c4d876155c15042739926c937a6d947e2bc1fd0c8e64415b7c4880(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de774b292ef2b1b42dc49adaeb7ad0b5056eb5687eceb48918248a27bbfdef27(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6b880fb476099ad8a5dfe8e0fe151ab6db1f3d4d75ffc5e67d8044238be0d128(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2a33768edba422248fd604bea12801f3a84bf146bd1b987b5406304a0fa79d9(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16c9e3a36a3a80e8beda939bd9bb604a5fc9d13cc9e0c3300b20980c3ad08bd9(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ef346c1a2ea631e51795f6fd53f479c3b620ff4efc53171e97553c188a55fb48(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFirstObservedAt]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__43a23e152051362e1ec9af97ab0a8757937b839214d21ecbb5455a7afcd6644d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8255c17f38d73b0441ca39e333b0d3490d12cf3bd3edcc1fa188ba765631750b(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1fadc09e371395a96fccf836c2ec7fed1833314ae80a03ecbd87152d86cd1857(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7396da4dd2de3d3cf5ffa3e9845c7667d7085e549177f81d0c02158a2ceda4e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFirstObservedAt]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f727f80d4bf7531b182eab82bfb773e1bcdd4340d7d8620749b5b1350fcd07c2(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__09bf634a0ae5e157677ef3eecf5db4ae4224f76399c95d660e893ba3ded3763d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4bb7e6f7257085762b6ec60868bcf596a1a81211699ac1b2400bdfa40275e467(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__548fcb08fbc47994f8170a2daa6b0712bd80d1086d09005ffbaecdd8f6b72dd0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e58642b46a967cc3e1b7c7a9f09af53cf731fcc649d32bbc56c1d5527c288d59(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d472a8f9ba408b4a7095667a5c957042ef3b59fc8c3038f6b96bbf5cbaa81398(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0debe87e728f7d0e2a364e310baee50c46527fda57a5c224a86203ce45685c2f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaFixAvailable]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ebae05523976d6352f96be6d32db3816d035346e7bd7e852a5bc9a3f07fa3fb3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9c26ba0191a1a4332dcad24812e83d8d3d7f0b0e3ff827ea2f95d64bbc5c79d2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__df9bf36d9c0a81bb9021b046792cef135f9673dbc178b978cbe4b226335ff5fe(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e03d41ade3e07d8d67b5a854a1741c023019bf8fbf481b58b4efa077a13b1e4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaFixAvailable]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0fa5e6b38b56de31c2f38400db0ebb99c5dbddb347faacd25c8460763e4138e8(
    *,
    lower_inclusive: jsii.Number,
    upper_inclusive: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__adf55b59d26432b29e788965099cf1e354149303a19694fa9fede0baacdac9cd(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b714263a075edf96a50a3895906b62a27842a8c928ab66a5b9fed96437daeb9(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f70fb6f9f3df709b391917822bf8453b087be7597ac6f1ef4ca0ba16b8d3e807(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3fb9c20fc0522773737484df8c0bfa8fd8cf78115d977965274464d9e85c4ad5(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a3c5eeae17be486429cdea0837e6197e7b323ab67112fc7a60a96d4a2ba2ce86(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14dcf5957902753d8d60aee529b9e31f7e5e3e309d4fccb3b66e7cd61fafc268(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaInspectorScore]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__41364ad80a90cbed1eff4adce3bdee23a1e211df21b8e8cacc8ca18106d6651e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b77553279d9189055ba94ae87fa8f5c09bbe6bfeccea7ddfd493e0c9d0825b5e(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44b8a676071ec3a0321b1aefdbd6b4c28b565265dd5195f0d0bc06f631122df3(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e0e9963e172cb6ad782c039678d71495d338ebb8cad793717275fbdddc102d0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaInspectorScore]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__783640538ddeb31296c93e5478c8492d4459f09aec3efb4aefec23bb407065e1(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f75cd3dfcb4db649521c813d29497c3bedb326c913b93770c011d0c080a5b95d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__403853b6b25dcaa5b8ac00e04fb3d54fd021aef209c695cc50437a00d0cfc965(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__504dd606a41187e1d8bae6f0e13d336b728bfc865ad9fec21faf6fc0c6fd4f17(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__590488ba695e07d7151b74b766bf5998c969f26be07320926b1510512cbeecb3(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7cc9d57079d82e59627757985d883a940af3ebff15529db9b22cc59cdeecd40a(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2209ee1f1da5a9d972a6a0a289ce7286584e99ce2dba348a4d6a8b88e84d6e46(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8c9a6f66f0a8c5763803469adb5ed4e7ff95746e0118f2b76539107e74533ab5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c239a52c0f094398ac273512ee4e5110a95854b7df81c7fe7b18d196887a877a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2c367749ba63c3abe0ba2b5e51e7b751c0313ee52328c001266b66977310442(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__496e06c58a8b6b3ea4f930d005617b81ccc7a80819ddcd26a1643521ac6eabb1(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58c4df5bb88096f2496460b9fa72499240b1015bd1ca2aac6020aa3f31108395(
    *,
    end_inclusive: typing.Optional[builtins.str] = None,
    start_inclusive: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb469fa88e1b58eb0e8812b26c96ce04bb2ba9466cad12e75df8baa47895d803(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ce8e6bdecc73faea0e789e8f3c27b35542678a351bd2d061380c0d28ece15f2(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dfcb65263162e01b3aeb5f8b333b852fb1ddbd55e1194d1355476755595a6636(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__005140f3f09cb1828c32170342ef0b5ae2ea3860fc6bff58f75862ccb1016ee3(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57efccc1d1f6307f1ce1953321c4074fcd1be268c528f8376001aab88392e226(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cffe2e2ed3d5759830d7c346f3c6990cb56cb9fdff01a6fce4e10e67ff103e59(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8397142fa07c66416cceebf11135cd42e695718f02065640d01d7b3374601c4(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fdee24da19d36f173424fed4706957cbe299eaaa58b1eddd6b389f0a93d10a27(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be1dfde47d4495975cdcb285e5a6b0ff51aff10e209ee7234d13da03a7b0f453(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7d649d4924e4821ea21ee6ab356b9fe14f3b176a59dee597f2fd561029d8b7f9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0e083efaae191cf5dfda479897a7c5a3254ab0e21c2b3d7813b0d97a900bd65b(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9670d82d5acfad9a18ac4c787963f9d477d33a5da1c309d09f0cf7efd88e2eed(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__502ad7690e32ca57c09df768b8b81850bd85e9ba0fa7910c151328870268333f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e829ca9e1c714e84299dc0bde08bc82aefc96ec56eefdbc107d07f3e3443d30(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d7eb519428f324b4e187261e8c92b2714407ac5cdf39560e8377d974ba32811(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f77e606518a6905a3839d46dd0b37c393f8932088b54a23801b07b9e6def5a19(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3b09d48ef1003eff84b580e7a7f2f6d5284f97694ac4871d136256cd976c781f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionLayers]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49bd12cefe700e377064a48377a1b148e1eed6e1ecbfa1d058217f7ee25dc57f(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d79aeddee5aeebbb1b04d6a7175cbc919db159d90d2c37f260f2260a1ac33c5(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae12ee28333745f6adb94d96d8b7f55878837a0cd9190283ac5b1a3938582330(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7c5a515002b459f2de4d63aff925ba01fb57d137dbfa08401b2b39c514a2670(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionLayers]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d44a43cc784eda685a74802344b557151c430e4a0ffee18e7a4063c405572751(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__728ae313b37aa5cde92a00fee824a1c28d11c2997bfa0fc5a4fdd8c6bfca4e90(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__823772ffbecaa253ed059de016829594280613da7b4342a29032d2ece5b7f146(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__998b5219ca424555ef9c5bb4335851145b84a64e39efa8bcdbf534987dc57bdf(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4af7ed8fa3cbdf59a3d34dd8cb90b4ba8d52e0f1192331814a4af82430a6ba0(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb1e864aae6e40201e3e526b7dc9d60489540ca55ea2355b6e6bdb94fb5c7224(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a49960b658f54ab7b538eefddcf80e6edc71512b01ec0c281eb49a668c951988(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionName]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc8297908470e987c5cfa15257f72da9bc38cdf7feab6c64b36bed40437efed3(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3228b2b31e2b91264ab1503d0ad57934beab6701acf80bbc0abcc326948edbfb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__74a321022f374b84ff497e6cd78d1550ba0242e17f85bf58b20a52ff078b2bcd(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b0fe1902ac39e9a8e7a6e18dce1f8d5af7d875bea176cc95c08af167037aaaee(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionName]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ed488d3b9ff2c187b8428101894acb712c2effb4128a34869c83d2a40b573c1d(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6e63bb680e976f4f9f54012b24ea3f96127929c8f13006aa9f799ccb471121c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__05320e146a852af7446ab02e6fe55d34be9a2cb36d18a23956b64137f53e0753(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7591fb7127e157b56a8f002492d43580a814106ee630a8c365023185c02bc7fb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2c0fdf085d617f4967939b8e7e09b9b58a49c18a80e7dfc1158d462779118c6e(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b084f4716dcddb3ec95b149075f509e5550ed48f6d9adfff8b728cabab864a8(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__55e35c7602487b783edad04dfc3cd78d462bba60acaaf20efee9743bfc81cd72(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLambdaFunctionRuntime]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a55b28acef52923971e641925dd9d5b6179cd65eb9578333b36b739abae10e31(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff284d4a582a9dcaee087dd9e4bf91f8617ccb48ae9c629ceb18d9d5a9e94c6e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__48e5e082b440fdb2b71cae2f166a665542a14fe90d6e5c466a964d0f5d5a2a71(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__741182676979286772071c1201b2d1a827a7f28da6bc9a6d82f092052a7b183e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLambdaFunctionRuntime]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__45e231423457ec6b0b91b64bd5353264b1092d5075fc30d7fe9286042981aa3d(
    *,
    end_inclusive: typing.Optional[builtins.str] = None,
    start_inclusive: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__103c0ca8cc119013660f4cfd93850b9d9c68bbf471c5c43ed9f86545ecf7367a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__60e80b315e7d2507ed1f461ad2a0dc41a5ce08b615726138e869e3c9275fb19f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__68ed271d22a25cd284e0360606f0539f3f248259babab89c6cb2626427cf2499(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b254b6e45eba61b216bf155dce5fe1fdf74ac5b37e8323fc04133dde169f77c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1e738455f8c14ab113221be2251b257adc5ea15fe6b6637d4ab655f741b07941(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__999d769c39604dc554d2b528e29ea01249a0a7c123f789a22850bf804e04aa3f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaLastObservedAt]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__374db02117a281af0cdd71df55632687e858863439581efaa765611afa090c9e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0be99107884aecb3c3798ee8690751f51a1f1804468721b7ea918597651ec4c0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8d8c983910308a8a77b507b16056de9686350edfbf0988036932bafa390111f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c3956035f3e356444e308e53aaabf6bd884c6a76ff27399f7428b81578b2b66(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaLastObservedAt]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8eb12db2347fcc860fc6a1961df52891b45788ccf9163b60f790368cf688c216(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1117389e0b1803bfb765e28a32907583c336e5c994644d5faaaef67bae08e9f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__793a74ef479a178250c8a0b495a1b9a6af123e0faeb9627c16135b87d768e2aa(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__28b70afe087587078445ed732de290fe66164ea545652c059152e17ab793825f(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d082e706ee98206a407095fc7f04b68c00138b9eaa1adcb1cb491964a75a359(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__734bc9bd8615e7be704ce5b135979b34f75779c5ff198480beb91ded6c9155d4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteria]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__acfba0f3037c61903014dbfd77f2d2ab0405369ca90a0aadb5da7a3f1b1960e6(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__35aa39fb6c87a26c7a16ff236de91c2a788edcdb3aa25f52b87ab645becc719b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__afd451ae64d56f17dc804bf8a7a9f0d575c198047b8862f9a827f7ab2f2338a3(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e5a551046517dacbe332070f1e54ca6ac6eb01e54d1eccad86ce09187560a031(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__57d1050a534c693484782f23fb3cad6ad3ef23f1c25ed596ad9490e7d9f5ea09(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6bb6e0470aa50f42cddab5ca73097e2bff532282b573be1715e5ab6dac1efdf6(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4fc585c1a76fdbc7bd1360d19439f8967840d5855ad8a77c1245bb06b68c3fc4(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaNetworkProtocol]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad3a066b619da6c163bb533c00e682969e5a379ca57244e6c7d9c8b8cc87e518(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__461d76ad776b241cac3fb0b0191699c6e9a956e8457bf35a3f4eb63d557fde77(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a4ad41b8758790b556520c3bc4ee14328d2d6e0c51ba3168791c9609a610a588(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__03a958b3e1c69a72ae35502a8a7581c499bad8a2b0984bb7d8d0b299389026de(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaNetworkProtocol]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2ccfcb9cf42ef716a75241aa71e4b66d5e375c35d9b765806623261f5e9a72a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6809cd9c1587b4deddaf10c51d31d599aa55a04bb6164196b81e79e4794b56b6(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaAwsAccountId, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aad8322d0266f452c252a3dc58192c6fd29321efeb1d99b621ea6a7088c46533(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeRepositoryProjectName, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6218852e8fc49af6f6a152a2d2e45621b6b041442750c3a9b9e544e502d09832(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeRepositoryProviderType, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fc4df2bd1f6f77da638329b7fd6ddfa80f7f1167df151bbc7641dcf7f1afab1(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorName, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96ab6d5979b95bf0f950a699aac7d53768c894516f1bb9f7875d330a8bb6a7d3(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityDetectorTags, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a11ec778a7f5f88a0443f6af65ccba01b69ddeb917786e5f959755c33847f418(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaCodeVulnerabilityFilePath, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6aeb1147dfa88ef4faea4a067fd7c5ba70b0f59d6fdb92abb8b8c1f57c676ae(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaComponentId, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a5f2d1ffd6c89e072f87b4082ce8a0e486e40c6f48a0701d2e902f9f1713c099(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaComponentType, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dcefbeb1895455f6e6e06a7b28d8cfe98b4158191e95643e030d17162e7f4771(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceImageId, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5dd8bda4d1e436c988f65a4dc2b7559621cff82458abd45350c8597fa7d22ae0(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceSubnetId, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bea54ed9e157e1c8b5dceddc6bb8f51f8e4969bd6e3c56db8461e034949a5ca0(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEc2InstanceVpcId, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__438ed3a8723d725059b1094f15cd2afe3b59db87488a83fc4e905f18704cfdd2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageArchitecture, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c333a38eff1b425dff8a5877bc963bef1cb8201b31be13606d8819fee4a06f9b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageHash, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__662c73a01fbb067602e5f1cb9e218b10db2f2f21a5479e505d15296e5e588555(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageInUseCount, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__96c7032868773821a279c5938ea895e8a6cd7a9c328d77e1cc5d8f8c4e8cc754(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageLastInUseAt, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__110865f4f38c186e44206efba992d03e9c8264b1668afdd37f5a8fcbbab8735c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImagePushedAt, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e10ec5272834131b85a7de29d7668cef0dce9a3287519eec04c0b36ccade6195(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageRegistry, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__83c0179f6ca18840888c8474bf103fc8f62ca8d7734509c7f1c86a870eb36e89(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageRepositoryName, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__16b1aedcbd8b62ddb24aa70f1973aca9ba0ebbaccb8a36865b6de61c62cfd01e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEcrImageTags, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__40cb785add6dbf14d963c90c26f70301dda1c4cb574c2bcb7f07e050ad4d0bfe(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaEpssScore, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b1d86a23b41d3f1082003b61c6de56f60f9afd777d114947da1f8542c240851e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaExploitAvailable, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__198ee2a86e058050c6c6cc3fd34d2a401c583c4373bc2894c7ddcf45dbf97c2e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingArn, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b5fabce57f06070ed99b47c0033a79c3d97ec75c29d5b172467accdb8765fac(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingStatus, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b930690537cf151ee76db23c38468e14e1929b46e076a6ce686e09501d2055b3(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFindingType, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__88bc33768378f75098fd5b3fd7392bd5807a013376ca36e2efeeed8b738dc90c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFirstObservedAt, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a94192c960ffdcd3964610050ffd8f62c82ccfbfea3d47fe9ae8aed11a88c71(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaFixAvailable, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__398f7020cdcfa8110d3ed4665bcb8dbad092598b858f28c7ef399fa37cfcf50c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaInspectorScore, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ae15c80f8fb266254b363d3351338d982d4e043824b785cc6c2e7246b51a318b(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionExecutionRoleArn, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fe80178d721bc8a02ed263023ff0c37271b15a03c5fb58d415e2cb338cfee5d2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionLastModifiedAt, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12c4878258102bbb880c2589981684796ced9a84872e8d322093f48a1016d6b0(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionLayers, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e350f876846475bef9723cfebfdf28125764a547d68e5e4303c2ede6749bc2df(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionName, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9556dfadbaace8e437bcf9b5c3ce6fa86ad9453bb962ed00ea394aa9e8c8a200(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLambdaFunctionRuntime, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__da17ccb01a01cb2f8ba7da5de56e9e92d156cc54c20dd97073f321daf2bfc5a8(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaLastObservedAt, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7a4707c80b20f88f06a69906a76628eaedd099ab32ed4168a32ad0afbb3489d8(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaNetworkProtocol, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__370ea21ce87fe637a476ae41cb01385f02e7950a32884d71af44f1496f880229(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaPortRange, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d0a9956083f9ccfcce6d95707d3252d1337addedb6e67893a7ef8cf5e5a15c5c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaRelatedVulnerabilities, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5cd8d05a3207d9dbd17512f837bef5c9bbf803ab405edc1e40bfe67234765ec7(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaResourceId, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__aa37aef0838411da3400dadba8b91248624fcf0ba7cc68dc80f5bc44c69990b0(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaResourceTags, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d89c53f8fb9c69ca51ba38d572c98cd76a2a2f1a82ee15d8b1b05496a414e66f(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaResourceType, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__896281e9fb466403ca62da7a4420a34d4c8bbf4ec51def1de07f176016af4ee1(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaSeverity, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__442213fbe1636c0efb8812b08efd91630ec7456908b8e9b797e1458393e2af1c(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaTitle, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a947b01974530b9f29712747eb684661cf45816467111e35c786054d78ef25e(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaUpdatedAt, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a2185920c353b49637f60b05c55630fc60ec25a6e2593e6c6a94130e1c984012(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVendorSeverity, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3e0fb2060ba7112bc69c982a112d1e38fab8caa521b6b04a2dd3a9586f5c500d(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerabilityId, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4b6930564f16ece05d9419fb78138b22b88916c66e19eabac7ea3dc5a58defa4(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerabilitySource, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__be525aa342faf7d035a430e3f13f15f0bd0c69c30302c1246c2803cb6fd716a2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackages, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8b547f274a2000a468885edbc7a70a3d762b45fb069c4e6794512c6ec88f0fb3(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteria]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b2ea0da29f62f9a272c5ab7c6feebd98e7eb6c57357c3d6417b9d834a26fb975(
    *,
    begin_inclusive: jsii.Number,
    end_inclusive: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c5c4373056e3d369fef30e61592decbf9032559e6ac23c5a47c18656a36a3fe(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69d695e2f7917d2b74d5b341842b37965aff47d0be1acc76c592f765af41f3d3(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e7612aec184a4ab94a81f7967e1d533ec02f1fcbe59c77c74061c8dc6d1e509d(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a359bbc5efe95bb7a8c14f5d3e654b4fc92dbb0b15d8f5149a8f1040f1aa222(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4c349c7603053a533ce846d68de5065b8214532054b9b76026a1c6e3589ae958(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__67fe9177f7a63c1d0b1db82f851de311e0747c6ccdf11608d4b58798fdf7e56f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaPortRange]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fff194c29247ce85dffddc2469acca95b4d5d7bacd1eb65ea8fcc15e5e39c56b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4ec80069c72630fdabd188c4ea4f3c8cc009d4032a23b7748b6bb0e04f4e992(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c19b68a55ece84810ad6adfbb5449a7ed96bb83e2dab8e3f1f8e0760298847b5(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d6613a8478c5ce4284388ee5f7885363d411ebedde8bdd1241963713e93a897(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaPortRange]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32674a053b7b3e1c95ce9bb686b5ba9790d24e83d748c859563da8c251cf941a(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b06c5102e29b734a26ca8d644f681118e49c94947c60de2766f6248582d11d17(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7bd3b6d78c51bc364c5ec179b24cc8b30e4683c179c530bddeca520c58a58dbe(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f8bc2181f1494c244aef644b1e21391603bb36371c5f3147bcde01cc01ebd1c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__932ed394402f396a5a29d1091a817340cf5fc985c47d2ece1bd802caffa62f08(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fed6e93c53a4e69c767992a2910bcc3eef1bc6d42235a5268c97382e0263d8b(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__993bf1545e9300b79a24630a3c5a32b922c60e0b814da95edf8f391b08383a0b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaRelatedVulnerabilities]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a4fcfac5993977148c9c836f123163f62024fd2be74f6c95b4e211357020506(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44d16997198b10cd6963ec5f0e5dfd732628188b51dca52b1439c040890d8be7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17f87bac26ef12663c3122ddaef03209b20baa033ca2b38eb6d81f03fe45bd6f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49d27bc29ae350ca8e8b402237ab871686e2ef621bf64484039b2b79d70a4d13(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaRelatedVulnerabilities]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f212663fbde53528980e7fd9bf575bd2bbd5230174d7183d71deae1376d2dd52(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4fe7e06b55cf2e37a5c721b689df0712e312d112fe883b2f2bd6a6e8f87a5d6c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4df3457b1e3e41eee902d61ba50eb889365e674ae17d931c9cba4fce8a442ed9(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc099dae502aaf21f25ce6e8053c292d0bae04520475387bba8e12afa1c09e5e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1afb225052d57f3b0fb06a3bba1cc44e32411daecdbfa6ffa136c3ddd7a3d779(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb99d9d1e1d64dba53d27114786b615901b6ef108b566dcec715b8db15ea6f86(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81156665c176594a459d99d14210e6deaef0db300685d17597cd6beaed34614e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceId]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__81e1320caf7e7bac8dc73d3cb2cf42a91aa02324456c8a1e7acb28b34593094e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__66bc058468b8c19bf70053bb4eeec372a2cc7a48859b193eb61aebce58009aa6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ae2973b1826f81e7ed57bf453dbcc30c687b8b226fa3351235aea6445539617(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f0d9f4d7ebf31dbf97ff76e2b0ea63147766f566bda61d4baf52d8130a29c0b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceId]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c9ea363897a0eea94e195a712c665cc6d3b135762754f66ec3f46fe2d4a9eddf(
    *,
    comparison: builtins.str,
    key: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c962ee8d4f104a132237c5397da7139e843b2203391f87fcdd8b0ab0c15ec76a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__61811b8824fa4a3473dc13860f5e8782992a65c5e89cff8c4359c2ec1be1afba(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4e0e745da8111bc63cdf23753062061268dd3cb3301869c3c303bc50171e3c8c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__823a4879490f2794b7226ab28b7c9221c49cbfe9e16208b81b8a27be3df9ca28(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__629bcad72bf4b69c202e71f98816fc29778aa18129059d4e32bd5b219720b9e0(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b7f207c7d9af3596b82055fcdb529263677bd029efe83d471a93c829794a2f0(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceTags]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__448dadbf6839c704a918a9a2e638257b2ba7d1febca098a27390ff4e3ef88574(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8ba83aef35fe12ee7c9463360080b83f8cd198abab05044834ddabd75e5e222c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b6bc7b7b277329a6b562efc34dc120cf3bb189b77b99de9b6d37c1d9fa7107f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8cfcadcd10949c1bc10f40b5b5145bdc234a7c7d98098aa36fc2fc2fe75de73c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2f95099255c3d5985e2b5e971d06b8eaa19a160c4d91f146a51cabd5923cda52(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceTags]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b6065fe82dbc58c76435574139be75bcc78ef57fadee8f816aea6e1c326772f4(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eaac3847a0e6c9169daae9584352c6376bc74a10153eb48a99d4ae323a7ddf6e(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f62f14067131ed08a43f6fddd091e2b28e1e875e4c8f19facb9a9b7449fbe13(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb8fe795078e33f8378164fb7ccbe900353fbfd56ed6fa2c96fe0ff8c325a137(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c6b6f1986f04f749b55e5a10a6a586321b40a9ced19c330b6465e15161e2828c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad72e5be47f80e3164a51be002e65c50792fdfc7705d14e6802ce9a51cd303eb(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b8c0e3b50a94697d883d15b1c7f3613cfd9ddf5d9cb326187683aaebffa3583c(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaResourceType]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9d8ce9aa40d73976f09d01155887c94140565405f2d434db61a932030150160c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__84c88f308d91dde0b8789768983f86e9b527a0d6bb2d042ae3e953e7bfebe1f1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__44c7ab20217d1dab06646e619765ca7df4ca5ee2b4944afa4fd9d9811ec4e8bb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9e7e1b2ff79afda12f61b26742115758c570d43947cf79bd60781e5e33ff100(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaResourceType]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__069a2b904d84fd25f09a78c273bb7f20c0711e13d84bab9644623a95ed7868dd(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3541fc8194bf0f84234556bf58e201deffa9c3860500741f2fa22ebf3e4515af(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b254caec562dc35fcc4a0e0cf22afab6c04309c2ad8a153376bbebfe0e15dfe(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4a8383f2b05c4ad1abc03a23e6312bc2990b76300ceb4b1ed72ee749a8a4914c(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9f0de1e4eda417a8d8672790b414275500551fe19e19531b144827959dc2c2ec(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__37885b54cc27416c0f2aef35614147858b5cd32be52d94fe878c50870e00b9ee(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__69b54ed754be93395a77a00ad60198bbae6f3870bc883f998a197f7ec56fd417(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaSeverity]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__366e99a46c55813f9f600e3e52af1655f69f8ecd29f9fde7a7f94f1366daad1c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__243d1ae548c5269a080ff7c7697af0db03f7779d5ed8e60352bdbc6e58272cca(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__316924d62d8f4e4d2bdf56c353f650d874beaf9206500ea4f509c18a79febf4e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e270a408f6f793e4100150a6c3231c6329cbdaeeca966af908b0a8a4b8d287aa(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaSeverity]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8a41587e2b6ec8044f6e9d51c2f05a2791b5116228cf21b215ce7b971934b097(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__bb38e089d0c8420a61056a25689c77f51bb4e075dfc81f5fb3ef1ab3a7dcaed1(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f52668e5d465934369af07c4f67d19a5ef1daa7c5680ed4d3704aebac6032c4(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cb4eea16f22324c5efc57d8c691274867ac83d55cf34418d3026021f3d0cc5bb(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__719ce7029fdbc425bad97993eb9c8f1edb28d27ce4b300e8571dd99d7f52d4a5(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b606f933ae573028f37bcbb6dda1b56b763b7b24d2e40ea7cee8738bc99cefde(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__fc67264b73ce97281843859bbec059889184b5c361c47711c0ff37d715b9d1cd(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaTitle]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__47e05d19bb4e3151939292e9d5c91b9958fe8ad091ed1bd7ffadd82b70761852(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1218055f56a522815fa39bc1ab807dabd4f019ac03585cb6495c9e21bf3d19f8(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__842b195a70431d27abdb7ba55a9b730a13652b1cc0b13de98e571ef31adfa503(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__542352096a8b889fa714404b1eed32654d31157db31b11ffb0f10b2a3ce88568(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaTitle]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eba7b01bc76f9bb3cebb24c42c2f4b2ea1241906bc7ddb1f612c1053e6e0006d(
    *,
    end_inclusive: typing.Optional[builtins.str] = None,
    start_inclusive: typing.Optional[builtins.str] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21ef353b82934af348b457c5ab7b3bdafb5a863e4f354ebb7c23c9069f9a3c1c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5643f3e803b3b31cf46b5f8c264448d97d103a03f1bd0bb355d748600c27d5ae(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__513a762641b169ccd2218462d2dd0aad18cd5a51b3c34348e4243d00de6fd993(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f488810ebfc0efe55adf49f0e312cdf4173378973808209535ac6d7c207eb792(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49a0e659db436d823a5044401b35228bc6701febbd0f3ab16769bed99f93ab11(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5116fdf387516d277fa63f20a5c7cb4674c46429ee00fb0f6a2f65be6e286327(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaUpdatedAt]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72fa2e60b7b4579bc01f45e9313865140e3c9ea43070a110316951050b31f326(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__24b2f77d6323014de93d410c7bc4b5c3261dc64d6877057b87975917ebf93a7f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__17d740b6a9a52393ca0c0baed606f3ba1b1e471e4fccaa5197267aa588bae4a3(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff1dc6f27cefe66fdb2ffd3d0a75644b753f80db008d27490709ab69a74edf2f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaUpdatedAt]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__07f399548e07aeb9999f888cad53a3d44e5bdaac61da4d6af07737244344acfd(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__af320e5f66d6f84a4929091eddb2a318aa00077ca5f6c6542c9ba9d8c220ff29(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f98a79034d108067b17e6b477f2817d149b351e8935933ead9222993ced143e8(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d791559a2512a3681c74f793965d8415c308044c501cfc0da7d9cad902801fc(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8fe0198848cfc43affaa26ec0a9f5d4c96f555ac2eaf8ea1fd657dd12b0f5b0a(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f13e5f3dfc6d67d91d870ecb918fe2f16b27e9de75fe5778b500359912208bca(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21e608c078c77f4f0150fa5bbcc4eacc139fa8d18719ef20e8405d29dfd46c38(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVendorSeverity]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ee61458f85912efbb9902032fcd91a1474ef3aad7382d6c8ef63bccb8ef248f2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1fb38b3e946ee7b600c02deb220778fa2f6e46ec0afe22d157790133adab6131(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__367349929f021a8f163e5bac21791deefa6b70b7fddebe97effd5f74daff7856(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d788f8f0fd9b0e97a713d3079da76e02faad4248e776b40e378e73d1c3dcc3df(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVendorSeverity]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a785c066f2dba5d2389e7256be144168cdb97d1598da2716afcf3e5cc3dbd83(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1a1bc8e93c4c838753e860a901c00d13c019f2ba87f13a133132d3af0d290b4a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__75092b3da09ac502d90c1d1a0812a37fe20dacdfa4de0c2916b2a28395953b7c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d553383e0b722d18d53cd2b97ae520abca455d2a99147e0f0354ee559d8420d2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e630f0375b5b101cd6d131d479c8fef2a1ba6504797e223b3212e61ea444c363(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__00fb390cbe7592d77b8a51179c00ebb3cc01a3c734eea9f04a22a289658206e2(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cc5ca92f0e8afcc7c6c53b50625c99d872149f453123df69e964c631e990d917(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerabilityId]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a266e8eb54796c1eef60d6a1b43edc17a40bc7b75de35de5debc4786afc19039(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__76a32061ebafb162fbe089583434fbbd7bcdc82add09fcdb7ec09cbce30384ca(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__05cdc2bf57852d590454cba7943df6616e0661df30806e176dcd6f26ce55fdd0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff225169a08d5c61fe27db4f1378675400e99d00063db5d0358f08d88dfeef01(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerabilityId]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f4f13f2bae6fca62cb01fab2205c30fcc7a74dc5baffff6fa91e000b8378438d(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2d1c3bf0d7fd0e42b27c7eb1e9bec5b45ab62c0c89200e518cea9461b438d162(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4d6d1f1ceb60e1fa5c1f71ea0bccd728210eb40c15181ef70416909603970aa0(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__790195794dbddc9ed9bc164292344786ad8658886624b03f93476cc93b7ef2c6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__928c80c95830be1e0c9af61a4fbdd27769723fb2acfe680b398ec6337e123bb5(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__593b034df9f01feccb7c01668d7df14397355774157c8620c0a4bcad2eb49e4f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__152b81547acd76093bf238ad255da4cd72ab189a5fd4cbc33a22f68375a1150a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerabilitySource]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__304b26c8cd872e8645330dac6f83fa7bf96c336e8f5c9d68a109c217e389add8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e3c67dfe587c7758a724a69b3cc43c7547225b8159aa9814920b9cbb101aefd2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ecd5db1547d6f85205b2d7523ac94df9b12b5cd1ff5c7fd30d7cafba68447f53(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6d33c284c56db0079a74dddbe6b0671d73fee2dc587f874f32fd685a43c11d80(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerabilitySource]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__58d7a7ab0c55e18864fea08272bf8f5a28a403b2060f7ec7c6f7a5d23aed35b9(
    *,
    architecture: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture, typing.Dict[builtins.str, typing.Any]]]]] = None,
    epoch: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch, typing.Dict[builtins.str, typing.Any]]]]] = None,
    file_path: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath, typing.Dict[builtins.str, typing.Any]]]]] = None,
    name: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesName, typing.Dict[builtins.str, typing.Any]]]]] = None,
    release: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesRelease, typing.Dict[builtins.str, typing.Any]]]]] = None,
    source_lambda_layer_arn: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn, typing.Dict[builtins.str, typing.Any]]]]] = None,
    source_layer_hash: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash, typing.Dict[builtins.str, typing.Any]]]]] = None,
    version: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesVersion, typing.Dict[builtins.str, typing.Any]]]]] = None,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__585e458c895676725bfa6d9d11c0624da0864df91b02f5548e6fca058296efd5(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ff2ff61de2350b8d5bb958648648d7f07fd4ccd92613a544a72d79e5606ff2fa(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6f6771ca97f3ee085696d84b390b66d92ede78f23691fb6ff9381a0d6c1be60b(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7895c584eb92b7c427cb69a6d8617732dc87a1bc1ad08a928731014e3ce9c776(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__eec028883108fad331a093c0a8115059a9e4e7c8372bf2e67daba97fe0eb0266(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c2680f1d7b09350e4a22f4085e5f4d3f92b134e7e951abe7d76eff184828621f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__04708a862e14f840a889494c5f3c484636a068f013b98614611de24f94361cbf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9cccc500acfd7d3e4698a1e71e15f1bf082ca963b54247f43d81c5764011d162(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3a4752ffe52bd321df5a96810a135fe545e49bc59e78b2aca4a7ef63206cd7c1(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e4a63bf8b137756babaddaba62184fcbc5173f21990a0a3d15020834b35565d7(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85c0af70d4d558e6fa868ee53c0e8d21eebbe1164f0e29fe96cae1ede7516e2b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b91237babcd694171e0d3304fb406abf83ee0562bc1d58bb4f140484bd8d1036(
    *,
    lower_inclusive: jsii.Number,
    upper_inclusive: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b12e8529b980255d1217cabb824c16b487bc011661cadd3d8dd9901dabdfa9d5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__21554218daadd5b18b6bf59d68980a71d142410c1129a2c745a703fb3510a9a5(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7c691a53473476fe8e251ca5fdb130e6b7d7d8b63d13f3d513970134935e2cff(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4588ff43cd1dcd4253ceadee8393d7354156a98b66b1543e403e1e5688dc021c(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6dfaf49ea136b40e1590848ef76f7d28a117fd659518e2265b6ec463cfe3983f(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3bf7e6358d016cb75d59da5b28359727cea2b76dd69cb66cc6747edc7c766017(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dd3ca133dd437bd57c2acb53e2472e84614b3162b5f40c782f4b7e6a27c56d2d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c8e599815f4b80069cf0c43afb3472abf11ba97197deea211ec8307b64a785ee(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__887799eb876a00434a3e312b7e16296445656c3b8369285f54a0ffb7551aa104(
    value: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__39b456c66d17007bc5648190c9de8686c7022606f6cc33d99024afa5eef59eed(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesEpoch]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__412fa57d060ea55b5fc6810891eaad2ddd9d603cff93bb5d348b71c0caece9c3(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f1d1f1e79ce69022774939c1433d5131060e05280d44b25c0de86cf6954a04ec(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b102701696d61b45861e0424bb25b436d6aac15a1288f270b23ba5698ea1ca1(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__22a5e2a32bd45c918b2afa79a913bb6dc684da15ee73cb8a28b9de1a1a5661e2(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e19b92771220b419ea61575d41e38809604b315945d9cc7c628310b5d82d0757(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__72684efba8a86643a535ca9baf467c6709596483808593a3c04fb921ed80d1b7(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__a256f7b1ddbee0ed595891d34d126b130cb5504d6a332cfe38a5dfac34ebe3da(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__06aa40f30f8099df7d44f55e5b4f0d51eb8e4879b782742f6d7e30b419e99c7d(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__49662dee9fa95c4848e569c272f34274ffb0974263bc5bf298abddb46a2c6a16(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f0b461cedc03aaf09cee68459f2d4d5674f662ff4bf12442467480adff1f2496(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5aaa99197d92987b444bb5d64348580fdcdc83c261d98937ebbd8622ab4528d6(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesFilePath]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4747ad4bc67bf1a4df8133b448028ba808cf1f2a17bf455946d1078341c13d22(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ffa81b6e11fd320b727f16f62bdce43152f77929314863a4ffc61b17ea24958f(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e2caba5a1ff452bbfb418f32fb8f56e4783ea5b0441ceeee805db8aeed36ec3f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f4c421287552e426a68b383d7e4c03830fd823ef2e9aa4e0d04a7df46146fbd(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c7ede31c60f7f7df86c465a38d8d06569ff295c60ec83495d873201455e1d7a4(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__188ae8f34eeeb79bd92160b07172bb31fe3c52a2a9b42e4b08d83edac0737050(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackages]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ab719a3dc65dc1f651e590d2202f3b6efa85cd8e09be298b15099bb402e97c48(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8379ba07caae21d22cc072d2a6ed723f6730e3e85e91c06d44573a4a0f013dc5(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6e3080c8441b96dce3a7c36ae06994c5e18d793de09061cc86325f5f29be67ad(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__badb636bd455a05de41290df7e63f6b2a58b759f0e796fb802baa323e7d62ae0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32336898678caa3e6b8f91f8f004dc6e647b0352cadeb4cc6e704ce7d30bb7af(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0151e07c5d83114bd1bf5c47b4c7734bf85e13d4ab5c2898984ae14c22563fbd(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f33953bdc7a2343c3582c0b45b3b2a37bc9cb125e451df00ae4ce82e22a65249(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesName]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b12ce4a3c24e24ca4c52cf5eebd634e7eb177e0d80f80b8ac43527e83a77a379(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f5c61fa099c46518a234e71ba8bd7fd53d18484d08e671ab0fd99f90577b197e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__32c04c02d170cd91f9a865c5aaa072cbcdcf64c09289a0eb5bab08314cdcef2e(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__12782510d2666573556b062defea328eec2480389f4c62f534aaf10ca520b78a(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesName]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59618f282ae5dfa431c37552ee9f3095245f6714f963ef97e316849d01405ae8(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ba618c789aae72b2c7b1c9214fece9e311dda417bc76ddd0fce175ee967ca9f1(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesArchitecture, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d6e15310c9390b30f5446f60162c9cae8e8d75d92704fe2e369b63d8dd9d2e08(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesEpoch, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__0b000fb0f42b994d97d36792597bf78e2fe51b644fb3f7750f19a38e796b9931(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesFilePath, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__85577c89308706e39b7f63b5271dd6d48bce32e940113d15a887a9d5401ad6fd(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesName, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7e436e88df391f280e55031afcaa307e05d1010c578af81b6ab77ac8c36c21d2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesRelease, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__25672ec68c5a3121e9414ab0181c2f6dc773a58f74c5ac026db98fe405329e48(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d9c51c9d5a05273f5b2065636fb3418d393d2bf6ec1d3044a333fe35ce819ee2(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__11539f43ed726c5f3c2c75ea8bab8d22a9330fdf96690ed181fa5c2c5dceccf0(
    value: typing.Union[_cdktf_9a9027ec.IResolvable, typing.Sequence[typing.Union[Inspector2FilterFilterCriteriaVulnerablePackagesVersion, typing.Dict[builtins.str, typing.Any]]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__736735ca241503f20d781040ea1b55fb0625ce8baec67e5c3b7e80f4974ebd65(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackages]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c20a078d390ff5218ae49a6eb0d023f606f590565e0f90254f52edb6ddd765e7(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__8257a280e574ddac1b2719bd9b1b92a20f68878000caa5e33ea7807a862976e7(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__7ea839a728beb9e3df3d9b13fd4387ad225f4b9c4c5f80552553d9e8c6caa650(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f0c1e609b60d9cbcd3be2f5a765f21c3e0ca52aa22274c73b0d8c2961e07efb6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f7c04e2173ea204c4d92b240d73ade747967a7511533a5c6bbb16c4a9465341b(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__01c30e6cd375fc0ada027284f7f18bc180bbb3cf423790a944dd51093067b129(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5b2f51293e83df53811593440f9c70acccb7d5b6268fc8ec758906adfecbf1c9(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesRelease]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9b627090fd95e26c643cb9c19b3a60761e348045ef07caaa385cba0465786d46(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cf613c57fd251af0124e1dac27693783955089534672ba50e28c758a3bf4f07f(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__397fe77a78634c66551e2d6bab326d63fd657ae929954fab46c6c28f3ad4729a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad45d13fd53dfad0a64d6ea69db50f4aaf824f99ea7846433743ef6f0fcdf7bf(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesRelease]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b947e50169caead10e23f4ba48e070f86afd94c388bade0c262e915a2c83261c(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__14ab42cc9bb805ef063dbbc9aa96f228d3db55e4c680dd91be710a134d25a67b(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3beea9af5aa143f8da7292d377d505a85870191986decdfe17624d4b5cf704b1(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__59988536bc30b8b3def44d02138fa06096d038ad903d2f6614fdb04bc98c44c4(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__220693b9a91ea38a70a5120f884aa8d8a8394fffe3dfd0bd287b49559c7514ec(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__018e853d10ed95dbe4e9c5ccba21f57fd69eb187f0f3273abeaf75d37e1e3955(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2002de6d32768dca92d0b2049d3e3a74ef288471171589f3e78e939b74146f2b(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2a6e59413110322f19a43e6bb88de2c2f27ce802611d5b3f46cd83a276183f7a(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__3c70be6fdf3cc1f56936fe41edc017e0fa2179c8cf62e320550453d24b7b55c6(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__2b9b19ca1f7654ed9576f262f5a5dda05d403e5128d3031b659b8f9e4b0d11ff(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__cd53dbbefcf3daa329d02050e25dd5653923e67f9251e0f237d2c1352c14781f(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesSourceLambdaLayerArn]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__93b286d86a5bebfb6b5765ae7e6269e22c3560d2c2731ae6ca62536cefbe52e6(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__049d0ca7345e4c4a2bf218aba6ac1f34e39557d5fb969e472c3d8441a1f88bb2(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__483da1ed8943d9bca14904a1819524321ea39c0e9a9cb82b8bb560131a0547cd(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1b72df815409fd3651e4ffcfecfefcb7b388dfd390ed044d787ec3baab8303b0(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__f21f6a355eb3fe8312d305b8822bcab64e4cebeff74e0bfb58d5eaf30a0d48d0(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b608ae7c7e8be4396c3bd39e8f266579468df42bb44bd68665d765f5a3430ff3(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__e62be033c0c040a1c50c1d32af3106c8c7b6dab8b947b4a4dd6e1dec73058b9e(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d093ebe1b714ec91f9802d1219a27f334e2b9ed29c0d612f04aff0a295228f30(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__6ff6386090727e5558efe47403e5079865f0b706e0d078960464509465eb8d72(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__dc2fd7bb0566b137dd27b262eb4490a29993a298bdb103c497a5b449ceea3e90(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__9ac6269fa4c2071c7955ef92442a7eb3647c90214d9b47fc17cf8290e8b51b11(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesSourceLayerHash]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__b2be4f0cba5bed9692f3ac87df79d09391ec157f015bb4b6e378ebbafd766ac3(
    *,
    comparison: builtins.str,
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c65c344ed4676b980e2dd079cd5bed959928603680b0ec9e18677190bb77263c(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    wraps_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__ad6cac05916308ca93699b4590a67de820e0159ae903535d1195f353cd6ce37c(
    index: jsii.Number,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__4fe57db095ad1575541fa043add9be7a994c95313f58dc046e1cabc48761403a(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__de6e186cc4edad2b299b490773321fce9ab90f6e1e8548d2e887869652a45920(
    value: _cdktf_9a9027ec.IInterpolatingParent,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1fcff6e68a20903d7d44e6be1beacbc4456ebbe9a44a7a27140070163b8597de(
    value: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__240f022ae9d1428aaee18c711dd3b971010428b991312e33344567bcc3333807(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, typing.List[Inspector2FilterFilterCriteriaVulnerablePackagesVersion]]],
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__d2ba4d18c3471bdc360f6b877b77f60848352a9e9c0533d3ed492b3889a9d5fe(
    terraform_resource: _cdktf_9a9027ec.IInterpolatingParent,
    terraform_attribute: builtins.str,
    complex_object_index: jsii.Number,
    complex_object_is_from_set: builtins.bool,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__5f8c71595d4d51ff000e2bf1ecbd20212d033c005738452c25461d752151b008(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__c3fe7afefc1d178699c2274e7331c52ab56a37b62e8b699ae349fb6c26d68060(
    value: builtins.str,
) -> None:
    """Type checking stubs"""
    pass

def _typecheckingstub__1d3a7c1802b52afad1d9417d9402ca00acdcaff6b27c46f62b7640dd4bb7d7de(
    value: typing.Optional[typing.Union[_cdktf_9a9027ec.IResolvable, Inspector2FilterFilterCriteriaVulnerablePackagesVersion]],
) -> None:
    """Type checking stubs"""
    pass
