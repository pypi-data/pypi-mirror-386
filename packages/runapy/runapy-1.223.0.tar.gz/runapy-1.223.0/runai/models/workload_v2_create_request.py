# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBytes, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from runai.models.workload_v2_metadata_create_params import (
    WorkloadV2MetadataCreateParams,
)
from typing import Optional, Set
from typing_extensions import Self


class WorkloadV2CreateRequest(BaseModel):
    """
    Pydantic class model representing WorkloadV2CreateRequest.

    Parameters:
        ```python
        metadata: WorkloadV2MetadataCreateParams
        manifest: Dict[str, object]
        manifest_base64_encoded: bytearray
        ```
        metadata: See model WorkloadV2MetadataCreateParams for more information.
        manifest: The full Kubernetes manifest for the workload in JSON form. Mutually exclusive with manifestEncodedBase64.
        manifest_base64_encoded: Kubernetes YAML manifest encoded in base 64. Mutually exclusive with manifest.
    Example:
        ```python
        WorkloadV2CreateRequest(
            metadata=runai.models.workload_v2_metadata_create_params.WorkloadV2MetadataCreateParams(
                    name = 'my-workload-name',
                    project_id = '1',
                    priority = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                    category = 'jUR,rZ#UM/?R,Fp^l6$ARj', ),
                        manifest={"apiVersion":"apps/v1","kind":"Deployment","metadata":{"name":"my-app"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"my-app"}},"template":{"metadata":{"labels":{"app":"my-app"}},"spec":{"containers":[{"name":"app","image":"nginx:latest"}]}}}},
                        manifest_base64_encoded='[B@53cdecf6'
        )
        ```
    """  # noqa: E501

    metadata: WorkloadV2MetadataCreateParams
    manifest: Optional[Dict[str, Any]] = Field(
        default=None,
        description="The full Kubernetes manifest for the workload in JSON form. Mutually exclusive with manifestEncodedBase64.",
    )
    manifest_base64_encoded: Optional[Union[StrictBytes, StrictStr]] = Field(
        default=None,
        description="Kubernetes YAML manifest encoded in base 64. Mutually exclusive with manifest.",
        alias="manifestBase64Encoded",
    )
    __properties: ClassVar[List[str]] = [
        "metadata",
        "manifest",
        "manifestBase64Encoded",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadV2CreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict["metadata"] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadV2CreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "metadata": (
                    WorkloadV2MetadataCreateParams.from_dict(obj["metadata"])
                    if obj.get("metadata") is not None
                    else None
                ),
                "manifest": obj.get("manifest"),
                "manifestBase64Encoded": obj.get("manifestBase64Encoded"),
            }
        )
        return _obj
