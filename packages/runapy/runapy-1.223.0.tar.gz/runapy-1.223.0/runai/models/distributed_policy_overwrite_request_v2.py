# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.distributed_policy_defaults_and_rules_v2 import (
    DistributedPolicyDefaultsAndRulesV2,
)
from runai.models.policy_creation_fields import PolicyCreationFields
from typing import Optional, Set
from typing_extensions import Self


class DistributedPolicyOverwriteRequestV2(BaseModel):
    """
    Pydantic class model representing DistributedPolicyOverwriteRequestV2.

    Parameters:
        ```python
        meta: PolicyCreationFields
        policy: Optional[DistributedPolicyDefaultsAndRulesV2]
        ```
        meta: See model PolicyCreationFields for more information.
        policy: See model DistributedPolicyDefaultsAndRulesV2 for more information.
    Example:
        ```python
        DistributedPolicyOverwriteRequestV2(
            meta=runai.models.policy_creation_fields.PolicyCreationFields(
                    scope = 'system',
                    project_id = 1,
                    department_id = '2',
                    cluster_id = '71f69d83-ba66-4822-adf5-55ce55efd210',
                    name = 'my-policy', ),
                        policy=runai.models.distributed_policy_defaults_and_rules_v2.DistributedPolicyDefaultsAndRulesV2(
                    defaults = runai.models.distributed_policy_defaults_v2.DistributedPolicyDefaultsV2(
                        master = runai.models.replica_defaults_v2.ReplicaDefaultsV2(
                            annotations = runai.models.annotations_defaults.AnnotationsDefaults(
                                instances = [
                                    runai.models.annotation.Annotation(
                                        name = 'billing',
                                        value = 'my-billing-unit',
                                        exclude = False, )
                                    ], ),
                            args = '-x my-script.py',
                            auto_deletion_time_after_completion_seconds = 15,
                            backoff_limit = 3,
                            category = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                            command = 'python',
                            compute = runai.models.superset_defaults_all_of_compute.SupersetDefaults_allOf_compute(
                                cpu_core_limit = 2,
                                cpu_core_request = 0.5,
                                cpu_memory_limit = '30M',
                                cpu_memory_request = '20M',
                                extended_resources = runai.models.extended_resources_defaults.ExtendedResourcesDefaults(
                                    attributes = runai.models.extended_resource.ExtendedResource(
                                        resource = 'hardware-vendor.example/foo',
                                        quantity = '2',
                                        exclude = False, ),
                                    instances = [
                                        runai.models.extended_resource.ExtendedResource(
                                            resource = 'hardware-vendor.example/foo',
                                            quantity = '2',
                                            exclude = False, )
                                        ], ),
                                gpu_devices_request = 1,
                                gpu_memory_limit = '10M',
                                gpu_memory_request = '10M',
                                gpu_portion_limit = 0.5,
                                gpu_portion_request = 0.5,
                                gpu_request_type = 'portion',
                                large_shm_request = False,
                                mig_profile = null, ),
                            create_home_dir = True,
                            environment_variables = runai.models.environment_variables_defaults.EnvironmentVariablesDefaults(
                                instances = [
                                    runai.models.environment_variable.EnvironmentVariable(
                                        name = 'HOME',
                                        value = '/home/my-folder',
                                        secret = runai.models.environment_variable_secret.EnvironmentVariableSecret(
                                            name = 'postgress_secret',
                                            key = 'POSTGRES_PASSWORD', ),
                                        config_map = runai.models.environment_variable_config_map.EnvironmentVariableConfigMap(
                                            name = 'my-config-map',
                                            key = 'MY_POSTGRES_SCHEMA', ),
                                        pod_field_ref = runai.models.environment_variable_pod_field_reference.EnvironmentVariablePodFieldReference(
                                            path = 'metadata.name', ),
                                        exclude = False,
                                        description = 'Home directory of the user.', )
                                    ], ),
                            exposed_urls = runai.models.exposed_urls_defaults.ExposedUrlsDefaults(
                                instances = [
                                    runai.models.exposed_url.ExposedUrl(
                                        container = 8080,
                                        url = 'https://my-url.com',
                                        authorized_users = ["user-a","user-b"],
                                        authorized_groups = ["group-a","group-b"],
                                        tool_type = 'jupyter',
                                        tool_name = 'my-pytorch',
                                        name = 'url-instance-a',
                                        exclude = False, )
                                    ], ),
                            image = 'python:3.8',
                            image_pull_policy = 'Always',
                            image_pull_secrets = runai.models.image_pull_secrets_defaults.ImagePullSecretsDefaults(),
                            labels = runai.models.labels_defaults.LabelsDefaults(),
                            node_affinity_required = runai.models.node_affinity_required.NodeAffinityRequired(
                                node_selector_terms = [
                                    runai.models.node_selector_term.NodeSelectorTerm(
                                        match_expressions = [
                                            runai.models.match_expression.MatchExpression(
                                                key = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                                                operator = 'In',
                                                values = [
                                                    'jUR,rZ#UM/?R,Fp^l6$ARj'
                                                    ], )
                                            ], )
                                    ], ),
                            node_pools = ["my-node-pool-a","my-node-pool-b"],
                            node_type = 'my-node-type',
                            pod_affinity = runai.models.pod_affinity.PodAffinity(
                                type = 'Required',
                                key = 'jUR,rZ#UM/?R,Fp^l6$ARj', ),
                            ports = runai.models.ports_defaults.PortsDefaults(),
                            priority_class = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                            probes = runai.models.probes.Probes(
                                readiness = runai.models.probe.Probe(
                                    initial_delay_seconds = 0,
                                    period_seconds = 1,
                                    timeout_seconds = 1,
                                    success_threshold = 1,
                                    failure_threshold = 1,
                                    handler = runai.models.probe_handler.ProbeHandler(
                                        http_get = runai.models.probe_handler_http_get.ProbeHandler_httpGet(
                                            path = '/',
                                            port = 1,
                                            host = 'example.com',
                                            scheme = 'HTTP', ), ), ), ),
                            related_urls = runai.models.related_urls_defaults.RelatedUrlsDefaults(),
                            restart_policy = 'Always',
                            security = runai.models.superset_spec_all_of_security.SupersetSpec_allOf_security(
                                allow_privilege_escalation = False,
                                capabilities = ["CHOWN","KILL"],
                                host_ipc = False,
                                host_network = False,
                                read_only_root_filesystem = False,
                                run_as_gid = 30,
                                run_as_non_root = True,
                                run_as_uid = 500,
                                seccomp_profile_type = 'RuntimeDefault',
                                supplemental_groups = '2,3,5,8',
                                uid_gid_source = 'fromTheImage', ),
                            stdin = True,
                            storage = runai.models.superset_defaults_all_of_storage.SupersetDefaults_allOf_storage(
                                config_map_volume = runai.models.config_maps_defaults.ConfigMapsDefaults(),
                                data_volume = runai.models.data_volumes_defaults.DataVolumesDefaults(),
                                empty_dir_volume = runai.models.empty_dirs_defaults.EmptyDirsDefaults(),
                                git = runai.models.gits_defaults.GitsDefaults(),
                                host_path = runai.models.host_paths_defaults.HostPathsDefaults(),
                                nfs = runai.models.nfss_defaults.NfssDefaults(),
                                pvc = runai.models.pvcs_defaults.PvcsDefaults(),
                                s3 = runai.models.s3s_defaults.S3sDefaults(),
                                secret_volume = runai.models.secrets_defaults.SecretsDefaults(), ),
                            terminate_after_preemption = False,
                            termination_grace_period_seconds = 20,
                            tolerations = runai.models.tolerations_defaults.TolerationsDefaults(),
                            tty = True,
                            working_dir = '/home/myfolder', ),
                        worker = runai.models.distributed_policy_defaults_v2_worker.DistributedPolicyDefaultsV2_worker(), ),
                    rules = runai.models.distributed_policy_rules_v2.DistributedPolicyRulesV2(),
                    imposed_assets = runai.models.distributed_imposed_assets.DistributedImposedAssets(),
                    status = runai.models.policy_validation_status.PolicyValidationStatus(
                        validation = runai.models.policy_validation_status_validation.PolicyValidationStatus_validation(
                            error_message = 'jUR,rZ#UM/?R,Fp^l6$ARj', ), ), )
        )
        ```
    """  # noqa: E501

    meta: Optional[PolicyCreationFields] = None
    policy: Optional[DistributedPolicyDefaultsAndRulesV2] = None
    __properties: ClassVar[List[str]] = ["meta", "policy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DistributedPolicyOverwriteRequestV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of meta
        if self.meta:
            _dict["meta"] = self.meta.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy:
            _dict["policy"] = self.policy.to_dict()
        # set to None if policy (nullable) is None
        # and model_fields_set contains the field
        if self.policy is None and "policy" in self.model_fields_set:
            _dict["policy"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DistributedPolicyOverwriteRequestV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "meta": (
                    PolicyCreationFields.from_dict(obj["meta"])
                    if obj.get("meta") is not None
                    else None
                ),
                "policy": (
                    DistributedPolicyDefaultsAndRulesV2.from_dict(obj["policy"])
                    if obj.get("policy") is not None
                    else None
                ),
            }
        )
        return _obj
