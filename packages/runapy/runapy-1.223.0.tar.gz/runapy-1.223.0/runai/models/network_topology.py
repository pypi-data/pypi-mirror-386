# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class NetworkTopology(BaseModel):
    """
    Pydantic class model representing NetworkTopology.

    Parameters:
        ```python
        levels: List[str]
        name: str
        cluster_id: str
        id: str
        tenant_id: int
        created_at: datetime
        created_by: str
        phase: str
        source: str
        ```
        levels: Ordered array of network topology levels
        name: Name of the network topology
        cluster_id: The id of the cluster.
        id: The unique identifier for the network topology
        tenant_id: The id of the tenant.
        created_at: The timestamp for when the network topology was created
        created_by: Identifier of the user who created the network topology
        phase: Phase of the network topology in the cluster. Enum: Creating, Ready
        source: Identifier of the the source of the topology. Useful for tracking where the topology data originated (i.e. Run:ai, Cluster).
    Example:
        ```python
        NetworkTopology(
            levels=[cloud.provider.com/topology-block, cloud.provider.com/topology-rack, kubernetes.io/hostname],
                        name='default-topology',
                        cluster_id='71f69d83-ba66-4822-adf5-55ce55efd210',
                        id='123e4567-e89b-12d3-a456-426614174000',
                        tenant_id=1001,
                        created_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                        created_by='user@lab.com',
                        phase='Ready',
                        source='Run.ai'
        )
        ```
    """  # noqa: E501

    levels: List[Annotated[str, Field(min_length=1, strict=True, max_length=63)]] = (
        Field(description="Ordered array of network topology levels")
    )
    name: Annotated[str, Field(min_length=1, strict=True, max_length=63)] = Field(
        description="Name of the network topology"
    )
    cluster_id: StrictStr = Field(
        description="The id of the cluster.", alias="clusterId"
    )
    id: StrictStr = Field(description="The unique identifier for the network topology")
    tenant_id: StrictInt = Field(description="The id of the tenant.", alias="tenantId")
    created_at: datetime = Field(
        description="The timestamp for when the network topology was created",
        alias="createdAt",
    )
    created_by: Optional[StrictStr] = Field(
        default=None,
        description="Identifier of the user who created the network topology",
        alias="createdBy",
    )
    phase: Optional[StrictStr] = Field(
        default=None,
        description="Phase of the network topology in the cluster. Enum: Creating, Ready",
    )
    source: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=63)]
    ] = Field(
        default=None,
        description="Identifier of the the source of the topology. Useful for tracking where the topology data originated (i.e. Run:ai, Cluster).",
    )
    __properties: ClassVar[List[str]] = [
        "levels",
        "name",
        "clusterId",
        "id",
        "tenantId",
        "createdAt",
        "createdBy",
        "phase",
        "source",
    ]

    @field_validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z]([a-z0-9-]*[a-z0-9])?$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z]([a-z0-9-]*[a-z0-9])?$/"
            )
        return value

    @field_validator("source")
    def source_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9][a-zA-Z0-9_.-]*[a-zA-Z0-9]$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-zA-Z0-9][a-zA-Z0-9_.-]*[a-zA-Z0-9]$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkTopology from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkTopology from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "levels": obj.get("levels"),
                "name": obj.get("name"),
                "clusterId": obj.get("clusterId"),
                "id": obj.get("id"),
                "tenantId": obj.get("tenantId"),
                "createdAt": obj.get("createdAt"),
                "createdBy": obj.get("createdBy"),
                "phase": obj.get("phase"),
                "source": obj.get("source"),
            }
        )
        return _obj
