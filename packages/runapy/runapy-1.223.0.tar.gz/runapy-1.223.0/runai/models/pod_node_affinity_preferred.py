# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.pod_preferred_node_selector_term import PodPreferredNodeSelectorTerm
from typing import Optional, Set
from typing_extensions import Self


class PodNodeAffinityPreferred(BaseModel):
    """
    Pydantic class model representing The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred..

    Parameters:
        ```python
        node_selector_terms: List[PodPreferredNodeSelectorTerm]
        ```
        node_selector_terms: A list of node selector terms.
    Example:
        ```python
        PodNodeAffinityPreferred(
            node_selector_terms=[
                    runai.models.pod_preferred_node_selector_term.PodPreferredNodeSelectorTerm(
                        weight = 1.337,
                        preference = runai.models.node_selector_term.NodeSelectorTerm(
                            match_expressions = [
                                runai.models.match_expression.MatchExpression(
                                    key = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                                    operator = 'In',
                                    values = [
                                        'jUR,rZ#UM/?R,Fp^l6$ARj'
                                        ], )
                                ], ), )
                    ]
        )
        ```
    """  # noqa: E501

    node_selector_terms: Optional[List[PodPreferredNodeSelectorTerm]] = Field(
        default=None,
        description="A list of node selector terms.",
        alias="nodeSelectorTerms",
    )
    __properties: ClassVar[List[str]] = ["nodeSelectorTerms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodNodeAffinityPreferred from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in node_selector_terms (list)
        _items = []
        if self.node_selector_terms:
            for _item_node_selector_terms in self.node_selector_terms:
                if _item_node_selector_terms:
                    _items.append(_item_node_selector_terms.to_dict())
            _dict["nodeSelectorTerms"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodNodeAffinityPreferred from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "nodeSelectorTerms": (
                    [
                        PodPreferredNodeSelectorTerm.from_dict(_item)
                        for _item in obj["nodeSelectorTerms"]
                    ]
                    if obj.get("nodeSelectorTerms") is not None
                    else None
                )
            }
        )
        return _obj
