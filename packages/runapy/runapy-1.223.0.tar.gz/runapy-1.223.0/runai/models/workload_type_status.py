# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.condition1 import Condition1
from typing import Optional, Set
from typing_extensions import Self


class WorkloadTypeStatus(BaseModel):
    """
    Pydantic class model representing WorkloadTypeStatus.

    Parameters:
        ```python
        phase: str
        conditions: List[Condition1]
        version: str
        cluster_id: str
        updated_at: datetime
        ```
        phase: The current phase of the workload type in the cluster.
        conditions: See model List[Condition1] for more information.
        version: The version of the resource definition&#39;s Kubernetes CRD.
        cluster_id: The id of the cluster.
        updated_at: The date and time when the workload type status of this cluster was last updated.
    Example:
        ```python
        WorkloadTypeStatus(
            phase='Ready',
                        conditions=[
                    runai.models.condition1.Condition1(
                        type = 'Ready',
                        status = 'False',
                        message = 'Resource validation failed: ...',
                        reason = 'ErrorConfig',
                        last_transition_time = '2022-01-01T03:49:52.531Z', )
                    ],
                        version='v1',
                        cluster_id='71f69d83-ba66-4822-adf5-55ce55efd210',
                        updated_at=datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f')
        )
        ```
    """  # noqa: E501

    phase: Optional[StrictStr] = Field(
        default=None,
        description="The current phase of the workload type in the cluster.",
    )
    conditions: Optional[List[Condition1]] = None
    version: Optional[StrictStr] = Field(
        default=None,
        description="The version of the resource definition's Kubernetes CRD.",
    )
    cluster_id: Optional[StrictStr] = Field(
        default=None, description="The id of the cluster.", alias="clusterId"
    )
    updated_at: Optional[datetime] = Field(
        default=None,
        description="The date and time when the workload type status of this cluster was last updated.",
        alias="updatedAt",
    )
    __properties: ClassVar[List[str]] = [
        "phase",
        "conditions",
        "version",
        "clusterId",
        "updatedAt",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadTypeStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in conditions (list)
        _items = []
        if self.conditions:
            for _item_conditions in self.conditions:
                if _item_conditions:
                    _items.append(_item_conditions.to_dict())
            _dict["conditions"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadTypeStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "phase": obj.get("phase"),
                "conditions": (
                    [Condition1.from_dict(_item) for _item in obj["conditions"]]
                    if obj.get("conditions") is not None
                    else None
                ),
                "version": obj.get("version"),
                "clusterId": obj.get("clusterId"),
                "updatedAt": obj.get("updatedAt"),
            }
        )
        return _obj
