# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from runai.models.annotation import Annotation
from runai.models.environment_variable import EnvironmentVariable
from runai.models.image_pull_policy import ImagePullPolicy
from runai.models.image_pull_secret import ImagePullSecret
from runai.models.label import Label
from runai.models.nim_service_serving_port import NimServiceServingPort
from runai.models.nim_service_spec_all_of_compute import NimServiceSpecAllOfCompute
from runai.models.nim_service_spec_all_of_security import NimServiceSpecAllOfSecurity
from runai.models.nim_service_spec_all_of_storage import NimServiceSpecAllOfStorage
from runai.models.probes import Probes
from runai.models.toleration import Toleration
from typing import Optional, Set
from typing_extensions import Self


class NimServiceSpec(BaseModel):
    """
    Pydantic class model representing NimServiceSpec.

    Parameters:
        ```python
        ngc_auth_secret: Optional[str]
        replicas: Optional[int]
        annotations: Optional[List[Annotation]]
        compute: Optional[NimServiceSpecAllOfCompute]
        environment_variables: Optional[List[EnvironmentVariable]]
        image: Optional[str]
        image_pull_policy: Optional[ImagePullPolicy]
        image_pull_secrets: Optional[List[ImagePullSecret]]
        labels: Optional[List[Label]]
        node_pools: Optional[List[str]]
        probes: Optional[Probes]
        security: Optional[NimServiceSpecAllOfSecurity]
        serving_port: Optional[NimServiceServingPort]
        storage: Optional[NimServiceSpecAllOfStorage]
        tolerations: Optional[List[Toleration]]
        ```
        ngc_auth_secret: The name of a Kubernetes secret containing the NGC access credentials. The secret must contain a key named NGC_API_KEY with the API key as the value.
        replicas: The number of replicas to deploy. - Default: 1
        annotations: Set of annotations to populate into the container running the workload.
        compute: See model NimServiceSpecAllOfCompute for more information.
        environment_variables: Set of environment variables to populate into the container running the workload.
        image: Docker image name. For more information, see [Images](https://kubernetes.io/docs/concepts/containers/images). The image name is mandatory for creating a workload.
        image_pull_policy: See model ImagePullPolicy for more information.
        image_pull_secrets: A list of references to Kubernetes secrets in the same namespace used for pulling container images.
        labels: Set of labels to populate into the container running the workload.
        node_pools: A prioritized list of node pools for the scheduler to run the workload on. The scheduler will always try to use the first node pool before moving to the next one if the first is not available.
        probes: See model Probes for more information.
        security: See model NimServiceSpecAllOfSecurity for more information.
        serving_port: See model NimServiceServingPort for more information.
        storage: See model NimServiceSpecAllOfStorage for more information.
        tolerations: Set of tolerations to apply to the workload.
    Example:
        ```python
        NimServiceSpec(
            ngc_auth_secret='w1c2v7s6djuy1zmetozkhdomha1bae37b8ocvx8o53ow2eg7p6qw9qklp6l4y010fogx',
                        replicas=2,
                        annotations=[
                    runai.models.annotation.Annotation(
                        name = 'billing',
                        value = 'my-billing-unit',
                        exclude = False, )
                    ],
                        compute=runai.models.nim_service_spec_all_of_compute.NimServiceSpec_allOf_compute(
                    cpu_core_limit = 2,
                    cpu_core_request = 0.5,
                    cpu_memory_limit = '30M',
                    cpu_memory_request = '20M',
                    gpu_devices_request = 1,
                    gpu_memory_limit = '10M',
                    gpu_memory_request = '10M',
                    gpu_portion_limit = 0.5,
                    gpu_portion_request = 0.5,
                    gpu_request_type = 'portion', ),
                        environment_variables=[
                    runai.models.environment_variable.EnvironmentVariable(
                        name = 'HOME',
                        value = '/home/my-folder',
                        secret = runai.models.environment_variable_secret.EnvironmentVariableSecret(
                            name = 'postgress_secret',
                            key = 'POSTGRES_PASSWORD', ),
                        config_map = runai.models.environment_variable_config_map.EnvironmentVariableConfigMap(
                            name = 'my-config-map',
                            key = 'MY_POSTGRES_SCHEMA', ),
                        pod_field_ref = runai.models.environment_variable_pod_field_reference.EnvironmentVariablePodFieldReference(
                            path = 'metadata.name', ),
                        exclude = False,
                        description = 'Home directory of the user.', )
                    ],
                        image='python:3.8',
                        image_pull_policy='Always',
                        image_pull_secrets=[
                    runai.models.image_pull_secret.ImagePullSecret(
                        name = 'w1c2v7s6djuy1zmetozkhdomha1bae37b8ocvx8o53ow2eg7p6qw9qklp6l4y010fogx',
                        user_credential = True,
                        exclude = False, )
                    ],
                        labels=[
                    runai.models.label.Label(
                        name = 'stage',
                        value = 'initial-research',
                        exclude = False, )
                    ],
                        node_pools=["my-node-pool-a","my-node-pool-b"],
                        probes=runai.models.probes.Probes(
                    readiness = runai.models.probe.Probe(
                        initial_delay_seconds = 0,
                        period_seconds = 1,
                        timeout_seconds = 1,
                        success_threshold = 1,
                        failure_threshold = 1,
                        handler = runai.models.probe_handler.ProbeHandler(
                            http_get = runai.models.probe_handler_http_get.ProbeHandler_httpGet(
                                path = '/',
                                port = 1,
                                host = 'example.com',
                                scheme = 'HTTP', ), ), ), ),
                        security=runai.models.nim_service_spec_all_of_security.NimServiceSpec_allOf_security(
                    run_as_gid = 30,
                    run_as_uid = 500, ),
                        serving_port=runai.models.nim_service_serving_port.NimServiceServingPort(
                    service_type = 'ClusterIP',
                    port = 8000,
                    grpc_port = 8001,
                    metrics_port = 8002,
                    expose_externally = True,
                    exposed_url = 'jUR,rZ#UM/?R,Fp^l6$ARj', ),
                        storage=runai.models.nim_service_spec_all_of_storage.NimServiceSpec_allOf_storage(
                    nim_cache = runai.models.nim_cache.NimCache(
                        name = 'nim-cache-a',
                        profile = 'tensorrt_llm-b200-fp8-tp2-pp1-latency-2901:10de-2', ),
                    pvc = runai.models.nim_service_pvc_fields.NimServicePvcFields(
                        existing_pvc = True,
                        claim_name = 'my-claim',
                        read_only = True,
                        claim_info = runai.models.claim_info.ClaimInfo(
                            size = '1G',
                            storage_class = 'my-storage-class',
                            access_modes = runai.models.pvc_access_modes.PvcAccessModes(
                                read_write_once = True,
                                read_only_many = True,
                                read_write_many = True, ),
                            volume_mode = 'Filesystem',
                            added_attr_values = [
                                runai.models.pvc_added_attr_value.PvcAddedAttrValue(
                                    key = 'dnsname',
                                    value = 'my.dns.com', )
                                ], ), ), ),
                        tolerations=[
                    runai.models.toleration.Toleration(
                        name = 'jUR,rZ#UM/?R,Fp^l6$ARj0',
                        operator = 'Equal',
                        key = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                        value = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                        effect = 'NoSchedule',
                        seconds = 1,
                        exclude = False, )
                    ]
        )
        ```
    """  # noqa: E501

    ngc_auth_secret: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None,
        description="The name of a Kubernetes secret containing the NGC access credentials. The secret must contain a key named NGC_API_KEY with the API key as the value.",
        alias="ngcAuthSecret",
    )
    replicas: Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]] = Field(
        default=1, description="The number of replicas to deploy."
    )
    annotations: Optional[List[Optional[Annotation]]] = Field(
        default=None,
        description="Set of annotations to populate into the container running the workload.",
    )
    compute: Optional[NimServiceSpecAllOfCompute] = None
    environment_variables: Optional[List[Optional[EnvironmentVariable]]] = Field(
        default=None,
        description="Set of environment variables to populate into the container running the workload.",
        alias="environmentVariables",
    )
    image: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="Docker image name. For more information, see [Images](https://kubernetes.io/docs/concepts/containers/images). The image name is mandatory for creating a workload.",
    )
    image_pull_policy: Optional[ImagePullPolicy] = Field(
        default=None, alias="imagePullPolicy"
    )
    image_pull_secrets: Optional[List[Optional[ImagePullSecret]]] = Field(
        default=None,
        description="A list of references to Kubernetes secrets in the same namespace used for pulling container images.",
        alias="imagePullSecrets",
    )
    labels: Optional[List[Optional[Label]]] = Field(
        default=None,
        description="Set of labels to populate into the container running the workload.",
    )
    node_pools: Optional[List[Annotated[str, Field(strict=True)]]] = Field(
        default=None,
        description="A prioritized list of node pools for the scheduler to run the workload on. The scheduler will always try to use the first node pool before moving to the next one if the first is not available.",
        alias="nodePools",
    )
    probes: Optional[Probes] = None
    security: Optional[NimServiceSpecAllOfSecurity] = None
    serving_port: Optional[NimServiceServingPort] = Field(
        default=None, alias="servingPort"
    )
    storage: Optional[NimServiceSpecAllOfStorage] = None
    tolerations: Optional[List[Optional[Toleration]]] = Field(
        default=None, description="Set of tolerations to apply to the workload."
    )
    __properties: ClassVar[List[str]] = [
        "ngcAuthSecret",
        "replicas",
        "annotations",
        "compute",
        "environmentVariables",
        "image",
        "imagePullPolicy",
        "imagePullSecrets",
        "labels",
        "nodePools",
        "probes",
        "security",
        "servingPort",
        "storage",
        "tolerations",
    ]

    @field_validator("ngc_auth_secret")
    def ngc_auth_secret_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9]([a-z0-9-]*[a-z0-9])?$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z0-9]([a-z0-9-]*[a-z0-9])?$/"
            )
        return value

    @field_validator("image")
    def image_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r".*", value):
            raise ValueError(r"must validate the regular expression /.*/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimServiceSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in annotations (list)
        _items = []
        if self.annotations:
            for _item_annotations in self.annotations:
                if _item_annotations:
                    _items.append(_item_annotations.to_dict())
            _dict["annotations"] = _items
        # override the default output from pydantic by calling `to_dict()` of compute
        if self.compute:
            _dict["compute"] = self.compute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in environment_variables (list)
        _items = []
        if self.environment_variables:
            for _item_environment_variables in self.environment_variables:
                if _item_environment_variables:
                    _items.append(_item_environment_variables.to_dict())
            _dict["environmentVariables"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in image_pull_secrets (list)
        _items = []
        if self.image_pull_secrets:
            for _item_image_pull_secrets in self.image_pull_secrets:
                if _item_image_pull_secrets:
                    _items.append(_item_image_pull_secrets.to_dict())
            _dict["imagePullSecrets"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in labels (list)
        _items = []
        if self.labels:
            for _item_labels in self.labels:
                if _item_labels:
                    _items.append(_item_labels.to_dict())
            _dict["labels"] = _items
        # override the default output from pydantic by calling `to_dict()` of probes
        if self.probes:
            _dict["probes"] = self.probes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of security
        if self.security:
            _dict["security"] = self.security.to_dict()
        # override the default output from pydantic by calling `to_dict()` of serving_port
        if self.serving_port:
            _dict["servingPort"] = self.serving_port.to_dict()
        # override the default output from pydantic by calling `to_dict()` of storage
        if self.storage:
            _dict["storage"] = self.storage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tolerations (list)
        _items = []
        if self.tolerations:
            for _item_tolerations in self.tolerations:
                if _item_tolerations:
                    _items.append(_item_tolerations.to_dict())
            _dict["tolerations"] = _items
        # set to None if ngc_auth_secret (nullable) is None
        # and model_fields_set contains the field
        if self.ngc_auth_secret is None and "ngc_auth_secret" in self.model_fields_set:
            _dict["ngcAuthSecret"] = None

        # set to None if replicas (nullable) is None
        # and model_fields_set contains the field
        if self.replicas is None and "replicas" in self.model_fields_set:
            _dict["replicas"] = None

        # set to None if annotations (nullable) is None
        # and model_fields_set contains the field
        if self.annotations is None and "annotations" in self.model_fields_set:
            _dict["annotations"] = None

        # set to None if compute (nullable) is None
        # and model_fields_set contains the field
        if self.compute is None and "compute" in self.model_fields_set:
            _dict["compute"] = None

        # set to None if environment_variables (nullable) is None
        # and model_fields_set contains the field
        if (
            self.environment_variables is None
            and "environment_variables" in self.model_fields_set
        ):
            _dict["environmentVariables"] = None

        # set to None if image (nullable) is None
        # and model_fields_set contains the field
        if self.image is None and "image" in self.model_fields_set:
            _dict["image"] = None

        # set to None if image_pull_policy (nullable) is None
        # and model_fields_set contains the field
        if (
            self.image_pull_policy is None
            and "image_pull_policy" in self.model_fields_set
        ):
            _dict["imagePullPolicy"] = None

        # set to None if image_pull_secrets (nullable) is None
        # and model_fields_set contains the field
        if (
            self.image_pull_secrets is None
            and "image_pull_secrets" in self.model_fields_set
        ):
            _dict["imagePullSecrets"] = None

        # set to None if labels (nullable) is None
        # and model_fields_set contains the field
        if self.labels is None and "labels" in self.model_fields_set:
            _dict["labels"] = None

        # set to None if node_pools (nullable) is None
        # and model_fields_set contains the field
        if self.node_pools is None and "node_pools" in self.model_fields_set:
            _dict["nodePools"] = None

        # set to None if probes (nullable) is None
        # and model_fields_set contains the field
        if self.probes is None and "probes" in self.model_fields_set:
            _dict["probes"] = None

        # set to None if security (nullable) is None
        # and model_fields_set contains the field
        if self.security is None and "security" in self.model_fields_set:
            _dict["security"] = None

        # set to None if serving_port (nullable) is None
        # and model_fields_set contains the field
        if self.serving_port is None and "serving_port" in self.model_fields_set:
            _dict["servingPort"] = None

        # set to None if storage (nullable) is None
        # and model_fields_set contains the field
        if self.storage is None and "storage" in self.model_fields_set:
            _dict["storage"] = None

        # set to None if tolerations (nullable) is None
        # and model_fields_set contains the field
        if self.tolerations is None and "tolerations" in self.model_fields_set:
            _dict["tolerations"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimServiceSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ngcAuthSecret": obj.get("ngcAuthSecret"),
                "replicas": (
                    obj.get("replicas") if obj.get("replicas") is not None else 1
                ),
                "annotations": (
                    [Annotation.from_dict(_item) for _item in obj["annotations"]]
                    if obj.get("annotations") is not None
                    else None
                ),
                "compute": (
                    NimServiceSpecAllOfCompute.from_dict(obj["compute"])
                    if obj.get("compute") is not None
                    else None
                ),
                "environmentVariables": (
                    [
                        EnvironmentVariable.from_dict(_item)
                        for _item in obj["environmentVariables"]
                    ]
                    if obj.get("environmentVariables") is not None
                    else None
                ),
                "image": obj.get("image"),
                "imagePullPolicy": obj.get("imagePullPolicy"),
                "imagePullSecrets": (
                    [
                        ImagePullSecret.from_dict(_item)
                        for _item in obj["imagePullSecrets"]
                    ]
                    if obj.get("imagePullSecrets") is not None
                    else None
                ),
                "labels": (
                    [Label.from_dict(_item) for _item in obj["labels"]]
                    if obj.get("labels") is not None
                    else None
                ),
                "nodePools": obj.get("nodePools"),
                "probes": (
                    Probes.from_dict(obj["probes"])
                    if obj.get("probes") is not None
                    else None
                ),
                "security": (
                    NimServiceSpecAllOfSecurity.from_dict(obj["security"])
                    if obj.get("security") is not None
                    else None
                ),
                "servingPort": (
                    NimServiceServingPort.from_dict(obj["servingPort"])
                    if obj.get("servingPort") is not None
                    else None
                ),
                "storage": (
                    NimServiceSpecAllOfStorage.from_dict(obj["storage"])
                    if obj.get("storage") is not None
                    else None
                ),
                "tolerations": (
                    [Toleration.from_dict(_item) for _item in obj["tolerations"]]
                    if obj.get("tolerations") is not None
                    else None
                ),
            }
        )
        return _obj
