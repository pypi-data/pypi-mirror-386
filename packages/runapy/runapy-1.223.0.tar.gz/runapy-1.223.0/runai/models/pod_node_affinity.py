# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.pod_node_affinity_preferred import PodNodeAffinityPreferred
from runai.models.pod_node_affinity_required import PodNodeAffinityRequired
from typing import Optional, Set
from typing_extensions import Self


class PodNodeAffinity(BaseModel):
    """
    Pydantic class model representing group of node affinity scheduling rules..

    Parameters:
        ```python
        required: Optional[PodNodeAffinityRequired]
        preferred: Optional[PodNodeAffinityPreferred]
        ```
        required: See model PodNodeAffinityRequired for more information.
        preferred: See model PodNodeAffinityPreferred for more information.
    Example:
        ```python
        PodNodeAffinity(
            required=runai.models.pod_node_affinity_required.PodNodeAffinity_required(
                    node_selector_terms = [
                        runai.models.node_selector_term.NodeSelectorTerm(
                            match_expressions = [
                                runai.models.match_expression.MatchExpression(
                                    key = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                                    operator = 'In',
                                    values = [
                                        'jUR,rZ#UM/?R,Fp^l6$ARj'
                                        ], )
                                ], )
                        ], ),
                        preferred=runai.models.pod_node_affinity_preferred.PodNodeAffinity_preferred(
                    node_selector_terms = [
                        runai.models.pod_preferred_node_selector_term.PodPreferredNodeSelectorTerm(
                            weight = 1.337,
                            preference = runai.models.node_selector_term.NodeSelectorTerm(
                                match_expressions = [
                                    runai.models.match_expression.MatchExpression(
                                        key = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                                        operator = 'In',
                                        values = [
                                            'jUR,rZ#UM/?R,Fp^l6$ARj'
                                            ], )
                                    ], ), )
                        ], )
        )
        ```
    """  # noqa: E501

    required: Optional[PodNodeAffinityRequired] = None
    preferred: Optional[PodNodeAffinityPreferred] = None
    __properties: ClassVar[List[str]] = ["required", "preferred"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodNodeAffinity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of required
        if self.required:
            _dict["required"] = self.required.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preferred
        if self.preferred:
            _dict["preferred"] = self.preferred.to_dict()
        # set to None if required (nullable) is None
        # and model_fields_set contains the field
        if self.required is None and "required" in self.model_fields_set:
            _dict["required"] = None

        # set to None if preferred (nullable) is None
        # and model_fields_set contains the field
        if self.preferred is None and "preferred" in self.model_fields_set:
            _dict["preferred"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodNodeAffinity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "required": (
                    PodNodeAffinityRequired.from_dict(obj["required"])
                    if obj.get("required") is not None
                    else None
                ),
                "preferred": (
                    PodNodeAffinityPreferred.from_dict(obj["preferred"])
                    if obj.get("preferred") is not None
                    else None
                ),
            }
        )
        return _obj
