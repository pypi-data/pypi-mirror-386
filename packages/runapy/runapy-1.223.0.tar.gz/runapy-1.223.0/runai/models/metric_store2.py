# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.metric_store_details import MetricStoreDetails
from typing import Optional, Set
from typing_extensions import Self


class MetricStore2(BaseModel):
    """
    Pydantic class model representing MetricStore2.

    Parameters:
        ```python
        tenant_id: int
        datasource_id: str
        metric_store_details: MetricStoreDetails
        ```
        tenant_id: The id of the tenant.
        datasource_id: Id of datasource
        metric_store_details: See model MetricStoreDetails for more information.
    Example:
        ```python
        MetricStore2(
            tenant_id=56,
                        datasource_id='',
                        metric_store_details=runai.models.metric_store_details.MetricStoreDetails(
                    type = 'grafanalabs',
                    read = runai.models.metric_store_endpoint2.MetricStoreEndpoint2(
                        url = 'http://mimir-nginx.mimir-test.svc:80/api/v1/query',
                        auth = runai.models.metric_store_endpoint2_auth.MetricStoreEndpoint2_auth(
                            basic = runai.models.metric_store_endpoint_auth_basic.MetricStoreEndpointAuthBasic(
                                username = '',
                                password = '', ), ),
                        headers = {"X-Scope-OrgID":"abcd"}, ),
                    write = runai.models.metric_store_endpoint2.MetricStoreEndpoint2(
                        url = 'http://mimir-nginx.mimir-test.svc:80/api/v1/query',
                        headers = {"X-Scope-OrgID":"abcd"}, ), )
        )
        ```
    """  # noqa: E501

    tenant_id: StrictInt = Field(description="The id of the tenant.", alias="tenantId")
    datasource_id: Optional[StrictStr] = Field(
        default=None, description="Id of datasource", alias="datasourceId"
    )
    metric_store_details: Optional[MetricStoreDetails] = Field(
        default=None, alias="metricStoreDetails"
    )
    __properties: ClassVar[List[str]] = [
        "tenantId",
        "datasourceId",
        "metricStoreDetails",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricStore2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metric_store_details
        if self.metric_store_details:
            _dict["metricStoreDetails"] = self.metric_store_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricStore2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "tenantId": obj.get("tenantId"),
                "datasourceId": obj.get("datasourceId"),
                "metricStoreDetails": (
                    MetricStoreDetails.from_dict(obj["metricStoreDetails"])
                    if obj.get("metricStoreDetails") is not None
                    else None
                ),
            }
        )
        return _obj
