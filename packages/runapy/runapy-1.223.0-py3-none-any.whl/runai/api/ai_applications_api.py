from typing import Optional, List
from datetime import datetime

from runai import models
from runai.api.runai_api_service import RunaiAPIService, deprecated_message


class AIApplicationsApi(RunaiAPIService):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        self._api_client = api_client

    def get_application(
        self,
        ai_application_id: str,
    ):
        r"""


        ### Description
        Get AI application.

        ### Parameters:
        ```python
        ai_application_id: str
        ```
        ai_application_id: The unique identifier of the application.

        ### Example:
        ```python
        AIApplicationsApi(
            ai_application_id='ai_application_id_example'
        )
        ```
        """

        resource_path = f"/api/v1/ai_applications/{ai_application_id}".replace("_", "-")
        method = "GET"
        return self._api_client.call_api(
            resource_path=resource_path,
            method=method,
        )

    def list_applications(
        self,
        verbosity: Optional[models.ApplicationVerbosity] = None,
        offset: Optional[int] = None,
        limit: Optional[int] = None,
        sort_order: Optional[str] = None,
        sort_by: Optional[str] = None,
        filter_by: Optional[List[str]] = None,
    ):
        r"""


        ### Description
        List AI applications.

        ### Parameters:
        ```python
        verbosity: Optional[models.ApplicationVerbosity]
        offset: Optional[int]
        limit: Optional[int]
        sort_order: Optional[str]
        sort_by: Optional[str]
        filter_by: Optional[List[str]]
        ```
        verbosity: response verbosity level. - Default: brief
        offset: The offset of the first item returned in the collection.
        limit: The maximum number of entries to return. - Default: 50
        sort_order: Sort results in descending or ascending order. - Default: asc
        sort_by: Sort results by a parameter.
        filter_by: Filter results by a parameter. Use the format field-name operator value. Operators are &#x60;&#x3D;&#x3D;&#x60; Equals, &#x60;!&#x3D;&#x60; Not equals, &#x60;&lt;&#x3D;&#x60; Less than or equal, &#x60;&gt;&#x3D;&#x60; Greater than or equal, &#x60;&#x3D;@&#x60; contains, &#x60;!@&#x60; Does not contain, &#x60;&#x3D;^&#x60; Starts with and &#x60;&#x3D;$&#x60; Ends with. Dates are in ISO 8601 timestamp format and available for operators &#x60;&#x3D;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;&lt;&#x3D;&#x60; and &#x60;&gt;&#x3D;&#x60;.

        ### Example:
        ```python
        AIApplicationsApi(
            verbosity=brief,
                        offset=100,
                        limit=50,
                        sort_order=asc,
                        sort_by='sort_by_example',
                        filter_by=['[\"name!=some-name\"]']
        )
        ```
        """

        # Query params:
        query_params = [
            ("verbosity", verbosity),
            ("offset", offset),
            ("limit", limit),
            ("sortOrder", sort_order),
            ("sortBy", sort_by),
            ("filterBy", filter_by),
        ]
        resource_path = f"/api/v1/ai_applications".replace("_", "-")
        method = "GET"
        return self._api_client.call_api(
            resource_path=resource_path, method=method, query_params=query_params
        )
