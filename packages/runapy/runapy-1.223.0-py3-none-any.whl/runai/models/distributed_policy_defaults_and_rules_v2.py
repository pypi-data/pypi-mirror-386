# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.distributed_imposed_assets import DistributedImposedAssets
from runai.models.distributed_policy_defaults_v2 import DistributedPolicyDefaultsV2
from runai.models.distributed_policy_rules_v2 import DistributedPolicyRulesV2
from runai.models.policy_validation_status import PolicyValidationStatus
from typing import Optional, Set
from typing_extensions import Self


class DistributedPolicyDefaultsAndRulesV2(BaseModel):
    """
    Pydantic class model representing DistributedPolicyDefaultsAndRulesV2.

    Parameters:
        ```python
        defaults: Optional[DistributedPolicyDefaultsV2]
        rules: Optional[DistributedPolicyRulesV2]
        imposed_assets: Optional[DistributedImposedAssets]
        status: Optional[PolicyValidationStatus]
        ```
        defaults: See model DistributedPolicyDefaultsV2 for more information.
        rules: See model DistributedPolicyRulesV2 for more information.
        imposed_assets: See model DistributedImposedAssets for more information.
        status: See model PolicyValidationStatus for more information.
    Example:
        ```python
        DistributedPolicyDefaultsAndRulesV2(
            defaults=runai.models.distributed_policy_defaults_v2.DistributedPolicyDefaultsV2(
                    master = runai.models.replica_defaults_v2.ReplicaDefaultsV2(
                        annotations = runai.models.annotations_defaults.AnnotationsDefaults(
                            instances = [
                                runai.models.annotation.Annotation(
                                    name = 'billing',
                                    value = 'my-billing-unit',
                                    exclude = False, )
                                ], ),
                        args = '-x my-script.py',
                        auto_deletion_time_after_completion_seconds = 15,
                        backoff_limit = 3,
                        category = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                        command = 'python',
                        compute = runai.models.superset_defaults_all_of_compute.SupersetDefaults_allOf_compute(
                            cpu_core_limit = 2,
                            cpu_core_request = 0.5,
                            cpu_memory_limit = '30M',
                            cpu_memory_request = '20M',
                            extended_resources = runai.models.extended_resources_defaults.ExtendedResourcesDefaults(
                                attributes = runai.models.extended_resource.ExtendedResource(
                                    resource = 'hardware-vendor.example/foo',
                                    quantity = '2',
                                    exclude = False, ),
                                instances = [
                                    runai.models.extended_resource.ExtendedResource(
                                        resource = 'hardware-vendor.example/foo',
                                        quantity = '2',
                                        exclude = False, )
                                    ], ),
                            gpu_devices_request = 1,
                            gpu_memory_limit = '10M',
                            gpu_memory_request = '10M',
                            gpu_portion_limit = 0.5,
                            gpu_portion_request = 0.5,
                            gpu_request_type = 'portion',
                            large_shm_request = False,
                            mig_profile = null, ),
                        create_home_dir = True,
                        environment_variables = runai.models.environment_variables_defaults.EnvironmentVariablesDefaults(
                            instances = [
                                runai.models.environment_variable.EnvironmentVariable(
                                    name = 'HOME',
                                    value = '/home/my-folder',
                                    secret = runai.models.environment_variable_secret.EnvironmentVariableSecret(
                                        name = 'postgress_secret',
                                        key = 'POSTGRES_PASSWORD', ),
                                    config_map = runai.models.environment_variable_config_map.EnvironmentVariableConfigMap(
                                        name = 'my-config-map',
                                        key = 'MY_POSTGRES_SCHEMA', ),
                                    pod_field_ref = runai.models.environment_variable_pod_field_reference.EnvironmentVariablePodFieldReference(
                                        path = 'metadata.name', ),
                                    exclude = False,
                                    description = 'Home directory of the user.', )
                                ], ),
                        exposed_urls = runai.models.exposed_urls_defaults.ExposedUrlsDefaults(
                            instances = [
                                runai.models.exposed_url.ExposedUrl(
                                    container = 8080,
                                    url = 'https://my-url.com',
                                    authorized_users = ["user-a","user-b"],
                                    authorized_groups = ["group-a","group-b"],
                                    tool_type = 'jupyter',
                                    tool_name = 'my-pytorch',
                                    name = 'url-instance-a',
                                    exclude = False, )
                                ], ),
                        image = 'python:3.8',
                        image_pull_policy = 'Always',
                        image_pull_secrets = runai.models.image_pull_secrets_defaults.ImagePullSecretsDefaults(),
                        labels = runai.models.labels_defaults.LabelsDefaults(),
                        node_affinity_required = runai.models.node_affinity_required.NodeAffinityRequired(
                            node_selector_terms = [
                                runai.models.node_selector_term.NodeSelectorTerm(
                                    match_expressions = [
                                        runai.models.match_expression.MatchExpression(
                                            key = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                                            operator = 'In',
                                            values = [
                                                'jUR,rZ#UM/?R,Fp^l6$ARj'
                                                ], )
                                        ], )
                                ], ),
                        node_pools = ["my-node-pool-a","my-node-pool-b"],
                        node_type = 'my-node-type',
                        pod_affinity = runai.models.pod_affinity.PodAffinity(
                            type = 'Required',
                            key = 'jUR,rZ#UM/?R,Fp^l6$ARj', ),
                        ports = runai.models.ports_defaults.PortsDefaults(),
                        priority_class = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                        probes = runai.models.probes.Probes(
                            readiness = runai.models.probe.Probe(
                                initial_delay_seconds = 0,
                                period_seconds = 1,
                                timeout_seconds = 1,
                                success_threshold = 1,
                                failure_threshold = 1,
                                handler = runai.models.probe_handler.ProbeHandler(
                                    http_get = runai.models.probe_handler_http_get.ProbeHandler_httpGet(
                                        path = '/',
                                        port = 1,
                                        host = 'example.com',
                                        scheme = 'HTTP', ), ), ), ),
                        related_urls = runai.models.related_urls_defaults.RelatedUrlsDefaults(),
                        restart_policy = 'Always',
                        security = runai.models.superset_spec_all_of_security.SupersetSpec_allOf_security(
                            allow_privilege_escalation = False,
                            capabilities = ["CHOWN","KILL"],
                            host_ipc = False,
                            host_network = False,
                            read_only_root_filesystem = False,
                            run_as_gid = 30,
                            run_as_non_root = True,
                            run_as_uid = 500,
                            seccomp_profile_type = 'RuntimeDefault',
                            supplemental_groups = '2,3,5,8',
                            uid_gid_source = 'fromTheImage', ),
                        stdin = True,
                        storage = runai.models.superset_defaults_all_of_storage.SupersetDefaults_allOf_storage(
                            config_map_volume = runai.models.config_maps_defaults.ConfigMapsDefaults(),
                            data_volume = runai.models.data_volumes_defaults.DataVolumesDefaults(),
                            empty_dir_volume = runai.models.empty_dirs_defaults.EmptyDirsDefaults(),
                            git = runai.models.gits_defaults.GitsDefaults(),
                            host_path = runai.models.host_paths_defaults.HostPathsDefaults(),
                            nfs = runai.models.nfss_defaults.NfssDefaults(),
                            pvc = runai.models.pvcs_defaults.PvcsDefaults(),
                            s3 = runai.models.s3s_defaults.S3sDefaults(),
                            secret_volume = runai.models.secrets_defaults.SecretsDefaults(), ),
                        terminate_after_preemption = False,
                        termination_grace_period_seconds = 20,
                        tolerations = runai.models.tolerations_defaults.TolerationsDefaults(),
                        tty = True,
                        working_dir = '/home/myfolder', ),
                    worker = runai.models.distributed_policy_defaults_v2_worker.DistributedPolicyDefaultsV2_worker(), ),
                        rules=runai.models.distributed_policy_rules_v2.DistributedPolicyRulesV2(
                    master = runai.models.replica_rules_v2.ReplicaRulesV2(
                        annotations = runai.models.instances_rules.InstancesRules(
                            instances = runai.models.item_rules.ItemRules(
                                source_of_rule = {"scope":"project","projectId":3},
                                can_add = True,
                                locked = ["HOME","USER"], ), ),
                        args = runai.models.string_rules.StringRules(),
                        auto_deletion_time_after_completion_seconds = runai.models.integer_rules.IntegerRules(
                            required = True,
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56,
                            default_from = runai.models.default_from_rule.DefaultFromRule(
                                field = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                                factor = 1.337, ), ),
                        backoff_limit = runai.models.integer_rules.IntegerRules(
                            required = True,
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        category = runai.models.string_rules.StringRules(),
                        command = runai.models.string_rules.StringRules(),
                        compute = runai.models.superset_rules_all_of_compute.SupersetRules_allOf_compute(
                            cpu_core_limit = runai.models.number_rules.NumberRules(
                                required = True,
                                can_edit = True,
                                min = 1.337,
                                max = 1.337,
                                step = 1.337, ),
                            cpu_core_request = runai.models.number_rules.NumberRules(
                                required = True,
                                can_edit = True,
                                min = 1.337,
                                max = 1.337,
                                step = 1.337, ),
                            cpu_memory_limit = runai.models.quantity_rules.QuantityRules(
                                required = True,
                                can_edit = True,
                                min = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598',
                                max = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598', ),
                            cpu_memory_request = runai.models.quantity_rules.QuantityRules(
                                required = True,
                                can_edit = True,
                                min = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598',
                                max = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598', ),
                            extended_resources = runai.models.extended_resources_rules.ExtendedResourcesRules(
                                attributes = runai.models.extended_resource_rules.ExtendedResourceRules(
                                    quantity = runai.models.string_rules.StringRules(), ), ),
                            gpu_devices_request = ,
                            gpu_memory_limit = ,
                            gpu_memory_request = ,
                            gpu_portion_limit = ,
                            gpu_portion_request = ,
                            gpu_request_type = runai.models.gpu_request_rules.GpuRequestRules(),
                            large_shm_request = runai.models.boolean_rules.BooleanRules(
                                required = True,
                                can_edit = True, ),
                            mig_profile = null, ),
                        create_home_dir = runai.models.boolean_rules.BooleanRules(
                            required = True,
                            can_edit = True, ),
                        environment_variables = runai.models.instances_rules.InstancesRules(),
                        exposed_urls = runai.models.exposed_urls_rules.ExposedUrlsRules(),
                        image = runai.models.string_rules.StringRules(),
                        image_pull_policy = runai.models.image_pull_policy_rules.ImagePullPolicyRules(),
                        image_pull_secrets = runai.models.image_pull_secrets_rules.ImagePullSecretsRules(),
                        labels = ,
                        node_affinity_required = runai.models.arbitrary_rules.ArbitraryRules(
                            required = True,
                            can_edit = True, ),
                        node_pools = runai.models.array_rules.ArrayRules(
                            required = True,
                            options = [
                                {"value":"value","displayed":"A description of the value."}
                                ],
                            can_edit = True, ),
                        node_type = runai.models.string_rules.StringRules(),
                        pod_affinity = runai.models.pod_affinity_rules.PodAffinityRules(
                            type = runai.models.pod_affinity_type_rules.PodAffinityTypeRules(),
                            key = runai.models.string_rules.StringRules(), ),
                        ports = runai.models.ports_rules.PortsRules(),
                        priority_class = runai.models.string_rules.StringRules(),
                        probes = runai.models.probes_rules.ProbesRules(
                            readiness = runai.models.probe_rules.ProbeRules(
                                initial_delay_seconds = ,
                                period_seconds = ,
                                timeout_seconds = ,
                                success_threshold = ,
                                failure_threshold = ,
                                handler = runai.models.probe_handler_rules.ProbeHandlerRules(
                                    http_get = runai.models.probe_handler_rules_http_get.ProbeHandlerRules_httpGet(
                                        path = runai.models.string_rules.StringRules(),
                                        port = ,
                                        host = runai.models.string_rules.StringRules(),
                                        scheme = runai.models.string_rules.StringRules(), ), ), ), ),
                        related_urls = runai.models.related_urls_rules.RelatedUrlsRules(),
                        restart_policy = runai.models.restart_policy_rule.RestartPolicyRule(),
                        security = runai.models.superset_rules_all_of_security.SupersetRules_allOf_security(
                            allow_privilege_escalation = ,
                            capabilities = runai.models.array_rules.ArrayRules(
                                required = True,
                                can_edit = True, ),
                            host_ipc = ,
                            host_network = ,
                            read_only_root_filesystem = ,
                            run_as_gid = runai.models.integer_rules_optional.IntegerRulesOptional(
                                can_edit = True,
                                min = 56,
                                max = 56,
                                step = 56, ),
                            run_as_non_root = ,
                            run_as_uid = runai.models.integer_rules_optional.IntegerRulesOptional(
                                can_edit = True,
                                min = 56,
                                max = 56,
                                step = 56, ),
                            seccomp_profile_type = runai.models.seccomp_profile_type_rules.SeccompProfileTypeRules(),
                            supplemental_groups = runai.models.string_rules.StringRules(),
                            uid_gid_source = runai.models.uid_gid_source_rules.UidGidSourceRules(), ),
                        stdin = ,
                        storage = runai.models.superset_rules_all_of_storage.SupersetRules_allOf_storage(
                            config_map_volume = runai.models.config_maps_rules.ConfigMapsRules(),
                            data_volume = runai.models.data_volumes_rules.DataVolumesRules(),
                            empty_dir_volume = runai.models.empty_dirs_rules.EmptyDirsRules(),
                            git = runai.models.gits_rules.GitsRules(),
                            host_path = runai.models.host_paths_rules.HostPathsRules(),
                            nfs = runai.models.nfss_rules.NfssRules(),
                            pvc = runai.models.pvcs_rules.PvcsRules(),
                            s3 = runai.models.s3s_rules.S3sRules(),
                            secret_volume = runai.models.secrets_rules.SecretsRules(), ),
                        terminate_after_preemption = ,
                        termination_grace_period_seconds = ,
                        tolerations = runai.models.tolerations_rules.TolerationsRules(),
                        tty = ,
                        working_dir = runai.models.string_rules.StringRules(), ),
                    worker = runai.models.distributed_policy_rules_v2_worker.DistributedPolicyRulesV2_worker(), ),
                        imposed_assets=runai.models.distributed_imposed_assets.DistributedImposedAssets(
                    worker = [
                        ''
                        ],
                    master = [
                        ''
                        ], ),
                        status=runai.models.policy_validation_status.PolicyValidationStatus(
                    validation = runai.models.policy_validation_status_validation.PolicyValidationStatus_validation(
                        error_message = 'jUR,rZ#UM/?R,Fp^l6$ARj', ), )
        )
        ```
    """  # noqa: E501

    defaults: Optional[DistributedPolicyDefaultsV2] = None
    rules: Optional[DistributedPolicyRulesV2] = None
    imposed_assets: Optional[DistributedImposedAssets] = Field(
        default=None, alias="imposedAssets"
    )
    status: Optional[PolicyValidationStatus] = None
    __properties: ClassVar[List[str]] = ["defaults", "rules", "imposedAssets", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DistributedPolicyDefaultsAndRulesV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of defaults
        if self.defaults:
            _dict["defaults"] = self.defaults.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rules
        if self.rules:
            _dict["rules"] = self.rules.to_dict()
        # override the default output from pydantic by calling `to_dict()` of imposed_assets
        if self.imposed_assets:
            _dict["imposedAssets"] = self.imposed_assets.to_dict()
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict["status"] = self.status.to_dict()
        # set to None if defaults (nullable) is None
        # and model_fields_set contains the field
        if self.defaults is None and "defaults" in self.model_fields_set:
            _dict["defaults"] = None

        # set to None if rules (nullable) is None
        # and model_fields_set contains the field
        if self.rules is None and "rules" in self.model_fields_set:
            _dict["rules"] = None

        # set to None if imposed_assets (nullable) is None
        # and model_fields_set contains the field
        if self.imposed_assets is None and "imposed_assets" in self.model_fields_set:
            _dict["imposedAssets"] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict["status"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DistributedPolicyDefaultsAndRulesV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "defaults": (
                    DistributedPolicyDefaultsV2.from_dict(obj["defaults"])
                    if obj.get("defaults") is not None
                    else None
                ),
                "rules": (
                    DistributedPolicyRulesV2.from_dict(obj["rules"])
                    if obj.get("rules") is not None
                    else None
                ),
                "imposedAssets": (
                    DistributedImposedAssets.from_dict(obj["imposedAssets"])
                    if obj.get("imposedAssets") is not None
                    else None
                ),
                "status": (
                    PolicyValidationStatus.from_dict(obj["status"])
                    if obj.get("status") is not None
                    else None
                ),
            }
        )
        return _obj
