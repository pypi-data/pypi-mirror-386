# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.non_null_resource import NonNullResource
from runai.models.resource import Resource
from runai.models.resources_memory import ResourcesMemory
from runai.models.resources_node_pool import ResourcesNodePool
from typing import Optional, Set
from typing_extensions import Self


class Resources(BaseModel):
    """
    Pydantic class model representing Resources.

    Parameters:
        ```python
        node_pool: Optional[ResourcesNodePool]
        gpu: NonNullResource
        cpu: Optional[Resource]
        memory: Optional[ResourcesMemory]
        priority: Optional[str]
        ```
        node_pool: See model ResourcesNodePool for more information.
        gpu: See model NonNullResource for more information.
        cpu: See model Resource for more information.
        memory: See model ResourcesMemory for more information.
        priority: See model str for more information.
    Example:
        ```python
        Resources(
            node_pool=runai.models.resources_node_pool.Resources_nodePool(
                    id = '22',
                    name = 'default', ),
                        gpu=runai.models.non_null_resource.NonNullResource(
                    deserved = 1000,
                    limit = 0,
                    over_quota_weight = 2, ),
                        cpu=runai.models.resource.Resource(
                    deserved = 1000,
                    limit = 0,
                    over_quota_weight = 2, ),
                        memory=runai.models.resources_memory.Resources_memory(),
                        priority='Normal'
        )
        ```
    """  # noqa: E501

    node_pool: Optional[ResourcesNodePool] = Field(default=None, alias="nodePool")
    gpu: NonNullResource
    cpu: Optional[Resource] = None
    memory: Optional[ResourcesMemory] = None
    priority: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["nodePool", "gpu", "cpu", "memory", "priority"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resources from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of node_pool
        if self.node_pool:
            _dict["nodePool"] = self.node_pool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gpu
        if self.gpu:
            _dict["gpu"] = self.gpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpu
        if self.cpu:
            _dict["cpu"] = self.cpu.to_dict()
        # override the default output from pydantic by calling `to_dict()` of memory
        if self.memory:
            _dict["memory"] = self.memory.to_dict()
        # set to None if node_pool (nullable) is None
        # and model_fields_set contains the field
        if self.node_pool is None and "node_pool" in self.model_fields_set:
            _dict["nodePool"] = None

        # set to None if cpu (nullable) is None
        # and model_fields_set contains the field
        if self.cpu is None and "cpu" in self.model_fields_set:
            _dict["cpu"] = None

        # set to None if memory (nullable) is None
        # and model_fields_set contains the field
        if self.memory is None and "memory" in self.model_fields_set:
            _dict["memory"] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict["priority"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resources from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "nodePool": (
                    ResourcesNodePool.from_dict(obj["nodePool"])
                    if obj.get("nodePool") is not None
                    else None
                ),
                "gpu": (
                    NonNullResource.from_dict(obj["gpu"])
                    if obj.get("gpu") is not None
                    else None
                ),
                "cpu": (
                    Resource.from_dict(obj["cpu"])
                    if obj.get("cpu") is not None
                    else None
                ),
                "memory": (
                    ResourcesMemory.from_dict(obj["memory"])
                    if obj.get("memory") is not None
                    else None
                ),
                "priority": obj.get("priority"),
            }
        )
        return _obj
