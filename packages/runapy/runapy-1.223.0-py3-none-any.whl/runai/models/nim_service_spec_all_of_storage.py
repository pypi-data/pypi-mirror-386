# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.nim_cache import NimCache
from runai.models.nim_service_pvc_fields import NimServicePvcFields
from typing import Optional, Set
from typing_extensions import Self


class NimServiceSpecAllOfStorage(BaseModel):
    """
    Pydantic class model representing NimServiceSpecAllOfStorage.

    Parameters:
        ```python
        nim_cache: Optional[NimCache]
        pvc: Optional[NimServicePvcFields]
        ```
        nim_cache: See model NimCache for more information.
        pvc: See model NimServicePvcFields for more information.
    Example:
        ```python
        NimServiceSpecAllOfStorage(
            nim_cache=runai.models.nim_cache.NimCache(
                    name = 'nim-cache-a',
                    profile = 'tensorrt_llm-b200-fp8-tp2-pp1-latency-2901:10de-2', ),
                        pvc=runai.models.nim_service_pvc_fields.NimServicePvcFields(
                    existing_pvc = True,
                    claim_name = 'my-claim',
                    read_only = True,
                    claim_info = runai.models.claim_info.ClaimInfo(
                        size = '1G',
                        storage_class = 'my-storage-class',
                        access_modes = runai.models.pvc_access_modes.PvcAccessModes(
                            read_write_once = True,
                            read_only_many = True,
                            read_write_many = True, ),
                        volume_mode = 'Filesystem',
                        added_attr_values = [
                            runai.models.pvc_added_attr_value.PvcAddedAttrValue(
                                key = 'dnsname',
                                value = 'my.dns.com', )
                            ], ), )
        )
        ```
    """  # noqa: E501

    nim_cache: Optional[NimCache] = Field(default=None, alias="nimCache")
    pvc: Optional[NimServicePvcFields] = None
    __properties: ClassVar[List[str]] = ["nimCache", "pvc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NimServiceSpecAllOfStorage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nim_cache
        if self.nim_cache:
            _dict["nimCache"] = self.nim_cache.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pvc
        if self.pvc:
            _dict["pvc"] = self.pvc.to_dict()
        # set to None if nim_cache (nullable) is None
        # and model_fields_set contains the field
        if self.nim_cache is None and "nim_cache" in self.model_fields_set:
            _dict["nimCache"] = None

        # set to None if pvc (nullable) is None
        # and model_fields_set contains the field
        if self.pvc is None and "pvc" in self.model_fields_set:
            _dict["pvc"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NimServiceSpecAllOfStorage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "nimCache": (
                    NimCache.from_dict(obj["nimCache"])
                    if obj.get("nimCache") is not None
                    else None
                ),
                "pvc": (
                    NimServicePvcFields.from_dict(obj["pvc"])
                    if obj.get("pvc") is not None
                    else None
                ),
            }
        )
        return _obj
