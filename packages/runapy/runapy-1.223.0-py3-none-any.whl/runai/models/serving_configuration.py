# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class ServingConfiguration(BaseModel):
    """
    Pydantic class model representing The inference workload serving configuration..

    Parameters:
        ```python
        initialization_timeout_seconds: Optional[int]
        request_timeout_seconds: Optional[int]
        ```
        initialization_timeout_seconds: The maximum time (in seconds) allowed for a workload to initialize and become ready. If the workload does not start within this time, it will be moved to failed state.
        request_timeout_seconds: The maximum time (in seconds) allowed to process an end-user request. If no response is returned within this time, the request will be ignored.Supported from Cluster version 2.22
    Example:
        ```python
        ServingConfiguration(
            initialization_timeout_seconds=1,
                        request_timeout_seconds=1
        )
        ```
    """  # noqa: E501

    initialization_timeout_seconds: Optional[
        Annotated[int, Field(strict=True, ge=1)]
    ] = Field(
        default=None,
        description="The maximum time (in seconds) allowed for a workload to initialize and become ready. If the workload does not start within this time, it will be moved to failed state.",
        alias="initializationTimeoutSeconds",
    )
    request_timeout_seconds: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(
        default=None,
        description="The maximum time (in seconds) allowed to process an end-user request. If no response is returned within this time, the request will be ignored.Supported from Cluster version 2.22",
        alias="requestTimeoutSeconds",
    )
    __properties: ClassVar[List[str]] = [
        "initializationTimeoutSeconds",
        "requestTimeoutSeconds",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServingConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if initialization_timeout_seconds (nullable) is None
        # and model_fields_set contains the field
        if (
            self.initialization_timeout_seconds is None
            and "initialization_timeout_seconds" in self.model_fields_set
        ):
            _dict["initializationTimeoutSeconds"] = None

        # set to None if request_timeout_seconds (nullable) is None
        # and model_fields_set contains the field
        if (
            self.request_timeout_seconds is None
            and "request_timeout_seconds" in self.model_fields_set
        ):
            _dict["requestTimeoutSeconds"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServingConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "initializationTimeoutSeconds": obj.get("initializationTimeoutSeconds"),
                "requestTimeoutSeconds": obj.get("requestTimeoutSeconds"),
            }
        )
        return _obj
