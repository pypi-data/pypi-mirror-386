# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.array_rules import ArrayRules
from runai.models.distributed_inference_leader_worker_rules_v2 import (
    DistributedInferenceLeaderWorkerRulesV2,
)
from runai.models.distributed_inference_restart_policy_rules import (
    DistributedInferenceRestartPolicyRules,
)
from runai.models.distributed_inference_serving_port_rules2 import (
    DistributedInferenceServingPortRules2,
)
from runai.models.distributed_inference_startup_policy_field_rules_startup_policy import (
    DistributedInferenceStartupPolicyFieldRulesStartupPolicy,
)
from runai.models.integer_rules import IntegerRules
from runai.models.string_rules import StringRules
from typing import Optional, Set
from typing_extensions import Self


class DistributedInferenceRulesV2(BaseModel):
    """
    Pydantic class model representing DistributedInferenceRulesV2.

    Parameters:
        ```python
        category: Optional[StringRules]
        node_pools: Optional[ArrayRules]
        priority_class: Optional[StringRules]
        restart_policy: Optional[DistributedInferenceRestartPolicyRules]
        serving_port: Optional[DistributedInferenceServingPortRules2]
        startup_policy: Optional[DistributedInferenceStartupPolicyFieldRulesStartupPolicy]
        workers: Optional[IntegerRules]
        replicas: Optional[IntegerRules]
        leader: Optional[DistributedInferenceLeaderWorkerRulesV2]
        worker: Optional[DistributedInferenceLeaderWorkerRulesV2]
        ```
        category: See model StringRules for more information.
        node_pools: See model ArrayRules for more information.
        priority_class: See model StringRules for more information.
        restart_policy: See model DistributedInferenceRestartPolicyRules for more information.
        serving_port: See model DistributedInferenceServingPortRules2 for more information.
        startup_policy: See model DistributedInferenceStartupPolicyFieldRulesStartupPolicy for more information.
        workers: See model IntegerRules for more information.
        replicas: See model IntegerRules for more information.
        leader: Defines the pod specification for the leader. Must always be provided, regardless of the number of workers.
        worker: Defines the pod specification for the workers. Required only if the number of workers is greater than 0.
    Example:
        ```python
        DistributedInferenceRulesV2(
            category=runai.models.string_rules.StringRules(),
                        node_pools=runai.models.array_rules.ArrayRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    options = [
                        {"value":"value","displayed":"A description of the value."}
                        ],
                    can_edit = True, ),
                        priority_class=runai.models.string_rules.StringRules(),
                        restart_policy=runai.models.distributed_inference_restart_policy_rules.DistributedInferenceRestartPolicyRules(),
                        serving_port=runai.models.distributed_inference_serving_port_rules_2.DistributedInferenceServingPortRules-2(),
                        startup_policy=runai.models.distributed_inference_startup_policy_field_rules_startup_policy.DistributedInferenceStartupPolicyFieldRules_startupPolicy(),
                        workers=runai.models.integer_rules.IntegerRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    can_edit = True,
                    min = 56,
                    max = 56,
                    step = 56,
                    default_from = runai.models.default_from_rule.DefaultFromRule(
                        field = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                        factor = 1.337, ), ),
                        replicas=runai.models.integer_rules.IntegerRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    can_edit = True,
                    min = 56,
                    max = 56,
                    step = 56,
                    default_from = runai.models.default_from_rule.DefaultFromRule(
                        field = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                        factor = 1.337, ), ),
                        leader=runai.models.distributed_inference_leader_worker_rules_v2.DistributedInferenceLeaderWorkerRulesV2(
                    annotations = runai.models.instances_rules.InstancesRules(
                        instances = runai.models.item_rules.ItemRules(
                            source_of_rule = {"scope":"project","projectId":3},
                            can_add = True,
                            locked = ["HOME","USER"], ), ),
                    args = runai.models.string_rules.StringRules(),
                    command = runai.models.string_rules.StringRules(),
                    compute = runai.models.superset_rules_all_of_compute.SupersetRules_allOf_compute(
                        cpu_core_limit = runai.models.number_rules.NumberRules(
                            required = True,
                            can_edit = True,
                            min = 1.337,
                            max = 1.337,
                            step = 1.337,
                            default_from = runai.models.default_from_rule.DefaultFromRule(
                                field = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                                factor = 1.337, ), ),
                        cpu_core_request = runai.models.number_rules.NumberRules(
                            required = True,
                            can_edit = True,
                            min = 1.337,
                            max = 1.337,
                            step = 1.337, ),
                        cpu_memory_limit = runai.models.quantity_rules.QuantityRules(
                            required = True,
                            can_edit = True,
                            min = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598',
                            max = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598', ),
                        cpu_memory_request = runai.models.quantity_rules.QuantityRules(
                            required = True,
                            can_edit = True,
                            min = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598',
                            max = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598', ),
                        extended_resources = runai.models.extended_resources_rules.ExtendedResourcesRules(
                            attributes = runai.models.extended_resource_rules.ExtendedResourceRules(
                                quantity = runai.models.string_rules.StringRules(), ), ),
                        gpu_devices_request = runai.models.integer_rules.IntegerRules(
                            required = True,
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        gpu_memory_limit = ,
                        gpu_memory_request = ,
                        gpu_portion_limit = ,
                        gpu_portion_request = ,
                        gpu_request_type = runai.models.gpu_request_rules.GpuRequestRules(),
                        large_shm_request = runai.models.boolean_rules.BooleanRules(
                            required = True,
                            can_edit = True, ),
                        mig_profile = null, ),
                    create_home_dir = runai.models.boolean_rules.BooleanRules(
                        required = True,
                        can_edit = True, ),
                    environment_variables = runai.models.instances_rules.InstancesRules(),
                    image = runai.models.string_rules.StringRules(),
                    image_pull_policy = runai.models.image_pull_policy_rules.ImagePullPolicyRules(),
                    image_pull_secrets = runai.models.image_pull_secrets_rules.ImagePullSecretsRules(),
                    labels = ,
                    node_affinity_required = runai.models.arbitrary_rules.ArbitraryRules(
                        required = True,
                        can_edit = True, ),
                    node_type = runai.models.string_rules.StringRules(),
                    pod_affinity = runai.models.pod_affinity_rules.PodAffinityRules(
                        type = runai.models.pod_affinity_type_rules.PodAffinityTypeRules(),
                        key = runai.models.string_rules.StringRules(), ),
                    probes = runai.models.probes_rules.ProbesRules(
                        readiness = runai.models.probe_rules.ProbeRules(
                            initial_delay_seconds = runai.models.integer_rules.IntegerRules(
                                required = True,
                                can_edit = True,
                                min = 56,
                                max = 56,
                                step = 56, ),
                            period_seconds = ,
                            timeout_seconds = ,
                            success_threshold = ,
                            failure_threshold = ,
                            handler = runai.models.probe_handler_rules.ProbeHandlerRules(
                                http_get = runai.models.probe_handler_rules_http_get.ProbeHandlerRules_httpGet(
                                    path = runai.models.string_rules.StringRules(),
                                    port = ,
                                    host = runai.models.string_rules.StringRules(),
                                    scheme = runai.models.string_rules.StringRules(), ), ), ), ),
                    security = runai.models.inference_policy_rules_v2_all_of_security.InferencePolicyRulesV2_allOf_security(
                        capabilities = runai.models.array_rules.ArrayRules(
                            required = True,
                            options = [
                                {"value":"value","displayed":"A description of the value."}
                                ],
                            can_edit = True, ),
                        read_only_root_filesystem = ,
                        run_as_gid = runai.models.integer_rules_optional.IntegerRulesOptional(
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        run_as_non_root = ,
                        run_as_uid = runai.models.integer_rules_optional.IntegerRulesOptional(
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        seccomp_profile_type = runai.models.seccomp_profile_type_rules.SeccompProfileTypeRules(),
                        supplemental_groups = runai.models.string_rules.StringRules(),
                        uid_gid_source = runai.models.uid_gid_source_rules.UidGidSourceRules(), ),
                    storage = runai.models.distributed_inference_leader_worker_rules_v2_storage.DistributedInferenceLeaderWorkerRulesV2_storage(
                        config_map_volume = runai.models.config_maps_rules.ConfigMapsRules(),
                        empty_dir_volume = runai.models.empty_dirs_rules.EmptyDirsRules(),
                        pvc = runai.models.pvcs_rules.PvcsRules(),
                        secret_volume = runai.models.secrets_rules.SecretsRules(), ),
                    tolerations = runai.models.tolerations_rules.TolerationsRules(),
                    working_dir = runai.models.string_rules.StringRules(), ),
                        worker=runai.models.distributed_inference_leader_worker_rules_v2.DistributedInferenceLeaderWorkerRulesV2(
                    annotations = runai.models.instances_rules.InstancesRules(
                        instances = runai.models.item_rules.ItemRules(
                            source_of_rule = {"scope":"project","projectId":3},
                            can_add = True,
                            locked = ["HOME","USER"], ), ),
                    args = runai.models.string_rules.StringRules(),
                    command = runai.models.string_rules.StringRules(),
                    compute = runai.models.superset_rules_all_of_compute.SupersetRules_allOf_compute(
                        cpu_core_limit = runai.models.number_rules.NumberRules(
                            required = True,
                            can_edit = True,
                            min = 1.337,
                            max = 1.337,
                            step = 1.337,
                            default_from = runai.models.default_from_rule.DefaultFromRule(
                                field = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                                factor = 1.337, ), ),
                        cpu_core_request = runai.models.number_rules.NumberRules(
                            required = True,
                            can_edit = True,
                            min = 1.337,
                            max = 1.337,
                            step = 1.337, ),
                        cpu_memory_limit = runai.models.quantity_rules.QuantityRules(
                            required = True,
                            can_edit = True,
                            min = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598',
                            max = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598', ),
                        cpu_memory_request = runai.models.quantity_rules.QuantityRules(
                            required = True,
                            can_edit = True,
                            min = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598',
                            max = '+0..1.73182.66.03300982804.9021169267472mmMGGmuikTPEPmTGiGkePiGemGmmnmeiniPPkTPnEePKmnuuEinuiGEEuiGuMETMPTPmeeKPenkETmEkMikEe-521919116647837856387556598', ),
                        extended_resources = runai.models.extended_resources_rules.ExtendedResourcesRules(
                            attributes = runai.models.extended_resource_rules.ExtendedResourceRules(
                                quantity = runai.models.string_rules.StringRules(), ), ),
                        gpu_devices_request = runai.models.integer_rules.IntegerRules(
                            required = True,
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        gpu_memory_limit = ,
                        gpu_memory_request = ,
                        gpu_portion_limit = ,
                        gpu_portion_request = ,
                        gpu_request_type = runai.models.gpu_request_rules.GpuRequestRules(),
                        large_shm_request = runai.models.boolean_rules.BooleanRules(
                            required = True,
                            can_edit = True, ),
                        mig_profile = null, ),
                    create_home_dir = runai.models.boolean_rules.BooleanRules(
                        required = True,
                        can_edit = True, ),
                    environment_variables = runai.models.instances_rules.InstancesRules(),
                    image = runai.models.string_rules.StringRules(),
                    image_pull_policy = runai.models.image_pull_policy_rules.ImagePullPolicyRules(),
                    image_pull_secrets = runai.models.image_pull_secrets_rules.ImagePullSecretsRules(),
                    labels = ,
                    node_affinity_required = runai.models.arbitrary_rules.ArbitraryRules(
                        required = True,
                        can_edit = True, ),
                    node_type = runai.models.string_rules.StringRules(),
                    pod_affinity = runai.models.pod_affinity_rules.PodAffinityRules(
                        type = runai.models.pod_affinity_type_rules.PodAffinityTypeRules(),
                        key = runai.models.string_rules.StringRules(), ),
                    probes = runai.models.probes_rules.ProbesRules(
                        readiness = runai.models.probe_rules.ProbeRules(
                            initial_delay_seconds = runai.models.integer_rules.IntegerRules(
                                required = True,
                                can_edit = True,
                                min = 56,
                                max = 56,
                                step = 56, ),
                            period_seconds = ,
                            timeout_seconds = ,
                            success_threshold = ,
                            failure_threshold = ,
                            handler = runai.models.probe_handler_rules.ProbeHandlerRules(
                                http_get = runai.models.probe_handler_rules_http_get.ProbeHandlerRules_httpGet(
                                    path = runai.models.string_rules.StringRules(),
                                    port = ,
                                    host = runai.models.string_rules.StringRules(),
                                    scheme = runai.models.string_rules.StringRules(), ), ), ), ),
                    security = runai.models.inference_policy_rules_v2_all_of_security.InferencePolicyRulesV2_allOf_security(
                        capabilities = runai.models.array_rules.ArrayRules(
                            required = True,
                            options = [
                                {"value":"value","displayed":"A description of the value."}
                                ],
                            can_edit = True, ),
                        read_only_root_filesystem = ,
                        run_as_gid = runai.models.integer_rules_optional.IntegerRulesOptional(
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        run_as_non_root = ,
                        run_as_uid = runai.models.integer_rules_optional.IntegerRulesOptional(
                            can_edit = True,
                            min = 56,
                            max = 56,
                            step = 56, ),
                        seccomp_profile_type = runai.models.seccomp_profile_type_rules.SeccompProfileTypeRules(),
                        supplemental_groups = runai.models.string_rules.StringRules(),
                        uid_gid_source = runai.models.uid_gid_source_rules.UidGidSourceRules(), ),
                    storage = runai.models.distributed_inference_leader_worker_rules_v2_storage.DistributedInferenceLeaderWorkerRulesV2_storage(
                        config_map_volume = runai.models.config_maps_rules.ConfigMapsRules(),
                        empty_dir_volume = runai.models.empty_dirs_rules.EmptyDirsRules(),
                        pvc = runai.models.pvcs_rules.PvcsRules(),
                        secret_volume = runai.models.secrets_rules.SecretsRules(), ),
                    tolerations = runai.models.tolerations_rules.TolerationsRules(),
                    working_dir = runai.models.string_rules.StringRules(), )
        )
        ```
    """  # noqa: E501

    category: Optional[StringRules] = None
    node_pools: Optional[ArrayRules] = Field(default=None, alias="nodePools")
    priority_class: Optional[StringRules] = Field(default=None, alias="priorityClass")
    restart_policy: Optional[DistributedInferenceRestartPolicyRules] = Field(
        default=None, alias="restartPolicy"
    )
    serving_port: Optional[DistributedInferenceServingPortRules2] = Field(
        default=None, alias="servingPort"
    )
    startup_policy: Optional[
        DistributedInferenceStartupPolicyFieldRulesStartupPolicy
    ] = Field(default=None, alias="startupPolicy")
    workers: Optional[IntegerRules] = None
    replicas: Optional[IntegerRules] = None
    leader: Optional[DistributedInferenceLeaderWorkerRulesV2] = Field(
        default=None,
        description="Defines the pod specification for the leader. Must always be provided, regardless of the number of workers.",
    )
    worker: Optional[DistributedInferenceLeaderWorkerRulesV2] = Field(
        default=None,
        description="Defines the pod specification for the workers. Required only if the number of workers is greater than 0.",
    )
    __properties: ClassVar[List[str]] = [
        "category",
        "nodePools",
        "priorityClass",
        "restartPolicy",
        "servingPort",
        "startupPolicy",
        "workers",
        "replicas",
        "leader",
        "worker",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DistributedInferenceRulesV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict["category"] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_pools
        if self.node_pools:
            _dict["nodePools"] = self.node_pools.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority_class
        if self.priority_class:
            _dict["priorityClass"] = self.priority_class.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restart_policy
        if self.restart_policy:
            _dict["restartPolicy"] = self.restart_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of serving_port
        if self.serving_port:
            _dict["servingPort"] = self.serving_port.to_dict()
        # override the default output from pydantic by calling `to_dict()` of startup_policy
        if self.startup_policy:
            _dict["startupPolicy"] = self.startup_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of workers
        if self.workers:
            _dict["workers"] = self.workers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replicas
        if self.replicas:
            _dict["replicas"] = self.replicas.to_dict()
        # override the default output from pydantic by calling `to_dict()` of leader
        if self.leader:
            _dict["leader"] = self.leader.to_dict()
        # override the default output from pydantic by calling `to_dict()` of worker
        if self.worker:
            _dict["worker"] = self.worker.to_dict()
        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict["category"] = None

        # set to None if node_pools (nullable) is None
        # and model_fields_set contains the field
        if self.node_pools is None and "node_pools" in self.model_fields_set:
            _dict["nodePools"] = None

        # set to None if priority_class (nullable) is None
        # and model_fields_set contains the field
        if self.priority_class is None and "priority_class" in self.model_fields_set:
            _dict["priorityClass"] = None

        # set to None if restart_policy (nullable) is None
        # and model_fields_set contains the field
        if self.restart_policy is None and "restart_policy" in self.model_fields_set:
            _dict["restartPolicy"] = None

        # set to None if serving_port (nullable) is None
        # and model_fields_set contains the field
        if self.serving_port is None and "serving_port" in self.model_fields_set:
            _dict["servingPort"] = None

        # set to None if startup_policy (nullable) is None
        # and model_fields_set contains the field
        if self.startup_policy is None and "startup_policy" in self.model_fields_set:
            _dict["startupPolicy"] = None

        # set to None if workers (nullable) is None
        # and model_fields_set contains the field
        if self.workers is None and "workers" in self.model_fields_set:
            _dict["workers"] = None

        # set to None if replicas (nullable) is None
        # and model_fields_set contains the field
        if self.replicas is None and "replicas" in self.model_fields_set:
            _dict["replicas"] = None

        # set to None if leader (nullable) is None
        # and model_fields_set contains the field
        if self.leader is None and "leader" in self.model_fields_set:
            _dict["leader"] = None

        # set to None if worker (nullable) is None
        # and model_fields_set contains the field
        if self.worker is None and "worker" in self.model_fields_set:
            _dict["worker"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DistributedInferenceRulesV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "category": (
                    StringRules.from_dict(obj["category"])
                    if obj.get("category") is not None
                    else None
                ),
                "nodePools": (
                    ArrayRules.from_dict(obj["nodePools"])
                    if obj.get("nodePools") is not None
                    else None
                ),
                "priorityClass": (
                    StringRules.from_dict(obj["priorityClass"])
                    if obj.get("priorityClass") is not None
                    else None
                ),
                "restartPolicy": (
                    DistributedInferenceRestartPolicyRules.from_dict(
                        obj["restartPolicy"]
                    )
                    if obj.get("restartPolicy") is not None
                    else None
                ),
                "servingPort": (
                    DistributedInferenceServingPortRules2.from_dict(obj["servingPort"])
                    if obj.get("servingPort") is not None
                    else None
                ),
                "startupPolicy": (
                    DistributedInferenceStartupPolicyFieldRulesStartupPolicy.from_dict(
                        obj["startupPolicy"]
                    )
                    if obj.get("startupPolicy") is not None
                    else None
                ),
                "workers": (
                    IntegerRules.from_dict(obj["workers"])
                    if obj.get("workers") is not None
                    else None
                ),
                "replicas": (
                    IntegerRules.from_dict(obj["replicas"])
                    if obj.get("replicas") is not None
                    else None
                ),
                "leader": (
                    DistributedInferenceLeaderWorkerRulesV2.from_dict(obj["leader"])
                    if obj.get("leader") is not None
                    else None
                ),
                "worker": (
                    DistributedInferenceLeaderWorkerRulesV2.from_dict(obj["worker"])
                    if obj.get("worker") is not None
                    else None
                ),
            }
        )
        return _obj
