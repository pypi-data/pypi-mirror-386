# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.application_allocated_resources import ApplicationAllocatedResources
from runai.models.application_request_resources import ApplicationRequestResources
from runai.models.application_resource import ApplicationResource
from typing import Optional, Set
from typing_extensions import Self


class Application1(BaseModel):
    """
    Pydantic class model representing Application1.

    Parameters:
        ```python
        id: str
        name: str
        source: str
        type: str
        phase: str
        project_id: str
        project_name: str
        resources: List[ApplicationResource]
        allocated_resources: Optional[ApplicationAllocatedResources]
        requested_resources: Optional[ApplicationRequestResources]
        ```
        id: See model str for more information.
        name: See model str for more information.
        source: See model str for more information.
        type: See model str for more information.
        phase: See model str for more information.
        project_id: See model str for more information.
        project_name: See model str for more information.
        resources: See model List[ApplicationResource] for more information.
        allocated_resources: See model ApplicationAllocatedResources for more information.
        requested_resources: See model ApplicationRequestResources for more information.
    Example:
        ```python
        Application1(
            id='',
                        name='',
                        source='',
                        type='',
                        phase='',
                        project_id='',
                        project_name='',
                        resources=[
                    runai.models.application_resource.ApplicationResource(
                        id = '',
                        name = '',
                        kind = '', )
                    ],
                        allocated_resources=runai.models.application_allocated_resources.ApplicationAllocatedResources(
                    gpu = 1.5,
                    gpu_memory = '200Mi',
                    cpu = 0.5,
                    cpu_memory = '0B', ),
                        requested_resources=runai.models.application_request_resources.ApplicationRequestResources(
                    gpu = runai.models.request_resource_cores.RequestResourceCores(
                        limit = 1.5,
                        request = 1, ),
                    gpu_memory = runai.models.request_resource_quantity.RequestResourceQuantity(
                        limit = '2G',
                        request = '200M', ),
                    cpu = runai.models.request_resource_cores.RequestResourceCores(
                        limit = 1.5,
                        request = 1, ),
                    cpu_memory = runai.models.request_resource_quantity.RequestResourceQuantity(
                        limit = '2G',
                        request = '200M', ), )
        )
        ```
    """  # noqa: E501

    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    source: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    phase: Optional[StrictStr] = None
    project_id: Optional[StrictStr] = Field(default=None, alias="projectId")
    project_name: Optional[StrictStr] = Field(default=None, alias="projectName")
    resources: Optional[List[ApplicationResource]] = None
    allocated_resources: Optional[ApplicationAllocatedResources] = Field(
        default=None, alias="allocatedResources"
    )
    requested_resources: Optional[ApplicationRequestResources] = Field(
        default=None, alias="requestedResources"
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "source",
        "type",
        "phase",
        "projectId",
        "projectName",
        "resources",
        "allocatedResources",
        "requestedResources",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Application1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        _items = []
        if self.resources:
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict["resources"] = _items
        # override the default output from pydantic by calling `to_dict()` of allocated_resources
        if self.allocated_resources:
            _dict["allocatedResources"] = self.allocated_resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of requested_resources
        if self.requested_resources:
            _dict["requestedResources"] = self.requested_resources.to_dict()
        # set to None if allocated_resources (nullable) is None
        # and model_fields_set contains the field
        if (
            self.allocated_resources is None
            and "allocated_resources" in self.model_fields_set
        ):
            _dict["allocatedResources"] = None

        # set to None if requested_resources (nullable) is None
        # and model_fields_set contains the field
        if (
            self.requested_resources is None
            and "requested_resources" in self.model_fields_set
        ):
            _dict["requestedResources"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Application1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "source": obj.get("source"),
                "type": obj.get("type"),
                "phase": obj.get("phase"),
                "projectId": obj.get("projectId"),
                "projectName": obj.get("projectName"),
                "resources": (
                    [ApplicationResource.from_dict(_item) for _item in obj["resources"]]
                    if obj.get("resources") is not None
                    else None
                ),
                "allocatedResources": (
                    ApplicationAllocatedResources.from_dict(obj["allocatedResources"])
                    if obj.get("allocatedResources") is not None
                    else None
                ),
                "requestedResources": (
                    ApplicationRequestResources.from_dict(obj["requestedResources"])
                    if obj.get("requestedResources") is not None
                    else None
                ),
            }
        )
        return _obj
