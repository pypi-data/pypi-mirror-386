# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class WorkloadTypeCreateFields(BaseModel):
    """
    Pydantic class model representing WorkloadTypeCreateFields.

    Parameters:
        ```python
        category_id: str
        priority_id: str
        name: str
        group: str
        resource_interfaces: List[Dict[str, object]]
        ```
        category_id: The unique identifier of the workload category.
        priority_id: The unique identifier of the workload priority.
        name: The unique name of the workload type. This value must exactly match the Kubernetes Kind that represents the workload type.
        group: The Kubernetes group associated with the workload resource.
        resource_interfaces: Lists the versions of the custom resource definition (CRD) supported for this workload type, such as v1, v1beta1, or v1alpha1. This enables the platform to correctly parse, interpret, and manage manifests for this workload type according to the specific structure and schema associated with each listed version. On update, you may only add or remove supported versions, modifying existing version entries is not allowed.
    Example:
        ```python
        WorkloadTypeCreateFields(
            category_id='',
                        priority_id='',
                        name='Deployment',
                        group='apps',
                        resource_interfaces=[
                    {"spec":{"structureDefinition":{"rootComponent":{"kind":{"group":"apps","version":"v1","kind":"Deployment"}}}}}
                    ]
        )
        ```
    """  # noqa: E501

    category_id: StrictStr = Field(
        description="The unique identifier of the workload category.",
        alias="categoryId",
    )
    priority_id: StrictStr = Field(
        description="The unique identifier of the workload priority.",
        alias="priorityId",
    )
    name: Annotated[str, Field(strict=True)] = Field(
        description="The unique name of the workload type. This value must exactly match the Kubernetes Kind that represents the workload type."
    )
    group: Annotated[str, Field(strict=True)] = Field(
        description="The Kubernetes group associated with the workload resource."
    )
    resource_interfaces: Optional[
        Annotated[List[Dict[str, Any]], Field(max_length=4)]
    ] = Field(
        default=None,
        description="Lists the versions of the custom resource definition (CRD) supported for this workload type, such as v1, v1beta1, or v1alpha1. This enables the platform to correctly parse, interpret, and manage manifests for this workload type according to the specific structure and schema associated with each listed version. On update, you may only add or remove supported versions, modifying existing version entries is not allowed.",
        alias="resourceInterfaces",
    )
    __properties: ClassVar[List[str]] = [
        "categoryId",
        "priorityId",
        "name",
        "group",
        "resourceInterfaces",
    ]

    @field_validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[A-Z][a-z0-9]*([A-Z][a-z0-9]*)*$", value):
            raise ValueError(
                r"must validate the regular expression /^[A-Z][a-z0-9]*([A-Z][a-z0-9]*)*$/"
            )
        return value

    @field_validator("group")
    def group_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z](?:[a-z0-9.-]*[a-z0-9])?$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z](?:[a-z0-9.-]*[a-z0-9])?$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadTypeCreateFields from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadTypeCreateFields from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "categoryId": obj.get("categoryId"),
                "priorityId": obj.get("priorityId"),
                "name": obj.get("name"),
                "group": obj.get("group"),
                "resourceInterfaces": obj.get("resourceInterfaces"),
            }
        )
        return _obj
