# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.histogram_series import HistogramSeries
from runai.models.measurement_response import MeasurementResponse
from typing import Optional, Set
from typing_extensions import Self


class MetricsCompositeResponse(BaseModel):
    """
    Pydantic class model representing MetricsCompositeResponse.

    Parameters:
        ```python
        measurements: List[MeasurementResponse]
        histogram: Optional[List[HistogramSeries]]
        ```
        measurements: See model List[MeasurementResponse] for more information.
        histogram: See model List[HistogramSeries] for more information.
    Example:
        ```python
        MetricsCompositeResponse(
            measurements=[
                    runai.models.measurement_response.MeasurementResponse(
                        type = 'ALLOCATED_GPU',
                        labels = {'gpu': '3'},
                        values = [
                            runai.models.grouped_measurement_response_values_inner.GroupedMeasurementResponse_values_inner(
                                value = '85',
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], )
                    ],
                        histogram=[
                    runai.models.histogram_series.HistogramSeries(
                        type = 'NIM_TIME_TO_FIRST_TOKEN_SECONDS',
                        values = [
                            runai.models.histogram_value.HistogramValue(
                                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                                data = {
                                    'key' : ''
                                    }, )
                            ], )
                    ]
        )
        ```
    """  # noqa: E501

    measurements: List[MeasurementResponse]
    histogram: Optional[List[HistogramSeries]] = None
    __properties: ClassVar[List[str]] = ["measurements", "histogram"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricsCompositeResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in measurements (list)
        _items = []
        if self.measurements:
            for _item_measurements in self.measurements:
                if _item_measurements:
                    _items.append(_item_measurements.to_dict())
            _dict["measurements"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in histogram (list)
        _items = []
        if self.histogram:
            for _item_histogram in self.histogram:
                if _item_histogram:
                    _items.append(_item_histogram.to_dict())
            _dict["histogram"] = _items
        # set to None if histogram (nullable) is None
        # and model_fields_set contains the field
        if self.histogram is None and "histogram" in self.model_fields_set:
            _dict["histogram"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricsCompositeResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "measurements": (
                    [
                        MeasurementResponse.from_dict(_item)
                        for _item in obj["measurements"]
                    ]
                    if obj.get("measurements") is not None
                    else None
                ),
                "histogram": (
                    [HistogramSeries.from_dict(_item) for _item in obj["histogram"]]
                    if obj.get("histogram") is not None
                    else None
                ),
            }
        )
        return _obj
