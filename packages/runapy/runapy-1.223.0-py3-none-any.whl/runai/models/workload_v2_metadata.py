# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from runai.models.gvk import GVK
from typing import Optional, Set
from typing_extensions import Self


class WorkloadV2Metadata(BaseModel):
    """
    Pydantic class model representing WorkloadV2Metadata.

    Parameters:
        ```python
        name: str
        project_id: str
        priority: Optional[str]
        category: Optional[str]
        id: str
        gvk: GVK
        project_name: str
        cluster_id: str
        tenant_id: int
        department_id: str
        department_name: str
        created_at: datetime
        created_by: str
        updated_at: datetime
        updated_by: str
        deleted_at: Optional[datetime]
        deleted_by: Optional[str]
        ```
        name: The name of the workload.
        project_id: The id of the project.
        priority: Specifies the priority class for the workload.  The default value depends on the workload type:  high for workspace workloads, low for training/distributed training workloads, and very-high for inference workloads. You can change it to any of the following valid values to adjust the workload&#39;s scheduling behavior: very-low, low, medium-low, medium, medium-high, high, very-high.
        category: Specify the workload category assigned to the workload. Categories are used to classify and monitor different types of workloads within the NVIDIA Run:ai platform.
        id: A unique ID of the workload.
        gvk: See model GVK for more information.
        project_name: The name of the project
        cluster_id: The id of the cluster.
        tenant_id: The id of the tenant.
        department_id: The id of the department.
        department_name: The name of the department
        created_at: The timestamp for when the workload was created.
        created_by: Identifier of the user who created the workload.
        updated_at: The timestamp for the last time the workload was updated.
        updated_by: Identifier of the user who last updated the workload.
        deleted_at: The timestamp indicating when the workload was deleted.
        deleted_by: Identifier of the user who deleted the workload.
    Example:
        ```python
        WorkloadV2Metadata(
            name='my-workload-name',
                        project_id='1',
                        priority='jUR,rZ#UM/?R,Fp^l6$ARj',
                        category='jUR,rZ#UM/?R,Fp^l6$ARj',
                        id='',
                        gvk=runai.models.gvk.GVK(
                    group = 'apps',
                    version = 'v1',
                    kind = 'Deployment', ),
                        project_name='project-a',
                        cluster_id='71f69d83-ba66-4822-adf5-55ce55efd210',
                        tenant_id=1001,
                        department_id='2',
                        department_name='default',
                        created_at='2024-01-15T10:30Z',
                        created_by='user@run.ai',
                        updated_at='2024-01-15T10:35Z',
                        updated_by='user@run.ai',
                        deleted_at='2024-01-15T10:35Z',
                        deleted_by='user@run.ai'
        )
        ```
    """  # noqa: E501

    name: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="The name of the workload."
    )
    project_id: Annotated[str, Field(strict=True)] = Field(
        description="The id of the project.", alias="projectId"
    )
    priority: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None,
        description="Specifies the priority class for the workload.  The default value depends on the workload type:  high for workspace workloads, low for training/distributed training workloads, and very-high for inference workloads. You can change it to any of the following valid values to adjust the workload's scheduling behavior: very-low, low, medium-low, medium, medium-high, high, very-high.",
    )
    category: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None,
        description="Specify the workload category assigned to the workload. Categories are used to classify and monitor different types of workloads within the NVIDIA Run:ai platform.",
    )
    id: StrictStr = Field(description="A unique ID of the workload.")
    gvk: GVK
    project_name: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="The name of the project", alias="projectName"
    )
    cluster_id: StrictStr = Field(
        description="The id of the cluster.", alias="clusterId"
    )
    tenant_id: StrictInt = Field(description="The id of the tenant.", alias="tenantId")
    department_id: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="The id of the department.", alias="departmentId"
    )
    department_name: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="The name of the department", alias="departmentName"
    )
    created_at: datetime = Field(
        description="The timestamp for when the workload was created.",
        alias="createdAt",
    )
    created_by: StrictStr = Field(
        description="Identifier of the user who created the workload.",
        alias="createdBy",
    )
    updated_at: datetime = Field(
        description="The timestamp for the last time the workload was updated.",
        alias="updatedAt",
    )
    updated_by: StrictStr = Field(
        description="Identifier of the user who last updated the workload.",
        alias="updatedBy",
    )
    deleted_at: Optional[datetime] = Field(
        default=None,
        description="The timestamp indicating when the workload was deleted.",
        alias="deletedAt",
    )
    deleted_by: Optional[StrictStr] = Field(
        default=None,
        description="Identifier of the user who deleted the workload.",
        alias="deletedBy",
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "projectId",
        "priority",
        "category",
        "id",
        "gvk",
        "projectName",
        "clusterId",
        "tenantId",
        "departmentId",
        "departmentName",
        "createdAt",
        "createdBy",
        "updatedAt",
        "updatedBy",
        "deletedAt",
        "deletedBy",
    ]

    @field_validator("name")
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r".*", value):
            raise ValueError(r"must validate the regular expression /.*/")
        return value

    @field_validator("project_id")
    def project_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r".*", value):
            raise ValueError(r"must validate the regular expression /.*/")
        return value

    @field_validator("priority")
    def priority_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r".*", value):
            raise ValueError(r"must validate the regular expression /.*/")
        return value

    @field_validator("category")
    def category_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r".*", value):
            raise ValueError(r"must validate the regular expression /.*/")
        return value

    @field_validator("project_name")
    def project_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]([a-z0-9-]*[a-z0-9])?$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z0-9]([a-z0-9-]*[a-z0-9])?$/"
            )
        return value

    @field_validator("department_id")
    def department_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r".*", value):
            raise ValueError(r"must validate the regular expression /.*/")
        return value

    @field_validator("department_name")
    def department_name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-z0-9]([a-z0-9-]*[a-z0-9])?$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z0-9]([a-z0-9-]*[a-z0-9])?$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadV2Metadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gvk
        if self.gvk:
            _dict["gvk"] = self.gvk.to_dict()
        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict["priority"] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict["category"] = None

        # set to None if deleted_at (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_at is None and "deleted_at" in self.model_fields_set:
            _dict["deletedAt"] = None

        # set to None if deleted_by (nullable) is None
        # and model_fields_set contains the field
        if self.deleted_by is None and "deleted_by" in self.model_fields_set:
            _dict["deletedBy"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadV2Metadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "projectId": obj.get("projectId"),
                "priority": obj.get("priority"),
                "category": obj.get("category"),
                "id": obj.get("id"),
                "gvk": (
                    GVK.from_dict(obj["gvk"]) if obj.get("gvk") is not None else None
                ),
                "projectName": obj.get("projectName"),
                "clusterId": obj.get("clusterId"),
                "tenantId": obj.get("tenantId"),
                "departmentId": obj.get("departmentId"),
                "departmentName": obj.get("departmentName"),
                "createdAt": obj.get("createdAt"),
                "createdBy": obj.get("createdBy"),
                "updatedAt": obj.get("updatedAt"),
                "updatedBy": obj.get("updatedBy"),
                "deletedAt": obj.get("deletedAt"),
                "deletedBy": obj.get("deletedBy"),
            }
        )
        return _obj
