# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from runai.models.array_rules import ArrayRules
from runai.models.boolean_rules import BooleanRules
from runai.models.integer_rules import IntegerRules
from runai.models.string_rules import StringRules
from typing import Optional, Set
from typing_extensions import Self


class SupersetServingPortRules(BaseModel):
    """
    Pydantic class model representing SupersetServingPortRules.

    Parameters:
        ```python
        port: Optional[IntegerRules]
        container: Optional[IntegerRules]
        protocol: Optional[StringRules]
        authorization_type: Optional[StringRules]
        authorized_users: Optional[ArrayRules]
        authorized_groups: Optional[ArrayRules]
        cluster_local_access_only: Optional[BooleanRules]
        expose_externally: Optional[BooleanRules]
        exposed_url: Optional[StringRules]
        ```
        port: See model IntegerRules for more information.
        container: See model IntegerRules for more information.
        protocol: See model StringRules for more information.
        authorization_type: See model StringRules for more information.
        authorized_users: See model ArrayRules for more information.
        authorized_groups: See model ArrayRules for more information.
        cluster_local_access_only: See model BooleanRules for more information.
        expose_externally: See model BooleanRules for more information.
        exposed_url: See model StringRules for more information.
    Example:
        ```python
        SupersetServingPortRules(
            port=runai.models.integer_rules.IntegerRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    can_edit = True,
                    min = 56,
                    max = 56,
                    step = 56,
                    default_from = runai.models.default_from_rule.DefaultFromRule(
                        field = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                        factor = 1.337, ), ),
                        container=runai.models.integer_rules.IntegerRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    can_edit = True,
                    min = 56,
                    max = 56,
                    step = 56,
                    default_from = runai.models.default_from_rule.DefaultFromRule(
                        field = 'jUR,rZ#UM/?R,Fp^l6$ARj',
                        factor = 1.337, ), ),
                        protocol=runai.models.string_rules.StringRules(),
                        authorization_type=runai.models.string_rules.StringRules(),
                        authorized_users=runai.models.array_rules.ArrayRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    options = [
                        {"value":"value","displayed":"A description of the value."}
                        ],
                    can_edit = True, ),
                        authorized_groups=runai.models.array_rules.ArrayRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    options = [
                        {"value":"value","displayed":"A description of the value."}
                        ],
                    can_edit = True, ),
                        cluster_local_access_only=runai.models.boolean_rules.BooleanRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    can_edit = True, ),
                        expose_externally=runai.models.boolean_rules.BooleanRules(
                    source_of_rule = {"scope":"project","projectId":3},
                    required = True,
                    can_edit = True, ),
                        exposed_url=runai.models.string_rules.StringRules()
        )
        ```
    """  # noqa: E501

    port: Optional[IntegerRules] = None
    container: Optional[IntegerRules] = None
    protocol: Optional[StringRules] = None
    authorization_type: Optional[StringRules] = Field(
        default=None, alias="authorizationType"
    )
    authorized_users: Optional[ArrayRules] = Field(
        default=None, alias="authorizedUsers"
    )
    authorized_groups: Optional[ArrayRules] = Field(
        default=None, alias="authorizedGroups"
    )
    cluster_local_access_only: Optional[BooleanRules] = Field(
        default=None, alias="clusterLocalAccessOnly"
    )
    expose_externally: Optional[BooleanRules] = Field(
        default=None, alias="exposeExternally"
    )
    exposed_url: Optional[StringRules] = Field(default=None, alias="exposedUrl")
    __properties: ClassVar[List[str]] = [
        "port",
        "container",
        "protocol",
        "authorizationType",
        "authorizedUsers",
        "authorizedGroups",
        "clusterLocalAccessOnly",
        "exposeExternally",
        "exposedUrl",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupersetServingPortRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of port
        if self.port:
            _dict["port"] = self.port.to_dict()
        # override the default output from pydantic by calling `to_dict()` of container
        if self.container:
            _dict["container"] = self.container.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protocol
        if self.protocol:
            _dict["protocol"] = self.protocol.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorization_type
        if self.authorization_type:
            _dict["authorizationType"] = self.authorization_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorized_users
        if self.authorized_users:
            _dict["authorizedUsers"] = self.authorized_users.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authorized_groups
        if self.authorized_groups:
            _dict["authorizedGroups"] = self.authorized_groups.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_local_access_only
        if self.cluster_local_access_only:
            _dict["clusterLocalAccessOnly"] = self.cluster_local_access_only.to_dict()
        # override the default output from pydantic by calling `to_dict()` of expose_externally
        if self.expose_externally:
            _dict["exposeExternally"] = self.expose_externally.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exposed_url
        if self.exposed_url:
            _dict["exposedUrl"] = self.exposed_url.to_dict()
        # set to None if port (nullable) is None
        # and model_fields_set contains the field
        if self.port is None and "port" in self.model_fields_set:
            _dict["port"] = None

        # set to None if container (nullable) is None
        # and model_fields_set contains the field
        if self.container is None and "container" in self.model_fields_set:
            _dict["container"] = None

        # set to None if protocol (nullable) is None
        # and model_fields_set contains the field
        if self.protocol is None and "protocol" in self.model_fields_set:
            _dict["protocol"] = None

        # set to None if authorization_type (nullable) is None
        # and model_fields_set contains the field
        if (
            self.authorization_type is None
            and "authorization_type" in self.model_fields_set
        ):
            _dict["authorizationType"] = None

        # set to None if authorized_users (nullable) is None
        # and model_fields_set contains the field
        if (
            self.authorized_users is None
            and "authorized_users" in self.model_fields_set
        ):
            _dict["authorizedUsers"] = None

        # set to None if authorized_groups (nullable) is None
        # and model_fields_set contains the field
        if (
            self.authorized_groups is None
            and "authorized_groups" in self.model_fields_set
        ):
            _dict["authorizedGroups"] = None

        # set to None if cluster_local_access_only (nullable) is None
        # and model_fields_set contains the field
        if (
            self.cluster_local_access_only is None
            and "cluster_local_access_only" in self.model_fields_set
        ):
            _dict["clusterLocalAccessOnly"] = None

        # set to None if expose_externally (nullable) is None
        # and model_fields_set contains the field
        if (
            self.expose_externally is None
            and "expose_externally" in self.model_fields_set
        ):
            _dict["exposeExternally"] = None

        # set to None if exposed_url (nullable) is None
        # and model_fields_set contains the field
        if self.exposed_url is None and "exposed_url" in self.model_fields_set:
            _dict["exposedUrl"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupersetServingPortRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "port": (
                    IntegerRules.from_dict(obj["port"])
                    if obj.get("port") is not None
                    else None
                ),
                "container": (
                    IntegerRules.from_dict(obj["container"])
                    if obj.get("container") is not None
                    else None
                ),
                "protocol": (
                    StringRules.from_dict(obj["protocol"])
                    if obj.get("protocol") is not None
                    else None
                ),
                "authorizationType": (
                    StringRules.from_dict(obj["authorizationType"])
                    if obj.get("authorizationType") is not None
                    else None
                ),
                "authorizedUsers": (
                    ArrayRules.from_dict(obj["authorizedUsers"])
                    if obj.get("authorizedUsers") is not None
                    else None
                ),
                "authorizedGroups": (
                    ArrayRules.from_dict(obj["authorizedGroups"])
                    if obj.get("authorizedGroups") is not None
                    else None
                ),
                "clusterLocalAccessOnly": (
                    BooleanRules.from_dict(obj["clusterLocalAccessOnly"])
                    if obj.get("clusterLocalAccessOnly") is not None
                    else None
                ),
                "exposeExternally": (
                    BooleanRules.from_dict(obj["exposeExternally"])
                    if obj.get("exposeExternally") is not None
                    else None
                ),
                "exposedUrl": (
                    StringRules.from_dict(obj["exposedUrl"])
                    if obj.get("exposedUrl") is not None
                    else None
                ),
            }
        )
        return _obj
