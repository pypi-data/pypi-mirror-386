# coding: utf-8

"""
NVIDIA Run:ai

# Introduction  The NVIDIA Run:ai Control-Plane API reference is a guide that provides an easy-to-use programming interface for adding various tasks to your application, including workload submission, resource management, and administrative operations.  NVIDIA Run:ai APIs are accessed using *bearer tokens*. To obtain a token, you need to create an **Application** through the NVIDIA Run:ai user interface. To create an application, in your UI, go to `Settings & Tools`, `Application` and create a new Application.  After you have created a new application, you will need to assign it access rules. To assign access rules to the application, see [Create access rules](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/accessrules#create-or-delete-rules). Make sure you assign the correct rules to your application. Use the [Roles](https://run-ai-docs.nvidia.com/saas/infrastructure-setup/authentication/roles) to assign the correct access rules.  To get your access token, follow the instructions in [Request a token](https://run-ai-docs.nvidia.com/saas/reference/api/rest-auth/#request-an-api-token).

The version of the OpenAPI document: latest
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self


class ConfigMap(BaseModel):
    """
    Pydantic class model representing ConfigMap.

    Parameters:
        ```python
        config_map: Optional[str]
        mount_path: Optional[str]
        sub_path: Optional[str]
        default_mode: Optional[str]
        ```
        config_map: The name of the ConfigMap resource. (mandatory)
        mount_path: Local path within the workload to which the ConfigMap will be mapped to. (mandatory)
        sub_path: Path within the volume from which the container&#39;s volume should be mounted.
        default_mode: File permission mode in octal string format. This value must be a 4-digit octal number, representing the default file mode when mounting a Secret or ConfigMap as a volume.
    Example:
        ```python
        ConfigMap(
            config_map='w1c2v7s6djuy1zmetozkhdomha1bae37b8ocvx8o53ow2eg7p6qw9qklp6l4y010fogx0',
                        mount_path='jUR,rZ#UM/?R,Fp^l6$ARj0',
                        sub_path='jUR,rZ#UM/?R,Fp^l6$ARj0',
                        default_mode='0644'
        )
        ```
    """  # noqa: E501

    config_map: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="The name of the ConfigMap resource. (mandatory)",
        alias="configMap",
    )
    mount_path: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="Local path within the workload to which the ConfigMap will be mapped to. (mandatory)",
        alias="mountPath",
    )
    sub_path: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="Path within the volume from which the container's volume should be mounted.",
        alias="subPath",
    )
    default_mode: Optional[
        Annotated[str, Field(min_length=4, strict=True, max_length=4)]
    ] = Field(
        default=None,
        description="File permission mode in octal string format. This value must be a 4-digit octal number, representing the default file mode when mounting a Secret or ConfigMap as a volume. ",
        alias="defaultMode",
    )
    __properties: ClassVar[List[str]] = [
        "configMap",
        "mountPath",
        "subPath",
        "defaultMode",
    ]

    @field_validator("config_map")
    def config_map_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-z0-9]([a-z0-9-]*[a-z0-9])?$", value):
            raise ValueError(
                r"must validate the regular expression /^[a-z0-9]([a-z0-9-]*[a-z0-9])?$/"
            )
        return value

    @field_validator("mount_path")
    def mount_path_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r".*", value):
            raise ValueError(r"must validate the regular expression /.*/")
        return value

    @field_validator("sub_path")
    def sub_path_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r".*", value):
            raise ValueError(r"must validate the regular expression /.*/")
        return value

    @field_validator("default_mode")
    def default_mode_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"0[0-7]{3}", value):
            raise ValueError(r"must validate the regular expression /0[0-7]{3}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConfigMap from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if config_map (nullable) is None
        # and model_fields_set contains the field
        if self.config_map is None and "config_map" in self.model_fields_set:
            _dict["configMap"] = None

        # set to None if mount_path (nullable) is None
        # and model_fields_set contains the field
        if self.mount_path is None and "mount_path" in self.model_fields_set:
            _dict["mountPath"] = None

        # set to None if sub_path (nullable) is None
        # and model_fields_set contains the field
        if self.sub_path is None and "sub_path" in self.model_fields_set:
            _dict["subPath"] = None

        # set to None if default_mode (nullable) is None
        # and model_fields_set contains the field
        if self.default_mode is None and "default_mode" in self.model_fields_set:
            _dict["defaultMode"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConfigMap from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "configMap": obj.get("configMap"),
                "mountPath": obj.get("mountPath"),
                "subPath": obj.get("subPath"),
                "defaultMode": obj.get("defaultMode"),
            }
        )
        return _obj
