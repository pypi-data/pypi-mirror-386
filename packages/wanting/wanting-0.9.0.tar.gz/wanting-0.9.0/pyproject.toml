[project]
name = "wanting"
dynamic = ["version"]
authors = [
    {name = "Narvin Singh", email = "Narvin.A.Singh@gmail.com"},
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: OS Independent"
]
description = "A library for creating, and working with models that can represent incomplete information."
readme = "README.rst"
license = {file = "LICENSE"}
requires-python = ">=3.12"

dependencies = [
    "pydantic ~= 2.11"
]

[project.optional-dependencies]
dev = [
    "mypy ~= 1.18",
    "pre-commit ~= 4.3",
    "pytest ~= 8.4",
    "ruff ~= 0.13.0",
]
doc = [
    "python-docs-theme ~= 2025.9",
    "sphinx ~= 8.2",
]
deploy = [
    "build ~= 1.3",
    "twine ~= 6.2",
]

[project.urls]
Homepage = "https://gitlab.com/narvin/wanting"
Repository = "https://gitlab.com/narvin/wanting"
"Bug Tracker" = "https://gitlab.com/narvin/wanting/-/issues"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
package-data = {"*" = ["py.typed"]}

[tool.setuptools.dynamic]
version = {attr = "wanting.__version__"}

[tool.mypy]
python_version = "3.13"
strict = true

[tool.ruff]
line-length = 100
target-version = "py313"

[tool.ruff.format]
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # flake8-commas
    "COM812",  # Trailing comma missing

    # pydocstyle
    "D203",    # 1 blank line required before class docstring
    "D205",    # 1 blank line required between summary line and description
    "D212",    # Multi-line docstring summary should start at the first line
    "D400",    # First line should end with a period
    "D415",    # First line should end with a period, question mark, or exclamation point

    # Error
    "E501",    # Line too long ({width} > {limit})
    "E731",    # Do not assign a lambda expression, use a def

    # eradicate
    "ERA001",  # Found commented-out code

    # flake8-fixme
    "FIX002",  # Line contains TODO, consider resolving the issue

    # flake8-implicit-str-concat
    "ISC001",  # Implicitly concatenated string literals on one line

    # flake8-pytest-style
    "PT009",   # Use a regular assert instead of unittest-style {assertion}
    "PT027",   # Use pytest.raises instead of unittest-style {assertion}

    # flake8-todos
    "TD003",   # Missing issue link on the line following this TODO
]
fixable = [
    "F401",     # unused import
    "F541",     # f-string without any placeholders

    # isort
    "I001",    # Import block is un-sorted or un-formatted

    # Ruff-specific rules
    "RUF022",  # `__all__` is not sorted
    "RUF100",  # Unused noqa directive
]
isort.split-on-trailing-comma = false
pydocstyle.convention = "google"

