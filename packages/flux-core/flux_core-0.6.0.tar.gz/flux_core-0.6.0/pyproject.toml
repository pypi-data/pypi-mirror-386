[tool.poetry]
name = "flux-core"
version = "0.6.0"
description = "Flux is a distributed workflow orchestration engine to build stateful and fault-tolerant workflows."
authors = ["Eduardo Dias <edurdias@gmail.com>"]
repository = "https://github.com/edurdias/flux"
homepage = "https://github.com/edurdias/flux"
readme = "README.md"

packages = [{ include = "flux" }]

[tool.poetry.dependencies]
python = "^3.12"
pydantic = "^2.9.2"
sqlalchemy = "^2.0.35"
fastapi = "^0.115.2"
uvicorn = "^0.31.1"
pycryptodome = "^3.21.0"
tomli = "^2.0.2"
pydantic-settings = "^2.6.1"
dill = "^0.3.9"
h11 = "^0.16.0"
python-multipart = "^0.0.20"
httpx = {extras = ["sse"], version = "^0.28.1"}
httpx-sse = "^0.4.0"
sse-starlette = "^2.3.5"
psutil = "^7.0.0"
gputil = "^1.4.0"
types-setuptools = "^80.7.0.20250516"
fastmcp = "^2.5.1"
psycopg2-binary = {version = "^2.9.0", optional = true}
croniter = "^3.0.3"
types-croniter = "^6.0.0.20250809"

[tool.poetry.group.dev.dependencies]
pandas = "^2.2.3"
numpy = "^2.1.1"
pyright = "^1.1.384"
pylint = "^3.3.1"
bandit = "^1.7.10"
pyflakes = "^3.2.0"
radon = "^6.0.1"
prospector = "^1.12.0"
pytest = "^8.3.3"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
pre-commit = "^4.0.1"
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.43"
mkdocs-material-extensions = "^1.3.1"
mkdocstrings = {extras = ["python"], version = "^0.30.0"}
ipykernel = "^6.29.5"
poethepoet = "^0.34.0"

[tool.poetry.scripts]
flux = "flux.cli:cli"

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::pytest.PytestReturnNotNoneWarning",
    "ignore::RuntimeWarning:flux.tasks",
    "ignore::RuntimeWarning:unittest.mock",
    "ignore::FutureWarning:numpy._core.fromnumeric",
    "ignore::DeprecationWarning:pydantic._internal._config",
    "ignore::pytest.PytestDeprecationWarning",
    "ignore::pytest.PytestConfigWarning"
]
markers = [
    "asyncio: marks tests as async tests",
    "integration: marks tests as integration tests (may require external dependencies)",
    "postgresql: marks tests as requiring PostgreSQL database",
    "slow: marks tests as slow running"
]

# Custom commands for workflow management
[tool.poe.tasks]
test-workflows = { script = "scripts.ci:test_workflows" }

# Individual workflow tests
[tool.poe.tasks.test-pr]
help = "Test the PR workflow locally"
script = "scripts.ci:test_workflow"
args = [
    { name = "workflow", default = "pull-request.yml", positional = true },
    { name = "job", default = "test", positional = true },
    { name = "event", default = "pull_request", positional = true },
    { name = "dryrun", default = false, type = "boolean", options = ["--dryrun"] }
]

[tool.poe.tasks.test-build]
help = "Test the build workflow locally"
script = "scripts.ci:test_workflow"
args = [
    { name = "workflow", default = "build-publish.yml", positional = true },
    { name = "job", default = "build", positional = true },
    { name = "event", default = "push", positional = true },
    { name = "dryrun", default = false, type = "boolean", options = ["--dryrun"] }
]

[tool.poe.tasks.test-docs]
help = "Test the docs workflow locally"
script = "scripts.ci:test_workflow"
args = [
    { name = "workflow", default = "docs.yml", positional = true },
    { name = "job", default = "deploy", positional = true },
    { name = "event", default = "paths", positional = true },
    { name = "dryrun", default = false, type = "boolean", options = ["--dryrun"] }
]

[tool.poetry.extras]
postgresql = ["psycopg2-binary"]


[tool.ruff]
line-length = 100

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
