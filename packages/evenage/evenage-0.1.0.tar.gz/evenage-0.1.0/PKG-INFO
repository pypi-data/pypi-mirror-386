Metadata-Version: 2.4
Name: evenage
Version: 0.1.0
Summary: EvenAge - A transparent, Docker-native, observable, distributed agent framework. A superset of CrewAI with explicit communication, real distributed runtime, and local observability.
Project-URL: Homepage, https://evenage.dev
Project-URL: Documentation, https://docs.evenage.dev
Project-URL: Repository, https://github.com/evenage/evenage
Author-email: EvenAge Team <team@evenage.dev>
Requires-Python: <3.14,>=3.10
Requires-Dist: aiofiles>=23.2.0
Requires-Dist: alembic>=1.13.0
Requires-Dist: chromadb~=1.1.0
Requires-Dist: click>=8.1.7
Requires-Dist: docker>=7.0.0
Requires-Dist: fastapi>=0.115.0
Requires-Dist: instructor>=1.3.3
Requires-Dist: json-repair==0.25.2
Requires-Dist: jsonref>=1.1.0
Requires-Dist: opentelemetry-api>=1.30.0
Requires-Dist: opentelemetry-exporter-otlp-proto-http>=1.30.0
Requires-Dist: opentelemetry-instrumentation-fastapi>=0.51b0
Requires-Dist: opentelemetry-instrumentation-redis>=0.51b0
Requires-Dist: opentelemetry-instrumentation-sqlalchemy>=0.51b0
Requires-Dist: opentelemetry-sdk>=1.30.0
Requires-Dist: pdfplumber>=0.11.4
Requires-Dist: prometheus-client>=0.21.0
Requires-Dist: pydantic-settings>=2.10.1
Requires-Dist: pydantic>=2.11.9
Requires-Dist: python-dotenv>=1.1.1
Requires-Dist: pyyaml>=6.0.1
Requires-Dist: redis-om>=0.3.0
Requires-Dist: redis>=5.0.0
Requires-Dist: regex>=2024.9.11
Requires-Dist: requests>=2.31.0
Requires-Dist: rich>=13.7.0
Requires-Dist: sqlalchemy>=2.0.0
Requires-Dist: tokenizers>=0.20.3
Requires-Dist: uvicorn[standard]>=0.32.0
Requires-Dist: websockets>=13.0
Provides-Extra: all
Requires-Dist: aio-pika>=9.4.0; extra == 'all'
Requires-Dist: aiokafka>=0.11.0; extra == 'all'
Requires-Dist: anthropic>=0.34.0; extra == 'all'
Requires-Dist: boto3>=1.34.0; extra == 'all'
Requires-Dist: google-generativeai>=0.8.0; extra == 'all'
Requires-Dist: groq>=0.11.0; extra == 'all'
Requires-Dist: minio>=7.2.0; extra == 'all'
Requires-Dist: openai>=1.13.3; extra == 'all'
Requires-Dist: psycopg2-binary>=2.9.0; extra == 'all'
Requires-Dist: pymysql>=1.1.0; extra == 'all'
Provides-Extra: all-dbs
Requires-Dist: psycopg2-binary>=2.9.0; extra == 'all-dbs'
Requires-Dist: pymysql>=1.1.0; extra == 'all-dbs'
Provides-Extra: all-llms
Requires-Dist: anthropic>=0.34.0; extra == 'all-llms'
Requires-Dist: google-generativeai>=0.8.0; extra == 'all-llms'
Requires-Dist: groq>=0.11.0; extra == 'all-llms'
Requires-Dist: openai>=1.13.3; extra == 'all-llms'
Provides-Extra: all-queues
Requires-Dist: aio-pika>=9.4.0; extra == 'all-queues'
Requires-Dist: aiokafka>=0.11.0; extra == 'all-queues'
Provides-Extra: all-storage
Requires-Dist: boto3>=1.34.0; extra == 'all-storage'
Requires-Dist: minio>=7.2.0; extra == 'all-storage'
Provides-Extra: anthropic
Requires-Dist: anthropic>=0.34.0; extra == 'anthropic'
Provides-Extra: dev
Requires-Dist: black>=24.0.0; extra == 'dev'
Requires-Dist: mypy>=1.11.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.23.0; extra == 'dev'
Requires-Dist: pytest>=8.0.0; extra == 'dev'
Requires-Dist: ruff>=0.5.0; extra == 'dev'
Provides-Extra: gemini
Requires-Dist: google-generativeai>=0.8.0; extra == 'gemini'
Provides-Extra: groq
Requires-Dist: groq>=0.11.0; extra == 'groq'
Provides-Extra: kafka
Requires-Dist: aiokafka>=0.11.0; extra == 'kafka'
Provides-Extra: minio
Requires-Dist: minio>=7.2.0; extra == 'minio'
Provides-Extra: mysql
Requires-Dist: pymysql>=1.1.0; extra == 'mysql'
Provides-Extra: openai
Requires-Dist: openai>=1.13.3; extra == 'openai'
Provides-Extra: postgres
Requires-Dist: psycopg2-binary>=2.9.0; extra == 'postgres'
Provides-Extra: rabbitmq
Requires-Dist: aio-pika>=9.4.0; extra == 'rabbitmq'
Provides-Extra: s3
Requires-Dist: boto3>=1.34.0; extra == 's3'
Description-Content-Type: text/markdown

# EvenAge

**A transparent, Docker-native, observable, distributed agent framework.**

EvenAge is a superset of CrewAI that removes excessive abstractions and introduces real distributed runtime, local observability, and explicit agent communication.

## üéØ Philosophy

CrewAI is too abstract, making it nearly impossible to understand or debug what's happening under the hood.

EvenAge fixes this by being:

- **Transparent** ‚Äî All logic (task flow, prompts, tool calls) visible and traceable
- **Pluggable** ‚Äî Configure your own queues, databases, models, or tools
- **Observable** ‚Äî Every agent action recorded via OpenTelemetry
- **Containerized** ‚Äî Everything runs inside Docker for predictable behavior

> **In short:** EvenAge = CrewAI with explicit communication, Docker-native execution, local observability, and zero hidden magic.

## üèóÔ∏è Architecture

### Communication Model

Unlike CrewAI's internal synchronous calls, EvenAge uses **Redis Streams** for explicit message passing:

```
Controller ‚Üí Redis Queue ‚Üí Agent Worker ‚Üí Redis Response Stream
```

Each agent runs in its own container and consumes tasks from a dedicated Redis stream.

### Services

- **PostgreSQL** (with pgvector) ‚Äî Stores traces, job history, agent metadata
- **Redis** ‚Äî Message bus for task distribution
- **MinIO** ‚Äî S3-compatible storage for artifacts and large payloads
- **Jaeger** ‚Äî OpenTelemetry trace collection and visualization
- **Prometheus** ‚Äî Metrics collection and monitoring
- **API Server** ‚Äî FastAPI server for job submission and queries
- **Worker Containers** ‚Äî One per agent, consumes and processes tasks
- **Dashboard** ‚Äî Real-time monitoring and agent interaction

## üöÄ Quick Start

### Installation

```bash
# Clone the repository
cd lib/evenage

# Install locally (for now)
pip install -e .
```

### Create a Project

```bash
# Initialize a new project
evenage init my_project

# Navigate to project
cd my_project

# Add agents
evenage add agent summarizer
evenage add agent analyzer

# Start the environment
evenage run dev
```

This will start all services and open the dashboard at `http://localhost:5173`.

## üì¶ Project Structure

```
my_project/
‚îú‚îÄ‚îÄ evenage.yml              # Project configuration
‚îú‚îÄ‚îÄ docker-compose.yml       # Docker services (auto-generated)
‚îú‚îÄ‚îÄ Dockerfile               # Container definition
‚îú‚îÄ‚îÄ .env                     # Environment variables
‚îú‚îÄ‚îÄ agents/                  # Agent configurations
‚îÇ   ‚îú‚îÄ‚îÄ summarizer/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ agent.yml
‚îÇ   ‚îî‚îÄ‚îÄ analyzer/
‚îÇ       ‚îî‚îÄ‚îÄ agent.yml
‚îú‚îÄ‚îÄ tools/                   # Custom tools
‚îÇ   ‚îî‚îÄ‚îÄ my_tool.py
‚îî‚îÄ‚îÄ pipelines/               # Pipeline definitions
    ‚îî‚îÄ‚îÄ analysis_pipeline.yml
```

## ü§ñ Creating Agents

### Add an Agent

```bash
evenage add agent researcher
```

This will:
1. Create `agents/researcher/agent.yml`
2. Add worker service to `docker-compose.yml`
3. Register agent in `evenage.yml`

### Agent Configuration

`agents/researcher/agent.yml`:

```yaml
name: researcher
role: Research Specialist
goal: Find and analyze information from various sources
backstory: An expert researcher with years of experience
llm: gpt-4
tools:
  - web_search
  - document_reader
max_iterations: 15
allow_delegation: false
verbose: true
```

## üîß Custom Tools

### Add a Tool

```bash
evenage add tool web_search
```

Edit `tools/web_search.py`:

```python
def web_search(query: str, max_results: int = 5) -> str:
    """Search the web for information."""
    # Implementation here
    return results
```

## üìã Pipelines

Create `pipelines/analysis.yml`:

```yaml
name: document_analysis
description: Analyze documents and generate insights
tasks:
  - name: summarize
    description: Summarize the document: {document}
    agent: summarizer
    expected_output: A concise summary
    
  - name: analyze
    description: Analyze the summary for key insights
    agent: analyzer
    context: [summarize]
    expected_output: Key insights and recommendations
```

### Run a Pipeline

```bash
evenage run job pipelines/analysis.yml --input document="report.pdf"
```

## üîç Observability

### View Traces

Navigate to Jaeger at `http://localhost:16686` to see:
- Task execution traces
- LLM API calls
- Tool invocations
- Error spans

### View Metrics

Navigate to Prometheus at `http://localhost:9090` to query:
- `evenage_agent_task_duration_seconds` ‚Äî Task execution time
- `evenage_queue_depth` ‚Äî Pending tasks per agent
- `evenage_tokens_total` ‚Äî Token usage
- `evenage_errors_total` ‚Äî Error counts

### Agent Logs

```bash
# View logs for an agent
evenage logs summarizer

# Follow logs in real-time
evenage logs summarizer -f
```

## üåê API Reference

### Submit Job

```bash
curl -X POST http://localhost:8000/jobs \
  -H "Content-Type: application/json" \
  -d '{
    "pipeline_name": "analysis",
    "inputs": {"document": "report.pdf"}
  }'
```

### Get Job Status

```bash
curl http://localhost:8000/jobs/{job_id}
```

### List Agents

```bash
curl http://localhost:8000/agents
```

## üìä Dashboard

Access the dashboard at `http://localhost:5173` to:

- View all active agents
- Monitor real-time logs
- Inspect OpenTelemetry traces
- Interact with individual agents
- Visualize job workflows
- Check system health metrics

## üê≥ Docker Commands

```bash
# Start all services
evenage run dev

# View logs
evenage logs <agent_name>

# Stop all services
evenage stop

# Rebuild containers
docker compose up -d --build
```

## ‚öôÔ∏è Configuration

### Environment Variables

Edit `.env` to customize:

```bash
DATABASE_URL=postgresql://postgres:postgres@postgres:5432/evenage
REDIS_URL=redis://redis:6379
MINIO_ENDPOINT=minio:9000
OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4318
API_HOST=0.0.0.0
API_PORT=8000
```

### Project Configuration

Edit `evenage.yml`:

```yaml
project:
  name: my_project
  broker: redis
  database: postgres
  storage: minio
  tracing: true
  metrics: true
  agents:
    - summarizer
    - analyzer
```

## üîÑ Message Format

### Task Message

```json
{
  "task_id": "uuid",
  "job_id": "uuid",
  "source_agent": "controller",
  "target_agent": "summarizer",
  "payload": {
    "description": "Summarize this document",
    "context": "...",
    "expected_output": "..."
  },
  "trace_parent": "trace-id",
  "created_at": "timestamp"
}
```

### Response Message

```json
{
  "task_id": "uuid",
  "job_id": "uuid",
  "agent_name": "summarizer",
  "status": "completed",
  "result": {"output": "..."},
  "metrics": {
    "tokens": 2200,
    "latency_ms": 5200
  },
  "trace_parent": "trace-id",
  "completed_at": "timestamp"
}
```

## üîß Development

### Prerequisites

- Python 3.10+
- Docker & Docker Compose
- Git

### Setup

```bash
# Clone repository
git clone https://github.com/evenage/evenage.git
cd evenage

# Install dependencies
cd lib/evenage
pip install -e .[dev]

# Run tests
pytest
```

## üìù CLI Reference

```bash
evenage init [project_name]        # Initialize new project
evenage add agent <name>           # Add new agent
evenage add tool <name>            # Add custom tool
evenage run dev                    # Start development environment
evenage run job <pipeline> [opts]  # Run a pipeline
evenage logs <agent> [-f]          # View agent logs
evenage stop                       # Stop all services
```

## üÜö EvenAge vs CrewAI

| Feature | CrewAI | EvenAge |
|---------|--------|---------|
| **Communication** | Hidden internal calls | Explicit Redis message bus |
| **Runtime** | In-memory Python | Docker containers per agent |
| **Observability** | Limited logging | Full OpenTelemetry + Prometheus |
| **Scalability** | Single process | Distributed workers |
| **Transparency** | Opaque orchestration | Visible task flow |
| **Storage** | In-memory | MinIO/S3 for artifacts |
| **Monitoring** | None | Dashboard + Jaeger + Prometheus |
| **Configuration** | Code-based | YAML + Docker Compose |

## ü§ù Contributing

Contributions are welcome! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for guidelines.

## üìÑ License

MIT License - see [LICENSE](LICENSE) for details.

## üîó Links

- **Documentation**: Coming soon
- **GitHub**: https://github.com/evenage/evenage
- **Issues**: https://github.com/evenage/evenage/issues

---

**Built with transparency in mind. No hidden magic. Just distributed agents.**
