{"guide": {"name": "client-side-functions", "category": "additional-features", "pretty_category": "Additional Features", "guide_index": 13, "absolute_index": 26, "pretty_name": "Client Side Functions", "content": "# Client Side Functions\n\nGradio allows you to run certain \"simple\" functions directly in the browser by setting `js=True` in your event listeners. This will **automatically convert your Python code into JavaScript**, which significantly improves the responsiveness of your app by avoiding a round trip to the server for simple UI updates.\n\nThe difference in responsiveness is most noticeable on hosted applications (like Hugging Face Spaces), when the server is under heavy load, with high-latency connections, or when many users are accessing the app simultaneously.\n\n## When to Use Client Side Functions\n\nClient side functions are ideal for updating component properties (like visibility, placeholders, interactive state, or styling). \n\nHere's a basic example:\n\n```py\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    with gr.Row() as row:\n        btn = gr.Button(\"Hide this row\")\n    \n    # This function runs in the browser without a server roundtrip\n    btn.click(\n        lambda: gr.Row(visible=False), \n        None, \n        row, \n        js=True\n    )\n\ndemo.launch()\n```\n\n\n## Limitations\n\nClient side functions have some important restrictions:\n* They can only update component properties (not values)\n* They cannot take any inputs\n\nHere are some functions that will work with `js=True`:\n\n```py\n# Simple property updates\nlambda: gr.Textbox(lines=4)\n\n# Multiple component updates\nlambda: [gr.Textbox(lines=4), gr.Button(interactive=False)]\n\n# Using gr.update() for property changes\nlambda: gr.update(visible=True, interactive=False)\n```\n\nWe are working to increase the space of functions that can be transpiled to JavaScript so that they can be run in the browser. [Follow the Groovy library for more info](https://github.com/abidlabs/groovy-transpiler).\n\n\n## Complete Example\n\nHere's a more complete example showing how client side functions can improve the user experience:\n\n```python\n\"\"\"\nThis is a simple todo list app that allows you to edit tasks and mark tasks as complete.\nAll actions are performed on the client side.\n\"\"\"\nimport gradio as gr\n\ntasks = [\"Get a job\", \"Marry rich\", \"\", \"\", \"\", \"\"]\ntextboxes = []\nbuttons = []\nwith gr.Blocks() as demo:\n    with gr.Row():\n        with gr.Column(scale=3):\n            gr.Markdown(\"# A Simple Interactive Todo List\")\n        with gr.Column(scale=2):\n            with gr.Row():\n                freeze_button = gr.Button(\"Freeze tasks\", variant=\"stop\")\n                edit_button = gr.Button(\"Edit tasks\")\n    for i in range(6):\n        with gr.Row() as r:\n            t = gr.Textbox(tasks[i], placeholder=\"Enter a task\", show_label=False, container=False, scale=7, interactive=True)\n            b = gr.Button(\"\u2714\ufe0f\", interactive=bool(tasks[i]), variant=\"primary\" if tasks[i] else \"secondary\")\n            textboxes.append(t)\n            buttons.append(b)\n        t.change(lambda : gr.Button(interactive=True, variant=\"primary\"), None, b, js=True)\n        b.click(lambda : gr.Row(visible=False), None, r, js=True)\n    freeze_button.click(lambda : [gr.Textbox(interactive=False), gr.Textbox(interactive=False), gr.Textbox(interactive=False), gr.Textbox(interactive=False), gr.Textbox(interactive=False), gr.Textbox(interactive=False)], None, textboxes, js=True)\n    edit_button.click(lambda : [gr.Textbox(interactive=True), gr.Textbox(interactive=True), gr.Textbox(interactive=True), gr.Textbox(interactive=True), gr.Textbox(interactive=True), gr.Textbox(interactive=True)], None, textboxes, js=True)\n    freeze_button.click(lambda : [gr.Button(visible=False), gr.Button(visible=False), gr.Button(visible=False), gr.Button(visible=False), gr.Button(visible=False), gr.Button(visible=False)], None, buttons, js=True)\n    edit_button.click(lambda : [gr.Button(visible=True), gr.Button(visible=True), gr.Button(visible=True), gr.Button(visible=True), gr.Button(visible=True), gr.Button(visible=True)], None, buttons, js=True)\n\ndemo.launch()\n\n```\n\n\n## Behind the Scenes\n\nWhen you set `js=True`, Gradio:\n\n1. Transpiles your Python function to JavaScript\n\n2. Runs the function directly in the browser\n\n3. Still sends the request to the server (for consistency and to handle any side effects)\n\nThis provides immediate visual feedback while ensuring your application state remains consistent.\n", "tags": [], "spaces": [], "url": "/guides/client-side-functions/", "contributor": null}}