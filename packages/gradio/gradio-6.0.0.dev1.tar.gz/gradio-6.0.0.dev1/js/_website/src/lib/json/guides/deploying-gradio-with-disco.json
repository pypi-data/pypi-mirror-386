{"guide": {"name": "deploying-gradio-with-disco", "category": "other-tutorials", "pretty_category": "Other Tutorials", "guide_index": null, "absolute_index": 74, "pretty_name": "Deploying Gradio With Disco", "content": "# Self-Hosting a Gradio app with Disco\n\n\n\n\n### Introduction\n\nGradio is a fantastic open-source Python library that allows you to build and share machine learning apps and demos with just a few lines of code. While Gradio offers free hosting on [Hugging Face Spaces](https://huggingface.co/spaces), you might want to deploy your app on your own server for more control, or to integrate it with other services.\n\nThis tutorial will guide you through deploying a Gradio application on your own server using [Disco](https://disco.cloud/), an open-source platform that simplifies the deployment process. With Disco, you can enjoy the benefits of self-hosting without the usual complexities of server setup and maintenance. By the end, you'll have a working Gradio app deployed on your own server with automatic HTTPS and continuous deployment from GitHub.\n\n### Prerequisites\n\nBefore you begin, make sure you have the following:\n\n- A server with a fresh install of Ubuntu (4GB of RAM or more is recommended). You can get one from providers like [DigitalOcean](https://www.digitalocean.com/), [Hetzner](https://www.hetzner.com/cloud) or [AWS EC2](https://aws.amazon.com/ec2/).\n- A domain name that you can configure.\n- A GitHub account.\n- Basic knowledge of the command line.\n\n### Step 1: Create a Server\n\nFirst, you'll need a server to host your Gradio app. Choose a provider and create a new server with Ubuntu 24.04 as the operating system.\n\nOnce your server is up and running, take note of its IP address. You'll need it for the next step.\n\n### Step 2: Configure DNS Settings\n\nBefore going further, you need to set up two domain names. Go to your domain registrar's DNS management panel and add these records:\n\n1.  A domain for your Disco server (e.g., `disco.example.com`).\n2.  A domain for your Gradio application (e.g., `gradio.example.com`).\n\nFor the server domain, create an **A record** pointing to your server's IP address:\n\n- **Type**: A\n- **Name**: disco\n- **Value**: `<your_server_ip_address>`\n\nFor the application domain, create a **CNAME record** pointing to your server domain:\n\n- **Type**: CNAME\n- **Name**: gradio\n- **Value**: `disco.example.com`\n\nDNS changes can take a few minutes to propagate. You can verify that your server domain is resolving to the correct IP address by running `ping disco.example.com`\n\n### Step 3: Test Your Server Connection\n\nNow that your DNS is set up, let's test the SSH connection to your server from your local machine. This ensures you can access it before we hand things over to Disco.\n\n```bash\n# Replace with your server domain\nssh root@disco.example.com\n```\n\nIf the connection is successful, great! **This is the last time you'll need to SSH into this server manually.** Now, exit the SSH session to return to your local machine. This is a crucial step!\n\n```bash\nexit\n```\n\n### Step 4: Install the Disco CLI on Your Local Machine\n\n**Important:** From this point forward, all commands should be run from your **local machine's terminal**. You will not need to SSH into your server again.\n\nLet's install the Disco command-line interface (CLI) on your local machine. This is the tool you'll use to manage your deployments.\n\n```bash\ncurl https://cli-assets.letsdisco.dev/install.sh | sh\n```\n\nAfter the installation is complete, verify it's working by running:\n\n```bash\ndisco --version\n```\n\n### Step 5: Initialize Your Server with Disco\n\nNow, from your local machine, let's set up Disco on your server using the domain you configured.\n\n```bash\n# Replace with your server domain\ndisco init root@disco.example.com\n```\n\nThis command will:\n\n- Connect to your server using SSH.\n- Install Docker.\n- Set up the Disco server.\n- Configure the initial SSL certificate.\n            <div class='tip'>\n                <span class=\"inline-flex\" style=\"align-items: baseline\">\n                    <svg class=\"self-center w-5 h-5 mx-1\" xmlns=\"http://www.w3.org/2000/svg\" width=\"800px\" height=\"800px\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M9.25 18.7089C9.25 18.2894 9.58579 17.9494 10 17.9494H14C14.4142 17.9494 14.75 18.2894 14.75 18.7089C14.75 19.1283 14.4142 19.4684 14 19.4684H10C9.58579 19.4684 9.25 19.1283 9.25 18.7089ZM9.91667 21.2405C9.91667 20.821 10.2525 20.481 10.6667 20.481H13.3333C13.7475 20.481 14.0833 20.821 14.0833 21.2405C14.0833 21.66 13.7475 22 13.3333 22H10.6667C10.2525 22 9.91667 21.66 9.91667 21.2405Z\"/>\n                        <path d=\"M7.41058 13.8283L8.51463 14.8807C8.82437 15.1759 9 15.5875 9 16.0182C9 16.6653 9.518 17.1899 10.157 17.1899H13.843C14.482 17.1899 15 16.6653 15 16.0182C15 15.5875 15.1756 15.1759 15.4854 14.8807L16.5894 13.8283C18.1306 12.3481 18.9912 10.4034 18.9999 8.3817L19 8.29678C19 4.84243 15.866 2 12 2C8.13401 2 5 4.84243 5 8.29678L5.00007 8.3817C5.00875 10.4034 5.86939 12.3481 7.41058 13.8283Z\"/>\n                    </svg>\n                <span><strong>Tip:</strong></span>\n                </span>\n                <p>Disco will automatically try to use your default SSH keys. If you use a non-standard key, you can specify the path with the <code>-i</code> flag, like so: <code>disco init -i /path/to/your/ssh/key root@disco.example.com</code></p>\n            </div>\n                \n\n### Step 6: Fork the Example Gradio App\n\nFor this tutorial, we'll use an example Gradio application. Go to this [example Gradio app repository](https://github.com/letsdiscodev/example-gradio-site) on GitHub and click the \"Fork\" button to create a copy of it in your own GitHub account.\n\n### Step 7: Connect Disco to GitHub\n\nTo allow Disco to deploy your application from GitHub, you need to connect your GitHub account. Run the following command on your local machine:\n\n```bash\ndisco github:apps:add\n```\n\nThis command will open a browser window where you can authorize Disco with GitHub. You'll need to:\n\n1. Give the GitHub application a name (any name will do).\n2. Select the repository you just forked (`example-gradio-site`).\n3. Click \"Install\".\n\n### Step 8: Deploy Your Gradio App\n\nNow you're ready to deploy your Gradio app. We'll use the `projects:add` command on your local machine. Below, replace `<your_github_username>` with your GitHub username and `gradio.example.com` with the application domain you configured earlier.\n\n```bash\ndisco projects:add \\\n  --name gradio-app \\\n  --github <your_github_username>/example-gradio-site \\\n  --domain gradio.example.com\n```\n\nDisco will automatically pull your code from GitHub, build the Docker container, deploy it to your server, and set up HTTPS with Let's Encrypt for your domain.\n\n### Step 9: Test Your Deployed App\n\nOnce the deployment is complete, open your web browser and navigate to your application's domain: `https://gradio.example.com`. You should see your Gradio app running live!\n\n### Making Changes and Automatic Deployment\n\nOne of the best features of Disco is automatic deployment. Whenever you push changes to your GitHub repository, Disco will detect them, rebuild your application, and deploy it automatically.\n\nTo test this, modify the `app.py` file in your forked repository, then commit and push the changes to GitHub. Within seconds, your deployed app will be updated.\n\n### Conclusion\n\nCongratulations! You have successfully deployed a Gradio application on your own server using Disco. You now have a fully managed deployment pipeline with automatic HTTPS, fast deployments triggered by Git pushes, and complete control over your server and application.\n\nThis setup provides the best of both worlds: the flexibility and cost-effectiveness of self-hosting combined with the convenience of a platform-as-a-service. For more advanced configurations and features, be sure to check out the [Disco documentation](https://docs.letsdisco.dev/) and the [Gradio documentation](https://www.gradio.app/docs).\n", "tags": ["DEPLOYMENT"], "spaces": [], "url": "/guides/deploying-gradio-with-disco/", "contributor": null}}