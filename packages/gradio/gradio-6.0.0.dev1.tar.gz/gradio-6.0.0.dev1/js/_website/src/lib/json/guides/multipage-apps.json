{"guide": {"name": "multipage-apps", "category": "additional-features", "pretty_category": "Additional Features", "guide_index": 9, "absolute_index": 22, "pretty_name": "Multipage Apps", "content": "# Multipage Apps\n\nYour Gradio app can support multiple pages with the `Blocks.route()` method. Here's what a multipage Gradio app generally looks like:\n\n```python\nwith gr.Blocks() as demo:  # Main page\n    name = gr.Textbox(label=\"Name\")\n    ...\nwith demo.route(\"Second page\", \"/second\"):\n    num = gr.Number()\n    ...\n\ndemo.launch()\n```\n\nThis allows you to define links to separate pages, each with a separate URL, which are  linked to the top of the Gradio app in an automatically-generated navbar. \n\nHere's a complete example:\n\n```python\nimport gradio as gr\nimport random\nimport time\n\nwith gr.Blocks() as demo:\n    name = gr.Textbox(label=\"Name\")\n    output = gr.Textbox(label=\"Output Box\")\n    greet_btn = gr.Button(\"Greet\")\n    @gr.on([greet_btn.click, name.submit], inputs=name, outputs=output)\n    def greet(name):\n        return \"Hello \" + name + \"!\"\n    \n    @gr.render(inputs=name, triggers=[output.change])\n    def spell_out(name):\n        with gr.Row():\n            for letter in name:\n                gr.Textbox(letter)\n\nwith demo.route(\"Up\") as incrementer_demo:\n    num = gr.Number()\n    incrementer_demo.load(lambda: time.sleep(1) or random.randint(10, 40), None, num)\n\n    with gr.Row():\n        inc_btn = gr.Button(\"Increase\")\n        dec_btn = gr.Button(\"Decrease\")\n    inc_btn.click(fn=lambda x: x + 1, inputs=num, outputs=num, api_name=\"increment\")\n    dec_btn.click(fn=lambda x: x - 1, inputs=num, outputs=num, api_name=\"decrement\")\n    for i in range(100):\n        gr.Textbox()\n\ndef wait(x):\n    time.sleep(2)\n    return x\n\nidentity_iface = gr.Interface(wait, \"image\", \"image\", api_name=\"predict\")\n\nwith demo.route(\"Interface\") as incrementer_demo:\n    identity_iface.render()\n    gr.Interface(lambda x, y: x * y, [\"number\", \"number\"], \"number\", api_name=\"predict\")\n\ndemo.launch()\n\n```\n\nAll of these pages will share the same backend, including the same queue.\n\nNote: multipage apps do not support interactions between pages, e.g. an event listener on one page cannot output to a component on another page. Use `gr.Tabs()` for this type of functionality instead of pages.\n\n**Separate Files**\n\nFor maintainability, you may want to write the code for different pages in different files. Because any Gradio Blocks can be imported and rendered inside another Blocks using the `.render()` method, you can do this as follows.\n\nCreate one main file, say `app.py` and create separate Python files for each page:\n\n```\n- app.py\n- main_page.py\n- second_page.py\n```\n\nThe Python file corresponding to each page should consist of a regular Gradio Blocks, Interface, or ChatInterface application, e.g.\n\n`main_page.py`\n\n```py\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    gr.Image()\n\nif __name__ == \"__main__\":\n    demo.launch()\n```\n\n`second_page.py`\n\n```py\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    t = gr.Textbox()\n    demo.load(lambda : \"Loaded\", None, t)\n\nif __name__ == \"__main__\":\n    demo.launch()\n```\n\nIn your main `app.py` file, simply import the Gradio demos from the page files and `.render()` them:\n\n`app.py`\n\n```py\nimport gradio as gr\n\nimport main_page, second_page\n\nwith gr.Blocks() as demo:\n    main_page.demo.render()\nwith demo.route(\"Second Page\"):\n    second_page.demo.render()\n\nif __name__ == \"__main__\":\n    demo.launch()\n```\n\nThis allows you to run each page as an independent Gradio app for testing, while also creating a single file `app.py` that serves as the entrypoint for the complete multipage app.\n\n## Customizing the Navbar\n\nBy default, Gradio automatically generates a navigation bar for multipage apps that displays all your pages with \"Home\" as the title for the main page. You can customize the navbar behavior using the `gr.Navbar` component.\n\n### Per-Page Navbar Configuration\n\nYou can have different navbar configurations for each page of your app:\n\n```python\nimport gradio as gr\n\nwith gr.Blocks() as demo:\n    # Navbar for the main page\n    navbar = gr.Navbar(\n        visible=True,\n        main_page_name=\"Dashboard\",\n        value=[(\"About\", \"https://example.com/about\")]\n    )\n    \n    gr.Textbox(label=\"Main page content\")\n\nwith demo.route(\"Settings\"):\n    # Different navbar for the Settings page\n    navbar = gr.Navbar(\n        visible=True,\n        main_page_name=\"Home\",\n        value=[(\"Documentation\", \"https://docs.example.com\")]\n    )\n    gr.Textbox(label=\"Settings page\")\n\ndemo.launch()\n```\n\n\n**Important Notes:**\n- You can have one `gr.Navbar` component per page. Each page's navbar configuration is independent.\n- The `main_page_name` parameter customizes the title of the home page link in the navbar.\n- The `value` parameter allows you to add additional links to the navbar, which can be internal pages or external URLs.\n- If no `gr.Navbar` component is present on a page, the default navbar behavior is used (visible with \"Home\" as the home page title).\n- You can update the navbar properties using standard Gradio event handling, just like with any other component.\n\nHere's an example that demonstrates the last point:\n\n```python\nimport gradio as gr\n\nwith gr.Blocks(title=\"Navbar Demo\") as demo:\n    navbar = gr.Navbar(value=[(\"About Me\", \"https://x.com/abidlabs\")], visible=True, main_page_name=\"Dashboard\")\n    gr.Markdown(\"# Dashboard Page\")\n    hide_btn = gr.Button(\"Hide Navbar\")\n    hide_btn.click(fn=lambda : gr.Navbar(visible=False), outputs=navbar)\n    show_btn = gr.Button(\"Show Navbar\")\n    show_btn.click(fn=lambda : gr.Navbar(visible=True, main_page_name=\"Dashboard is Back!\"), outputs=navbar)\n\nwith demo.route(\"Settings\", \"/settings\"):\n    gr.Markdown(\"# Settings Page\")\n\ndemo.launch()\n\n```\n\n", "tags": [], "spaces": [], "url": "/guides/multipage-apps/", "contributor": null}}