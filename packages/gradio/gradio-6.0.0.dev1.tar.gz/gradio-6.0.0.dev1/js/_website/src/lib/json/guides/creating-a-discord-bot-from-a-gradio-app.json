{"guide": {"name": "creating-a-discord-bot-from-a-gradio-app", "category": "chatbots", "pretty_category": "Chatbots", "guide_index": 6, "absolute_index": 34, "pretty_name": "Creating A Discord Bot From A Gradio App", "content": "# \ud83d\ude80 Creating Discord Bots with Gradio \ud83d\ude80\n\n\n\nYou can make your Gradio app available as a Discord bot to let users in your Discord server interact with it directly. \n\n## How does it work?\n\nThe Discord bot will listen to messages mentioning it in channels. When it receives a message (which can include text as well as files), it will send it to your Gradio app via Gradio's built-in API. Your bot will reply with the response it receives from the API. \n\nBecause Gradio's API is very flexible, you can create Discord bots that support text, images, audio, streaming, chat history, and a wide variety of other features very easily. \n\n![](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/gradio-guides/Screen%20Recording%202024-12-18%20at%204.26.55%E2%80%AFPM.gif)\n\n## Prerequisites\n\n* Install the latest version of `gradio` and the `discord.py` libraries:\n\n```\npip install --upgrade gradio discord.py~=2.0\n```\n\n* Have a running Gradio app. This app can be running locally or on Hugging Face Spaces. In this example, we will be using the [Gradio Playground Space](https://huggingface.co/spaces/abidlabs/gradio-playground-bot), which takes in an image and/or text and generates the code to generate the corresponding Gradio app.\n\nNow, we are ready to get started!\n\n\n### 1. Create a Discord application\n\nFirst, go to the [Discord apps dashboard](https://discord.com/developers/applications). Look for the \"New Application\" button and click it. Give your application a name, and then click \"Create\".\n\n![](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/gradio-guides/discord-4.png)\n\nOn the resulting screen, you will see basic information about your application. Under the Settings section, click on the \"Bot\" option. You can update your bot's username if you would like.\n\nThen click on the \"Reset Token\" button. A new token will be generated. Copy it as we will need it for the next step.\n\nScroll down to the section that says \"Privileged Gateway Intents\". Your bot will need certain permissions to work correctly. In this tutorial, we will only be using the \"Message Content Intent\" so click the toggle to enable this intent. Save the changes.\n\n![](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/gradio-guides/discord-3.png)\n\n\n\n### 2. Write a Discord bot\n\nLet's start by writing a very simple Discord bot, just to make sure that everything is working. Write the following Python code in a file called `bot.py`, pasting the discord bot token from the previous step:\n\n```python\n# bot.py\nimport discord\n\nTOKEN = #PASTE YOUR DISCORD BOT TOKEN HERE\n\nclient = discord.Client()\n\n@client.event\nasync def on_ready():\n    print(f'{client.user} has connected to Discord!')\n\nclient.run(TOKEN)\n```\n\nNow, run this file: `python bot.py`, which should run and print a message like:\n\n```text\nWe have logged in as GradioPlaygroundBot#1451\n```\n\nIf that is working, we are ready to add Gradio-specific code. We will be using the [Gradio Python Client](https://www.gradio.app/guides/getting-started-with-the-python-client) to query the Gradio Playground Space mentioned above. Here's the updated `bot.py` file:\n\n```python\nimport discord\nfrom gradio_client import Client, handle_file\nimport httpx\nimport os\n\nTOKEN = #PASTE YOUR DISCORD BOT TOKEN HERE\n\nintents = discord.Intents.default()\nintents.message_content = True\n\nclient = discord.Client(intents=intents)\ngradio_client = Client(\"abidlabs/gradio-playground-bot\")\n\ndef download_image(attachment):\n    response = httpx.get(attachment.url)\n    image_path = f\"./images/{attachment.filename}\"\n    os.makedirs(\"./images\", exist_ok=True)\n    with open(image_path, \"wb\") as f:\n        f.write(response.content)\n    return image_path\n\n@client.event\nasync def on_ready():\n    print(f'We have logged in as {client.user}')\n\n@client.event\nasync def on_message(message):\n    # Ignore messages from the bot itself\n    if message.author == client.user:\n        return\n\n    # Check if the bot is mentioned in the message and reply\n    if client.user in message.mentions:\n        # Extract the message content without the bot mention\n        clean_message = message.content.replace(f\"<@{client.user.id}>\", \"\").strip()\n\n        # Handle images (only the first image is used)\n        files = []\n        if message.attachments:\n            for attachment in message.attachments:\n                if any(attachment.filename.lower().endswith(ext) for ext in ['png', 'jpg', 'jpeg', 'gif', 'webp']):\n                    image_path = download_image(attachment)\n                    files.append(handle_file(image_path))\n                    break\n        \n        # Stream the responses to the channel\n        for response in gradio_client.submit(\n            message={\"text\": clean_message, \"files\": files},\n        ):\n            await message.channel.send(response[-1])\n\nclient.run(TOKEN)\n```\n\n### 3. Add the bot to your Discord Server\n\nNow we are ready to install the bot on our server. Go back to the [Discord apps dashboard](https://discord.com/developers/applications). Under the Settings section, click on the \"OAuth2\" option. Scroll down to the \"OAuth2 URL Generator\" box and select the \"bot\" checkbox:\n\n![](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/gradio-guides/discord-2.png)\n\n\n\nThen in \"Bot Permissions\" box that pops up underneath, enable the following permissions:\n\n![](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/gradio-guides/discord-1.png)\n\n\nCopy the generated URL that appears underneath, which should look something like:\n\n```text\nhttps://discord.com/oauth2/authorize?client_id=1319011745452265575&permissions=377957238784&integration_type=0&scope=bot\n```\n\nPaste it into your browser, which should allow you to add the Discord bot to any Discord server that you manage.\n\n\n### 4. That's it!\n\nNow you can mention your bot from any channel in your Discord server, optionally attach an image, and it will respond with generated Gradio app code!\n\nThe bot will:\n1. Listen for mentions\n2. Process any attached images\n3. Send the text and images to your Gradio app\n4. Stream the responses back to the Discord channel\n\n This is just a basic example - you can extend it to handle more types of files, add error handling, or integrate with different Gradio apps.\n\n![](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/gradio-guides/Screen%20Recording%202024-12-18%20at%204.26.55%E2%80%AFPM.gif)\n\nIf you build a Discord bot from a Gradio app, feel free to share it on X and tag [the Gradio account](https://x.com/Gradio), and we are happy to help you amplify!", "tags": ["CHAT", "DEPLOY", "DISCORD"], "spaces": [], "url": "/guides/creating-a-discord-bot-from-a-gradio-app/", "contributor": null}}