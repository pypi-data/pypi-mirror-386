{"guide": {"name": "creating-a-website-widget-from-a-gradio-chatbot", "category": "chatbots", "pretty_category": "Chatbots", "guide_index": 8, "absolute_index": 36, "pretty_name": "Creating A Website Widget From A Gradio Chatbot", "content": "# \ud83d\ude80 Creating a Website Chat Widget with Gradio \ud83d\ude80\n\n\n\nYou can make your Gradio Chatbot available as an embedded chat widget on your website, similar to popular customer service widgets like Intercom. This is particularly useful for:\n\n- Adding AI assistance to your documentation pages\n- Providing interactive help on your portfolio or product website\n- Creating a custom chatbot interface for your Gradio app\n\n![](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/gradio-guides/Screen%20Recording%202024-12-19%20at%203.32.46%E2%80%AFPM.gif)\n\n## How does it work?\n\nThe chat widget appears as a small button in the corner of your website. When clicked, it opens a chat interface that communicates with your Gradio app via the JavaScript Client API. Users can ask questions and receive responses directly within the widget.\n\n\n## Prerequisites\n\n* A running Gradio app (local or on Hugging Face Spaces). In this example, we'll use the [Gradio Playground Space](https://huggingface.co/spaces/abidlabs/gradio-playground-bot), which helps generate code for Gradio apps based on natural language descriptions.\n\n### 1. Create and Style the Chat Widget\n\nFirst, add this HTML and CSS to your website:\n\n```html\n<div id=\"chat-widget\" class=\"chat-widget\">\n    <button id=\"chat-toggle\" class=\"chat-toggle\">\ud83d\udcac</button>\n    <div id=\"chat-container\" class=\"chat-container hidden\">\n        <div id=\"chat-header\">\n            <h3>Gradio Assistant</h3>\n            <button id=\"close-chat\">\u00d7</button>\n        </div>\n        <div id=\"chat-messages\"></div>\n        <div id=\"chat-input-area\">\n            <input type=\"text\" id=\"chat-input\" placeholder=\"Ask a question...\">\n            <button id=\"send-message\">Send</button>\n        </div>\n    </div>\n</div>\n\n<style>\n.chat-widget {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n    z-index: 1000;\n}\n\n.chat-toggle {\n    width: 50px;\n    height: 50px;\n    border-radius: 50%;\n    background: #007bff;\n    border: none;\n    color: white;\n    font-size: 24px;\n    cursor: pointer;\n}\n\n.chat-container {\n    position: fixed;\n    bottom: 80px;\n    right: 20px;\n    width: 300px;\n    height: 400px;\n    background: white;\n    border-radius: 10px;\n    box-shadow: 0 0 10px rgba(0,0,0,0.1);\n    display: flex;\n    flex-direction: column;\n}\n\n.chat-container.hidden {\n    display: none;\n}\n\n#chat-header {\n    padding: 10px;\n    background: #007bff;\n    color: white;\n    border-radius: 10px 10px 0 0;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n#chat-messages {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 10px;\n}\n\n#chat-input-area {\n    padding: 10px;\n    border-top: 1px solid #eee;\n    display: flex;\n}\n\n#chat-input {\n    flex-grow: 1;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    margin-right: 8px;\n}\n\n.message {\n    margin: 8px 0;\n    padding: 8px;\n    border-radius: 4px;\n}\n\n.user-message {\n    background: #e9ecef;\n    margin-left: 20px;\n}\n\n.bot-message {\n    background: #f8f9fa;\n    margin-right: 20px;\n}\n</style>\n```\n\n### 2. Add the JavaScript\n\nThen, add the following JavaScript code (which uses the Gradio JavaScript Client to connect to the Space) to your website by including this in the `<head>` section of your website:\n\n```html\n<script type=\"module\">\n    import { Client } from \"https://cdn.jsdelivr.net/npm/@gradio/client/dist/index.min.js\";\n    \n    async function initChatWidget() {\n        const client = await Client.connect(\"https://abidlabs-gradio-playground-bot.hf.space\");\n        \n        const chatToggle = document.getElementById('chat-toggle');\n        const chatContainer = document.getElementById('chat-container');\n        const closeChat = document.getElementById('close-chat');\n        const chatInput = document.getElementById('chat-input');\n        const sendButton = document.getElementById('send-message');\n        const messagesContainer = document.getElementById('chat-messages');\n    \n        chatToggle.addEventListener('click', () => {\n            chatContainer.classList.remove('hidden');\n        });\n    \n        closeChat.addEventListener('click', () => {\n            chatContainer.classList.add('hidden');\n        });\n    \n        async function sendMessage() {\n            const userMessage = chatInput.value.trim();\n            if (!userMessage) return;\n\n            appendMessage(userMessage, 'user');\n            chatInput.value = '';\n\n            try {\n                const result = await client.predict(\"/chat\", {\n                    message: {\"text\": userMessage, \"files\": []}\n                });\n                const message = result.data[0];\n                console.log(result.data[0]);\n                const botMessage = result.data[0].join('\\n');\n                appendMessage(botMessage, 'bot');\n            } catch (error) {\n                console.error('Error:', error);\n                appendMessage('Sorry, there was an error processing your request.', 'bot');\n            }\n        }\n    \n        function appendMessage(text, sender) {\n            const messageDiv = document.createElement('div');\n            messageDiv.className = `message ${sender}-message`;\n            \n            if (sender === 'bot') {\n                messageDiv.innerHTML = marked.parse(text);\n            } else {\n                messageDiv.textContent = text;\n            }\n            \n            messagesContainer.appendChild(messageDiv);\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }\n    \n        sendButton.addEventListener('click', sendMessage);\n        chatInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') sendMessage();\n        });\n    }\n    \n    initChatWidget();\n</script>\n```\n\n### 3. That's it!\n\nYour website now has a chat widget that connects to your Gradio app! Users can click the chat button to open the widget and start interacting with your app.\n\n### Customization\n\nYou can customize the appearance of the widget by modifying the CSS. Some ideas:\n- Change the colors to match your website's theme\n- Adjust the size and position of the widget\n- Add animations for opening/closing\n- Modify the message styling\n\n![](https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/gradio-guides/Screen%20Recording%202024-12-19%20at%203.32.46%E2%80%AFPM.gif)\n\nIf you build a website widget from a Gradio app, feel free to share it on X and tag [the Gradio account](https://x.com/Gradio), and we are happy to help you amplify!", "tags": ["CHAT", "DEPLOY", "WEB"], "spaces": [], "url": "/guides/creating-a-website-widget-from-a-gradio-chatbot/", "contributor": null}}