# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'GetAppIdVersionsResult',
    'AwaitableGetAppIdVersionsResult',
    'get_app_id_versions',
    'get_app_id_versions_output',
]

@pulumi.output_type
class GetAppIdVersionsResult:
    """
    A collection of values returned by getAppIdVersions.
    """
    def __init__(__self__, id=None, max_results=None, next_token=None, token=None, versions=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_results and not isinstance(max_results, int):
            raise TypeError("Expected argument 'max_results' to be a int")
        pulumi.set(__self__, "max_results", max_results)
        if next_token and not isinstance(next_token, str):
            raise TypeError("Expected argument 'next_token' to be a str")
        pulumi.set(__self__, "next_token", next_token)
        if token and not isinstance(token, str):
            raise TypeError("Expected argument 'token' to be a str")
        pulumi.set(__self__, "token", token)
        if versions and not isinstance(versions, list):
            raise TypeError("Expected argument 'versions' to be a list")
        pulumi.set(__self__, "versions", versions)

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="maxResults")
    def max_results(self) -> Optional[_builtins.int]:
        """
        Max number of results. Defaults to `100`.
        """
        return pulumi.get(self, "max_results")

    @_builtins.property
    @pulumi.getter(name="nextToken")
    def next_token(self) -> _builtins.str:
        """
        Token for the next page of results.
        """
        return pulumi.get(self, "next_token")

    @_builtins.property
    @pulumi.getter
    def token(self) -> Optional[_builtins.str]:
        """
        Pagination token.
        """
        return pulumi.get(self, "token")

    @_builtins.property
    @pulumi.getter
    def versions(self) -> Sequence[_builtins.str]:
        """
        List of AppId versions.
        """
        return pulumi.get(self, "versions")


class AwaitableGetAppIdVersionsResult(GetAppIdVersionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAppIdVersionsResult(
            id=self.id,
            max_results=self.max_results,
            next_token=self.next_token,
            token=self.token,
            versions=self.versions)


def get_app_id_versions(max_results: Optional[_builtins.int] = None,
                        token: Optional[_builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAppIdVersionsResult:
    """
    Data source get a list of AppId versions.

    ## Admin Permission Type

    * `Rulestack`

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudngfwaws as cloudngfwaws

    example = cloudngfwaws.get_app_id_versions()
    ```


    :param _builtins.int max_results: Max number of results. Defaults to `100`.
    :param _builtins.str token: Pagination token.
    """
    __args__ = dict()
    __args__['maxResults'] = max_results
    __args__['token'] = token
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudngfwaws:index/getAppIdVersions:getAppIdVersions', __args__, opts=opts, typ=GetAppIdVersionsResult).value

    return AwaitableGetAppIdVersionsResult(
        id=pulumi.get(__ret__, 'id'),
        max_results=pulumi.get(__ret__, 'max_results'),
        next_token=pulumi.get(__ret__, 'next_token'),
        token=pulumi.get(__ret__, 'token'),
        versions=pulumi.get(__ret__, 'versions'))
def get_app_id_versions_output(max_results: Optional[pulumi.Input[Optional[_builtins.int]]] = None,
                               token: Optional[pulumi.Input[Optional[_builtins.str]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAppIdVersionsResult]:
    """
    Data source get a list of AppId versions.

    ## Admin Permission Type

    * `Rulestack`

    ## Example Usage

    ```python
    import pulumi
    import pulumi_cloudngfwaws as cloudngfwaws

    example = cloudngfwaws.get_app_id_versions()
    ```


    :param _builtins.int max_results: Max number of results. Defaults to `100`.
    :param _builtins.str token: Pagination token.
    """
    __args__ = dict()
    __args__['maxResults'] = max_results
    __args__['token'] = token
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudngfwaws:index/getAppIdVersions:getAppIdVersions', __args__, opts=opts, typ=GetAppIdVersionsResult)
    return __ret__.apply(lambda __response__: GetAppIdVersionsResult(
        id=pulumi.get(__response__, 'id'),
        max_results=pulumi.get(__response__, 'max_results'),
        next_token=pulumi.get(__response__, 'next_token'),
        token=pulumi.get(__response__, 'token'),
        versions=pulumi.get(__response__, 'versions')))
