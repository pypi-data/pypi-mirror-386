class e{constructor(e="module-data-content"){this.container=document.getElementById(e),this.currentData=null,this.currentType=null,this.globalJsonExpanded="true"===localStorage.getItem("dashboard-json-expanded"),this.fullEventDataExpanded="true"===localStorage.getItem("dashboard-full-event-expanded"),document.addEventListener("jsonToggleChanged",e=>{this.globalJsonExpanded=e.detail.expanded,this.updateAllJsonSections()}),document.addEventListener("fullEventToggleChanged",e=>{this.fullEventDataExpanded=e.detail.expanded,this.updateAllFullEventSections()})}display(e,n=null){if(this.container)switch(this.currentData=e,this.currentType=n,n||(n=this.detectType(e)),this.container.innerHTML="",n){case"event":this.displayEvent(e);break;case"agent":this.displayAgent(e);break;case"tool":this.displayTool(e);break;case"todo":this.displayTodo(e);break;case"instruction":this.displayInstruction(e);break;case"session":this.displaySession(e);break;case"file_operation":if(e.name&&(e.params||e.tool_parameters)){const n=this.convertToolToFileOperation(e);this.displayFileOperation(n)}else this.displayFileOperation(e);break;case"hook":this.displayHook(e);break;default:this.displayGeneric(e)}else console.warn("UnifiedDataViewer: Container not found")}detectType(e){return e&&"object"==typeof e?e.hook_event_name||e.event_type||e.type&&e.timestamp?"event":e.agent_name||e.agentName||e.name&&("active"===e.status||"completed"===e.status)?"agent":e.tool_name||"TodoWrite"===e.name||"Read"===e.name||e.tool_parameters||e.params&&e.icon||e.name&&"tool"===e.type?"tool":!e.todos||e.name||e.params?e.content&&e.activeForm&&e.status&&!e.name&&!e.params?"todo":e.text&&e.preview&&"user_instruction"===e.type?"instruction":e.session_id&&(e.startTime||e.lastActivity)?"session":e.file_path&&(e.operations||e.operation)?"file_operation":"Read"!==e.name&&"Write"!==e.name&&"Edit"!==e.name&&"MultiEdit"!==e.name&&"Grep"!==e.name&&"Glob"!==e.name||!e.params?.file_path&&!e.tool_parameters?.file_path?e.event_type&&(e.hook_name||e.subtype)?"hook":"generic":"file_operation":"todo":"generic"}displayEvent(e){let n=`\n            <div class="unified-viewer-header">\n                <h6>${this.formatEventType(e)}</h6>\n                <span class="unified-viewer-timestamp">${this.formatTimestamp(e.timestamp)}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;if(n+='<div class="primary-data">',n+=this.formatEventDetails(e),e.tool_name||e.data?.tool_name){const t=e.tool_name||e.data.tool_name;n+=`\n                <div class="detail-row highlight">\n                    <span class="detail-label">Tool:</span>\n                    <span class="detail-value">${this.getToolIcon(t)} ${t}</span>\n                </div>\n            `;const a=e.tool_parameters||e.data?.tool_parameters;a&&(a.file_path&&(n+=`\n                        <div class="detail-row">\n                            <span class="detail-label">File:</span>\n                            <span class="detail-value code">${a.file_path}</span>\n                        </div>\n                    `),a.command&&(n+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Command:</span>\n                            <pre class="code-snippet">${this.escapeHtml(a.command)}</pre>\n                        </div>\n                    `))}n+="</div>",n+=this.createCollapsibleJSON(e,"Full Event Data"),n+="</div>",this.container.innerHTML=n}displayAgent(e){const n=this.getAgentIcon(e.name||e.agentName),t=e.name||e.agentName||"Unknown Agent",a=this.formatStatus(e.status);let s=`\n            <div class="unified-viewer-header">\n                <h6>${n} ${t}</h6>\n                <span class="unified-viewer-status">${a}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;if(s+='<div class="primary-data">',s+=`\n            <div class="detail-row highlight">\n                <span class="detail-label">Status:</span>\n                <span class="detail-value ${this.formatStatusClass(a)}">${a}</span>\n            </div>\n        `,e.tools&&e.tools.length>0){const n=e.tools.filter(e=>"in_progress"===e.status),t=e.tools.filter(e=>"completed"===e.status);n.length>0&&(s+='\n                    <div class="active-tools-section">\n                        <span class="section-label">üîÑ Active Tools:</span>\n                        <div class="tools-grid">\n                ',n.forEach(e=>{s+=`\n                        <div class="tool-chip active">\n                            ${this.getToolIcon(e.name)} ${e.name}\n                        </div>\n                    `}),s+="</div></div>"),s+=`\n                <div class="detail-row">\n                    <span class="detail-label">Tools Summary:</span>\n                    <span class="detail-value">\n                        ${n.length} active, ${t.length} completed, ${e.tools.length} total\n                    </span>\n                </div>\n            `}(e.currentTask||e.description)&&(s+=`\n                <div class="detail-row">\n                    <span class="detail-label">Current Task:</span>\n                    <span class="detail-value">${e.currentTask||e.description}</span>\n                </div>\n            `),s+="</div>",s+=this.createCollapsibleJSON(e,"Full Agent Details"),s+="</div>",this.container.innerHTML=s}displayTool(e){const n=e.name||e.tool_name||"Unknown Tool",t=this.getToolIcon(n),a=this.formatStatus(e.status);if("TodoWrite"===n)return void this.displayTodoWriteTool(e);let s=`\n            <div class="unified-viewer-header">\n                <h6>${t} ${n}</h6>\n                <span class="unified-viewer-status">${a}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;const i=e.params||e.tool_parameters||{};"Read"===n||"Edit"===n||"Write"===n?i.file_path&&(s+=`\n                    <div class="primary-data">\n                        <div class="detail-row highlight">\n                            <span class="detail-label">üìÅ File:</span>\n                            <span class="detail-value code">${i.file_path}</span>\n                        </div>\n                `,i.old_string&&(s+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Old Text:</span>\n                            <pre class="code-snippet">${this.escapeHtml(i.old_string.substring(0,200))}${i.old_string.length>200?"...":""}</pre>\n                        </div>\n                    `),i.new_string&&(s+=`\n                        <div class="detail-row">\n                            <span class="detail-label">New Text:</span>\n                            <pre class="code-snippet">${this.escapeHtml(i.new_string.substring(0,200))}${i.new_string.length>200?"...":""}</pre>\n                        </div>\n                    `),s+="</div>"):"Bash"===n?i.command&&(s+=`\n                    <div class="primary-data">\n                        <div class="detail-row highlight">\n                            <span class="detail-label">üíª Command:</span>\n                            <pre class="code-snippet">${this.escapeHtml(i.command)}</pre>\n                        </div>\n                    </div>\n                `):"Grep"===n||"Glob"===n?i.pattern&&(s+=`\n                    <div class="primary-data">\n                        <div class="detail-row highlight">\n                            <span class="detail-label">üîç Pattern:</span>\n                            <span class="detail-value code">${this.escapeHtml(i.pattern)}</span>\n                        </div>\n                `,i.path&&(s+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Path:</span>\n                            <span class="detail-value">${i.path}</span>\n                        </div>\n                    `),s+="</div>"):"Task"===n&&i.subagent_type&&(s+=`\n                    <div class="primary-data">\n                        <div class="detail-row highlight">\n                            <span class="detail-label">ü§ñ Delegating to:</span>\n                            <span class="detail-value">${i.subagent_type} agent</span>\n                        </div>\n                `,i.description&&(s+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Task:</span>\n                            <span class="detail-value">${i.description}</span>\n                        </div>\n                    `),s+="</div>"),s+=`\n            <div class="detail-row">\n                <span class="detail-label">Status:</span>\n                <span class="detail-value">${a}</span>\n            </div>\n        `,e.callCount&&(s+=`\n                <div class="detail-row">\n                    <span class="detail-label">Call Count:</span>\n                    <span class="detail-value">${e.callCount}</span>\n                </div>\n            `),s+=this.createCollapsibleJSON(e,"Full Tool Details"),s+="</div>",this.container.innerHTML=s}displayTodoWriteTool(e){const n=this.formatStatus(e.status),t=(e.params||e.tool_parameters||{}).todos||[];let a=`\n            <div class="unified-viewer-header">\n                <h6>üìù TodoWrite</h6>\n                <span class="unified-viewer-status">${n}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;if(t.length>0){const e=this.getTodoStatusCounts(t);a+=`\n                <div class="todo-status-line">\n                    <span class="status-inline">‚úÖ ${e.completed} Done</span>\n                    <span class="status-inline">üîÑ ${e.in_progress} Active</span>\n                    <span class="status-inline">‚è≥ ${e.pending} Pending</span>\n                </div>\n            `,a+='\n                <div class="todo-list-primary">\n            ',t.forEach((e,n)=>{const t=this.getCheckboxIcon(e.status),s="in_progress"===e.status&&e.activeForm||e.content,i=this.formatStatusClass(e.status);a+=`\n                    <div class="todo-item ${e.status}">\n                        <span class="todo-icon ${i}">${t}</span>\n                        <span class="todo-text">${this.escapeHtml(s)}</span>\n                        ${"in_progress"===e.status?'<span class="todo-badge active">ACTIVE</span>':""}\n                    </div>\n                `}),a+="\n                </div>\n            "}else a+='\n                <div class="detail-row">\n                    <span class="detail-value">No todos in list</span>\n                </div>\n            ';e.callCount&&e.callCount>1&&(a+=`\n                <div class="detail-row">\n                    <span class="detail-label">Updates:</span>\n                    <span class="detail-value">${e.callCount}</span>\n                </div>\n            `),a+=this.createCollapsibleJSON(e,"Full Details"),a+="</div>",this.container.innerHTML=a}displayTodo(e){let n;n=e.todos&&Array.isArray(e.todos)?e.todos:Array.isArray(e)?e:e.content&&e.activeForm&&e.status?[e]:[];let t='\n            <div class="unified-viewer-header">\n                <h6>üìã Todo List</h6>\n            </div>\n            <div class="unified-viewer-content">\n        ';n.length>0?(t+='\n                <div class="todo-list-primary">\n            ',n.forEach(e=>{const n=this.getCheckboxIcon(e.status),a="in_progress"===e.status&&e.activeForm||e.content,s=this.formatStatusClass(e.status);t+=`\n                    <div class="todo-item ${e.status}">\n                        <span class="todo-icon ${s}">${n}</span>\n                        <span class="todo-text">${this.escapeHtml(a)}</span>\n                        <span class="todo-status-text ${s}">${e.status.replace("_"," ")}</span>\n                    </div>\n                `}),t+="\n                </div>\n            "):t+='\n                <div class="detail-section">\n                    <div class="no-todos">No todo items found</div>\n                </div>\n            ',t+="</div>",this.container.innerHTML=t}displayInstruction(e){let n=`\n            <div class="unified-viewer-header">\n                <h6>üí¨ User Instruction</h6>\n                <span class="unified-viewer-timestamp">${this.formatTimestamp(e.timestamp)}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;n+=`\n            <div class="primary-data">\n                <div class="instruction-content">\n                    ${this.escapeHtml(e.text)}\n                </div>\n                <div class="instruction-meta">\n                    <span class="meta-item">üìè ${e.text.length} characters</span>\n                    <span class="meta-item">üïê ${this.formatTimestamp(e.timestamp)}</span>\n                </div>\n            </div>\n        `,Object.keys(e).length>3&&(n+=this.createCollapsibleJSON(e,"Full Instruction Data")),n+="</div>",this.container.innerHTML=n}displaySession(e){let n=`\n            <div class="unified-viewer-header">\n                <h6>üéØ Session: ${e.session_id||e.id}</h6>\n                <span class="unified-viewer-status">${this.formatStatus(e.status||"active")}</span>\n            </div>\n            <div class="unified-viewer-content">\n                <div class="detail-row">\n                    <span class="detail-label">Session ID:</span>\n                    <span class="detail-value">${e.session_id||e.id}</span>\n                </div>\n                <div class="detail-row">\n                    <span class="detail-label">Start Time:</span>\n                    <span class="detail-value">${this.formatTimestamp(e.startTime||e.timestamp)}</span>\n                </div>\n        `;e.working_directory&&(n+=`\n                <div class="detail-row">\n                    <span class="detail-label">Working Directory:</span>\n                    <span class="detail-value">${e.working_directory}</span>\n                </div>\n            `),e.git_branch&&(n+=`\n                <div class="detail-row">\n                    <span class="detail-label">Git Branch:</span>\n                    <span class="detail-value">${e.git_branch}</span>\n                </div>\n            `),void 0!==e.eventCount&&(n+=`\n                <div class="detail-row">\n                    <span class="detail-label">Events:</span>\n                    <span class="detail-value">${e.eventCount}</span>\n                </div>\n            `),n+="</div>",this.container.innerHTML=n}displayFileOperation(e){const n=e.file_path?e.file_path.split("/").pop():"Unknown File",t=this.isSingleFileOperation(e),a=this.getFileIcon(e.file_path),s=this.getFileType(e.file_path);let i=`\n            <div class="unified-viewer-header ${t?"single-file-header":""}">\n                <h6>${a} File: ${n}</h6>\n                <span class="unified-viewer-count">${e.operations?e.operations.length:1} operation${e.operations&&1!==e.operations.length?"s":""}</span>\n                ${s?`<span class="file-type-badge">${s}</span>`:""}\n            </div>\n            <div class="unified-viewer-content">\n                <div class="primary-data">\n                    <div class="detail-row highlight">\n                        <span class="detail-label">üìÅ File Path:</span>\n                        <span class="detail-value code clickable-file-path" \n                              onclick="window.showFileViewerModal && window.showFileViewerModal('${e.file_path}')"\n                              title="Click to view file contents\\nKeyboard: Hover + V key or Ctrl/Cmd + Click\\nFile: ${e.file_path}"\n                              tabindex="0"\n                              role="button"\n                              aria-label="Open file ${e.file_path} in viewer"\n                              onkeypress="if(event.key==='Enter'||event.key===' '){window.showFileViewerModal && window.showFileViewerModal('${e.file_path}')}">${e.file_path}</span>\n                    </div>\n        `;if(e.file_path){const n=this.shouldShowInlinePreview(e);if(i+=`\n                <div class="file-actions ${t?"single-file-actions":""}">\n                    <button class="file-action-btn view-file-btn ${t?"primary-action":""}" \n                            onclick="window.showFileViewerModal && window.showFileViewerModal('${e.file_path}')"\n                            title="View file contents with syntax highlighting">\n                        ${a} View File Contents\n                    </button>\n                    ${t&&this.isTextFile(e.file_path)?`\n                        <button class="file-action-btn inline-preview-btn" \n                                onclick="window.unifiedDataViewer && window.unifiedDataViewer.toggleInlinePreview('${e.file_path}', this)"\n                                title="Toggle inline preview">\n                            üìñ Quick Preview\n                        </button>\n                    `:""}\n                </div>\n            `,t&&n){i+=`\n                    <div class="inline-preview-container" id="preview-${this.generatePreviewId(e.file_path)}" style="display: none;">\n                        <div class="inline-preview-loading">Loading preview...</div>\n                    </div>\n                `}}i+="</div>",e.operations&&Array.isArray(e.operations)&&(i+=`\n                <div class="detail-section">\n                    <span class="detail-section-title">Operations (${e.operations.length}):</span>\n                    <div class="operations-list">\n                        ${e.operations.map((e,n)=>`\n                            <div class="operation-item">\n                                <div class="operation-header">\n                                    <span class="operation-type">${this.getOperationIcon(e.operation)} ${e.operation}</span>\n                                    <span class="operation-timestamp">${this.formatTimestamp(e.timestamp)}</span>\n                                </div>\n                                <div class="operation-details">\n                                    <span class="operation-agent">by ${e.agent||"Unknown"}</span>\n                                    ${e.workingDirectory?`<span class="operation-dir">in ${e.workingDirectory}</span>`:""}\n                                </div>\n                            </div>\n                        `).join("")}\n                    </div>\n                </div>\n            `),i+=this.createCollapsibleJSON(e,"Full File Data"),i+="</div>",this.container.innerHTML=i}displayHook(e){let n=`\n            <div class="unified-viewer-header">\n                <h6>üîó Hook: ${e.event_type||e.subtype||"unknown"}</h6>\n                <span class="unified-viewer-timestamp">${this.formatTimestamp(e.timestamp)}</span>\n            </div>\n            <div class="unified-viewer-content">\n        `;n+=this.formatHookDetails(e),n+="</div>",this.container.innerHTML=n}displayGeneric(e){let n=`\n            <div class="unified-viewer-header">\n                <h6>üìä Data Details</h6>\n                ${e.timestamp?`<span class="unified-viewer-timestamp">${this.formatTimestamp(e.timestamp)}</span>`:""}\n            </div>\n            <div class="unified-viewer-content">\n        `;if("object"==typeof e&&null!==e){const t=["id","name","type","status","timestamp","text","content","message"];for(let a of t)if(void 0!==e[a]){let t=e[a];"string"==typeof t&&t.length>200&&(t=t.substring(0,200)+"..."),n+=`\n                        <div class="detail-row">\n                            <span class="detail-label">${a}:</span>\n                            <span class="detail-value">${this.escapeHtml(String(t))}</span>\n                        </div>\n                    `}}else n+=`<div class="simple-value">${this.escapeHtml(String(e))}</div>`;n+="</div>",this.container.innerHTML=n}formatEventType(e){return e.type&&e.subtype?e.type===e.subtype||"generic"===e.subtype?e.type:`${e.type}.${e.subtype}`:e.type?e.type:e.hook_event_name?e.hook_event_name:"unknown"}formatEventDetails(e){switch(e.data,e.type){case"hook":return this.formatHookDetails(e);case"agent":return this.formatAgentEventDetails(e);case"todo":return this.formatTodoEventDetails(e);case"session":return this.formatSessionEventDetails(e);default:return this.formatGenericEventDetails(e)}}formatHookDetails(e){const n=e.data||{},t=e.subtype||e.event_type||"unknown";let a=`\n            <div class="detail-row">\n                <span class="detail-label">Hook Type:</span>\n                <span class="detail-value">${t}</span>\n            </div>\n        `;switch(t){case"user_prompt":const e=n.prompt_text||n.prompt_preview||"";a+=`\n                    <div class="detail-row">\n                        <span class="detail-label">Prompt:</span>\n                        <div class="detail-value prompt-text">${this.escapeHtml(e)}</div>\n                    </div>\n                `;break;case"pre_tool":case"post_tool":a+=`\n                    <div class="detail-row">\n                        <span class="detail-label">Tool:</span>\n                        <span class="detail-value">${n.tool_name||"Unknown tool"}</span>\n                    </div>\n                `,n.operation_type&&(a+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Operation:</span>\n                            <span class="detail-value">${n.operation_type}</span>\n                        </div>\n                    `),"post_tool"===t&&n.duration_ms&&(a+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Duration:</span>\n                            <span class="detail-value">${n.duration_ms}ms</span>\n                        </div>\n                    `);break;case"subagent_start":case"subagent_stop":a+=`\n                    <div class="detail-row">\n                        <span class="detail-label">Agent:</span>\n                        <span class="detail-value">${n.agent_type||n.agent||"Unknown"}</span>\n                    </div>\n                `,"subagent_start"===t&&n.prompt&&(a+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Task:</span>\n                            <div class="detail-value">${this.escapeHtml(n.prompt)}</div>\n                        </div>\n                    `),"subagent_stop"===t&&n.reason&&(a+=`\n                        <div class="detail-row">\n                            <span class="detail-label">Reason:</span>\n                            <span class="detail-value">${n.reason}</span>\n                        </div>\n                    `)}return a}formatAgentEventDetails(e){const n=e.data||{};let t="";return(n.agent_type||n.name)&&(t+=`\n                <div class="detail-row">\n                    <span class="detail-label">Agent Type:</span>\n                    <span class="detail-value">${n.agent_type||n.name}</span>\n                </div>\n            `),e.subtype&&(t+=`\n                <div class="detail-row">\n                    <span class="detail-label">Action:</span>\n                    <span class="detail-value">${e.subtype}</span>\n                </div>\n            `),t}formatTodoEventDetails(e){const n=e.data||{};let t="";if(n.todos&&Array.isArray(n.todos)){const e=this.getTodoStatusCounts(n.todos);t+=`\n                <div class="detail-row">\n                    <span class="detail-label">Todo Items:</span>\n                    <span class="detail-value">${n.todos.length} total</span>\n                </div>\n                <div class="detail-row">\n                    <span class="detail-label">Status:</span>\n                    <span class="detail-value">${e.completed} completed, ${e.in_progress} in progress</span>\n                </div>\n            `}return t}formatSessionEventDetails(e){const n=e.data||{};let t="";return n.session_id&&(t+=`\n                <div class="detail-row">\n                    <span class="detail-label">Session ID:</span>\n                    <span class="detail-value">${n.session_id}</span>\n                </div>\n            `),e.subtype&&(t+=`\n                <div class="detail-row">\n                    <span class="detail-label">Action:</span>\n                    <span class="detail-value">${e.subtype}</span>\n                </div>\n            `),t}formatGenericEventDetails(e){const n=e.data||{};let t="";const a=["message","description","value","result"];for(let s of a)if(void 0!==n[s]){let e=n[s];"string"==typeof e&&e.length>200&&(e=e.substring(0,200)+"..."),t+=`\n                    <div class="detail-row">\n                        <span class="detail-label">${s}:</span>\n                        <span class="detail-value">${this.escapeHtml(String(e))}</span>\n                    </div>\n                `}return t}formatEventData(e){const n=e.data;return n&&0!==Object.keys(n).length?`\n            <div class="detail-section">\n                <span class="detail-section-title">Event Data:</span>\n                <pre class="event-data-json">${this.escapeHtml(JSON.stringify(n,null,2))}</pre>\n            </div>\n        `:""}formatParameters(e,n="Parameters"){if(!e||0===Object.keys(e).length)return`\n                <div class="detail-section">\n                    <span class="detail-section-title">${n}:</span>\n                    <div class="no-params">No parameters</div>\n                </div>\n            `;const t=Object.keys(e);return`\n            <div class="detail-section">\n                <span class="detail-section-title">${n} (${t.length}):</span>\n                <div class="params-list">\n                    ${t.map(n=>{const t=e[n];return`\n                            <div class="param-item">\n                                <div class="param-key">${n}:</div>\n                                <div class="param-value">${this.formatParameterValue(t)}</div>\n                            </div>\n                        `}).join("")}\n                </div>\n            </div>\n        `}formatParameterValue(e){if("string"==typeof e)return e.length>500?`<pre class="param-text-long">${this.escapeHtml(e.substring(0,500)+"...\n\n[Content truncated - "+e.length+" total characters]")}</pre>`:e.length>100?`<pre class="param-text">${this.escapeHtml(e)}</pre>`:`<span class="param-text-short">${this.escapeHtml(e)}</span>`;if("object"!=typeof e||null===e)return`<span class="param-primitive">${this.escapeHtml(String(e))}</span>`;if(Array.isArray(e)&&e.length>0&&e[0].hasOwnProperty("content")&&e[0].hasOwnProperty("status"))return this.formatTodosAsParameter(e);try{return`<pre class="param-json">${this.escapeHtml(JSON.stringify(e,null,2))}</pre>`}catch(n){return'<span class="param-error">Error displaying object</span>'}}formatTodosAsParameter(e){const n=this.getTodoStatusCounts(e);let t=`\n            <div class="param-todos">\n                <div class="param-todos-header">\n                    Array of todo objects (${e.length} items)\n                </div>\n                <div class="param-todos-summary">\n                    ${n.completed} completed ‚Ä¢ ${n.in_progress} in progress ‚Ä¢ ${n.pending} pending\n                </div>\n                <div class="param-todos-list">\n        `;return e.forEach((e,n)=>{const a=this.getCheckboxIcon(e.status),s="in_progress"===e.status&&e.activeForm||e.content,i=this.formatStatusClass(e.status);t+=`\n                <div class="param-todo-item ${e.status}">\n                    <div class="param-todo-checkbox">\n                        <span class="param-checkbox-icon ${i}">${a}</span>\n                    </div>\n                    <div class="param-todo-text">\n                        <span class="param-todo-content">${this.escapeHtml(s)}</span>\n                        <span class="param-todo-status-badge ${i}">${e.status.replace("_"," ")}</span>\n                    </div>\n                </div>\n            `}),t+="\n                </div>\n            </div>\n        ",t}isSingleFileOperation(e){return!e.operations||1===e.operations.length}getFileIcon(e){if(!e)return"üìÑ";const n=e.split(".").pop()?.toLowerCase();return{js:"üü®",jsx:"‚öõÔ∏è",ts:"üî∑",tsx:"‚öõÔ∏è",py:"üêç",java:"‚òï",cpp:"‚ö°",c:"‚ö°",cs:"#Ô∏è‚É£",php:"üêò",rb:"üíé",go:"üêπ",rs:"ü¶Ä",swift:"ü¶â",kt:"üÖ∫",scala:"üéØ",html:"üåê",htm:"üåê",css:"üé®",scss:"üé®",sass:"üé®",less:"üé®",vue:"üíö",json:"üìã",xml:"üìÑ",yaml:"‚öôÔ∏è",yml:"‚öôÔ∏è",toml:"‚öôÔ∏è",ini:"‚öôÔ∏è",conf:"‚öôÔ∏è",config:"‚öôÔ∏è",md:"üìù",txt:"üìÉ",rtf:"üìÉ",pdf:"üìï",doc:"üìò",docx:"üìò",jpg:"üñºÔ∏è",jpeg:"üñºÔ∏è",png:"üñºÔ∏è",gif:"üñºÔ∏è",svg:"üé®",webp:"üñºÔ∏è",ico:"üñºÔ∏è",zip:"üóúÔ∏è",tar:"üóúÔ∏è",gz:"üóúÔ∏è",rar:"üóúÔ∏è","7z":"üóúÔ∏è",sql:"üóÉÔ∏è",db:"üóÉÔ∏è",log:"üìä",env:"üîê",lock:"üîí"}[n]||"üìÑ"}getFileType(e){if(!e)return null;const n=e.split(".").pop()?.toLowerCase();return{js:"JavaScript",jsx:"React JSX",ts:"TypeScript",tsx:"React TSX",py:"Python",java:"Java",cpp:"C++",c:"C",cs:"C#",php:"PHP",rb:"Ruby",go:"Go",rs:"Rust",html:"HTML",css:"CSS",scss:"SCSS",json:"JSON",xml:"XML",yaml:"YAML",yml:"YAML",md:"Markdown",txt:"Text",sql:"SQL",log:"Log File"}[n]||null}shouldShowInlinePreview(e){return this.isSingleFileOperation(e)&&this.isTextFile(e.file_path)}isTextFile(e){if(!e)return!1;const n=e.split(".").pop()?.toLowerCase();return["txt","md","json","xml","yaml","yml","ini","conf","config","js","jsx","ts","tsx","py","java","cpp","c","cs","php","rb","go","rs","swift","kt","scala","html","htm","css","scss","sass","less","vue","sql","log","env","gitignore","dockerignore"].includes(n)}async toggleInlinePreview(e,n){const t=`preview-${this.generatePreviewId(e)}`,a=document.getElementById(t);a?"none"===a.style.display?(a.style.display="block",n.innerHTML="üìñ Hide Preview",await this.loadInlinePreview(e,a)):(a.style.display="none",n.innerHTML="üìñ Quick Preview"):console.warn("Preview container not found")}async loadInlinePreview(e,n){try{n.innerHTML=`\n                <div class="inline-preview-header">\n                    <span class="preview-label">Quick Preview:</span>\n                    <span class="preview-file">${e}</span>\n                </div>\n                <div class="inline-preview-content">\n                    <div class="preview-note">\n                        üí° Inline preview feature ready - API integration needed\n                        <br>Click "View File Contents" for full syntax-highlighted view\n                    </div>\n                </div>\n            `}catch(t){n.innerHTML=`\n                <div class="inline-preview-error">\n                    ‚ùå Could not load preview: ${t.message}\n                </div>\n            `}}generateId(){return Date.now().toString(36)+Math.random().toString(36).substr(2,9)}generatePreviewId(e){return btoa(e).replace(/[^a-zA-Z0-9]/g,"")}formatTimestamp(e){if(!e)return"Unknown time";try{const n=new Date(e);return isNaN(n.getTime())?"Invalid date":n.toLocaleString()}catch(n){return"Invalid date"}}formatStatus(e){if(!e)return"unknown";return{active:"üü¢ Active",completed:"‚úÖ Completed",in_progress:"üîÑ In Progress",pending:"‚è≥ Pending",error:"‚ùå Error",failed:"‚ùå Failed"}[e]||e}formatStatusClass(e){return`status-${e}`}getAgentIcon(e){return{PM:"üéØ",Engineer:"üîß","Engineer Agent":"üîß",Research:"üîç","Research Agent":"üîç",QA:"‚úÖ","QA Agent":"‚úÖ",Architect:"üèóÔ∏è","Architect Agent":"üèóÔ∏è",Ops:"‚öôÔ∏è","Ops Agent":"‚öôÔ∏è"}[e]||"ü§ñ"}getToolIcon(e){return{Read:"üëÅÔ∏è",Write:"‚úçÔ∏è",Edit:"‚úèÔ∏è",MultiEdit:"üìù",Bash:"üíª",Grep:"üîç",Glob:"üìÇ",LS:"üìÅ",TodoWrite:"üìù",Task:"üìã",WebFetch:"üåê"}[e]||"üîß"}getCheckboxIcon(e){return{pending:"‚è≥",in_progress:"üîÑ",completed:"‚úÖ"}[e]||"‚ùì"}getOperationIcon(e){return{read:"üëÅÔ∏è",write:"‚úçÔ∏è",edit:"‚úèÔ∏è",delete:"üóëÔ∏è",create:"üìù",search:"üîç",list:"üìÇ",copy:"üìã",move:"üì¶",bash:"üíª"}[e.toLowerCase()]||"üìÑ"}convertToolToFileOperation(e){const n=e.params||e.tool_parameters||{},t=n.file_path||n.path||n.notebook_path;if(!t)return e;const a={operation:e.name.toLowerCase(),timestamp:e.timestamp||(new Date).toISOString(),agent:"Activity Tool",sessionId:e.sessionId||"unknown",details:{parameters:n,tool_name:e.name,status:e.status||"completed"}};return{file_path:t,operations:[a],lastOperation:a.timestamp,originalTool:e}}getTodoStatusCounts(e){const n={completed:0,in_progress:0,pending:0};return e.forEach(e=>{n.hasOwnProperty(e.status)&&n[e.status]++}),n}escapeHtml(e){if("string"!=typeof e)return"";const n=document.createElement("div");return n.textContent=e,n.innerHTML}toggleJsonSection(e,n){this.globalJsonExpanded=!this.globalJsonExpanded,localStorage.setItem("dashboard-json-expanded",this.globalJsonExpanded.toString()),this.updateAllJsonSections(),document.dispatchEvent(new CustomEvent("jsonToggleChanged",{detail:{expanded:this.globalJsonExpanded}}))}toggleFullEventSection(e,n){this.fullEventDataExpanded=!this.fullEventDataExpanded,localStorage.setItem("dashboard-full-event-expanded",this.fullEventDataExpanded.toString()),this.updateAllFullEventSections(),document.dispatchEvent(new CustomEvent("fullEventToggleChanged",{detail:{expanded:this.fullEventDataExpanded}}))}updateAllJsonSections(){const e=document.querySelectorAll(".unified-json-content"),n=document.querySelectorAll(".unified-json-toggle");e.forEach(e=>{this.globalJsonExpanded?e.style.display="block":e.style.display="none"}),n.forEach(e=>{const n=e.textContent.substring(2);this.globalJsonExpanded?(e.innerHTML="‚ñº "+n,e.classList.add("expanded")):(e.innerHTML="‚ñ∂ "+n,e.classList.remove("expanded"))})}updateAllFullEventSections(){const e=document.querySelectorAll(".full-event-content"),n=document.querySelectorAll(".full-event-toggle");e.forEach(e=>{this.fullEventDataExpanded?e.style.display="block":e.style.display="none"}),n.forEach(e=>{const n=e.textContent.substring(2);this.fullEventDataExpanded?(e.innerHTML="‚ñº "+n,e.classList.add("expanded")):(e.innerHTML="‚ñ∂ "+n,e.classList.remove("expanded"))})}createCollapsibleJSON(e,n="Full Details"){const t=`json-details-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,a=this.cleanDataForDisplay(e),s=n.includes("Full Event")||n.includes("Full Details")||n.includes("Full Agent")||n.includes("Full Tool"),i=s?this.fullEventDataExpanded:this.globalJsonExpanded;return`\n            <div class="collapsible-json-section">\n                <button class="collapsible-json-toggle ${s?"full-event-toggle":"unified-json-toggle"} ${i?"expanded":""}" \n                        data-section-id="${t}"\n                        data-is-full-event="${s}"\n                        onclick="window.unifiedDataViewer.${s?"toggleFullEventSection":"toggleJsonSection"}('${t}', this)">\n                    ${i?"‚ñº":"‚ñ∂"} ${n}\n                </button>\n                <div id="${t}" class="collapsible-json-content ${s?"full-event-content":"unified-json-content"}" style="display: ${i?"block":"none"};">\n                    <pre class="json-viewer">${this.escapeHtml(JSON.stringify(a,null,2))}</pre>\n                </div>\n            </div>\n        `}cleanDataForDisplay(e){const n=new WeakSet;return JSON.parse(JSON.stringify(e,(e,t)=>{if("object"==typeof t&&null!==t){if(n.has(t))return"[Circular Reference]";n.add(t)}return"string"==typeof t&&t.length>1e3?t.substring(0,1e3)+"... [truncated]":"function"==typeof t?"[Function]":t}))}clear(){this.container&&(this.container.innerHTML=""),this.currentData=null,this.currentType=null}getCurrentData(){return this.currentData}getCurrentType(){return this.currentType}hasData(){return null!==this.currentData}}window.UnifiedDataViewer=e,"undefined"!=typeof window&&(window.unifiedDataViewer=new e,window.toggleFullEventSection=function(e,n){window.unifiedDataViewer&&window.unifiedDataViewer.toggleFullEventSection(e,n)},window.toggleJsonSection=function(e,n){window.unifiedDataViewer&&window.unifiedDataViewer.toggleJsonSection(e,n)}),"undefined"!=typeof window&&window.addEventListener("DOMContentLoaded",function(){window.unifiedDataViewer||(window.unifiedDataViewer=new e),document.addEventListener("keydown",function(e){if((e.ctrlKey||e.metaKey)&&e.target.classList.contains("clickable-file-path")){e.preventDefault();const n=e.target.textContent.trim();window.showFileViewerModal&&window.showFileViewerModal(n)}if("v"===e.key.toLowerCase()&&document.querySelector(".clickable-file-path:hover")){const n=document.querySelector(".clickable-file-path:hover");if(n&&window.showFileViewerModal){e.preventDefault();const t=n.textContent.trim();window.showFileViewerModal(t)}}})});export{e as U};
//# sourceMappingURL=unified-data-viewer.js.map
