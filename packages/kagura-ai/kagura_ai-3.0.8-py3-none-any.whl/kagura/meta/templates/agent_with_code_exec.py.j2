"""{{ spec.name }}

{{ spec.description }}

Auto-generated by Kagura Meta Agent (Phase 2: Code-Aware)
Generated: {{ timestamp }}
Kagura version: {{ kagura_version }}

This agent has Python code execution capabilities via execute_code tool.
"""

from kagura import agent
from kagura.agents import execute_code
{% if spec.has_memory %}
from kagura.core.memory import MemoryManager
{% endif %}
{% if "web_search" in tools %}
from kagura.web import web_search
{% endif %}

@agent(
    model="{{ spec.model | default('gpt-5-mini') }}",
    tools=[execute_code{% for tool in tools if tool != 'execute_code' %}, {{ tool }}{% endfor %}],
    {% if spec.has_memory %}enable_memory=True,{% endif %}
)
async def {{ spec.name }}(
    {{ spec.input_type | lower }}_input: {{ spec.input_type }}
    {%- if spec.has_memory %},
    memory: MemoryManager
    {%- endif %}
) -> {{ spec.output_type }}:
    """{{ spec.description }}

    **IMPORTANT: Code Execution Capabilities**

    This agent has access to Python code execution via the execute_code tool.
    Use it when you need to:
    - Process data (CSV, JSON, Excel files)
    - Perform calculations or algorithms
    - Manipulate files or parse content
    - Transform or analyze data
    - Generate visualizations

    **How to use execute_code:**

    ```python
    # Example 1: Data processing
    code = '''
import pandas as pd
df = pd.read_csv("data.csv")
result = df["column"].mean()
print(result)
'''
    result = execute_code(code)

    # Example 2: Calculations
    code = '''
def fibonacci(n):
    if n <= 1:
        return n
    a, b = 0, 1
    for _ in range(2, n + 1):
        a, b = b, a + b
    return b

print(fibonacci(100))
'''
    result = execute_code(code)
    ```

    **System Prompt:**
    {{ spec.system_prompt }}

    Args:
        {{ spec.input_type | lower }}_input: {{ spec.description }}
        {%- if spec.has_memory %}
        memory: Conversation memory manager
        {%- endif %}

    Returns:
        {{ spec.output_type }}: Processed result
    """
    pass


# Example usage
if __name__ == "__main__":
    import asyncio

    async def main():
        {% if spec.examples %}
        # Example from spec
        example_input = {{ spec.examples[0].input | tojson }}
        {% else %}
        # Example usage
        example_input = "example input"
        {% endif %}

        result = await {{ spec.name }}(example_input)
        print("Result:", result)

    asyncio.run(main())
