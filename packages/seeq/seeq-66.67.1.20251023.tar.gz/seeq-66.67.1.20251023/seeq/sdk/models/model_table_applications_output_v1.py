# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ModelTableApplicationsOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mappings': 'list[ModelApplicationMappingV1]',
        'model_guid': 'str',
        'model_name': 'str'
    }

    attribute_map = {
        'mappings': 'mappings',
        'model_guid': 'modelGuid',
        'model_name': 'modelName'
    }

    def __init__(self, mappings=None, model_guid=None, model_name=None):
        """
        ModelTableApplicationsOutputV1 - a model defined in Swagger
        """

        self._mappings = None
        self._model_guid = None
        self._model_name = None

        if mappings is not None:
          self.mappings = mappings
        if model_guid is not None:
          self.model_guid = model_guid
        if model_name is not None:
          self.model_name = model_name

    @property
    def mappings(self):
        """
        Gets the mappings of this ModelTableApplicationsOutputV1.
        Mapping of column definition IDs or literals to a feature ID

        :return: The mappings of this ModelTableApplicationsOutputV1.
        :rtype: list[ModelApplicationMappingV1]
        """
        return self._mappings

    @mappings.setter
    def mappings(self, mappings):
        """
        Sets the mappings of this ModelTableApplicationsOutputV1.
        Mapping of column definition IDs or literals to a feature ID

        :param mappings: The mappings of this ModelTableApplicationsOutputV1.
        :type: list[ModelApplicationMappingV1]
        """

        self._mappings = mappings

    @property
    def model_guid(self):
        """
        Gets the model_guid of this ModelTableApplicationsOutputV1.
        Model GUID

        :return: The model_guid of this ModelTableApplicationsOutputV1.
        :rtype: str
        """
        return self._model_guid

    @model_guid.setter
    def model_guid(self, model_guid):
        """
        Sets the model_guid of this ModelTableApplicationsOutputV1.
        Model GUID

        :param model_guid: The model_guid of this ModelTableApplicationsOutputV1.
        :type: str
        """

        self._model_guid = model_guid

    @property
    def model_name(self):
        """
        Gets the model_name of this ModelTableApplicationsOutputV1.
        Model Name

        :return: The model_name of this ModelTableApplicationsOutputV1.
        :rtype: str
        """
        return self._model_name

    @model_name.setter
    def model_name(self, model_name):
        """
        Sets the model_name of this ModelTableApplicationsOutputV1.
        Model Name

        :param model_name: The model_name of this ModelTableApplicationsOutputV1.
        :type: str
        """

        self._model_name = model_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ModelTableApplicationsOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
