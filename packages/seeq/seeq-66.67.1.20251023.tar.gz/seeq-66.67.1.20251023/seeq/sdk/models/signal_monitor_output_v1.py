# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class SignalMonitorOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'creator': 'IdentityPreviewV1',
        'cron_schedule': 'list[str]',
        'description': 'str',
        'effective_permissions': 'PermissionsV1',
        'enabled': 'bool',
        'executor_id': 'str',
        'first_run_look_back': 'int',
        'frequency': 'str',
        'id': 'str',
        'is_archived': 'bool',
        'is_redacted': 'bool',
        'last_run_at': 'str',
        'name': 'str',
        'query_range_look_ahead': 'int',
        'sample_event_types': 'list[str]',
        'scoped_to': 'str',
        'signal_ids': 'list[str]',
        'status_message': 'str',
        'translation_key': 'str',
        'type': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'creator': 'creator',
        'cron_schedule': 'cronSchedule',
        'description': 'description',
        'effective_permissions': 'effectivePermissions',
        'enabled': 'enabled',
        'executor_id': 'executorId',
        'first_run_look_back': 'firstRunLookBack',
        'frequency': 'frequency',
        'id': 'id',
        'is_archived': 'isArchived',
        'is_redacted': 'isRedacted',
        'last_run_at': 'lastRunAt',
        'name': 'name',
        'query_range_look_ahead': 'queryRangeLookAhead',
        'sample_event_types': 'sampleEventTypes',
        'scoped_to': 'scopedTo',
        'signal_ids': 'signalIds',
        'status_message': 'statusMessage',
        'translation_key': 'translationKey',
        'type': 'type',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at=None, creator=None, cron_schedule=None, description=None, effective_permissions=None, enabled=None, executor_id=None, first_run_look_back=None, frequency=None, id=None, is_archived=False, is_redacted=False, last_run_at=None, name=None, query_range_look_ahead=None, sample_event_types=None, scoped_to=None, signal_ids=None, status_message=None, translation_key=None, type=None, updated_at=None):
        """
        SignalMonitorOutputV1 - a model defined in Swagger
        """

        self._created_at = None
        self._creator = None
        self._cron_schedule = None
        self._description = None
        self._effective_permissions = None
        self._enabled = None
        self._executor_id = None
        self._first_run_look_back = None
        self._frequency = None
        self._id = None
        self._is_archived = None
        self._is_redacted = None
        self._last_run_at = None
        self._name = None
        self._query_range_look_ahead = None
        self._sample_event_types = None
        self._scoped_to = None
        self._signal_ids = None
        self._status_message = None
        self._translation_key = None
        self._type = None
        self._updated_at = None

        if created_at is not None:
          self.created_at = created_at
        if creator is not None:
          self.creator = creator
        if cron_schedule is not None:
          self.cron_schedule = cron_schedule
        if description is not None:
          self.description = description
        if effective_permissions is not None:
          self.effective_permissions = effective_permissions
        if enabled is not None:
          self.enabled = enabled
        if executor_id is not None:
          self.executor_id = executor_id
        if first_run_look_back is not None:
          self.first_run_look_back = first_run_look_back
        if frequency is not None:
          self.frequency = frequency
        if id is not None:
          self.id = id
        if is_archived is not None:
          self.is_archived = is_archived
        if is_redacted is not None:
          self.is_redacted = is_redacted
        if last_run_at is not None:
          self.last_run_at = last_run_at
        if name is not None:
          self.name = name
        if query_range_look_ahead is not None:
          self.query_range_look_ahead = query_range_look_ahead
        if sample_event_types is not None:
          self.sample_event_types = sample_event_types
        if scoped_to is not None:
          self.scoped_to = scoped_to
        if signal_ids is not None:
          self.signal_ids = signal_ids
        if status_message is not None:
          self.status_message = status_message
        if translation_key is not None:
          self.translation_key = translation_key
        if type is not None:
          self.type = type
        if updated_at is not None:
          self.updated_at = updated_at

    @property
    def created_at(self):
        """
        Gets the created_at of this SignalMonitorOutputV1.
        The time the signal monitor was created

        :return: The created_at of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this SignalMonitorOutputV1.
        The time the signal monitor was created

        :param created_at: The created_at of this SignalMonitorOutputV1.
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator(self):
        """
        Gets the creator of this SignalMonitorOutputV1.

        :return: The creator of this SignalMonitorOutputV1.
        :rtype: IdentityPreviewV1
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this SignalMonitorOutputV1.

        :param creator: The creator of this SignalMonitorOutputV1.
        :type: IdentityPreviewV1
        """

        self._creator = creator

    @property
    def cron_schedule(self):
        """
        Gets the cron_schedule of this SignalMonitorOutputV1.
        The signal monitor's check interval(s) as a list of cron expressions (see https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)

        :return: The cron_schedule of this SignalMonitorOutputV1.
        :rtype: list[str]
        """
        return self._cron_schedule

    @cron_schedule.setter
    def cron_schedule(self, cron_schedule):
        """
        Sets the cron_schedule of this SignalMonitorOutputV1.
        The signal monitor's check interval(s) as a list of cron expressions (see https://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html)

        :param cron_schedule: The cron_schedule of this SignalMonitorOutputV1.
        :type: list[str]
        """

        self._cron_schedule = cron_schedule

    @property
    def description(self):
        """
        Gets the description of this SignalMonitorOutputV1.
        Clarifying information or other plain language description of this item

        :return: The description of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this SignalMonitorOutputV1.
        Clarifying information or other plain language description of this item

        :param description: The description of this SignalMonitorOutputV1.
        :type: str
        """

        self._description = description

    @property
    def effective_permissions(self):
        """
        Gets the effective_permissions of this SignalMonitorOutputV1.

        :return: The effective_permissions of this SignalMonitorOutputV1.
        :rtype: PermissionsV1
        """
        return self._effective_permissions

    @effective_permissions.setter
    def effective_permissions(self, effective_permissions):
        """
        Sets the effective_permissions of this SignalMonitorOutputV1.

        :param effective_permissions: The effective_permissions of this SignalMonitorOutputV1.
        :type: PermissionsV1
        """

        self._effective_permissions = effective_permissions

    @property
    def enabled(self):
        """
        Gets the enabled of this SignalMonitorOutputV1.
        Whether this signal monitor is enabled or not

        :return: The enabled of this SignalMonitorOutputV1.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this SignalMonitorOutputV1.
        Whether this signal monitor is enabled or not

        :param enabled: The enabled of this SignalMonitorOutputV1.
        :type: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def executor_id(self):
        """
        Gets the executor_id of this SignalMonitorOutputV1.
        ID of the monitor's creator

        :return: The executor_id of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._executor_id

    @executor_id.setter
    def executor_id(self, executor_id):
        """
        Sets the executor_id of this SignalMonitorOutputV1.
        ID of the monitor's creator

        :param executor_id: The executor_id of this SignalMonitorOutputV1.
        :type: str
        """
        if executor_id is None:
            raise ValueError("Invalid value for `executor_id`, must not be `None`")

        self._executor_id = executor_id

    @property
    def first_run_look_back(self):
        """
        Gets the first_run_look_back of this SignalMonitorOutputV1.
        On first run, how far to look back for samples, in seconds

        :return: The first_run_look_back of this SignalMonitorOutputV1.
        :rtype: int
        """
        return self._first_run_look_back

    @first_run_look_back.setter
    def first_run_look_back(self, first_run_look_back):
        """
        Sets the first_run_look_back of this SignalMonitorOutputV1.
        On first run, how far to look back for samples, in seconds

        :param first_run_look_back: The first_run_look_back of this SignalMonitorOutputV1.
        :type: int
        """

        self._first_run_look_back = first_run_look_back

    @property
    def frequency(self):
        """
        Gets the frequency of this SignalMonitorOutputV1.
        The minimum time between monitor runs, in minutes.

        :return: The frequency of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """
        Sets the frequency of this SignalMonitorOutputV1.
        The minimum time between monitor runs, in minutes.

        :param frequency: The frequency of this SignalMonitorOutputV1.
        :type: str
        """

        self._frequency = frequency

    @property
    def id(self):
        """
        Gets the id of this SignalMonitorOutputV1.
        The ID that can be used to interact with the item

        :return: The id of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this SignalMonitorOutputV1.
        The ID that can be used to interact with the item

        :param id: The id of this SignalMonitorOutputV1.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_archived(self):
        """
        Gets the is_archived of this SignalMonitorOutputV1.
        Whether item is archived

        :return: The is_archived of this SignalMonitorOutputV1.
        :rtype: bool
        """
        return self._is_archived

    @is_archived.setter
    def is_archived(self, is_archived):
        """
        Sets the is_archived of this SignalMonitorOutputV1.
        Whether item is archived

        :param is_archived: The is_archived of this SignalMonitorOutputV1.
        :type: bool
        """

        self._is_archived = is_archived

    @property
    def is_redacted(self):
        """
        Gets the is_redacted of this SignalMonitorOutputV1.
        Whether item is redacted

        :return: The is_redacted of this SignalMonitorOutputV1.
        :rtype: bool
        """
        return self._is_redacted

    @is_redacted.setter
    def is_redacted(self, is_redacted):
        """
        Sets the is_redacted of this SignalMonitorOutputV1.
        Whether item is redacted

        :param is_redacted: The is_redacted of this SignalMonitorOutputV1.
        :type: bool
        """

        self._is_redacted = is_redacted

    @property
    def last_run_at(self):
        """
        Gets the last_run_at of this SignalMonitorOutputV1.
        The last time the signal monitor job was run

        :return: The last_run_at of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._last_run_at

    @last_run_at.setter
    def last_run_at(self, last_run_at):
        """
        Sets the last_run_at of this SignalMonitorOutputV1.
        The last time the signal monitor job was run

        :param last_run_at: The last_run_at of this SignalMonitorOutputV1.
        :type: str
        """

        self._last_run_at = last_run_at

    @property
    def name(self):
        """
        Gets the name of this SignalMonitorOutputV1.
        The human readable name

        :return: The name of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this SignalMonitorOutputV1.
        The human readable name

        :param name: The name of this SignalMonitorOutputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def query_range_look_ahead(self):
        """
        Gets the query_range_look_ahead of this SignalMonitorOutputV1.
        Query range look ahead in seconds

        :return: The query_range_look_ahead of this SignalMonitorOutputV1.
        :rtype: int
        """
        return self._query_range_look_ahead

    @query_range_look_ahead.setter
    def query_range_look_ahead(self, query_range_look_ahead):
        """
        Sets the query_range_look_ahead of this SignalMonitorOutputV1.
        Query range look ahead in seconds

        :param query_range_look_ahead: The query_range_look_ahead of this SignalMonitorOutputV1.
        :type: int
        """
        if query_range_look_ahead is None:
            raise ValueError("Invalid value for `query_range_look_ahead`, must not be `None`")

        self._query_range_look_ahead = query_range_look_ahead

    @property
    def sample_event_types(self):
        """
        Gets the sample_event_types of this SignalMonitorOutputV1.
        The list of sample event types to detect. The list can contain one or more of the following values: NEW, BECAME_CERTAIN, STILL_UNCERTAIN, EXTINCT

        :return: The sample_event_types of this SignalMonitorOutputV1.
        :rtype: list[str]
        """
        return self._sample_event_types

    @sample_event_types.setter
    def sample_event_types(self, sample_event_types):
        """
        Sets the sample_event_types of this SignalMonitorOutputV1.
        The list of sample event types to detect. The list can contain one or more of the following values: NEW, BECAME_CERTAIN, STILL_UNCERTAIN, EXTINCT

        :param sample_event_types: The sample_event_types of this SignalMonitorOutputV1.
        :type: list[str]
        """
        if sample_event_types is None:
            raise ValueError("Invalid value for `sample_event_types`, must not be `None`")

        self._sample_event_types = sample_event_types

    @property
    def scoped_to(self):
        """
        Gets the scoped_to of this SignalMonitorOutputV1.
        The ID of the workbook to which this item is scoped or null if it is in the global scope.

        :return: The scoped_to of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._scoped_to

    @scoped_to.setter
    def scoped_to(self, scoped_to):
        """
        Sets the scoped_to of this SignalMonitorOutputV1.
        The ID of the workbook to which this item is scoped or null if it is in the global scope.

        :param scoped_to: The scoped_to of this SignalMonitorOutputV1.
        :type: str
        """

        self._scoped_to = scoped_to

    @property
    def signal_ids(self):
        """
        Gets the signal_ids of this SignalMonitorOutputV1.
        The IDs of the monitored signals

        :return: The signal_ids of this SignalMonitorOutputV1.
        :rtype: list[str]
        """
        return self._signal_ids

    @signal_ids.setter
    def signal_ids(self, signal_ids):
        """
        Sets the signal_ids of this SignalMonitorOutputV1.
        The IDs of the monitored signals

        :param signal_ids: The signal_ids of this SignalMonitorOutputV1.
        :type: list[str]
        """
        if signal_ids is None:
            raise ValueError("Invalid value for `signal_ids`, must not be `None`")

        self._signal_ids = signal_ids

    @property
    def status_message(self):
        """
        Gets the status_message of this SignalMonitorOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :return: The status_message of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """
        Sets the status_message of this SignalMonitorOutputV1.
        A plain language status message with information about any issues that may have been encountered during an operation

        :param status_message: The status_message of this SignalMonitorOutputV1.
        :type: str
        """

        self._status_message = status_message

    @property
    def translation_key(self):
        """
        Gets the translation_key of this SignalMonitorOutputV1.
        The item's translation key, if any

        :return: The translation_key of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._translation_key

    @translation_key.setter
    def translation_key(self, translation_key):
        """
        Sets the translation_key of this SignalMonitorOutputV1.
        The item's translation key, if any

        :param translation_key: The translation_key of this SignalMonitorOutputV1.
        :type: str
        """

        self._translation_key = translation_key

    @property
    def type(self):
        """
        Gets the type of this SignalMonitorOutputV1.
        The type of the item

        :return: The type of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this SignalMonitorOutputV1.
        The type of the item

        :param type: The type of this SignalMonitorOutputV1.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def updated_at(self):
        """
        Gets the updated_at of this SignalMonitorOutputV1.
        The last time the signal monitor was updated

        :return: The updated_at of this SignalMonitorOutputV1.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this SignalMonitorOutputV1.
        The last time the signal monitor was updated

        :param updated_at: The updated_at of this SignalMonitorOutputV1.
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, SignalMonitorOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
