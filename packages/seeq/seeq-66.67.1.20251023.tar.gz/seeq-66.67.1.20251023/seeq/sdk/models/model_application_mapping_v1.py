# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ModelApplicationMappingV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_id': 'str',
        'feature_id': 'str',
        'item_id_input': 'str',
        'numeric_input': 'float',
        'numeric_input_uom': 'str',
        'text_input': 'str'
    }

    attribute_map = {
        'column_id': 'columnId',
        'feature_id': 'featureId',
        'item_id_input': 'itemIdInput',
        'numeric_input': 'numericInput',
        'numeric_input_uom': 'numericInputUom',
        'text_input': 'textInput'
    }

    def __init__(self, column_id=None, feature_id=None, item_id_input=None, numeric_input=None, numeric_input_uom=None, text_input=None):
        """
        ModelApplicationMappingV1 - a model defined in Swagger
        """

        self._column_id = None
        self._feature_id = None
        self._item_id_input = None
        self._numeric_input = None
        self._numeric_input_uom = None
        self._text_input = None

        if column_id is not None:
          self.column_id = column_id
        if feature_id is not None:
          self.feature_id = feature_id
        if item_id_input is not None:
          self.item_id_input = item_id_input
        if numeric_input is not None:
          self.numeric_input = numeric_input
        if numeric_input_uom is not None:
          self.numeric_input_uom = numeric_input_uom
        if text_input is not None:
          self.text_input = text_input

    @property
    def column_id(self):
        """
        Gets the column_id of this ModelApplicationMappingV1.
        Column definition ID

        :return: The column_id of this ModelApplicationMappingV1.
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """
        Sets the column_id of this ModelApplicationMappingV1.
        Column definition ID

        :param column_id: The column_id of this ModelApplicationMappingV1.
        :type: str
        """

        self._column_id = column_id

    @property
    def feature_id(self):
        """
        Gets the feature_id of this ModelApplicationMappingV1.
        Feature

        :return: The feature_id of this ModelApplicationMappingV1.
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """
        Sets the feature_id of this ModelApplicationMappingV1.
        Feature

        :param feature_id: The feature_id of this ModelApplicationMappingV1.
        :type: str
        """

        self._feature_id = feature_id

    @property
    def item_id_input(self):
        """
        Gets the item_id_input of this ModelApplicationMappingV1.
        Item ID input value

        :return: The item_id_input of this ModelApplicationMappingV1.
        :rtype: str
        """
        return self._item_id_input

    @item_id_input.setter
    def item_id_input(self, item_id_input):
        """
        Sets the item_id_input of this ModelApplicationMappingV1.
        Item ID input value

        :param item_id_input: The item_id_input of this ModelApplicationMappingV1.
        :type: str
        """

        self._item_id_input = item_id_input

    @property
    def numeric_input(self):
        """
        Gets the numeric_input of this ModelApplicationMappingV1.
        Numeric literal input value

        :return: The numeric_input of this ModelApplicationMappingV1.
        :rtype: float
        """
        return self._numeric_input

    @numeric_input.setter
    def numeric_input(self, numeric_input):
        """
        Sets the numeric_input of this ModelApplicationMappingV1.
        Numeric literal input value

        :param numeric_input: The numeric_input of this ModelApplicationMappingV1.
        :type: float
        """

        self._numeric_input = numeric_input

    @property
    def numeric_input_uom(self):
        """
        Gets the numeric_input_uom of this ModelApplicationMappingV1.
        Numeric literal input unit of measure

        :return: The numeric_input_uom of this ModelApplicationMappingV1.
        :rtype: str
        """
        return self._numeric_input_uom

    @numeric_input_uom.setter
    def numeric_input_uom(self, numeric_input_uom):
        """
        Sets the numeric_input_uom of this ModelApplicationMappingV1.
        Numeric literal input unit of measure

        :param numeric_input_uom: The numeric_input_uom of this ModelApplicationMappingV1.
        :type: str
        """

        self._numeric_input_uom = numeric_input_uom

    @property
    def text_input(self):
        """
        Gets the text_input of this ModelApplicationMappingV1.
        Text literal input value

        :return: The text_input of this ModelApplicationMappingV1.
        :rtype: str
        """
        return self._text_input

    @text_input.setter
    def text_input(self, text_input):
        """
        Sets the text_input of this ModelApplicationMappingV1.
        Text literal input value

        :param text_input: The text_input of this ModelApplicationMappingV1.
        :type: str
        """

        self._text_input = text_input

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ModelApplicationMappingV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
