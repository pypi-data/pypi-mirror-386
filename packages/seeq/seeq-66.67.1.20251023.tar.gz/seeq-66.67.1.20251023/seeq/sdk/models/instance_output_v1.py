# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class InstanceOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'inputs': 'list[ModelApplicationMappingV1]',
        'instance_id': 'str',
        'model_id': 'str',
        'outputs': 'list[InstanceOutputMappingV1]',
        'table_application_id': 'str'
    }

    attribute_map = {
        'inputs': 'inputs',
        'instance_id': 'instanceId',
        'model_id': 'modelId',
        'outputs': 'outputs',
        'table_application_id': 'tableApplicationId'
    }

    def __init__(self, inputs=None, instance_id=None, model_id=None, outputs=None, table_application_id=None):
        """
        InstanceOutputV1 - a model defined in Swagger
        """

        self._inputs = None
        self._instance_id = None
        self._model_id = None
        self._outputs = None
        self._table_application_id = None

        if inputs is not None:
          self.inputs = inputs
        if instance_id is not None:
          self.instance_id = instance_id
        if model_id is not None:
          self.model_id = model_id
        if outputs is not None:
          self.outputs = outputs
        if table_application_id is not None:
          self.table_application_id = table_application_id

    @property
    def inputs(self):
        """
        Gets the inputs of this InstanceOutputV1.
        Literals or Item IDs applied to the instantiated model

        :return: The inputs of this InstanceOutputV1.
        :rtype: list[ModelApplicationMappingV1]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """
        Sets the inputs of this InstanceOutputV1.
        Literals or Item IDs applied to the instantiated model

        :param inputs: The inputs of this InstanceOutputV1.
        :type: list[ModelApplicationMappingV1]
        """

        self._inputs = inputs

    @property
    def instance_id(self):
        """
        Gets the instance_id of this InstanceOutputV1.
        ID of the instance

        :return: The instance_id of this InstanceOutputV1.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """
        Sets the instance_id of this InstanceOutputV1.
        ID of the instance

        :param instance_id: The instance_id of this InstanceOutputV1.
        :type: str
        """

        self._instance_id = instance_id

    @property
    def model_id(self):
        """
        Gets the model_id of this InstanceOutputV1.
        ID of the instantiated model

        :return: The model_id of this InstanceOutputV1.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """
        Sets the model_id of this InstanceOutputV1.
        ID of the instantiated model

        :param model_id: The model_id of this InstanceOutputV1.
        :type: str
        """

        self._model_id = model_id

    @property
    def outputs(self):
        """
        Gets the outputs of this InstanceOutputV1.
        Derived outputs created by the instantiated model

        :return: The outputs of this InstanceOutputV1.
        :rtype: list[InstanceOutputMappingV1]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """
        Sets the outputs of this InstanceOutputV1.
        Derived outputs created by the instantiated model

        :param outputs: The outputs of this InstanceOutputV1.
        :type: list[InstanceOutputMappingV1]
        """

        self._outputs = outputs

    @property
    def table_application_id(self):
        """
        Gets the table_application_id of this InstanceOutputV1.
        ID of the table definition that the model was applied to, if applicable

        :return: The table_application_id of this InstanceOutputV1.
        :rtype: str
        """
        return self._table_application_id

    @table_application_id.setter
    def table_application_id(self, table_application_id):
        """
        Sets the table_application_id of this InstanceOutputV1.
        ID of the table definition that the model was applied to, if applicable

        :param table_application_id: The table_application_id of this InstanceOutputV1.
        :type: str
        """

        self._table_application_id = table_application_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InstanceOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
