# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class VersionHistoryOutputListV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_results': 'int',
        'version_histories': 'list[VersionHistoryOutputV1]'
    }

    attribute_map = {
        'total_results': 'totalResults',
        'version_histories': 'versionHistories'
    }

    def __init__(self, total_results=None, version_histories=None):
        """
        VersionHistoryOutputListV1 - a model defined in Swagger
        """

        self._total_results = None
        self._version_histories = None

        if total_results is not None:
          self.total_results = total_results
        if version_histories is not None:
          self.version_histories = version_histories

    @property
    def total_results(self):
        """
        Gets the total_results of this VersionHistoryOutputListV1.
        The total number of items

        :return: The total_results of this VersionHistoryOutputListV1.
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """
        Sets the total_results of this VersionHistoryOutputListV1.
        The total number of items

        :param total_results: The total_results of this VersionHistoryOutputListV1.
        :type: int
        """
        if total_results is None:
            raise ValueError("Invalid value for `total_results`, must not be `None`")

        self._total_results = total_results

    @property
    def version_histories(self):
        """
        Gets the version_histories of this VersionHistoryOutputListV1.
        A list of Version History items

        :return: The version_histories of this VersionHistoryOutputListV1.
        :rtype: list[VersionHistoryOutputV1]
        """
        return self._version_histories

    @version_histories.setter
    def version_histories(self, version_histories):
        """
        Sets the version_histories of this VersionHistoryOutputListV1.
        A list of Version History items

        :param version_histories: The version_histories of this VersionHistoryOutputListV1.
        :type: list[VersionHistoryOutputV1]
        """
        if version_histories is None:
            raise ValueError("Invalid value for `version_histories`, must not be `None`")

        self._version_histories = version_histories

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VersionHistoryOutputListV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
