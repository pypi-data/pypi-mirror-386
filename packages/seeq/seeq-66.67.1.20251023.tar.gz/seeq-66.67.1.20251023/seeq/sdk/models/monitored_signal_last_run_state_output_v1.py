# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class MonitoredSignalLastRunStateOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cursor_key': 'int',
        'error_count': 'int',
        'last_certain_sample': 'SampleOutputV1',
        'last_error': 'str',
        'last_error_time_created': 'int',
        'signal_guid': 'str',
        'uncertain_samples': 'list[SampleOutputV1]'
    }

    attribute_map = {
        'cursor_key': 'cursorKey',
        'error_count': 'errorCount',
        'last_certain_sample': 'lastCertainSample',
        'last_error': 'lastError',
        'last_error_time_created': 'lastErrorTimeCreated',
        'signal_guid': 'signalGuid',
        'uncertain_samples': 'uncertainSamples'
    }

    def __init__(self, cursor_key=None, error_count=None, last_certain_sample=None, last_error=None, last_error_time_created=None, signal_guid=None, uncertain_samples=None):
        """
        MonitoredSignalLastRunStateOutputV1 - a model defined in Swagger
        """

        self._cursor_key = None
        self._error_count = None
        self._last_certain_sample = None
        self._last_error = None
        self._last_error_time_created = None
        self._signal_guid = None
        self._uncertain_samples = None

        if cursor_key is not None:
          self.cursor_key = cursor_key
        if error_count is not None:
          self.error_count = error_count
        if last_certain_sample is not None:
          self.last_certain_sample = last_certain_sample
        if last_error is not None:
          self.last_error = last_error
        if last_error_time_created is not None:
          self.last_error_time_created = last_error_time_created
        if signal_guid is not None:
          self.signal_guid = signal_guid
        if uncertain_samples is not None:
          self.uncertain_samples = uncertain_samples

    @property
    def cursor_key(self):
        """
        Gets the cursor_key of this MonitoredSignalLastRunStateOutputV1.

        :return: The cursor_key of this MonitoredSignalLastRunStateOutputV1.
        :rtype: int
        """
        return self._cursor_key

    @cursor_key.setter
    def cursor_key(self, cursor_key):
        """
        Sets the cursor_key of this MonitoredSignalLastRunStateOutputV1.

        :param cursor_key: The cursor_key of this MonitoredSignalLastRunStateOutputV1.
        :type: int
        """

        self._cursor_key = cursor_key

    @property
    def error_count(self):
        """
        Gets the error_count of this MonitoredSignalLastRunStateOutputV1.

        :return: The error_count of this MonitoredSignalLastRunStateOutputV1.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """
        Sets the error_count of this MonitoredSignalLastRunStateOutputV1.

        :param error_count: The error_count of this MonitoredSignalLastRunStateOutputV1.
        :type: int
        """

        self._error_count = error_count

    @property
    def last_certain_sample(self):
        """
        Gets the last_certain_sample of this MonitoredSignalLastRunStateOutputV1.

        :return: The last_certain_sample of this MonitoredSignalLastRunStateOutputV1.
        :rtype: SampleOutputV1
        """
        return self._last_certain_sample

    @last_certain_sample.setter
    def last_certain_sample(self, last_certain_sample):
        """
        Sets the last_certain_sample of this MonitoredSignalLastRunStateOutputV1.

        :param last_certain_sample: The last_certain_sample of this MonitoredSignalLastRunStateOutputV1.
        :type: SampleOutputV1
        """

        self._last_certain_sample = last_certain_sample

    @property
    def last_error(self):
        """
        Gets the last_error of this MonitoredSignalLastRunStateOutputV1.

        :return: The last_error of this MonitoredSignalLastRunStateOutputV1.
        :rtype: str
        """
        return self._last_error

    @last_error.setter
    def last_error(self, last_error):
        """
        Sets the last_error of this MonitoredSignalLastRunStateOutputV1.

        :param last_error: The last_error of this MonitoredSignalLastRunStateOutputV1.
        :type: str
        """

        self._last_error = last_error

    @property
    def last_error_time_created(self):
        """
        Gets the last_error_time_created of this MonitoredSignalLastRunStateOutputV1.

        :return: The last_error_time_created of this MonitoredSignalLastRunStateOutputV1.
        :rtype: int
        """
        return self._last_error_time_created

    @last_error_time_created.setter
    def last_error_time_created(self, last_error_time_created):
        """
        Sets the last_error_time_created of this MonitoredSignalLastRunStateOutputV1.

        :param last_error_time_created: The last_error_time_created of this MonitoredSignalLastRunStateOutputV1.
        :type: int
        """

        self._last_error_time_created = last_error_time_created

    @property
    def signal_guid(self):
        """
        Gets the signal_guid of this MonitoredSignalLastRunStateOutputV1.

        :return: The signal_guid of this MonitoredSignalLastRunStateOutputV1.
        :rtype: str
        """
        return self._signal_guid

    @signal_guid.setter
    def signal_guid(self, signal_guid):
        """
        Sets the signal_guid of this MonitoredSignalLastRunStateOutputV1.

        :param signal_guid: The signal_guid of this MonitoredSignalLastRunStateOutputV1.
        :type: str
        """

        self._signal_guid = signal_guid

    @property
    def uncertain_samples(self):
        """
        Gets the uncertain_samples of this MonitoredSignalLastRunStateOutputV1.

        :return: The uncertain_samples of this MonitoredSignalLastRunStateOutputV1.
        :rtype: list[SampleOutputV1]
        """
        return self._uncertain_samples

    @uncertain_samples.setter
    def uncertain_samples(self, uncertain_samples):
        """
        Sets the uncertain_samples of this MonitoredSignalLastRunStateOutputV1.

        :param uncertain_samples: The uncertain_samples of this MonitoredSignalLastRunStateOutputV1.
        :type: list[SampleOutputV1]
        """

        self._uncertain_samples = uncertain_samples

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MonitoredSignalLastRunStateOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
