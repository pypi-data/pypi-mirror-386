# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class MarkdownItemInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'markdown': 'str',
        'name': 'str',
        'purpose': 'str',
        'scoped_to': 'str'
    }

    attribute_map = {
        'description': 'description',
        'markdown': 'markdown',
        'name': 'name',
        'purpose': 'purpose',
        'scoped_to': 'scopedTo'
    }

    def __init__(self, description=None, markdown=None, name=None, purpose=None, scoped_to=None):
        """
        MarkdownItemInputV1 - a model defined in Swagger
        """

        self._description = None
        self._markdown = None
        self._name = None
        self._purpose = None
        self._scoped_to = None

        if description is not None:
          self.description = description
        if markdown is not None:
          self.markdown = markdown
        if name is not None:
          self.name = name
        if purpose is not None:
          self.purpose = purpose
        if scoped_to is not None:
          self.scoped_to = scoped_to

    @property
    def description(self):
        """
        Gets the description of this MarkdownItemInputV1.
        The description of the markdown item

        :return: The description of this MarkdownItemInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this MarkdownItemInputV1.
        The description of the markdown item

        :param description: The description of this MarkdownItemInputV1.
        :type: str
        """

        self._description = description

    @property
    def markdown(self):
        """
        Gets the markdown of this MarkdownItemInputV1.
        The actual markdown for the item

        :return: The markdown of this MarkdownItemInputV1.
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """
        Sets the markdown of this MarkdownItemInputV1.
        The actual markdown for the item

        :param markdown: The markdown of this MarkdownItemInputV1.
        :type: str
        """
        if markdown is None:
            raise ValueError("Invalid value for `markdown`, must not be `None`")

        self._markdown = markdown

    @property
    def name(self):
        """
        Gets the name of this MarkdownItemInputV1.
        The name of the markdown item

        :return: The name of this MarkdownItemInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this MarkdownItemInputV1.
        The name of the markdown item

        :param name: The name of this MarkdownItemInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def purpose(self):
        """
        Gets the purpose of this MarkdownItemInputV1.
        The purpose of the markdown item

        :return: The purpose of this MarkdownItemInputV1.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """
        Sets the purpose of this MarkdownItemInputV1.
        The purpose of the markdown item

        :param purpose: The purpose of this MarkdownItemInputV1.
        :type: str
        """
        if purpose is None:
            raise ValueError("Invalid value for `purpose`, must not be `None`")

        self._purpose = purpose

    @property
    def scoped_to(self):
        """
        Gets the scoped_to of this MarkdownItemInputV1.
        The ID of the workbook to which the markdown item will be scoped. If not provided, it will have a global scope

        :return: The scoped_to of this MarkdownItemInputV1.
        :rtype: str
        """
        return self._scoped_to

    @scoped_to.setter
    def scoped_to(self, scoped_to):
        """
        Sets the scoped_to of this MarkdownItemInputV1.
        The ID of the workbook to which the markdown item will be scoped. If not provided, it will have a global scope

        :param scoped_to: The scoped_to of this MarkdownItemInputV1.
        :type: str
        """

        self._scoped_to = scoped_to

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, MarkdownItemInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
