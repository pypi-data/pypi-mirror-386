# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class HierarchyNodeWithPathOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hierarchy_id': 'str',
        'hierarchy_name': 'str',
        'node': 'HierarchyNodeOutputV1',
        'path': 'list[HierarchyNodeOutputV1]'
    }

    attribute_map = {
        'hierarchy_id': 'hierarchyId',
        'hierarchy_name': 'hierarchyName',
        'node': 'node',
        'path': 'path'
    }

    def __init__(self, hierarchy_id=None, hierarchy_name=None, node=None, path=None):
        """
        HierarchyNodeWithPathOutputV1 - a model defined in Swagger
        """

        self._hierarchy_id = None
        self._hierarchy_name = None
        self._node = None
        self._path = None

        if hierarchy_id is not None:
          self.hierarchy_id = hierarchy_id
        if hierarchy_name is not None:
          self.hierarchy_name = hierarchy_name
        if node is not None:
          self.node = node
        if path is not None:
          self.path = path

    @property
    def hierarchy_id(self):
        """
        Gets the hierarchy_id of this HierarchyNodeWithPathOutputV1.
        The id of the hierarchy the node is from

        :return: The hierarchy_id of this HierarchyNodeWithPathOutputV1.
        :rtype: str
        """
        return self._hierarchy_id

    @hierarchy_id.setter
    def hierarchy_id(self, hierarchy_id):
        """
        Sets the hierarchy_id of this HierarchyNodeWithPathOutputV1.
        The id of the hierarchy the node is from

        :param hierarchy_id: The hierarchy_id of this HierarchyNodeWithPathOutputV1.
        :type: str
        """
        if hierarchy_id is None:
            raise ValueError("Invalid value for `hierarchy_id`, must not be `None`")

        self._hierarchy_id = hierarchy_id

    @property
    def hierarchy_name(self):
        """
        Gets the hierarchy_name of this HierarchyNodeWithPathOutputV1.
        The name of the hierarchy the node is from

        :return: The hierarchy_name of this HierarchyNodeWithPathOutputV1.
        :rtype: str
        """
        return self._hierarchy_name

    @hierarchy_name.setter
    def hierarchy_name(self, hierarchy_name):
        """
        Sets the hierarchy_name of this HierarchyNodeWithPathOutputV1.
        The name of the hierarchy the node is from

        :param hierarchy_name: The hierarchy_name of this HierarchyNodeWithPathOutputV1.
        :type: str
        """
        if hierarchy_name is None:
            raise ValueError("Invalid value for `hierarchy_name`, must not be `None`")

        self._hierarchy_name = hierarchy_name

    @property
    def node(self):
        """
        Gets the node of this HierarchyNodeWithPathOutputV1.

        :return: The node of this HierarchyNodeWithPathOutputV1.
        :rtype: HierarchyNodeOutputV1
        """
        return self._node

    @node.setter
    def node(self, node):
        """
        Sets the node of this HierarchyNodeWithPathOutputV1.

        :param node: The node of this HierarchyNodeWithPathOutputV1.
        :type: HierarchyNodeOutputV1
        """
        if node is None:
            raise ValueError("Invalid value for `node`, must not be `None`")

        self._node = node

    @property
    def path(self):
        """
        Gets the path of this HierarchyNodeWithPathOutputV1.
        The hierarchy nodes in the path of the node in the hierarchy, exclusive.

        :return: The path of this HierarchyNodeWithPathOutputV1.
        :rtype: list[HierarchyNodeOutputV1]
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this HierarchyNodeWithPathOutputV1.
        The hierarchy nodes in the path of the node in the hierarchy, exclusive.

        :param path: The path of this HierarchyNodeWithPathOutputV1.
        :type: list[HierarchyNodeOutputV1]
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HierarchyNodeWithPathOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
