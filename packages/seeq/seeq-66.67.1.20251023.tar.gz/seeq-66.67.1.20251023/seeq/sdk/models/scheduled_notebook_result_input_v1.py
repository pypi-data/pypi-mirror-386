# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ScheduledNotebookResultInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'str',
        'run_started_at': 'str',
        'run_time': 'int',
        'warning': 'str'
    }

    attribute_map = {
        'error': 'error',
        'run_started_at': 'runStartedAt',
        'run_time': 'runTime',
        'warning': 'warning'
    }

    def __init__(self, error=None, run_started_at=None, run_time=None, warning=None):
        """
        ScheduledNotebookResultInputV1 - a model defined in Swagger
        """

        self._error = None
        self._run_started_at = None
        self._run_time = None
        self._warning = None

        if error is not None:
          self.error = error
        if run_started_at is not None:
          self.run_started_at = run_started_at
        if run_time is not None:
          self.run_time = run_time
        if warning is not None:
          self.warning = warning

    @property
    def error(self):
        """
        Gets the error of this ScheduledNotebookResultInputV1.
        If not successful, the error message reporting the cause of the failure

        :return: The error of this ScheduledNotebookResultInputV1.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this ScheduledNotebookResultInputV1.
        If not successful, the error message reporting the cause of the failure

        :param error: The error of this ScheduledNotebookResultInputV1.
        :type: str
        """

        self._error = error

    @property
    def run_started_at(self):
        """
        Gets the run_started_at of this ScheduledNotebookResultInputV1.
        The ISO 8601 date of when this execution began (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :return: The run_started_at of this ScheduledNotebookResultInputV1.
        :rtype: str
        """
        return self._run_started_at

    @run_started_at.setter
    def run_started_at(self, run_started_at):
        """
        Sets the run_started_at of this ScheduledNotebookResultInputV1.
        The ISO 8601 date of when this execution began (YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm)

        :param run_started_at: The run_started_at of this ScheduledNotebookResultInputV1.
        :type: str
        """
        if run_started_at is None:
            raise ValueError("Invalid value for `run_started_at`, must not be `None`")

        self._run_started_at = run_started_at

    @property
    def run_time(self):
        """
        Gets the run_time of this ScheduledNotebookResultInputV1.
        If successful, the time it took for the notebook to complete its execution (in milliseconds)

        :return: The run_time of this ScheduledNotebookResultInputV1.
        :rtype: int
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """
        Sets the run_time of this ScheduledNotebookResultInputV1.
        If successful, the time it took for the notebook to complete its execution (in milliseconds)

        :param run_time: The run_time of this ScheduledNotebookResultInputV1.
        :type: int
        """

        self._run_time = run_time

    @property
    def warning(self):
        """
        Gets the warning of this ScheduledNotebookResultInputV1.
        If successful, any warning messages generated during the execution

        :return: The warning of this ScheduledNotebookResultInputV1.
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """
        Sets the warning of this ScheduledNotebookResultInputV1.
        If successful, any warning messages generated during the execution

        :param warning: The warning of this ScheduledNotebookResultInputV1.
        :type: str
        """

        self._warning = warning

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ScheduledNotebookResultInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
