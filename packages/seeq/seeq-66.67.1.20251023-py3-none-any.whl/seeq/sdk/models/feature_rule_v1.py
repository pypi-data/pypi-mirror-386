# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class FeatureRuleV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'formula_creator': 'ModelFormulaCreatorRuleV1',
        'id': 'str',
        'inputs': 'list[ModelRuleInputV1Object]',
        'numeric_scalar_creator': 'ModelScalarCreatorRuleV1',
        'string_scalar_creator': 'ModelScalarCreatorRuleV1'
    }

    attribute_map = {
        'formula_creator': 'formulaCreator',
        'id': 'id',
        'inputs': 'inputs',
        'numeric_scalar_creator': 'numericScalarCreator',
        'string_scalar_creator': 'stringScalarCreator'
    }

    def __init__(self, formula_creator=None, id=None, inputs=None, numeric_scalar_creator=None, string_scalar_creator=None):
        """
        FeatureRuleV1 - a model defined in Swagger
        """

        self._formula_creator = None
        self._id = None
        self._inputs = None
        self._numeric_scalar_creator = None
        self._string_scalar_creator = None

        if formula_creator is not None:
          self.formula_creator = formula_creator
        if id is not None:
          self.id = id
        if inputs is not None:
          self.inputs = inputs
        if numeric_scalar_creator is not None:
          self.numeric_scalar_creator = numeric_scalar_creator
        if string_scalar_creator is not None:
          self.string_scalar_creator = string_scalar_creator

    @property
    def formula_creator(self):
        """
        Gets the formula_creator of this FeatureRuleV1.

        :return: The formula_creator of this FeatureRuleV1.
        :rtype: ModelFormulaCreatorRuleV1
        """
        return self._formula_creator

    @formula_creator.setter
    def formula_creator(self, formula_creator):
        """
        Sets the formula_creator of this FeatureRuleV1.

        :param formula_creator: The formula_creator of this FeatureRuleV1.
        :type: ModelFormulaCreatorRuleV1
        """

        self._formula_creator = formula_creator

    @property
    def id(self):
        """
        Gets the id of this FeatureRuleV1.
        Unique identifier for the rule. Only populated on reads.

        :return: The id of this FeatureRuleV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FeatureRuleV1.
        Unique identifier for the rule. Only populated on reads.

        :param id: The id of this FeatureRuleV1.
        :type: str
        """

        self._id = id

    @property
    def inputs(self):
        """
        Gets the inputs of this FeatureRuleV1.
        List of rule inputs used by the non-null rule.

        :return: The inputs of this FeatureRuleV1.
        :rtype: list[ModelRuleInputV1Object]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """
        Sets the inputs of this FeatureRuleV1.
        List of rule inputs used by the non-null rule.

        :param inputs: The inputs of this FeatureRuleV1.
        :type: list[ModelRuleInputV1Object]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")

        self._inputs = inputs

    @property
    def numeric_scalar_creator(self):
        """
        Gets the numeric_scalar_creator of this FeatureRuleV1.

        :return: The numeric_scalar_creator of this FeatureRuleV1.
        :rtype: ModelScalarCreatorRuleV1
        """
        return self._numeric_scalar_creator

    @numeric_scalar_creator.setter
    def numeric_scalar_creator(self, numeric_scalar_creator):
        """
        Sets the numeric_scalar_creator of this FeatureRuleV1.

        :param numeric_scalar_creator: The numeric_scalar_creator of this FeatureRuleV1.
        :type: ModelScalarCreatorRuleV1
        """

        self._numeric_scalar_creator = numeric_scalar_creator

    @property
    def string_scalar_creator(self):
        """
        Gets the string_scalar_creator of this FeatureRuleV1.

        :return: The string_scalar_creator of this FeatureRuleV1.
        :rtype: ModelScalarCreatorRuleV1
        """
        return self._string_scalar_creator

    @string_scalar_creator.setter
    def string_scalar_creator(self, string_scalar_creator):
        """
        Sets the string_scalar_creator of this FeatureRuleV1.

        :param string_scalar_creator: The string_scalar_creator of this FeatureRuleV1.
        :type: ModelScalarCreatorRuleV1
        """

        self._string_scalar_creator = string_scalar_creator

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FeatureRuleV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
