# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class VersionOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'creator': 'ItemPreviewV1',
        'notes': 'str',
        'version': 'int',
        'version_source': 'VersionSourceOutputV1',
        'versioned_item': 'ItemPreviewV1'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'creator': 'creator',
        'notes': 'notes',
        'version': 'version',
        'version_source': 'versionSource',
        'versioned_item': 'versionedItem'
    }

    def __init__(self, created_at=None, creator=None, notes=None, version=None, version_source=None, versioned_item=None):
        """
        VersionOutputV1 - a model defined in Swagger
        """

        self._created_at = None
        self._creator = None
        self._notes = None
        self._version = None
        self._version_source = None
        self._versioned_item = None

        if created_at is not None:
          self.created_at = created_at
        if creator is not None:
          self.creator = creator
        if notes is not None:
          self.notes = notes
        if version is not None:
          self.version = version
        if version_source is not None:
          self.version_source = version_source
        if versioned_item is not None:
          self.versioned_item = versioned_item

    @property
    def created_at(self):
        """
        Gets the created_at of this VersionOutputV1.
        ISO-8601 timestamp indicating when this item was versioned

        :return: The created_at of this VersionOutputV1.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this VersionOutputV1.
        ISO-8601 timestamp indicating when this item was versioned

        :param created_at: The created_at of this VersionOutputV1.
        :type: str
        """

        self._created_at = created_at

    @property
    def creator(self):
        """
        Gets the creator of this VersionOutputV1.

        :return: The creator of this VersionOutputV1.
        :rtype: ItemPreviewV1
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """
        Sets the creator of this VersionOutputV1.

        :param creator: The creator of this VersionOutputV1.
        :type: ItemPreviewV1
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")

        self._creator = creator

    @property
    def notes(self):
        """
        Gets the notes of this VersionOutputV1.
        Notes about this particular version entered by the user at the time of versioning (optional)

        :return: The notes of this VersionOutputV1.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """
        Sets the notes of this VersionOutputV1.
        Notes about this particular version entered by the user at the time of versioning (optional)

        :param notes: The notes of this VersionOutputV1.
        :type: str
        """
        if notes is None:
            raise ValueError("Invalid value for `notes`, must not be `None`")

        self._notes = notes

    @property
    def version(self):
        """
        Gets the version of this VersionOutputV1.
        The version number (1, 2, 3, etc.) for an item that has been locked, versioned, and added to a Version History.

        :return: The version of this VersionOutputV1.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this VersionOutputV1.
        The version number (1, 2, 3, etc.) for an item that has been locked, versioned, and added to a Version History.

        :param version: The version of this VersionOutputV1.
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def version_source(self):
        """
        Gets the version_source of this VersionOutputV1.

        :return: The version_source of this VersionOutputV1.
        :rtype: VersionSourceOutputV1
        """
        return self._version_source

    @version_source.setter
    def version_source(self, version_source):
        """
        Sets the version_source of this VersionOutputV1.

        :param version_source: The version_source of this VersionOutputV1.
        :type: VersionSourceOutputV1
        """

        self._version_source = version_source

    @property
    def versioned_item(self):
        """
        Gets the versioned_item of this VersionOutputV1.

        :return: The versioned_item of this VersionOutputV1.
        :rtype: ItemPreviewV1
        """
        return self._versioned_item

    @versioned_item.setter
    def versioned_item(self, versioned_item):
        """
        Sets the versioned_item of this VersionOutputV1.

        :param versioned_item: The versioned_item of this VersionOutputV1.
        :type: ItemPreviewV1
        """
        if versioned_item is None:
            raise ValueError("Invalid value for `versioned_item`, must not be `None`")

        self._versioned_item = versioned_item

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VersionOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
