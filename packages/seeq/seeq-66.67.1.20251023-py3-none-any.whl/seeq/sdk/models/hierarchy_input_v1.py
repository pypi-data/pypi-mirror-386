# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class HierarchyInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias_column_id': 'str',
        'description': 'str',
        'filter_grouping': 'str',
        'name': 'str',
        'scoped_to': 'str',
        'table_definition_id': 'str',
        'view_columns': 'list[ViewColumnInputV1]'
    }

    attribute_map = {
        'alias_column_id': 'aliasColumnId',
        'description': 'description',
        'filter_grouping': 'filterGrouping',
        'name': 'name',
        'scoped_to': 'scopedTo',
        'table_definition_id': 'tableDefinitionId',
        'view_columns': 'viewColumns'
    }

    def __init__(self, alias_column_id=None, description=None, filter_grouping=None, name=None, scoped_to=None, table_definition_id=None, view_columns=None):
        """
        HierarchyInputV1 - a model defined in Swagger
        """

        self._alias_column_id = None
        self._description = None
        self._filter_grouping = None
        self._name = None
        self._scoped_to = None
        self._table_definition_id = None
        self._view_columns = None

        if alias_column_id is not None:
          self.alias_column_id = alias_column_id
        if description is not None:
          self.description = description
        if filter_grouping is not None:
          self.filter_grouping = filter_grouping
        if name is not None:
          self.name = name
        if scoped_to is not None:
          self.scoped_to = scoped_to
        if table_definition_id is not None:
          self.table_definition_id = table_definition_id
        if view_columns is not None:
          self.view_columns = view_columns

    @property
    def alias_column_id(self):
        """
        Gets the alias_column_id of this HierarchyInputV1.
        The ID of the column the Hierarchy should use for aliases. If not provided item names will be used for the items in the hierarchy.

        :return: The alias_column_id of this HierarchyInputV1.
        :rtype: str
        """
        return self._alias_column_id

    @alias_column_id.setter
    def alias_column_id(self, alias_column_id):
        """
        Sets the alias_column_id of this HierarchyInputV1.
        The ID of the column the Hierarchy should use for aliases. If not provided item names will be used for the items in the hierarchy.

        :param alias_column_id: The alias_column_id of this HierarchyInputV1.
        :type: str
        """

        self._alias_column_id = alias_column_id

    @property
    def description(self):
        """
        Gets the description of this HierarchyInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :return: The description of this HierarchyInputV1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this HierarchyInputV1.
        Clarifying information or other plain language description of this item. An input of just whitespaces is equivalent to a null input.

        :param description: The description of this HierarchyInputV1.
        :type: str
        """

        self._description = description

    @property
    def filter_grouping(self):
        """
        Gets the filter_grouping of this HierarchyInputV1.
        The logical filter grouping for column filters, if not provided all filters will be applied with the AND operator. All view column filters must have a numeric filter group label that is used in the filter grouping expression. The filter grouping expression is a logical expression that includes filters by filter group label separated by AND or OR operators with optional parentheses for ordering. <br><b>Example:</b> 1 AND (2 OR 3) <br><b>Example:</b> ((1 OR 4) AND (2 OR 3)) OR 5

        :return: The filter_grouping of this HierarchyInputV1.
        :rtype: str
        """
        return self._filter_grouping

    @filter_grouping.setter
    def filter_grouping(self, filter_grouping):
        """
        Sets the filter_grouping of this HierarchyInputV1.
        The logical filter grouping for column filters, if not provided all filters will be applied with the AND operator. All view column filters must have a numeric filter group label that is used in the filter grouping expression. The filter grouping expression is a logical expression that includes filters by filter group label separated by AND or OR operators with optional parentheses for ordering. <br><b>Example:</b> 1 AND (2 OR 3) <br><b>Example:</b> ((1 OR 4) AND (2 OR 3)) OR 5

        :param filter_grouping: The filter_grouping of this HierarchyInputV1.
        :type: str
        """

        self._filter_grouping = filter_grouping

    @property
    def name(self):
        """
        Gets the name of this HierarchyInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :return: The name of this HierarchyInputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this HierarchyInputV1.
        Human readable name. Required during creation. An input of just whitespaces is equivalent to a null input.

        :param name: The name of this HierarchyInputV1.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def scoped_to(self):
        """
        Gets the scoped_to of this HierarchyInputV1.
        The ID of the workbook to which the hierarchy will be scoped. If not provided, the hierarchy will be globally scoped.

        :return: The scoped_to of this HierarchyInputV1.
        :rtype: str
        """
        return self._scoped_to

    @scoped_to.setter
    def scoped_to(self, scoped_to):
        """
        Sets the scoped_to of this HierarchyInputV1.
        The ID of the workbook to which the hierarchy will be scoped. If not provided, the hierarchy will be globally scoped.

        :param scoped_to: The scoped_to of this HierarchyInputV1.
        :type: str
        """

        self._scoped_to = scoped_to

    @property
    def table_definition_id(self):
        """
        Gets the table_definition_id of this HierarchyInputV1.
        The ID of the Item Table that the Hierarchy is created from

        :return: The table_definition_id of this HierarchyInputV1.
        :rtype: str
        """
        return self._table_definition_id

    @table_definition_id.setter
    def table_definition_id(self, table_definition_id):
        """
        Sets the table_definition_id of this HierarchyInputV1.
        The ID of the Item Table that the Hierarchy is created from

        :param table_definition_id: The table_definition_id of this HierarchyInputV1.
        :type: str
        """

        self._table_definition_id = table_definition_id

    @property
    def view_columns(self):
        """
        Gets the view_columns of this HierarchyInputV1.
        View Columns for the Table that correspond to Column Definitions. They contain grouping, filtering and sorting information for a given Hierarchy view applied to an Item Table.

        :return: The view_columns of this HierarchyInputV1.
        :rtype: list[ViewColumnInputV1]
        """
        return self._view_columns

    @view_columns.setter
    def view_columns(self, view_columns):
        """
        Sets the view_columns of this HierarchyInputV1.
        View Columns for the Table that correspond to Column Definitions. They contain grouping, filtering and sorting information for a given Hierarchy view applied to an Item Table.

        :param view_columns: The view_columns of this HierarchyInputV1.
        :type: list[ViewColumnInputV1]
        """
        if view_columns is None:
            raise ValueError("Invalid value for `view_columns`, must not be `None`")

        self._view_columns = view_columns

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HierarchyInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
