# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ColumnRuleFindDescendantInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_index': 'int',
        'item_types': 'list[str]',
        'property_match_operators': 'list[str]',
        'property_names': 'list[str]',
        'property_value_types': 'list[str]',
        'property_value_uoms': 'list[str]',
        'property_values': 'list[str]'
    }

    attribute_map = {
        'column_index': 'columnIndex',
        'item_types': 'itemTypes',
        'property_match_operators': 'propertyMatchOperators',
        'property_names': 'propertyNames',
        'property_value_types': 'propertyValueTypes',
        'property_value_uoms': 'propertyValueUoms',
        'property_values': 'propertyValues'
    }

    def __init__(self, column_index=None, item_types=None, property_match_operators=None, property_names=None, property_value_types=None, property_value_uoms=None, property_values=None):
        """
        ColumnRuleFindDescendantInputV1 - a model defined in Swagger
        """

        self._column_index = None
        self._item_types = None
        self._property_match_operators = None
        self._property_names = None
        self._property_value_types = None
        self._property_value_uoms = None
        self._property_values = None

        if column_index is not None:
          self.column_index = column_index
        if item_types is not None:
          self.item_types = item_types
        if property_match_operators is not None:
          self.property_match_operators = property_match_operators
        if property_names is not None:
          self.property_names = property_names
        if property_value_types is not None:
          self.property_value_types = property_value_types
        if property_value_uoms is not None:
          self.property_value_uoms = property_value_uoms
        if property_values is not None:
          self.property_values = property_values

    @property
    def column_index(self):
        """
        Gets the column_index of this ColumnRuleFindDescendantInputV1.
        The index of the column that references the item to search descendants for. The column index is 1-based

        :return: The column_index of this ColumnRuleFindDescendantInputV1.
        :rtype: int
        """
        return self._column_index

    @column_index.setter
    def column_index(self, column_index):
        """
        Sets the column_index of this ColumnRuleFindDescendantInputV1.
        The index of the column that references the item to search descendants for. The column index is 1-based

        :param column_index: The column_index of this ColumnRuleFindDescendantInputV1.
        :type: int
        """
        if column_index is None:
            raise ValueError("Invalid value for `column_index`, must not be `None`")

        self._column_index = column_index

    @property
    def item_types(self):
        """
        Gets the item_types of this ColumnRuleFindDescendantInputV1.
        The types of item to search for. If specified, each type must be a valid item type. If not              specified, the rule will search within all Signals, Conditions, and Scalars.

        :return: The item_types of this ColumnRuleFindDescendantInputV1.
        :rtype: list[str]
        """
        return self._item_types

    @item_types.setter
    def item_types(self, item_types):
        """
        Sets the item_types of this ColumnRuleFindDescendantInputV1.
        The types of item to search for. If specified, each type must be a valid item type. If not              specified, the rule will search within all Signals, Conditions, and Scalars.

        :param item_types: The item_types of this ColumnRuleFindDescendantInputV1.
        :type: list[str]
        """

        self._item_types = item_types

    @property
    def property_match_operators(self):
        """
        Gets the property_match_operators of this ColumnRuleFindDescendantInputV1.
        The operators to use for matching the property value. Available options are EQUALS, EQUALS_IGNORE_CASE, NOT_EQUALS, WITHIN, STRING_CONTAINS, REGEX_MATCHES, and NOT_REGEX_MATCHES.

        :return: The property_match_operators of this ColumnRuleFindDescendantInputV1.
        :rtype: list[str]
        """
        return self._property_match_operators

    @property_match_operators.setter
    def property_match_operators(self, property_match_operators):
        """
        Sets the property_match_operators of this ColumnRuleFindDescendantInputV1.
        The operators to use for matching the property value. Available options are EQUALS, EQUALS_IGNORE_CASE, NOT_EQUALS, WITHIN, STRING_CONTAINS, REGEX_MATCHES, and NOT_REGEX_MATCHES.

        :param property_match_operators: The property_match_operators of this ColumnRuleFindDescendantInputV1.
        :type: list[str]
        """
        if property_match_operators is None:
            raise ValueError("Invalid value for `property_match_operators`, must not be `None`")

        self._property_match_operators = property_match_operators

    @property
    def property_names(self):
        """
        Gets the property_names of this ColumnRuleFindDescendantInputV1.
        The property names to search.

        :return: The property_names of this ColumnRuleFindDescendantInputV1.
        :rtype: list[str]
        """
        return self._property_names

    @property_names.setter
    def property_names(self, property_names):
        """
        Sets the property_names of this ColumnRuleFindDescendantInputV1.
        The property names to search.

        :param property_names: The property_names of this ColumnRuleFindDescendantInputV1.
        :type: list[str]
        """
        if property_names is None:
            raise ValueError("Invalid value for `property_names`, must not be `None`")

        self._property_names = property_names

    @property
    def property_value_types(self):
        """
        Gets the property_value_types of this ColumnRuleFindDescendantInputV1.
        The types of the values to search for. Valid options are 'STRING', 'NUMBER', and 'BOOLEAN'.

        :return: The property_value_types of this ColumnRuleFindDescendantInputV1.
        :rtype: list[str]
        """
        return self._property_value_types

    @property_value_types.setter
    def property_value_types(self, property_value_types):
        """
        Sets the property_value_types of this ColumnRuleFindDescendantInputV1.
        The types of the values to search for. Valid options are 'STRING', 'NUMBER', and 'BOOLEAN'.

        :param property_value_types: The property_value_types of this ColumnRuleFindDescendantInputV1.
        :type: list[str]
        """

        self._property_value_types = property_value_types

    @property
    def property_value_uoms(self):
        """
        Gets the property_value_uoms of this ColumnRuleFindDescendantInputV1.
        The uoms of the values to search for. 

        :return: The property_value_uoms of this ColumnRuleFindDescendantInputV1.
        :rtype: list[str]
        """
        return self._property_value_uoms

    @property_value_uoms.setter
    def property_value_uoms(self, property_value_uoms):
        """
        Sets the property_value_uoms of this ColumnRuleFindDescendantInputV1.
        The uoms of the values to search for. 

        :param property_value_uoms: The property_value_uoms of this ColumnRuleFindDescendantInputV1.
        :type: list[str]
        """

        self._property_value_uoms = property_value_uoms

    @property
    def property_values(self):
        """
        Gets the property_values of this ColumnRuleFindDescendantInputV1.
        The property values to search for. 

        :return: The property_values of this ColumnRuleFindDescendantInputV1.
        :rtype: list[str]
        """
        return self._property_values

    @property_values.setter
    def property_values(self, property_values):
        """
        Sets the property_values of this ColumnRuleFindDescendantInputV1.
        The property values to search for. 

        :param property_values: The property_values of this ColumnRuleFindDescendantInputV1.
        :type: list[str]
        """
        if property_values is None:
            raise ValueError("Invalid value for `property_values`, must not be `None`")

        self._property_values = property_values

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ColumnRuleFindDescendantInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
