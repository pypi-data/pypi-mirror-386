# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class DatasourceAccessStatsV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datasource_class': 'str',
        'datasource_id': 'str',
        'distinct_items_accessed_past_day': 'int',
        'item_type': 'str'
    }

    attribute_map = {
        'datasource_class': 'datasourceClass',
        'datasource_id': 'datasourceId',
        'distinct_items_accessed_past_day': 'distinctItemsAccessedPastDay',
        'item_type': 'itemType'
    }

    def __init__(self, datasource_class=None, datasource_id=None, distinct_items_accessed_past_day=None, item_type=None):
        """
        DatasourceAccessStatsV1 - a model defined in Swagger
        """

        self._datasource_class = None
        self._datasource_id = None
        self._distinct_items_accessed_past_day = None
        self._item_type = None

        if datasource_class is not None:
          self.datasource_class = datasource_class
        if datasource_id is not None:
          self.datasource_id = datasource_id
        if distinct_items_accessed_past_day is not None:
          self.distinct_items_accessed_past_day = distinct_items_accessed_past_day
        if item_type is not None:
          self.item_type = item_type

    @property
    def datasource_class(self):
        """
        Gets the datasource_class of this DatasourceAccessStatsV1.
        The datasource class.

        :return: The datasource_class of this DatasourceAccessStatsV1.
        :rtype: str
        """
        return self._datasource_class

    @datasource_class.setter
    def datasource_class(self, datasource_class):
        """
        Sets the datasource_class of this DatasourceAccessStatsV1.
        The datasource class.

        :param datasource_class: The datasource_class of this DatasourceAccessStatsV1.
        :type: str
        """
        if datasource_class is None:
            raise ValueError("Invalid value for `datasource_class`, must not be `None`")

        self._datasource_class = datasource_class

    @property
    def datasource_id(self):
        """
        Gets the datasource_id of this DatasourceAccessStatsV1.
        The datasource ID.

        :return: The datasource_id of this DatasourceAccessStatsV1.
        :rtype: str
        """
        return self._datasource_id

    @datasource_id.setter
    def datasource_id(self, datasource_id):
        """
        Sets the datasource_id of this DatasourceAccessStatsV1.
        The datasource ID.

        :param datasource_id: The datasource_id of this DatasourceAccessStatsV1.
        :type: str
        """
        if datasource_id is None:
            raise ValueError("Invalid value for `datasource_id`, must not be `None`")

        self._datasource_id = datasource_id

    @property
    def distinct_items_accessed_past_day(self):
        """
        Gets the distinct_items_accessed_past_day of this DatasourceAccessStatsV1.
        The number of distinct items from the specified datasource of the specified type accessed in the past UTC day.

        :return: The distinct_items_accessed_past_day of this DatasourceAccessStatsV1.
        :rtype: int
        """
        return self._distinct_items_accessed_past_day

    @distinct_items_accessed_past_day.setter
    def distinct_items_accessed_past_day(self, distinct_items_accessed_past_day):
        """
        Sets the distinct_items_accessed_past_day of this DatasourceAccessStatsV1.
        The number of distinct items from the specified datasource of the specified type accessed in the past UTC day.

        :param distinct_items_accessed_past_day: The distinct_items_accessed_past_day of this DatasourceAccessStatsV1.
        :type: int
        """
        if distinct_items_accessed_past_day is None:
            raise ValueError("Invalid value for `distinct_items_accessed_past_day`, must not be `None`")

        self._distinct_items_accessed_past_day = distinct_items_accessed_past_day

    @property
    def item_type(self):
        """
        Gets the item_type of this DatasourceAccessStatsV1.
        The type of items accessed.

        :return: The item_type of this DatasourceAccessStatsV1.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """
        Sets the item_type of this DatasourceAccessStatsV1.
        The type of items accessed.

        :param item_type: The item_type of this DatasourceAccessStatsV1.
        :type: str
        """
        if item_type is None:
            raise ValueError("Invalid value for `item_type`, must not be `None`")

        self._item_type = item_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DatasourceAccessStatsV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
