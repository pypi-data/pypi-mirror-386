# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ModelRuleInputV1ListString(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'argument': 'list[str]',
        'derived_feature_index': 'int',
        'description': 'str',
        'id': 'str',
        'input_feature_id': 'str',
        'input_feature_index': 'int',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'argument': 'argument',
        'derived_feature_index': 'derivedFeatureIndex',
        'description': 'description',
        'id': 'id',
        'input_feature_id': 'inputFeatureId',
        'input_feature_index': 'inputFeatureIndex',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, argument=None, derived_feature_index=None, description=None, id=None, input_feature_id=None, input_feature_index=None, name=None, type=None):
        """
        ModelRuleInputV1ListString - a model defined in Swagger
        """

        self._argument = None
        self._derived_feature_index = None
        self._description = None
        self._id = None
        self._input_feature_id = None
        self._input_feature_index = None
        self._name = None
        self._type = None

        if argument is not None:
          self.argument = argument
        if derived_feature_index is not None:
          self.derived_feature_index = derived_feature_index
        if description is not None:
          self.description = description
        if id is not None:
          self.id = id
        if input_feature_id is not None:
          self.input_feature_id = input_feature_id
        if input_feature_index is not None:
          self.input_feature_index = input_feature_index
        if name is not None:
          self.name = name
        if type is not None:
          self.type = type

    @property
    def argument(self):
        """
        Gets the argument of this ModelRuleInputV1ListString.
        Static argument value for the rule input, if applicable. Only one of argument, inputFeatureId, inputFeatureIndex, or derivedFeatureIndex can be set.

        :return: The argument of this ModelRuleInputV1ListString.
        :rtype: list[str]
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """
        Sets the argument of this ModelRuleInputV1ListString.
        Static argument value for the rule input, if applicable. Only one of argument, inputFeatureId, inputFeatureIndex, or derivedFeatureIndex can be set.

        :param argument: The argument of this ModelRuleInputV1ListString.
        :type: list[str]
        """

        self._argument = argument

    @property
    def derived_feature_index(self):
        """
        Gets the derived_feature_index of this ModelRuleInputV1ListString.
        Index of the derived feature to reference as input, if applicable. Only one of argument, inputFeatureId, inputFeatureIndex, or derivedFeatureIndex can be set.

        :return: The derived_feature_index of this ModelRuleInputV1ListString.
        :rtype: int
        """
        return self._derived_feature_index

    @derived_feature_index.setter
    def derived_feature_index(self, derived_feature_index):
        """
        Sets the derived_feature_index of this ModelRuleInputV1ListString.
        Index of the derived feature to reference as input, if applicable. Only one of argument, inputFeatureId, inputFeatureIndex, or derivedFeatureIndex can be set.

        :param derived_feature_index: The derived_feature_index of this ModelRuleInputV1ListString.
        :type: int
        """

        self._derived_feature_index = derived_feature_index

    @property
    def description(self):
        """
        Gets the description of this ModelRuleInputV1ListString.
        Description of the rule input.

        :return: The description of this ModelRuleInputV1ListString.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ModelRuleInputV1ListString.
        Description of the rule input.

        :param description: The description of this ModelRuleInputV1ListString.
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """
        Gets the id of this ModelRuleInputV1ListString.
        Unique identifier for the rule input. Omit on create.

        :return: The id of this ModelRuleInputV1ListString.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ModelRuleInputV1ListString.
        Unique identifier for the rule input. Omit on create.

        :param id: The id of this ModelRuleInputV1ListString.
        :type: str
        """

        self._id = id

    @property
    def input_feature_id(self):
        """
        Gets the input_feature_id of this ModelRuleInputV1ListString.
        ID of the input feature to reference as input, if applicable. Only one of argument, inputFeatureId, inputFeatureIndex, or derivedFeatureIndex can be set.

        :return: The input_feature_id of this ModelRuleInputV1ListString.
        :rtype: str
        """
        return self._input_feature_id

    @input_feature_id.setter
    def input_feature_id(self, input_feature_id):
        """
        Sets the input_feature_id of this ModelRuleInputV1ListString.
        ID of the input feature to reference as input, if applicable. Only one of argument, inputFeatureId, inputFeatureIndex, or derivedFeatureIndex can be set.

        :param input_feature_id: The input_feature_id of this ModelRuleInputV1ListString.
        :type: str
        """

        self._input_feature_id = input_feature_id

    @property
    def input_feature_index(self):
        """
        Gets the input_feature_index of this ModelRuleInputV1ListString.
        Index of the input feature to reference as input, if applicable. Only one of argument, inputFeatureId, inputFeatureIndex, or derivedFeatureIndex can be set.

        :return: The input_feature_index of this ModelRuleInputV1ListString.
        :rtype: int
        """
        return self._input_feature_index

    @input_feature_index.setter
    def input_feature_index(self, input_feature_index):
        """
        Sets the input_feature_index of this ModelRuleInputV1ListString.
        Index of the input feature to reference as input, if applicable. Only one of argument, inputFeatureId, inputFeatureIndex, or derivedFeatureIndex can be set.

        :param input_feature_index: The input_feature_index of this ModelRuleInputV1ListString.
        :type: int
        """

        self._input_feature_index = input_feature_index

    @property
    def name(self):
        """
        Gets the name of this ModelRuleInputV1ListString.
        Name of the rule input.

        :return: The name of this ModelRuleInputV1ListString.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ModelRuleInputV1ListString.
        Name of the rule input.

        :param name: The name of this ModelRuleInputV1ListString.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this ModelRuleInputV1ListString.
        Type of the rule input.

        :return: The type of this ModelRuleInputV1ListString.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ModelRuleInputV1ListString.
        Type of the rule input.

        :param type: The type of this ModelRuleInputV1ListString.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ModelRuleInputV1ListString):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
