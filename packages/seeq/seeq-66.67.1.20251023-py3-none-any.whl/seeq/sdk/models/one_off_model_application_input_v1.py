# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class OneOffModelApplicationInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'datasource_class': 'str',
        'datasource_id': 'str',
        'model_application_input': 'ModelApplicationInputV1',
        'source_id': 'str'
    }

    attribute_map = {
        'datasource_class': 'datasourceClass',
        'datasource_id': 'datasourceId',
        'model_application_input': 'modelApplicationInput',
        'source_id': 'sourceId'
    }

    def __init__(self, datasource_class=None, datasource_id=None, model_application_input=None, source_id=None):
        """
        OneOffModelApplicationInputV1 - a model defined in Swagger
        """

        self._datasource_class = None
        self._datasource_id = None
        self._model_application_input = None
        self._source_id = None

        if datasource_class is not None:
          self.datasource_class = datasource_class
        if datasource_id is not None:
          self.datasource_id = datasource_id
        if model_application_input is not None:
          self.model_application_input = model_application_input
        if source_id is not None:
          self.source_id = source_id

    @property
    def datasource_class(self):
        """
        Gets the datasource_class of this OneOffModelApplicationInputV1.
        The datasource class to use for the output items produced by applying the model

        :return: The datasource_class of this OneOffModelApplicationInputV1.
        :rtype: str
        """
        return self._datasource_class

    @datasource_class.setter
    def datasource_class(self, datasource_class):
        """
        Sets the datasource_class of this OneOffModelApplicationInputV1.
        The datasource class to use for the output items produced by applying the model

        :param datasource_class: The datasource_class of this OneOffModelApplicationInputV1.
        :type: str
        """
        if datasource_class is None:
            raise ValueError("Invalid value for `datasource_class`, must not be `None`")

        self._datasource_class = datasource_class

    @property
    def datasource_id(self):
        """
        Gets the datasource_id of this OneOffModelApplicationInputV1.
        The datasource id to use for the output items produced by applying the model

        :return: The datasource_id of this OneOffModelApplicationInputV1.
        :rtype: str
        """
        return self._datasource_id

    @datasource_id.setter
    def datasource_id(self, datasource_id):
        """
        Sets the datasource_id of this OneOffModelApplicationInputV1.
        The datasource id to use for the output items produced by applying the model

        :param datasource_id: The datasource_id of this OneOffModelApplicationInputV1.
        :type: str
        """
        if datasource_id is None:
            raise ValueError("Invalid value for `datasource_id`, must not be `None`")

        self._datasource_id = datasource_id

    @property
    def model_application_input(self):
        """
        Gets the model_application_input of this OneOffModelApplicationInputV1.

        :return: The model_application_input of this OneOffModelApplicationInputV1.
        :rtype: ModelApplicationInputV1
        """
        return self._model_application_input

    @model_application_input.setter
    def model_application_input(self, model_application_input):
        """
        Sets the model_application_input of this OneOffModelApplicationInputV1.

        :param model_application_input: The model_application_input of this OneOffModelApplicationInputV1.
        :type: ModelApplicationInputV1
        """
        if model_application_input is None:
            raise ValueError("Invalid value for `model_application_input`, must not be `None`")

        self._model_application_input = model_application_input

    @property
    def source_id(self):
        """
        Gets the source_id of this OneOffModelApplicationInputV1.
        ID of the Item source of the Model Application

        :return: The source_id of this OneOffModelApplicationInputV1.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this OneOffModelApplicationInputV1.
        ID of the Item source of the Model Application

        :param source_id: The source_id of this OneOffModelApplicationInputV1.
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")

        self._source_id = source_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OneOffModelApplicationInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
