# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class LabelCategoryOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'archived': 'bool',
        'archived_at': 'str',
        'archiver_id': 'str',
        'icon': 'str',
        'id': 'str',
        'is_autocomplete': 'bool',
        'name': 'str',
        'parent_id': 'str'
    }

    attribute_map = {
        'archived': 'archived',
        'archived_at': 'archivedAt',
        'archiver_id': 'archiverId',
        'icon': 'icon',
        'id': 'id',
        'is_autocomplete': 'isAutocomplete',
        'name': 'name',
        'parent_id': 'parentId'
    }

    def __init__(self, archived=None, archived_at=None, archiver_id=None, icon=None, id=None, is_autocomplete=None, name=None, parent_id=None):
        """
        LabelCategoryOutputV1 - a model defined in Swagger
        """

        self._archived = None
        self._archived_at = None
        self._archiver_id = None
        self._icon = None
        self._id = None
        self._is_autocomplete = None
        self._name = None
        self._parent_id = None

        if archived is not None:
          self.archived = archived
        if archived_at is not None:
          self.archived_at = archived_at
        if archiver_id is not None:
          self.archiver_id = archiver_id
        if icon is not None:
          self.icon = icon
        if id is not None:
          self.id = id
        if is_autocomplete is not None:
          self.is_autocomplete = is_autocomplete
        if name is not None:
          self.name = name
        if parent_id is not None:
          self.parent_id = parent_id

    @property
    def archived(self):
        """
        Gets the archived of this LabelCategoryOutputV1.
        Whether this label category is archived

        :return: The archived of this LabelCategoryOutputV1.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """
        Sets the archived of this LabelCategoryOutputV1.
        Whether this label category is archived

        :param archived: The archived of this LabelCategoryOutputV1.
        :type: bool
        """
        if archived is None:
            raise ValueError("Invalid value for `archived`, must not be `None`")

        self._archived = archived

    @property
    def archived_at(self):
        """
        Gets the archived_at of this LabelCategoryOutputV1.
        If archived, the time when this label category was archived

        :return: The archived_at of this LabelCategoryOutputV1.
        :rtype: str
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """
        Sets the archived_at of this LabelCategoryOutputV1.
        If archived, the time when this label category was archived

        :param archived_at: The archived_at of this LabelCategoryOutputV1.
        :type: str
        """

        self._archived_at = archived_at

    @property
    def archiver_id(self):
        """
        Gets the archiver_id of this LabelCategoryOutputV1.
        If archived, the ID of the user who archived this label category

        :return: The archiver_id of this LabelCategoryOutputV1.
        :rtype: str
        """
        return self._archiver_id

    @archiver_id.setter
    def archiver_id(self, archiver_id):
        """
        Sets the archiver_id of this LabelCategoryOutputV1.
        If archived, the ID of the user who archived this label category

        :param archiver_id: The archiver_id of this LabelCategoryOutputV1.
        :type: str
        """

        self._archiver_id = archiver_id

    @property
    def icon(self):
        """
        Gets the icon of this LabelCategoryOutputV1.
        Icon for the category

        :return: The icon of this LabelCategoryOutputV1.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """
        Sets the icon of this LabelCategoryOutputV1.
        Icon for the category

        :param icon: The icon of this LabelCategoryOutputV1.
        :type: str
        """

        self._icon = icon

    @property
    def id(self):
        """
        Gets the id of this LabelCategoryOutputV1.
        ID of the label category

        :return: The id of this LabelCategoryOutputV1.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this LabelCategoryOutputV1.
        ID of the label category

        :param id: The id of this LabelCategoryOutputV1.
        :type: str
        """

        self._id = id

    @property
    def is_autocomplete(self):
        """
        Gets the is_autocomplete of this LabelCategoryOutputV1.

        :return: The is_autocomplete of this LabelCategoryOutputV1.
        :rtype: bool
        """
        return self._is_autocomplete

    @is_autocomplete.setter
    def is_autocomplete(self, is_autocomplete):
        """
        Sets the is_autocomplete of this LabelCategoryOutputV1.

        :param is_autocomplete: The is_autocomplete of this LabelCategoryOutputV1.
        :type: bool
        """

        self._is_autocomplete = is_autocomplete

    @property
    def name(self):
        """
        Gets the name of this LabelCategoryOutputV1.
        Name of the label category

        :return: The name of this LabelCategoryOutputV1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this LabelCategoryOutputV1.
        Name of the label category

        :param name: The name of this LabelCategoryOutputV1.
        :type: str
        """

        self._name = name

    @property
    def parent_id(self):
        """
        Gets the parent_id of this LabelCategoryOutputV1.
        If present, the ID of the parent category

        :return: The parent_id of this LabelCategoryOutputV1.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """
        Sets the parent_id of this LabelCategoryOutputV1.
        If present, the ID of the parent category

        :param parent_id: The parent_id of this LabelCategoryOutputV1.
        :type: str
        """

        self._parent_id = parent_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LabelCategoryOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
