# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.67.1-v202510230217-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class ManualRunInputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition_id': 'str',
        'look_ahead_duration_seconds': 'int',
        'lookback_duration_seconds': 'int',
        'table_batch_action': 'str'
    }

    attribute_map = {
        'condition_id': 'conditionId',
        'look_ahead_duration_seconds': 'lookAheadDurationSeconds',
        'lookback_duration_seconds': 'lookbackDurationSeconds',
        'table_batch_action': 'tableBatchAction'
    }

    def __init__(self, condition_id=None, look_ahead_duration_seconds=None, lookback_duration_seconds=None, table_batch_action=None):
        """
        ManualRunInputV1 - a model defined in Swagger
        """

        self._condition_id = None
        self._look_ahead_duration_seconds = None
        self._lookback_duration_seconds = None
        self._table_batch_action = None

        if condition_id is not None:
          self.condition_id = condition_id
        if look_ahead_duration_seconds is not None:
          self.look_ahead_duration_seconds = look_ahead_duration_seconds
        if lookback_duration_seconds is not None:
          self.lookback_duration_seconds = lookback_duration_seconds
        if table_batch_action is not None:
          self.table_batch_action = table_batch_action

    @property
    def condition_id(self):
        """
        Gets the condition_id of this ManualRunInputV1.
        The ID of condition to run the condition monitor job on

        :return: The condition_id of this ManualRunInputV1.
        :rtype: str
        """
        return self._condition_id

    @condition_id.setter
    def condition_id(self, condition_id):
        """
        Sets the condition_id of this ManualRunInputV1.
        The ID of condition to run the condition monitor job on

        :param condition_id: The condition_id of this ManualRunInputV1.
        :type: str
        """
        if condition_id is None:
            raise ValueError("Invalid value for `condition_id`, must not be `None`")

        self._condition_id = condition_id

    @property
    def look_ahead_duration_seconds(self):
        """
        Gets the look_ahead_duration_seconds of this ManualRunInputV1.
        How far to look forward for capsules, in seconds

        :return: The look_ahead_duration_seconds of this ManualRunInputV1.
        :rtype: int
        """
        return self._look_ahead_duration_seconds

    @look_ahead_duration_seconds.setter
    def look_ahead_duration_seconds(self, look_ahead_duration_seconds):
        """
        Sets the look_ahead_duration_seconds of this ManualRunInputV1.
        How far to look forward for capsules, in seconds

        :param look_ahead_duration_seconds: The look_ahead_duration_seconds of this ManualRunInputV1.
        :type: int
        """

        self._look_ahead_duration_seconds = look_ahead_duration_seconds

    @property
    def lookback_duration_seconds(self):
        """
        Gets the lookback_duration_seconds of this ManualRunInputV1.
        How far to look back for capsules, in seconds

        :return: The lookback_duration_seconds of this ManualRunInputV1.
        :rtype: int
        """
        return self._lookback_duration_seconds

    @lookback_duration_seconds.setter
    def lookback_duration_seconds(self, lookback_duration_seconds):
        """
        Sets the lookback_duration_seconds of this ManualRunInputV1.
        How far to look back for capsules, in seconds

        :param lookback_duration_seconds: The lookback_duration_seconds of this ManualRunInputV1.
        :type: int
        """
        if lookback_duration_seconds is None:
            raise ValueError("Invalid value for `lookback_duration_seconds`, must not be `None`")

        self._lookback_duration_seconds = lookback_duration_seconds

    @property
    def table_batch_action(self):
        """
        Gets the table_batch_action of this ManualRunInputV1.
        What table action to take before publishing manual run capsules

        :return: The table_batch_action of this ManualRunInputV1.
        :rtype: str
        """
        return self._table_batch_action

    @table_batch_action.setter
    def table_batch_action(self, table_batch_action):
        """
        Sets the table_batch_action of this ManualRunInputV1.
        What table action to take before publishing manual run capsules

        :param table_batch_action: The table_batch_action of this ManualRunInputV1.
        :type: str
        """

        self._table_batch_action = table_batch_action

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ManualRunInputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
