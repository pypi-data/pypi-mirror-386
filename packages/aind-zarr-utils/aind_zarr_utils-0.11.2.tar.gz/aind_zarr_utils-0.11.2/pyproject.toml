[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "aind-zarr-utils"
description = "Utilities for working with ZARR data and AIND metadata"
license = "MIT"
requires-python = ">=3.10"
authors = [
  { name = "Galen Lynch", email = "galen@galenlynch.com" },
  { name = "Allen Institute for Neural Dynamics" },
]
classifiers = ["Programming Language :: Python :: 3"]
readme = "README.md"
version = "0.11.2"

dependencies = [
  "aind-anatomical-utils>=0.4, <0.5",
  "aind-registration-utils>=0.1,<0.5",
  "aind-s3-cache>=0.1,<0.2",
  "antspyx>=0.2,<0.7",
  # boto3
  # Package depends on boto3, but ome-zarr requires s3fs and this causes
  # pip dependency resolution issues if specified here.
  "numpy>=2,<3",
  "ome-zarr>=0.7,<0.13",
  "requests>=2,<3",
  # This is a workaround for pip dependency problems with ome-zarr: s3fs is
  # NOT a direct dependency of this package, but ome-zarr requires it.
  # boto3 option required to help pip resolve dependencies
  "s3fs[boto3]>=2021",
  "SimpleITK>=2,<3",
]

[project.urls]
Repository = "https://github.com/AllenNeuralDynamics/aind-zarr-utils/"
Issues = "https://github.com/AllenNeuralDynamics/aind-zarr-utils/issues"
Changelog = "https://github.com/AllenNeuralDynamics/aind-zarr-utils/blob/main/CHANGELOG.md"

[dependency-groups]
types = ["mypy", "types-requests", "boto3-stubs[s3]"]
dev = [
  { include-group = "types" },
  "codespell",
  "pytest",
  "pytest-cov",
  "ruff",
  "interrogate",
]
jupyter = [{ include-group = "dev" }, "ipykernel", "pip"]
docs = [
  { include-group = "dev" },
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
  "pymdown-extensions",
  "ruff",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"aind_zarr_utils" = ["py.typed"]

[tool.ruff]
line-length = 79
target-version = "py311"

[tool.black]
line-length = 79
target-version = ["py311"]
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | build
    | dist
  )/
  | .gitignore
)
'''

[tool.ruff.lint]
extend-select = ["Q", "RUF100", "C90", "I", "F", "E", "W", "UP", "ANN", "PYI"]
extend-ignore = ["ANN401"]
per-file-ignores = { "tests/*.py" = [
  "ANN",
], "docs/**/*.py" = [
  "ANN",
], "notebooks/*.py" = [
  "ANN",
] }
mccabe = { max-complexity = 14 }
pydocstyle = { convention = "numpy" }

[tool.codespell]
skip = '.git,*.pdf,*.svg,./bonsai,*.bonsai,./docs/_build,uv.lock,./doc_template,./docs/build'
ignore-words-list = "nd"

[tool.pytest.ini_options]
addopts = "--strict-markers --tb=short --cov=src --cov-report=term-missing --cov-fail-under=0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
omit = ["*__init__*"]
source = ["src"]

[tool.coverage.report]
exclude_lines = ["if __name__ == .__main__.:", "# pragma: no cover"]
fail_under = 30

[tool.isort]
line_length = 79
profile = "black"

[tool.interrogate]
ignore-init-method = true
ignore-magic = true
ignore_module = true
fail-under = 30
exclude = [
  "__init__.py",
  "tests",
  "docs",
  "build",
  "setup.py",
  "examples",
  "site",
]

[tool.commitizen]
version_provider = "pep621"
version_files = ["src/aind_zarr_utils/__init__.py:__version__"]
update_changelog_on_bump = true
tag_format = "v$version"
major_version_zero = true

[tool.mypy]
files = ["src/aind_zarr_utils"]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
