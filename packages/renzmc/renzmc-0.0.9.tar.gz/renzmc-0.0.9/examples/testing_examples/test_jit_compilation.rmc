// ============================================
// Test JIT Compilation - Verifikasi Aktif
// ============================================
// Test untuk memverifikasi bahwa JIT compilation benar-benar aktif

tampilkan "ðŸ”¬ Test JIT Compilation - RenzMcLang"
tampilkan "======================================"
tampilkan ""

// Fungsi sederhana untuk testing
buat fungsi test_numeric dengan x, y
    hasil1 itu x * x
    hasil2 itu y * y
    total itu hasil1 + hasil2
    hasil total
selesai

// Fungsi dengan loop (ideal untuk JIT)
buat fungsi fibonacci dengan n
    jika n <= 1
        hasil n
    selesai
    
    a itu 0
    b itu 1
    
    untuk i dari 2 sampai n
        temp itu a + b
        a itu b
        b itu temp
    selesai
    
    hasil b
selesai

// Fungsi faktorial (recursive-style dengan loop)
buat fungsi faktorial dengan n
    hasil itu 1
    untuk i dari 1 sampai n
        hasil itu hasil * i
    selesai
    hasil hasil
selesai

tampilkan "ðŸ“Š Phase 1: Warming up (0-9 calls)"
tampilkan "Memanggil fungsi sebelum JIT threshold..."
tampilkan ""

// Panggil 9 kali (belum JIT)
untuk i dari 1 sampai 9
    hasil itu panggil test_numeric dengan i, i+1
    tampilkan f"Call {i}: test_numeric({i}, {i+1}) = {hasil}"
selesai

tampilkan ""
tampilkan "âœ… Phase 1 selesai - Fungsi belum dikompilasi JIT"
tampilkan ""

tampilkan "ðŸ”¥ Phase 2: Triggering JIT (call 10)"
tampilkan "Panggilan ke-10 akan trigger JIT compilation..."
tampilkan ""

// Panggil ke-10 (trigger JIT)
hasil itu panggil test_numeric dengan 10, 11
tampilkan f"Call 10: test_numeric(10, 11) = {hasil}"

tampilkan ""
tampilkan "âœ… JIT compilation triggered!"
tampilkan ""

tampilkan "ðŸš€ Phase 3: Using JIT compiled version (11-20)"
tampilkan "Menggunakan versi JIT yang sudah dikompilasi..."
tampilkan ""

// Panggil 11-20 (menggunakan JIT)
untuk i dari 11 sampai 20
    hasil itu panggil test_numeric dengan i, i+1
    tampilkan f"Call {i}: test_numeric({i}, {i+1}) = {hasil} (JIT)"
selesai

tampilkan ""
tampilkan "======================================"
tampilkan "ðŸŽ¯ Test Fibonacci dengan JIT"
tampilkan "======================================"
tampilkan ""

// Test fibonacci (15 calls untuk trigger JIT)
untuk i dari 1 sampai 15
    hasil itu panggil fibonacci dengan i
    jika i <= 10
        tampilkan f"fibonacci({i}) = {hasil} (warming up)"
    lainnya
        tampilkan f"fibonacci({i}) = {hasil} (JIT aktif)"
    selesai
selesai

tampilkan ""
tampilkan "======================================"
tampilkan "ðŸŽ¯ Test Faktorial dengan JIT"
tampilkan "======================================"
tampilkan ""

// Test faktorial (15 calls untuk trigger JIT)
untuk i dari 1 sampai 15
    hasil itu panggil faktorial dengan i
    jika i <= 10
        tampilkan f"faktorial({i}) = {hasil} (warming up)"
    lainnya
        tampilkan f"faktorial({i}) = {hasil} (JIT aktif)"
    selesai
selesai

tampilkan ""
tampilkan "======================================"
tampilkan "âœ… HASIL TEST JIT COMPILATION"
tampilkan "======================================"
tampilkan ""
tampilkan "âœ… test_numeric: 20 panggilan (JIT aktif setelah ke-10)"
tampilkan "âœ… fibonacci: 15 panggilan (JIT aktif setelah ke-10)"
tampilkan "âœ… faktorial: 15 panggilan (JIT aktif setelah ke-10)"
tampilkan ""
tampilkan "ðŸŽ‰ Semua fungsi berhasil dikompilasi dengan JIT!"
tampilkan "ðŸš€ Performa dioptimasi secara otomatis!"